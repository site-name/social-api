extend type Mutation {
  giftCardActivate(id: ID!): GiftCardActivate
  giftCardCreate(input: GiftCardCreateInput!): GiftCardCreate
  giftCardDelete(id: ID!): GiftCardDelete
  giftCardDeactivate(id: ID!): GiftCardDeactivate
  giftCardUpdate(id: ID!, input: GiftCardUpdateInput!): GiftCardUpdate
  giftCardResend(input: GiftCardResendInput!): GiftCardResend
  giftCardAddNote(id: ID!, input: GiftCardAddNoteInput!): GiftCardAddNote
  giftCardBulkDelete(ids: [ID]!): GiftCardBulkDelete
  giftCardBulkActivate(ids: [ID]!): GiftCardBulkActivate
  giftCardBulkDeactivate(ids: [ID]!): GiftCardBulkDeactivate
}

extend type Query {
  giftCard(id: ID!): GiftCard
  giftCardSettings: GiftCardSettings!
  giftCards(sortBy: GiftCardSortingInput, filter: GiftCardFilterInput, before: String, after: String, first: Int, last: Int): GiftCardCountableConnection
  giftCardCurrencies: [String!]!
}

type GiftCard implements Node & ObjectWithMetadata {
  code: String!
  isActive: Boolean!
  expiryDate: Date
  tag: String
  created: DateTime!
  lastUsedOn: DateTime
  initialBalance: Money
  currentBalance: Money
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  displayCode: String!
  createdBy: User
  usedBy: User
  createdByEmail: String
  usedByEmail: String
  app: App
  product: Product
  events: [GiftCardEvent!]!
  boughtInChannel: String
}

type GiftCardActivate {
  giftCard: GiftCard
  errors: [GiftCardError!]!
}

input GiftCardCreateInput {
  tag: String
  expiryDate: Date
  startDate: Date
  endDate: Date
  balance: PriceInput!
  userEmail: String
  channel: String
  isActive: Boolean!
  code: String
  note: String
}

type GiftCardCreate {
  errors: [GiftCardError!]!
  giftCard: GiftCard
}

type GiftCardDeactivate {
  giftCard: GiftCard
  errors: [GiftCardError!]!
}

input GiftCardUpdateInput {
  tag: String
  expiryDate: Date
  startDate: Date
  endDate: Date
  balanceAmount: PositiveDecimal
}

type GiftCardUpdate {
  errors: [GiftCardError!]!
  giftCard: GiftCard
}

type GiftCardCountableConnection {
  pageInfo: PageInfo!
  edges: [GiftCard!]! # edges: [GiftCardCountableEdge!]!
  totalCount: Int
}

type GiftCardCountableEdge {
  node: GiftCard!
  cursor: String!
}

type GiftCardError {
  field: String
  message: String
  code: GiftCardErrorCode!
}

enum GiftCardErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type GiftCardAddNote {
  giftCard: GiftCard
  event: GiftCardEvent
  errors: [GiftCardError!]!
}

input GiftCardAddNoteInput {
  message: String!
}

type GiftCardBulkActivate {
  count: Int!
  errors: [GiftCardError!]!
}

type GiftCardBulkDeactivate {
  count: Int!
  errors: [GiftCardError!]!
}

type GiftCardBulkDelete {
  count: Int!
  errors: [GiftCardError!]!
}

type GiftCardEvent implements Node {
  id: ID!
  date: DateTime
  type: GiftCardEventsEnum
  user: User
  app: App
  message: String
  email: String
  orderId: ID
  orderNumber: String
  tag: String
  oldTag: String
  balance: GiftCardEventBalance
  expiryDate: Date
  oldExpiryDate: Date
}

type GiftCardEventBalance {
  initialBalance: Money
  currentBalance: Money!
  oldInitialBalance: Money
  oldCurrentBalance: Money
}

enum GiftCardEventsEnum {
  ISSUED
  BOUGHT
  UPDATED
  ACTIVATED
  DEACTIVATED
  BALANCE_RESET
  EXPIRY_DATE_UPDATED
  TAG_UPDATED
  SENT_TO_CUSTOMER
  RESENT
  NOTE_ADDED
  USED_IN_ORDER
}

input GiftCardFilterInput {
  isActive: Boolean
  tag: String
  tags: [String]
  products: [ID]
  usedBy: [ID]
  currency: String
  currentBalance: PriceRangeInput
  initialBalance: PriceRangeInput
}

type GiftCardResend {
  giftCard: GiftCard
  errors: [GiftCardError!]!
}

input GiftCardResendInput {
  id: ID!
  email: String
  channel: String!
}

type GiftCardSettings {
  expiryType: GiftCardSettingsExpiryTypeEnum!
  expiryPeriod: TimePeriod
}

type GiftCardSettingsError {
  field: String
  message: String
  code: GiftCardSettingsErrorCode!
}

enum GiftCardSettingsErrorCode {
  INVALID
  REQUIRED
  GRAPHQL_ERROR
}

enum GiftCardSettingsExpiryTypeEnum {
  NEVER_EXPIRE
  EXPIRY_PERIOD
}

type GiftCardSettingsUpdate {
  giftCardSettings: GiftCardSettings
  errors: [GiftCardSettingsError!]!
}

input GiftCardSettingsUpdateInput {
  expiryType: GiftCardSettingsExpiryTypeEnum
  expiryPeriod: TimePeriodInputType
}

enum GiftCardSortField {
  TAG
  PRODUCT
  USED_BY
  CURRENT_BALANCE
}

input GiftCardSortingInput {
  direction: OrderDirection!
  field: GiftCardSortField!
}
