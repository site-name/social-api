extend type Mutation {
  appCreate(input: AppInput!): AppCreate
  appUpdate(id: ID!, input: AppInput!): AppUpdate
  appDelete(id: ID!): AppDelete
  appTokenCreate(input: AppTokenInput!): AppTokenCreate
  appTokenDelete(id: ID!): AppTokenDelete
  appTokenVerify(token: String!): AppTokenVerify
  appInstall(input: AppInstallInput!): AppInstall
  appRetryInstall(activateAfterInstallation: Boolean = true, id: ID!): AppRetryInstall
  appDeleteFailedInstallation(id: ID!): AppDeleteFailedInstallation
  appFetchManifest(manifestUrl: String!): AppFetchManifest
  appActivate(id: ID!): AppActivate
  appDeactivate(id: ID!): AppDeactivate
}

extend type Query {
  appsInstallations: [AppInstallation!]!
  apps(filter: AppFilterInput, sortBy: AppSortingInput, before: String, after: String, first: Int, last: Int): AppCountableConnection
  app(id: ID): App
  appExtensions(filter: AppExtensionFilterInput, before: String, after: String, first: Int, last: Int): AppExtensionCountableConnection
  appExtension(id: ID!): AppExtension
}

type App implements Node & ObjectWithMetadata {
  id: ID!
  name: String
  created: DateTime
  isActive: Boolean
  permissions: [Permission]
  tokens: [AppToken]
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  type: AppTypeEnum
  webhooks: [Webhook]
  aboutApp: String
  dataPrivacy: String
  dataPrivacyUrl: String
  homepageUrl: String
  supportUrl: String
  configurationUrl: String
  appUrl: String
  version: String
  accessToken: String
  extensions: [AppExtension!]!
}

type AppExtension implements Node {
  id: ID!
  app: App!
  label: String!
  url: String!
  view: AppExtensionViewEnum!
  type: AppExtensionTypeEnum!
  target: AppExtensionTargetEnum!
  permissions: [Permission!]!
  accessToken: String
}

type AppExtensionCountableConnection {
  pageInfo: PageInfo!
  edges: [AppExtensionCountableEdge!]!
  totalCount: Int
}

type AppExtensionCountableEdge {
  node: AppExtension!
  cursor: String!
}

input AppExtensionFilterInput {
  view: AppExtensionViewEnum
  type: AppExtensionTypeEnum
  target: AppExtensionTargetEnum
}

enum AppExtensionTargetEnum {
  MORE_ACTIONS
  CREATE
}

enum AppExtensionTypeEnum {
  OVERVIEW
  DETAILS
}

enum AppExtensionViewEnum {
  PRODUCT
}

type AppManifestExtension {
  permissions: [Permission!]!
  label: String!
  url: String!
  view: AppExtensionViewEnum!
  type: AppExtensionTypeEnum!
  target: AppExtensionTargetEnum!
}

input AppInput {
  name: String
  permissions: [PermissionEnum]
}

type AppCreate {
  authToken: String
  errors: [AppError!]!
  app: App
}

type AppUpdate {
  errors: [AppError!]!
  app: App
}

input AppTokenInput {
  name: String
  app: ID!
}

type AppTokenCreate {
  authToken: String
  errors: [AppError!]!
  appToken: AppToken
}

type AppTokenDelete {
  errors: [AppError!]!
  appToken: AppToken
}

type AppTokenVerify {
  valid: Boolean!
  errors: [AppError!]!
}

type AppInstall {
  errors: [AppError!]!
  appInstallation: AppInstallation
}

type AppRetryInstall {
  errors: [AppError!]!
  appInstallation: AppInstallation
}

type AppDeleteFailedInstallation {
  errors: [AppError!]!
  appInstallation: AppInstallation
}

type AppFetchManifest {
  manifest: Manifest
  errors: [AppError!]!
}

type AppActivate {
  errors: [AppError!]!
  app: App
}

type AppDeactivate {
  errors: [AppError!]!
  app: App
}

type AppInstallation implements Node & Job {
  appName: String!
  manifestUrl: String!
  id: ID!
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
}

input AppFilterInput {
  search: String
  isActive: Boolean
  type: AppTypeEnum
}

enum AppSortField {
  NAME
  CREATION_DATE
}

input AppSortingInput {
  direction: OrderDirection!
  field: AppSortField!
}

type AppCountableConnection {
  pageInfo: PageInfo!
  edges: [AppCountableEdge!]!
  totalCount: Int
}

type AppCountableEdge {
  node: App!
  cursor: String!
}

enum AppTypeEnum {
  LOCAL
  THIRDPARTY
}

type AppDelete {
  errors: [AppError!]!
  app: App
}

type AppError {
  field: String
  message: String
  code: AppErrorCode!
  permissions: [PermissionEnum!]
}

enum AppErrorCode {
  FORBIDDEN
  GRAPHQL_ERROR
  INVALID
  INVALID_STATUS
  INVALID_PERMISSION
  INVALID_URL_FORMAT
  INVALID_MANIFEST_FORMAT
  MANIFEST_URL_CANT_CONNECT
  NOT_FOUND
  REQUIRED
  UNIQUE
  OUT_OF_SCOPE_APP
  OUT_OF_SCOPE_PERMISSION
}

type AppToken implements Node {
  name: String
  authToken: String
  id: ID!
}

input AppInstallInput {
  appName: String
  manifestUrl: String
  activateAfterInstallation: Boolean = true
  permissions: [PermissionEnum]
}

type Manifest {
  identifier: String!
  version: String!
  name: String!
  about: String
  permissions: [Permission]
  appUrl: String
  configurationUrl: String
  tokenTargetUrl: String
  dataPrivacy: String
  dataPrivacyUrl: String
  homepageUrl: String
  supportUrl: String
  extensions: [AppManifestExtension!]!
}
