schema {
  query: Query
  mutation: Mutation
}

scalar PlaceHolder

enum AreaUnitsEnum {
  SQ_CM
  SQ_M
  SQ_KM
  SQ_FT
  SQ_YD
  SQ_INCH
}

type AssignNavigation {
  menu: Menu
  errors: [MenuError!]!
}

input AttributeValueInput {
  id: ID
  values: [String]
  file: String
  contentType: String
  references: [ID!]
  richText: JSONString
  boolean: Boolean
}

enum CategorySortField {
  NAME
  PRODUCT_COUNT
  SUBCATEGORY_COUNT
}

type ConfigurationItem {
  name: String!
  value: String
  type: ConfigurationTypeFieldEnum
  helpText: String
  label: String
}

input ConfigurationItemInput {
  name: String!
  value: String
}

enum ConfigurationTypeFieldEnum {
  STRING
  MULTILINE
  BOOLEAN
  SECRET
  PASSWORD
  SECRETMULTILINE
  OUTPUT
}

enum CountryCode {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  CV
  KH
  CM
  CA
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  EU
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MK
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  UM
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}

scalar Date

input DateRangeInput {
  gte: Date
  lte: Date
}

scalar DateTime

input DateTimeRangeInput {
  gte: DateTime
  lte: DateTime
}

enum DistanceUnitsEnum {
  CM
  M
  KM
  FT
  YD
  INCH
}

type Domain {
  host: String!
  sslEnabled: Boolean!
  url: String!
}

type File {
  url: String!
  contentType: String
}

type FileUpload {
  uploadedFile: File
  errors: [UploadError!]!
}

scalar GenericScalar

input IntRangeInput {
  gte: Int
  lte: Int
}

scalar JSONString

interface Job {
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
}

enum JobStatusEnum {
  PENDING
  SUCCESS
  FAILED
  DELETED
}

enum LanguageCodeEnum {
  AR
  AZ
  BG
  BN
  CA
  CS
  DA
  DE
  EL
  EN
  ES
  ES_CO
  ET
  FA
  FI
  FR
  HI
  HU
  HY
  ID
  IS
  IT
  JA
  KA
  KM
  KO
  LT
  MN
  MY
  NB
  NL
  PL
  PT
  PT_BR
  RO
  RU
  SK
  SL
  SQ
  SR
  SV
  SW
  TA
  TH
  TR
  UK
  VI
  ZH_HANS
  ZH_HANT
}

type LanguageDisplay {
  code: LanguageCodeEnum!
  language: String!
}

enum MeasurementUnitsEnum {
  CM
  M
  KM
  FT
  YD
  INCH
  SQ_CM
  SQ_M
  SQ_KM
  SQ_FT
  SQ_YD
  SQ_INCH
  CUBIC_MILLIMETER
  CUBIC_CENTIMETER
  CUBIC_DECIMETER
  CUBIC_METER
  LITER
  CUBIC_FOOT
  CUBIC_INCH
  CUBIC_YARD
  QT
  PINT
  FL_OZ
  ACRE_IN
  ACRE_FT
  G
  LB
  OZ
  KG
  TONNE
}

type Money {
  currency: String!
  amount: Float!
}

type MoneyRange {
  start: Money
  stop: Money
}

type Mutation {
  variantMediaAssign(mediaId: ID!, variantId: ID!): VariantMediaAssign
  variantMediaUnassign(mediaId: ID!, variantId: ID!): VariantMediaUnassign
  assignNavigation(menu: ID, navigationType: NavigationType!): AssignNavigation
  fileUpload(file: Upload!): FileUpload
}

enum NavigationType {
  MAIN
  SECONDARY
}

interface Node {
  id: ID!
}

type OrderEventCountableConnection {
  pageInfo: PageInfo!
  edges: [OrderEventCountableEdge!]!
  totalCount: Int
}

type OrderEventCountableEdge {
  node: OrderEvent!
  cursor: String!
}

scalar PositiveDecimal

# type ProductImage {
#   id: ID!
#   alt: String
#   sortOrder: Int
#   url(size: Int): String!
# }

type Query {
  reportProductSales(period: ReportingPeriod!, channel: String!, before: String, after: String, first: Int, last: Int): ProductVariantCountableConnection
  homepageEvents(before: String, after: String, first: Int, last: Int): OrderEventCountableConnection
  taxTypes: [TaxType]
}

enum ReportingPeriod {
  TODAY
  THIS_MONTH
}

type TaxType {
  description: String
  taxCode: String
}

type TaxedMoney {
  currency: String!
  gross: Money!
  net: Money!
  tax: Money!
}

type TaxedMoneyRange {
  start: TaxedMoney
  stop: TaxedMoney
}

scalar UUID

scalar Upload

type UploadError {
  field: String
  message: String
  code: UploadErrorCode!
}

enum UploadErrorCode {
  GRAPHQL_ERROR
}

type VariantMediaAssign {
  productVariant: ProductVariant
  media: ProductMedia
  errors: [ProductError!]!
}

type VariantMediaUnassign {
  productVariant: ProductVariant
  media: ProductMedia
  errors: [ProductError!]!
}

enum VolumeUnitsEnum {
  CUBIC_MILLIMETER
  CUBIC_CENTIMETER
  CUBIC_DECIMETER
  CUBIC_METER
  LITER
  CUBIC_FOOT
  CUBIC_INCH
  CUBIC_YARD
  QT
  PINT
  FL_OZ
  ACRE_IN
  ACRE_FT
}

type Weight {
  unit: WeightUnitsEnum!
  value: Float!
}

scalar WeightScalar

enum WeightUnitsEnum {
  G
  LB
  OZ
  KG
  TONNE
}
