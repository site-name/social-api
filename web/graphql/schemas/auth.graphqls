extend type Mutation {
  tokenCreate(email: String!, password: String!): CreateToken
  tokenRefresh(csrfToken: String, refreshToken: String): RefreshToken
  tokenVerify(token: String!): VerifyToken
  tokensDeactivateAll: DeactivateAllUserTokens
  externalAuthenticationUrl(input: JSONString!, pluginId: String!): ExternalAuthenticationUrl
  externalObtainAccessTokens(input: JSONString!, pluginId: String!): ExternalObtainAccessTokens
  externalRefresh(input: JSONString!, pluginId: String!): ExternalRefresh
  externalLogout(input: JSONString!, pluginId: String!): ExternalLogout
  externalVerify(input: JSONString!, pluginId: String!): ExternalVerify
  requestPasswordReset(channel: String, email: String!, redirectUrl: String!): RequestPasswordReset
  confirmAccount(email: String!, token: String!): ConfirmAccount
  setPassword(email: String!, password: String!, token: String!): SetPassword
  passwordChange(newPassword: String!, oldPassword: String!): PasswordChange
  requestEmailChange(channel: String, newEmail: String!, password: String!, redirectUrl: String!): RequestEmailChange
  confirmEmailChange(channel: String, token: String!): ConfirmEmailChange
}

type CreateToken {
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  errors: [AccountError!]!
}

type RefreshToken {
  token: String
  user: User
  errors: [AccountError!]!
}

type VerifyToken {
  user: User
  isValid: Boolean!
  payload: GenericScalar
  errors: [AccountError!]!
}

type DeactivateAllUserTokens {
  errors: [AccountError!]!
}

type ExternalAuthenticationUrl {
  authenticationData: JSONString
  errors: [AccountError!]!
}

type ExternalObtainAccessTokens {
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  errors: [AccountError!]!
}

type ExternalRefresh {
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  errors: [AccountError!]!
}

type ExternalLogout {
  logoutData: JSONString
  errors: [AccountError!]!
}

type ExternalVerify {
  user: User
  isValid: Boolean!
  verifyData: JSONString
  errors: [AccountError!]!
}

type RequestPasswordReset {
  errors: [AccountError!]!
}

type ConfirmAccount {
  user: User
  errors: [AccountError!]!
}

type SetPassword {
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  errors: [AccountError!]!
}

type PasswordChange {
  user: User
  errors: [AccountError!]!
}

type RequestEmailChange {
  user: User
  errors: [AccountError!]!
}

type ConfirmEmailChange {
  user: User
  errors: [AccountError!]!
}
