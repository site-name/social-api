schema {
  query: Query
  mutation: Mutation
}

type AccountAddressCreate {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  address: Address
}

type AccountAddressDelete {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  address: Address
}

type AccountAddressUpdate {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  address: Address
}

type AccountDelete {
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  user: User
}

type AccountError {
  field: String
  message: String
  code: AccountErrorCode!
  addressType: AddressTypeEnum
}

enum AccountErrorCode {
  ACTIVATE_OWN_ACCOUNT
  ACTIVATE_SUPERUSER_ACCOUNT
  DUPLICATED_INPUT_ITEM
  DEACTIVATE_OWN_ACCOUNT
  DEACTIVATE_SUPERUSER_ACCOUNT
  DELETE_NON_STAFF_USER
  DELETE_OWN_ACCOUNT
  DELETE_STAFF_ACCOUNT
  DELETE_SUPERUSER_ACCOUNT
  GRAPHQL_ERROR
  INACTIVE
  INVALID
  INVALID_PASSWORD
  LEFT_NOT_MANAGEABLE_PERMISSION
  INVALID_CREDENTIALS
  NOT_FOUND
  OUT_OF_SCOPE_USER
  OUT_OF_SCOPE_GROUP
  OUT_OF_SCOPE_PERMISSION
  PASSWORD_ENTIRELY_NUMERIC
  PASSWORD_TOO_COMMON
  PASSWORD_TOO_SHORT
  PASSWORD_TOO_SIMILAR
  REQUIRED
  UNIQUE
  JWT_SIGNATURE_EXPIRED
  JWT_INVALID_TOKEN
  JWT_DECODE_ERROR
  JWT_MISSING_TOKEN
  JWT_INVALID_CSRF_TOKEN
  CHANNEL_INACTIVE
  MISSING_CHANNEL_SLUG
}

input AccountInput {
  firstName: String
  lastName: String
  defaultBillingAddress: AddressInput
  defaultShippingAddress: AddressInput
  languageCode: LanguageCodeEnum
}

type AccountRegister {
  requiresConfirmation: Boolean
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  user: User
}

input AccountRegisterInput {
  email: String!
  password: String!
  redirectUrl: String
  languageCode: LanguageCodeEnum
  metadata: [MetadataInput!]
  channel: String
}

type AccountRequestDeletion {
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type AccountSetDefaultAddress {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type AccountUpdate {
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  user: User
}

type Address implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  companyName: String!
  streetAddress1: String!
  streetAddress2: String!
  city: String!
  cityArea: String!
  postalCode: String!
  country: CountryDisplay!
  countryArea: String!
  phone: String
  isDefaultShippingAddress: Boolean
  isDefaultBillingAddress: Boolean
}

type AddressCreate {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  address: Address
}

type AddressDelete {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  address: Address
}

input AddressInput {
  firstName: String
  lastName: String
  companyName: String
  streetAddress1: String
  streetAddress2: String
  city: String
  cityArea: String
  postalCode: String
  country: CountryCode
  countryArea: String
  phone: String
}

type AddressSetDefault {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

enum AddressTypeEnum {
  BILLING
  SHIPPING
}

type AddressUpdate {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  address: Address
}

type AddressValidationData {
  countryCode: String
  countryName: String
  addressFormat: String
  addressLatinFormat: String
  allowedFields: [String]
  requiredFields: [String]
  upperFields: [String]
  countryAreaType: String
  countryAreaChoices: [ChoiceValue]
  cityType: String
  cityChoices: [ChoiceValue]
  cityAreaType: String
  cityAreaChoices: [ChoiceValue]
  postalCodeType: String
  postalCodeMatchers: [String]
  postalCodeExamples: [String]
  postalCodePrefix: String
}

type Allocation implements Node {
  id: ID!
  quantity: Int!
  warehouse: Warehouse!
}

type App implements Node & ObjectWithMetadata {
  id: ID!
  name: String
  created: DateTime
  isActive: Boolean
  permissions: [Permission]
  tokens: [AppToken]
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  type: AppTypeEnum
  webhooks: [Webhook]
  aboutApp: String
  dataPrivacy: String
  dataPrivacyUrl: String
  homepageUrl: String
  supportUrl: String
  configurationUrl: String
  appUrl: String
  version: String
  accessToken: String
}

type AppActivate {
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
  app: App
}

type AppCountableConnection {
  pageInfo: PageInfo!
  edges: [AppCountableEdge!]!
  totalCount: Int
}

type AppCountableEdge {
  node: App!
  cursor: String!
}

type AppCreate {
  authToken: String
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
  app: App
}

type AppDeactivate {
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
  app: App
}

type AppDelete {
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
  app: App
}

type AppDeleteFailedInstallation {
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
  appInstallation: AppInstallation
}

type AppError {
  field: String
  message: String
  code: AppErrorCode!
  permissions: [PermissionEnum!]
}

enum AppErrorCode {
  FORBIDDEN
  GRAPHQL_ERROR
  INVALID
  INVALID_STATUS
  INVALID_PERMISSION
  INVALID_URL_FORMAT
  INVALID_MANIFEST_FORMAT
  MANIFEST_URL_CANT_CONNECT
  NOT_FOUND
  REQUIRED
  UNIQUE
  OUT_OF_SCOPE_APP
  OUT_OF_SCOPE_PERMISSION
}

type AppFetchManifest {
  manifest: Manifest
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
}

input AppFilterInput {
  search: String
  isActive: Boolean
  type: AppTypeEnum
}

input AppInput {
  name: String
  permissions: [PermissionEnum]
}

type AppInstall {
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
  appInstallation: AppInstallation
}

input AppInstallInput {
  appName: String
  manifestUrl: String
  activateAfterInstallation: Boolean = true
  permissions: [PermissionEnum]
}

type AppInstallation implements Node & Job {
  appName: String!
  manifestUrl: String!
  id: ID!
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
}

type AppRetryInstall {
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
  appInstallation: AppInstallation
}

enum AppSortField {
  NAME
  CREATION_DATE
}

input AppSortingInput {
  direction: OrderDirection!
  field: AppSortField!
}

type AppToken implements Node {
  name: String
  authToken: String
  id: ID!
}

type AppTokenCreate {
  authToken: String
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
  appToken: AppToken
}

type AppTokenDelete {
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
  appToken: AppToken
}

input AppTokenInput {
  name: String
  app: ID!
}

type AppTokenVerify {
  valid: Boolean!
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
}

enum AppTypeEnum {
  LOCAL
  THIRDPARTY
}

type AppUpdate {
  # appErrors: [AppError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AppError!]!
  app: App
}

enum AreaUnitsEnum {
  SQ_CM
  SQ_M
  SQ_KM
  SQ_FT
  SQ_YD
  SQ_INCH
}

type AssignNavigation {
  menu: Menu
  # menuErrors: [MenuError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MenuError!]!
}

type Attribute implements Node & ObjectWithMetadata {
  id: ID!
  productTypes(before: String, after: String, first: Int, last: Int): ProductTypeCountableConnection!
  productVariantTypes(before: String, after: String, first: Int, last: Int): ProductTypeCountableConnection!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  inputType: AttributeInputTypeEnum
  entityType: AttributeEntityTypeEnum
  name: String
  slug: String
  type: AttributeTypeEnum
  unit: MeasurementUnitsEnum
  values: [AttributeValue]
  valueRequired: Boolean!
  visibleInStorefront: Boolean!
  filterableInStorefront: Boolean!
  filterableInDashboard: Boolean!
  availableInGrid: Boolean!
  translation(languageCode: LanguageCodeEnum!): AttributeTranslation
  storefrontSearchPosition: Int!
}

type AttributeBulkDelete {
  count: Int!
  # attributeErrors: [AttributeError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AttributeError!]!
}

type AttributeCountableConnection {
  pageInfo: PageInfo!
  edges: [AttributeCountableEdge!]!
  totalCount: Int
}

type AttributeCountableEdge {
  node: Attribute!
  cursor: String!
}

type AttributeCreate {
  attribute: Attribute
  # attributeErrors: [AttributeError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AttributeError!]!
}

input AttributeCreateInput {
  inputType: AttributeInputTypeEnum
  entityType: AttributeEntityTypeEnum
  name: String!
  slug: String
  type: AttributeTypeEnum!
  unit: MeasurementUnitsEnum
  values: [AttributeValueCreateInput]
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  storefrontSearchPosition: Int
  availableInGrid: Boolean
}

type AttributeDelete {
  # attributeErrors: [AttributeError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AttributeError!]!
  attribute: Attribute
}

enum AttributeEntityTypeEnum {
  PAGE
  PRODUCT
}

type AttributeError {
  field: String
  message: String
  code: AttributeErrorCode!
}

enum AttributeErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input AttributeFilterInput {
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  availableInGrid: Boolean
  metadata: [MetadataInput]
  search: String
  ids: [ID]
  type: AttributeTypeEnum
  inCollection: ID
  inCategory: ID
  channel: String
}

input AttributeInput {
  slug: String!
  values: [String]
  valuesRange: IntRangeInput
}

enum AttributeInputTypeEnum {
  DROPDOWN
  MULTISELECT
  FILE
  REFERENCE
  NUMERIC
  RICH_TEXT
}

type AttributeReorderValues {
  attribute: Attribute
  # attributeErrors: [AttributeError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AttributeError!]!
}

enum AttributeSortField {
  NAME
  SLUG
  VALUE_REQUIRED
  IS_VARIANT_ONLY
  VISIBLE_IN_STOREFRONT
  FILTERABLE_IN_STOREFRONT
  FILTERABLE_IN_DASHBOARD
  STOREFRONT_SEARCH_POSITION
  AVAILABLE_IN_GRID
}

input AttributeSortingInput {
  direction: OrderDirection!
  field: AttributeSortField!
}

type AttributeTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): AttributeTranslation
  attribute: Attribute
}

type AttributeTranslate {
  # translationErrors: [TranslationError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [TranslationError!]!
  attribute: Attribute
}

type AttributeTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

enum AttributeTypeEnum {
  PRODUCT_TYPE
  PAGE_TYPE
}

type AttributeUpdate {
  attribute: Attribute
  # attributeErrors: [AttributeError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AttributeError!]!
}

input AttributeUpdateInput {
  name: String
  slug: String
  unit: MeasurementUnitsEnum
  removeValues: [ID]
  addValues: [AttributeValueCreateInput]
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  storefrontSearchPosition: Int
  availableInGrid: Boolean
}

type AttributeValue implements Node {
  id: ID!
  name: String
  slug: String
  value: String
  translation(languageCode: LanguageCodeEnum!): AttributeValueTranslation
  inputType: AttributeInputTypeEnum
  reference: ID
  file: File
  richText: JSONString
}

type AttributeValueBulkDelete {
  count: Int!
  # attributeErrors: [AttributeError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AttributeError!]!
}

type AttributeValueCreate {
  attribute: Attribute
  # attributeErrors: [AttributeError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AttributeError!]!
  attributeValue: AttributeValue
}

input AttributeValueCreateInput {
  name: String!
  value: String
  richText: JSONString
}

type AttributeValueDelete {
  attribute: Attribute
  # attributeErrors: [AttributeError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AttributeError!]!
  attributeValue: AttributeValue
}

input AttributeValueInput {
  id: ID
  values: [String]
  file: String
  contentType: String
  references: [ID!]
  richText: JSONString
}

type AttributeValueTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): AttributeValueTranslation
  attributeValue: AttributeValue
}

type AttributeValueTranslate {
  # translationErrors: [TranslationError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [TranslationError!]!
  attributeValue: AttributeValue
}

type AttributeValueTranslation implements Node {
  id: ID!
  name: String!
  richText: JSONString
  language: LanguageDisplay!
}

input AttributeValueTranslationInput {
  name: String
  richText: JSONString
}

type AttributeValueUpdate {
  attribute: Attribute
  # attributeErrors: [AttributeError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AttributeError!]!
  attributeValue: AttributeValue
}

input BulkAttributeValueInput {
  id: ID
  values: [String]!
}

type BulkProductError {
  field: String
  message: String
  code: ProductErrorCode!
  attributes: [ID!]
  values: [ID!]
  index: Int
  warehouses: [ID!]
  channels: [ID!]
}

type BulkStockError {
  field: String
  message: String
  code: ProductErrorCode!
  attributes: [ID!]
  values: [ID!]
  index: Int
}

input CatalogueInput {
  products: [ID]
  categories: [ID]
  collections: [ID]
}

















enum CategorySortField {
  NAME
  PRODUCT_COUNT
  SUBCATEGORY_COUNT
}



type CategoryTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: JSONString
  # descriptionJson: JSONString @deprecated(reason: "Will be removed in Saleor 4.0. Use the `description` field instead.")
  translation(languageCode: LanguageCodeEnum!): CategoryTranslation
  category: Category
}







type Channel implements Node {
  id: ID!
  name: String!
  isActive: Boolean!
  slug: String!
  currencyCode: String!
  hasOrders: Boolean!
}

type ChannelActivate {
  channel: Channel
  # channelErrors: [ChannelError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ChannelError!]!
}

type ChannelCreate {
  # channelErrors: [ChannelError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ChannelError!]!
  channel: Channel
}

input ChannelCreateInput {
  isActive: Boolean
  name: String!
  slug: String!
  currencyCode: String!
  addShippingZones: [ID!]
}

type ChannelDeactivate {
  channel: Channel
  # channelErrors: [ChannelError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ChannelError!]!
}

type ChannelDelete {
  # channelErrors: [ChannelError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ChannelError!]!
  channel: Channel
}

input ChannelDeleteInput {
  channelId: ID!
}

type ChannelError {
  field: String
  message: String
  code: ChannelErrorCode!
  shippingZones: [ID!]
}

enum ChannelErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  CHANNELS_CURRENCY_MUST_BE_THE_SAME
  CHANNEL_WITH_ORDERS
  DUPLICATED_INPUT_ITEM
}

type ChannelUpdate {
  # channelErrors: [ChannelError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ChannelError!]!
  channel: Channel
}

input ChannelUpdateInput {
  isActive: Boolean
  name: String
  slug: String
  addShippingZones: [ID!]
  removeShippingZones: [ID!]
}

type Checkout implements Node & ObjectWithMetadata {
  created: DateTime!
  lastChange: DateTime!
  user: User
  channel: Channel!
  billingAddress: Address
  shippingAddress: Address
  note: String!
  discount: Money
  discountName: String
  translatedDiscountName: String
  voucherCode: String
  giftCards: [GiftCard]
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  availableShippingMethods: [ShippingMethod]!
  availablePaymentGateways: [PaymentGateway!]!
  email: String!
  isShippingRequired: Boolean!
  quantity: Int!
  lines: [CheckoutLine]
  shippingPrice: TaxedMoney
  shippingMethod: ShippingMethod
  subtotalPrice: TaxedMoney
  token: UUID!
  totalPrice: TaxedMoney
  languageCode: LanguageCodeEnum!
}

type CheckoutAddPromoCode {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutBillingAddressUpdate {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutComplete {
  order: Order
  confirmationNeeded: Boolean!
  confirmationData: JSONString
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutCountableConnection {
  pageInfo: PageInfo!
  edges: [CheckoutCountableEdge!]!
  totalCount: Int
}

type CheckoutCountableEdge {
  node: Checkout!
  cursor: String!
}

type CheckoutCreate {
  created: Boolean
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
  checkout: Checkout
}

input CheckoutCreateInput {
  channel: String
  lines: [CheckoutLineInput]!
  email: String
  shippingAddress: AddressInput
  billingAddress: AddressInput
  languageCode: LanguageCodeEnum
}

type CheckoutCustomerAttach {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutCustomerDetach {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutEmailUpdate {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutError {
  field: String
  message: String
  code: CheckoutErrorCode!
  variants: [ID!]
  addressType: AddressTypeEnum
}

enum CheckoutErrorCode {
  BILLING_ADDRESS_NOT_SET
  CHECKOUT_NOT_FULLY_PAID
  GRAPHQL_ERROR
  PRODUCT_NOT_PUBLISHED
  PRODUCT_UNAVAILABLE_FOR_PURCHASE
  INSUFFICIENT_STOCK
  INVALID
  INVALID_SHIPPING_METHOD
  NOT_FOUND
  PAYMENT_ERROR
  QUANTITY_GREATER_THAN_LIMIT
  REQUIRED
  SHIPPING_ADDRESS_NOT_SET
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_NOT_SET
  SHIPPING_NOT_REQUIRED
  TAX_ERROR
  UNIQUE
  VOUCHER_NOT_APPLICABLE
  ZERO_QUANTITY
  MISSING_CHANNEL_SLUG
  CHANNEL_INACTIVE
  UNAVAILABLE_VARIANT_IN_CHANNEL
}

type CheckoutLanguageCodeUpdate {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutLine implements Node {
  id: ID!
  variant: ProductVariant!
  quantity: Int!
  totalPrice: TaxedMoney
  requiresShipping: Boolean
}

type CheckoutLineCountableConnection {
  pageInfo: PageInfo!
  edges: [CheckoutLineCountableEdge!]!
  totalCount: Int
}

type CheckoutLineCountableEdge {
  node: CheckoutLine!
  cursor: String!
}

type CheckoutLineDelete {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

input CheckoutLineInput {
  quantity: Int!
  variantId: ID!
}

type CheckoutLinesAdd {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutLinesUpdate {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutPaymentCreate {
  checkout: Checkout
  payment: Payment
  # paymentErrors: [PaymentError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PaymentError!]!
}

type CheckoutRemovePromoCode {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutShippingAddressUpdate {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type CheckoutShippingMethodUpdate {
  checkout: Checkout
  # checkoutErrors: [CheckoutError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [CheckoutError!]!
}

type ChoiceValue {
  raw: String
  verbose: String
}

type CollectionTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: JSONString
  # descriptionJson: JSONString @deprecated(reason: "Will be removed in Saleor 4.0. Use the `description` field instead.")
  translation(languageCode: LanguageCodeEnum!): CollectionTranslation
  collection: Collection
}

type ConfigurationItem {
  name: String!
  value: String
  type: ConfigurationTypeFieldEnum
  helpText: String
  label: String
}

input ConfigurationItemInput {
  name: String!
  value: String
}

enum ConfigurationTypeFieldEnum {
  STRING
  MULTILINE
  BOOLEAN
  SECRET
  PASSWORD
  SECRETMULTILINE
  OUTPUT
}

type ConfirmAccount {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type ConfirmEmailChange {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

enum CountryCode {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  CV
  KH
  CM
  CA
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  EU
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MK
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  UM
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}

type CountryDisplay {
  code: String!
  country: String!
  vat: VAT
}

type CreateToken {
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type CreditCard {
  brand: String!
  firstDigits: String
  lastDigits: String!
  expMonth: Int
  expYear: Int
}

type CustomerBulkDelete {
  count: Int!
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type CustomerCreate {
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  user: User
}

type CustomerDelete {
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  user: User
}

type CustomerEvent implements Node {
  id: ID!
  date: DateTime
  type: CustomerEventsEnum
  user: User
  message: String
  count: Int
  order: Order
  orderLine: OrderLine
}

enum CustomerEventsEnum {
  ACCOUNT_CREATED
  PASSWORD_RESET_LINK_SENT
  PASSWORD_RESET
  EMAIL_CHANGED_REQUEST
  PASSWORD_CHANGED
  EMAIL_CHANGED
  PLACED_ORDER
  NOTE_ADDED_TO_ORDER
  DIGITAL_LINK_DOWNLOADED
  CUSTOMER_DELETED
  NAME_ASSIGNED
  EMAIL_ASSIGNED
  NOTE_ADDED
}

input CustomerFilterInput {
  dateJoined: DateRangeInput
  numberOfOrders: IntRangeInput
  placedOrders: DateRangeInput
  search: String
  metadata: [MetadataInput]
}

input CustomerInput {
  defaultBillingAddress: AddressInput
  defaultShippingAddress: AddressInput
  firstName: String
  lastName: String
  email: String
  isActive: Boolean
  note: String
  languageCode: LanguageCodeEnum
}

type CustomerUpdate {
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
  user: User
}

scalar Date

input DateRangeInput {
  gte: Date
  lte: Date
}

scalar DateTime

input DateTimeRangeInput {
  gte: DateTime
  lte: DateTime
}

type DeactivateAllUserTokens {
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type DeleteMetadata {
  # metadataErrors: [MetadataError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MetadataError!]!
  item: ObjectWithMetadata
}

type DeletePrivateMetadata {
  # metadataErrors: [MetadataError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MetadataError!]!
  item: ObjectWithMetadata
}

type DigitalContent implements Node & ObjectWithMetadata {
  useDefaultSettings: Boolean!
  automaticFulfillment: Boolean!
  contentFile: String!
  maxDownloads: Int
  urlValidDays: Int
  urls: [DigitalContentUrl]
  id: ID!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  productVariant: ProductVariant!
}

type DigitalContentCountableConnection {
  pageInfo: PageInfo!
  edges: [DigitalContentCountableEdge!]!
  totalCount: Int
}

type DigitalContentCountableEdge {
  node: DigitalContent!
  cursor: String!
}

type DigitalContentCreate {
  variant: ProductVariant
  content: DigitalContent
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}

type DigitalContentDelete {
  variant: ProductVariant
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}

input DigitalContentInput {
  useDefaultSettings: Boolean!
  maxDownloads: Int
  urlValidDays: Int
  automaticFulfillment: Boolean
}

type DigitalContentUpdate {
  variant: ProductVariant
  content: DigitalContent
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}

input DigitalContentUploadInput {
  useDefaultSettings: Boolean!
  maxDownloads: Int
  urlValidDays: Int
  automaticFulfillment: Boolean
  contentFile: Upload!
}

type DigitalContentUrl implements Node {
  content: DigitalContent!
  created: DateTime!
  downloadNum: Int!
  id: ID!
  url: String
  token: UUID!
}

type DigitalContentUrlCreate {
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
  digitalContentUrl: DigitalContentUrl
}

input DigitalContentUrlCreateInput {
  content: ID!
}

type DiscountError {
  field: String
  message: String
  products: [ID!]
  code: DiscountErrorCode!
  channels: [ID!]
}

enum DiscountErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT
  DUPLICATED_INPUT_ITEM
}

enum DiscountStatusEnum {
  ACTIVE
  EXPIRED
  SCHEDULED
}

enum DiscountValueTypeEnum {
  FIXED
  PERCENTAGE
}

enum DistanceUnitsEnum {
  CM
  M
  KM
  FT
  YD
  INCH
}

type Domain {
  host: String!
  sslEnabled: Boolean!
  url: String!
}

type DraftOrderBulkDelete {
  count: Int!
  # orderErrors: [OrderError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [OrderError!]!
}

type DraftOrderComplete {
  order: Order
  # orderErrors: [OrderError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [OrderError!]!
}

type DraftOrderCreate {
  # orderErrors: [OrderError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [OrderError!]!
  order: Order
}

input DraftOrderCreateInput {
  billingAddress: AddressInput
  user: ID
  userEmail: String
  discount: PositiveDecimal
  shippingAddress: AddressInput
  shippingMethod: ID
  voucher: ID
  customerNote: String
  channelId: ID
  redirectUrl: String
  lines: [OrderLineCreateInput]
}

type DraftOrderDelete {
  # orderErrors: [OrderError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [OrderError!]!
  order: Order
}

input DraftOrderInput {
  billingAddress: AddressInput
  user: ID
  userEmail: String
  discount: PositiveDecimal
  shippingAddress: AddressInput
  shippingMethod: ID
  voucher: ID
  customerNote: String
  channelId: ID
  redirectUrl: String
}

type DraftOrderLinesBulkDelete {
  count: Int!
  # orderErrors: [OrderError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [OrderError!]!
}

type DraftOrderUpdate {
  # orderErrors: [OrderError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [OrderError!]!
  order: Order
}

type ExportError {
  field: String
  message: String
  code: ExportErrorCode!
}

enum ExportErrorCode {
  INVALID
  NOT_FOUND
  REQUIRED
}

type ExportEvent implements Node {
  id: ID!
  date: DateTime!
  type: ExportEventsEnum!
  user: User
  app: App
  message: String!
}

enum ExportEventsEnum {
  EXPORT_PENDING
  EXPORT_SUCCESS
  EXPORT_FAILED
  EXPORT_DELETED
  EXPORTED_FILE_SENT
  EXPORT_FAILED_INFO_SENT
}

type ExportFile implements Node & Job {
  id: ID!
  user: User
  app: App
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
  url: String
  events: [ExportEvent!]
}

type ExportFileCountableConnection {
  pageInfo: PageInfo!
  edges: [ExportFileCountableEdge!]!
  totalCount: Int
}

type ExportFileCountableEdge {
  node: ExportFile!
  cursor: String!
}

input ExportFileFilterInput {
  createdAt: DateTimeRangeInput
  updatedAt: DateTimeRangeInput
  status: JobStatusEnum
  user: String
  app: String
}

enum ExportFileSortField {
  STATUS
  CREATED_AT
  UPDATED_AT
}

input ExportFileSortingInput {
  direction: OrderDirection!
  field: ExportFileSortField!
}

input ExportInfoInput {
  attributes: [ID!]
  warehouses: [ID!]
  channels: [ID!]
  fields: [ProductFieldEnum!]
}

type ExportProducts {
  exportFile: ExportFile
  # exportErrors: [ExportError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ExportError!]!
}

input ExportProductsInput {
  scope: ExportScope!
  filter: ProductFilterInput
  ids: [ID!]
  exportInfo: ExportInfoInput
  fileType: FileTypesEnum!
}

enum ExportScope {
  ALL
  IDS
  FILTER
}



type ExternalAuthenticationUrl {
  authenticationData: JSONString
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type ExternalLogout {
  logoutData: JSONString
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type ExternalObtainAccessTokens {
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type ExternalRefresh {
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type ExternalVerify {
  user: User
  isValid: Boolean!
  verifyData: JSONString
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type File {
  url: String!
  contentType: String
}

enum FileTypesEnum {
  CSV
  XLSX
}

type FileUpload {
  uploadedFile: File
  # uploadErrors: [UploadError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [UploadError!]!
}







type FulfillmentLine implements Node {
  id: ID!
  quantity: Int!
  orderLine: OrderLine
}





enum FulfillmentStatus {
  FULFILLED
  REFUNDED
  RETURNED
  REPLACED
  REFUNDED_AND_RETURNED
  CANCELED
}





type GatewayConfigLine {
  field: String!
  value: String
}

scalar GenericScalar

type GiftCard implements Node {
  code: String
  user: User
  created: DateTime!
  startDate: Date!
  endDate: Date
  lastUsedOn: DateTime
  isActive: Boolean!
  initialBalance: Money
  currentBalance: Money
  id: ID!
  displayCode: String
}

type GiftCardActivate {
  giftCard: GiftCard
  # giftCardErrors: [GiftCardError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [GiftCardError!]!
}

type GiftCardCountableConnection {
  pageInfo: PageInfo!
  edges: [GiftCardCountableEdge!]!
  totalCount: Int
}

type GiftCardCountableEdge {
  node: GiftCard!
  cursor: String!
}

type GiftCardCreate {
  # giftCardErrors: [GiftCardError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [GiftCardError!]!
  giftCard: GiftCard
}

input GiftCardCreateInput {
  startDate: Date
  endDate: Date
  balance: PositiveDecimal
  userEmail: String
  code: String
}

type GiftCardDeactivate {
  giftCard: GiftCard
  # giftCardErrors: [GiftCardError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [GiftCardError!]!
}

type GiftCardError {
  field: String
  message: String
  code: GiftCardErrorCode!
}

enum GiftCardErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type GiftCardUpdate {
  # giftCardErrors: [GiftCardError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [GiftCardError!]!
  giftCard: GiftCard
}

input GiftCardUpdateInput {
  startDate: Date
  endDate: Date
  balance: PositiveDecimal
  userEmail: String
}

type Group implements Node {
  id: ID!
  name: String!
  permissions: [Permission]
  users: [User]
  userCanManage: Boolean!
}

type GroupCountableConnection {
  pageInfo: PageInfo!
  edges: [GroupCountableEdge!]!
  totalCount: Int
}

type GroupCountableEdge {
  node: Group!
  cursor: String!
}

type Image {
  url: String!
  alt: String
}

input IntRangeInput {
  gte: Int
  lte: Int
}

type Invoice implements ObjectWithMetadata & Job & Node {
  id: ID!
  metadata: [MetadataItem]!
  status: JobStatusEnum!
  number: String
  externalUrl: String
  privateMetadata: [MetadataItem]!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
  url: String
}

type InvoiceCreate {
  # invoiceErrors: [InvoiceError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

input InvoiceCreateInput {
  number: String!
  url: String!
}

type InvoiceDelete {
  # invoiceErrors: [InvoiceError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

type InvoiceError {
  field: String
  message: String
  code: InvoiceErrorCode!
}

enum InvoiceErrorCode {
  REQUIRED
  NOT_READY
  URL_NOT_SET
  EMAIL_NOT_SET
  NUMBER_NOT_SET
  NOT_FOUND
  INVALID_STATUS
}

type InvoiceRequest {
  order: Order
  # invoiceErrors: [InvoiceError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

type InvoiceRequestDelete {
  # invoiceErrors: [InvoiceError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

type InvoiceSendNotification {
  # invoiceErrors: [InvoiceError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

type InvoiceUpdate {
  # invoiceErrors: [InvoiceError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [InvoiceError!]!
  invoice: Invoice
}

scalar JSONString

interface Job {
  status: JobStatusEnum!
  createdAt: DateTime!
  updatedAt: DateTime!
  message: String
}

enum JobStatusEnum {
  PENDING
  SUCCESS
  FAILED
  DELETED
}

enum LanguageCodeEnum {
  AR
  AZ
  BG
  BN
  CA
  CS
  DA
  DE
  EL
  EN
  ES
  ES_CO
  ET
  FA
  FI
  FR
  HI
  HU
  HY
  ID
  IS
  IT
  JA
  KA
  KM
  KO
  LT
  MN
  MY
  NB
  NL
  PL
  PT
  PT_BR
  RO
  RU
  SK
  SL
  SQ
  SR
  SV
  SW
  TA
  TH
  TR
  UK
  VI
  ZH_HANS
  ZH_HANT
}

type LanguageDisplay {
  code: LanguageCodeEnum!
  language: String!
}

type LimitInfo {
  currentUsage: Limits!
  allowedUsage: Limits!
}

type Limits {
  channels: Int
  orders: Int
  productVariants: Int
  staffUsers: Int
  warehouses: Int
}

type Manifest {
  identifier: String!
  version: String!
  name: String!
  about: String
  permissions: [Permission]
  appUrl: String
  configurationUrl: String
  tokenTargetUrl: String
  dataPrivacy: String
  dataPrivacyUrl: String
  homepageUrl: String
  supportUrl: String
}

type Margin {
  start: Int
  stop: Int
}

enum MeasurementUnitsEnum {
  CM
  M
  KM
  FT
  YD
  INCH
  SQ_CM
  SQ_M
  SQ_KM
  SQ_FT
  SQ_YD
  SQ_INCH
  CUBIC_MILLIMETER
  CUBIC_CENTIMETER
  CUBIC_DECIMETER
  CUBIC_METER
  LITER
  CUBIC_FOOT
  CUBIC_INCH
  CUBIC_YARD
  QT
  PINT
  FL_OZ
  ACRE_IN
  ACRE_FT
  G
  LB
  OZ
  KG
  TONNE
}

type Menu implements Node & ObjectWithMetadata {
  id: ID!
  name: String!
  slug: String!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  items: [MenuItem]
}

type MenuBulkDelete {
  count: Int!
  # menuErrors: [MenuError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MenuError!]!
}

type MenuCountableConnection {
  pageInfo: PageInfo!
  edges: [MenuCountableEdge!]!
  totalCount: Int
}

type MenuCountableEdge {
  node: Menu!
  cursor: String!
}

type MenuCreate {
  # menuErrors: [MenuError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MenuError!]!
  menu: Menu
}

input MenuCreateInput {
  name: String!
  slug: String
  items: [MenuItemInput]
}

type MenuDelete {
  # menuErrors: [MenuError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MenuError!]!
  menu: Menu
}

type MenuError {
  field: String
  message: String
  code: MenuErrorCode!
}

enum MenuErrorCode {
  CANNOT_ASSIGN_NODE
  GRAPHQL_ERROR
  INVALID
  INVALID_MENU_ITEM
  NO_MENU_ITEM_PROVIDED
  NOT_FOUND
  REQUIRED
  TOO_MANY_MENU_ITEMS
  UNIQUE
}

input MenuFilterInput {
  search: String
  slug: [String]
  metadata: [MetadataInput]
}

input MenuInput {
  name: String
  slug: String
}

type MenuItem implements Node & ObjectWithMetadata {
  id: ID!
  name: String!
  menu: Menu!
  parent: MenuItem
  category: Category
  collection: Collection
  page: Page
  level: Int!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  children: [MenuItem]
  url: String
  translation(languageCode: LanguageCodeEnum!): MenuItemTranslation
}

type MenuItemBulkDelete {
  count: Int!
  # menuErrors: [MenuError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MenuError!]!
}

type MenuItemCountableConnection {
  pageInfo: PageInfo!
  edges: [MenuItemCountableEdge!]!
  totalCount: Int
}

type MenuItemCountableEdge {
  node: MenuItem!
  cursor: String!
}

type MenuItemCreate {
  # menuErrors: [MenuError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MenuError!]!
  menuItem: MenuItem
}

input MenuItemCreateInput {
  name: String!
  url: String
  category: ID
  collection: ID
  page: ID
  menu: ID!
  parent: ID
}

type MenuItemDelete {
  # menuErrors: [MenuError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MenuError!]!
  menuItem: MenuItem
}

input MenuItemFilterInput {
  search: String
  metadata: [MetadataInput]
}

input MenuItemInput {
  name: String
  url: String
  category: ID
  collection: ID
  page: ID
}

type MenuItemMove {
  menu: Menu
  # menuErrors: [MenuError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MenuError!]!
}

input MenuItemMoveInput {
  itemId: ID!
  parentId: ID
  sortOrder: Int
}

input MenuItemSortingInput {
  direction: OrderDirection!
  field: MenuItemsSortField!
}

type MenuItemTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): MenuItemTranslation
  menuItem: MenuItem
}

type MenuItemTranslate {
  # translationErrors: [TranslationError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [TranslationError!]!
  menuItem: MenuItem
}

type MenuItemTranslation implements Node {
  id: ID!
  name: String!
  language: LanguageDisplay!
}

type MenuItemUpdate {
  # menuErrors: [MenuError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MenuError!]!
  menuItem: MenuItem
}

enum MenuItemsSortField {
  NAME
}

enum MenuSortField {
  NAME
  ITEMS_COUNT
}

input MenuSortingInput {
  direction: OrderDirection!
  field: MenuSortField!
}

type MenuUpdate {
  # menuErrors: [MenuError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MenuError!]!
  menu: Menu
}

type MetadataError {
  field: String
  message: String
  code: MetadataErrorCode!
}

enum MetadataErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
}

input MetadataInput {
  key: String!
  value: String!
}

type MetadataItem {
  key: String!
  value: String!
}

type Money {
  currency: String!
  amount: Float!
}

type MoneyRange {
  start: Money
  stop: Money
}



type Mutation {
  
  productChannelListingUpdate(id: ID!, input: ProductChannelListingUpdateInput!): ProductChannelListingUpdate
  productMediaCreate(input: ProductMediaCreateInput!): ProductMediaCreate
  productVariantReorder(moves: [ReorderInput]!, productId: ID!): ProductVariantReorder
  productMediaDelete(id: ID!): ProductMediaDelete
  productMediaBulkDelete(ids: [ID]!): ProductMediaBulkDelete
  productMediaReorder(mediaIds: [ID]!, productId: ID!): ProductMediaReorder
  productMediaUpdate(id: ID!, input: ProductMediaUpdateInput!): ProductMediaUpdate
  
  productReorderAttributeValues(attributeId: ID!, moves: [ReorderInput]!, productId: ID!): ProductReorderAttributeValues
  digitalContentCreate(input: DigitalContentUploadInput!, variantId: ID!): DigitalContentCreate
  digitalContentDelete(variantId: ID!): DigitalContentDelete
  digitalContentUpdate(input: DigitalContentInput!, variantId: ID!): DigitalContentUpdate
  digitalContentUrlCreate(input: DigitalContentUrlCreateInput!): DigitalContentUrlCreate
  productVariantCreate(input: ProductVariantCreateInput!): ProductVariantCreate
  productVariantDelete(id: ID!): ProductVariantDelete
  productVariantBulkCreate(product: ID!, variants: [ProductVariantBulkCreateInput]!): ProductVariantBulkCreate
  productVariantBulkDelete(ids: [ID]!): ProductVariantBulkDelete
  productVariantStocksCreate(stocks: [StockInput!]!, variantId: ID!): ProductVariantStocksCreate
  productVariantStocksDelete(variantId: ID!, warehouseIds: [ID!]): ProductVariantStocksDelete
  productVariantStocksUpdate(stocks: [StockInput!]!, variantId: ID!): ProductVariantStocksUpdate
  productVariantUpdate(id: ID!, input: ProductVariantInput!): ProductVariantUpdate
  productVariantSetDefault(productId: ID!, variantId: ID!): ProductVariantSetDefault
  productVariantTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): ProductVariantTranslate
  productVariantChannelListingUpdate(id: ID!, input: [ProductVariantChannelListingAddInput!]!): ProductVariantChannelListingUpdate
  productVariantReorderAttributeValues(attributeId: ID!, moves: [ReorderInput]!, variantId: ID!): ProductVariantReorderAttributeValues
  variantMediaAssign(mediaId: ID!, variantId: ID!): VariantMediaAssign
  variantMediaUnassign(mediaId: ID!, variantId: ID!): VariantMediaUnassign
  paymentCapture(amount: PositiveDecimal, paymentId: ID!): PaymentCapture
  paymentRefund(amount: PositiveDecimal, paymentId: ID!): PaymentRefund
  paymentVoid(paymentId: ID!): PaymentVoid
  paymentInitialize(channel: String, gateway: String!, paymentData: JSONString): PaymentInitialize
  pageCreate(input: PageCreateInput!): PageCreate
  pageDelete(id: ID!): PageDelete
  pageBulkDelete(ids: [ID]!): PageBulkDelete
  pageBulkPublish(ids: [ID]!, isPublished: Boolean!): PageBulkPublish
  pageUpdate(id: ID!, input: PageInput!): PageUpdate
  pageTranslate(id: ID!, input: PageTranslationInput!, languageCode: LanguageCodeEnum!): PageTranslate
  pageTypeCreate(input: PageTypeCreateInput!): PageTypeCreate
  pageTypeUpdate(id: ID, input: PageTypeUpdateInput!): PageTypeUpdate
  pageTypeDelete(id: ID!): PageTypeDelete
  pageTypeBulkDelete(ids: [ID!]!): PageTypeBulkDelete
  pageAttributeAssign(attributeIds: [ID!]!, pageTypeId: ID!): PageAttributeAssign
  pageAttributeUnassign(attributeIds: [ID!]!, pageTypeId: ID!): PageAttributeUnassign
  pageTypeReorderAttributes(moves: [ReorderInput!]!, pageTypeId: ID!): PageTypeReorderAttributes
  pageReorderAttributeValues(attributeId: ID!, moves: [ReorderInput]!, pageId: ID!): PageReorderAttributeValues
  draftOrderComplete(id: ID!): DraftOrderComplete
  draftOrderCreate(input: DraftOrderCreateInput!): DraftOrderCreate
  draftOrderDelete(id: ID!): DraftOrderDelete
  draftOrderBulkDelete(ids: [ID]!): DraftOrderBulkDelete
  draftOrderLinesBulkDelete(ids: [ID]!): DraftOrderLinesBulkDelete
  draftOrderUpdate(id: ID!, input: DraftOrderInput!): DraftOrderUpdate
  deleteMetadata(id: ID!, keys: [String!]!): DeleteMetadata
  deletePrivateMetadata(id: ID!, keys: [String!]!): DeletePrivateMetadata
  updateMetadata(id: ID!, input: [MetadataInput!]!): UpdateMetadata
  updatePrivateMetadata(id: ID!, input: [MetadataInput!]!): UpdatePrivateMetadata
  assignNavigation(menu: ID, navigationType: NavigationType!): AssignNavigation
  menuCreate(input: MenuCreateInput!): MenuCreate
  menuDelete(id: ID!): MenuDelete
  menuBulkDelete(ids: [ID]!): MenuBulkDelete
  menuUpdate(id: ID!, input: MenuInput!): MenuUpdate
  menuItemCreate(input: MenuItemCreateInput!): MenuItemCreate
  menuItemDelete(id: ID!): MenuItemDelete
  menuItemBulkDelete(ids: [ID]!): MenuItemBulkDelete
  menuItemUpdate(id: ID!, input: MenuItemInput!): MenuItemUpdate
  menuItemTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): MenuItemTranslate
  menuItemMove(menu: ID!, moves: [MenuItemMoveInput]!): MenuItemMove
  invoiceRequest(number: String, orderId: ID!): InvoiceRequest
  invoiceRequestDelete(id: ID!): InvoiceRequestDelete
  invoiceCreate(input: InvoiceCreateInput!, orderId: ID!): InvoiceCreate
  invoiceDelete(id: ID!): InvoiceDelete
  invoiceUpdate(id: ID!, input: UpdateInvoiceInput!): InvoiceUpdate
  invoiceSendNotification(id: ID!): InvoiceSendNotification
  giftCardActivate(id: ID!): GiftCardActivate
  giftCardCreate(input: GiftCardCreateInput!): GiftCardCreate
  giftCardDeactivate(id: ID!): GiftCardDeactivate
  giftCardUpdate(id: ID!, input: GiftCardUpdateInput!): GiftCardUpdate
  pluginUpdate(channelId: ID, id: ID!, input: PluginUpdateInput!): PluginUpdate
  saleCreate(input: SaleInput!): SaleCreate
  saleDelete(id: ID!): SaleDelete
  saleBulkDelete(ids: [ID]!): SaleBulkDelete
  saleUpdate(id: ID!, input: SaleInput!): SaleUpdate
  saleCataloguesAdd(id: ID!, input: CatalogueInput!): SaleAddCatalogues
  saleCataloguesRemove(id: ID!, input: CatalogueInput!): SaleRemoveCatalogues
  saleTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): SaleTranslate
  saleChannelListingUpdate(id: ID!, input: SaleChannelListingInput!): SaleChannelListingUpdate
  voucherCreate(input: VoucherInput!): VoucherCreate
  voucherDelete(id: ID!): VoucherDelete
  voucherBulkDelete(ids: [ID]!): VoucherBulkDelete
  voucherUpdate(id: ID!, input: VoucherInput!): VoucherUpdate
  voucherCataloguesAdd(id: ID!, input: CatalogueInput!): VoucherAddCatalogues
  voucherCataloguesRemove(id: ID!, input: CatalogueInput!): VoucherRemoveCatalogues
  voucherTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): VoucherTranslate
  voucherChannelListingUpdate(id: ID!, input: VoucherChannelListingInput!): VoucherChannelListingUpdate
  exportProducts(input: ExportProductsInput!): ExportProducts
  fileUpload(file: Upload!): FileUpload
  checkoutAddPromoCode(checkoutId: ID!, promoCode: String!): CheckoutAddPromoCode
  checkoutBillingAddressUpdate(billingAddress: AddressInput!, checkoutId: ID!): CheckoutBillingAddressUpdate
  checkoutComplete(checkoutId: ID!, paymentData: JSONString, redirectUrl: String, storeSource: Boolean = false): CheckoutComplete
  checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate
  checkoutCustomerAttach(checkoutId: ID!): CheckoutCustomerAttach
  checkoutCustomerDetach(checkoutId: ID!): CheckoutCustomerDetach
  checkoutEmailUpdate(checkoutId: ID, email: String!): CheckoutEmailUpdate
  checkoutLineDelete(checkoutId: ID!, lineId: ID): CheckoutLineDelete
  checkoutLinesAdd(checkoutId: ID!, lines: [CheckoutLineInput]!): CheckoutLinesAdd
  checkoutLinesUpdate(checkoutId: ID!, lines: [CheckoutLineInput]!): CheckoutLinesUpdate
  checkoutRemovePromoCode(checkoutId: ID!, promoCode: String!): CheckoutRemovePromoCode
  checkoutPaymentCreate(checkoutId: ID!, input: PaymentInput!): CheckoutPaymentCreate
  checkoutShippingAddressUpdate(checkoutId: ID!, shippingAddress: AddressInput!): CheckoutShippingAddressUpdate
  checkoutShippingMethodUpdate(checkoutId: ID, shippingMethodId: ID!): CheckoutShippingMethodUpdate
  checkoutLanguageCodeUpdate(checkoutId: ID!, languageCode: LanguageCodeEnum!): CheckoutLanguageCodeUpdate
  channelCreate(input: ChannelCreateInput!): ChannelCreate
  channelUpdate(id: ID!, input: ChannelUpdateInput!): ChannelUpdate
  channelDelete(id: ID!, input: ChannelDeleteInput): ChannelDelete
  channelActivate(id: ID!): ChannelActivate
  channelDeactivate(id: ID!): ChannelDeactivate
  attributeCreate(input: AttributeCreateInput!): AttributeCreate
  attributeDelete(id: ID!): AttributeDelete
  attributeUpdate(id: ID!, input: AttributeUpdateInput!): AttributeUpdate
  attributeTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): AttributeTranslate
  attributeBulkDelete(ids: [ID]!): AttributeBulkDelete
  attributeValueBulkDelete(ids: [ID]!): AttributeValueBulkDelete
  attributeValueCreate(attribute: ID!, input: AttributeValueCreateInput!): AttributeValueCreate
  attributeValueDelete(id: ID!): AttributeValueDelete
  attributeValueUpdate(id: ID!, input: AttributeValueCreateInput!): AttributeValueUpdate
  attributeValueTranslate(id: ID!, input: AttributeValueTranslationInput!, languageCode: LanguageCodeEnum!): AttributeValueTranslate
  attributeReorderValues(attributeId: ID!, moves: [ReorderInput]!): AttributeReorderValues
  appCreate(input: AppInput!): AppCreate
  appUpdate(id: ID!, input: AppInput!): AppUpdate
  appDelete(id: ID!): AppDelete
  appTokenCreate(input: AppTokenInput!): AppTokenCreate
  appTokenDelete(id: ID!): AppTokenDelete
  appTokenVerify(token: String!): AppTokenVerify
  appInstall(input: AppInstallInput!): AppInstall
  appRetryInstall(activateAfterInstallation: Boolean = true, id: ID!): AppRetryInstall
  appDeleteFailedInstallation(id: ID!): AppDeleteFailedInstallation
  appFetchManifest(manifestUrl: String!): AppFetchManifest
  appActivate(id: ID!): AppActivate
  appDeactivate(id: ID!): AppDeactivate
  tokenCreate(email: String!, password: String!): CreateToken
  tokenRefresh(csrfToken: String, refreshToken: String): RefreshToken
  tokenVerify(token: String!): VerifyToken
  tokensDeactivateAll: DeactivateAllUserTokens
  externalAuthenticationUrl(input: JSONString!, pluginId: String!): ExternalAuthenticationUrl
  externalObtainAccessTokens(input: JSONString!, pluginId: String!): ExternalObtainAccessTokens
  externalRefresh(input: JSONString!, pluginId: String!): ExternalRefresh
  externalLogout(input: JSONString!, pluginId: String!): ExternalLogout
  externalVerify(input: JSONString!, pluginId: String!): ExternalVerify
  requestPasswordReset(channel: String, email: String!, redirectUrl: String!): RequestPasswordReset
  confirmAccount(email: String!, token: String!): ConfirmAccount
  setPassword(email: String!, password: String!, token: String!): SetPassword
  passwordChange(newPassword: String!, oldPassword: String!): PasswordChange
  requestEmailChange(channel: String, newEmail: String!, password: String!, redirectUrl: String!): RequestEmailChange
  confirmEmailChange(channel: String, token: String!): ConfirmEmailChange
  accountAddressCreate(input: AddressInput!, type: AddressTypeEnum): AccountAddressCreate
  accountAddressUpdate(id: ID!, input: AddressInput!): AccountAddressUpdate
  accountAddressDelete(id: ID!): AccountAddressDelete
  accountSetDefaultAddress(id: ID!, type: AddressTypeEnum!): AccountSetDefaultAddress
  accountRegister(input: AccountRegisterInput!): AccountRegister
  accountUpdate(input: AccountInput!): AccountUpdate
  accountRequestDeletion(channel: String, redirectUrl: String!): AccountRequestDeletion
  accountDelete(token: String!): AccountDelete
  addressCreate(input: AddressInput!, userId: ID!): AddressCreate
  addressUpdate(id: ID!, input: AddressInput!): AddressUpdate
  addressDelete(id: ID!): AddressDelete
  addressSetDefault(addressId: ID!, type: AddressTypeEnum!, userId: ID!): AddressSetDefault
  customerCreate(input: UserCreateInput!): CustomerCreate
  customerUpdate(id: ID!, input: CustomerInput!): CustomerUpdate
  customerDelete(id: ID!): CustomerDelete
  customerBulkDelete(ids: [ID]!): CustomerBulkDelete
  permissionGroupCreate(input: PermissionGroupCreateInput!): PermissionGroupCreate
  permissionGroupUpdate(id: ID!, input: PermissionGroupUpdateInput!): PermissionGroupUpdate
  permissionGroupDelete(id: ID!): PermissionGroupDelete
}

input NameTranslationInput {
  name: String
}

enum NavigationType {
  MAIN
  SECONDARY
}

interface Node {
  id: ID!
}

interface ObjectWithMetadata {
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
}

type OrderDiscount implements Node {
  id: ID!
  type: OrderDiscountType!
  valueType: DiscountValueTypeEnum!
  value: PositiveDecimal!
  name: String
  translatedName: String
  reason: String
  amount: Money!
}







enum OrderDiscountType {
  VOUCHER
  MANUAL
}



type OrderEventCountableConnection {
  pageInfo: PageInfo!
  edges: [OrderEventCountableEdge!]!
  totalCount: Int
}

type OrderEventCountableEdge {
  node: OrderEvent!
  cursor: String!
}

type OrderUpdate {
  # orderErrors: [OrderError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [OrderError!]!
  order: Order
}

input OrderUpdateInput {
  billingAddress: AddressInput
  userEmail: String
  shippingAddress: AddressInput
}

type Page implements Node & ObjectWithMetadata {
  id: ID!
  seoTitle: String
  seoDescription: String
  title: String!
  content: JSONString
  publicationDate: Date
  isPublished: Boolean!
  slug: String!
  pageType: PageType!
  created: DateTime!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  translation(languageCode: LanguageCodeEnum!): PageTranslation
  attributes: [SelectedAttribute!]!
}

type PageAttributeAssign {
  pageType: PageType
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
}

type PageAttributeUnassign {
  pageType: PageType
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
}

type PageBulkDelete {
  count: Int!
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
}

type PageBulkPublish {
  count: Int!
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
}

type PageCountableConnection {
  pageInfo: PageInfo!
  edges: [PageCountableEdge!]!
  totalCount: Int
}

type PageCountableEdge {
  node: Page!
  cursor: String!
}

type PageCreate {
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
  page: Page
}

input PageCreateInput {
  slug: String
  title: String
  content: JSONString
  attributes: [AttributeValueInput!]
  isPublished: Boolean
  publicationDate: String
  seo: SeoInput
  pageType: ID!
}

type PageDelete {
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
  page: Page
}

type PageError {
  field: String
  message: String
  code: PageErrorCode!
  attributes: [ID!]
  values: [ID!]
}

enum PageErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  DUPLICATED_INPUT_ITEM
  ATTRIBUTE_ALREADY_ASSIGNED
}

input PageFilterInput {
  search: String
  metadata: [MetadataInput]
  pageTypes: [ID]
  ids: [ID]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input PageInput {
  slug: String
  title: String
  content: JSONString
  attributes: [AttributeValueInput!]
  isPublished: Boolean
  publicationDate: String
  seo: SeoInput
}

type PageReorderAttributeValues {
  page: Page
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
}

enum PageSortField {
  TITLE
  SLUG
  VISIBILITY
  CREATION_DATE
  PUBLICATION_DATE
}

input PageSortingInput {
  direction: OrderDirection!
  field: PageSortField!
}

type PageTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  title: String!
  content: JSONString
  # contentJson: JSONString @deprecated(reason: "Will be removed in Saleor 4.0. Use the `content` field instead.")
  translation(languageCode: LanguageCodeEnum!): PageTranslation
  page: Page
}

type PageTranslate {
  # translationErrors: [TranslationError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [TranslationError!]!
  page: PageTranslatableContent
}

type PageTranslation implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  title: String
  content: JSONString
  language: LanguageDisplay!
  # contentJson: JSONString @deprecated(reason: "Will be removed in Saleor 4.0. Use the `content` field instead.")
}

input PageTranslationInput {
  seoTitle: String
  seoDescription: String
  title: String
  content: JSONString
}

type PageType implements Node & ObjectWithMetadata {
  id: ID!
  name: String!
  slug: String!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  attributes: [Attribute]
  availableAttributes(filter: AttributeFilterInput, before: String, after: String, first: Int, last: Int): AttributeCountableConnection
  hasPages: Boolean
}

type PageTypeBulkDelete {
  count: Int!
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
}

type PageTypeCountableConnection {
  pageInfo: PageInfo!
  edges: [PageTypeCountableEdge!]!
  totalCount: Int
}

type PageTypeCountableEdge {
  node: PageType!
  cursor: String!
}

type PageTypeCreate {
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
  pageType: PageType
}

input PageTypeCreateInput {
  name: String
  slug: String
  addAttributes: [ID!]
}

type PageTypeDelete {
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
  pageType: PageType
}

input PageTypeFilterInput {
  search: String
}

type PageTypeReorderAttributes {
  pageType: PageType
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
}

enum PageTypeSortField {
  NAME
  SLUG
}

input PageTypeSortingInput {
  direction: OrderDirection!
  field: PageTypeSortField!
}

type PageTypeUpdate {
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
  pageType: PageType
}

input PageTypeUpdateInput {
  name: String
  slug: String
  addAttributes: [ID!]
  removeAttributes: [ID!]
}

type PageUpdate {
  # pageErrors: [PageError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PageError!]!
  page: Page
}

type PasswordChange {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type Payment implements Node {
  id: ID!
  gateway: String!
  isActive: Boolean!
  created: DateTime!
  modified: DateTime!
  token: String!
  checkout: Checkout
  order: Order
  paymentMethodType: String!
  customerIpAddress: String
  chargeStatus: PaymentChargeStatusEnum!
  actions: [OrderAction]!
  total: Money
  capturedAmount: Money
  transactions: [Transaction]
  availableCaptureAmount: Money
  availableRefundAmount: Money
  creditCard: CreditCard
}

type PaymentCapture {
  payment: Payment
  # paymentErrors: [PaymentError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PaymentError!]!
}



type PaymentCountableConnection {
  pageInfo: PageInfo!
  edges: [PaymentCountableEdge!]!
  totalCount: Int
}

type PaymentCountableEdge {
  node: Payment!
  cursor: String!
}

type PaymentError {
  field: String
  message: String
  code: PaymentErrorCode!
}

enum PaymentErrorCode {
  BILLING_ADDRESS_NOT_SET
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  PARTIAL_PAYMENT_NOT_ALLOWED
  SHIPPING_ADDRESS_NOT_SET
  INVALID_SHIPPING_METHOD
  SHIPPING_METHOD_NOT_SET
  PAYMENT_ERROR
  NOT_SUPPORTED_GATEWAY
  CHANNEL_INACTIVE
}

input PaymentFilterInput {
  checkouts: [ID]
}

type PaymentGateway {
  name: String!
  id: ID!
  config: [GatewayConfigLine!]!
  currencies: [String]!
}

type PaymentInitialize {
  initializedPayment: PaymentInitialized
  # paymentErrors: [PaymentError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PaymentError!]!
}

type PaymentInitialized {
  gateway: String!
  name: String!
  data: JSONString
}

input PaymentInput {
  gateway: String!
  token: String
  amount: PositiveDecimal
  returnUrl: String
}

type PaymentRefund {
  payment: Payment
  # paymentErrors: [PaymentError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PaymentError!]!
}

type PaymentSource {
  gateway: String!
  creditCardInfo: CreditCard
}

type PaymentVoid {
  payment: Payment
  # paymentErrors: [PaymentError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PaymentError!]!
}

type Permission {
  code: PermissionEnum!
  name: String!
}

enum PermissionEnum {
  MANAGE_USERS
  MANAGE_STAFF
  MANAGE_APPS
  MANAGE_CHANNELS
  MANAGE_DISCOUNTS
  MANAGE_PLUGINS
  MANAGE_GIFT_CARD
  MANAGE_MENUS
  MANAGE_ORDERS
  MANAGE_PAGES
  MANAGE_PAGE_TYPES_AND_ATTRIBUTES
  MANAGE_PRODUCTS
  MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES
  MANAGE_SHIPPING
  MANAGE_SETTINGS
  MANAGE_TRANSLATIONS
  MANAGE_CHECKOUTS
}

type PermissionGroupCreate {
  # permissionGroupErrors: [PermissionGroupError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PermissionGroupError!]!
  group: Group
}

input PermissionGroupCreateInput {
  addPermissions: [PermissionEnum!]
  addUsers: [ID!]
  name: String!
}

type PermissionGroupDelete {
  # permissionGroupErrors: [PermissionGroupError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PermissionGroupError!]!
  group: Group
}

type PermissionGroupError {
  field: String
  message: String
  code: PermissionGroupErrorCode!
  permissions: [PermissionEnum!]
  users: [ID!]
}

enum PermissionGroupErrorCode {
  ASSIGN_NON_STAFF_MEMBER
  DUPLICATED_INPUT_ITEM
  CANNOT_REMOVE_FROM_LAST_GROUP
  LEFT_NOT_MANAGEABLE_PERMISSION
  OUT_OF_SCOPE_PERMISSION
  OUT_OF_SCOPE_USER
  REQUIRED
  UNIQUE
}

input PermissionGroupFilterInput {
  search: String
}

enum PermissionGroupSortField {
  NAME
}

input PermissionGroupSortingInput {
  direction: OrderDirection!
  field: PermissionGroupSortField!
}

type PermissionGroupUpdate {
  # permissionGroupErrors: [PermissionGroupError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PermissionGroupError!]!
  group: Group
}

input PermissionGroupUpdateInput {
  addPermissions: [PermissionEnum!]
  addUsers: [ID!]
  name: String
  removePermissions: [PermissionEnum!]
  removeUsers: [ID!]
}

type Plugin {
  id: ID!
  name: String!
  description: String!
  globalConfiguration: PluginConfiguration
  channelConfigurations: [PluginConfiguration!]!
}

type PluginConfiguration {
  active: Boolean!
  channel: Channel
  configuration: [ConfigurationItem]
}

enum PluginConfigurationType {
  PER_CHANNEL
  GLOBAL
}

type PluginCountableConnection {
  pageInfo: PageInfo!
  edges: [PluginCountableEdge!]!
  totalCount: Int
}

type PluginCountableEdge {
  node: Plugin!
  cursor: String!
}

type PluginError {
  field: String
  message: String
  code: PluginErrorCode!
}

enum PluginErrorCode {
  GRAPHQL_ERROR
  INVALID
  PLUGIN_MISCONFIGURED
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PluginFilterInput {
  statusInChannels: PluginStatusInChannelsInput
  search: String
  type: PluginConfigurationType
}

enum PluginSortField {
  NAME
  IS_ACTIVE
}

input PluginSortingInput {
  direction: OrderDirection!
  field: PluginSortField!
}

input PluginStatusInChannelsInput {
  active: Boolean!
  channels: [ID!]!
}

type PluginUpdate {
  plugin: Plugin
  # pluginsErrors: [PluginError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [PluginError!]!
}

input PluginUpdateInput {
  active: Boolean
  configuration: [ConfigurationItemInput]
}

scalar PositiveDecimal



















input ProductChannelListingAddInput {
  channelId: ID!
  isPublished: Boolean
  publicationDate: Date
  visibleInListings: Boolean
  isAvailableForPurchase: Boolean
  availableForPurchaseDate: Date
  addVariants: [ID!]
  removeVariants: [ID!]
}

type ProductChannelListingError {
  field: String
  message: String
  code: ProductErrorCode!
  attributes: [ID!]
  values: [ID!]
  channels: [ID!]
  variants: [ID!]
}

type ProductChannelListingUpdate {
  product: Product
  # productChannelListingErrors: [ProductChannelListingError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductChannelListingError!]!
}

input ProductChannelListingUpdateInput {
  updateChannels: [ProductChannelListingAddInput!]
  removeChannels: [ID!]
}













enum ProductFieldEnum {
  NAME
  DESCRIPTION
  PRODUCT_TYPE
  CATEGORY
  PRODUCT_WEIGHT
  COLLECTIONS
  CHARGE_TAXES
  PRODUCT_MEDIA
  VARIANT_SKU
  VARIANT_WEIGHT
  VARIANT_MEDIA
}



type ProductImage {
  id: ID!
  alt: String
  sortOrder: Int
  url(size: Int): String!
}





type ProductMediaBulkDelete {
  count: Int!
  errors: [ProductError!]!
}

type ProductMediaCreate {
  product: Product
  media: ProductMedia
  errors: [ProductError!]!
}

input ProductMediaCreateInput {
  alt: String
  image: Upload
  product: ID!
  mediaUrl: String
}

type ProductMediaDelete {
  product: Product
  media: ProductMedia
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}

type ProductMediaReorder {
  product: Product
  media: [ProductMedia!]
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}



type ProductMediaUpdate {
  product: Product
  media: ProductMedia
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}

input ProductMediaUpdateInput {
  alt: String
}





type ProductReorderAttributeValues {
  product: Product
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}



type ProductTranslatableContent implements Node {
  id: ID!
  seoTitle: String
  seoDescription: String
  name: String!
  description: JSONString
  translation(languageCode: LanguageCodeEnum!): ProductTranslation
  product: Product
}





























type ProductVariantBulkCreate {
  count: Int!
  productVariants: [ProductVariant!]!
  # bulkProductErrors: [BulkProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [BulkProductError!]!
}

input ProductVariantBulkCreateInput {
  attributes: [BulkAttributeValueInput]!
  sku: String!
  trackInventory: Boolean
  weight: WeightScalar
  stocks: [StockInput!]
  channelListings: [ProductVariantChannelListingAddInput!]
}

type ProductVariantBulkDelete {
  count: Int!
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}

input ProductVariantChannelListingAddInput {
  channelId: ID!
  price: PositiveDecimal!
  costPrice: PositiveDecimal
}

type ProductVariantChannelListingUpdate {
  variant: ProductVariant
  # productChannelListingErrors: [ProductChannelListingError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductChannelListingError!]!
}

type ProductVariantCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductVariantCountableEdge!]!
  totalCount: Int
}

type ProductVariantCountableEdge {
  node: ProductVariant!
  cursor: String!
}

type ProductVariantCreate {
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantCreateInput {
  attributes: [AttributeValueInput]!
  sku: String
  trackInventory: Boolean
  weight: WeightScalar
  product: ID!
  stocks: [StockInput!]
}

type ProductVariantDelete {
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantFilterInput {
  search: String
  sku: [String]
  metadata: [MetadataInput]
}

input ProductVariantInput {
  attributes: [AttributeValueInput]
  sku: String
  trackInventory: Boolean
  weight: WeightScalar
}

type ProductVariantReorder {
  product: Product
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}

type ProductVariantReorderAttributeValues {
  productVariant: ProductVariant
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}

type ProductVariantSetDefault {
  product: Product
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
}

type ProductVariantStocksCreate {
  productVariant: ProductVariant
  # bulkStockErrors: [BulkStockError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [BulkStockError!]!
}

type ProductVariantStocksDelete {
  productVariant: ProductVariant
  # stockErrors: [StockError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [StockError!]!
}

type ProductVariantStocksUpdate {
  productVariant: ProductVariant
  # bulkStockErrors: [BulkStockError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [BulkStockError!]!
}

type ProductVariantTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): ProductVariantTranslation
  productVariant: ProductVariant
}

type ProductVariantTranslate {
  errors: [TranslationError!]!
  productVariant: ProductVariant
}

type ProductVariantUpdate {
  # productErrors: [ProductError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [ProductError!]!
  productVariant: ProductVariant
}



type Query {
  translations(kind: TranslatableKinds!, before: String, after: String, first: Int, last: Int): TranslatableItemConnection
  translation(id: ID!, kind: TranslatableKinds!): TranslatableItem
  stock(id: ID!): Stock
  stocks(filter: StockFilterInput, before: String, after: String, first: Int, last: Int): StockCountableConnection
  digitalContent(id: ID!): DigitalContent
  digitalContents(before: String, after: String, first: Int, last: Int): DigitalContentCountableConnection
  
  
  
  productVariant(id: ID, sku: String, channel: String): ProductVariant
  productVariants(ids: [ID], channel: String, filter: ProductVariantFilterInput, before: String, after: String, first: Int, last: Int): ProductVariantCountableConnection
  reportProductSales(period: ReportingPeriod!, channel: String!, before: String, after: String, first: Int, last: Int): ProductVariantCountableConnection
  payment(id: ID!): Payment
  payments(filter: PaymentFilterInput, before: String, after: String, first: Int, last: Int): PaymentCountableConnection
  page(id: ID, slug: String): Page
  pages(sortBy: PageSortingInput, filter: PageFilterInput, before: String, after: String, first: Int, last: Int): PageCountableConnection
  pageType(id: ID!): PageType
  pageTypes(sortBy: PageTypeSortingInput, filter: PageTypeFilterInput, before: String, after: String, first: Int, last: Int): PageTypeCountableConnection
  homepageEvents(before: String, after: String, first: Int, last: Int): OrderEventCountableConnection
  menu(channel: String, id: ID, name: String, slug: String): Menu
  menus(channel: String, sortBy: MenuSortingInput, filter: MenuFilterInput, before: String, after: String, first: Int, last: Int): MenuCountableConnection
  menuItem(id: ID!, channel: String): MenuItem
  menuItems(channel: String, sortBy: MenuItemSortingInput, filter: MenuItemFilterInput, before: String, after: String, first: Int, last: Int): MenuItemCountableConnection
  giftCard(id: ID!): GiftCard
  giftCards(before: String, after: String, first: Int, last: Int): GiftCardCountableConnection
  plugin(id: ID!): Plugin
  plugins(filter: PluginFilterInput, sortBy: PluginSortingInput, before: String, after: String, first: Int, last: Int): PluginCountableConnection
  sale(id: ID!, channel: String): Sale
  sales(filter: SaleFilterInput, sortBy: SaleSortingInput, query: String, channel: String, before: String, after: String, first: Int, last: Int): SaleCountableConnection
  voucher(id: ID!, channel: String): Voucher
  vouchers(filter: VoucherFilterInput, sortBy: VoucherSortingInput, query: String, channel: String, before: String, after: String, first: Int, last: Int): VoucherCountableConnection
  exportFile(id: ID!): ExportFile
  exportFiles(filter: ExportFileFilterInput, sortBy: ExportFileSortingInput, before: String, after: String, first: Int, last: Int): ExportFileCountableConnection
  taxTypes: [TaxType]
  checkout(token: UUID): Checkout
  checkouts(channel: String, before: String, after: String, first: Int, last: Int): CheckoutCountableConnection
  checkoutLine(id: ID): CheckoutLine
  checkoutLines(before: String, after: String, first: Int, last: Int): CheckoutLineCountableConnection
  channel(id: ID): Channel
  channels: [Channel!]
  attributes(filter: AttributeFilterInput, sortBy: AttributeSortingInput, before: String, after: String, first: Int, last: Int): AttributeCountableConnection
  attribute(id: ID, slug: String): Attribute
  appsInstallations: [AppInstallation!]!
  apps(filter: AppFilterInput, sortBy: AppSortingInput, before: String, after: String, first: Int, last: Int): AppCountableConnection
  app(id: ID): App
  addressValidationRules(countryCode: CountryCode!, countryArea: String, city: String, cityArea: String): AddressValidationData
  address(id: ID!): Address
  customers(filter: CustomerFilterInput, sortBy: UserSortingInput, before: String, after: String, first: Int, last: Int): UserCountableConnection
  permissionGroups(filter: PermissionGroupFilterInput, sortBy: PermissionGroupSortingInput, before: String, after: String, first: Int, last: Int): GroupCountableConnection
  permissionGroup(id: ID!): Group
  me: User
  user(id: ID, email: String): User
}

type ReducedRate {
  rate: Float!
  rateType: String!
}

type RefreshToken {
  token: String
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}



enum ReportingPeriod {
  TODAY
  THIS_MONTH
}

type RequestEmailChange {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type RequestPasswordReset {
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type Sale implements Node {
  id: ID!
  name: String!
  type: SaleType!
  startDate: DateTime!
  endDate: DateTime
  categories(before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  collections(before: String, after: String, first: Int, last: Int): CollectionCountableConnection
  products(before: String, after: String, first: Int, last: Int): ProductCountableConnection
  translation(languageCode: LanguageCodeEnum!): SaleTranslation
  channelListings: [SaleChannelListing!]
  discountValue: Float
  currency: String
}

type SaleAddCatalogues {
  sale: Sale
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
}

type SaleBulkDelete {
  count: Int!
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
}

type SaleChannelListing implements Node {
  id: ID!
  channel: Channel!
  discountValue: Float!
  currency: String!
}

input SaleChannelListingAddInput {
  channelId: ID!
  discountValue: PositiveDecimal!
}

input SaleChannelListingInput {
  addChannels: [SaleChannelListingAddInput!]
  removeChannels: [ID!]
}

type SaleChannelListingUpdate {
  sale: Sale
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
}

type SaleCountableConnection {
  pageInfo: PageInfo!
  edges: [SaleCountableEdge!]!
  totalCount: Int
}

type SaleCountableEdge {
  node: Sale!
  cursor: String!
}

type SaleCreate {
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
  sale: Sale
}

type SaleDelete {
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
  sale: Sale
}

input SaleFilterInput {
  status: [DiscountStatusEnum]
  saleType: DiscountValueTypeEnum
  started: DateTimeRangeInput
  search: String
}

input SaleInput {
  name: String
  type: DiscountValueTypeEnum
  value: PositiveDecimal
  products: [ID]
  categories: [ID]
  collections: [ID]
  startDate: DateTime
  endDate: DateTime
}

type SaleRemoveCatalogues {
  sale: Sale
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
}

enum SaleSortField {
  NAME
  START_DATE
  END_DATE
  VALUE
  TYPE
}

input SaleSortingInput {
  direction: OrderDirection!
  channel: String
  field: SaleSortField!
}

type SaleTranslatableContent implements Node {
  id: ID!
  name: String!
  translation(languageCode: LanguageCodeEnum!): SaleTranslation
  sale: Sale
}

type SaleTranslate {
  # translationErrors: [TranslationError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [TranslationError!]!
  sale: Sale
}

type SaleTranslation implements Node {
  id: ID!
  name: String
  language: LanguageDisplay!
}

enum SaleType {
  FIXED
  PERCENTAGE
}

type SaleUpdate {
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
  sale: Sale
}

type SelectedAttribute {
  attribute: Attribute!
  values: [AttributeValue]!
}



type SetPassword {
  token: String
  refreshToken: String
  csrfToken: String
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}











type ShippingMethodTranslatableContent implements Node {
  id: ID!
  name: String!
  description: JSONString
  translation(languageCode: LanguageCodeEnum!): ShippingMethodTranslation
  shippingMethod: ShippingMethod
}















































type Stock implements Node {
  warehouse: Warehouse!
  productVariant: ProductVariant!
  quantity: Int!
  id: ID!
  quantityAllocated: Int!
}

enum StockAvailability {
  IN_STOCK
  OUT_OF_STOCK
}

type StockCountableConnection {
  pageInfo: PageInfo!
  edges: [StockCountableEdge!]!
  totalCount: Int
}

type StockCountableEdge {
  node: Stock!
  cursor: String!
}

type StockError {
  field: String
  message: String
  code: StockErrorCode!
}

enum StockErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input StockFilterInput {
  quantity: Float
  search: String
}

input StockInput {
  warehouse: ID!
  quantity: Int!
}

type TaxType {
  description: String
  taxCode: String
}

type TaxedMoney {
  currency: String!
  gross: Money!
  net: Money!
  tax: Money!
}

type TaxedMoneyRange {
  start: TaxedMoney
  stop: TaxedMoney
}

type Transaction implements Node {
  id: ID!
  created: DateTime!
  payment: Payment!
  token: String!
  kind: TransactionKind!
  isSuccess: Boolean!
  error: String
  gatewayResponse: JSONString!
  amount: Money
}

enum TransactionKind {
  EXTERNAL
  AUTH
  PENDING
  ACTION_TO_CONFIRM
  REFUND
  REFUND_ONGOING
  CAPTURE
  VOID
  CONFIRM
  CANCEL
}

union TranslatableItem = ProductTranslatableContent | CollectionTranslatableContent | CategoryTranslatableContent | AttributeTranslatableContent | AttributeValueTranslatableContent | ProductVariantTranslatableContent | PageTranslatableContent | ShippingMethodTranslatableContent | SaleTranslatableContent | VoucherTranslatableContent | MenuItemTranslatableContent

type TranslatableItemConnection {
  pageInfo: PageInfo!
  edges: [TranslatableItemEdge!]!
  totalCount: Int
}

type TranslatableItemEdge {
  node: TranslatableItem!
  cursor: String!
}

enum TranslatableKinds {
  ATTRIBUTE
  ATTRIBUTE_VALUE
  CATEGORY
  COLLECTION
  MENU_ITEM
  PAGE
  PRODUCT
  SALE
  SHIPPING_METHOD
  VARIANT
  VOUCHER
}

type TranslationError {
  field: String
  message: String
  code: TranslationErrorCode!
}

enum TranslationErrorCode {
  GRAPHQL_ERROR
  NOT_FOUND
  REQUIRED
}



scalar UUID

input UpdateInvoiceInput {
  number: String
  url: String
}

type UpdateMetadata {
  # metadataErrors: [MetadataError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MetadataError!]!
  item: ObjectWithMetadata
}

type UpdatePrivateMetadata {
  # metadataErrors: [MetadataError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [MetadataError!]!
  item: ObjectWithMetadata
}

scalar Upload

type UploadError {
  field: String
  message: String
  code: UploadErrorCode!
}

enum UploadErrorCode {
  GRAPHQL_ERROR
}

type User implements Node & ObjectWithMetadata {
  id: ID!
  lastLogin: DateTime
  email: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!
  note: String
  dateJoined: DateTime!
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  addresses: [Address]
  checkoutTokens(channel: String): [UUID!]
  giftCards(before: String, after: String, first: Int, last: Int): GiftCardCountableConnection
  orders(before: String, after: String, first: Int, last: Int): OrderCountableConnection
  userPermissions: [UserPermission]
  permissionGroups: [Group]
  editableGroups: [Group]
  avatar(size: Int): Image
  events: [CustomerEvent]
  storedPaymentSources(channel: String): [PaymentSource]
  languageCode: LanguageCodeEnum!
}

type UserAvatarDelete {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type UserAvatarUpdate {
  user: User
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type UserBulkSetActive {
  count: Int!
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

type UserCountableConnection {
  pageInfo: PageInfo!
  edges: [UserCountableEdge!]!
  totalCount: Int
}

type UserCountableEdge {
  node: User!
  cursor: String!
}

input UserCreateInput {
  defaultBillingAddress: AddressInput
  defaultShippingAddress: AddressInput
  firstName: String
  lastName: String
  email: String
  isActive: Boolean
  note: String
  languageCode: LanguageCodeEnum
  redirectUrl: String
  channel: String
}

type UserPermission {
  code: PermissionEnum!
  name: String!
  sourcePermissionGroups(userId: ID!): [Group!]
}

enum UserSortField {
  FIRST_NAME
  LAST_NAME
  EMAIL
  ORDER_COUNT
}

input UserSortingInput {
  direction: OrderDirection!
  field: UserSortField!
}

type VAT {
  countryCode: String!
  standardRate: Float
  reducedRates: [ReducedRate]!
}

type VariantMediaAssign {
  productVariant: ProductVariant
  media: ProductMedia
  errors: [ProductError!]!
}

type VariantMediaUnassign {
  productVariant: ProductVariant
  media: ProductMedia
  errors: [ProductError!]!
}



type VerifyToken {
  user: User
  isValid: Boolean!
  payload: GenericScalar
  # accountErrors: [AccountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [AccountError!]!
}

enum VolumeUnitsEnum {
  CUBIC_MILLIMETER
  CUBIC_CENTIMETER
  CUBIC_DECIMETER
  CUBIC_METER
  LITER
  CUBIC_FOOT
  CUBIC_INCH
  CUBIC_YARD
  QT
  PINT
  FL_OZ
  ACRE_IN
  ACRE_FT
}

type Voucher implements Node {
  id: ID!
  name: String
  type: VoucherTypeEnum!
  code: String!
  usageLimit: Int
  used: Int!
  startDate: DateTime!
  endDate: DateTime
  applyOncePerOrder: Boolean!
  applyOncePerCustomer: Boolean!
  discountValueType: DiscountValueTypeEnum!
  minCheckoutItemsQuantity: Int
  categories(before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  collections(before: String, after: String, first: Int, last: Int): CollectionCountableConnection
  products(before: String, after: String, first: Int, last: Int): ProductCountableConnection
  countries: [CountryDisplay]
  translation(languageCode: LanguageCodeEnum!): VoucherTranslation
  discountValue: Float
  currency: String
  minSpent: Money
  channelListings: [VoucherChannelListing!]
}

type VoucherAddCatalogues {
  voucher: Voucher
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
}

type VoucherBulkDelete {
  count: Int!
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
}

type VoucherChannelListing implements Node {
  id: ID!
  channel: Channel!
  discountValue: Float!
  currency: String!
  minSpent: Money
}

input VoucherChannelListingAddInput {
  channelId: ID!
  discountValue: PositiveDecimal
  minAmountSpent: PositiveDecimal
}

input VoucherChannelListingInput {
  addChannels: [VoucherChannelListingAddInput!]
  removeChannels: [ID!]
}

type VoucherChannelListingUpdate {
  voucher: Voucher
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
}

type VoucherCountableConnection {
  pageInfo: PageInfo!
  edges: [VoucherCountableEdge!]!
  totalCount: Int
}

type VoucherCountableEdge {
  node: Voucher!
  cursor: String!
}

type VoucherCreate {
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
  voucher: Voucher
}

type VoucherDelete {
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
  voucher: Voucher
}

enum VoucherDiscountType {
  FIXED
  PERCENTAGE
  SHIPPING
}

input VoucherFilterInput {
  status: [DiscountStatusEnum]
  timesUsed: IntRangeInput
  discountType: [VoucherDiscountType]
  started: DateTimeRangeInput
  search: String
}

input VoucherInput {
  type: VoucherTypeEnum
  name: String
  code: String
  startDate: DateTime
  endDate: DateTime
  discountValueType: DiscountValueTypeEnum
  products: [ID]
  collections: [ID]
  categories: [ID]
  minCheckoutItemsQuantity: Int
  countries: [String]
  applyOncePerOrder: Boolean
  applyOncePerCustomer: Boolean
  usageLimit: Int
}

type VoucherRemoveCatalogues {
  voucher: Voucher
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
}

enum VoucherSortField {
  CODE
  START_DATE
  END_DATE
  VALUE
  TYPE
  USAGE_LIMIT
  MINIMUM_SPENT_AMOUNT
}

input VoucherSortingInput {
  direction: OrderDirection!
  channel: String
  field: VoucherSortField!
}

type VoucherTranslatableContent implements Node {
  id: ID!
  name: String
  translation(languageCode: LanguageCodeEnum!): VoucherTranslation
  voucher: Voucher
}

type VoucherTranslate {
  # translationErrors: [TranslationError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [TranslationError!]!
  voucher: Voucher
}

type VoucherTranslation implements Node {
  id: ID!
  name: String
  language: LanguageDisplay!
}

enum VoucherTypeEnum {
  SHIPPING
  ENTIRE_ORDER
  SPECIFIC_PRODUCT
}

type VoucherUpdate {
  # discountErrors: [DiscountError!]! @deprecated(reason: "Use errors field instead. This field will be removed in Saleor 4.0.")
  errors: [DiscountError!]!
  voucher: Voucher
}


type Weight {
  unit: WeightUnitsEnum!
  value: Float!
}

scalar WeightScalar

enum WeightUnitsEnum {
  G
  LB
  OZ
  KG
  TONNE
}
