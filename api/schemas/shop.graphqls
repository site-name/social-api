extend type Query {
  shop: Shop!
}

extend type Mutation {
  shopDomainUpdate(input: SiteDomainInput): ShopDomainUpdate
  shopSettingsUpdate(input: ShopSettingsInput!): ShopSettingsUpdate
  shopFetchTaxRates: ShopFetchTaxRates
  shopSettingsTranslate(input: ShopSettingsTranslationInput!, languageCode: LanguageCodeEnum!): ShopSettingsTranslate
  shopAddressUpdate(input: AddressInput): ShopAddressUpdate
}

type Shop {
  availablePaymentGateways(currency: String, channel: String): [PaymentGateway!]!
  availableExternalAuthentications: [ExternalAuthentication!]!
  availableShippingMethods(channel: String!, address: AddressInput): [ShippingMethod]!
  channelCurrencies: [String!]!
  countries(languageCode: LanguageCodeEnum): [CountryDisplay!]!
  defaultCountry: CountryDisplay
  defaultMailSenderName: String
  defaultMailSenderAddress: String
  description: String
  domain: Domain!
  languages: [LanguageDisplay]!
  name: String!
  permissions: [Permission]!
  phonePrefixes: [String!]!
  headerText: String
  includeTaxesInPrices: Boolean!
  fulfillmentAutoApprove: Boolean!
  fulfillmentAllowUnpaid: Boolean!
  displayGrossPrices: Boolean!
  chargeTaxesOnShipping: Boolean!
  trackInventoryByDefault: Boolean
  defaultWeightUnit: WeightUnitsEnum
  translation(languageCode: LanguageCodeEnum!): ShopTranslation
  automaticFulfillmentDigitalProducts: Boolean
  defaultDigitalMaxDownloads: Int
  defaultDigitalUrlValidDays: Int
  companyAddress: Address
  customerSetPasswordUrl: String
  staffNotificationRecipients: [StaffNotificationRecipient]!
  limits: LimitInfo!
  version: String!
}

type ExternalAuthentication {
  id: String!
  name: String
}

input SiteDomainInput {
  domain: String
  name: String
}

type ShopDomainUpdate {
  shop: Shop
  errors: [ShopError!]!
}

input ShopSettingsInput {
  headerText: String
  description: String
  includeTaxesInPrices: Boolean
  displayGrossPrices: Boolean
  chargeTaxesOnShipping: Boolean
  trackInventoryByDefault: Boolean
  defaultWeightUnit: WeightUnitsEnum
  automaticFulfillmentDigitalProducts: Boolean
  fulfillmentAutoApprove: Boolean
  fulfillmentAllowUnpaid: Boolean
  defaultDigitalMaxDownloads: Int
  defaultDigitalUrlValidDays: Int
  defaultMailSenderName: String
  defaultMailSenderAddress: String
  customerSetPasswordUrl: String
}

type ShopSettingsUpdate {
  shop: Shop
  errors: [ShopError!]!
}

type ShopFetchTaxRates {
  shop: Shop
  errors: [ShopError!]!
}

input ShopSettingsTranslationInput {
  headerText: String
  description: String
}

type ShopAddressUpdate {
  shop: Shop
  errors: [ShopError!]!
}

type ShopError {
  field: String
  message: String
  code: ShopErrorCode!
}

type ShopTranslation  {
  id: String!
  headerText: String!
  description: String!
  language: LanguageDisplay!
}

enum ShopErrorCode {
  ALREADY_EXISTS
  CANNOT_FETCH_TAX_RATES
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type ShopSettingsTranslate {
  shop: Shop
  errors: [TranslationError!]!
}

type LimitInfo {
  currentUsage: Limits!
  allowedUsage: Limits!
}

type Limits {
  channels: Int
  orders: Int
  productVariants: Int
  staffUsers: Int
  warehouses: Int
}
