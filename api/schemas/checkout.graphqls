extend type Mutation {
  checkoutAddPromoCode(promoCode: String!, token: String): CheckoutAddPromoCode
  checkoutBillingAddressUpdate(billingAddress: AddressInput!, token: String!): CheckoutBillingAddressUpdate @authenticated
  checkoutComplete(paymentData: JSONString!, redirectUrl: String, storeSource: Boolean, token: String): CheckoutComplete
  checkoutCreate(input: CheckoutCreateInput!): CheckoutCreate
  checkoutCustomerAttach(customerId: String, token: String): CheckoutCustomerAttach
  checkoutCustomerDetach(token: String): CheckoutCustomerDetach
  checkoutEmailUpdate(email: String!, token: String): CheckoutEmailUpdate
  checkoutRemovePromoCode(promoCode: String!, token: String): CheckoutRemovePromoCode
  checkoutPaymentCreate(input: PaymentInput!, token: String): CheckoutPaymentCreate
  checkoutShippingAddressUpdate(shippingAddress: AddressInput!, token: String): CheckoutShippingAddressUpdate
  # checkoutShippingMethodUpdate(shippingMethodId: String!, token: String): CheckoutShippingMethodUpdate
  checkoutDeliveryMethodUpdate(deliveryMethodId: String, token: String): CheckoutDeliveryMethodUpdate
  checkoutLanguageCodeUpdate(languageCode: LanguageCodeEnum!, token: String): CheckoutLanguageCodeUpdate
}

extend type Query {
  checkout(token: String): Checkout
  checkouts(channel: String, before: String, after: String, first: Int, last: Int): CheckoutCountableConnection
}

type CheckoutDeliveryMethodUpdate {
  checkout: Checkout
  errors: [CheckoutError!]!
}

type Checkout  {
  created: DateTime!
  lastChange: DateTime!
  user: User @hasRoleAny(roles: [shop_admin, shop_staff])
  channel: Channel!
  billingAddress: Address
  shippingAddress: Address
  note: String!
  discount: Money
  discountName: String
  translatedDiscountName: String
  voucherCode: String
  giftCards: [GiftCard]!
  id: String!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  availableShippingMethods: [ShippingMethod]!
  availableCollectionPoints: [Warehouse!]!
  availablePaymentGateways: [PaymentGateway!]!
  email: String!
  isShippingRequired: Boolean!
  quantity: Int!
  lines: [CheckoutLine]!
  shippingPrice: TaxedMoney
  # shippingMethod: ShippingMethod
  deliveryMethod: DeliveryMethod
  subtotalPrice: TaxedMoney
  token: String!
  totalPrice: TaxedMoney
  languageCode: LanguageCodeEnum!
}

type CheckoutAddPromoCode {
  checkout: Checkout
  errors: [CheckoutError!]!
}

type CheckoutBillingAddressUpdate {
  checkout: Checkout
  errors: [CheckoutError!]!
}

type CheckoutComplete {
  order: Order
  confirmationNeeded: Boolean!
  confirmationData: JSONString!
  errors: [CheckoutError!]!
}

input CheckoutCreateInput {
  channel: String
  lines: [CheckoutLineInput]!
  email: String
  shippingAddress: AddressInput
  billingAddress: AddressInput
  languageCode: LanguageCodeEnum
}

type CheckoutCreate {
  # created: Boolean
  errors: [CheckoutError!]!
  checkout: Checkout
}

type CheckoutCustomerAttach {
  checkout: Checkout
  errors: [CheckoutError!]!
}

type CheckoutCustomerDetach {
  checkout: Checkout
  errors: [CheckoutError!]!
}

type CheckoutEmailUpdate {
  checkout: Checkout
  errors: [CheckoutError!]!
}

type CheckoutRemovePromoCode {
  checkout: Checkout
  errors: [CheckoutError!]!
}

type CheckoutPaymentCreate {
  checkout: Checkout
  payment: Payment
  errors: [PaymentError!]!
}

input PaymentInput {
  gateway: String!
  token: String
  amount: PositiveDecimal
  returnUrl: String
  storePaymentMethod: StorePaymentMethodEnum
  metadata: [MetadataInput!]!
}

enum StorePaymentMethodEnum {
  ON_SESSION
  OFF_SESSION
  NONE
}

type CheckoutShippingAddressUpdate {
  checkout: Checkout
  errors: [CheckoutError!]!
}

type CheckoutShippingMethodUpdate {
  checkout: Checkout
  errors: [CheckoutError!]!
}

type CheckoutLanguageCodeUpdate {
  checkout: Checkout
  errors: [CheckoutError!]!
}

type CheckoutCountableConnection {
  pageInfo: PageInfo!
  edges: [CheckoutCountableEdge!]!
  totalCount: Int
}

type CheckoutCountableEdge {
  node: Checkout!
  cursor: String!
}

type PaymentGateway {
  name: String!
  id: String!
  config: [GatewayConfigLine!]!
  currencies: [String!]!
}

type CheckoutError {
  field: String
  message: String
  code: CheckoutErrorCode!
  variants: [String!]!
  addressType: AddressTypeEnum
}

enum CheckoutErrorCode {
  BILLING_ADDRESS_NOT_SET
  CHECKOUT_NOT_FULLY_PAID
  GRAPHQL_ERROR
  PRODUCT_NOT_PUBLISHED
  PRODUCT_UNAVAILABLE_FOR_PURCHASE
  INSUFFICIENT_STOCK
  INVALID
  INVALID_SHIPPING_METHOD
  NOT_FOUND
  PAYMENT_ERROR
  QUANTITY_GREATER_THAN_LIMIT
  REQUIRED
  SHIPPING_ADDRESS_NOT_SET
  SHIPPING_METHOD_NOT_APPLICABLE
  DELIVERY_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_NOT_SET
  SHIPPING_NOT_REQUIRED
  TAX_ERROR
  UNIQUE
  VOUCHER_NOT_APPLICABLE
  GIFT_CARD_NOT_APPLICABLE
  ZERO_QUANTITY
  MISSING_CHANNEL_SLUG
  CHANNEL_INACTIVE
  UNAVAILABLE_VARIANT_IN_CHANNEL
}

type GatewayConfigLine {
  field: String!
  value: String
}
