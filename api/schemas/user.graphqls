extend type Mutation {
  login(input: LoginInput!): LoginResponse!
  userAvatarUpdate(image: Upload!): UserAvatarUpdate
  userAvatarDelete: UserAvatarDelete
  userBulkSetActive(ids: [String!]!, isActive: Boolean!): UserBulkSetActive
}

extend type Query {
  me: User
  user(id: String, email: String): User
}

type User {
  id: String!
  lastLogin: DateTime
  email: String!
  firstName: String!
  lastName: String!
  userName: String!
  isActive: Boolean!
  note: String
  dateJoined: DateTime!
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  addresses: [Address]
  checkoutTokens(channel: String): [String!]!
  giftCards(before: String, after: String, first: Int, last: Int): GiftCardCountableConnection # giftCards(before: String, after: String, first: Int, last: Int): GiftCardCountableConnection
  orders(before: String, after: String, first: Int, last: Int): OrderCountableConnection # orders(before: String, after: String, first: Int, last: Int): OrderCountableConnection
  userPermissions: [UserPermission]!
  permissionGroups: [Group]!
  editableGroups: [Group]!
  avatar(size: Int): Image
  events: [CustomerEvent]!
  storedPaymentSources(channel: String): [PaymentSource]!
  languageCode: LanguageCodeEnum!
  # wishlist: Wishlist
}

type UserPermission {
  code: PermissionEnum!
  name: String!
  sourcePermissionGroups(userId: String!): [Group!]
}

type Image {
  url: String!
  alt: String
}

type LoginResponse {
  error: LoginError
  user: User 
}

input LoginInput {
  id: String!
  loginId: String!
  password: String!
  mfaToken: String!
  deviceId: String!
  ldapOnly: Boolean!
}

type LoginError {
  field: String
  message: String
  code: LoginErrorCode!
}

enum LoginErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type UserAvatarUpdate {
  user: User
  errors: [AccountError!]!
}

type UserAvatarDelete {
  user: User
  errors: [AccountError!]!
}

type UserBulkSetActive {
  count: Int!
  errors: [AccountError!]!
}

type CustomerEvent  {
  id: String!
  date: DateTime
  type: CustomerEventsEnum
  user: User @authenticated(hi: true)
  app: App
  message: String
  count: Int
  order: Order
  orderLine: OrderLine
}

enum CustomerEventsEnum {
  ACCOUNT_CREATED
  PASSWORD_RESET_LINK_SENT
  PASSWORD_RESET
  EMAIL_CHANGED_REQUEST
  PASSWORD_CHANGED
  EMAIL_CHANGED
  PLACED_ORDER
  NOTE_ADDED_TO_ORDER
  DIGITAL_LINK_DOWNLOADED
  CUSTOMER_DELETED
  NAME_ASSIGNED
  EMAIL_ASSIGNED
  NOTE_ADDED
}

type PaymentSource {
  gateway: String!
  paymentMethodId: String
  creditCardInfo: CreditCard
  metadata: [MetadataItem]!
}
