extend type Mutation {
  productAttributeAssign(operations: [ProductAttributeAssignInput]!, productTypeId: String!): ProductAttributeAssign
  productAttributeUnassign(attributeIds: [String]!, productTypeId: String!): ProductAttributeUnassign
  productCreate(input: ProductCreateInput!): ProductCreate
  productDelete(id: String!): ProductDelete
  productBulkDelete(ids: [String]!): ProductBulkDelete
  productUpdate(id: String!, input: ProductInput!): ProductUpdate
  productTranslate(id: String!, input: TranslationInput!, languageCode: LanguageCodeEnum!): ProductTranslate
  productChannelListingUpdate(id: String!, input: ProductChannelListingUpdateInput!): ProductChannelListingUpdate
  productReorderAttributeValues(attributeId: String!, moves: [ReorderInput]!, productId: String!): ProductReorderAttributeValues
}

extend type Query {
  product(id: String, slug: String, channel: String): Product
  products(filter: ProductFilterInput, sortBy: ProductOrder, channel: String, before: String, after: String, first: Int, last: Int): ProductCountableConnection
}

input ProductChannelListingUpdateInput {
  updateChannels: [ProductChannelListingAddInput!]
  removeChannels: [String!]
}

type ProductChannelListingUpdate {
  product: Product
  errors: [ProductChannelListingError!]!
}

type ProductReorderAttributeValues {
  product: Product
  errors: [ProductError!]!
}

input ProductChannelListingAddInput {
  channelId: String!
  isPublished: Boolean
  publicationDate: Date
  visibleInListings: Boolean
  isAvailableForPurchase: Boolean
  availableForPurchaseDate: Date
  addVariants: [String!]
  removeVariants: [String!]
}

type Product implements Node & ObjectWithMetadata {
  id: String!
  seoTitle: String
  seoDescription: String
  name: String!
  description: JSONString!
  productType: ProductType!
  slug: String!
  category: Category
  updatedAt: DateTime
  chargeTaxes: Boolean!
  weight: Weight
  defaultVariant: ProductVariant
  rating: Float
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  channel: String
  thumbnail(size: Int): Image
  pricing(address: AddressInput): ProductPricingInfo
  isAvailable(address: AddressInput): Boolean
  taxType: TaxType
  attributes: [SelectedAttribute!]!
  channelListings: [ProductChannelListing!]
  mediaById(id: String): ProductMedia
  variants: [ProductVariant]
  media: [ProductMedia!]
  collections: [Collection]
  translation(languageCode: LanguageCodeEnum!): ProductTranslation
  availableForPurchase: Date
  isAvailableForPurchase: Boolean
}

type ProductPricingInfo {
  onSale: Boolean
  discount: TaxedMoney
  discountLocalCurrency: TaxedMoney
  priceRange: TaxedMoneyRange
  priceRangeUndiscounted: TaxedMoneyRange
  priceRangeLocalCurrency: TaxedMoneyRange
}

type ProductChannelListing implements Node {
  id: String!
  publicationDate: Date
  isPublished: Boolean!
  channel: Channel!
  visibleInListings: Boolean!
  availableForPurchase: Date
  discountedPrice: Money
  purchaseCost: MoneyRange
  margin: Margin
  isAvailableForPurchase: Boolean
  pricing(address: AddressInput): ProductPricingInfo
}

type ProductTranslation implements Node {
  id: String!
  seoTitle: String
  seoDescription: String
  name: String
  description: JSONString
  language: LanguageDisplay!
}

type Margin {
  start: Int
  stop: Int
}

input ProductAttributeAssignInput {
  id: String!
  type: ProductAttributeType!
}

type ProductAttributeAssign {
  productType: ProductType
  errors: [ProductError!]!
}

type ProductAttributeUnassign {
  productType: ProductType
  errors: [ProductError!]!
}

input ProductCreateInput {
  attributes: [AttributeValueInput!]
  category: String
  chargeTaxes: Boolean
  collections: [String!]
  description: JSONString
  name: String
  slug: String
  taxCode: String
  seo: SeoInput
  weight: WeightScalar
  rating: Float
  productType: String!
}

type ProductCreate {
  errors: [ProductError!]!
  product: Product
}

type ProductDelete {
  errors: [ProductError!]!
  product: Product
}

type ProductBulkDelete {
  count: Int!
  errors: [ProductError!]!
}

input ProductInput {
  attributes: [AttributeValueInput!]
  category: String
  chargeTaxes: Boolean
  collections: [String!]
  description: JSONString
  name: String
  slug: String
  taxCode: String
  seo: SeoInput
  weight: WeightScalar
  rating: Float
}

type ProductUpdate {
  errors: [ProductError!]!
  product: Product
}

input TranslationInput {
  seoTitle: String
  seoDescription: String
  name: String
  description: JSONString
}

type ProductTranslate {
  errors: [TranslationError!]!
  product: Product
}

input ProductFilterInput {
  isPublished: Boolean
  collections: [String]
  categories: [String]
  hasCategory: Boolean
  attributes: [AttributeInput]
  stockAvailability: StockAvailability
  stocks: ProductStockFilterInput
  search: String
  metadata: [MetadataInput]
  price: PriceRangeInput
  minimalPrice: PriceRangeInput
  productTypes: [String]
  giftCard: Boolean
  ids: [String]
  hasPreorderedVariants: Boolean
  channel: String
}

input ProductOrder {
  direction: OrderDirection!
  channel: String
  attributeId: String
  field: ProductOrderField
}

type ProductCountableConnection {
  pageInfo: PageInfo!
  edges: [ProductCountableEdge!]!
  totalCount: Int
}

enum ProductAttributeType {
  PRODUCT
  VARIANT
}

type ProductError {
  field: String
  message: String
  code: ProductErrorCode!
  attributes: [String!]
  values: [String!]
}

enum ProductErrorCode {
  ALREADY_EXISTS
  ATTRIBUTE_ALREADY_ASSIGNED
  ATTRIBUTE_CANNOT_BE_ASSIGNED
  ATTRIBUTE_VARIANTS_DISABLED
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  PRODUCT_WITHOUT_CATEGORY
  NOT_PRODUCTS_IMAGE
  NOT_PRODUCTS_VARIANT
  NOT_FOUND
  REQUIRED
  UNIQUE
  VARIANT_NO_DIGITAL_CONTENT
  CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT
  PRODUCT_NOT_ASSIGNED_TO_CHANNEL
  UNSUPPORTED_MEDIA_PROVIDER
}

input SeoInput {
  title: String
  description: String
}

input ProductStockFilterInput {
  warehouseIds: [String!]
  quantity: IntRangeInput
}

input PriceInput {
  currency: String!
  amount: PositiveDecimal!
}

input PriceRangeInput {
  gte: Float
  lte: Float
}

enum ProductOrderField {
  NAME
  RANK
  PRICE
  MINIMAL_PRICE
  DATE
  TYPE
  PUBLISHED
  PUBLICATION_DATE
  COLLECTION
  RATING
}

type ProductCountableEdge {
  node: Product!
  cursor: String!
}

enum ProductMediaType {
  IMAGE
  VIDEO
}

enum StockAvailability {
  IN_STOCK
  OUT_OF_STOCK
}
