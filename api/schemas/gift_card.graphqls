extend type Mutation {
  giftCardActivate(id: String!): GiftCardActivate @hasRoleAny(roles: [shop_admin, shop_staff])
  giftCardCreate(input: GiftCardCreateInput!): GiftCardCreate @hasRoleAny(roles: [shop_admin, shop_staff])
  giftCardDelete(id: String!): GiftCardDelete @hasRoles(roles: [shop_admin])
  giftCardDeactivate(id: String!): GiftCardDeactivate @hasRoleAny(roles: [shop_admin, shop_staff])
  giftCardUpdate(id: String!, input: GiftCardUpdateInput!): GiftCardUpdate @hasRoleAny(roles: [shop_admin, shop_staff])
  giftCardResend(input: GiftCardResendInput!): GiftCardResend @hasRoleAny(roles: [shop_admin, shop_staff])
  giftCardAddNote(id: String!, input: GiftCardAddNoteInput!): GiftCardAddNote @hasRoleAny(roles: [shop_admin, shop_staff])
  giftCardBulkDelete(ids: [String!]!): GiftCardBulkDelete @hasRoles(roles: [shop_admin])
  giftCardBulkActivate(ids: [String!]!): GiftCardBulkActivate @hasRoleAny(roles: [shop_admin, shop_staff])
  giftCardBulkDeactivate(ids: [String!]!): GiftCardBulkDeactivate @hasRoleAny(roles: [shop_admin, shop_staff])
}

extend type Query {
  giftCard(id: String!): GiftCard @hasRoleAny(roles: [shop_admin, shop_staff])
  giftCards(sortBy: GiftCardSortingInput, filter: GiftCardFilterInput, before: String, after: String, first: Int, last: Int): GiftCardCountableConnection @hasRoleAny(roles: [shop_admin, shop_staff])
  giftCardCurrencies: [String!]!
}

type GiftCard  {
  code: String!
  isActive: Boolean!
  expiryDate: Date
  tag: String
  created: DateTime!
  lastUsedOn: DateTime
  initialBalance: Money
  currentBalance: Money
  id: String!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  displayCode: String!
  createdBy: User @hasRoleAny(roles: [shop_admin, shop_staff])
  usedBy: User @hasRoleAny(roles: [shop_admin, shop_staff])
  createdByEmail: String @hasRoleAny(roles: [shop_admin, shop_staff])
  usedByEmail: String @hasRoleAny(roles: [shop_admin, shop_staff])
  app: App
  product: Product
  events: [GiftCardEvent!]! @hasRoleAny(roles: [shop_admin, shop_staff])
  boughtInChannel: String
}

type GiftCardDelete {
  errors: [GiftCardError!]!
  giftCard: GiftCard
}

type GiftCardActivate {
  giftCard: GiftCard
  errors: [GiftCardError!]!
}

input GiftCardCreateInput {
  tag: String
  expiryDate: Date
  # startDate: Date
  # endDate: Date
  balance: PriceInput!
  userEmail: String
  channel: String
  isActive: Boolean!
  code: String
  note: String
}

type GiftCardCreate {
  errors: [GiftCardError!]!
  giftCard: GiftCard
}

type GiftCardDeactivate {
  giftCard: GiftCard
  errors: [GiftCardError!]!
}

input GiftCardUpdateInput {
  tag: String
  expiryDate: Date
  # startDate: Date
  # endDate: Date
  balanceAmount: PositiveDecimal
}

type GiftCardUpdate {
  errors: [GiftCardError!]!
  giftCard: GiftCard
}

type GiftCardCountableConnection {
  pageInfo: PageInfo!
  edges: [GiftCardCountableEdge!]!
  totalCount: Int
}

type GiftCardCountableEdge {
  node: GiftCard!
  cursor: String!
}

type GiftCardError {
  field: String
  message: String
  code: GiftCardErrorCode!
}

enum GiftCardErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

type GiftCardAddNote {
  giftCard: GiftCard
  event: GiftCardEvent
  errors: [GiftCardError!]!
}

input GiftCardAddNoteInput {
  message: String!
}

type GiftCardBulkActivate {
  count: Int!
  errors: [GiftCardError!]!
}

type GiftCardBulkDeactivate {
  count: Int!
  errors: [GiftCardError!]!
}

type GiftCardBulkDelete {
  count: Int!
  errors: [GiftCardError!]!
}

type GiftCardEvent  {
  id: String!
  date: DateTime
  type: GiftCardEventsEnum
  user: User @hasRoleAny(roles: [shop_admin, shop_staff])
  app: App
  message: String
  email: String
  orderId: String
  orderNumber: String
  tag: String
  oldTag: String
  balance: GiftCardEventBalance
  expiryDate: Date
  oldExpiryDate: Date
}

type GiftCardEventBalance {
  initialBalance: Money
  currentBalance: Money!
  oldInitialBalance: Money
  oldCurrentBalance: Money
}

enum GiftCardEventsEnum {
  issued
  bought
  updated
  activated
  deactivated
  balance_reset
  expiry_date_updated
  tag_updated
  sent_to_customer
  resent
  note_added
  used_in_order
}

input GiftCardFilterInput {
  isActive: Boolean
  tag: String
  tags: [String!]!
  products: [String!]!
  usedBy: [String!]!
  currency: String
  currentBalance: PriceRangeInput
  initialBalance: PriceRangeInput
}

type GiftCardResend {
  giftCard: GiftCard
  errors: [GiftCardError!]!
}

input GiftCardResendInput {
  id: String!
  email: String
  channel: String!
}

type GiftCardSettings {
  expiryType: GiftCardSettingsExpiryTypeEnum!
  expiryPeriod: TimePeriod
}

type GiftCardSettingsError {
  field: String
  message: String
  code: GiftCardSettingsErrorCode!
}

enum GiftCardSettingsErrorCode {
  INVALID
  REQUIRED
  GRAPHQL_ERROR
}

enum GiftCardSettingsExpiryTypeEnum {
  never_expire
  expiry_period
}

type GiftCardSettingsUpdate {
  giftCardSettings: GiftCardSettings
  errors: [GiftCardSettingsError!]!
}

input GiftCardSettingsUpdateInput {
  expiryType: GiftCardSettingsExpiryTypeEnum
  expiryPeriod: TimePeriodInputType
}

enum GiftCardSortField {
  TAG
  PRODUCT
  USED_BY
  CURRENT_BALANCE
}

input GiftCardSortingInput {
  direction: OrderDirection!
  field: GiftCardSortField!
}
