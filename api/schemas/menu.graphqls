extend type Mutation {
  menuCreate(input: MenuCreateInput!): MenuCreate
  menuDelete(id: String!): MenuDelete
  menuBulkDelete(ids: [String]!): MenuBulkDelete
  menuUpdate(id: String!, input: MenuInput!): MenuUpdate
  menuItemCreate(input: MenuItemCreateInput!): MenuItemCreate
  menuItemDelete(id: String!): MenuItemDelete
  menuItemBulkDelete(ids: [String]!): MenuItemBulkDelete
  menuItemUpdate(id: String!, input: MenuItemInput!): MenuItemUpdate
  menuItemTranslate(id: String!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): MenuItemTranslate
  menuItemMove(menu: String!, moves: [MenuItemMoveInput]!): MenuItemMove
}

extend type Query {
  menu(channel: String, id: String, name: String, slug: String): Menu
  menus(channel: String, sortBy: MenuSortingInput, filter: MenuFilterInput, before: String, after: String, first: Int, last: Int): MenuCountableConnection
  menuItem(id: String!, channel: String): MenuItem
  menuItems(channel: String, sortBy: MenuItemSortingInput, filter: MenuItemFilterInput, before: String, after: String, first: Int, last: Int): MenuItemCountableConnection
}

type Menu implements Node & ObjectWithMetadata {
  id: String!
  name: String!
  slug: String!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  items: [MenuItem]
}

type MenuItem implements Node & ObjectWithMetadata {
  id: String!
  name: String!
  menu: Menu!
  parent: MenuItem
  category: Category
  collection: Collection
  page: Page
  level: Int!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  children: [MenuItem]
  url: String
  translation(languageCode: LanguageCodeEnum!): MenuItemTranslation
}

input MenuCreateInput {
  name: String!
  slug: String
  items: [MenuItemInput]
}

type MenuCreate {
  errors: [MenuError!]!
  menu: Menu
}

type MenuDelete {
  errors: [MenuError!]!
  menu: Menu
}

type MenuError {
  field: String
  message: String
  code: MenuErrorCode!
}

enum MenuErrorCode {
  CANNOT_ASSIGN_NODE
  GRAPHQL_ERROR
  INVALID
  INVALID_MENU_ITEM
  NO_MENU_ITEM_PROVIDED
  NOT_FOUND
  REQUIRED
  TOO_MANY_MENU_ITEMS
  UNIQUE
}

type MenuBulkDelete {
  count: Int!
  errors: [MenuError!]!
}

input MenuInput {
  name: String
  slug: String
}

type MenuUpdate {
  errors: [MenuError!]!
  menu: Menu
}

input MenuItemCreateInput {
  name: String!
  url: String
  category: String
  collection: String
  page: String
  menu: String!
  parent: String
}

type MenuItemCreate {
  errors: [MenuError!]!
  menuItem: MenuItem
}

type MenuItemDelete {
  errors: [MenuError!]!
  menuItem: MenuItem
}

type MenuItemBulkDelete {
  count: Int!
  errors: [MenuError!]!
}

input MenuItemInput {
  name: String
  url: String
  category: String
  collection: String
  page: String
}

type MenuItemUpdate {
  errors: [MenuError!]!
  menuItem: MenuItem
}

type MenuItemTranslate {
  errors: [TranslationError!]!
  menuItem: MenuItem
}

input MenuItemMoveInput {
  itemId: String!
  parentId: String
  sortOrder: Int
}

type MenuItemMove {
  menu: Menu
  errors: [MenuError!]!
}

input MenuSortingInput {
  direction: OrderDirection!
  field: MenuSortField!
}

input MenuFilterInput {
  search: String
  slug: [String]
  metadata: [MetadataInput]
}

type MenuCountableConnection {
  pageInfo: PageInfo!
  edges: [MenuCountableEdge!]!
  totalCount: Int
}

type MenuCountableEdge {
  node: Menu!
  cursor: String!
}

type MenuItemTranslation implements Node {
  id: String!
  name: String!
  language: LanguageDisplay!
}

input MenuItemSortingInput {
  direction: OrderDirection!
  field: MenuItemsSortField!
}

input MenuItemFilterInput {
  search: String
  metadata: [MetadataInput]
}

type MenuItemCountableConnection {
  pageInfo: PageInfo!
  edges: [MenuItemCountableEdge!]!
  totalCount: Int
}

type MenuItemCountableEdge {
  node: MenuItem!
  cursor: String!
}

enum MenuItemsSortField {
  NAME
}

enum MenuSortField {
  NAME
  ITEMS_COUNT
}
