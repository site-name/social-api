extend type Mutation {
  saleCreate(input: SaleInput!): SaleCreate
  saleDelete(id: ID!): SaleDelete
  saleBulkDelete(ids: [ID]!): SaleBulkDelete
  saleUpdate(id: ID!, input: SaleInput!): SaleUpdate
  saleCataloguesAdd(id: ID!, input: CatalogueInput!): SaleAddCatalogues
  saleCataloguesRemove(id: ID!, input: CatalogueInput!): SaleRemoveCatalogues
  saleTranslate(id: ID!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): SaleTranslate
  saleChannelListingUpdate(id: ID!, input: SaleChannelListingInput!): SaleChannelListingUpdate
}

extend type Query {
  sale(id: ID!, channel: String): Sale
  sales(filter: SaleFilterInput, sortBy: SaleSortingInput, query: String, channel: String, before: String, after: String, first: Int, last: Int): SaleCountableConnection
}

type Sale implements Node & ObjectWithMetadata {
  id: ID!
  name: String!
  type: SaleType!
  startDate: DateTime!
  endDate: DateTime
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  categories(before: String, after: String, first: Int, last: Int): CategoryCountableConnection
  collections(before: String, after: String, first: Int, last: Int): CollectionCountableConnection
  products(before: String, after: String, first: Int, last: Int): ProductCountableConnection
  variants(before: String, after: String, first: Int, last: Int): ProductVariantCountableConnection
  translation(languageCode: LanguageCodeEnum!): SaleTranslation
  channelListings: [SaleChannelListing!]
  discountValue: Float
  currency: String
}

input SaleInput {
  name: String
  type: DiscountValueTypeEnum
  value: PositiveDecimal
  products: [ID]
  variants: [ID]
  categories: [ID]
  collections: [ID]
  startDate: DateTime
  endDate: DateTime
}

type SaleCreate {
  errors: [DiscountError!]!
  sale: Sale
}

type SaleDelete {
  errors: [DiscountError!]!
  sale: Sale
}

type SaleBulkDelete {
  count: Int!
  errors: [DiscountError!]!
}

type SaleUpdate {
  errors: [DiscountError!]!
  sale: Sale
}

input CatalogueInput {
  products: [ID]
  categories: [ID]
  collections: [ID]
}

type SaleAddCatalogues {
  sale: Sale
  errors: [DiscountError!]!
}

type SaleRemoveCatalogues {
  sale: Sale
  errors: [DiscountError!]!
}

type SaleTranslate {
  errors: [TranslationError!]!
  sale: Sale
}

input SaleChannelListingInput {
  addChannels: [SaleChannelListingAddInput!]
  removeChannels: [ID!]
}

type SaleChannelListingUpdate {
  sale: Sale
  errors: [DiscountError!]!
}

input SaleFilterInput {
  status: [DiscountStatusEnum]
  saleType: DiscountValueTypeEnum
  started: DateTimeRangeInput
  search: String
  metadata: [MetadataFilter]
}

enum SaleSortField {
  NAME
  START_DATE
  END_DATE
  VALUE
  TYPE
}

input SaleSortingInput {
  direction: OrderDirection!
  channel: String
  field: SaleSortField!
}

type SaleCountableConnection {
  pageInfo: PageInfo!
  edges: [SaleCountableEdge!]!
  totalCount: Int
}

type SaleCountableEdge {
  node: Sale!
  cursor: String!
}

enum SaleType {
  FIXED
  PERCENTAGE
}

type SaleTranslation implements Node {
  id: ID!
  name: String
  language: LanguageDisplay!
}

type SaleChannelListing implements Node {
  id: ID!
  channel: Channel!
  discountValue: Float!
  currency: String!
}

enum DiscountValueTypeEnum {
  FIXED
  PERCENTAGE
}

input SaleChannelListingAddInput {
  channelId: ID!
  discountValue: PositiveDecimal!
}
