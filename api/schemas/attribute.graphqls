extend type Mutation {
  attributeCreate(input: AttributeCreateInput!): AttributeCreate
  attributeDelete(id: String!): AttributeDelete
  attributeUpdate(id: String!, input: AttributeUpdateInput!): AttributeUpdate
  attributeTranslate(id: String!, input: NameTranslationInput!, languageCode: LanguageCodeEnum!): AttributeTranslate
  attributeBulkDelete(ids: [String!]!): AttributeBulkDelete
  attributeValueBulkDelete(ids: [String!]!): AttributeValueBulkDelete
  attributeValueCreate(attributeID: String!, input: AttributeValueCreateInput!): AttributeValueCreate
  attributeValueDelete(id: String!): AttributeValueDelete
  attributeValueUpdate(id: String!, input: AttributeValueUpdateInput!): AttributeValueUpdate
  attributeValueTranslate(id: String!, input: AttributeValueTranslationInput!, languageCode: LanguageCodeEnum!): AttributeValueTranslate
  attributeReorderValues(attributeId: String!, moves: [ReorderInput]!): AttributeReorderValues
}

extend type Query {
  attributes(filter: AttributeFilterInput, sortBy: AttributeSortingInput, chanelSlug: String, before: String, after: String, first: Int, last: Int): AttributeCountableConnection
  attribute(id: String, slug: String): Attribute
}

type Attribute  {
  id: String!
  productTypes(before: String, after: String, first: Int, last: Int): ProductTypeCountableConnection!
  productVariantTypes(before: String, after: String, first: Int, last: Int): ProductTypeCountableConnection!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  inputType: AttributeInputTypeEnum
  entityType: AttributeEntityTypeEnum
  name: String
  slug: String
  type: AttributeTypeEnum
  unit: MeasurementUnitsEnum
  choices(sortBy: AttributeChoicesSortingInput, filter: AttributeValueFilterInput, before: String, after: String, first: Int, last: Int): AttributeValueCountableConnection
  valueRequired: Boolean!
  visibleInStorefront: Boolean!
  filterableInStorefront: Boolean!
  filterableInDashboard: Boolean!
  availableInGrid: Boolean!
  translation(languageCode: LanguageCodeEnum!): AttributeTranslation
  storefrontSearchPosition: Int!
  withChoices: Boolean!
}

input AttributeValueFilterInput {
  search: String
}

enum AttributeChoicesSortField {
  NAME
  SLUG
}

input AttributeChoicesSortingInput {
  direction: OrderDirection!
  field: AttributeChoicesSortField!
}

type AttributeValueCountableConnection {
  pageInfo: PageInfo!
  edges: [AttributeValueCountableEdge!]!
  totalCount: Int
}

type AttributeValueCountableEdge {
  node: AttributeValue!
  cursor: String!
}

type SelectedAttribute {
  attribute: Attribute!
  values: [AttributeValue]!
}

input AttributeCreateInput {
  inputType: AttributeInputTypeEnum
  entityType: AttributeEntityTypeEnum
  name: String!
  slug: String
  type: AttributeTypeEnum!
  unit: MeasurementUnitsEnum
  values: [AttributeValueCreateInput]
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  storefrontSearchPosition: Int
  availableInGrid: Boolean
}

type AttributeCreate {
  attribute: Attribute
  errors: [AttributeError!]!
}

type AttributeDelete {
  errors: [AttributeError!]!
  attribute: Attribute
}

input AttributeUpdateInput {
  name: String
  slug: String
  unit: MeasurementUnitsEnum
  removeValues: [String!]!
  addValues: [AttributeValueUpdateInput]
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  storefrontSearchPosition: Int
  availableInGrid: Boolean
}

input AttributeValueUpdateInput {
  value: String
  richText: JSONString
  fileUrl: String
  contentType: String
  name: String
}

type AttributeUpdate {
  attribute: Attribute
  errors: [AttributeError!]!
}

type AttributeTranslate {
  errors: [TranslationError!]!
  attribute: Attribute
}

type AttributeBulkDelete {
  count: Int!
  errors: [AttributeError!]!
}

type AttributeValueBulkDelete {
  count: Int!
  errors: [AttributeError!]!
}

input AttributeValueCreateInput {
  name: String!
  value: String
  richText: JSONString
  fileUrl: String
  contentType: String
}

type AttributeValueUpdate {
  attribute: Attribute
  errors: [AttributeError!]!
  attributeValue: AttributeValue
}

input AttributeValueTranslationInput {
  name: String
  richText: JSONString
}

type AttributeValueTranslate {
  errors: [TranslationError!]!
  attributeValue: AttributeValue
}

type AttributeReorderValues {
  attribute: Attribute
  errors: [AttributeError!]!
}

enum AttributeEntityTypeEnum {
  page
  product
}

type AttributeError {
  field: String
  message: String
  code: AttributeErrorCode!
}

enum AttributeErrorCode {
  already_exists
  graphql_error
  invalid
  not_found
  required
  unique
}

input AttributeFilterInput {
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  availableInGrid: Boolean
  metadata: [MetadataInput]
  search: String
  ids: [String!]!
  type: AttributeTypeEnum
  inCollection: String
  inCategory: String
  channel: String
}

enum AttributeSortField {
  NAME
  SLUG
  VALUE_REQUIRED
  IS_VARIANT_ONLY
  VISIBLE_IN_STOREFRONT
  FILTERABLE_IN_STOREFRONT
  FILTERABLE_IN_DASHBOARD
  STOREFRONT_SEARCH_POSITION
  AVAILABLE_IN_GRID
}

input AttributeSortingInput {
  direction: OrderDirection!
  field: AttributeSortField!
}

type AttributeCountableConnection {
  pageInfo: PageInfo!
  edges: [AttributeCountableEdge!]!
  totalCount: Int
}

type AttributeCountableEdge {
  node: Attribute!
  cursor: String!
}

input AttributeInput {
  slug: String!
  values: [String!]!
  valuesRange: IntRangeInput
  dateTime: DateTimeRangeInput
  date: DateRangeInput
  boolean: Boolean
}

enum AttributeInputTypeEnum {
  dropdown
  multiselect
  file
  reference
  numeric
  rich_text
  swatch
  boolean
  date
  date_time
}

type AttributeTranslation  {
  id: String!
  name: String!
  language: LanguageDisplay!
}

enum AttributeTypeEnum {
  product_type
  page_type
}

type AttributeValue  {
  id: String!
  name: String
  slug: String
  value: String
  translation(languageCode: LanguageCodeEnum!): AttributeValueTranslation
  inputType: AttributeInputTypeEnum
  reference: String
  file: File
  richText: JSONString
  boolean: Boolean
  date: Date
  dateTime: DateTime
}

type AttributeValueTranslation  {
  id: String!
  name: String!
  richText: JSONString
  language: LanguageDisplay!
}

type AttributeValueDelete {
  attribute: Attribute
  errors: [AttributeError!]!
  attributeValue: AttributeValue
}

type AttributeValueCreate {
  attribute: Attribute
  errors: [AttributeError!]!
  attributeValue: AttributeValue
}
