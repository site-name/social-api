extend type Mutation {
  pageTypeCreate(input: PageTypeCreateInput!): PageTypeCreate
  pageTypeUpdate(id: String, input: PageTypeUpdateInput!): PageTypeUpdate
  pageTypeDelete(id: String!): PageTypeDelete
  pageTypeBulkDelete(ids: [String!]!): PageTypeBulkDelete
  pageTypeReorderAttributes(moves: [ReorderInput!]!, pageTypeId: String!): PageTypeReorderAttributes
}

extend type Query {
  pageType(id: String!): PageType
  pageTypes(sortBy: PageTypeSortingInput, filter: PageTypeFilterInput, before: String, after: String, first: Int, last: Int): PageTypeCountableConnection
}

type PageType  {
  id: String!
  name: String!
  slug: String!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  attributes: [Attribute]!
  availableAttributes(filter: AttributeFilterInput, before: String, after: String, first: Int, last: Int): AttributeCountableConnection
  hasPages: Boolean
}

input PageTypeCreateInput {
  name: String
  slug: String
  addAttributes: [String!]!
}

type PageTypeCreate {
  errors: [PageError!]!
  pageType: PageType
}

input PageTypeUpdateInput {
  name: String
  slug: String
  addAttributes: [String!]!
  removeAttributes: [String!]!
}

type PageTypeUpdate {
  errors: [PageError!]!
  pageType: PageType
}

type PageTypeDelete {
  errors: [PageError!]!
  pageType: PageType
}

type PageTypeBulkDelete {
  count: Int!
  errors: [PageError!]!
}

type PageTypeReorderAttributes {
  pageType: PageType
  errors: [PageError!]!
}

input PageTypeSortingInput {
  direction: OrderDirection!
  field: PageTypeSortField!
}

input PageTypeFilterInput {
  search: String
}

type PageTypeCountableConnection {
  pageInfo: PageInfo!
  edges: [PageTypeCountableEdge!]!
  totalCount: Int
}

enum PageTypeSortField {
  NAME
  SLUG
}

type PageTypeCountableEdge {
  node: PageType!
  cursor: String!
}
