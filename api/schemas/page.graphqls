extend type Mutation {
  pageCreate(input: PageCreateInput!): PageCreate
  pageDelete(id: String!): PageDelete
  pageBulkDelete(ids: [String!]!): PageBulkDelete
  pageBulkPublish(ids: [String!]!, isPublished: Boolean!): PageBulkPublish
  pageUpdate(id: String!, input: PageInput!): PageUpdate
  pageTranslate(id: String!, input: PageTranslationInput!, languageCode: LanguageCodeEnum!): PageTranslate
  pageAttributeAssign(attributeIds: [String!]!, pageTypeId: String!): PageAttributeAssign
  pageAttributeUnassign(attributeIds: [String!]!, pageTypeId: String!): PageAttributeUnassign
  pageReorderAttributeValues(attributeId: String!, moves: [ReorderInput]!, pageId: String!): PageReorderAttributeValues
}

extend type Query {
  page(id: String, slug: String): Page
  pages(sortBy: PageSortingInput, filter: PageFilterInput, before: String, after: String, first: Int, last: Int): PageCountableConnection
}

type Page  {
  id: String!
  seoTitle: String
  seoDescription: String
  title: String!
  content: JSONString!
  publicationDate: Date
  isPublished: Boolean!
  slug: String!
  pageType: PageType!
  created: DateTime!
  privateMetadata: [MetadataItem]!
  metadata: [MetadataItem]!
  translation(languageCode: LanguageCodeEnum!): PageTranslation
  attributes: [SelectedAttribute!]!
}

input PageCreateInput {
  slug: String
  title: String
  content: JSONString!
  attributes: [AttributeValueInput!]!
  isPublished: Boolean
  publicationDate: String
  seo: SeoInput
  pageType: String!
}

type PageCreate {
  errors: [PageError!]!
  page: Page
}

type PageDelete {
  errors: [PageError!]!
  page: Page
}

type PageBulkDelete {
  count: Int!
  errors: [PageError!]!
}

type PageBulkPublish {
  count: Int!
  errors: [PageError!]!
}

input PageInput {
  slug: String
  title: String
  content: JSONString!
  attributes: [AttributeValueInput!]!
  isPublished: Boolean
  publicationDate: String
  seo: SeoInput
}

type PageUpdate {
  errors: [PageError!]!
  page: Page
}

input PageTranslationInput {
  seoTitle: String
  seoDescription: String
  title: String
  content: JSONString!
}

type PageTranslate {
  errors: [TranslationError!]!
  page: PageTranslatableContent
}

type PageAttributeAssign {
  pageType: PageType
  errors: [PageError!]!
}

type PageAttributeUnassign {
  pageType: PageType
  errors: [PageError!]!
}

type PageReorderAttributeValues {
  page: Page
  errors: [PageError!]!
}

input PageSortingInput {
  direction: OrderDirection!
  field: PageSortField!
}

input PageFilterInput {
  search: String
  metadata: [MetadataInput]!
  pageTypes: [String!]!
  ids: [String!]!
}

type PageCountableConnection {
  pageInfo: PageInfo!
  edges: [PageCountableEdge!]!
  totalCount: Int
}

type PageCountableEdge {
  node: Page!
  cursor: String!
}

type PageError {
  field: String
  message: String
  code: PageErrorCode!
  attributes: [String!]!
  values: [String!]!
}

enum PageErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  DUPLICATED_INPUT_ITEM
  ATTRIBUTE_ALREADY_ASSIGNED
}

enum PageSortField {
  TITLE
  SLUG
  VISIBILITY
  CREATION_DATE
  PUBLICATION_DATE
}

type PageTranslation  {
  id: String!
  seoTitle: String
  seoDescription: String
  title: String
  content: JSONString!
  language: LanguageDisplay!
}
