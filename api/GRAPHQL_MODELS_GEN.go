// Code generated by github.com/99designs/gqlgen

package api

import (
	"github.com/99designs/gqlgen/graphql"
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/modules/measurement"
)

type AccountAddressCreate struct {
	User    *User    `json:"user"`
	Address *Address `json:"address"`
}

type AccountAddressDelete struct {
	Ok bool `json:"ok"`
}

type AccountAddressUpdate struct {
	User    *User    `json:"user"`
	Address *Address `json:"address"`
}

type AccountDelete struct {
	User *User `json:"user"`
}

type AccountError struct {
	Field   *string          `json:"field"`
	Message *string          `json:"message"`
	Code    AccountErrorCode `json:"code"`
}

type AccountInput struct {
	FirstName              *string           `json:"firstName"`
	LastName               *string           `json:"lastName"`
	DefaultBillingAddress  *AddressInput     `json:"defaultBillingAddress"`
	DefaultShippingAddress *AddressInput     `json:"defaultShippingAddress"`
	LanguageCode           *LanguageCodeEnum `json:"languageCode"`
}

type AccountRegister struct {
	RequiresConfirmation *bool `json:"requiresConfirmation"`
	User                 *User `json:"user"`
}

type AccountRegisterInput struct {
	FirstName    *string           `json:"firstName"`
	LastName     *string           `json:"lastName"`
	UserName     string            `json:"userName"`
	Email        string            `json:"email"`
	Password     string            `json:"password"`
	RedirectURL  *string           `json:"redirectUrl"`
	LanguageCode *LanguageCodeEnum `json:"languageCode"`
	Metadata     []*MetadataInput  `json:"metadata"`
	Channel      *string           `json:"channel"`
}

type AccountRequestDeletion struct {
	Ok bool `json:"ok"`
}

type AccountSetDefaultAddress struct {
	User *User `json:"user"`
}

type AccountUpdate struct {
	User *User `json:"user"`
}

type AddressCreate struct {
	User    *User           `json:"user"`
	Errors  []*AccountError `json:"errors"`
	Address *Address        `json:"address"`
}

type AddressDelete struct {
	User    *User           `json:"user"`
	Errors  []*AccountError `json:"errors"`
	Address *Address        `json:"address"`
}

type AddressInput struct {
	FirstName      *string      `json:"firstName"`
	LastName       *string      `json:"lastName"`
	CompanyName    *string      `json:"companyName"`
	StreetAddress1 *string      `json:"streetAddress1"`
	StreetAddress2 *string      `json:"streetAddress2"`
	City           *string      `json:"city"`
	CityArea       *string      `json:"cityArea"`
	PostalCode     *string      `json:"postalCode"`
	Country        *CountryCode `json:"country"`
	CountryArea    *string      `json:"countryArea"`
	Phone          *string      `json:"phone"`
}

type AddressSetDefault struct {
	User   *User           `json:"user"`
	Errors []*AccountError `json:"errors"`
}

type AddressUpdate struct {
	User    *User           `json:"user"`
	Errors  []*AccountError `json:"errors"`
	Address *Address        `json:"address"`
}

type AddressValidationData struct {
	CountryCode        *string        `json:"countryCode"`
	CountryName        *string        `json:"countryName"`
	AddressFormat      *string        `json:"addressFormat"`
	AddressLatinFormat *string        `json:"addressLatinFormat"`
	AllowedFields      []string       `json:"allowedFields"`
	RequiredFields     []string       `json:"requiredFields"`
	UpperFields        []string       `json:"upperFields"`
	CountryAreaType    *string        `json:"countryAreaType"`
	CountryAreaChoices []*ChoiceValue `json:"countryAreaChoices"`
	CityType           *string        `json:"cityType"`
	CityChoices        []*ChoiceValue `json:"cityChoices"`
	CityAreaType       *string        `json:"cityAreaType"`
	CityAreaChoices    []*ChoiceValue `json:"cityAreaChoices"`
	PostalCodeType     *string        `json:"postalCodeType"`
	PostalCodeMatchers []string       `json:"postalCodeMatchers"`
	PostalCodeExamples []string       `json:"postalCodeExamples"`
	PostalCodePrefix   *string        `json:"postalCodePrefix"`
}

type Allocation struct {
	ID        string     `json:"id"`
	Quantity  int32      `json:"quantity"`
	Warehouse *Warehouse `json:"warehouse"`
}

type App struct {
	ID               string          `json:"id"`
	Name             *string         `json:"name"`
	Created          *DateTime       `json:"created"`
	IsActive         *bool           `json:"isActive"`
	Permissions      []*Permission   `json:"permissions"`
	Tokens           []*AppToken     `json:"tokens"`
	PrivateMetadata  []*MetadataItem `json:"privateMetadata"`
	Metadata         []*MetadataItem `json:"metadata"`
	Type             *AppTypeEnum    `json:"type"`
	Webhooks         []*Webhook      `json:"webhooks"`
	AboutApp         *string         `json:"aboutApp"`
	DataPrivacy      *string         `json:"dataPrivacy"`
	DataPrivacyURL   *string         `json:"dataPrivacyUrl"`
	HomepageURL      *string         `json:"homepageUrl"`
	SupportURL       *string         `json:"supportUrl"`
	ConfigurationURL *string         `json:"configurationUrl"`
	AppURL           *string         `json:"appUrl"`
	Version          *string         `json:"version"`
	AccessToken      *string         `json:"accessToken"`
	Extensions       []*AppExtension `json:"extensions"`
}

type AppActivate struct {
	Errors []*AppError `json:"errors"`
	App    *App        `json:"app"`
}

type AppCountableConnection struct {
	PageInfo   *PageInfo           `json:"pageInfo"`
	Edges      []*AppCountableEdge `json:"edges"`
	TotalCount *int32              `json:"totalCount"`
}

type AppCountableEdge struct {
	Node   *App   `json:"node"`
	Cursor string `json:"cursor"`
}

type AppCreate struct {
	AuthToken *string     `json:"authToken"`
	Errors    []*AppError `json:"errors"`
	App       *App        `json:"app"`
}

type AppDeactivate struct {
	Errors []*AppError `json:"errors"`
	App    *App        `json:"app"`
}

type AppDelete struct {
	Errors []*AppError `json:"errors"`
	App    *App        `json:"app"`
}

type AppDeleteFailedInstallation struct {
	Errors          []*AppError      `json:"errors"`
	AppInstallation *AppInstallation `json:"appInstallation"`
}

type AppError struct {
	Field       *string          `json:"field"`
	Message     *string          `json:"message"`
	Code        AppErrorCode     `json:"code"`
	Permissions []PermissionEnum `json:"permissions"`
}

type AppExtension struct {
	ID          string                 `json:"id"`
	App         *App                   `json:"app"`
	Label       string                 `json:"label"`
	URL         string                 `json:"url"`
	View        AppExtensionViewEnum   `json:"view"`
	Type        AppExtensionTypeEnum   `json:"type"`
	Target      AppExtensionTargetEnum `json:"target"`
	Permissions []*Permission          `json:"permissions"`
	AccessToken *string                `json:"accessToken"`
}

type AppExtensionCountableConnection struct {
	PageInfo   *PageInfo                    `json:"pageInfo"`
	Edges      []*AppExtensionCountableEdge `json:"edges"`
	TotalCount *int32                       `json:"totalCount"`
}

type AppExtensionCountableEdge struct {
	Node   *AppExtension `json:"node"`
	Cursor string        `json:"cursor"`
}

type AppExtensionFilterInput struct {
	View   *AppExtensionViewEnum   `json:"view"`
	Type   *AppExtensionTypeEnum   `json:"type"`
	Target *AppExtensionTargetEnum `json:"target"`
}

type AppFetchManifest struct {
	Manifest *Manifest   `json:"manifest"`
	Errors   []*AppError `json:"errors"`
}

type AppFilterInput struct {
	Search   *string      `json:"search"`
	IsActive *bool        `json:"isActive"`
	Type     *AppTypeEnum `json:"type"`
}

type AppInput struct {
	Name        *string           `json:"name"`
	Permissions []*PermissionEnum `json:"permissions"`
}

type AppInstall struct {
	Errors          []*AppError      `json:"errors"`
	AppInstallation *AppInstallation `json:"appInstallation"`
}

type AppInstallInput struct {
	AppName                   *string           `json:"appName"`
	ManifestURL               *string           `json:"manifestUrl"`
	ActivateAfterInstallation *bool             `json:"activateAfterInstallation"`
	Permissions               []*PermissionEnum `json:"permissions"`
}

type AppInstallation struct {
	AppName     string        `json:"appName"`
	ManifestURL string        `json:"manifestUrl"`
	ID          string        `json:"id"`
	Status      JobStatusEnum `json:"status"`
	CreatedAt   DateTime      `json:"createdAt"`
	UpdatedAt   DateTime      `json:"updatedAt"`
	Message     *string       `json:"message"`
}

type AppManifestExtension struct {
	Permissions []*Permission          `json:"permissions"`
	Label       string                 `json:"label"`
	URL         string                 `json:"url"`
	View        AppExtensionViewEnum   `json:"view"`
	Type        AppExtensionTypeEnum   `json:"type"`
	Target      AppExtensionTargetEnum `json:"target"`
}

type AppRetryInstall struct {
	Errors          []*AppError      `json:"errors"`
	AppInstallation *AppInstallation `json:"appInstallation"`
}

type AppSortingInput struct {
	Direction OrderDirection `json:"direction"`
	Field     AppSortField   `json:"field"`
}

type AppToken struct {
	Name      *string `json:"name"`
	AuthToken *string `json:"authToken"`
	ID        string  `json:"id"`
}

type AppTokenCreate struct {
	AuthToken *string     `json:"authToken"`
	Errors    []*AppError `json:"errors"`
	AppToken  *AppToken   `json:"appToken"`
}

type AppTokenDelete struct {
	Errors   []*AppError `json:"errors"`
	AppToken *AppToken   `json:"appToken"`
}

type AppTokenInput struct {
	Name *string `json:"name"`
	App  string  `json:"app"`
}

type AppTokenVerify struct {
	Valid  bool        `json:"valid"`
	Errors []*AppError `json:"errors"`
}

type AppUpdate struct {
	Errors []*AppError `json:"errors"`
	App    *App        `json:"app"`
}

type AssignNavigation struct {
	Menu   *Menu        `json:"menu"`
	Errors []*MenuError `json:"errors"`
}

type AttributeBulkDelete struct {
	Count  int32             `json:"count"`
	Errors []*AttributeError `json:"errors"`
}

type AttributeChoicesSortingInput struct {
	Direction OrderDirection            `json:"direction"`
	Field     AttributeChoicesSortField `json:"field"`
}

type AttributeCountableConnection struct {
	PageInfo   *PageInfo                 `json:"pageInfo"`
	Edges      []*AttributeCountableEdge `json:"edges"`
	TotalCount *int32                    `json:"totalCount"`
}

type AttributeCountableEdge struct {
	Node   *Attribute `json:"node"`
	Cursor string     `json:"cursor"`
}

type AttributeCreate struct {
	Attribute *Attribute        `json:"attribute"`
	Errors    []*AttributeError `json:"errors"`
}

type AttributeCreateInput struct {
	InputType                *AttributeInputTypeEnum      `json:"inputType"`
	EntityType               *AttributeEntityTypeEnum     `json:"entityType"`
	Name                     string                       `json:"name"`
	Slug                     *string                      `json:"slug"`
	Type                     AttributeTypeEnum            `json:"type"`
	Unit                     *MeasurementUnitsEnum        `json:"unit"`
	Values                   []*AttributeValueCreateInput `json:"values"`
	ValueRequired            *bool                        `json:"valueRequired"`
	IsVariantOnly            *bool                        `json:"isVariantOnly"`
	VisibleInStorefront      *bool                        `json:"visibleInStorefront"`
	FilterableInStorefront   *bool                        `json:"filterableInStorefront"`
	FilterableInDashboard    *bool                        `json:"filterableInDashboard"`
	StorefrontSearchPosition *int32                       `json:"storefrontSearchPosition"`
	AvailableInGrid          *bool                        `json:"availableInGrid"`
}

type AttributeDelete struct {
	Errors    []*AttributeError `json:"errors"`
	Attribute *Attribute        `json:"attribute"`
}

type AttributeError struct {
	Field   *string            `json:"field"`
	Message *string            `json:"message"`
	Code    AttributeErrorCode `json:"code"`
}

type AttributeFilterInput struct {
	ValueRequired          *bool              `json:"valueRequired"`
	IsVariantOnly          *bool              `json:"isVariantOnly"`
	VisibleInStorefront    *bool              `json:"visibleInStorefront"`
	FilterableInStorefront *bool              `json:"filterableInStorefront"`
	FilterableInDashboard  *bool              `json:"filterableInDashboard"`
	AvailableInGrid        *bool              `json:"availableInGrid"`
	Metadata               []*MetadataInput   `json:"metadata"`
	Search                 *string            `json:"search"`
	Ids                    []string           `json:"ids"`
	Type                   *AttributeTypeEnum `json:"type"`
	InCollection           *string            `json:"inCollection"`
	InCategory             *string            `json:"inCategory"`
	Channel                *string            `json:"channel"`
}

type AttributeInput struct {
	Slug        string              `json:"slug"`
	Values      []string            `json:"values"`
	ValuesRange *IntRangeInput      `json:"valuesRange"`
	DateTime    *DateTimeRangeInput `json:"dateTime"`
	Date        *DateRangeInput     `json:"date"`
	Boolean     *bool               `json:"boolean"`
}

type AttributeReorderValues struct {
	Attribute *Attribute        `json:"attribute"`
	Errors    []*AttributeError `json:"errors"`
}

type AttributeSortingInput struct {
	Direction OrderDirection     `json:"direction"`
	Field     AttributeSortField `json:"field"`
}

type AttributeTranslatableContent struct {
	ID          string                `json:"id"`
	Name        string                `json:"name"`
	Translation *AttributeTranslation `json:"translation"`
}

type AttributeTranslate struct {
	Errors    []*TranslationError `json:"errors"`
	Attribute *Attribute          `json:"attribute"`
}

type AttributeTranslation struct {
	ID       string           `json:"id"`
	Name     string           `json:"name"`
	Language *LanguageDisplay `json:"language"`
}

type AttributeUpdate struct {
	Attribute *Attribute        `json:"attribute"`
	Errors    []*AttributeError `json:"errors"`
}

type AttributeUpdateInput struct {
	Name                     *string                      `json:"name"`
	Slug                     *string                      `json:"slug"`
	Unit                     *MeasurementUnitsEnum        `json:"unit"`
	RemoveValues             []string                     `json:"removeValues"`
	AddValues                []*AttributeValueUpdateInput `json:"addValues"`
	ValueRequired            *bool                        `json:"valueRequired"`
	IsVariantOnly            *bool                        `json:"isVariantOnly"`
	VisibleInStorefront      *bool                        `json:"visibleInStorefront"`
	FilterableInStorefront   *bool                        `json:"filterableInStorefront"`
	FilterableInDashboard    *bool                        `json:"filterableInDashboard"`
	StorefrontSearchPosition *int32                       `json:"storefrontSearchPosition"`
	AvailableInGrid          *bool                        `json:"availableInGrid"`
}

type AttributeValueBulkDelete struct {
	Count  int32             `json:"count"`
	Errors []*AttributeError `json:"errors"`
}

type AttributeValueCountableConnection struct {
	PageInfo   *PageInfo                      `json:"pageInfo"`
	Edges      []*AttributeValueCountableEdge `json:"edges"`
	TotalCount *int32                         `json:"totalCount"`
}

type AttributeValueCountableEdge struct {
	Node   *AttributeValue `json:"node"`
	Cursor string          `json:"cursor"`
}

type AttributeValueCreate struct {
	Attribute      *Attribute        `json:"attribute"`
	Errors         []*AttributeError `json:"errors"`
	AttributeValue *AttributeValue   `json:"attributeValue"`
}

type AttributeValueCreateInput struct {
	Name        string     `json:"name"`
	Value       *string    `json:"value"`
	RichText    JSONString `json:"richText"`
	FileURL     *string    `json:"fileUrl"`
	ContentType *string    `json:"contentType"`
}

type AttributeValueDelete struct {
	Attribute      *Attribute        `json:"attribute"`
	Errors         []*AttributeError `json:"errors"`
	AttributeValue *AttributeValue   `json:"attributeValue"`
}

type AttributeValueFilterInput struct {
	Search *string `json:"search"`
}

type AttributeValueInput struct {
	ID          *string    `json:"id"`
	Values      []string   `json:"values"`
	File        *string    `json:"file"`
	ContentType *string    `json:"contentType"`
	References  []string   `json:"references"`
	RichText    JSONString `json:"richText"`
	Boolean     *bool      `json:"boolean"`
	Date        *Date      `json:"date"`
	DateTime    *DateTime  `json:"dateTime"`
}

type AttributeValueTranslatableContent struct {
	ID          string                     `json:"id"`
	Name        string                     `json:"name"`
	RichText    JSONString                 `json:"richText"`
	Translation *AttributeValueTranslation `json:"translation"`
}

type AttributeValueTranslate struct {
	Errors         []*TranslationError `json:"errors"`
	AttributeValue *AttributeValue     `json:"attributeValue"`
}

type AttributeValueTranslation struct {
	ID       string           `json:"id"`
	Name     string           `json:"name"`
	RichText JSONString       `json:"richText"`
	Language *LanguageDisplay `json:"language"`
}

type AttributeValueTranslationInput struct {
	Name     *string    `json:"name"`
	RichText JSONString `json:"richText"`
}

type AttributeValueUpdate struct {
	Attribute      *Attribute        `json:"attribute"`
	Errors         []*AttributeError `json:"errors"`
	AttributeValue *AttributeValue   `json:"attributeValue"`
}

type AttributeValueUpdateInput struct {
	Value       *string    `json:"value"`
	RichText    JSONString `json:"richText"`
	FileURL     *string    `json:"fileUrl"`
	ContentType *string    `json:"contentType"`
	Name        *string    `json:"name"`
}

type BulkAttributeValueInput struct {
	ID      *string  `json:"id"`
	Values  []string `json:"values"`
	Boolean *bool    `json:"boolean"`
}

type BulkProductError struct {
	Field      *string          `json:"field"`
	Message    *string          `json:"message"`
	Code       ProductErrorCode `json:"code"`
	Attributes []string         `json:"attributes"`
	Values     []string         `json:"values"`
	Index      *int32           `json:"index"`
	Warehouses []string         `json:"warehouses"`
	Channels   []string         `json:"channels"`
}

type BulkStockError struct {
	Field      *string          `json:"field"`
	Message    *string          `json:"message"`
	Code       ProductErrorCode `json:"code"`
	Attributes []string         `json:"attributes"`
	Values     []string         `json:"values"`
	Index      *int32           `json:"index"`
}

type CatalogueInput struct {
	Products    []string `json:"products"`
	Categories  []string `json:"categories"`
	Collections []string `json:"collections"`
}

type CategoryBulkDelete struct {
	Count  int32           `json:"count"`
	Errors []*ProductError `json:"errors"`
}

type CategoryCountableConnection struct {
	PageInfo   *PageInfo                `json:"pageInfo"`
	Edges      []*CategoryCountableEdge `json:"edges"`
	TotalCount *int32                   `json:"totalCount"`
}

type CategoryCountableEdge struct {
	Node   *Category `json:"node"`
	Cursor string    `json:"cursor"`
}

type CategoryCreate struct {
	Errors   []*ProductError `json:"errors"`
	Category *Category       `json:"category"`
}

type CategoryDelete struct {
	Errors   []*ProductError `json:"errors"`
	Category *Category       `json:"category"`
}

type CategoryFilterInput struct {
	Search   *string          `json:"search"`
	Metadata []*MetadataInput `json:"metadata"`
	Ids      []string         `json:"ids"`
}

type CategoryInput struct {
	Description        JSONString      `json:"description"`
	Name               *string         `json:"name"`
	Slug               *string         `json:"slug"`
	Seo                *SeoInput       `json:"seo"`
	BackgroundImage    *graphql.Upload `json:"backgroundImage"`
	BackgroundImageAlt *string         `json:"backgroundImageAlt"`
}

type CategorySortingInput struct {
	Direction OrderDirection    `json:"direction"`
	Channel   *string           `json:"channel"`
	Field     CategorySortField `json:"field"`
}

type CategoryTranslatableContent struct {
	ID             string               `json:"id"`
	SeoTitle       *string              `json:"seoTitle"`
	SeoDescription *string              `json:"seoDescription"`
	Name           string               `json:"name"`
	Description    JSONString           `json:"description"`
	Translation    *CategoryTranslation `json:"translation"`
}

type CategoryTranslate struct {
	Errors   []*TranslationError `json:"errors"`
	Category *Category           `json:"category"`
}

type CategoryTranslation struct {
	ID             string           `json:"id"`
	SeoTitle       *string          `json:"seoTitle"`
	SeoDescription *string          `json:"seoDescription"`
	Name           *string          `json:"name"`
	Description    JSONString       `json:"description"`
	Language       *LanguageDisplay `json:"language"`
}

type CategoryUpdate struct {
	Errors   []*ProductError `json:"errors"`
	Category *Category       `json:"category"`
}

type ChannelActivate struct {
	Channel *Channel        `json:"channel"`
	Errors  []*ChannelError `json:"errors"`
}

type ChannelCreate struct {
	Errors  []*ChannelError `json:"errors"`
	Channel *Channel        `json:"channel"`
}

type ChannelCreateInput struct {
	IsActive         *bool       `json:"isActive"`
	Name             string      `json:"name"`
	Slug             string      `json:"slug"`
	CurrencyCode     string      `json:"currencyCode"`
	DefaultCountry   CountryCode `json:"defaultCountry"`
	AddShippingZones []string    `json:"addShippingZones"`
}

type ChannelDeactivate struct {
	Channel *Channel        `json:"channel"`
	Errors  []*ChannelError `json:"errors"`
}

type ChannelDelete struct {
	Errors  []*ChannelError `json:"errors"`
	Channel *Channel        `json:"channel"`
}

type ChannelDeleteInput struct {
	ChannelID string `json:"channelId"`
}

type ChannelError struct {
	Field         *string          `json:"field"`
	Message       *string          `json:"message"`
	Code          ChannelErrorCode `json:"code"`
	ShippingZones []string         `json:"shippingZones"`
}

type ChannelUpdate struct {
	Errors  []*ChannelError `json:"errors"`
	Channel *Channel        `json:"channel"`
}

type ChannelUpdateInput struct {
	IsActive            *bool        `json:"isActive"`
	Name                *string      `json:"name"`
	Slug                *string      `json:"slug"`
	DefaultCountry      *CountryCode `json:"defaultCountry"`
	AddShippingZones    []string     `json:"addShippingZones"`
	RemoveShippingZones []string     `json:"removeShippingZones"`
}

type CheckoutAddPromoCode struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutBillingAddressUpdate struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutComplete struct {
	Order              *Order           `json:"order"`
	ConfirmationNeeded bool             `json:"confirmationNeeded"`
	ConfirmationData   JSONString       `json:"confirmationData"`
	Errors             []*CheckoutError `json:"errors"`
}

type CheckoutCountableConnection struct {
	PageInfo   *PageInfo                `json:"pageInfo"`
	Edges      []*CheckoutCountableEdge `json:"edges"`
	TotalCount *int32                   `json:"totalCount"`
}

type CheckoutCountableEdge struct {
	Node   *Checkout `json:"node"`
	Cursor string    `json:"cursor"`
}

type CheckoutCreate struct {
	Errors   []*CheckoutError `json:"errors"`
	Checkout *Checkout        `json:"checkout"`
}

type CheckoutCreateInput struct {
	Channel         *string              `json:"channel"`
	Lines           []*CheckoutLineInput `json:"lines"`
	Email           *string              `json:"email"`
	ShippingAddress *AddressInput        `json:"shippingAddress"`
	BillingAddress  *AddressInput        `json:"billingAddress"`
	LanguageCode    *LanguageCodeEnum    `json:"languageCode"`
}

type CheckoutCustomerAttach struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutCustomerDetach struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutDeliveryMethodUpdate struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutEmailUpdate struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutError struct {
	Field       *string           `json:"field"`
	Message     *string           `json:"message"`
	Code        CheckoutErrorCode `json:"code"`
	Variants    []string          `json:"variants"`
	AddressType *AddressTypeEnum  `json:"addressType"`
}

type CheckoutLanguageCodeUpdate struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutLineCountableConnection struct {
	PageInfo   *PageInfo                    `json:"pageInfo"`
	Edges      []*CheckoutLineCountableEdge `json:"edges"`
	TotalCount *int32                       `json:"totalCount"`
}

type CheckoutLineCountableEdge struct {
	Node   *CheckoutLine `json:"node"`
	Cursor string        `json:"cursor"`
}

type CheckoutLineDelete struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutLineInput struct {
	Quantity  int32  `json:"quantity"`
	VariantID string `json:"variantId"`
}

type CheckoutLinesAdd struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutLinesUpdate struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutPaymentCreate struct {
	Checkout *Checkout       `json:"checkout"`
	Payment  *Payment        `json:"payment"`
	Errors   []*PaymentError `json:"errors"`
}

type CheckoutRemovePromoCode struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutShippingAddressUpdate struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type CheckoutShippingMethodUpdate struct {
	Checkout *Checkout        `json:"checkout"`
	Errors   []*CheckoutError `json:"errors"`
}

type ChoiceValue struct {
	Raw     *string `json:"raw"`
	Verbose *string `json:"verbose"`
}

type Collection struct {
	ID              string                      `json:"id"`
	SeoTitle        *string                     `json:"seoTitle"`
	SeoDescription  *string                     `json:"seoDescription"`
	Name            string                      `json:"name"`
	Description     JSONString                  `json:"description"`
	Slug            string                      `json:"slug"`
	PrivateMetadata []*MetadataItem             `json:"privateMetadata"`
	Metadata        []*MetadataItem             `json:"metadata"`
	Channel         *string                     `json:"channel"`
	Products        *ProductCountableConnection `json:"products"`
	BackgroundImage *Image                      `json:"backgroundImage"`
	Translation     *CollectionTranslation      `json:"translation"`
	ChannelListings []*CollectionChannelListing `json:"channelListings"`
}

type CollectionAddProducts struct {
	Collection *Collection        `json:"collection"`
	Errors     []*CollectionError `json:"errors"`
}

type CollectionBulkDelete struct {
	Count  int32              `json:"count"`
	Errors []*CollectionError `json:"errors"`
}

type CollectionChannelListing struct {
	ID              string   `json:"id"`
	PublicationDate *Date    `json:"publicationDate"`
	IsPublished     bool     `json:"isPublished"`
	Channel         *Channel `json:"channel"`
}

type CollectionChannelListingError struct {
	Field      *string          `json:"field"`
	Message    *string          `json:"message"`
	Code       ProductErrorCode `json:"code"`
	Attributes []string         `json:"attributes"`
	Values     []string         `json:"values"`
	Channels   []string         `json:"channels"`
}

type CollectionChannelListingUpdate struct {
	Collection *Collection                      `json:"collection"`
	Errors     []*CollectionChannelListingError `json:"errors"`
}

type CollectionChannelListingUpdateInput struct {
	AddChannels    []*PublishableChannelListingInput `json:"addChannels"`
	RemoveChannels []string                          `json:"removeChannels"`
}

type CollectionCountableConnection struct {
	PageInfo   *PageInfo                  `json:"pageInfo"`
	Edges      []*CollectionCountableEdge `json:"edges"`
	TotalCount *int32                     `json:"totalCount"`
}

type CollectionCountableEdge struct {
	Node   *Collection `json:"node"`
	Cursor string      `json:"cursor"`
}

type CollectionCreate struct {
	Errors     []*CollectionError `json:"errors"`
	Collection *Collection        `json:"collection"`
}

type CollectionCreateInput struct {
	IsPublished        *bool           `json:"isPublished"`
	Name               *string         `json:"name"`
	Slug               *string         `json:"slug"`
	Description        JSONString      `json:"description"`
	BackgroundImage    *graphql.Upload `json:"backgroundImage"`
	BackgroundImageAlt *string         `json:"backgroundImageAlt"`
	Seo                *SeoInput       `json:"seo"`
	PublicationDate    *Date           `json:"publicationDate"`
	Products           []string        `json:"products"`
}

type CollectionDelete struct {
	Errors     []*CollectionError `json:"errors"`
	Collection *Collection        `json:"collection"`
}

type CollectionError struct {
	Field    *string             `json:"field"`
	Message  *string             `json:"message"`
	Products []string            `json:"products"`
	Code     CollectionErrorCode `json:"code"`
}

type CollectionFilterInput struct {
	Published *CollectionPublished `json:"published"`
	Search    *string              `json:"search"`
	Metadata  []*MetadataInput     `json:"metadata"`
	Ids       []string             `json:"ids"`
	Channel   *string              `json:"channel"`
}

type CollectionInput struct {
	IsPublished        *bool           `json:"isPublished"`
	Name               *string         `json:"name"`
	Slug               *string         `json:"slug"`
	Description        JSONString      `json:"description"`
	BackgroundImage    *graphql.Upload `json:"backgroundImage"`
	BackgroundImageAlt *string         `json:"backgroundImageAlt"`
	Seo                *SeoInput       `json:"seo"`
	PublicationDate    *Date           `json:"publicationDate"`
}

type CollectionRemoveProducts struct {
	Collection *Collection        `json:"collection"`
	Errors     []*CollectionError `json:"errors"`
}

type CollectionReorderProducts struct {
	Collection *Collection        `json:"collection"`
	Errors     []*CollectionError `json:"errors"`
}

type CollectionSortingInput struct {
	Direction OrderDirection      `json:"direction"`
	Channel   *string             `json:"channel"`
	Field     CollectionSortField `json:"field"`
}

type CollectionTranslatableContent struct {
	ID             string                 `json:"id"`
	SeoTitle       *string                `json:"seoTitle"`
	SeoDescription *string                `json:"seoDescription"`
	Name           string                 `json:"name"`
	Description    JSONString             `json:"description"`
	Translation    *CollectionTranslation `json:"translation"`
}

type CollectionTranslate struct {
	Errors     []*TranslationError `json:"errors"`
	Collection *Collection         `json:"collection"`
}

type CollectionTranslation struct {
	ID             string           `json:"id"`
	SeoTitle       *string          `json:"seoTitle"`
	SeoDescription *string          `json:"seoDescription"`
	Name           *string          `json:"name"`
	Description    JSONString       `json:"description"`
	Language       *LanguageDisplay `json:"language"`
}

type CollectionUpdate struct {
	Errors     []*CollectionError `json:"errors"`
	Collection *Collection        `json:"collection"`
}

type ConfigurationItem struct {
	Name     string                      `json:"name"`
	Value    *string                     `json:"value"`
	Type     *ConfigurationTypeFieldEnum `json:"type"`
	HelpText *string                     `json:"helpText"`
	Label    *string                     `json:"label"`
}

type ConfigurationItemInput struct {
	Name  string  `json:"name"`
	Value *string `json:"value"`
}

type ConfirmAccount struct {
	User *User `json:"user"`
}

type ConfirmEmailChange struct {
	User *User `json:"user"`
}

type CountryDisplay struct {
	Code    string `json:"code"`
	Country string `json:"country"`
	Vat     *Vat   `json:"vat"`
}

type CreateToken struct {
	Token        *string `json:"token"`
	RefreshToken *string `json:"refreshToken"`
	CsrfToken    *string `json:"csrfToken"`
	User         *User   `json:"user"`
}

type CreditCard struct {
	Brand       string  `json:"brand"`
	FirstDigits *string `json:"firstDigits"`
	LastDigits  string  `json:"lastDigits"`
	ExpMonth    *int32  `json:"expMonth"`
	ExpYear     *int32  `json:"expYear"`
}

type CustomerBulkDelete struct {
	Count  int32           `json:"count"`
	Errors []*AccountError `json:"errors"`
}

type CustomerCreate struct {
	Errors []*AccountError `json:"errors"`
	User   *User           `json:"user"`
}

type CustomerDelete struct {
	Errors []*AccountError `json:"errors"`
	User   *User           `json:"user"`
}

type CustomerEvent struct {
	ID      string              `json:"id"`
	Date    *DateTime           `json:"date"`
	Type    *CustomerEventsEnum `json:"type"`
	Message *string             `json:"message"`
	Count   *int32              `json:"count"`

	userID      *string
	orderID     *string
	orderLineID *string
	// User      *User               `json:"user"`
	// App       *App                `json:"app"`
	// Order     *Order              `json:"order"`
	// OrderLine *OrderLine          `json:"orderLine"`
}

type CustomerFilterInput struct {
	DateJoined     *DateRangeInput  `json:"dateJoined"`
	NumberOfOrders *IntRangeInput   `json:"numberOfOrders"`
	PlacedOrders   *DateRangeInput  `json:"placedOrders"`
	Search         *string          `json:"search"`
	Metadata       []*MetadataInput `json:"metadata"`
}

type CustomerInput struct {
	DefaultBillingAddress  *AddressInput     `json:"defaultBillingAddress"`
	DefaultShippingAddress *AddressInput     `json:"defaultShippingAddress"`
	FirstName              *string           `json:"firstName"`
	LastName               *string           `json:"lastName"`
	Email                  *string           `json:"email"`
	IsActive               *bool             `json:"isActive"`
	Note                   *string           `json:"note"`
	LanguageCode           *LanguageCodeEnum `json:"languageCode"`
}

type CustomerUpdate struct {
	Errors []*AccountError `json:"errors"`
	User   *User           `json:"user"`
}

type DateRangeInput struct {
	Gte *Date `json:"gte"`
	Lte *Date `json:"lte"`
}

type DateTimeRangeInput struct {
	Gte *DateTime `json:"gte"`
	Lte *DateTime `json:"lte"`
}

type DeactivateAllUserTokens struct {
	Ok bool `json:"ok"`
}

type ObjectWithMetadata struct {
	PrivateMetadata []*MetadataItem
	Metadata        []*MetadataItem
}

type DeleteMetadata struct {
	Errors []*MetadataError   `json:"errors"`
	Item   ObjectWithMetadata `json:"item"`
}

type DeletePrivateMetadata struct {
	Errors []*MetadataError   `json:"errors"`
	Item   ObjectWithMetadata `json:"item"`
}

type DigitalContent struct {
	UseDefaultSettings   bool                 `json:"useDefaultSettings"`
	AutomaticFulfillment bool                 `json:"automaticFulfillment"`
	ContentFile          string               `json:"contentFile"`
	MaxDownloads         *int32               `json:"maxDownloads"`
	URLValidDays         *int32               `json:"urlValidDays"`
	Urls                 []*DigitalContentURL `json:"urls"`
	ID                   string               `json:"id"`
	PrivateMetadata      []*MetadataItem      `json:"privateMetadata"`
	Metadata             []*MetadataItem      `json:"metadata"`
	ProductVariant       *ProductVariant      `json:"productVariant"`
}

type DigitalContentCountableConnection struct {
	PageInfo   *PageInfo                      `json:"pageInfo"`
	Edges      []*DigitalContentCountableEdge `json:"edges"`
	TotalCount *int32                         `json:"totalCount"`
}

type DigitalContentCountableEdge struct {
	Node   *DigitalContent `json:"node"`
	Cursor string          `json:"cursor"`
}

type DigitalContentCreate struct {
	Variant *ProductVariant `json:"variant"`
	Content *DigitalContent `json:"content"`
	Errors  []*ProductError `json:"errors"`
}

type DigitalContentDelete struct {
	Variant *ProductVariant `json:"variant"`
	Errors  []*ProductError `json:"errors"`
}

type DigitalContentInput struct {
	UseDefaultSettings   bool   `json:"useDefaultSettings"`
	MaxDownloads         *int32 `json:"maxDownloads"`
	URLValidDays         *int32 `json:"urlValidDays"`
	AutomaticFulfillment *bool  `json:"automaticFulfillment"`
}

type DigitalContentUpdate struct {
	Variant *ProductVariant `json:"variant"`
	Content *DigitalContent `json:"content"`
	Errors  []*ProductError `json:"errors"`
}

type DigitalContentUploadInput struct {
	UseDefaultSettings   bool           `json:"useDefaultSettings"`
	MaxDownloads         *int32         `json:"maxDownloads"`
	URLValidDays         *int32         `json:"urlValidDays"`
	AutomaticFulfillment *bool          `json:"automaticFulfillment"`
	ContentFile          graphql.Upload `json:"contentFile"`
}

type DigitalContentURL struct {
	Content     *DigitalContent `json:"content"`
	Created     DateTime        `json:"created"`
	DownloadNum int32           `json:"downloadNum"`
	ID          string          `json:"id"`
	URL         *string         `json:"url"`
	Token       string          `json:"token"`
}

type DigitalContentURLCreate struct {
	Errors            []*ProductError    `json:"errors"`
	DigitalContentURL *DigitalContentURL `json:"digitalContentUrl"`
}

type DigitalContentURLCreateInput struct {
	Content string `json:"content"`
}

type DiscountError struct {
	Field    *string           `json:"field"`
	Message  *string           `json:"message"`
	Products []string          `json:"products"`
	Code     DiscountErrorCode `json:"code"`
	Channels []string          `json:"channels"`
}

type Domain struct {
	Host       string `json:"host"`
	SslEnabled bool   `json:"sslEnabled"`
	URL        string `json:"url"`
}

type DraftOrderBulkDelete struct {
	Count  int32         `json:"count"`
	Errors []*OrderError `json:"errors"`
}

type DraftOrderComplete struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type DraftOrderCreate struct {
	Errors []*OrderError `json:"errors"`
	Order  *Order        `json:"order"`
}

type DraftOrderCreateInput struct {
	BillingAddress  *AddressInput           `json:"billingAddress"`
	User            *string                 `json:"user"`
	UserEmail       *string                 `json:"userEmail"`
	Discount        *PositiveDecimal        `json:"discount"`
	ShippingAddress *AddressInput           `json:"shippingAddress"`
	ShippingMethod  *string                 `json:"shippingMethod"`
	Voucher         *string                 `json:"voucher"`
	CustomerNote    *string                 `json:"customerNote"`
	ChannelID       *string                 `json:"channelId"`
	RedirectURL     *string                 `json:"redirectUrl"`
	Lines           []*OrderLineCreateInput `json:"lines"`
}

type DraftOrderDelete struct {
	Errors []*OrderError `json:"errors"`
	Order  *Order        `json:"order"`
}

type DraftOrderInput struct {
	BillingAddress  *AddressInput    `json:"billingAddress"`
	User            *string          `json:"user"`
	UserEmail       *string          `json:"userEmail"`
	Discount        *PositiveDecimal `json:"discount"`
	ShippingAddress *AddressInput    `json:"shippingAddress"`
	ShippingMethod  *string          `json:"shippingMethod"`
	Voucher         *string          `json:"voucher"`
	CustomerNote    *string          `json:"customerNote"`
	ChannelID       *string          `json:"channelId"`
	RedirectURL     *string          `json:"redirectUrl"`
}

type DraftOrderLinesBulkDelete struct {
	Count  int32         `json:"count"`
	Errors []*OrderError `json:"errors"`
}

type DraftOrderUpdate struct {
	Errors []*OrderError `json:"errors"`
	Order  *Order        `json:"order"`
}

type ExportEvent struct {
	ID      string           `json:"id"`
	Date    DateTime         `json:"date"`
	Type    ExportEventsEnum `json:"type"`
	User    *User            `json:"user"`
	Message string           `json:"message"`
}

type ExportFile struct {
	ID        string         `json:"id"`
	User      *User          `json:"user"`
	Status    JobStatusEnum  `json:"status"`
	CreatedAt DateTime       `json:"createdAt"`
	UpdatedAt DateTime       `json:"updatedAt"`
	Message   *string        `json:"message"`
	URL       *string        `json:"url"`
	Events    []*ExportEvent `json:"events"`
}

type ExportFileCountableConnection struct {
	PageInfo   *PageInfo                  `json:"pageInfo"`
	Edges      []*ExportFileCountableEdge `json:"edges"`
	TotalCount *int32                     `json:"totalCount"`
}

type ExportFileCountableEdge struct {
	Node   *ExportFile `json:"node"`
	Cursor string      `json:"cursor"`
}

type ExportFileFilterInput struct {
	CreatedAt *DateTimeRangeInput `json:"createdAt"`
	UpdatedAt *DateTimeRangeInput `json:"updatedAt"`
	Status    *JobStatusEnum      `json:"status"`
	User      *string             `json:"user"`
}

type ExportFileSortingInput struct {
	Direction OrderDirection      `json:"direction"`
	Field     ExportFileSortField `json:"field"`
}

type ExportInfoInput struct {
	Attributes []string           `json:"attributes"`
	Warehouses []string           `json:"warehouses"`
	Channels   []string           `json:"channels"`
	Fields     []ProductFieldEnum `json:"fields"`
}

type ExportProducts struct {
	ExportFile *ExportFile `json:"exportFile"`
}

type ExportProductsInput struct {
	Scope      ExportScope         `json:"scope"`
	Filter     *ProductFilterInput `json:"filter"`
	Ids        []string            `json:"ids"`
	ExportInfo *ExportInfoInput    `json:"exportInfo"`
	FileType   FileTypesEnum       `json:"fileType"`
}

type ExternalAuthentication struct {
	ID   string  `json:"id"`
	Name *string `json:"name"`
}

type ExternalAuthenticationURL struct {
	AuthenticationData JSONString `json:"authenticationData"`
}

type ExternalLogout struct {
	LogoutData JSONString `json:"logoutData"`
}

type ExternalNotificationError struct {
	Field   *string                        `json:"field"`
	Message *string                        `json:"message"`
	Code    ExternalNotificationErrorCodes `json:"code"`
}

type ExternalNotificationTrigger struct {
	Errors []*ExternalNotificationError `json:"errors"`
}

type ExternalNotificationTriggerInput struct {
	Ids               []string   `json:"ids"`
	ExtraPayload      JSONString `json:"extraPayload"`
	ExternalEventType string     `json:"externalEventType"`
}

type ExternalObtainAccessTokens struct {
	Token        *string `json:"token"`
	RefreshToken *string `json:"refreshToken"`
	CsrfToken    *string `json:"csrfToken"`
	User         *User   `json:"user"`
}

type ExternalRefresh struct {
	Token        *string `json:"token"`
	RefreshToken *string `json:"refreshToken"`
	CsrfToken    *string `json:"csrfToken"`
	User         *User   `json:"user"`
}

type ExternalVerify struct {
	User       *User      `json:"user"`
	IsValid    bool       `json:"isValid"`
	VerifyData JSONString `json:"verifyData"`
}

type File struct {
	URL         string  `json:"url"`
	ContentType *string `json:"contentType"`
}

type FileUpload struct {
	UploadedFile *File          `json:"uploadedFile"`
	Errors       []*UploadError `json:"errors"`
}

type FulfillmentApprove struct {
	Fulfillment *Fulfillment  `json:"fulfillment"`
	Order       *Order        `json:"order"`
	Errors      []*OrderError `json:"errors"`
}

type FulfillmentCancel struct {
	Fulfillment *Fulfillment  `json:"fulfillment"`
	Order       *Order        `json:"order"`
	Errors      []*OrderError `json:"errors"`
}

type FulfillmentCancelInput struct {
	WarehouseID *string `json:"warehouseId"`
}

type FulfillmentRefundProducts struct {
	Fulfillment *Fulfillment  `json:"fulfillment"`
	Order       *Order        `json:"order"`
	Errors      []*OrderError `json:"errors"`
}

type FulfillmentReturnProducts struct {
	ReturnFulfillment  *Fulfillment  `json:"returnFulfillment"`
	ReplaceFulfillment *Fulfillment  `json:"replaceFulfillment"`
	Order              *Order        `json:"order"`
	ReplaceOrder       *Order        `json:"replaceOrder"`
	Errors             []*OrderError `json:"errors"`
}

type FulfillmentUpdateTracking struct {
	Fulfillment *Fulfillment  `json:"fulfillment"`
	Order       *Order        `json:"order"`
	Errors      []*OrderError `json:"errors"`
}

type FulfillmentUpdateTrackingInput struct {
	TrackingNumber *string `json:"trackingNumber"`
	NotifyCustomer *bool   `json:"notifyCustomer"`
}

type GatewayConfigLine struct {
	Field string  `json:"field"`
	Value *string `json:"value"`
}

type GiftCard struct {
	IsActive        bool            `json:"isActive"`
	ExpiryDate      *Date           `json:"expiryDate"`
	Tag             *string         `json:"tag"`
	Created         DateTime        `json:"created"`
	LastUsedOn      *DateTime       `json:"lastUsedOn"`
	InitialBalance  *Money          `json:"initialBalance"`
	CurrentBalance  *Money          `json:"currentBalance"`
	ID              string          `json:"id"`
	PrivateMetadata []*MetadataItem `json:"privateMetadata"`
	Metadata        []*MetadataItem `json:"metadata"`
	DisplayCode     string          `json:"displayCode"`

	createdByEmail *string
	usedByEmail    *string
	code           string
	usedByID       *string
	createdByID    *string
	productID      *string

	// Code            string           `json:"code"`
	// CreatedByEmail  *string          `json:"createdByEmail"`
	// UsedByEmail     *string          `json:"usedByEmail"`
	// App             *App             `json:"app"`
	// Product         *Product         `json:"product"`
	// Events          []*GiftCardEvent `json:"events"`
	// BoughtInChannel *string          `json:"boughtInChannel"`
	// CreatedBy       *User            `json:"createdBy"`
	// UsedBy          *User            `json:"usedBy"`
}

type GiftCardActivate struct {
	GiftCard *GiftCard        `json:"giftCard"`
	Errors   []*GiftCardError `json:"errors"`
}

type GiftCardAddNote struct {
	GiftCard *GiftCard        `json:"giftCard"`
	Event    *GiftCardEvent   `json:"event"`
	Errors   []*GiftCardError `json:"errors"`
}

type GiftCardAddNoteInput struct {
	Message string `json:"message"`
}

type GiftCardBulkActivate struct {
	Count  int32            `json:"count"`
	Errors []*GiftCardError `json:"errors"`
}

type GiftCardBulkDeactivate struct {
	Count  int32            `json:"count"`
	Errors []*GiftCardError `json:"errors"`
}

type GiftCardBulkDelete struct {
	Count  int32            `json:"count"`
	Errors []*GiftCardError `json:"errors"`
}

type GiftCardCountableConnection struct {
	PageInfo   *PageInfo                `json:"pageInfo"`
	Edges      []*GiftCardCountableEdge `json:"edges"`
	TotalCount *int32                   `json:"totalCount"`
}

type GiftCardCountableEdge struct {
	Node   *GiftCard `json:"node"`
	Cursor string    `json:"cursor"`
}

type GiftCardCreate struct {
	Errors   []*GiftCardError `json:"errors"`
	GiftCard *GiftCard        `json:"giftCard"`
}

type GiftCardCreateInput struct {
	Tag        *string     `json:"tag"`
	ExpiryDate *Date       `json:"expiryDate"`
	StartDate  *Date       `json:"startDate"`
	EndDate    *Date       `json:"endDate"`
	Balance    *PriceInput `json:"balance"`
	UserEmail  *string     `json:"userEmail"`
	Channel    *string     `json:"channel"`
	IsActive   bool        `json:"isActive"`
	Code       *string     `json:"code"`
	Note       *string     `json:"note"`
}

type GiftCardDeactivate struct {
	GiftCard *GiftCard        `json:"giftCard"`
	Errors   []*GiftCardError `json:"errors"`
}

type GiftCardDelete struct {
	Errors   []*GiftCardError `json:"errors"`
	GiftCard *GiftCard        `json:"giftCard"`
}

type GiftCardError struct {
	Field   *string           `json:"field"`
	Message *string           `json:"message"`
	Code    GiftCardErrorCode `json:"code"`
}

type GiftCardEventBalance struct {
	InitialBalance    *Money `json:"initialBalance"`
	CurrentBalance    *Money `json:"currentBalance"`
	OldInitialBalance *Money `json:"oldInitialBalance"`
	OldCurrentBalance *Money `json:"oldCurrentBalance"`
}

type GiftCardFilterInput struct {
	IsActive       *bool            `json:"isActive"`
	Tag            *string          `json:"tag"`
	Tags           []string         `json:"tags"`
	Products       []string         `json:"products"`
	UsedBy         []string         `json:"usedBy"`
	Currency       *string          `json:"currency"`
	CurrentBalance *PriceRangeInput `json:"currentBalance"`
	InitialBalance *PriceRangeInput `json:"initialBalance"`
}

type GiftCardResend struct {
	GiftCard *GiftCard        `json:"giftCard"`
	Errors   []*GiftCardError `json:"errors"`
}

type GiftCardResendInput struct {
	ID      string  `json:"id"`
	Email   *string `json:"email"`
	Channel string  `json:"channel"`
}

type GiftCardSettings struct {
	ExpiryType   GiftCardSettingsExpiryTypeEnum `json:"expiryType"`
	ExpiryPeriod *TimePeriod                    `json:"expiryPeriod"`
}

type GiftCardSettingsError struct {
	Field   *string                   `json:"field"`
	Message *string                   `json:"message"`
	Code    GiftCardSettingsErrorCode `json:"code"`
}

type GiftCardSettingsUpdate struct {
	GiftCardSettings *GiftCardSettings        `json:"giftCardSettings"`
	Errors           []*GiftCardSettingsError `json:"errors"`
}

type GiftCardSettingsUpdateInput struct {
	ExpiryType   *GiftCardSettingsExpiryTypeEnum `json:"expiryType"`
	ExpiryPeriod *TimePeriodInputType            `json:"expiryPeriod"`
}

type GiftCardSortingInput struct {
	Direction OrderDirection    `json:"direction"`
	Field     GiftCardSortField `json:"field"`
}

type GiftCardUpdate struct {
	Errors   []*GiftCardError `json:"errors"`
	GiftCard *GiftCard        `json:"giftCard"`
}

type GiftCardUpdateInput struct {
	Tag           *string          `json:"tag"`
	ExpiryDate    *Date            `json:"expiryDate"`
	StartDate     *Date            `json:"startDate"`
	EndDate       *Date            `json:"endDate"`
	BalanceAmount *PositiveDecimal `json:"balanceAmount"`
}

type Group struct {
	ID            string        `json:"id"`
	Name          string        `json:"name"`
	Permissions   []*Permission `json:"permissions"`
	Users         []*User       `json:"users"`
	UserCanManage bool          `json:"userCanManage"`
}

type GroupCountableConnection struct {
	PageInfo   *PageInfo             `json:"pageInfo"`
	Edges      []*GroupCountableEdge `json:"edges"`
	TotalCount *int32                `json:"totalCount"`
}

type GroupCountableEdge struct {
	Node   *Group `json:"node"`
	Cursor string `json:"cursor"`
}

type Image struct {
	URL string  `json:"url"`
	Alt *string `json:"alt"`
}

type IntRangeInput struct {
	Gte *int32 `json:"gte"`
	Lte *int32 `json:"lte"`
}

type InvoiceCreate struct {
	Errors  []*InvoiceError `json:"errors"`
	Invoice *Invoice        `json:"invoice"`
}

type InvoiceCreateInput struct {
	Number string `json:"number"`
	URL    string `json:"url"`
}

type InvoiceDelete struct {
	Errors  []*InvoiceError `json:"errors"`
	Invoice *Invoice        `json:"invoice"`
}

type InvoiceError struct {
	Field   *string          `json:"field"`
	Message *string          `json:"message"`
	Code    InvoiceErrorCode `json:"code"`
}

type InvoiceRequest struct {
	Order   *Order          `json:"order"`
	Errors  []*InvoiceError `json:"errors"`
	Invoice *Invoice        `json:"invoice"`
}

type InvoiceRequestDelete struct {
	Errors  []*InvoiceError `json:"errors"`
	Invoice *Invoice        `json:"invoice"`
}

type InvoiceSendNotification struct {
	Errors  []*InvoiceError `json:"errors"`
	Invoice *Invoice        `json:"invoice"`
}

type InvoiceUpdate struct {
	Errors  []*InvoiceError `json:"errors"`
	Invoice *Invoice        `json:"invoice"`
}

type LanguageDisplay struct {
	Code     LanguageCodeEnum `json:"code"`
	Language string           `json:"language"`
}

type LimitInfo struct {
	CurrentUsage *Limits `json:"currentUsage"`
	AllowedUsage *Limits `json:"allowedUsage"`
}

type Limits struct {
	Channels        *int32 `json:"channels"`
	Orders          *int32 `json:"orders"`
	ProductVariants *int32 `json:"productVariants"`
	StaffUsers      *int32 `json:"staffUsers"`
	Warehouses      *int32 `json:"warehouses"`
}

type LoginError struct {
	Field   *string        `json:"field"`
	Message *string        `json:"message"`
	Code    LoginErrorCode `json:"code"`
}

type LoginInput struct {
	ID       string `json:"id"`
	LoginID  string `json:"loginId"`
	Password string `json:"password"`
	MfaToken string `json:"mfaToken"`
	DeviceID string `json:"deviceId"`
	LdapOnly bool   `json:"ldapOnly"`
}

type LoginResponse struct {
	Error *LoginError `json:"error"`
	User  *User       `json:"user"`
}

type Manifest struct {
	Identifier       string                  `json:"identifier"`
	Version          string                  `json:"version"`
	Name             string                  `json:"name"`
	About            *string                 `json:"about"`
	Permissions      []*Permission           `json:"permissions"`
	AppURL           *string                 `json:"appUrl"`
	ConfigurationURL *string                 `json:"configurationUrl"`
	TokenTargetURL   *string                 `json:"tokenTargetUrl"`
	DataPrivacy      *string                 `json:"dataPrivacy"`
	DataPrivacyURL   *string                 `json:"dataPrivacyUrl"`
	HomepageURL      *string                 `json:"homepageUrl"`
	SupportURL       *string                 `json:"supportUrl"`
	Extensions       []*AppManifestExtension `json:"extensions"`
}

type Margin struct {
	Start *int32 `json:"start"`
	Stop  *int32 `json:"stop"`
}

type MenuBulkDelete struct {
	Count  int32        `json:"count"`
	Errors []*MenuError `json:"errors"`
}

type MenuCountableConnection struct {
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*MenuCountableEdge `json:"edges"`
	TotalCount *int32               `json:"totalCount"`
}

type MenuCountableEdge struct {
	Node   *Menu  `json:"node"`
	Cursor string `json:"cursor"`
}

type MenuCreate struct {
	Errors []*MenuError `json:"errors"`
	Menu   *Menu        `json:"menu"`
}

type MenuCreateInput struct {
	Name  string           `json:"name"`
	Slug  *string          `json:"slug"`
	Items []*MenuItemInput `json:"items"`
}

type MenuDelete struct {
	Errors []*MenuError `json:"errors"`
	Menu   *Menu        `json:"menu"`
}

type MenuError struct {
	Field   *string       `json:"field"`
	Message *string       `json:"message"`
	Code    MenuErrorCode `json:"code"`
}

type MenuFilterInput struct {
	Search   *string          `json:"search"`
	Slug     []string         `json:"slug"`
	Metadata []*MetadataInput `json:"metadata"`
}

type MenuInput struct {
	Name *string `json:"name"`
	Slug *string `json:"slug"`
}

type MenuItemBulkDelete struct {
	Count  int32        `json:"count"`
	Errors []*MenuError `json:"errors"`
}

type MenuItemCountableConnection struct {
	PageInfo   *PageInfo                `json:"pageInfo"`
	Edges      []*MenuItemCountableEdge `json:"edges"`
	TotalCount *int32                   `json:"totalCount"`
}

type MenuItemCountableEdge struct {
	Node   *MenuItem `json:"node"`
	Cursor string    `json:"cursor"`
}

type MenuItemCreate struct {
	Errors   []*MenuError `json:"errors"`
	MenuItem *MenuItem    `json:"menuItem"`
}

type MenuItemCreateInput struct {
	Name       string  `json:"name"`
	URL        *string `json:"url"`
	Category   *string `json:"category"`
	Collection *string `json:"collection"`
	Page       *string `json:"page"`
	Menu       string  `json:"menu"`
	Parent     *string `json:"parent"`
}

type MenuItemDelete struct {
	Errors   []*MenuError `json:"errors"`
	MenuItem *MenuItem    `json:"menuItem"`
}

type MenuItemFilterInput struct {
	Search   *string          `json:"search"`
	Metadata []*MetadataInput `json:"metadata"`
}

type MenuItemInput struct {
	Name       *string `json:"name"`
	URL        *string `json:"url"`
	Category   *string `json:"category"`
	Collection *string `json:"collection"`
	Page       *string `json:"page"`
}

type MenuItemMove struct {
	Menu   *Menu        `json:"menu"`
	Errors []*MenuError `json:"errors"`
}

type MenuItemMoveInput struct {
	ItemID    string  `json:"itemId"`
	ParentID  *string `json:"parentId"`
	SortOrder *int32  `json:"sortOrder"`
}

type MenuItemSortingInput struct {
	Direction OrderDirection     `json:"direction"`
	Field     MenuItemsSortField `json:"field"`
}

type MenuItemTranslatableContent struct {
	ID          string               `json:"id"`
	Name        string               `json:"name"`
	Translation *MenuItemTranslation `json:"translation"`
}

type MenuItemTranslate struct {
	Errors   []*TranslationError `json:"errors"`
	MenuItem *MenuItem           `json:"menuItem"`
}

type MenuItemTranslation struct {
	ID       string           `json:"id"`
	Name     string           `json:"name"`
	Language *LanguageDisplay `json:"language"`
}

type MenuItemUpdate struct {
	Errors   []*MenuError `json:"errors"`
	MenuItem *MenuItem    `json:"menuItem"`
}

type MenuSortingInput struct {
	Direction OrderDirection `json:"direction"`
	Field     MenuSortField  `json:"field"`
}

type MenuUpdate struct {
	Errors []*MenuError `json:"errors"`
	Menu   *Menu        `json:"menu"`
}

type MetadataError struct {
	Field   *string           `json:"field"`
	Message *string           `json:"message"`
	Code    MetadataErrorCode `json:"code"`
}

type MetadataFilter struct {
	Key   string  `json:"key"`
	Value *string `json:"value"`
}

type MetadataInput struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type MetadataItem struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Money struct {
	Currency string  `json:"currency"`
	Amount   float64 `json:"amount"`
}

type MoneyRange struct {
	Start *Money `json:"start"`
	Stop  *Money `json:"stop"`
}

type MoveProductInput struct {
	ProductID string `json:"productId"`
	SortOrder *int32 `json:"sortOrder"`
}

type NameTranslationInput struct {
	Name *string `json:"name"`
}

type OrderAddNote struct {
	Order  *Order        `json:"order"`
	Event  *OrderEvent   `json:"event"`
	Errors []*OrderError `json:"errors"`
}

type OrderAddNoteInput struct {
	Message string `json:"message"`
}

type OrderBulkCancel struct {
	Count  int32         `json:"count"`
	Errors []*OrderError `json:"errors"`
}

type OrderCancel struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type OrderCapture struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type OrderConfirm struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type OrderCountableConnection struct {
	PageInfo   *PageInfo             `json:"pageInfo"`
	Edges      []*OrderCountableEdge `json:"edges"`
	TotalCount *int32                `json:"totalCount"`
}

type OrderCountableEdge struct {
	Node   *Order `json:"node"`
	Cursor string `json:"cursor"` // string format of order's createAt
}

type OrderDiscountAdd struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type OrderDiscountCommonInput struct {
	ValueType DiscountValueTypeEnum `json:"valueType"`
	Value     PositiveDecimal       `json:"value"`
	Reason    *string               `json:"reason"`
}

type OrderDiscountDelete struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type OrderDiscountUpdate struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type OrderDraftFilterInput struct {
	Customer *string          `json:"customer"`
	Created  *DateRangeInput  `json:"created"`
	Search   *string          `json:"search"`
	Metadata []*MetadataInput `json:"metadata"`
	Channels []string         `json:"channels"`
}

type OrderError struct {
	Field       *string          `json:"field"`
	Message     *string          `json:"message"`
	Code        OrderErrorCode   `json:"code"`
	Warehouse   *string          `json:"warehouse"`
	OrderLine   *string          `json:"orderLine"`
	Variants    []string         `json:"variants"`
	AddressType *AddressTypeEnum `json:"addressType"`
}

type OrderEventCountableConnection struct {
	PageInfo   *PageInfo                  `json:"pageInfo"`
	Edges      []*OrderEventCountableEdge `json:"edges"`
	TotalCount *int32                     `json:"totalCount"`
}

type OrderEventCountableEdge struct {
	Node   *OrderEvent `json:"node"`
	Cursor string      `json:"cursor"`
}

type OrderEventDiscountObject struct {
	ValueType    DiscountValueTypeEnum  `json:"valueType"`
	Value        PositiveDecimal        `json:"value"`
	Reason       *string                `json:"reason"`
	Amount       *Money                 `json:"amount"`
	OldValueType *DiscountValueTypeEnum `json:"oldValueType"`
	OldValue     *PositiveDecimal       `json:"oldValue"`
	OldAmount    *Money                 `json:"oldAmount"`
}

type OrderEventOrderLineObject struct {
	Quantity  *int32                    `json:"quantity"`
	OrderLine *OrderLine                `json:"orderLine"`
	ItemName  *string                   `json:"itemName"`
	Discount  *OrderEventDiscountObject `json:"discount"`
}

type OrderFilterInput struct {
	PaymentStatus []*PaymentChargeStatusEnum `json:"paymentStatus"`
	Status        []*OrderStatusFilter       `json:"status"`
	Customer      *string                    `json:"customer"`
	Created       *DateRangeInput            `json:"created"`
	Search        *string                    `json:"search"`
	Metadata      []*MetadataInput           `json:"metadata"`
	Channels      []string                   `json:"channels"`
}

type OrderFulfill struct {
	Fulfillments []*Fulfillment `json:"fulfillments"`
	Order        *Order         `json:"order"`
	Errors       []*OrderError  `json:"errors"`
}

type OrderFulfillInput struct {
	Lines                  []*OrderFulfillLineInput `json:"lines"`
	NotifyCustomer         *bool                    `json:"notifyCustomer"`
	AllowStockToBeExceeded *bool                    `json:"allowStockToBeExceeded"`
}

type OrderFulfillLineInput struct {
	OrderLineID *string                   `json:"orderLineId"`
	Stocks      []*OrderFulfillStockInput `json:"stocks"`
}

type OrderFulfillStockInput struct {
	Quantity  int32  `json:"quantity"`
	Warehouse string `json:"warehouse"`
}

type OrderLineCreateInput struct {
	Quantity  int32  `json:"quantity"`
	VariantID string `json:"variantId"`
}

type OrderLineDelete struct {
	Order     *Order        `json:"order"`
	OrderLine *OrderLine    `json:"orderLine"`
	Errors    []*OrderError `json:"errors"`
}

type OrderLineDiscountRemove struct {
	OrderLine *OrderLine    `json:"orderLine"`
	Order     *Order        `json:"order"`
	Errors    []*OrderError `json:"errors"`
}

type OrderLineDiscountUpdate struct {
	OrderLine *OrderLine    `json:"orderLine"`
	Order     *Order        `json:"order"`
	Errors    []*OrderError `json:"errors"`
}

type OrderLineInput struct {
	Quantity int32 `json:"quantity"`
}

type OrderLineUpdate struct {
	Order     *Order        `json:"order"`
	Errors    []*OrderError `json:"errors"`
	OrderLine *OrderLine    `json:"orderLine"`
}

type OrderLinesCreate struct {
	Order      *Order        `json:"order"`
	OrderLines []*OrderLine  `json:"orderLines"`
	Errors     []*OrderError `json:"errors"`
}

type OrderMarkAsPaid struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type OrderRefund struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type OrderRefundFulfillmentLineInput struct {
	FulfillmentLineID string `json:"fulfillmentLineId"`
	Quantity          int32  `json:"quantity"`
}

type OrderRefundLineInput struct {
	OrderLineID string `json:"orderLineId"`
	Quantity    int32  `json:"quantity"`
}

type OrderRefundProductsInput struct {
	OrderLines           []*OrderRefundLineInput            `json:"orderLines"`
	FulfillmentLines     []*OrderRefundFulfillmentLineInput `json:"fulfillmentLines"`
	AmountToRefund       *PositiveDecimal                   `json:"amountToRefund"`
	IncludeShippingCosts *bool                              `json:"includeShippingCosts"`
}

type OrderReturnFulfillmentLineInput struct {
	FulfillmentLineID string `json:"fulfillmentLineId"`
	Quantity          int32  `json:"quantity"`
	Replace           *bool  `json:"replace"`
}

type OrderReturnLineInput struct {
	OrderLineID string `json:"orderLineId"`
	Quantity    int32  `json:"quantity"`
	Replace     *bool  `json:"replace"`
}

type OrderReturnProductsInput struct {
	OrderLines           []*OrderReturnLineInput            `json:"orderLines"`
	FulfillmentLines     []*OrderReturnFulfillmentLineInput `json:"fulfillmentLines"`
	AmountToRefund       *PositiveDecimal                   `json:"amountToRefund"`
	IncludeShippingCosts *bool                              `json:"includeShippingCosts"`
	Refund               *bool                              `json:"refund"`
}

type OrderSettings struct {
	AutomaticallyConfirmAllNewOrders         bool `json:"automaticallyConfirmAllNewOrders"`
	AutomaticallyFulfillNonShippableGiftCard bool `json:"automaticallyFulfillNonShippableGiftCard"`
}

type OrderSettingsError struct {
	Field   *string                `json:"field"`
	Message *string                `json:"message"`
	Code    OrderSettingsErrorCode `json:"code"`
}

type OrderSettingsUpdate struct {
	OrderSettings *OrderSettings        `json:"orderSettings"`
	Errors        []*OrderSettingsError `json:"errors"`
}

type OrderSettingsUpdateInput struct {
	AutomaticallyConfirmAllNewOrders         *bool `json:"automaticallyConfirmAllNewOrders"`
	AutomaticallyFulfillNonShippableGiftCard *bool `json:"automaticallyFulfillNonShippableGiftCard"`
}

type OrderSortingInput struct {
	Direction OrderDirection `json:"direction"`
	Field     OrderSortField `json:"field"`
}

type OrderUpdate struct {
	Errors []*OrderError `json:"errors"`
	Order  *Order        `json:"order"`
}

type OrderUpdateInput struct {
	BillingAddress  *AddressInput `json:"billingAddress"`
	UserEmail       *string       `json:"userEmail"`
	ShippingAddress *AddressInput `json:"shippingAddress"`
}

type OrderUpdateShipping struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type OrderUpdateShippingInput struct {
	ShippingMethod *string `json:"shippingMethod"`
}

type OrderVoid struct {
	Order  *Order        `json:"order"`
	Errors []*OrderError `json:"errors"`
}

type PageAttributeAssign struct {
	PageType *PageType    `json:"pageType"`
	Errors   []*PageError `json:"errors"`
}

type PageAttributeUnassign struct {
	PageType *PageType    `json:"pageType"`
	Errors   []*PageError `json:"errors"`
}

type PageBulkDelete struct {
	Count  int32        `json:"count"`
	Errors []*PageError `json:"errors"`
}

type PageBulkPublish struct {
	Count  int32        `json:"count"`
	Errors []*PageError `json:"errors"`
}

type PageCountableConnection struct {
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*PageCountableEdge `json:"edges"`
	TotalCount *int32               `json:"totalCount"`
}

type PageCountableEdge struct {
	Node   *Page  `json:"node"`
	Cursor string `json:"cursor"`
}

type PageCreate struct {
	Errors []*PageError `json:"errors"`
	Page   *Page        `json:"page"`
}

type PageCreateInput struct {
	Slug            *string                `json:"slug"`
	Title           *string                `json:"title"`
	Content         JSONString             `json:"content"`
	Attributes      []*AttributeValueInput `json:"attributes"`
	IsPublished     *bool                  `json:"isPublished"`
	PublicationDate *string                `json:"publicationDate"`
	Seo             *SeoInput              `json:"seo"`
	PageType        string                 `json:"pageType"`
}

type PageDelete struct {
	Errors []*PageError `json:"errors"`
	Page   *Page        `json:"page"`
}

type PageError struct {
	Field      *string       `json:"field"`
	Message    *string       `json:"message"`
	Code       PageErrorCode `json:"code"`
	Attributes []string      `json:"attributes"`
	Values     []string      `json:"values"`
}

type PageFilterInput struct {
	Search    *string          `json:"search"`
	Metadata  []*MetadataInput `json:"metadata"`
	PageTypes []string         `json:"pageTypes"`
	Ids       []string         `json:"ids"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type PageInput struct {
	Slug            *string                `json:"slug"`
	Title           *string                `json:"title"`
	Content         JSONString             `json:"content"`
	Attributes      []*AttributeValueInput `json:"attributes"`
	IsPublished     *bool                  `json:"isPublished"`
	PublicationDate *string                `json:"publicationDate"`
	Seo             *SeoInput              `json:"seo"`
}

type PageReorderAttributeValues struct {
	Page   *Page        `json:"page"`
	Errors []*PageError `json:"errors"`
}

type PageSortingInput struct {
	Direction OrderDirection `json:"direction"`
	Field     PageSortField  `json:"field"`
}

type PageTranslatableContent struct {
	ID             string           `json:"id"`
	SeoTitle       *string          `json:"seoTitle"`
	SeoDescription *string          `json:"seoDescription"`
	Title          string           `json:"title"`
	Content        JSONString       `json:"content"`
	Translation    *PageTranslation `json:"translation"`
}

type PageTranslate struct {
	Errors []*TranslationError      `json:"errors"`
	Page   *PageTranslatableContent `json:"page"`
}

type PageTranslation struct {
	ID             string           `json:"id"`
	SeoTitle       *string          `json:"seoTitle"`
	SeoDescription *string          `json:"seoDescription"`
	Title          *string          `json:"title"`
	Content        JSONString       `json:"content"`
	Language       *LanguageDisplay `json:"language"`
}

type PageTranslationInput struct {
	SeoTitle       *string    `json:"seoTitle"`
	SeoDescription *string    `json:"seoDescription"`
	Title          *string    `json:"title"`
	Content        JSONString `json:"content"`
}

type PageType struct {
	ID                  string                        `json:"id"`
	Name                string                        `json:"name"`
	Slug                string                        `json:"slug"`
	PrivateMetadata     []*MetadataItem               `json:"privateMetadata"`
	Metadata            []*MetadataItem               `json:"metadata"`
	Attributes          []*Attribute                  `json:"attributes"`
	AvailableAttributes *AttributeCountableConnection `json:"availableAttributes"`
	HasPages            *bool                         `json:"hasPages"`
}

type PageTypeBulkDelete struct {
	Count  int32        `json:"count"`
	Errors []*PageError `json:"errors"`
}

type PageTypeCountableConnection struct {
	PageInfo   *PageInfo                `json:"pageInfo"`
	Edges      []*PageTypeCountableEdge `json:"edges"`
	TotalCount *int32                   `json:"totalCount"`
}

type PageTypeCountableEdge struct {
	Node   *PageType `json:"node"`
	Cursor string    `json:"cursor"`
}

type PageTypeCreate struct {
	Errors   []*PageError `json:"errors"`
	PageType *PageType    `json:"pageType"`
}

type PageTypeCreateInput struct {
	Name          *string  `json:"name"`
	Slug          *string  `json:"slug"`
	AddAttributes []string `json:"addAttributes"`
}

type PageTypeDelete struct {
	Errors   []*PageError `json:"errors"`
	PageType *PageType    `json:"pageType"`
}

type PageTypeFilterInput struct {
	Search *string `json:"search"`
}

type PageTypeReorderAttributes struct {
	PageType *PageType    `json:"pageType"`
	Errors   []*PageError `json:"errors"`
}

type PageTypeSortingInput struct {
	Direction OrderDirection    `json:"direction"`
	Field     PageTypeSortField `json:"field"`
}

type PageTypeUpdate struct {
	Errors   []*PageError `json:"errors"`
	PageType *PageType    `json:"pageType"`
}

type PageTypeUpdateInput struct {
	Name             *string  `json:"name"`
	Slug             *string  `json:"slug"`
	AddAttributes    []string `json:"addAttributes"`
	RemoveAttributes []string `json:"removeAttributes"`
}

type PageUpdate struct {
	Errors []*PageError `json:"errors"`
	Page   *Page        `json:"page"`
}

type PasswordChange struct {
	User *User `json:"user"`
}

type PaymentCapture struct {
	Payment *Payment        `json:"payment"`
	Errors  []*PaymentError `json:"errors"`
}

type PaymentCountableConnection struct {
	PageInfo   *PageInfo               `json:"pageInfo"`
	Edges      []*PaymentCountableEdge `json:"edges"`
	TotalCount *int32                  `json:"totalCount"`
}

type PaymentCountableEdge struct {
	Node   *Payment `json:"node"`
	Cursor string   `json:"cursor"`
}

type PaymentError struct {
	Field   *string          `json:"field"`
	Message *string          `json:"message"`
	Code    PaymentErrorCode `json:"code"`
}

type PaymentFilterInput struct {
	Checkouts []string `json:"checkouts"`
}

type PaymentGateway struct {
	Name       string               `json:"name"`
	ID         string               `json:"id"`
	Config     []*GatewayConfigLine `json:"config"`
	Currencies []string             `json:"currencies"`
}

type PaymentInitialize struct {
	InitializedPayment *PaymentInitialized `json:"initializedPayment"`
	Errors             []*PaymentError     `json:"errors"`
}

type PaymentInitialized struct {
	Gateway string     `json:"gateway"`
	Name    string     `json:"name"`
	Data    JSONString `json:"data"`
}

type PaymentInput struct {
	Gateway            string                  `json:"gateway"`
	Token              *string                 `json:"token"`
	Amount             *PositiveDecimal        `json:"amount"`
	ReturnURL          *string                 `json:"returnUrl"`
	StorePaymentMethod *StorePaymentMethodEnum `json:"storePaymentMethod"`
	Metadata           []*MetadataInput        `json:"metadata"`
}

type PaymentRefund struct {
	Payment *Payment        `json:"payment"`
	Errors  []*PaymentError `json:"errors"`
}

type PaymentSource struct {
	Gateway         string          `json:"gateway"`
	PaymentMethodID *string         `json:"paymentMethodId"`
	CreditCardInfo  *CreditCard     `json:"creditCardInfo"`
	Metadata        []*MetadataItem `json:"metadata"`
}

type PaymentVoid struct {
	Payment *Payment        `json:"payment"`
	Errors  []*PaymentError `json:"errors"`
}

type Permission struct {
	Code PermissionEnum `json:"code"`
	Name string         `json:"name"`
}

type PermissionGroupCreate struct {
	Errors []*PermissionGroupError `json:"errors"`
	Group  *Group                  `json:"group"`
}

type PermissionGroupCreateInput struct {
	AddPermissions []PermissionEnum `json:"addPermissions"`
	AddUsers       []string         `json:"addUsers"`
	Name           string           `json:"name"`
}

type PermissionGroupDelete struct {
	Errors []*PermissionGroupError `json:"errors"`
	Group  *Group                  `json:"group"`
}

type PermissionGroupError struct {
	Field       *string                  `json:"field"`
	Message     *string                  `json:"message"`
	Code        PermissionGroupErrorCode `json:"code"`
	Permissions []PermissionEnum         `json:"permissions"`
	Users       []string                 `json:"users"`
}

type PermissionGroupFilterInput struct {
	Search *string `json:"search"`
}

type PermissionGroupSortingInput struct {
	Direction OrderDirection           `json:"direction"`
	Field     PermissionGroupSortField `json:"field"`
}

type PermissionGroupUpdate struct {
	Errors []*PermissionGroupError `json:"errors"`
	Group  *Group                  `json:"group"`
}

type PermissionGroupUpdateInput struct {
	AddPermissions    []PermissionEnum `json:"addPermissions"`
	AddUsers          []string         `json:"addUsers"`
	Name              *string          `json:"name"`
	RemovePermissions []PermissionEnum `json:"removePermissions"`
	RemoveUsers       []string         `json:"removeUsers"`
}

type Plugin struct {
	ID                    string                 `json:"id"`
	Name                  string                 `json:"name"`
	Description           string                 `json:"description"`
	GlobalConfiguration   *PluginConfiguration   `json:"globalConfiguration"`
	ChannelConfigurations []*PluginConfiguration `json:"channelConfigurations"`
}

type PluginConfiguration struct {
	Active        bool                 `json:"active"`
	Channel       *Channel             `json:"channel"`
	Configuration []*ConfigurationItem `json:"configuration"`
}

type PluginCountableConnection struct {
	PageInfo   *PageInfo              `json:"pageInfo"`
	Edges      []*PluginCountableEdge `json:"edges"`
	TotalCount *int32                 `json:"totalCount"`
}

type PluginCountableEdge struct {
	Node   *Plugin `json:"node"`
	Cursor string  `json:"cursor"`
}

type PluginError struct {
	Field   *string         `json:"field"`
	Message *string         `json:"message"`
	Code    PluginErrorCode `json:"code"`
}

type PluginFilterInput struct {
	StatusInChannels *PluginStatusInChannelsInput `json:"statusInChannels"`
	Search           *string                      `json:"search"`
	Type             *PluginConfigurationType     `json:"type"`
}

type PluginSortingInput struct {
	Direction OrderDirection  `json:"direction"`
	Field     PluginSortField `json:"field"`
}

type PluginStatusInChannelsInput struct {
	Active   bool     `json:"active"`
	Channels []string `json:"channels"`
}

type PluginUpdate struct {
	Plugin *Plugin        `json:"plugin"`
	Errors []*PluginError `json:"errors"`
}

type PluginUpdateInput struct {
	Active        *bool                     `json:"active"`
	Configuration []*ConfigurationItemInput `json:"configuration"`
}

type PriceInput struct {
	Currency string          `json:"currency"`
	Amount   PositiveDecimal `json:"amount"`
}

type PriceRangeInput struct {
	Gte *float64 `json:"gte"`
	Lte *float64 `json:"lte"`
}

type ProductAttributeAssign struct {
	ProductType *ProductType    `json:"productType"`
	Errors      []*ProductError `json:"errors"`
}

type ProductAttributeAssignInput struct {
	ID   string               `json:"id"`
	Type ProductAttributeType `json:"type"`
}

type ProductAttributeUnassign struct {
	ProductType *ProductType    `json:"productType"`
	Errors      []*ProductError `json:"errors"`
}

type ProductBulkDelete struct {
	Count  int32           `json:"count"`
	Errors []*ProductError `json:"errors"`
}

type ProductChannelListing struct {
	ID                     string              `json:"id"`
	PublicationDate        *Date               `json:"publicationDate"`
	IsPublished            bool                `json:"isPublished"`
	Channel                *Channel            `json:"channel"`
	VisibleInListings      bool                `json:"visibleInListings"`
	AvailableForPurchase   *Date               `json:"availableForPurchase"`
	DiscountedPrice        *Money              `json:"discountedPrice"`
	PurchaseCost           *MoneyRange         `json:"purchaseCost"`
	Margin                 *Margin             `json:"margin"`
	IsAvailableForPurchase *bool               `json:"isAvailableForPurchase"`
	Pricing                *ProductPricingInfo `json:"pricing"`
}

type ProductChannelListingAddInput struct {
	ChannelID                string   `json:"channelId"`
	IsPublished              *bool    `json:"isPublished"`
	PublicationDate          *Date    `json:"publicationDate"`
	VisibleInListings        *bool    `json:"visibleInListings"`
	IsAvailableForPurchase   *bool    `json:"isAvailableForPurchase"`
	AvailableForPurchaseDate *Date    `json:"availableForPurchaseDate"`
	AddVariants              []string `json:"addVariants"`
	RemoveVariants           []string `json:"removeVariants"`
}

type ProductChannelListingError struct {
	Field      *string          `json:"field"`
	Message    *string          `json:"message"`
	Code       ProductErrorCode `json:"code"`
	Attributes []string         `json:"attributes"`
	Values     []string         `json:"values"`
	Channels   []string         `json:"channels"`
	Variants   []string         `json:"variants"`
}

type ProductChannelListingUpdate struct {
	Product *Product                      `json:"product"`
	Errors  []*ProductChannelListingError `json:"errors"`
}

type ProductChannelListingUpdateInput struct {
	UpdateChannels []*ProductChannelListingAddInput `json:"updateChannels"`
	RemoveChannels []string                         `json:"removeChannels"`
}

type ProductCountableConnection struct {
	PageInfo   *PageInfo               `json:"pageInfo"`
	Edges      []*ProductCountableEdge `json:"edges"`
	TotalCount *int32                  `json:"totalCount"`
}

type ProductCountableEdge struct {
	Node   *Product `json:"node"`
	Cursor string   `json:"cursor"`
}

type ProductCreate struct {
	Errors  []*ProductError `json:"errors"`
	Product *Product        `json:"product"`
}

type ProductCreateInput struct {
	Attributes  []*AttributeValueInput `json:"attributes"`
	Category    *string                `json:"category"`
	ChargeTaxes *bool                  `json:"chargeTaxes"`
	Collections []string               `json:"collections"`
	Description JSONString             `json:"description"`
	Name        *string                `json:"name"`
	Slug        *string                `json:"slug"`
	TaxCode     *string                `json:"taxCode"`
	Seo         *SeoInput              `json:"seo"`
	Weight      *string                `json:"weight"`
	Rating      *float64               `json:"rating"`
	ProductType string                 `json:"productType"`
}

type ProductDelete struct {
	Errors  []*ProductError `json:"errors"`
	Product *Product        `json:"product"`
}

type ProductError struct {
	Field      *string          `json:"field"`
	Message    *string          `json:"message"`
	Code       ProductErrorCode `json:"code"`
	Attributes []string         `json:"attributes"`
	Values     []string         `json:"values"`
}

type ProductFilterInput struct {
	IsPublished           *bool                    `json:"isPublished"`
	Collections           []string                 `json:"collections"`
	Categories            []string                 `json:"categories"`
	HasCategory           *bool                    `json:"hasCategory"`
	Attributes            []*AttributeInput        `json:"attributes"`
	StockAvailability     *StockAvailability       `json:"stockAvailability"`
	Stocks                *ProductStockFilterInput `json:"stocks"`
	Search                *string                  `json:"search"`
	Metadata              []*MetadataInput         `json:"metadata"`
	Price                 *PriceRangeInput         `json:"price"`
	MinimalPrice          *PriceRangeInput         `json:"minimalPrice"`
	ProductTypes          []string                 `json:"productTypes"`
	GiftCard              *bool                    `json:"giftCard"`
	Ids                   []string                 `json:"ids"`
	HasPreorderedVariants *bool                    `json:"hasPreorderedVariants"`
	Channel               *string                  `json:"channel"`
}

type ProductInput struct {
	Attributes  []*AttributeValueInput `json:"attributes"`
	Category    *string                `json:"category"`
	ChargeTaxes *bool                  `json:"chargeTaxes"`
	Collections []string               `json:"collections"`
	Description JSONString             `json:"description"`
	Name        *string                `json:"name"`
	Slug        *string                `json:"slug"`
	TaxCode     *string                `json:"taxCode"`
	Seo         *SeoInput              `json:"seo"`
	Weight      *string                `json:"weight"`
	Rating      *float64               `json:"rating"`
}

type ProductMedia struct {
	ID         string           `json:"id"`
	SortOrder  *int32           `json:"sortOrder"`
	Alt        string           `json:"alt"`
	Type       ProductMediaType `json:"type"`
	OembedData JSONString       `json:"oembedData"`
	URL        string           `json:"url"`
}

type ProductMediaBulkDelete struct {
	Count  int32           `json:"count"`
	Errors []*ProductError `json:"errors"`
}

type ProductMediaCreate struct {
	Product *Product        `json:"product"`
	Media   *ProductMedia   `json:"media"`
	Errors  []*ProductError `json:"errors"`
}

type ProductMediaCreateInput struct {
	Alt      *string         `json:"alt"`
	Image    *graphql.Upload `json:"image"`
	Product  string          `json:"product"`
	MediaURL *string         `json:"mediaUrl"`
}

type ProductMediaDelete struct {
	Product *Product        `json:"product"`
	Media   *ProductMedia   `json:"media"`
	Errors  []*ProductError `json:"errors"`
}

type ProductMediaReorder struct {
	Product *Product        `json:"product"`
	Media   []*ProductMedia `json:"media"`
	Errors  []*ProductError `json:"errors"`
}

type ProductMediaUpdate struct {
	Product *Product        `json:"product"`
	Media   *ProductMedia   `json:"media"`
	Errors  []*ProductError `json:"errors"`
}

type ProductMediaUpdateInput struct {
	Alt *string `json:"alt"`
}

type ProductOrder struct {
	Direction   OrderDirection     `json:"direction"`
	Channel     *string            `json:"channel"`
	AttributeID *string            `json:"attributeId"`
	Field       *ProductOrderField `json:"field"`
}

type ProductPricingInfo struct {
	OnSale                  *bool            `json:"onSale"`
	Discount                *TaxedMoney      `json:"discount"`
	DiscountLocalCurrency   *TaxedMoney      `json:"discountLocalCurrency"`
	PriceRange              *TaxedMoneyRange `json:"priceRange"`
	PriceRangeUndiscounted  *TaxedMoneyRange `json:"priceRangeUndiscounted"`
	PriceRangeLocalCurrency *TaxedMoneyRange `json:"priceRangeLocalCurrency"`
}

type ProductReorderAttributeValues struct {
	Product *Product        `json:"product"`
	Errors  []*ProductError `json:"errors"`
}

type ProductStockFilterInput struct {
	WarehouseIds []string       `json:"warehouseIds"`
	Quantity     *IntRangeInput `json:"quantity"`
}

type ProductTranslatableContent struct {
	ID             string              `json:"id"`
	SeoTitle       *string             `json:"seoTitle"`
	SeoDescription *string             `json:"seoDescription"`
	Name           string              `json:"name"`
	Description    JSONString          `json:"description"`
	Translation    *ProductTranslation `json:"translation"`
}

type ProductTranslate struct {
	Errors  []*TranslationError `json:"errors"`
	Product *Product            `json:"product"`
}

type ProductTranslation struct {
	ID             string           `json:"id"`
	SeoTitle       *string          `json:"seoTitle"`
	SeoDescription *string          `json:"seoDescription"`
	Name           *string          `json:"name"`
	Description    JSONString       `json:"description"`
	Language       *LanguageDisplay `json:"language"`
}

type ProductType struct {
	ID                  string                        `json:"id"`
	Name                string                        `json:"name"`
	Slug                string                        `json:"slug"`
	HasVariants         bool                          `json:"hasVariants"`
	IsShippingRequired  bool                          `json:"isShippingRequired"`
	IsDigital           bool                          `json:"isDigital"`
	Weight              *Weight                       `json:"weight"`
	PrivateMetadata     []*MetadataItem               `json:"privateMetadata"`
	Metadata            []*MetadataItem               `json:"metadata"`
	Kind                ProductTypeKindEnum           `json:"kind"`
	TaxType             *TaxType                      `json:"taxType"`
	VariantAttributes   []*Attribute                  `json:"variantAttributes"`
	ProductAttributes   []*Attribute                  `json:"productAttributes"`
	AvailableAttributes *AttributeCountableConnection `json:"availableAttributes"`
}

type ProductTypeBulkDelete struct {
	Count  int32           `json:"count"`
	Errors []*ProductError `json:"errors"`
}

type ProductTypeCountableConnection struct {
	PageInfo   *PageInfo                   `json:"pageInfo"`
	Edges      []*ProductTypeCountableEdge `json:"edges"`
	TotalCount *int32                      `json:"totalCount"`
}

type ProductTypeCountableEdge struct {
	Node   *ProductType `json:"node"`
	Cursor string       `json:"cursor"`
}

type ProductTypeCreate struct {
	Errors      []*ProductError `json:"errors"`
	ProductType *ProductType    `json:"productType"`
}

type ProductTypeDelete struct {
	Errors      []*ProductError `json:"errors"`
	ProductType *ProductType    `json:"productType"`
}

type ProductTypeFilterInput struct {
	Search       *string                  `json:"search"`
	Configurable *ProductTypeConfigurable `json:"configurable"`
	ProductType  *ProductTypeEnum         `json:"productType"`
	Metadata     []*MetadataInput         `json:"metadata"`
	Kind         *ProductTypeKindEnum     `json:"kind"`
	Ids          []string                 `json:"ids"`
}

type ProductTypeInput struct {
	Name               *string              `json:"name"`
	Slug               *string              `json:"slug"`
	Kind               *ProductTypeKindEnum `json:"kind"`
	HasVariants        *bool                `json:"hasVariants"`
	ProductAttributes  []string             `json:"productAttributes"`
	VariantAttributes  []string             `json:"variantAttributes"`
	IsShippingRequired *bool                `json:"isShippingRequired"`
	IsDigital          *bool                `json:"isDigital"`
	Weight             *string              `json:"weight"`
	TaxCode            *string              `json:"taxCode"`
}

type ProductTypeReorderAttributes struct {
	ProductType *ProductType    `json:"productType"`
	Errors      []*ProductError `json:"errors"`
}

type ProductTypeSortingInput struct {
	Direction OrderDirection       `json:"direction"`
	Field     ProductTypeSortField `json:"field"`
}

type ProductTypeUpdate struct {
	Errors      []*ProductError `json:"errors"`
	ProductType *ProductType    `json:"productType"`
}

type ProductUpdate struct {
	Errors  []*ProductError `json:"errors"`
	Product *Product        `json:"product"`
}

type ProductVariantBulkCreate struct {
	Count           int32               `json:"count"`
	ProductVariants []*ProductVariant   `json:"productVariants"`
	Errors          []*BulkProductError `json:"errors"`
}

type PreorderData struct {
	GlobalThreshold *int32
	GlobalSoldUnits int32
	EndDate         *DateTime
}

type ProductVariantBulkCreateInput struct {
	Attributes      []*BulkAttributeValueInput              `json:"attributes"`
	Sku             *string                                 `json:"sku"`
	TrackInventory  *bool                                   `json:"trackInventory"`
	Weight          *string                                 `json:"weight"`
	Stocks          []*StockInput                           `json:"stocks"`
	ChannelListings []*ProductVariantChannelListingAddInput `json:"channelListings"`
}

type ProductVariantBulkDelete struct {
	Count  int32           `json:"count"`
	Errors []*ProductError `json:"errors"`
}

type ProductVariantChannelListing struct {
	ID        string   `json:"id"`
	Channel   *Channel `json:"channel"`
	Price     *Money   `json:"price"`
	CostPrice *Money   `json:"costPrice"`
	Margin    *int32   `json:"margin"`
}

type ProductVariantChannelListingAddInput struct {
	ChannelID string           `json:"channelId"`
	Price     PositiveDecimal  `json:"price"`
	CostPrice *PositiveDecimal `json:"costPrice"`
}

type ProductVariantChannelListingUpdate struct {
	Variant *ProductVariant               `json:"variant"`
	Errors  []*ProductChannelListingError `json:"errors"`
}

type ProductVariantCountableConnection struct {
	PageInfo   *PageInfo                      `json:"pageInfo"`
	Edges      []*ProductVariantCountableEdge `json:"edges"`
	TotalCount *int32                         `json:"totalCount"`
}

type ProductVariantCountableEdge struct {
	Node   *ProductVariant `json:"node"`
	Cursor string          `json:"cursor"`
}

type ProductVariantCreate struct {
	Errors         []*ProductError `json:"errors"`
	ProductVariant *ProductVariant `json:"productVariant"`
}

type ProductVariantCreateInput struct {
	Attributes     []*AttributeValueInput `json:"attributes"`
	Sku            *string                `json:"sku"`
	TrackInventory *bool                  `json:"trackInventory"`
	Weight         *string                `json:"weight"`
	Product        string                 `json:"product"`
	Stocks         []*StockInput          `json:"stocks"`
}

type ProductVariantDelete struct {
	Errors         []*ProductError `json:"errors"`
	ProductVariant *ProductVariant `json:"productVariant"`
}

type ProductVariantFilterInput struct {
	Search   *string          `json:"search"`
	Sku      []string         `json:"sku"`
	Metadata []*MetadataInput `json:"metadata"`
}

type ProductVariantInput struct {
	Attributes     []*AttributeValueInput `json:"attributes"`
	Sku            *string                `json:"sku"`
	TrackInventory *bool                  `json:"trackInventory"`
	Weight         *string                `json:"weight"`
}

type ProductVariantReorder struct {
	Product *Product        `json:"product"`
	Errors  []*ProductError `json:"errors"`
}

type ProductVariantReorderAttributeValues struct {
	ProductVariant *ProductVariant `json:"productVariant"`
	Errors         []*ProductError `json:"errors"`
}

type ProductVariantSetDefault struct {
	Product *Product        `json:"product"`
	Errors  []*ProductError `json:"errors"`
}

type ProductVariantStocksCreate struct {
	ProductVariant *ProductVariant   `json:"productVariant"`
	Errors         []*BulkStockError `json:"errors"`
}

type ProductVariantStocksDelete struct {
	ProductVariant *ProductVariant `json:"productVariant"`
	Errors         []*StockError   `json:"errors"`
}

type ProductVariantStocksUpdate struct {
	ProductVariant *ProductVariant   `json:"productVariant"`
	Errors         []*BulkStockError `json:"errors"`
}

type ProductVariantTranslatableContent struct {
	ID              string                               `json:"id"`
	Name            string                               `json:"name"`
	Translation     *ProductVariantTranslation           `json:"translation"`
	AttributeValues []*AttributeValueTranslatableContent `json:"attributeValues"`
}

type ProductVariantTranslate struct {
	Errors         []*TranslationError `json:"errors"`
	ProductVariant *ProductVariant     `json:"productVariant"`
}

type ProductVariantTranslation struct {
	ID       string           `json:"id"`
	Name     string           `json:"name"`
	Language *LanguageDisplay `json:"language"`
}

type ProductVariantUpdate struct {
	Errors         []*ProductError `json:"errors"`
	ProductVariant *ProductVariant `json:"productVariant"`
}

type PublishableChannelListingInput struct {
	ChannelID       string `json:"channelId"`
	IsPublished     *bool  `json:"isPublished"`
	PublicationDate *Date  `json:"publicationDate"`
}

type ReducedRate struct {
	Rate     float64 `json:"rate"`
	RateType string  `json:"rateType"`
}

type RefreshToken struct {
	Token *string `json:"token"`
	User  *User   `json:"user"`
}

type ReorderInput struct {
	ID        string `json:"id"`
	SortOrder *int32 `json:"sortOrder"`
}

type RequestEmailChange struct {
	User *User `json:"user"`
}

type RequestPasswordReset struct {
	Ok bool `json:"ok"`
}

type SaleAddCatalogues struct {
	Sale   *Sale            `json:"sale"`
	Errors []*DiscountError `json:"errors"`
}

type SaleBulkDelete struct {
	Count  int32            `json:"count"`
	Errors []*DiscountError `json:"errors"`
}

type SaleChannelListingAddInput struct {
	ChannelID     string          `json:"channelId"`
	DiscountValue PositiveDecimal `json:"discountValue"`
}

type SaleChannelListingInput struct {
	AddChannels    []*SaleChannelListingAddInput `json:"addChannels"`
	RemoveChannels []string                      `json:"removeChannels"`
}

type SaleChannelListingUpdate struct {
	Sale   *Sale            `json:"sale"`
	Errors []*DiscountError `json:"errors"`
}

type SaleCountableConnection struct {
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*SaleCountableEdge `json:"edges"`
	TotalCount *int32               `json:"totalCount"`
}

type SaleCountableEdge struct {
	Node   *Sale  `json:"node"`
	Cursor string `json:"cursor"`
}

type SaleCreate struct {
	Errors []*DiscountError `json:"errors"`
	Sale   *Sale            `json:"sale"`
}

type SaleDelete struct {
	Errors []*DiscountError `json:"errors"`
	Sale   *Sale            `json:"sale"`
}

type SaleFilterInput struct {
	Status   []*DiscountStatusEnum  `json:"status"`
	SaleType *DiscountValueTypeEnum `json:"saleType"`
	Started  *DateTimeRangeInput    `json:"started"`
	Search   *string                `json:"search"`
	Metadata []*MetadataFilter      `json:"metadata"`
}

type SaleInput struct {
	Name        *string                `json:"name"`
	Type        *DiscountValueTypeEnum `json:"type"`
	Value       *PositiveDecimal       `json:"value"`
	Products    []string               `json:"products"`
	Variants    []string               `json:"variants"`
	Categories  []string               `json:"categories"`
	Collections []string               `json:"collections"`
	StartDate   *DateTime              `json:"startDate"`
	EndDate     *DateTime              `json:"endDate"`
}

type SaleRemoveCatalogues struct {
	Sale   *Sale            `json:"sale"`
	Errors []*DiscountError `json:"errors"`
}

type SaleSortingInput struct {
	Direction OrderDirection `json:"direction"`
	Channel   *string        `json:"channel"`
	Field     SaleSortField  `json:"field"`
}

type SaleTranslatableContent struct {
	ID          string           `json:"id"`
	Name        string           `json:"name"`
	Translation *SaleTranslation `json:"translation"`
}

type SaleTranslate struct {
	Errors []*TranslationError `json:"errors"`
	Sale   *Sale               `json:"sale"`
}

type SaleTranslation struct {
	ID       string           `json:"id"`
	Name     *string          `json:"name"`
	Language *LanguageDisplay `json:"language"`
}

type SaleUpdate struct {
	Errors []*DiscountError `json:"errors"`
	Sale   *Sale            `json:"sale"`
}

type SelectedAttribute struct {
	Attribute *Attribute        `json:"attribute"`
	Values    []*AttributeValue `json:"values"`
}

type SeoInput struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
}

type SetPassword struct {
	Token        *string `json:"token"`
	RefreshToken *string `json:"refreshToken"`
	CsrfToken    *string `json:"csrfToken"`
	User         *User   `json:"user"`
}

type ShippingError struct {
	Field      *string           `json:"field"`
	Message    *string           `json:"message"`
	Code       ShippingErrorCode `json:"code"`
	Warehouses []string          `json:"warehouses"`
	Channels   []string          `json:"channels"`
}

type ShippingMethodChannelListing struct {
	ID                string   `json:"id"`
	Channel           *Channel `json:"channel"`
	MinimumOrderPrice *Money   `json:"minimumOrderPrice"`
	MaximumOrderPrice *Money   `json:"maximumOrderPrice"`
	Price             *Money   `json:"price"`
}

type ShippingMethodChannelListingAddInput struct {
	ChannelID         string           `json:"channelId"`
	Price             *PositiveDecimal `json:"price"`
	MinimumOrderPrice *PositiveDecimal `json:"minimumOrderPrice"`
	MaximumOrderPrice *PositiveDecimal `json:"maximumOrderPrice"`
}

type ShippingMethodChannelListingInput struct {
	AddChannels    []*ShippingMethodChannelListingAddInput `json:"addChannels"`
	RemoveChannels []string                                `json:"removeChannels"`
}

type ShippingMethodChannelListingUpdate struct {
	ShippingMethod *ShippingMethod  `json:"shippingMethod"`
	Errors         []*ShippingError `json:"errors"`
}

type ShippingMethodPostalCodeRule struct {
	Start         *string                          `json:"start"`
	End           *string                          `json:"end"`
	InclusionType *PostalCodeRuleInclusionTypeEnum `json:"inclusionType"`
	ID            string                           `json:"id"`
}

type ShippingMethodTranslatableContent struct {
	ID          string                     `json:"id"`
	Name        string                     `json:"name"`
	Description JSONString                 `json:"description"`
	Translation *ShippingMethodTranslation `json:"translation"`
}

type ShippingMethodTranslation struct {
	ID          string           `json:"id"`
	Name        *string          `json:"name"`
	Description JSONString       `json:"description"`
	Language    *LanguageDisplay `json:"language"`
}

type ShippingPostalCodeRulesCreateInputRange struct {
	Start string  `json:"start"`
	End   *string `json:"end"`
}

type ShippingPriceBulkDelete struct {
	Count  int32            `json:"count"`
	Errors []*ShippingError `json:"errors"`
}

type ShippingPriceCreate struct {
	ShippingZone   *ShippingZone    `json:"shippingZone"`
	ShippingMethod *ShippingMethod  `json:"shippingMethod"`
	Errors         []*ShippingError `json:"errors"`
}

type ShippingPriceDelete struct {
	ShippingMethod *ShippingMethod  `json:"shippingMethod"`
	ShippingZone   *ShippingZone    `json:"shippingZone"`
	Errors         []*ShippingError `json:"errors"`
}

type ShippingPriceExcludeProducts struct {
	ShippingMethod *ShippingMethod  `json:"shippingMethod"`
	Errors         []*ShippingError `json:"errors"`
}

type ShippingPriceExcludeProductsInput struct {
	Products []string `json:"products"`
}

type ShippingPriceInput struct {
	Name                  *string                                    `json:"name"`
	Description           JSONString                                 `json:"description"`
	MinimumOrderWeight    *string                                    `json:"minimumOrderWeight"`
	MaximumOrderWeight    *string                                    `json:"maximumOrderWeight"`
	MaximumDeliveryDays   *int32                                     `json:"maximumDeliveryDays"`
	MinimumDeliveryDays   *int32                                     `json:"minimumDeliveryDays"`
	Type                  *ShippingMethodTypeEnum                    `json:"type"`
	ShippingZone          *string                                    `json:"shippingZone"`
	AddPostalCodeRules    []*ShippingPostalCodeRulesCreateInputRange `json:"addPostalCodeRules"`
	DeletePostalCodeRules []string                                   `json:"deletePostalCodeRules"`
	InclusionType         *PostalCodeRuleInclusionTypeEnum           `json:"inclusionType"`
}

type ShippingPriceRemoveProductFromExclude struct {
	ShippingMethod *ShippingMethod  `json:"shippingMethod"`
	Errors         []*ShippingError `json:"errors"`
}

type ShippingPriceTranslate struct {
	Errors         []*TranslationError `json:"errors"`
	ShippingMethod *ShippingMethod     `json:"shippingMethod"`
}

type ShippingPriceTranslationInput struct {
	Name        *string    `json:"name"`
	Description JSONString `json:"description"`
}

type ShippingPriceUpdate struct {
	ShippingZone   *ShippingZone    `json:"shippingZone"`
	ShippingMethod *ShippingMethod  `json:"shippingMethod"`
	Errors         []*ShippingError `json:"errors"`
}

type ShippingZoneBulkDelete struct {
	Count  int32            `json:"count"`
	Errors []*ShippingError `json:"errors"`
}

type ShippingZoneCountableConnection struct {
	PageInfo   *PageInfo                    `json:"pageInfo"`
	Edges      []*ShippingZoneCountableEdge `json:"edges"`
	TotalCount *int32                       `json:"totalCount"`
}

type ShippingZoneCountableEdge struct {
	Node   *ShippingZone `json:"node"`
	Cursor string        `json:"cursor"`
}

type ShippingZoneCreate struct {
	Errors       []*ShippingError `json:"errors"`
	ShippingZone *ShippingZone    `json:"shippingZone"`
}

type ShippingZoneCreateInput struct {
	Name          *string  `json:"name"`
	Description   *string  `json:"description"`
	Countries     []string `json:"countries"`
	Default       *bool    `json:"default"`
	AddWarehouses []string `json:"addWarehouses"`
	AddChannels   []string `json:"addChannels"`
}

type ShippingZoneDelete struct {
	Errors       []*ShippingError `json:"errors"`
	ShippingZone *ShippingZone    `json:"shippingZone"`
}

type ShippingZoneFilterInput struct {
	Search   *string  `json:"search"`
	Channels []string `json:"channels"`
}

type ShippingZoneUpdate struct {
	Errors       []*ShippingError `json:"errors"`
	ShippingZone *ShippingZone    `json:"shippingZone"`
}

type ShippingZoneUpdateInput struct {
	Name             *string  `json:"name"`
	Description      *string  `json:"description"`
	Countries        []string `json:"countries"`
	Default          *bool    `json:"default"`
	AddWarehouses    []string `json:"addWarehouses"`
	AddChannels      []string `json:"addChannels"`
	RemoveWarehouses []string `json:"removeWarehouses"`
	RemoveChannels   []string `json:"removeChannels"`
}

type Shop struct {
	AvailablePaymentGateways            []*PaymentGateway             `json:"availablePaymentGateways"`
	AvailableExternalAuthentications    []*ExternalAuthentication     `json:"availableExternalAuthentications"`
	AvailableShippingMethods            []*ShippingMethod             `json:"availableShippingMethods"`
	ChannelCurrencies                   []string                      `json:"channelCurrencies"`
	Countries                           []*CountryDisplay             `json:"countries"`
	DefaultCountry                      *CountryDisplay               `json:"defaultCountry"`
	DefaultMailSenderName               *string                       `json:"defaultMailSenderName"`
	DefaultMailSenderAddress            *string                       `json:"defaultMailSenderAddress"`
	Description                         *string                       `json:"description"`
	Domain                              *Domain                       `json:"domain"`
	Languages                           []*LanguageDisplay            `json:"languages"`
	Name                                string                        `json:"name"`
	Permissions                         []*Permission                 `json:"permissions"`
	PhonePrefixes                       []string                      `json:"phonePrefixes"`
	HeaderText                          *string                       `json:"headerText"`
	IncludeTaxesInPrices                bool                          `json:"includeTaxesInPrices"`
	FulfillmentAutoApprove              bool                          `json:"fulfillmentAutoApprove"`
	FulfillmentAllowUnpaid              bool                          `json:"fulfillmentAllowUnpaid"`
	DisplayGrossPrices                  bool                          `json:"displayGrossPrices"`
	ChargeTaxesOnShipping               bool                          `json:"chargeTaxesOnShipping"`
	TrackInventoryByDefault             *bool                         `json:"trackInventoryByDefault"`
	DefaultWeightUnit                   *WeightUnitsEnum              `json:"defaultWeightUnit"`
	Translation                         *ShopTranslation              `json:"translation"`
	AutomaticFulfillmentDigitalProducts *bool                         `json:"automaticFulfillmentDigitalProducts"`
	DefaultDigitalMaxDownloads          *int32                        `json:"defaultDigitalMaxDownloads"`
	DefaultDigitalURLValidDays          *int32                        `json:"defaultDigitalUrlValidDays"`
	CompanyAddress                      *Address                      `json:"companyAddress"`
	CustomerSetPasswordURL              *string                       `json:"customerSetPasswordUrl"`
	StaffNotificationRecipients         []*StaffNotificationRecipient `json:"staffNotificationRecipients"`
	Limits                              *LimitInfo                    `json:"limits"`
	Version                             string                        `json:"version"`
}

type ShopAddressUpdate struct {
	Shop   *Shop        `json:"shop"`
	Errors []*ShopError `json:"errors"`
}

type ShopDomainUpdate struct {
	Shop   *Shop        `json:"shop"`
	Errors []*ShopError `json:"errors"`
}

type ShopError struct {
	Field   *string       `json:"field"`
	Message *string       `json:"message"`
	Code    ShopErrorCode `json:"code"`
}

type ShopFetchTaxRates struct {
	Shop   *Shop        `json:"shop"`
	Errors []*ShopError `json:"errors"`
}

type ShopSettingsInput struct {
	HeaderText                          *string          `json:"headerText"`
	Description                         *string          `json:"description"`
	IncludeTaxesInPrices                *bool            `json:"includeTaxesInPrices"`
	DisplayGrossPrices                  *bool            `json:"displayGrossPrices"`
	ChargeTaxesOnShipping               *bool            `json:"chargeTaxesOnShipping"`
	TrackInventoryByDefault             *bool            `json:"trackInventoryByDefault"`
	DefaultWeightUnit                   *WeightUnitsEnum `json:"defaultWeightUnit"`
	AutomaticFulfillmentDigitalProducts *bool            `json:"automaticFulfillmentDigitalProducts"`
	FulfillmentAutoApprove              *bool            `json:"fulfillmentAutoApprove"`
	FulfillmentAllowUnpaid              *bool            `json:"fulfillmentAllowUnpaid"`
	DefaultDigitalMaxDownloads          *int32           `json:"defaultDigitalMaxDownloads"`
	DefaultDigitalURLValidDays          *int32           `json:"defaultDigitalUrlValidDays"`
	DefaultMailSenderName               *string          `json:"defaultMailSenderName"`
	DefaultMailSenderAddress            *string          `json:"defaultMailSenderAddress"`
	CustomerSetPasswordURL              *string          `json:"customerSetPasswordUrl"`
}

type ShopSettingsTranslate struct {
	Shop   *Shop               `json:"shop"`
	Errors []*TranslationError `json:"errors"`
}

type ShopSettingsTranslationInput struct {
	HeaderText  *string `json:"headerText"`
	Description *string `json:"description"`
}

type ShopSettingsUpdate struct {
	Shop   *Shop        `json:"shop"`
	Errors []*ShopError `json:"errors"`
}

type ShopTranslation struct {
	ID          string           `json:"id"`
	HeaderText  string           `json:"headerText"`
	Description string           `json:"description"`
	Language    *LanguageDisplay `json:"language"`
}

type SiteDomainInput struct {
	Domain *string `json:"domain"`
	Name   *string `json:"name"`
}

type StaffBulkDelete struct {
	Count  int32         `json:"count"`
	Errors []*StaffError `json:"errors"`
}

type StaffCreate struct {
	Errors []*StaffError `json:"errors"`
	User   *User         `json:"user"`
}

type StaffCreateInput struct {
	FirstName   *string  `json:"firstName"`
	LastName    *string  `json:"lastName"`
	Email       *string  `json:"email"`
	IsActive    *bool    `json:"isActive"`
	Note        *string  `json:"note"`
	AddGroups   []string `json:"addGroups"`
	RedirectURL *string  `json:"redirectUrl"`
}

type StaffDelete struct {
	Errors []*StaffError `json:"errors"`
	User   *User         `json:"user"`
}

type StaffError struct {
	Field       *string          `json:"field"`
	Message     *string          `json:"message"`
	Code        AccountErrorCode `json:"code"`
	AddressType *AddressTypeEnum `json:"addressType"`
	Permissions []PermissionEnum `json:"permissions"`
	Groups      []string         `json:"groups"`
	Users       []string         `json:"users"`
}

type StaffNotificationRecipientCreate struct {
	Errors                     []*ShopError                `json:"errors"`
	StaffNotificationRecipient *StaffNotificationRecipient `json:"staffNotificationRecipient"`
}

type StaffNotificationRecipientDelete struct {
	Errors                     []*ShopError                `json:"errors"`
	StaffNotificationRecipient *StaffNotificationRecipient `json:"staffNotificationRecipient"`
}

type StaffNotificationRecipientInput struct {
	User   *string `json:"user"`
	Email  *string `json:"email"`
	Active *bool   `json:"active"`
}

type StaffNotificationRecipientUpdate struct {
	Errors                     []*ShopError                `json:"errors"`
	StaffNotificationRecipient *StaffNotificationRecipient `json:"staffNotificationRecipient"`
}

type StaffUpdate struct {
	Errors []*StaffError `json:"errors"`
	User   *User         `json:"user"`
}

type StaffUpdateInput struct {
	FirstName    *string  `json:"firstName"`
	LastName     *string  `json:"lastName"`
	Email        *string  `json:"email"`
	IsActive     *bool    `json:"isActive"`
	Note         *string  `json:"note"`
	AddGroups    []string `json:"addGroups"`
	RemoveGroups []string `json:"removeGroups"`
}

type StaffUserInput struct {
	Status *StaffMemberStatus `json:"status"`
	Search *string            `json:"search"`
}

type StockCountableConnection struct {
	PageInfo   *PageInfo             `json:"pageInfo"`
	Edges      []*StockCountableEdge `json:"edges"`
	TotalCount *int32                `json:"totalCount"`
}

type StockCountableEdge struct {
	Node   *Stock `json:"node"`
	Cursor string `json:"cursor"`
}

type StockError struct {
	Field   *string        `json:"field"`
	Message *string        `json:"message"`
	Code    StockErrorCode `json:"code"`
}

type StockFilterInput struct {
	Quantity *float64 `json:"quantity"`
	Search   *string  `json:"search"`
}

type StockInput struct {
	Warehouse string `json:"warehouse"`
	Quantity  int32  `json:"quantity"`
}

type TaxType struct {
	Description *string `json:"description"`
	TaxCode     *string `json:"taxCode"`
}

type TaxedMoney struct {
	Currency string `json:"currency"`
	Gross    *Money `json:"gross"`
	Net      *Money `json:"net"`
	Tax      *Money `json:"tax"`
}

type TaxedMoneyRange struct {
	Start *TaxedMoney `json:"start"`
	Stop  *TaxedMoney `json:"stop"`
}

type TimePeriod struct {
	Amount int32              `json:"amount"`
	Type   TimePeriodTypeEnum `json:"type"`
}

type TimePeriodInputType struct {
	Amount int32              `json:"amount"`
	Type   TimePeriodTypeEnum `json:"type"`
}

type TokenCreateInput struct {
	ID       string `json:"id"`
	LoginID  string `json:"loginId"`
	Password string `json:"password"`
	Token    string `json:"token"`
	DeviceID string `json:"deviceId"`
	LdapOnly string `json:"ldapOnly"`
}

type Transaction struct {
	ID              string          `json:"id"`
	Created         DateTime        `json:"created"`
	Payment         *Payment        `json:"payment"`
	Token           string          `json:"token"`
	Kind            TransactionKind `json:"kind"`
	IsSuccess       bool            `json:"isSuccess"`
	Error           *string         `json:"error"`
	GatewayResponse JSONString      `json:"gatewayResponse"`
	Amount          *Money          `json:"amount"`
}

type TranslatableItemConnection struct {
	PageInfo   *PageInfo               `json:"pageInfo"`
	Edges      []*TranslatableItemEdge `json:"edges"`
	TotalCount *int32                  `json:"totalCount"`
}

type TranslatableItemEdge struct {
	Node   TranslatableItem `json:"node"`
	Cursor string           `json:"cursor"`
}

type TranslationError struct {
	Field   *string              `json:"field"`
	Message *string              `json:"message"`
	Code    TranslationErrorCode `json:"code"`
}

type TranslationInput struct {
	SeoTitle       *string    `json:"seoTitle"`
	SeoDescription *string    `json:"seoDescription"`
	Name           *string    `json:"name"`
	Description    JSONString `json:"description"`
}

type UpdateInvoiceInput struct {
	Number *string `json:"number"`
	URL    *string `json:"url"`
}

type UpdateMetadata struct {
	Errors []*MetadataError   `json:"errors"`
	Item   ObjectWithMetadata `json:"item"`
}

type UpdatePrivateMetadata struct {
	Errors []*MetadataError   `json:"errors"`
	Item   ObjectWithMetadata `json:"item"`
}

type UploadError struct {
	Field   *string         `json:"field"`
	Message *string         `json:"message"`
	Code    UploadErrorCode `json:"code"`
}

type UserAvatarDelete struct {
	User   *User           `json:"user"`
	Errors []*AccountError `json:"errors"`
}

type UserAvatarUpdate struct {
	User   *User           `json:"user"`
	Errors []*AccountError `json:"errors"`
}

type UserBulkSetActive struct {
	Count  int32           `json:"count"`
	Errors []*AccountError `json:"errors"`
}

type UserCountableConnection struct {
	PageInfo   *PageInfo            `json:"pageInfo"`
	Edges      []*UserCountableEdge `json:"edges"`
	TotalCount *int32               `json:"totalCount"`
}

type UserCountableEdge struct {
	Node   *User  `json:"node"`
	Cursor string `json:"cursor"`
}

type UserCreateInput struct {
	DefaultBillingAddress  *AddressInput     `json:"defaultBillingAddress"`
	DefaultShippingAddress *AddressInput     `json:"defaultShippingAddress"`
	FirstName              *string           `json:"firstName"`
	LastName               *string           `json:"lastName"`
	Email                  *string           `json:"email"`
	IsActive               *bool             `json:"isActive"`
	Note                   *string           `json:"note"`
	LanguageCode           *LanguageCodeEnum `json:"languageCode"`
	RedirectURL            *string           `json:"redirectUrl"`
	Channel                *string           `json:"channel"`
}

type UserPermission struct {
	Code                   PermissionEnum `json:"code"`
	Name                   string         `json:"name"`
	SourcePermissionGroups []*Group       `json:"sourcePermissionGroups"`
}

type UserSortingInput struct {
	Direction OrderDirection `json:"direction"`
	Field     UserSortField  `json:"field"`
}

type Vat struct {
	CountryCode  string         `json:"countryCode"`
	StandardRate *float64       `json:"standardRate"`
	ReducedRates []*ReducedRate `json:"reducedRates"`
}

type VariantMediaAssign struct {
	ProductVariant *ProductVariant `json:"productVariant"`
	Media          *ProductMedia   `json:"media"`
	Errors         []*ProductError `json:"errors"`
}

type VariantMediaUnassign struct {
	ProductVariant *ProductVariant `json:"productVariant"`
	Media          *ProductMedia   `json:"media"`
	Errors         []*ProductError `json:"errors"`
}

type VariantPricingInfo struct {
	OnSale                *bool       `json:"onSale"`
	Discount              *TaxedMoney `json:"discount"`
	DiscountLocalCurrency *TaxedMoney `json:"discountLocalCurrency"`
	Price                 *TaxedMoney `json:"price"`
	PriceUndiscounted     *TaxedMoney `json:"priceUndiscounted"`
	PriceLocalCurrency    *TaxedMoney `json:"priceLocalCurrency"`
}

type VerifyToken struct {
	User    *User      `json:"user"`
	IsValid bool       `json:"isValid"`
	Payload JSONString `json:"payload"`
}

type VoucherAddCatalogues struct {
	Voucher *Voucher         `json:"voucher"`
	Errors  []*DiscountError `json:"errors"`
}

type VoucherBulkDelete struct {
	Count  int32            `json:"count"`
	Errors []*DiscountError `json:"errors"`
}

type VoucherChannelListingAddInput struct {
	ChannelID      string           `json:"channelId"`
	DiscountValue  *PositiveDecimal `json:"discountValue"`
	MinAmountSpent *PositiveDecimal `json:"minAmountSpent"`
}

type VoucherChannelListingInput struct {
	AddChannels    []*VoucherChannelListingAddInput `json:"addChannels"`
	RemoveChannels []string                         `json:"removeChannels"`
}

type VoucherChannelListingUpdate struct {
	Voucher *Voucher         `json:"voucher"`
	Errors  []*DiscountError `json:"errors"`
}

type VoucherCountableConnection struct {
	PageInfo   *PageInfo               `json:"pageInfo"`
	Edges      []*VoucherCountableEdge `json:"edges"`
	TotalCount *int32                  `json:"totalCount"`
}

type VoucherCountableEdge struct {
	Node   *Voucher `json:"node"`
	Cursor string   `json:"cursor"`
}

type VoucherCreate struct {
	Errors  []*DiscountError `json:"errors"`
	Voucher *Voucher         `json:"voucher"`
}

type VoucherDelete struct {
	Errors  []*DiscountError `json:"errors"`
	Voucher *Voucher         `json:"voucher"`
}

type VoucherFilterInput struct {
	Status       []*DiscountStatusEnum  `json:"status"`
	TimesUsed    *IntRangeInput         `json:"timesUsed"`
	DiscountType []*VoucherDiscountType `json:"discountType"`
	Started      *DateTimeRangeInput    `json:"started"`
	Search       *string                `json:"search"`
	Metadata     []*MetadataFilter      `json:"metadata"`
}

type VoucherInput struct {
	Type                     *VoucherTypeEnum       `json:"type"`
	Name                     *string                `json:"name"`
	Code                     *string                `json:"code"`
	StartDate                *DateTime              `json:"startDate"`
	EndDate                  *DateTime              `json:"endDate"`
	DiscountValueType        *DiscountValueTypeEnum `json:"discountValueType"`
	Products                 []string               `json:"products"`
	Variants                 []string               `json:"variants"`
	Collections              []string               `json:"collections"`
	Categories               []string               `json:"categories"`
	MinCheckoutItemsQuantity *int32                 `json:"minCheckoutItemsQuantity"`
	Countries                []string               `json:"countries"`
	ApplyOncePerOrder        *bool                  `json:"applyOncePerOrder"`
	ApplyOncePerCustomer     *bool                  `json:"applyOncePerCustomer"`
	UsageLimit               *int32                 `json:"usageLimit"`
}

type VoucherRemoveCatalogues struct {
	Voucher *Voucher         `json:"voucher"`
	Errors  []*DiscountError `json:"errors"`
}

type VoucherSortingInput struct {
	Direction OrderDirection   `json:"direction"`
	Channel   *string          `json:"channel"`
	Field     VoucherSortField `json:"field"`
}

type VoucherTranslatableContent struct {
	ID          string              `json:"id"`
	Name        *string             `json:"name"`
	Translation *VoucherTranslation `json:"translation"`
}

type VoucherTranslate struct {
	Errors  []*TranslationError `json:"errors"`
	Voucher *Voucher            `json:"voucher"`
}

type VoucherTranslation struct {
	ID       string           `json:"id"`
	Name     *string          `json:"name"`
	Language *LanguageDisplay `json:"language"`
}

type VoucherUpdate struct {
	Errors  []*DiscountError `json:"errors"`
	Voucher *Voucher         `json:"voucher"`
}

type WarehouseCountableConnection struct {
	PageInfo   *PageInfo                 `json:"pageInfo"`
	Edges      []*WarehouseCountableEdge `json:"edges"`
	TotalCount *int32                    `json:"totalCount"`
}

type WarehouseCountableEdge struct {
	Node   *Warehouse `json:"node"`
	Cursor string     `json:"cursor"`
}

type WarehouseCreate struct {
	Errors    []*WarehouseError `json:"errors"`
	Warehouse *Warehouse        `json:"warehouse"`
}

type WarehouseCreateInput struct {
	Slug          *string       `json:"slug"`
	CompanyName   *string       `json:"companyName"`
	Email         *string       `json:"email"`
	Name          string        `json:"name"`
	Address       *AddressInput `json:"address"`
	ShippingZones []string      `json:"shippingZones"`
}

type WarehouseDelete struct {
	Errors    []*WarehouseError `json:"errors"`
	Warehouse *Warehouse        `json:"warehouse"`
}

type WarehouseError struct {
	Field   *string            `json:"field"`
	Message *string            `json:"message"`
	Code    WarehouseErrorCode `json:"code"`
}

type WarehouseFilterInput struct {
	ClickAndCollectOption *WarehouseClickAndCollectOptionEnum `json:"clickAndCollectOption"`
	Search                *string                             `json:"search"`
	Ids                   []string                            `json:"ids"`
	IsPrivate             *bool                               `json:"isPrivate"`
}

type WarehouseShippingZoneAssign struct {
	Errors    []*WarehouseError `json:"errors"`
	Warehouse *Warehouse        `json:"warehouse"`
}

type WarehouseShippingZoneUnassign struct {
	Errors    []*WarehouseError `json:"errors"`
	Warehouse *Warehouse        `json:"warehouse"`
}

type WarehouseSortingInput struct {
	Direction OrderDirection     `json:"direction"`
	Field     WarehouseSortField `json:"field"`
}

type WarehouseUpdate struct {
	Errors    []*WarehouseError `json:"errors"`
	Warehouse *Warehouse        `json:"warehouse"`
}

type WarehouseUpdateInput struct {
	Slug                  *string                             `json:"slug"`
	Email                 *string                             `json:"email"`
	Name                  *string                             `json:"name"`
	Address               *AddressInput                       `json:"address"`
	ClickAndCollectOption *WarehouseClickAndCollectOptionEnum `json:"clickAndCollectOption"`
	IsPrivate             *bool                               `json:"isPrivate"`
}

type Webhook struct {
	Name      string          `json:"name"`
	TargetURL string          `json:"targetUrl"`
	IsActive  bool            `json:"isActive"`
	SecretKey *string         `json:"secretKey"`
	ID        string          `json:"id"`
	Events    []*WebhookEvent `json:"events"`
	App       *App            `json:"app"`
}

type WebhookCreate struct {
	Errors  []*WebhookError `json:"errors"`
	Webhook *Webhook        `json:"webhook"`
}

type WebhookCreateInput struct {
	Name      *string                 `json:"name"`
	TargetURL *string                 `json:"targetUrl"`
	Events    []*WebhookEventTypeEnum `json:"events"`
	App       *string                 `json:"app"`
	IsActive  *bool                   `json:"isActive"`
	SecretKey *string                 `json:"secretKey"`
}

type WebhookDelete struct {
	Errors  []*WebhookError `json:"errors"`
	Webhook *Webhook        `json:"webhook"`
}

type WebhookError struct {
	Field   *string          `json:"field"`
	Message *string          `json:"message"`
	Code    WebhookErrorCode `json:"code"`
}

type WebhookEvent struct {
	EventType WebhookEventTypeEnum `json:"eventType"`
	Name      string               `json:"name"`
}

type WebhookUpdate struct {
	Errors  []*WebhookError `json:"errors"`
	Webhook *Webhook        `json:"webhook"`
}

type WebhookUpdateInput struct {
	Name      *string                 `json:"name"`
	TargetURL *string                 `json:"targetUrl"`
	Events    []*WebhookEventTypeEnum `json:"events"`
	App       *string                 `json:"app"`
	IsActive  *bool                   `json:"isActive"`
	SecretKey *string                 `json:"secretKey"`
}

type Weight struct {
	Unit  WeightUnitsEnum `json:"unit"`
	Value float64         `json:"value"`
}

type Wishlist struct {
	ID       string          `json:"id"`
	Token    string          `json:"token"`
	CreateAt DateTime        `json:"createAt"`
	Items    []*WishlistItem `json:"items"`
}

type WishlistItem struct {
	ID       string            `json:"id"`
	Product  *Product          `json:"product"`
	CreateAt DateTime          `json:"createAt"`
	Variants []*ProductVariant `json:"variants"`
}

type AccountErrorCode string

const (
	AccountErrorCodeActivateOwnAccount          AccountErrorCode = "ACTIVATE_OWN_ACCOUNT"
	AccountErrorCodeActivateSuperuserAccount    AccountErrorCode = "ACTIVATE_SUPERUSER_ACCOUNT"
	AccountErrorCodeDuplicatedInputItem         AccountErrorCode = "DUPLICATED_INPUT_ITEM"
	AccountErrorCodeDeactivateOwnAccount        AccountErrorCode = "DEACTIVATE_OWN_ACCOUNT"
	AccountErrorCodeDeactivateSuperuserAccount  AccountErrorCode = "DEACTIVATE_SUPERUSER_ACCOUNT"
	AccountErrorCodeDeleteNonStaffUser          AccountErrorCode = "DELETE_NON_STAFF_USER"
	AccountErrorCodeDeleteOwnAccount            AccountErrorCode = "DELETE_OWN_ACCOUNT"
	AccountErrorCodeDeleteStaffAccount          AccountErrorCode = "DELETE_STAFF_ACCOUNT"
	AccountErrorCodeDeleteSuperuserAccount      AccountErrorCode = "DELETE_SUPERUSER_ACCOUNT"
	AccountErrorCodeGraphqlError                AccountErrorCode = "GRAPHQL_ERROR"
	AccountErrorCodeInactive                    AccountErrorCode = "INACTIVE"
	AccountErrorCodeInvalid                     AccountErrorCode = "INVALID"
	AccountErrorCodeInvalidPassword             AccountErrorCode = "INVALID_PASSWORD"
	AccountErrorCodeLeftNotManageablePermission AccountErrorCode = "LEFT_NOT_MANAGEABLE_PERMISSION"
	AccountErrorCodeInvalidCredentials          AccountErrorCode = "INVALID_CREDENTIALS"
	AccountErrorCodeNotFound                    AccountErrorCode = "NOT_FOUND"
	AccountErrorCodeOutOfScopeUser              AccountErrorCode = "OUT_OF_SCOPE_USER"
	AccountErrorCodeOutOfScopeGroup             AccountErrorCode = "OUT_OF_SCOPE_GROUP"
	AccountErrorCodeOutOfScopePermission        AccountErrorCode = "OUT_OF_SCOPE_PERMISSION"
	AccountErrorCodePasswordEntirelyNumeric     AccountErrorCode = "PASSWORD_ENTIRELY_NUMERIC"
	AccountErrorCodePasswordTooCommon           AccountErrorCode = "PASSWORD_TOO_COMMON"
	AccountErrorCodePasswordTooShort            AccountErrorCode = "PASSWORD_TOO_SHORT"
	AccountErrorCodePasswordTooSimilar          AccountErrorCode = "PASSWORD_TOO_SIMILAR"
	AccountErrorCodeRequired                    AccountErrorCode = "REQUIRED"
	AccountErrorCodeUnique                      AccountErrorCode = "UNIQUE"
	AccountErrorCodeJwtSignatureExpired         AccountErrorCode = "JWT_SIGNATURE_EXPIRED"
	AccountErrorCodeJwtInvalidToken             AccountErrorCode = "JWT_INVALID_TOKEN"
	AccountErrorCodeJwtDecodeError              AccountErrorCode = "JWT_DECODE_ERROR"
	AccountErrorCodeJwtMissingToken             AccountErrorCode = "JWT_MISSING_TOKEN"
	AccountErrorCodeJwtInvalidCsrfToken         AccountErrorCode = "JWT_INVALID_CSRF_TOKEN"
	AccountErrorCodeChannelInactive             AccountErrorCode = "CHANNEL_INACTIVE"
	AccountErrorCodeMissingChannelSlug          AccountErrorCode = "MISSING_CHANNEL_SLUG"
)

func (e AccountErrorCode) IsValid() bool {
	switch e {
	case AccountErrorCodeActivateOwnAccount, AccountErrorCodeActivateSuperuserAccount, AccountErrorCodeDuplicatedInputItem, AccountErrorCodeDeactivateOwnAccount, AccountErrorCodeDeactivateSuperuserAccount, AccountErrorCodeDeleteNonStaffUser, AccountErrorCodeDeleteOwnAccount, AccountErrorCodeDeleteStaffAccount, AccountErrorCodeDeleteSuperuserAccount, AccountErrorCodeGraphqlError, AccountErrorCodeInactive, AccountErrorCodeInvalid, AccountErrorCodeInvalidPassword, AccountErrorCodeLeftNotManageablePermission, AccountErrorCodeInvalidCredentials, AccountErrorCodeNotFound, AccountErrorCodeOutOfScopeUser, AccountErrorCodeOutOfScopeGroup, AccountErrorCodeOutOfScopePermission, AccountErrorCodePasswordEntirelyNumeric, AccountErrorCodePasswordTooCommon, AccountErrorCodePasswordTooShort, AccountErrorCodePasswordTooSimilar, AccountErrorCodeRequired, AccountErrorCodeUnique, AccountErrorCodeJwtSignatureExpired, AccountErrorCodeJwtInvalidToken, AccountErrorCodeJwtDecodeError, AccountErrorCodeJwtMissingToken, AccountErrorCodeJwtInvalidCsrfToken, AccountErrorCodeChannelInactive, AccountErrorCodeMissingChannelSlug:
		return true
	}
	return false
}

type AddressTypeEnum string

const (
	AddressTypeEnumBilling  AddressTypeEnum = model.ADDRESS_TYPE_BILLING
	AddressTypeEnumShipping AddressTypeEnum = model.ADDRESS_TYPE_SHIPPING
)

func (e AddressTypeEnum) IsValid() bool {
	switch e {
	case AddressTypeEnumBilling, AddressTypeEnumShipping:
		return true
	}
	return false
}

type AppErrorCode string

const (
	AppErrorCodeForbidden              AppErrorCode = "FORBIDDEN"
	AppErrorCodeGraphqlError           AppErrorCode = "GRAPHQL_ERROR"
	AppErrorCodeInvalid                AppErrorCode = "INVALID"
	AppErrorCodeInvalidStatus          AppErrorCode = "INVALID_STATUS"
	AppErrorCodeInvalidPermission      AppErrorCode = "INVALID_PERMISSION"
	AppErrorCodeInvalidURLFormat       AppErrorCode = "INVALID_URL_FORMAT"
	AppErrorCodeInvalidManifestFormat  AppErrorCode = "INVALID_MANIFEST_FORMAT"
	AppErrorCodeManifestURLCantConnect AppErrorCode = "MANIFEST_URL_CANT_CONNECT"
	AppErrorCodeNotFound               AppErrorCode = "NOT_FOUND"
	AppErrorCodeRequired               AppErrorCode = "REQUIRED"
	AppErrorCodeUnique                 AppErrorCode = "UNIQUE"
	AppErrorCodeOutOfScopeApp          AppErrorCode = "OUT_OF_SCOPE_APP"
	AppErrorCodeOutOfScopePermission   AppErrorCode = "OUT_OF_SCOPE_PERMISSION"
)

func (e AppErrorCode) IsValid() bool {
	switch e {
	case AppErrorCodeForbidden, AppErrorCodeGraphqlError, AppErrorCodeInvalid, AppErrorCodeInvalidStatus, AppErrorCodeInvalidPermission, AppErrorCodeInvalidURLFormat, AppErrorCodeInvalidManifestFormat, AppErrorCodeManifestURLCantConnect, AppErrorCodeNotFound, AppErrorCodeRequired, AppErrorCodeUnique, AppErrorCodeOutOfScopeApp, AppErrorCodeOutOfScopePermission:
		return true
	}
	return false
}

type AppExtensionTargetEnum string

const (
	AppExtensionTargetEnumMoreActions AppExtensionTargetEnum = "MORE_ACTIONS"
	AppExtensionTargetEnumCreate      AppExtensionTargetEnum = "CREATE"
)

func (e AppExtensionTargetEnum) IsValid() bool {
	switch e {
	case AppExtensionTargetEnumMoreActions, AppExtensionTargetEnumCreate:
		return true
	}
	return false
}

type AppExtensionTypeEnum string

const (
	AppExtensionTypeEnumOverview AppExtensionTypeEnum = "OVERVIEW"
	AppExtensionTypeEnumDetails  AppExtensionTypeEnum = "DETAILS"
)

func (e AppExtensionTypeEnum) IsValid() bool {
	switch e {
	case AppExtensionTypeEnumOverview, AppExtensionTypeEnumDetails:
		return true
	}
	return false
}

type AppExtensionViewEnum string

const (
	AppExtensionViewEnumProduct AppExtensionViewEnum = "PRODUCT"
)

func (e AppExtensionViewEnum) IsValid() bool {
	switch e {
	case AppExtensionViewEnumProduct:
		return true
	}
	return false
}

type AppSortField string

const (
	AppSortFieldName         AppSortField = "NAME"
	AppSortFieldCreationDate AppSortField = "CREATION_DATE"
)

func (e AppSortField) IsValid() bool {
	switch e {
	case AppSortFieldName, AppSortFieldCreationDate:
		return true
	}
	return false
}

type AppTypeEnum string

const (
	AppTypeEnumLocal      AppTypeEnum = "LOCAL"
	AppTypeEnumThirdparty AppTypeEnum = "THIRDPARTY"
)

func (e AppTypeEnum) IsValid() bool {
	switch e {
	case AppTypeEnumLocal, AppTypeEnumThirdparty:
		return true
	}
	return false
}

type AreaUnitsEnum string

const (
	AreaUnitsEnumSqCm   AreaUnitsEnum = measurement.SQ_CM
	AreaUnitsEnumSqM    AreaUnitsEnum = measurement.SQ_M
	AreaUnitsEnumSqKm   AreaUnitsEnum = measurement.SQ_KM
	AreaUnitsEnumSqFt   AreaUnitsEnum = measurement.SQ_FT
	AreaUnitsEnumSqYd   AreaUnitsEnum = measurement.SQ_YD
	AreaUnitsEnumSqInch AreaUnitsEnum = measurement.SQ_INCH
)

func (e AreaUnitsEnum) IsValid() bool {
	switch e {
	case AreaUnitsEnumSqCm, AreaUnitsEnumSqM, AreaUnitsEnumSqKm, AreaUnitsEnumSqFt, AreaUnitsEnumSqYd, AreaUnitsEnumSqInch:
		return true
	}
	return false
}

type AttributeChoicesSortField string

const (
	AttributeChoicesSortFieldName AttributeChoicesSortField = "NAME"
	AttributeChoicesSortFieldSlug AttributeChoicesSortField = "SLUG"
)

func (e AttributeChoicesSortField) IsValid() bool {
	switch e {
	case AttributeChoicesSortFieldName, AttributeChoicesSortFieldSlug:
		return true
	}
	return false
}

type AttributeEntityTypeEnum string

const (
	AttributeEntityTypeEnumPage    AttributeEntityTypeEnum = model.PAGE
	AttributeEntityTypeEnumProduct AttributeEntityTypeEnum = model.PRODUCT
)

func (e AttributeEntityTypeEnum) IsValid() bool {
	switch e {
	case AttributeEntityTypeEnumPage, AttributeEntityTypeEnumProduct:
		return true
	}
	return false
}

type AttributeErrorCode string

const (
	AttributeErrorCodeAlreadyExists AttributeErrorCode = AttributeErrorCode(model.ALREADY_EXISTS)
	AttributeErrorCodeGraphqlError  AttributeErrorCode = AttributeErrorCode(model.GRAPHQL_ERROR)
	AttributeErrorCodeInvalid       AttributeErrorCode = AttributeErrorCode(model.INVALID)
	AttributeErrorCodeNotFound      AttributeErrorCode = AttributeErrorCode(model.NOT_FOUND)
	AttributeErrorCodeRequired      AttributeErrorCode = AttributeErrorCode(model.REQUIRED)
	AttributeErrorCodeUnique        AttributeErrorCode = AttributeErrorCode(model.UNIQUE)
)

func (e AttributeErrorCode) IsValid() bool {
	switch e {
	case AttributeErrorCodeAlreadyExists, AttributeErrorCodeGraphqlError, AttributeErrorCodeInvalid, AttributeErrorCodeNotFound, AttributeErrorCodeRequired, AttributeErrorCodeUnique:
		return true
	}
	return false
}

type AttributeInputTypeEnum string

const (
	AttributeInputTypeEnumDropdown    AttributeInputTypeEnum = AttributeInputTypeEnum(model.DROPDOWN)
	AttributeInputTypeEnumMultiselect AttributeInputTypeEnum = AttributeInputTypeEnum(model.MULTISELECT)
	AttributeInputTypeEnumFile        AttributeInputTypeEnum = AttributeInputTypeEnum(model.FILE)
	AttributeInputTypeEnumReference   AttributeInputTypeEnum = AttributeInputTypeEnum(model.REFERENCE)
	AttributeInputTypeEnumNumeric     AttributeInputTypeEnum = AttributeInputTypeEnum(model.NUMERIC)
	AttributeInputTypeEnumRichText    AttributeInputTypeEnum = AttributeInputTypeEnum(model.RICH_TEXT)
	AttributeInputTypeEnumSwatch      AttributeInputTypeEnum = AttributeInputTypeEnum(model.SWATCH)
	AttributeInputTypeEnumBoolean     AttributeInputTypeEnum = AttributeInputTypeEnum(model.BOOLEAN)
	AttributeInputTypeEnumDate        AttributeInputTypeEnum = AttributeInputTypeEnum(model.DATE)
	AttributeInputTypeEnumDateTime    AttributeInputTypeEnum = AttributeInputTypeEnum(model.DATE_TIME)
)

func (e AttributeInputTypeEnum) IsValid() bool {
	switch e {
	case AttributeInputTypeEnumDropdown, AttributeInputTypeEnumMultiselect, AttributeInputTypeEnumFile, AttributeInputTypeEnumReference, AttributeInputTypeEnumNumeric, AttributeInputTypeEnumRichText, AttributeInputTypeEnumSwatch, AttributeInputTypeEnumBoolean, AttributeInputTypeEnumDate, AttributeInputTypeEnumDateTime:
		return true
	}
	return false
}

type AttributeSortField string

const (
	AttributeSortFieldName                     AttributeSortField = "NAME"
	AttributeSortFieldSlug                     AttributeSortField = "SLUG"
	AttributeSortFieldValueRequired            AttributeSortField = "VALUE_REQUIRED"
	AttributeSortFieldIsVariantOnly            AttributeSortField = "IS_VARIANT_ONLY"
	AttributeSortFieldVisibleInStorefront      AttributeSortField = "VISIBLE_IN_STOREFRONT"
	AttributeSortFieldFilterableInStorefront   AttributeSortField = "FILTERABLE_IN_STOREFRONT"
	AttributeSortFieldFilterableInDashboard    AttributeSortField = "FILTERABLE_IN_DASHBOARD"
	AttributeSortFieldStorefrontSearchPosition AttributeSortField = "STOREFRONT_SEARCH_POSITION"
	AttributeSortFieldAvailableInGrid          AttributeSortField = "AVAILABLE_IN_GRID"
)

func (e AttributeSortField) IsValid() bool {
	switch e {
	case AttributeSortFieldName, AttributeSortFieldSlug, AttributeSortFieldValueRequired, AttributeSortFieldIsVariantOnly, AttributeSortFieldVisibleInStorefront, AttributeSortFieldFilterableInStorefront, AttributeSortFieldFilterableInDashboard, AttributeSortFieldStorefrontSearchPosition, AttributeSortFieldAvailableInGrid:
		return true
	}
	return false
}

type AttributeTypeEnum string

const (
	AttributeTypeEnumProductType AttributeTypeEnum = model.PRODUCT_TYPE
	AttributeTypeEnumPageType    AttributeTypeEnum = model.PAGE_TYPE
)

func (e AttributeTypeEnum) IsValid() bool {
	switch e {
	case AttributeTypeEnumProductType, AttributeTypeEnumPageType:
		return true
	}
	return false
}

type CategorySortField string

const (
	CategorySortFieldName             CategorySortField = "NAME"
	CategorySortFieldProductCount     CategorySortField = "PRODUCT_COUNT"
	CategorySortFieldSubcategoryCount CategorySortField = "SUBCATEGORY_COUNT"
)

func (e CategorySortField) IsValid() bool {
	switch e {
	case CategorySortFieldName, CategorySortFieldProductCount, CategorySortFieldSubcategoryCount:
		return true
	}
	return false
}

type ChannelErrorCode string

const (
	ChannelErrorCodeAlreadyExists                 ChannelErrorCode = "ALREADY_EXISTS"
	ChannelErrorCodeGraphqlError                  ChannelErrorCode = "GRAPHQL_ERROR"
	ChannelErrorCodeInvalid                       ChannelErrorCode = "INVALID"
	ChannelErrorCodeNotFound                      ChannelErrorCode = "NOT_FOUND"
	ChannelErrorCodeRequired                      ChannelErrorCode = "REQUIRED"
	ChannelErrorCodeUnique                        ChannelErrorCode = "UNIQUE"
	ChannelErrorCodeChannelsCurrencyMustBeTheSame ChannelErrorCode = "CHANNELS_CURRENCY_MUST_BE_THE_SAME"
	ChannelErrorCodeChannelWithOrders             ChannelErrorCode = "CHANNEL_WITH_ORDERS"
	ChannelErrorCodeDuplicatedInputItem           ChannelErrorCode = "DUPLICATED_INPUT_ITEM"
)

func (e ChannelErrorCode) IsValid() bool {
	switch e {
	case ChannelErrorCodeAlreadyExists, ChannelErrorCodeGraphqlError, ChannelErrorCodeInvalid, ChannelErrorCodeNotFound, ChannelErrorCodeRequired, ChannelErrorCodeUnique, ChannelErrorCodeChannelsCurrencyMustBeTheSame, ChannelErrorCodeChannelWithOrders, ChannelErrorCodeDuplicatedInputItem:
		return true
	}
	return false
}

type CheckoutErrorCode string

const (
	CheckoutErrorCodeBillingAddressNotSet          CheckoutErrorCode = "BILLING_ADDRESS_NOT_SET"
	CheckoutErrorCodeCheckoutNotFullyPaid          CheckoutErrorCode = "CHECKOUT_NOT_FULLY_PAID"
	CheckoutErrorCodeGraphqlError                  CheckoutErrorCode = "GRAPHQL_ERROR"
	CheckoutErrorCodeProductNotPublished           CheckoutErrorCode = "PRODUCT_NOT_PUBLISHED"
	CheckoutErrorCodeProductUnavailableForPurchase CheckoutErrorCode = "PRODUCT_UNAVAILABLE_FOR_PURCHASE"
	CheckoutErrorCodeInsufficientStock             CheckoutErrorCode = "INSUFFICIENT_STOCK"
	CheckoutErrorCodeInvalid                       CheckoutErrorCode = "INVALID"
	CheckoutErrorCodeInvalidShippingMethod         CheckoutErrorCode = "INVALID_SHIPPING_METHOD"
	CheckoutErrorCodeNotFound                      CheckoutErrorCode = "NOT_FOUND"
	CheckoutErrorCodePaymentError                  CheckoutErrorCode = "PAYMENT_ERROR"
	CheckoutErrorCodeQuantityGreaterThanLimit      CheckoutErrorCode = "QUANTITY_GREATER_THAN_LIMIT"
	CheckoutErrorCodeRequired                      CheckoutErrorCode = "REQUIRED"
	CheckoutErrorCodeShippingAddressNotSet         CheckoutErrorCode = "SHIPPING_ADDRESS_NOT_SET"
	CheckoutErrorCodeShippingMethodNotApplicable   CheckoutErrorCode = "SHIPPING_METHOD_NOT_APPLICABLE"
	CheckoutErrorCodeDeliveryMethodNotApplicable   CheckoutErrorCode = "DELIVERY_METHOD_NOT_APPLICABLE"
	CheckoutErrorCodeShippingMethodNotSet          CheckoutErrorCode = "SHIPPING_METHOD_NOT_SET"
	CheckoutErrorCodeShippingNotRequired           CheckoutErrorCode = "SHIPPING_NOT_REQUIRED"
	CheckoutErrorCodeTaxError                      CheckoutErrorCode = "TAX_ERROR"
	CheckoutErrorCodeUnique                        CheckoutErrorCode = "UNIQUE"
	CheckoutErrorCodeVoucherNotApplicable          CheckoutErrorCode = "VOUCHER_NOT_APPLICABLE"
	CheckoutErrorCodeGiftCardNotApplicable         CheckoutErrorCode = "GIFT_CARD_NOT_APPLICABLE"
	CheckoutErrorCodeZeroQuantity                  CheckoutErrorCode = "ZERO_QUANTITY"
	CheckoutErrorCodeMissingChannelSlug            CheckoutErrorCode = "MISSING_CHANNEL_SLUG"
	CheckoutErrorCodeChannelInactive               CheckoutErrorCode = "CHANNEL_INACTIVE"
	CheckoutErrorCodeUnavailableVariantInChannel   CheckoutErrorCode = "UNAVAILABLE_VARIANT_IN_CHANNEL"
)

func (e CheckoutErrorCode) IsValid() bool {
	switch e {
	case CheckoutErrorCodeBillingAddressNotSet, CheckoutErrorCodeCheckoutNotFullyPaid, CheckoutErrorCodeGraphqlError, CheckoutErrorCodeProductNotPublished, CheckoutErrorCodeProductUnavailableForPurchase, CheckoutErrorCodeInsufficientStock, CheckoutErrorCodeInvalid, CheckoutErrorCodeInvalidShippingMethod, CheckoutErrorCodeNotFound, CheckoutErrorCodePaymentError, CheckoutErrorCodeQuantityGreaterThanLimit, CheckoutErrorCodeRequired, CheckoutErrorCodeShippingAddressNotSet, CheckoutErrorCodeShippingMethodNotApplicable, CheckoutErrorCodeDeliveryMethodNotApplicable, CheckoutErrorCodeShippingMethodNotSet, CheckoutErrorCodeShippingNotRequired, CheckoutErrorCodeTaxError, CheckoutErrorCodeUnique, CheckoutErrorCodeVoucherNotApplicable, CheckoutErrorCodeGiftCardNotApplicable, CheckoutErrorCodeZeroQuantity, CheckoutErrorCodeMissingChannelSlug, CheckoutErrorCodeChannelInactive, CheckoutErrorCodeUnavailableVariantInChannel:
		return true
	}
	return false
}

type CollectionErrorCode string

const (
	CollectionErrorCodeDuplicatedInputItem               CollectionErrorCode = "DUPLICATED_INPUT_ITEM"
	CollectionErrorCodeGraphqlError                      CollectionErrorCode = "GRAPHQL_ERROR"
	CollectionErrorCodeInvalid                           CollectionErrorCode = "INVALID"
	CollectionErrorCodeNotFound                          CollectionErrorCode = "NOT_FOUND"
	CollectionErrorCodeRequired                          CollectionErrorCode = "REQUIRED"
	CollectionErrorCodeUnique                            CollectionErrorCode = "UNIQUE"
	CollectionErrorCodeCannotManageProductWithoutVariant CollectionErrorCode = "CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT"
)

func (e CollectionErrorCode) IsValid() bool {
	switch e {
	case CollectionErrorCodeDuplicatedInputItem, CollectionErrorCodeGraphqlError, CollectionErrorCodeInvalid, CollectionErrorCodeNotFound, CollectionErrorCodeRequired, CollectionErrorCodeUnique, CollectionErrorCodeCannotManageProductWithoutVariant:
		return true
	}
	return false
}

type CollectionPublished string

const (
	CollectionPublishedPublished CollectionPublished = "PUBLISHED"
	CollectionPublishedHidden    CollectionPublished = "HIDDEN"
)

func (e CollectionPublished) IsValid() bool {
	switch e {
	case CollectionPublishedPublished, CollectionPublishedHidden:
		return true
	}
	return false
}

type CollectionSortField string

const (
	CollectionSortFieldName            CollectionSortField = "NAME"
	CollectionSortFieldAvailability    CollectionSortField = "AVAILABILITY"
	CollectionSortFieldProductCount    CollectionSortField = "PRODUCT_COUNT"
	CollectionSortFieldPublicationDate CollectionSortField = "PUBLICATION_DATE"
)

func (e CollectionSortField) IsValid() bool {
	switch e {
	case CollectionSortFieldName, CollectionSortFieldAvailability, CollectionSortFieldProductCount, CollectionSortFieldPublicationDate:
		return true
	}
	return false
}

type ConfigurationTypeFieldEnum string

const (
	ConfigurationTypeFieldEnumString          ConfigurationTypeFieldEnum = "STRING"
	ConfigurationTypeFieldEnumMultiline       ConfigurationTypeFieldEnum = "MULTILINE"
	ConfigurationTypeFieldEnumBoolean         ConfigurationTypeFieldEnum = "BOOLEAN"
	ConfigurationTypeFieldEnumSecret          ConfigurationTypeFieldEnum = "SECRET"
	ConfigurationTypeFieldEnumPassword        ConfigurationTypeFieldEnum = "PASSWORD"
	ConfigurationTypeFieldEnumSecretmultiline ConfigurationTypeFieldEnum = "SECRETMULTILINE"
	ConfigurationTypeFieldEnumOutput          ConfigurationTypeFieldEnum = "OUTPUT"
)

func (e ConfigurationTypeFieldEnum) IsValid() bool {
	switch e {
	case ConfigurationTypeFieldEnumString, ConfigurationTypeFieldEnumMultiline, ConfigurationTypeFieldEnumBoolean, ConfigurationTypeFieldEnumSecret, ConfigurationTypeFieldEnumPassword, ConfigurationTypeFieldEnumSecretmultiline, ConfigurationTypeFieldEnumOutput:
		return true
	}
	return false
}

type CountryCode string

const (
	CountryCodeAf     CountryCode = "AF"
	CountryCodeAx     CountryCode = "AX"
	CountryCodeAl     CountryCode = "AL"
	CountryCodeDz     CountryCode = "DZ"
	CountryCodeAs     CountryCode = "AS"
	CountryCodeAd     CountryCode = "AD"
	CountryCodeAo     CountryCode = "AO"
	CountryCodeAi     CountryCode = "AI"
	CountryCodeAq     CountryCode = "AQ"
	CountryCodeAg     CountryCode = "AG"
	CountryCodeAr     CountryCode = "AR"
	CountryCodeAm     CountryCode = "AM"
	CountryCodeAw     CountryCode = "AW"
	CountryCodeAu     CountryCode = "AU"
	CountryCodeAt     CountryCode = "AT"
	CountryCodeAz     CountryCode = "AZ"
	CountryCodeBs     CountryCode = "BS"
	CountryCodeBh     CountryCode = "BH"
	CountryCodeBd     CountryCode = "BD"
	CountryCodeBb     CountryCode = "BB"
	CountryCodeBy     CountryCode = "BY"
	CountryCodeBe     CountryCode = "BE"
	CountryCodeBz     CountryCode = "BZ"
	CountryCodeBj     CountryCode = "BJ"
	CountryCodeBm     CountryCode = "BM"
	CountryCodeBt     CountryCode = "BT"
	CountryCodeBo     CountryCode = "BO"
	CountryCodeBq     CountryCode = "BQ"
	CountryCodeBa     CountryCode = "BA"
	CountryCodeBw     CountryCode = "BW"
	CountryCodeBv     CountryCode = "BV"
	CountryCodeBr     CountryCode = "BR"
	CountryCodeIo     CountryCode = "IO"
	CountryCodeBn     CountryCode = "BN"
	CountryCodeBg     CountryCode = "BG"
	CountryCodeBf     CountryCode = "BF"
	CountryCodeBi     CountryCode = "BI"
	CountryCodeCv     CountryCode = "CV"
	CountryCodeKh     CountryCode = "KH"
	CountryCodeCm     CountryCode = "CM"
	CountryCodeCa     CountryCode = "CA"
	CountryCodeKy     CountryCode = "KY"
	CountryCodeCf     CountryCode = "CF"
	CountryCodeTd     CountryCode = "TD"
	CountryCodeCl     CountryCode = "CL"
	CountryCodeCn     CountryCode = "CN"
	CountryCodeCx     CountryCode = "CX"
	CountryCodeCc     CountryCode = "CC"
	CountryCodeCo     CountryCode = "CO"
	CountryCodeKm     CountryCode = "KM"
	CountryCodeCg     CountryCode = "CG"
	CountryCodeCd     CountryCode = "CD"
	CountryCodeCk     CountryCode = "CK"
	CountryCodeCr     CountryCode = "CR"
	CountryCodeCi     CountryCode = "CI"
	CountryCodeHr     CountryCode = "HR"
	CountryCodeCu     CountryCode = "CU"
	CountryCodeCw     CountryCode = "CW"
	CountryCodeCy     CountryCode = "CY"
	CountryCodeCz     CountryCode = "CZ"
	CountryCodeDk     CountryCode = "DK"
	CountryCodeDj     CountryCode = "DJ"
	CountryCodeDm     CountryCode = "DM"
	CountryCodeDo     CountryCode = "DO"
	CountryCodeEc     CountryCode = "EC"
	CountryCodeEg     CountryCode = "EG"
	CountryCodeSv     CountryCode = "SV"
	CountryCodeGq     CountryCode = "GQ"
	CountryCodeEr     CountryCode = "ER"
	CountryCodeEe     CountryCode = "EE"
	CountryCodeSz     CountryCode = "SZ"
	CountryCodeEt     CountryCode = "ET"
	CountryCodeEu     CountryCode = "EU"
	CountryCodeFk     CountryCode = "FK"
	CountryCodeFo     CountryCode = "FO"
	CountryCodeFj     CountryCode = "FJ"
	CountryCodeFi     CountryCode = "FI"
	CountryCodeFr     CountryCode = "FR"
	CountryCodeGf     CountryCode = "GF"
	CountryCodePf     CountryCode = "PF"
	CountryCodeTf     CountryCode = "TF"
	CountryCodeGa     CountryCode = "GA"
	CountryCodeGm     CountryCode = "GM"
	CountryCodeGe     CountryCode = "GE"
	CountryCodeDe     CountryCode = "DE"
	CountryCodeGh     CountryCode = "GH"
	CountryCodeGi     CountryCode = "GI"
	CountryCodeGr     CountryCode = "GR"
	CountryCodeGl     CountryCode = "GL"
	CountryCodeGd     CountryCode = "GD"
	CountryCodeGp     CountryCode = "GP"
	CountryCodeGu     CountryCode = "GU"
	CountryCodeGt     CountryCode = "GT"
	CountryCodeGg     CountryCode = "GG"
	CountryCodeGn     CountryCode = "GN"
	CountryCodeGw     CountryCode = "GW"
	CountryCodeGy     CountryCode = "GY"
	CountryCodeHt     CountryCode = "HT"
	CountryCodeHm     CountryCode = "HM"
	CountryCodeVa     CountryCode = "VA"
	CountryCodeHn     CountryCode = "HN"
	CountryCodeHk     CountryCode = "HK"
	CountryCodeHu     CountryCode = "HU"
	CountryCodeIs     CountryCode = "IS"
	CountryCodeIn     CountryCode = "IN"
	CountryCodeString CountryCode = "String"
	CountryCodeIr     CountryCode = "IR"
	CountryCodeIq     CountryCode = "IQ"
	CountryCodeIe     CountryCode = "IE"
	CountryCodeIm     CountryCode = "IM"
	CountryCodeIl     CountryCode = "IL"
	CountryCodeIt     CountryCode = "IT"
	CountryCodeJm     CountryCode = "JM"
	CountryCodeJp     CountryCode = "JP"
	CountryCodeJe     CountryCode = "JE"
	CountryCodeJo     CountryCode = "JO"
	CountryCodeKz     CountryCode = "KZ"
	CountryCodeKe     CountryCode = "KE"
	CountryCodeKi     CountryCode = "KI"
	CountryCodeKw     CountryCode = "KW"
	CountryCodeKg     CountryCode = "KG"
	CountryCodeLa     CountryCode = "LA"
	CountryCodeLv     CountryCode = "LV"
	CountryCodeLb     CountryCode = "LB"
	CountryCodeLs     CountryCode = "LS"
	CountryCodeLr     CountryCode = "LR"
	CountryCodeLy     CountryCode = "LY"
	CountryCodeLi     CountryCode = "LI"
	CountryCodeLt     CountryCode = "LT"
	CountryCodeLu     CountryCode = "LU"
	CountryCodeMo     CountryCode = "MO"
	CountryCodeMg     CountryCode = "MG"
	CountryCodeMw     CountryCode = "MW"
	CountryCodeMy     CountryCode = "MY"
	CountryCodeMv     CountryCode = "MV"
	CountryCodeMl     CountryCode = "ML"
	CountryCodeMt     CountryCode = "MT"
	CountryCodeMh     CountryCode = "MH"
	CountryCodeMq     CountryCode = "MQ"
	CountryCodeMr     CountryCode = "MR"
	CountryCodeMu     CountryCode = "MU"
	CountryCodeYt     CountryCode = "YT"
	CountryCodeMx     CountryCode = "MX"
	CountryCodeFm     CountryCode = "FM"
	CountryCodeMd     CountryCode = "MD"
	CountryCodeMc     CountryCode = "MC"
	CountryCodeMn     CountryCode = "MN"
	CountryCodeMe     CountryCode = "ME"
	CountryCodeMs     CountryCode = "MS"
	CountryCodeMa     CountryCode = "MA"
	CountryCodeMz     CountryCode = "MZ"
	CountryCodeMm     CountryCode = "MM"
	CountryCodeNa     CountryCode = "NA"
	CountryCodeNr     CountryCode = "NR"
	CountryCodeNp     CountryCode = "NP"
	CountryCodeNl     CountryCode = "NL"
	CountryCodeNc     CountryCode = "NC"
	CountryCodeNz     CountryCode = "NZ"
	CountryCodeNi     CountryCode = "NI"
	CountryCodeNe     CountryCode = "NE"
	CountryCodeNg     CountryCode = "NG"
	CountryCodeNu     CountryCode = "NU"
	CountryCodeNf     CountryCode = "NF"
	CountryCodeKp     CountryCode = "KP"
	CountryCodeMk     CountryCode = "MK"
	CountryCodeMp     CountryCode = "MP"
	CountryCodeNo     CountryCode = "NO"
	CountryCodeOm     CountryCode = "OM"
	CountryCodePk     CountryCode = "PK"
	CountryCodePw     CountryCode = "PW"
	CountryCodePs     CountryCode = "PS"
	CountryCodePa     CountryCode = "PA"
	CountryCodePg     CountryCode = "PG"
	CountryCodePy     CountryCode = "PY"
	CountryCodePe     CountryCode = "PE"
	CountryCodePh     CountryCode = "PH"
	CountryCodePn     CountryCode = "PN"
	CountryCodePl     CountryCode = "PL"
	CountryCodePt     CountryCode = "PT"
	CountryCodePr     CountryCode = "PR"
	CountryCodeQa     CountryCode = "QA"
	CountryCodeRe     CountryCode = "RE"
	CountryCodeRo     CountryCode = "RO"
	CountryCodeRu     CountryCode = "RU"
	CountryCodeRw     CountryCode = "RW"
	CountryCodeBl     CountryCode = "BL"
	CountryCodeSh     CountryCode = "SH"
	CountryCodeKn     CountryCode = "KN"
	CountryCodeLc     CountryCode = "LC"
	CountryCodeMf     CountryCode = "MF"
	CountryCodePm     CountryCode = "PM"
	CountryCodeVc     CountryCode = "VC"
	CountryCodeWs     CountryCode = "WS"
	CountryCodeSm     CountryCode = "SM"
	CountryCodeSt     CountryCode = "ST"
	CountryCodeSa     CountryCode = "SA"
	CountryCodeSn     CountryCode = "SN"
	CountryCodeRs     CountryCode = "RS"
	CountryCodeSc     CountryCode = "SC"
	CountryCodeSl     CountryCode = "SL"
	CountryCodeSg     CountryCode = "SG"
	CountryCodeSx     CountryCode = "SX"
	CountryCodeSk     CountryCode = "SK"
	CountryCodeSi     CountryCode = "SI"
	CountryCodeSb     CountryCode = "SB"
	CountryCodeSo     CountryCode = "SO"
	CountryCodeZa     CountryCode = "ZA"
	CountryCodeGs     CountryCode = "GS"
	CountryCodeKr     CountryCode = "KR"
	CountryCodeSs     CountryCode = "SS"
	CountryCodeEs     CountryCode = "ES"
	CountryCodeLk     CountryCode = "LK"
	CountryCodeSd     CountryCode = "SD"
	CountryCodeSr     CountryCode = "SR"
	CountryCodeSj     CountryCode = "SJ"
	CountryCodeSe     CountryCode = "SE"
	CountryCodeCh     CountryCode = "CH"
	CountryCodeSy     CountryCode = "SY"
	CountryCodeTw     CountryCode = "TW"
	CountryCodeTj     CountryCode = "TJ"
	CountryCodeTz     CountryCode = "TZ"
	CountryCodeTh     CountryCode = "TH"
	CountryCodeTl     CountryCode = "TL"
	CountryCodeTg     CountryCode = "TG"
	CountryCodeTk     CountryCode = "TK"
	CountryCodeTo     CountryCode = "TO"
	CountryCodeTt     CountryCode = "TT"
	CountryCodeTn     CountryCode = "TN"
	CountryCodeTr     CountryCode = "TR"
	CountryCodeTm     CountryCode = "TM"
	CountryCodeTc     CountryCode = "TC"
	CountryCodeTv     CountryCode = "TV"
	CountryCodeUg     CountryCode = "UG"
	CountryCodeUa     CountryCode = "UA"
	CountryCodeAe     CountryCode = "AE"
	CountryCodeGb     CountryCode = "GB"
	CountryCodeUm     CountryCode = "UM"
	CountryCodeUs     CountryCode = "US"
	CountryCodeUy     CountryCode = "UY"
	CountryCodeUz     CountryCode = "UZ"
	CountryCodeVu     CountryCode = "VU"
	CountryCodeVe     CountryCode = "VE"
	CountryCodeVn     CountryCode = "VN"
	CountryCodeVg     CountryCode = "VG"
	CountryCodeVi     CountryCode = "VI"
	CountryCodeWf     CountryCode = "WF"
	CountryCodeEh     CountryCode = "EH"
	CountryCodeYe     CountryCode = "YE"
	CountryCodeZm     CountryCode = "ZM"
	CountryCodeZw     CountryCode = "ZW"
)

func (e CountryCode) IsValid() bool {
	switch e {
	case CountryCodeAf, CountryCodeAx, CountryCodeAl, CountryCodeDz, CountryCodeAs, CountryCodeAd, CountryCodeAo, CountryCodeAi, CountryCodeAq, CountryCodeAg, CountryCodeAr, CountryCodeAm, CountryCodeAw, CountryCodeAu, CountryCodeAt, CountryCodeAz, CountryCodeBs, CountryCodeBh, CountryCodeBd, CountryCodeBb, CountryCodeBy, CountryCodeBe, CountryCodeBz, CountryCodeBj, CountryCodeBm, CountryCodeBt, CountryCodeBo, CountryCodeBq, CountryCodeBa, CountryCodeBw, CountryCodeBv, CountryCodeBr, CountryCodeIo, CountryCodeBn, CountryCodeBg, CountryCodeBf, CountryCodeBi, CountryCodeCv, CountryCodeKh, CountryCodeCm, CountryCodeCa, CountryCodeKy, CountryCodeCf, CountryCodeTd, CountryCodeCl, CountryCodeCn, CountryCodeCx, CountryCodeCc, CountryCodeCo, CountryCodeKm, CountryCodeCg, CountryCodeCd, CountryCodeCk, CountryCodeCr, CountryCodeCi, CountryCodeHr, CountryCodeCu, CountryCodeCw, CountryCodeCy, CountryCodeCz, CountryCodeDk, CountryCodeDj, CountryCodeDm, CountryCodeDo, CountryCodeEc, CountryCodeEg, CountryCodeSv, CountryCodeGq, CountryCodeEr, CountryCodeEe, CountryCodeSz, CountryCodeEt, CountryCodeEu, CountryCodeFk, CountryCodeFo, CountryCodeFj, CountryCodeFi, CountryCodeFr, CountryCodeGf, CountryCodePf, CountryCodeTf, CountryCodeGa, CountryCodeGm, CountryCodeGe, CountryCodeDe, CountryCodeGh, CountryCodeGi, CountryCodeGr, CountryCodeGl, CountryCodeGd, CountryCodeGp, CountryCodeGu, CountryCodeGt, CountryCodeGg, CountryCodeGn, CountryCodeGw, CountryCodeGy, CountryCodeHt, CountryCodeHm, CountryCodeVa, CountryCodeHn, CountryCodeHk, CountryCodeHu, CountryCodeIs, CountryCodeIn, CountryCodeString, CountryCodeIr, CountryCodeIq, CountryCodeIe, CountryCodeIm, CountryCodeIl, CountryCodeIt, CountryCodeJm, CountryCodeJp, CountryCodeJe, CountryCodeJo, CountryCodeKz, CountryCodeKe, CountryCodeKi, CountryCodeKw, CountryCodeKg, CountryCodeLa, CountryCodeLv, CountryCodeLb, CountryCodeLs, CountryCodeLr, CountryCodeLy, CountryCodeLi, CountryCodeLt, CountryCodeLu, CountryCodeMo, CountryCodeMg, CountryCodeMw, CountryCodeMy, CountryCodeMv, CountryCodeMl, CountryCodeMt, CountryCodeMh, CountryCodeMq, CountryCodeMr, CountryCodeMu, CountryCodeYt, CountryCodeMx, CountryCodeFm, CountryCodeMd, CountryCodeMc, CountryCodeMn, CountryCodeMe, CountryCodeMs, CountryCodeMa, CountryCodeMz, CountryCodeMm, CountryCodeNa, CountryCodeNr, CountryCodeNp, CountryCodeNl, CountryCodeNc, CountryCodeNz, CountryCodeNi, CountryCodeNe, CountryCodeNg, CountryCodeNu, CountryCodeNf, CountryCodeKp, CountryCodeMk, CountryCodeMp, CountryCodeNo, CountryCodeOm, CountryCodePk, CountryCodePw, CountryCodePs, CountryCodePa, CountryCodePg, CountryCodePy, CountryCodePe, CountryCodePh, CountryCodePn, CountryCodePl, CountryCodePt, CountryCodePr, CountryCodeQa, CountryCodeRe, CountryCodeRo, CountryCodeRu, CountryCodeRw, CountryCodeBl, CountryCodeSh, CountryCodeKn, CountryCodeLc, CountryCodeMf, CountryCodePm, CountryCodeVc, CountryCodeWs, CountryCodeSm, CountryCodeSt, CountryCodeSa, CountryCodeSn, CountryCodeRs, CountryCodeSc, CountryCodeSl, CountryCodeSg, CountryCodeSx, CountryCodeSk, CountryCodeSi, CountryCodeSb, CountryCodeSo, CountryCodeZa, CountryCodeGs, CountryCodeKr, CountryCodeSs, CountryCodeEs, CountryCodeLk, CountryCodeSd, CountryCodeSr, CountryCodeSj, CountryCodeSe, CountryCodeCh, CountryCodeSy, CountryCodeTw, CountryCodeTj, CountryCodeTz, CountryCodeTh, CountryCodeTl, CountryCodeTg, CountryCodeTk, CountryCodeTo, CountryCodeTt, CountryCodeTn, CountryCodeTr, CountryCodeTm, CountryCodeTc, CountryCodeTv, CountryCodeUg, CountryCodeUa, CountryCodeAe, CountryCodeGb, CountryCodeUm, CountryCodeUs, CountryCodeUy, CountryCodeUz, CountryCodeVu, CountryCodeVe, CountryCodeVn, CountryCodeVg, CountryCodeVi, CountryCodeWf, CountryCodeEh, CountryCodeYe, CountryCodeZm, CountryCodeZw:
		return true
	}
	return false
}

type CustomerEventsEnum string

const (
	CustomerEventsEnumAccountCreated        CustomerEventsEnum = "ACCOUNT_CREATED"
	CustomerEventsEnumPasswordResetLinkSent CustomerEventsEnum = "PASSWORD_RESET_LINK_SENT"
	CustomerEventsEnumPasswordReset         CustomerEventsEnum = "PASSWORD_RESET"
	CustomerEventsEnumEmailChangedRequest   CustomerEventsEnum = "EMAIL_CHANGED_REQUEST"
	CustomerEventsEnumPasswordChanged       CustomerEventsEnum = "PASSWORD_CHANGED"
	CustomerEventsEnumEmailChanged          CustomerEventsEnum = "EMAIL_CHANGED"
	CustomerEventsEnumPlacedOrder           CustomerEventsEnum = "PLACED_ORDER"
	CustomerEventsEnumNoteAddedToOrder      CustomerEventsEnum = "NOTE_ADDED_TO_ORDER"
	CustomerEventsEnumDigitalLinkDownloaded CustomerEventsEnum = "DIGITAL_LINK_DOWNLOADED"
	CustomerEventsEnumCustomerDeleted       CustomerEventsEnum = "CUSTOMER_DELETED"
	CustomerEventsEnumNameAssigned          CustomerEventsEnum = "NAME_ASSIGNED"
	CustomerEventsEnumEmailAssigned         CustomerEventsEnum = "EMAIL_ASSIGNED"
	CustomerEventsEnumNoteAdded             CustomerEventsEnum = "NOTE_ADDED"
)

func (e CustomerEventsEnum) IsValid() bool {
	switch e {
	case CustomerEventsEnumAccountCreated, CustomerEventsEnumPasswordResetLinkSent, CustomerEventsEnumPasswordReset, CustomerEventsEnumEmailChangedRequest, CustomerEventsEnumPasswordChanged, CustomerEventsEnumEmailChanged, CustomerEventsEnumPlacedOrder, CustomerEventsEnumNoteAddedToOrder, CustomerEventsEnumDigitalLinkDownloaded, CustomerEventsEnumCustomerDeleted, CustomerEventsEnumNameAssigned, CustomerEventsEnumEmailAssigned, CustomerEventsEnumNoteAdded:
		return true
	}
	return false
}

type DiscountErrorCode string

const (
	DiscountErrorCodeAlreadyExists                     DiscountErrorCode = "ALREADY_EXISTS"
	DiscountErrorCodeGraphqlError                      DiscountErrorCode = "GRAPHQL_ERROR"
	DiscountErrorCodeInvalid                           DiscountErrorCode = "INVALID"
	DiscountErrorCodeNotFound                          DiscountErrorCode = "NOT_FOUND"
	DiscountErrorCodeRequired                          DiscountErrorCode = "REQUIRED"
	DiscountErrorCodeUnique                            DiscountErrorCode = "UNIQUE"
	DiscountErrorCodeCannotManageProductWithoutVariant DiscountErrorCode = "CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT"
	DiscountErrorCodeDuplicatedInputItem               DiscountErrorCode = "DUPLICATED_INPUT_ITEM"
)

func (e DiscountErrorCode) IsValid() bool {
	switch e {
	case DiscountErrorCodeAlreadyExists, DiscountErrorCodeGraphqlError, DiscountErrorCodeInvalid, DiscountErrorCodeNotFound, DiscountErrorCodeRequired, DiscountErrorCodeUnique, DiscountErrorCodeCannotManageProductWithoutVariant, DiscountErrorCodeDuplicatedInputItem:
		return true
	}
	return false
}

type DiscountStatusEnum string

const (
	DiscountStatusEnumActive    DiscountStatusEnum = "ACTIVE"
	DiscountStatusEnumExpired   DiscountStatusEnum = "EXPIRED"
	DiscountStatusEnumScheduled DiscountStatusEnum = "SCHEDULED"
)

func (e DiscountStatusEnum) IsValid() bool {
	switch e {
	case DiscountStatusEnumActive, DiscountStatusEnumExpired, DiscountStatusEnumScheduled:
		return true
	}
	return false
}

type DiscountValueTypeEnum string

const (
	DiscountValueTypeEnumFixed      DiscountValueTypeEnum = model.FIXED
	DiscountValueTypeEnumPercentage DiscountValueTypeEnum = model.PERCENTAGE
)

func (e DiscountValueTypeEnum) IsValid() bool {
	switch e {
	case DiscountValueTypeEnumFixed, DiscountValueTypeEnumPercentage:
		return true
	}
	return false
}

type DistanceUnitsEnum string

const (
	DistanceUnitsEnumCm   DistanceUnitsEnum = DistanceUnitsEnum(measurement.CM)
	DistanceUnitsEnumM    DistanceUnitsEnum = DistanceUnitsEnum(measurement.M)
	DistanceUnitsEnumKm   DistanceUnitsEnum = DistanceUnitsEnum(measurement.KM)
	DistanceUnitsEnumFt   DistanceUnitsEnum = DistanceUnitsEnum(measurement.FT)
	DistanceUnitsEnumYd   DistanceUnitsEnum = DistanceUnitsEnum(measurement.YD)
	DistanceUnitsEnumInch DistanceUnitsEnum = DistanceUnitsEnum(measurement.INCH)
)

func (e DistanceUnitsEnum) IsValid() bool {
	switch e {
	case DistanceUnitsEnumCm, DistanceUnitsEnumM, DistanceUnitsEnumKm, DistanceUnitsEnumFt, DistanceUnitsEnumYd, DistanceUnitsEnumInch:
		return true
	}
	return false
}

type ExportEventsEnum string

const (
	ExportEventsEnumExportPending        ExportEventsEnum = model.EXPORT_PENDING
	ExportEventsEnumExportSuccess        ExportEventsEnum = model.EXPORT_SUCCESS
	ExportEventsEnumExportFailed         ExportEventsEnum = model.EXPORT_FAILED
	ExportEventsEnumExportDeleted        ExportEventsEnum = model.EXPORT_DELETED
	ExportEventsEnumExportedFileSent     ExportEventsEnum = model.EXPORTED_FILE_SENT
	ExportEventsEnumExportFailedInfoSent ExportEventsEnum = model.EXPORT_FAILED_INFO_SENT
)

func (e ExportEventsEnum) IsValid() bool {
	switch e {
	case ExportEventsEnumExportPending, ExportEventsEnumExportSuccess, ExportEventsEnumExportFailed, ExportEventsEnumExportDeleted, ExportEventsEnumExportedFileSent, ExportEventsEnumExportFailedInfoSent:
		return true
	}
	return false
}

type ExportFileSortField string

const (
	ExportFileSortFieldStatus    ExportFileSortField = "STATUS"
	ExportFileSortFieldCreatedAt ExportFileSortField = "CREATED_AT"
	ExportFileSortFieldUpdatedAt ExportFileSortField = "UPDATED_AT"
)

func (e ExportFileSortField) IsValid() bool {
	switch e {
	case ExportFileSortFieldStatus, ExportFileSortFieldCreatedAt, ExportFileSortFieldUpdatedAt:
		return true
	}
	return false
}

type ExportScope string

const (
	ExportScopeAll    ExportScope = "ALL"
	ExportScopeIDS    ExportScope = "IDS"
	ExportScopeFilter ExportScope = "FILTER"
)

func (e ExportScope) IsValid() bool {
	switch e {
	case ExportScopeAll, ExportScopeIDS, ExportScopeFilter:
		return true
	}
	return false
}

type ExternalNotificationErrorCodes string

const (
	ExternalNotificationErrorCodesRequired         ExternalNotificationErrorCodes = "REQUIRED"
	ExternalNotificationErrorCodesInvalidModelType ExternalNotificationErrorCodes = "INVALID_MODEL_TYPE"
	ExternalNotificationErrorCodesNotFound         ExternalNotificationErrorCodes = "NOT_FOUND"
	ExternalNotificationErrorCodesChannelInactive  ExternalNotificationErrorCodes = "CHANNEL_INACTIVE"
)

func (e ExternalNotificationErrorCodes) IsValid() bool {
	switch e {
	case ExternalNotificationErrorCodesRequired, ExternalNotificationErrorCodesInvalidModelType, ExternalNotificationErrorCodesNotFound, ExternalNotificationErrorCodesChannelInactive:
		return true
	}
	return false
}

type FileTypesEnum string

const (
	FileTypesEnumCSV  FileTypesEnum = "csv"
	FileTypesEnumXlsx FileTypesEnum = "xlsx"
)

func (e FileTypesEnum) IsValid() bool {
	switch e {
	case FileTypesEnumCSV, FileTypesEnumXlsx:
		return true
	}
	return false
}

type FulfillmentStatus string

const (
	FulfillmentStatusFulfilled           FulfillmentStatus = FulfillmentStatus(model.FULFILLMENT_FULFILLED)
	FulfillmentStatusRefunded            FulfillmentStatus = FulfillmentStatus(model.FULFILLMENT_REFUNDED)
	FulfillmentStatusReturned            FulfillmentStatus = FulfillmentStatus(model.FULFILLMENT_RETURNED)
	FulfillmentStatusReplaced            FulfillmentStatus = FulfillmentStatus(model.FULFILLMENT_REPLACED)
	FulfillmentStatusRefundedAndReturned FulfillmentStatus = FulfillmentStatus(model.FULFILLMENT_REFUNDED_AND_RETURNED)
	FulfillmentStatusCanceled            FulfillmentStatus = FulfillmentStatus(model.FULFILLMENT_CANCELED)
	FulfillmentStatusWaitingForApproval  FulfillmentStatus = FulfillmentStatus(model.FULFILLMENT_WAITING_FOR_APPROVAL)
)

func (e FulfillmentStatus) IsValid() bool {
	switch e {
	case FulfillmentStatusFulfilled, FulfillmentStatusRefunded, FulfillmentStatusReturned, FulfillmentStatusReplaced, FulfillmentStatusRefundedAndReturned, FulfillmentStatusCanceled, FulfillmentStatusWaitingForApproval:
		return true
	}
	return false
}

type GiftCardErrorCode string

const (
	GiftCardErrorCodeAlreadyExists GiftCardErrorCode = "ALREADY_EXISTS"
	GiftCardErrorCodeGraphqlError  GiftCardErrorCode = "GRAPHQL_ERROR"
	GiftCardErrorCodeInvalid       GiftCardErrorCode = "INVALID"
	GiftCardErrorCodeNotFound      GiftCardErrorCode = "NOT_FOUND"
	GiftCardErrorCodeRequired      GiftCardErrorCode = "REQUIRED"
	GiftCardErrorCodeUnique        GiftCardErrorCode = "UNIQUE"
)

func (e GiftCardErrorCode) IsValid() bool {
	switch e {
	case GiftCardErrorCodeAlreadyExists, GiftCardErrorCodeGraphqlError, GiftCardErrorCodeInvalid, GiftCardErrorCodeNotFound, GiftCardErrorCodeRequired, GiftCardErrorCodeUnique:
		return true
	}
	return false
}

type GiftCardEventsEnum = model.GiftcardEventType

const (
	GiftCardEventsEnumIssued            GiftCardEventsEnum = model.ISSUED
	GiftCardEventsEnumBought            GiftCardEventsEnum = model.BOUGHT
	GiftCardEventsEnumUpdated           GiftCardEventsEnum = model.UPDATED
	GiftCardEventsEnumActivated         GiftCardEventsEnum = model.ACTIVATED
	GiftCardEventsEnumDeactivated       GiftCardEventsEnum = model.DEACTIVATED
	GiftCardEventsEnumBalanceReset      GiftCardEventsEnum = model.BALANCE_RESET
	GiftCardEventsEnumExpiryDateUpdated GiftCardEventsEnum = model.EXPIRY_DATE_UPDATED
	GiftCardEventsEnumTagUpdated        GiftCardEventsEnum = model.TAG_UPDATED
	GiftCardEventsEnumSentToCustomer    GiftCardEventsEnum = model.SENT_TO_CUSTOMER
	GiftCardEventsEnumResent            GiftCardEventsEnum = model.RESENT
	GiftCardEventsEnumNoteAdded         GiftCardEventsEnum = model.NOTE_ADDED_
	GiftCardEventsEnumUsedInOrder       GiftCardEventsEnum = model.USED_IN_ORDER
)

// func (e GiftCardEventsEnum) IsValid() bool {
// 	switch e {
// 	case GiftCardEventsEnumIssued, GiftCardEventsEnumBought, GiftCardEventsEnumUpdated, GiftCardEventsEnumActivated, GiftCardEventsEnumDeactivated, GiftCardEventsEnumBalanceReset, GiftCardEventsEnumExpiryDateUpdated, GiftCardEventsEnumTagUpdated, GiftCardEventsEnumSentToCustomer, GiftCardEventsEnumResent, GiftCardEventsEnumNoteAdded, GiftCardEventsEnumUsedInOrder:
// 		return true
// 	}
// 	return false
// }

type GiftCardSettingsErrorCode string

const (
	GiftCardSettingsErrorCodeInvalid      GiftCardSettingsErrorCode = "INVALID"
	GiftCardSettingsErrorCodeRequired     GiftCardSettingsErrorCode = "REQUIRED"
	GiftCardSettingsErrorCodeGraphqlError GiftCardSettingsErrorCode = "GRAPHQL_ERROR"
)

func (e GiftCardSettingsErrorCode) IsValid() bool {
	switch e {
	case GiftCardSettingsErrorCodeInvalid, GiftCardSettingsErrorCodeRequired, GiftCardSettingsErrorCodeGraphqlError:
		return true
	}
	return false
}

type GiftCardSettingsExpiryTypeEnum string

const (
	GiftCardSettingsExpiryTypeEnumNeverExpire  GiftCardSettingsExpiryTypeEnum = GiftCardSettingsExpiryTypeEnum(model.NEVER_EXPIRE)
	GiftCardSettingsExpiryTypeEnumExpiryPeriod GiftCardSettingsExpiryTypeEnum = GiftCardSettingsExpiryTypeEnum(model.EXPIRY_PERIOD)
)

func (e GiftCardSettingsExpiryTypeEnum) IsValid() bool {
	switch e {
	case GiftCardSettingsExpiryTypeEnumNeverExpire, GiftCardSettingsExpiryTypeEnumExpiryPeriod:
		return true
	}
	return false
}

type GiftCardSortField string

const (
	GiftCardSortFieldTag            GiftCardSortField = "TAG"
	GiftCardSortFieldProduct        GiftCardSortField = "PRODUCT"
	GiftCardSortFieldUsedBy         GiftCardSortField = "USED_BY"
	GiftCardSortFieldCurrentBalance GiftCardSortField = "CURRENT_BALANCE"
)

func (e GiftCardSortField) IsValid() bool {
	switch e {
	case GiftCardSortFieldTag, GiftCardSortFieldProduct, GiftCardSortFieldUsedBy, GiftCardSortFieldCurrentBalance:
		return true
	}
	return false
}

type InvoiceErrorCode string

const (
	InvoiceErrorCodeRequired      InvoiceErrorCode = "REQUIRED"
	InvoiceErrorCodeNotReady      InvoiceErrorCode = "NOT_READY"
	InvoiceErrorCodeURLNotSet     InvoiceErrorCode = "URL_NOT_SET"
	InvoiceErrorCodeEmailNotSet   InvoiceErrorCode = "EMAIL_NOT_SET"
	InvoiceErrorCodeNumberNotSet  InvoiceErrorCode = "NUMBER_NOT_SET"
	InvoiceErrorCodeNotFound      InvoiceErrorCode = "NOT_FOUND"
	InvoiceErrorCodeInvalidStatus InvoiceErrorCode = "INVALID_STATUS"
)

func (e InvoiceErrorCode) IsValid() bool {
	switch e {
	case InvoiceErrorCodeRequired, InvoiceErrorCodeNotReady, InvoiceErrorCodeURLNotSet, InvoiceErrorCodeEmailNotSet, InvoiceErrorCodeNumberNotSet, InvoiceErrorCodeNotFound, InvoiceErrorCodeInvalidStatus:
		return true
	}
	return false
}

type JobStatusEnum string

const (
	JobStatusEnumPending JobStatusEnum = "PENDING"
	JobStatusEnumSuccess JobStatusEnum = "SUCCESS"
	JobStatusEnumFailed  JobStatusEnum = "FAILED"
	JobStatusEnumDeleted JobStatusEnum = "DELETED"
)

func (e JobStatusEnum) IsValid() bool {
	switch e {
	case JobStatusEnumPending, JobStatusEnumSuccess, JobStatusEnumFailed, JobStatusEnumDeleted:
		return true
	}
	return false
}

type LanguageCodeEnum string

const (
	LanguageCodeEnumAf           LanguageCodeEnum = "AF"
	LanguageCodeEnumAfNa         LanguageCodeEnum = "AF_NA"
	LanguageCodeEnumAfZa         LanguageCodeEnum = "AF_ZA"
	LanguageCodeEnumAgq          LanguageCodeEnum = "AGQ"
	LanguageCodeEnumAgqCm        LanguageCodeEnum = "AGQ_CM"
	LanguageCodeEnumAk           LanguageCodeEnum = "AK"
	LanguageCodeEnumAkGh         LanguageCodeEnum = "AK_GH"
	LanguageCodeEnumAm           LanguageCodeEnum = "AM"
	LanguageCodeEnumAmEt         LanguageCodeEnum = "AM_ET"
	LanguageCodeEnumAr           LanguageCodeEnum = "AR"
	LanguageCodeEnumArAe         LanguageCodeEnum = "AR_AE"
	LanguageCodeEnumArBh         LanguageCodeEnum = "AR_BH"
	LanguageCodeEnumArDj         LanguageCodeEnum = "AR_DJ"
	LanguageCodeEnumArDz         LanguageCodeEnum = "AR_DZ"
	LanguageCodeEnumArEg         LanguageCodeEnum = "AR_EG"
	LanguageCodeEnumArEh         LanguageCodeEnum = "AR_EH"
	LanguageCodeEnumArEr         LanguageCodeEnum = "AR_ER"
	LanguageCodeEnumArIl         LanguageCodeEnum = "AR_IL"
	LanguageCodeEnumArIq         LanguageCodeEnum = "AR_IQ"
	LanguageCodeEnumArJo         LanguageCodeEnum = "AR_JO"
	LanguageCodeEnumArKm         LanguageCodeEnum = "AR_KM"
	LanguageCodeEnumArKw         LanguageCodeEnum = "AR_KW"
	LanguageCodeEnumArLb         LanguageCodeEnum = "AR_LB"
	LanguageCodeEnumArLy         LanguageCodeEnum = "AR_LY"
	LanguageCodeEnumArMa         LanguageCodeEnum = "AR_MA"
	LanguageCodeEnumArMr         LanguageCodeEnum = "AR_MR"
	LanguageCodeEnumArOm         LanguageCodeEnum = "AR_OM"
	LanguageCodeEnumArPs         LanguageCodeEnum = "AR_PS"
	LanguageCodeEnumArQa         LanguageCodeEnum = "AR_QA"
	LanguageCodeEnumArSa         LanguageCodeEnum = "AR_SA"
	LanguageCodeEnumArSd         LanguageCodeEnum = "AR_SD"
	LanguageCodeEnumArSo         LanguageCodeEnum = "AR_SO"
	LanguageCodeEnumArSs         LanguageCodeEnum = "AR_SS"
	LanguageCodeEnumArSy         LanguageCodeEnum = "AR_SY"
	LanguageCodeEnumArTd         LanguageCodeEnum = "AR_TD"
	LanguageCodeEnumArTn         LanguageCodeEnum = "AR_TN"
	LanguageCodeEnumArYe         LanguageCodeEnum = "AR_YE"
	LanguageCodeEnumAs           LanguageCodeEnum = "AS"
	LanguageCodeEnumAsIn         LanguageCodeEnum = "AS_IN"
	LanguageCodeEnumAsa          LanguageCodeEnum = "ASA"
	LanguageCodeEnumAsaTz        LanguageCodeEnum = "ASA_TZ"
	LanguageCodeEnumAst          LanguageCodeEnum = "AST"
	LanguageCodeEnumAstEs        LanguageCodeEnum = "AST_ES"
	LanguageCodeEnumAz           LanguageCodeEnum = "AZ"
	LanguageCodeEnumAzCyrl       LanguageCodeEnum = "AZ_CYRL"
	LanguageCodeEnumAzCyrlAz     LanguageCodeEnum = "AZ_CYRL_AZ"
	LanguageCodeEnumAzLatn       LanguageCodeEnum = "AZ_LATN"
	LanguageCodeEnumAzLatnAz     LanguageCodeEnum = "AZ_LATN_AZ"
	LanguageCodeEnumBas          LanguageCodeEnum = "BAS"
	LanguageCodeEnumBasCm        LanguageCodeEnum = "BAS_CM"
	LanguageCodeEnumBe           LanguageCodeEnum = "BE"
	LanguageCodeEnumBeBy         LanguageCodeEnum = "BE_BY"
	LanguageCodeEnumBem          LanguageCodeEnum = "BEM"
	LanguageCodeEnumBemZm        LanguageCodeEnum = "BEM_ZM"
	LanguageCodeEnumBez          LanguageCodeEnum = "BEZ"
	LanguageCodeEnumBezTz        LanguageCodeEnum = "BEZ_TZ"
	LanguageCodeEnumBg           LanguageCodeEnum = "BG"
	LanguageCodeEnumBgBg         LanguageCodeEnum = "BG_BG"
	LanguageCodeEnumBm           LanguageCodeEnum = "BM"
	LanguageCodeEnumBmMl         LanguageCodeEnum = "BM_ML"
	LanguageCodeEnumBn           LanguageCodeEnum = "BN"
	LanguageCodeEnumBnBd         LanguageCodeEnum = "BN_BD"
	LanguageCodeEnumBnIn         LanguageCodeEnum = "BN_IN"
	LanguageCodeEnumBo           LanguageCodeEnum = "BO"
	LanguageCodeEnumBoCn         LanguageCodeEnum = "BO_CN"
	LanguageCodeEnumBoIn         LanguageCodeEnum = "BO_IN"
	LanguageCodeEnumBr           LanguageCodeEnum = "BR"
	LanguageCodeEnumBrFr         LanguageCodeEnum = "BR_FR"
	LanguageCodeEnumBrx          LanguageCodeEnum = "BRX"
	LanguageCodeEnumBrxIn        LanguageCodeEnum = "BRX_IN"
	LanguageCodeEnumBs           LanguageCodeEnum = "BS"
	LanguageCodeEnumBsCyrl       LanguageCodeEnum = "BS_CYRL"
	LanguageCodeEnumBsCyrlBa     LanguageCodeEnum = "BS_CYRL_BA"
	LanguageCodeEnumBsLatn       LanguageCodeEnum = "BS_LATN"
	LanguageCodeEnumBsLatnBa     LanguageCodeEnum = "BS_LATN_BA"
	LanguageCodeEnumCa           LanguageCodeEnum = "CA"
	LanguageCodeEnumCaAd         LanguageCodeEnum = "CA_AD"
	LanguageCodeEnumCaEs         LanguageCodeEnum = "CA_ES"
	LanguageCodeEnumCaEsValencia LanguageCodeEnum = "CA_ES_VALENCIA"
	LanguageCodeEnumCaFr         LanguageCodeEnum = "CA_FR"
	LanguageCodeEnumCaIt         LanguageCodeEnum = "CA_IT"
	LanguageCodeEnumCcp          LanguageCodeEnum = "CCP"
	LanguageCodeEnumCcpBd        LanguageCodeEnum = "CCP_BD"
	LanguageCodeEnumCcpIn        LanguageCodeEnum = "CCP_IN"
	LanguageCodeEnumCe           LanguageCodeEnum = "CE"
	LanguageCodeEnumCeRu         LanguageCodeEnum = "CE_RU"
	LanguageCodeEnumCeb          LanguageCodeEnum = "CEB"
	LanguageCodeEnumCebPh        LanguageCodeEnum = "CEB_PH"
	LanguageCodeEnumCgg          LanguageCodeEnum = "CGG"
	LanguageCodeEnumCggUg        LanguageCodeEnum = "CGG_UG"
	LanguageCodeEnumChr          LanguageCodeEnum = "CHR"
	LanguageCodeEnumChrUs        LanguageCodeEnum = "CHR_US"
	LanguageCodeEnumCkb          LanguageCodeEnum = "CKB"
	LanguageCodeEnumCkbIq        LanguageCodeEnum = "CKB_IQ"
	LanguageCodeEnumCkbIr        LanguageCodeEnum = "CKB_IR"
	LanguageCodeEnumCs           LanguageCodeEnum = "CS"
	LanguageCodeEnumCsCz         LanguageCodeEnum = "CS_CZ"
	LanguageCodeEnumCu           LanguageCodeEnum = "CU"
	LanguageCodeEnumCuRu         LanguageCodeEnum = "CU_RU"
	LanguageCodeEnumCy           LanguageCodeEnum = "CY"
	LanguageCodeEnumCyGb         LanguageCodeEnum = "CY_GB"
	LanguageCodeEnumDa           LanguageCodeEnum = "DA"
	LanguageCodeEnumDaDk         LanguageCodeEnum = "DA_DK"
	LanguageCodeEnumDaGl         LanguageCodeEnum = "DA_GL"
	LanguageCodeEnumDav          LanguageCodeEnum = "DAV"
	LanguageCodeEnumDavKe        LanguageCodeEnum = "DAV_KE"
	LanguageCodeEnumDe           LanguageCodeEnum = "DE"
	LanguageCodeEnumDeAt         LanguageCodeEnum = "DE_AT"
	LanguageCodeEnumDeBe         LanguageCodeEnum = "DE_BE"
	LanguageCodeEnumDeCh         LanguageCodeEnum = "DE_CH"
	LanguageCodeEnumDeDe         LanguageCodeEnum = "DE_DE"
	LanguageCodeEnumDeIt         LanguageCodeEnum = "DE_IT"
	LanguageCodeEnumDeLi         LanguageCodeEnum = "DE_LI"
	LanguageCodeEnumDeLu         LanguageCodeEnum = "DE_LU"
	LanguageCodeEnumDje          LanguageCodeEnum = "DJE"
	LanguageCodeEnumDjeNe        LanguageCodeEnum = "DJE_NE"
	LanguageCodeEnumDsb          LanguageCodeEnum = "DSB"
	LanguageCodeEnumDsbDe        LanguageCodeEnum = "DSB_DE"
	LanguageCodeEnumDua          LanguageCodeEnum = "DUA"
	LanguageCodeEnumDuaCm        LanguageCodeEnum = "DUA_CM"
	LanguageCodeEnumDyo          LanguageCodeEnum = "DYO"
	LanguageCodeEnumDyoSn        LanguageCodeEnum = "DYO_SN"
	LanguageCodeEnumDz           LanguageCodeEnum = "DZ"
	LanguageCodeEnumDzBt         LanguageCodeEnum = "DZ_BT"
	LanguageCodeEnumEbu          LanguageCodeEnum = "EBU"
	LanguageCodeEnumEbuKe        LanguageCodeEnum = "EBU_KE"
	LanguageCodeEnumEe           LanguageCodeEnum = "EE"
	LanguageCodeEnumEeGh         LanguageCodeEnum = "EE_GH"
	LanguageCodeEnumEeTg         LanguageCodeEnum = "EE_TG"
	LanguageCodeEnumEl           LanguageCodeEnum = "EL"
	LanguageCodeEnumElCy         LanguageCodeEnum = "EL_CY"
	LanguageCodeEnumElGr         LanguageCodeEnum = "EL_GR"
	LanguageCodeEnumEn           LanguageCodeEnum = "EN"
	LanguageCodeEnumEnAe         LanguageCodeEnum = "EN_AE"
	LanguageCodeEnumEnAg         LanguageCodeEnum = "EN_AG"
	LanguageCodeEnumEnAi         LanguageCodeEnum = "EN_AI"
	LanguageCodeEnumEnAs         LanguageCodeEnum = "EN_AS"
	LanguageCodeEnumEnAt         LanguageCodeEnum = "EN_AT"
	LanguageCodeEnumEnAu         LanguageCodeEnum = "EN_AU"
	LanguageCodeEnumEnBb         LanguageCodeEnum = "EN_BB"
	LanguageCodeEnumEnBe         LanguageCodeEnum = "EN_BE"
	LanguageCodeEnumEnBi         LanguageCodeEnum = "EN_BI"
	LanguageCodeEnumEnBm         LanguageCodeEnum = "EN_BM"
	LanguageCodeEnumEnBs         LanguageCodeEnum = "EN_BS"
	LanguageCodeEnumEnBw         LanguageCodeEnum = "EN_BW"
	LanguageCodeEnumEnBz         LanguageCodeEnum = "EN_BZ"
	LanguageCodeEnumEnCa         LanguageCodeEnum = "EN_CA"
	LanguageCodeEnumEnCc         LanguageCodeEnum = "EN_CC"
	LanguageCodeEnumEnCh         LanguageCodeEnum = "EN_CH"
	LanguageCodeEnumEnCk         LanguageCodeEnum = "EN_CK"
	LanguageCodeEnumEnCm         LanguageCodeEnum = "EN_CM"
	LanguageCodeEnumEnCx         LanguageCodeEnum = "EN_CX"
	LanguageCodeEnumEnCy         LanguageCodeEnum = "EN_CY"
	LanguageCodeEnumEnDe         LanguageCodeEnum = "EN_DE"
	LanguageCodeEnumEnDg         LanguageCodeEnum = "EN_DG"
	LanguageCodeEnumEnDk         LanguageCodeEnum = "EN_DK"
	LanguageCodeEnumEnDm         LanguageCodeEnum = "EN_DM"
	LanguageCodeEnumEnEr         LanguageCodeEnum = "EN_ER"
	LanguageCodeEnumEnFi         LanguageCodeEnum = "EN_FI"
	LanguageCodeEnumEnFj         LanguageCodeEnum = "EN_FJ"
	LanguageCodeEnumEnFk         LanguageCodeEnum = "EN_FK"
	LanguageCodeEnumEnFm         LanguageCodeEnum = "EN_FM"
	LanguageCodeEnumEnGb         LanguageCodeEnum = "EN_GB"
	LanguageCodeEnumEnGd         LanguageCodeEnum = "EN_GD"
	LanguageCodeEnumEnGg         LanguageCodeEnum = "EN_GG"
	LanguageCodeEnumEnGh         LanguageCodeEnum = "EN_GH"
	LanguageCodeEnumEnGi         LanguageCodeEnum = "EN_GI"
	LanguageCodeEnumEnGm         LanguageCodeEnum = "EN_GM"
	LanguageCodeEnumEnGu         LanguageCodeEnum = "EN_GU"
	LanguageCodeEnumEnGy         LanguageCodeEnum = "EN_GY"
	LanguageCodeEnumEnHk         LanguageCodeEnum = "EN_HK"
	LanguageCodeEnumEnIe         LanguageCodeEnum = "EN_IE"
	LanguageCodeEnumEnIl         LanguageCodeEnum = "EN_IL"
	LanguageCodeEnumEnIm         LanguageCodeEnum = "EN_IM"
	LanguageCodeEnumEnIn         LanguageCodeEnum = "EN_IN"
	LanguageCodeEnumEnIo         LanguageCodeEnum = "EN_IO"
	LanguageCodeEnumEnJe         LanguageCodeEnum = "EN_JE"
	LanguageCodeEnumEnJm         LanguageCodeEnum = "EN_JM"
	LanguageCodeEnumEnKe         LanguageCodeEnum = "EN_KE"
	LanguageCodeEnumEnKi         LanguageCodeEnum = "EN_KI"
	LanguageCodeEnumEnKn         LanguageCodeEnum = "EN_KN"
	LanguageCodeEnumEnKy         LanguageCodeEnum = "EN_KY"
	LanguageCodeEnumEnLc         LanguageCodeEnum = "EN_LC"
	LanguageCodeEnumEnLr         LanguageCodeEnum = "EN_LR"
	LanguageCodeEnumEnLs         LanguageCodeEnum = "EN_LS"
	LanguageCodeEnumEnMg         LanguageCodeEnum = "EN_MG"
	LanguageCodeEnumEnMh         LanguageCodeEnum = "EN_MH"
	LanguageCodeEnumEnMo         LanguageCodeEnum = "EN_MO"
	LanguageCodeEnumEnMp         LanguageCodeEnum = "EN_MP"
	LanguageCodeEnumEnMs         LanguageCodeEnum = "EN_MS"
	LanguageCodeEnumEnMt         LanguageCodeEnum = "EN_MT"
	LanguageCodeEnumEnMu         LanguageCodeEnum = "EN_MU"
	LanguageCodeEnumEnMw         LanguageCodeEnum = "EN_MW"
	LanguageCodeEnumEnMy         LanguageCodeEnum = "EN_MY"
	LanguageCodeEnumEnNa         LanguageCodeEnum = "EN_NA"
	LanguageCodeEnumEnNf         LanguageCodeEnum = "EN_NF"
	LanguageCodeEnumEnNg         LanguageCodeEnum = "EN_NG"
	LanguageCodeEnumEnNl         LanguageCodeEnum = "EN_NL"
	LanguageCodeEnumEnNr         LanguageCodeEnum = "EN_NR"
	LanguageCodeEnumEnNu         LanguageCodeEnum = "EN_NU"
	LanguageCodeEnumEnNz         LanguageCodeEnum = "EN_NZ"
	LanguageCodeEnumEnPg         LanguageCodeEnum = "EN_PG"
	LanguageCodeEnumEnPh         LanguageCodeEnum = "EN_PH"
	LanguageCodeEnumEnPk         LanguageCodeEnum = "EN_PK"
	LanguageCodeEnumEnPn         LanguageCodeEnum = "EN_PN"
	LanguageCodeEnumEnPr         LanguageCodeEnum = "EN_PR"
	LanguageCodeEnumEnPw         LanguageCodeEnum = "EN_PW"
	LanguageCodeEnumEnRw         LanguageCodeEnum = "EN_RW"
	LanguageCodeEnumEnSb         LanguageCodeEnum = "EN_SB"
	LanguageCodeEnumEnSc         LanguageCodeEnum = "EN_SC"
	LanguageCodeEnumEnSd         LanguageCodeEnum = "EN_SD"
	LanguageCodeEnumEnSe         LanguageCodeEnum = "EN_SE"
	LanguageCodeEnumEnSg         LanguageCodeEnum = "EN_SG"
	LanguageCodeEnumEnSh         LanguageCodeEnum = "EN_SH"
	LanguageCodeEnumEnSi         LanguageCodeEnum = "EN_SI"
	LanguageCodeEnumEnSl         LanguageCodeEnum = "EN_SL"
	LanguageCodeEnumEnSs         LanguageCodeEnum = "EN_SS"
	LanguageCodeEnumEnSx         LanguageCodeEnum = "EN_SX"
	LanguageCodeEnumEnSz         LanguageCodeEnum = "EN_SZ"
	LanguageCodeEnumEnTc         LanguageCodeEnum = "EN_TC"
	LanguageCodeEnumEnTk         LanguageCodeEnum = "EN_TK"
	LanguageCodeEnumEnTo         LanguageCodeEnum = "EN_TO"
	LanguageCodeEnumEnTt         LanguageCodeEnum = "EN_TT"
	LanguageCodeEnumEnTv         LanguageCodeEnum = "EN_TV"
	LanguageCodeEnumEnTz         LanguageCodeEnum = "EN_TZ"
	LanguageCodeEnumEnUg         LanguageCodeEnum = "EN_UG"
	LanguageCodeEnumEnUm         LanguageCodeEnum = "EN_UM"
	LanguageCodeEnumEnUs         LanguageCodeEnum = "EN_US"
	LanguageCodeEnumEnVc         LanguageCodeEnum = "EN_VC"
	LanguageCodeEnumEnVg         LanguageCodeEnum = "EN_VG"
	LanguageCodeEnumEnVi         LanguageCodeEnum = "EN_VI"
	LanguageCodeEnumEnVu         LanguageCodeEnum = "EN_VU"
	LanguageCodeEnumEnWs         LanguageCodeEnum = "EN_WS"
	LanguageCodeEnumEnZa         LanguageCodeEnum = "EN_ZA"
	LanguageCodeEnumEnZm         LanguageCodeEnum = "EN_ZM"
	LanguageCodeEnumEnZw         LanguageCodeEnum = "EN_ZW"
	LanguageCodeEnumEo           LanguageCodeEnum = "EO"
	LanguageCodeEnumEs           LanguageCodeEnum = "ES"
	LanguageCodeEnumEsAr         LanguageCodeEnum = "ES_AR"
	LanguageCodeEnumEsBo         LanguageCodeEnum = "ES_BO"
	LanguageCodeEnumEsBr         LanguageCodeEnum = "ES_BR"
	LanguageCodeEnumEsBz         LanguageCodeEnum = "ES_BZ"
	LanguageCodeEnumEsCl         LanguageCodeEnum = "ES_CL"
	LanguageCodeEnumEsCo         LanguageCodeEnum = "ES_CO"
	LanguageCodeEnumEsCr         LanguageCodeEnum = "ES_CR"
	LanguageCodeEnumEsCu         LanguageCodeEnum = "ES_CU"
	LanguageCodeEnumEsDo         LanguageCodeEnum = "ES_DO"
	LanguageCodeEnumEsEa         LanguageCodeEnum = "ES_EA"
	LanguageCodeEnumEsEc         LanguageCodeEnum = "ES_EC"
	LanguageCodeEnumEsEs         LanguageCodeEnum = "ES_ES"
	LanguageCodeEnumEsGq         LanguageCodeEnum = "ES_GQ"
	LanguageCodeEnumEsGt         LanguageCodeEnum = "ES_GT"
	LanguageCodeEnumEsHn         LanguageCodeEnum = "ES_HN"
	LanguageCodeEnumEsIc         LanguageCodeEnum = "ES_IC"
	LanguageCodeEnumEsMx         LanguageCodeEnum = "ES_MX"
	LanguageCodeEnumEsNi         LanguageCodeEnum = "ES_NI"
	LanguageCodeEnumEsPa         LanguageCodeEnum = "ES_PA"
	LanguageCodeEnumEsPe         LanguageCodeEnum = "ES_PE"
	LanguageCodeEnumEsPh         LanguageCodeEnum = "ES_PH"
	LanguageCodeEnumEsPr         LanguageCodeEnum = "ES_PR"
	LanguageCodeEnumEsPy         LanguageCodeEnum = "ES_PY"
	LanguageCodeEnumEsSv         LanguageCodeEnum = "ES_SV"
	LanguageCodeEnumEsUs         LanguageCodeEnum = "ES_US"
	LanguageCodeEnumEsUy         LanguageCodeEnum = "ES_UY"
	LanguageCodeEnumEsVe         LanguageCodeEnum = "ES_VE"
	LanguageCodeEnumEt           LanguageCodeEnum = "ET"
	LanguageCodeEnumEtEe         LanguageCodeEnum = "ET_EE"
	LanguageCodeEnumEu           LanguageCodeEnum = "EU"
	LanguageCodeEnumEuEs         LanguageCodeEnum = "EU_ES"
	LanguageCodeEnumEwo          LanguageCodeEnum = "EWO"
	LanguageCodeEnumEwoCm        LanguageCodeEnum = "EWO_CM"
	LanguageCodeEnumFa           LanguageCodeEnum = "FA"
	LanguageCodeEnumFaAf         LanguageCodeEnum = "FA_AF"
	LanguageCodeEnumFaIr         LanguageCodeEnum = "FA_IR"
	LanguageCodeEnumFf           LanguageCodeEnum = "FF"
	LanguageCodeEnumFfAdlm       LanguageCodeEnum = "FF_ADLM"
	LanguageCodeEnumFfAdlmBf     LanguageCodeEnum = "FF_ADLM_BF"
	LanguageCodeEnumFfAdlmCm     LanguageCodeEnum = "FF_ADLM_CM"
	LanguageCodeEnumFfAdlmGh     LanguageCodeEnum = "FF_ADLM_GH"
	LanguageCodeEnumFfAdlmGm     LanguageCodeEnum = "FF_ADLM_GM"
	LanguageCodeEnumFfAdlmGn     LanguageCodeEnum = "FF_ADLM_GN"
	LanguageCodeEnumFfAdlmGw     LanguageCodeEnum = "FF_ADLM_GW"
	LanguageCodeEnumFfAdlmLr     LanguageCodeEnum = "FF_ADLM_LR"
	LanguageCodeEnumFfAdlmMr     LanguageCodeEnum = "FF_ADLM_MR"
	LanguageCodeEnumFfAdlmNe     LanguageCodeEnum = "FF_ADLM_NE"
	LanguageCodeEnumFfAdlmNg     LanguageCodeEnum = "FF_ADLM_NG"
	LanguageCodeEnumFfAdlmSl     LanguageCodeEnum = "FF_ADLM_SL"
	LanguageCodeEnumFfAdlmSn     LanguageCodeEnum = "FF_ADLM_SN"
	LanguageCodeEnumFfLatn       LanguageCodeEnum = "FF_LATN"
	LanguageCodeEnumFfLatnBf     LanguageCodeEnum = "FF_LATN_BF"
	LanguageCodeEnumFfLatnCm     LanguageCodeEnum = "FF_LATN_CM"
	LanguageCodeEnumFfLatnGh     LanguageCodeEnum = "FF_LATN_GH"
	LanguageCodeEnumFfLatnGm     LanguageCodeEnum = "FF_LATN_GM"
	LanguageCodeEnumFfLatnGn     LanguageCodeEnum = "FF_LATN_GN"
	LanguageCodeEnumFfLatnGw     LanguageCodeEnum = "FF_LATN_GW"
	LanguageCodeEnumFfLatnLr     LanguageCodeEnum = "FF_LATN_LR"
	LanguageCodeEnumFfLatnMr     LanguageCodeEnum = "FF_LATN_MR"
	LanguageCodeEnumFfLatnNe     LanguageCodeEnum = "FF_LATN_NE"
	LanguageCodeEnumFfLatnNg     LanguageCodeEnum = "FF_LATN_NG"
	LanguageCodeEnumFfLatnSl     LanguageCodeEnum = "FF_LATN_SL"
	LanguageCodeEnumFfLatnSn     LanguageCodeEnum = "FF_LATN_SN"
	LanguageCodeEnumFi           LanguageCodeEnum = "FI"
	LanguageCodeEnumFiFi         LanguageCodeEnum = "FI_FI"
	LanguageCodeEnumFil          LanguageCodeEnum = "FIL"
	LanguageCodeEnumFilPh        LanguageCodeEnum = "FIL_PH"
	LanguageCodeEnumFo           LanguageCodeEnum = "FO"
	LanguageCodeEnumFoDk         LanguageCodeEnum = "FO_DK"
	LanguageCodeEnumFoFo         LanguageCodeEnum = "FO_FO"
	LanguageCodeEnumFr           LanguageCodeEnum = "FR"
	LanguageCodeEnumFrBe         LanguageCodeEnum = "FR_BE"
	LanguageCodeEnumFrBf         LanguageCodeEnum = "FR_BF"
	LanguageCodeEnumFrBi         LanguageCodeEnum = "FR_BI"
	LanguageCodeEnumFrBj         LanguageCodeEnum = "FR_BJ"
	LanguageCodeEnumFrBl         LanguageCodeEnum = "FR_BL"
	LanguageCodeEnumFrCa         LanguageCodeEnum = "FR_CA"
	LanguageCodeEnumFrCd         LanguageCodeEnum = "FR_CD"
	LanguageCodeEnumFrCf         LanguageCodeEnum = "FR_CF"
	LanguageCodeEnumFrCg         LanguageCodeEnum = "FR_CG"
	LanguageCodeEnumFrCh         LanguageCodeEnum = "FR_CH"
	LanguageCodeEnumFrCi         LanguageCodeEnum = "FR_CI"
	LanguageCodeEnumFrCm         LanguageCodeEnum = "FR_CM"
	LanguageCodeEnumFrDj         LanguageCodeEnum = "FR_DJ"
	LanguageCodeEnumFrDz         LanguageCodeEnum = "FR_DZ"
	LanguageCodeEnumFrFr         LanguageCodeEnum = "FR_FR"
	LanguageCodeEnumFrGa         LanguageCodeEnum = "FR_GA"
	LanguageCodeEnumFrGf         LanguageCodeEnum = "FR_GF"
	LanguageCodeEnumFrGn         LanguageCodeEnum = "FR_GN"
	LanguageCodeEnumFrGp         LanguageCodeEnum = "FR_GP"
	LanguageCodeEnumFrGq         LanguageCodeEnum = "FR_GQ"
	LanguageCodeEnumFrHt         LanguageCodeEnum = "FR_HT"
	LanguageCodeEnumFrKm         LanguageCodeEnum = "FR_KM"
	LanguageCodeEnumFrLu         LanguageCodeEnum = "FR_LU"
	LanguageCodeEnumFrMa         LanguageCodeEnum = "FR_MA"
	LanguageCodeEnumFrMc         LanguageCodeEnum = "FR_MC"
	LanguageCodeEnumFrMf         LanguageCodeEnum = "FR_MF"
	LanguageCodeEnumFrMg         LanguageCodeEnum = "FR_MG"
	LanguageCodeEnumFrMl         LanguageCodeEnum = "FR_ML"
	LanguageCodeEnumFrMq         LanguageCodeEnum = "FR_MQ"
	LanguageCodeEnumFrMr         LanguageCodeEnum = "FR_MR"
	LanguageCodeEnumFrMu         LanguageCodeEnum = "FR_MU"
	LanguageCodeEnumFrNc         LanguageCodeEnum = "FR_NC"
	LanguageCodeEnumFrNe         LanguageCodeEnum = "FR_NE"
	LanguageCodeEnumFrPf         LanguageCodeEnum = "FR_PF"
	LanguageCodeEnumFrPm         LanguageCodeEnum = "FR_PM"
	LanguageCodeEnumFrRe         LanguageCodeEnum = "FR_RE"
	LanguageCodeEnumFrRw         LanguageCodeEnum = "FR_RW"
	LanguageCodeEnumFrSc         LanguageCodeEnum = "FR_SC"
	LanguageCodeEnumFrSn         LanguageCodeEnum = "FR_SN"
	LanguageCodeEnumFrSy         LanguageCodeEnum = "FR_SY"
	LanguageCodeEnumFrTd         LanguageCodeEnum = "FR_TD"
	LanguageCodeEnumFrTg         LanguageCodeEnum = "FR_TG"
	LanguageCodeEnumFrTn         LanguageCodeEnum = "FR_TN"
	LanguageCodeEnumFrVu         LanguageCodeEnum = "FR_VU"
	LanguageCodeEnumFrWf         LanguageCodeEnum = "FR_WF"
	LanguageCodeEnumFrYt         LanguageCodeEnum = "FR_YT"
	LanguageCodeEnumFur          LanguageCodeEnum = "FUR"
	LanguageCodeEnumFurIt        LanguageCodeEnum = "FUR_IT"
	LanguageCodeEnumFy           LanguageCodeEnum = "FY"
	LanguageCodeEnumFyNl         LanguageCodeEnum = "FY_NL"
	LanguageCodeEnumGa           LanguageCodeEnum = "GA"
	LanguageCodeEnumGaGb         LanguageCodeEnum = "GA_GB"
	LanguageCodeEnumGaIe         LanguageCodeEnum = "GA_IE"
	LanguageCodeEnumGd           LanguageCodeEnum = "GD"
	LanguageCodeEnumGdGb         LanguageCodeEnum = "GD_GB"
	LanguageCodeEnumGl           LanguageCodeEnum = "GL"
	LanguageCodeEnumGlEs         LanguageCodeEnum = "GL_ES"
	LanguageCodeEnumGsw          LanguageCodeEnum = "GSW"
	LanguageCodeEnumGswCh        LanguageCodeEnum = "GSW_CH"
	LanguageCodeEnumGswFr        LanguageCodeEnum = "GSW_FR"
	LanguageCodeEnumGswLi        LanguageCodeEnum = "GSW_LI"
	LanguageCodeEnumGu           LanguageCodeEnum = "GU"
	LanguageCodeEnumGuIn         LanguageCodeEnum = "GU_IN"
	LanguageCodeEnumGuz          LanguageCodeEnum = "GUZ"
	LanguageCodeEnumGuzKe        LanguageCodeEnum = "GUZ_KE"
	LanguageCodeEnumGv           LanguageCodeEnum = "GV"
	LanguageCodeEnumGvIm         LanguageCodeEnum = "GV_IM"
	LanguageCodeEnumHa           LanguageCodeEnum = "HA"
	LanguageCodeEnumHaGh         LanguageCodeEnum = "HA_GH"
	LanguageCodeEnumHaNe         LanguageCodeEnum = "HA_NE"
	LanguageCodeEnumHaNg         LanguageCodeEnum = "HA_NG"
	LanguageCodeEnumHaw          LanguageCodeEnum = "HAW"
	LanguageCodeEnumHawUs        LanguageCodeEnum = "HAW_US"
	LanguageCodeEnumHe           LanguageCodeEnum = "HE"
	LanguageCodeEnumHeIl         LanguageCodeEnum = "HE_IL"
	LanguageCodeEnumHi           LanguageCodeEnum = "HI"
	LanguageCodeEnumHiIn         LanguageCodeEnum = "HI_IN"
	LanguageCodeEnumHr           LanguageCodeEnum = "HR"
	LanguageCodeEnumHrBa         LanguageCodeEnum = "HR_BA"
	LanguageCodeEnumHrHr         LanguageCodeEnum = "HR_HR"
	LanguageCodeEnumHsb          LanguageCodeEnum = "HSB"
	LanguageCodeEnumHsbDe        LanguageCodeEnum = "HSB_DE"
	LanguageCodeEnumHu           LanguageCodeEnum = "HU"
	LanguageCodeEnumHuHu         LanguageCodeEnum = "HU_HU"
	LanguageCodeEnumHy           LanguageCodeEnum = "HY"
	LanguageCodeEnumHyAm         LanguageCodeEnum = "HY_AM"
	LanguageCodeEnumIa           LanguageCodeEnum = "IA"
	LanguageCodeEnumString       LanguageCodeEnum = "String"
	LanguageCodeEnumIDID         LanguageCodeEnum = "ID_ID"
	LanguageCodeEnumIg           LanguageCodeEnum = "IG"
	LanguageCodeEnumIgNg         LanguageCodeEnum = "IG_NG"
	LanguageCodeEnumIi           LanguageCodeEnum = "II"
	LanguageCodeEnumIiCn         LanguageCodeEnum = "II_CN"
	LanguageCodeEnumIs           LanguageCodeEnum = "IS"
	LanguageCodeEnumIsIs         LanguageCodeEnum = "IS_IS"
	LanguageCodeEnumIt           LanguageCodeEnum = "IT"
	LanguageCodeEnumItCh         LanguageCodeEnum = "IT_CH"
	LanguageCodeEnumItIt         LanguageCodeEnum = "IT_IT"
	LanguageCodeEnumItSm         LanguageCodeEnum = "IT_SM"
	LanguageCodeEnumItVa         LanguageCodeEnum = "IT_VA"
	LanguageCodeEnumJa           LanguageCodeEnum = "JA"
	LanguageCodeEnumJaJp         LanguageCodeEnum = "JA_JP"
	LanguageCodeEnumJgo          LanguageCodeEnum = "JGO"
	LanguageCodeEnumJgoCm        LanguageCodeEnum = "JGO_CM"
	LanguageCodeEnumJmc          LanguageCodeEnum = "JMC"
	LanguageCodeEnumJmcTz        LanguageCodeEnum = "JMC_TZ"
	LanguageCodeEnumJv           LanguageCodeEnum = "JV"
	LanguageCodeEnumJvID         LanguageCodeEnum = "JV_ID"
	LanguageCodeEnumKa           LanguageCodeEnum = "KA"
	LanguageCodeEnumKaGe         LanguageCodeEnum = "KA_GE"
	LanguageCodeEnumKab          LanguageCodeEnum = "KAB"
	LanguageCodeEnumKabDz        LanguageCodeEnum = "KAB_DZ"
	LanguageCodeEnumKam          LanguageCodeEnum = "KAM"
	LanguageCodeEnumKamKe        LanguageCodeEnum = "KAM_KE"
	LanguageCodeEnumKde          LanguageCodeEnum = "KDE"
	LanguageCodeEnumKdeTz        LanguageCodeEnum = "KDE_TZ"
	LanguageCodeEnumKea          LanguageCodeEnum = "KEA"
	LanguageCodeEnumKeaCv        LanguageCodeEnum = "KEA_CV"
	LanguageCodeEnumKhq          LanguageCodeEnum = "KHQ"
	LanguageCodeEnumKhqMl        LanguageCodeEnum = "KHQ_ML"
	LanguageCodeEnumKi           LanguageCodeEnum = "KI"
	LanguageCodeEnumKiKe         LanguageCodeEnum = "KI_KE"
	LanguageCodeEnumKk           LanguageCodeEnum = "KK"
	LanguageCodeEnumKkKz         LanguageCodeEnum = "KK_KZ"
	LanguageCodeEnumKkj          LanguageCodeEnum = "KKJ"
	LanguageCodeEnumKkjCm        LanguageCodeEnum = "KKJ_CM"
	LanguageCodeEnumKl           LanguageCodeEnum = "KL"
	LanguageCodeEnumKlGl         LanguageCodeEnum = "KL_GL"
	LanguageCodeEnumKln          LanguageCodeEnum = "KLN"
	LanguageCodeEnumKlnKe        LanguageCodeEnum = "KLN_KE"
	LanguageCodeEnumKm           LanguageCodeEnum = "KM"
	LanguageCodeEnumKmKh         LanguageCodeEnum = "KM_KH"
	LanguageCodeEnumKn           LanguageCodeEnum = "KN"
	LanguageCodeEnumKnIn         LanguageCodeEnum = "KN_IN"
	LanguageCodeEnumKo           LanguageCodeEnum = "KO"
	LanguageCodeEnumKoKp         LanguageCodeEnum = "KO_KP"
	LanguageCodeEnumKoKr         LanguageCodeEnum = "KO_KR"
	LanguageCodeEnumKok          LanguageCodeEnum = "KOK"
	LanguageCodeEnumKokIn        LanguageCodeEnum = "KOK_IN"
	LanguageCodeEnumKs           LanguageCodeEnum = "KS"
	LanguageCodeEnumKsArab       LanguageCodeEnum = "KS_ARAB"
	LanguageCodeEnumKsArabIn     LanguageCodeEnum = "KS_ARAB_IN"
	LanguageCodeEnumKsb          LanguageCodeEnum = "KSB"
	LanguageCodeEnumKsbTz        LanguageCodeEnum = "KSB_TZ"
	LanguageCodeEnumKsf          LanguageCodeEnum = "KSF"
	LanguageCodeEnumKsfCm        LanguageCodeEnum = "KSF_CM"
	LanguageCodeEnumKsh          LanguageCodeEnum = "KSH"
	LanguageCodeEnumKshDe        LanguageCodeEnum = "KSH_DE"
	LanguageCodeEnumKu           LanguageCodeEnum = "KU"
	LanguageCodeEnumKuTr         LanguageCodeEnum = "KU_TR"
	LanguageCodeEnumKw           LanguageCodeEnum = "KW"
	LanguageCodeEnumKwGb         LanguageCodeEnum = "KW_GB"
	LanguageCodeEnumKy           LanguageCodeEnum = "KY"
	LanguageCodeEnumKyKg         LanguageCodeEnum = "KY_KG"
	LanguageCodeEnumLag          LanguageCodeEnum = "LAG"
	LanguageCodeEnumLagTz        LanguageCodeEnum = "LAG_TZ"
	LanguageCodeEnumLb           LanguageCodeEnum = "LB"
	LanguageCodeEnumLbLu         LanguageCodeEnum = "LB_LU"
	LanguageCodeEnumLg           LanguageCodeEnum = "LG"
	LanguageCodeEnumLgUg         LanguageCodeEnum = "LG_UG"
	LanguageCodeEnumLkt          LanguageCodeEnum = "LKT"
	LanguageCodeEnumLktUs        LanguageCodeEnum = "LKT_US"
	LanguageCodeEnumLn           LanguageCodeEnum = "LN"
	LanguageCodeEnumLnAo         LanguageCodeEnum = "LN_AO"
	LanguageCodeEnumLnCd         LanguageCodeEnum = "LN_CD"
	LanguageCodeEnumLnCf         LanguageCodeEnum = "LN_CF"
	LanguageCodeEnumLnCg         LanguageCodeEnum = "LN_CG"
	LanguageCodeEnumLo           LanguageCodeEnum = "LO"
	LanguageCodeEnumLoLa         LanguageCodeEnum = "LO_LA"
	LanguageCodeEnumLrc          LanguageCodeEnum = "LRC"
	LanguageCodeEnumLrcIq        LanguageCodeEnum = "LRC_IQ"
	LanguageCodeEnumLrcIr        LanguageCodeEnum = "LRC_IR"
	LanguageCodeEnumLt           LanguageCodeEnum = "LT"
	LanguageCodeEnumLtLt         LanguageCodeEnum = "LT_LT"
	LanguageCodeEnumLu           LanguageCodeEnum = "LU"
	LanguageCodeEnumLuCd         LanguageCodeEnum = "LU_CD"
	LanguageCodeEnumLuo          LanguageCodeEnum = "LUO"
	LanguageCodeEnumLuoKe        LanguageCodeEnum = "LUO_KE"
	LanguageCodeEnumLuy          LanguageCodeEnum = "LUY"
	LanguageCodeEnumLuyKe        LanguageCodeEnum = "LUY_KE"
	LanguageCodeEnumLv           LanguageCodeEnum = "LV"
	LanguageCodeEnumLvLv         LanguageCodeEnum = "LV_LV"
	LanguageCodeEnumMai          LanguageCodeEnum = "MAI"
	LanguageCodeEnumMaiIn        LanguageCodeEnum = "MAI_IN"
	LanguageCodeEnumMas          LanguageCodeEnum = "MAS"
	LanguageCodeEnumMasKe        LanguageCodeEnum = "MAS_KE"
	LanguageCodeEnumMasTz        LanguageCodeEnum = "MAS_TZ"
	LanguageCodeEnumMer          LanguageCodeEnum = "MER"
	LanguageCodeEnumMerKe        LanguageCodeEnum = "MER_KE"
	LanguageCodeEnumMfe          LanguageCodeEnum = "MFE"
	LanguageCodeEnumMfeMu        LanguageCodeEnum = "MFE_MU"
	LanguageCodeEnumMg           LanguageCodeEnum = "MG"
	LanguageCodeEnumMgMg         LanguageCodeEnum = "MG_MG"
	LanguageCodeEnumMgh          LanguageCodeEnum = "MGH"
	LanguageCodeEnumMghMz        LanguageCodeEnum = "MGH_MZ"
	LanguageCodeEnumMgo          LanguageCodeEnum = "MGO"
	LanguageCodeEnumMgoCm        LanguageCodeEnum = "MGO_CM"
	LanguageCodeEnumMi           LanguageCodeEnum = "MI"
	LanguageCodeEnumMiNz         LanguageCodeEnum = "MI_NZ"
	LanguageCodeEnumMk           LanguageCodeEnum = "MK"
	LanguageCodeEnumMkMk         LanguageCodeEnum = "MK_MK"
	LanguageCodeEnumMl           LanguageCodeEnum = "ML"
	LanguageCodeEnumMlIn         LanguageCodeEnum = "ML_IN"
	LanguageCodeEnumMn           LanguageCodeEnum = "MN"
	LanguageCodeEnumMnMn         LanguageCodeEnum = "MN_MN"
	LanguageCodeEnumMni          LanguageCodeEnum = "MNI"
	LanguageCodeEnumMniBeng      LanguageCodeEnum = "MNI_BENG"
	LanguageCodeEnumMniBengIn    LanguageCodeEnum = "MNI_BENG_IN"
	LanguageCodeEnumMr           LanguageCodeEnum = "MR"
	LanguageCodeEnumMrIn         LanguageCodeEnum = "MR_IN"
	LanguageCodeEnumMs           LanguageCodeEnum = "MS"
	LanguageCodeEnumMsBn         LanguageCodeEnum = "MS_BN"
	LanguageCodeEnumMsID         LanguageCodeEnum = "MS_ID"
	LanguageCodeEnumMsMy         LanguageCodeEnum = "MS_MY"
	LanguageCodeEnumMsSg         LanguageCodeEnum = "MS_SG"
	LanguageCodeEnumMt           LanguageCodeEnum = "MT"
	LanguageCodeEnumMtMt         LanguageCodeEnum = "MT_MT"
	LanguageCodeEnumMua          LanguageCodeEnum = "MUA"
	LanguageCodeEnumMuaCm        LanguageCodeEnum = "MUA_CM"
	LanguageCodeEnumMy           LanguageCodeEnum = "MY"
	LanguageCodeEnumMyMm         LanguageCodeEnum = "MY_MM"
	LanguageCodeEnumMzn          LanguageCodeEnum = "MZN"
	LanguageCodeEnumMznIr        LanguageCodeEnum = "MZN_IR"
	LanguageCodeEnumNaq          LanguageCodeEnum = "NAQ"
	LanguageCodeEnumNaqNa        LanguageCodeEnum = "NAQ_NA"
	LanguageCodeEnumNb           LanguageCodeEnum = "NB"
	LanguageCodeEnumNbNo         LanguageCodeEnum = "NB_NO"
	LanguageCodeEnumNbSj         LanguageCodeEnum = "NB_SJ"
	LanguageCodeEnumNd           LanguageCodeEnum = "ND"
	LanguageCodeEnumNdZw         LanguageCodeEnum = "ND_ZW"
	LanguageCodeEnumNds          LanguageCodeEnum = "NDS"
	LanguageCodeEnumNdsDe        LanguageCodeEnum = "NDS_DE"
	LanguageCodeEnumNdsNl        LanguageCodeEnum = "NDS_NL"
	LanguageCodeEnumNe           LanguageCodeEnum = "NE"
	LanguageCodeEnumNeIn         LanguageCodeEnum = "NE_IN"
	LanguageCodeEnumNeNp         LanguageCodeEnum = "NE_NP"
	LanguageCodeEnumNl           LanguageCodeEnum = "NL"
	LanguageCodeEnumNlAw         LanguageCodeEnum = "NL_AW"
	LanguageCodeEnumNlBe         LanguageCodeEnum = "NL_BE"
	LanguageCodeEnumNlBq         LanguageCodeEnum = "NL_BQ"
	LanguageCodeEnumNlCw         LanguageCodeEnum = "NL_CW"
	LanguageCodeEnumNlNl         LanguageCodeEnum = "NL_NL"
	LanguageCodeEnumNlSr         LanguageCodeEnum = "NL_SR"
	LanguageCodeEnumNlSx         LanguageCodeEnum = "NL_SX"
	LanguageCodeEnumNmg          LanguageCodeEnum = "NMG"
	LanguageCodeEnumNmgCm        LanguageCodeEnum = "NMG_CM"
	LanguageCodeEnumNn           LanguageCodeEnum = "NN"
	LanguageCodeEnumNnNo         LanguageCodeEnum = "NN_NO"
	LanguageCodeEnumNnh          LanguageCodeEnum = "NNH"
	LanguageCodeEnumNnhCm        LanguageCodeEnum = "NNH_CM"
	LanguageCodeEnumNus          LanguageCodeEnum = "NUS"
	LanguageCodeEnumNusSs        LanguageCodeEnum = "NUS_SS"
	LanguageCodeEnumNyn          LanguageCodeEnum = "NYN"
	LanguageCodeEnumNynUg        LanguageCodeEnum = "NYN_UG"
	LanguageCodeEnumOm           LanguageCodeEnum = "OM"
	LanguageCodeEnumOmEt         LanguageCodeEnum = "OM_ET"
	LanguageCodeEnumOmKe         LanguageCodeEnum = "OM_KE"
	LanguageCodeEnumOr           LanguageCodeEnum = "OR"
	LanguageCodeEnumOrIn         LanguageCodeEnum = "OR_IN"
	LanguageCodeEnumOs           LanguageCodeEnum = "OS"
	LanguageCodeEnumOsGe         LanguageCodeEnum = "OS_GE"
	LanguageCodeEnumOsRu         LanguageCodeEnum = "OS_RU"
	LanguageCodeEnumPa           LanguageCodeEnum = "PA"
	LanguageCodeEnumPaArab       LanguageCodeEnum = "PA_ARAB"
	LanguageCodeEnumPaArabPk     LanguageCodeEnum = "PA_ARAB_PK"
	LanguageCodeEnumPaGuru       LanguageCodeEnum = "PA_GURU"
	LanguageCodeEnumPaGuruIn     LanguageCodeEnum = "PA_GURU_IN"
	LanguageCodeEnumPcm          LanguageCodeEnum = "PCM"
	LanguageCodeEnumPcmNg        LanguageCodeEnum = "PCM_NG"
	LanguageCodeEnumPl           LanguageCodeEnum = "PL"
	LanguageCodeEnumPlPl         LanguageCodeEnum = "PL_PL"
	LanguageCodeEnumPrg          LanguageCodeEnum = "PRG"
	LanguageCodeEnumPs           LanguageCodeEnum = "PS"
	LanguageCodeEnumPsAf         LanguageCodeEnum = "PS_AF"
	LanguageCodeEnumPsPk         LanguageCodeEnum = "PS_PK"
	LanguageCodeEnumPt           LanguageCodeEnum = "PT"
	LanguageCodeEnumPtAo         LanguageCodeEnum = "PT_AO"
	LanguageCodeEnumPtBr         LanguageCodeEnum = "PT_BR"
	LanguageCodeEnumPtCh         LanguageCodeEnum = "PT_CH"
	LanguageCodeEnumPtCv         LanguageCodeEnum = "PT_CV"
	LanguageCodeEnumPtGq         LanguageCodeEnum = "PT_GQ"
	LanguageCodeEnumPtGw         LanguageCodeEnum = "PT_GW"
	LanguageCodeEnumPtLu         LanguageCodeEnum = "PT_LU"
	LanguageCodeEnumPtMo         LanguageCodeEnum = "PT_MO"
	LanguageCodeEnumPtMz         LanguageCodeEnum = "PT_MZ"
	LanguageCodeEnumPtPt         LanguageCodeEnum = "PT_PT"
	LanguageCodeEnumPtSt         LanguageCodeEnum = "PT_ST"
	LanguageCodeEnumPtTl         LanguageCodeEnum = "PT_TL"
	LanguageCodeEnumQu           LanguageCodeEnum = "QU"
	LanguageCodeEnumQuBo         LanguageCodeEnum = "QU_BO"
	LanguageCodeEnumQuEc         LanguageCodeEnum = "QU_EC"
	LanguageCodeEnumQuPe         LanguageCodeEnum = "QU_PE"
	LanguageCodeEnumRm           LanguageCodeEnum = "RM"
	LanguageCodeEnumRmCh         LanguageCodeEnum = "RM_CH"
	LanguageCodeEnumRn           LanguageCodeEnum = "RN"
	LanguageCodeEnumRnBi         LanguageCodeEnum = "RN_BI"
	LanguageCodeEnumRo           LanguageCodeEnum = "RO"
	LanguageCodeEnumRoMd         LanguageCodeEnum = "RO_MD"
	LanguageCodeEnumRoRo         LanguageCodeEnum = "RO_RO"
	LanguageCodeEnumRof          LanguageCodeEnum = "ROF"
	LanguageCodeEnumRofTz        LanguageCodeEnum = "ROF_TZ"
	LanguageCodeEnumRu           LanguageCodeEnum = "RU"
	LanguageCodeEnumRuBy         LanguageCodeEnum = "RU_BY"
	LanguageCodeEnumRuKg         LanguageCodeEnum = "RU_KG"
	LanguageCodeEnumRuKz         LanguageCodeEnum = "RU_KZ"
	LanguageCodeEnumRuMd         LanguageCodeEnum = "RU_MD"
	LanguageCodeEnumRuRu         LanguageCodeEnum = "RU_RU"
	LanguageCodeEnumRuUa         LanguageCodeEnum = "RU_UA"
	LanguageCodeEnumRw           LanguageCodeEnum = "RW"
	LanguageCodeEnumRwRw         LanguageCodeEnum = "RW_RW"
	LanguageCodeEnumRwk          LanguageCodeEnum = "RWK"
	LanguageCodeEnumRwkTz        LanguageCodeEnum = "RWK_TZ"
	LanguageCodeEnumSah          LanguageCodeEnum = "SAH"
	LanguageCodeEnumSahRu        LanguageCodeEnum = "SAH_RU"
	LanguageCodeEnumSaq          LanguageCodeEnum = "SAQ"
	LanguageCodeEnumSaqKe        LanguageCodeEnum = "SAQ_KE"
	LanguageCodeEnumSat          LanguageCodeEnum = "SAT"
	LanguageCodeEnumSatOlck      LanguageCodeEnum = "SAT_OLCK"
	LanguageCodeEnumSatOlckIn    LanguageCodeEnum = "SAT_OLCK_IN"
	LanguageCodeEnumSbp          LanguageCodeEnum = "SBP"
	LanguageCodeEnumSbpTz        LanguageCodeEnum = "SBP_TZ"
	LanguageCodeEnumSd           LanguageCodeEnum = "SD"
	LanguageCodeEnumSdArab       LanguageCodeEnum = "SD_ARAB"
	LanguageCodeEnumSdArabPk     LanguageCodeEnum = "SD_ARAB_PK"
	LanguageCodeEnumSdDeva       LanguageCodeEnum = "SD_DEVA"
	LanguageCodeEnumSdDevaIn     LanguageCodeEnum = "SD_DEVA_IN"
	LanguageCodeEnumSe           LanguageCodeEnum = "SE"
	LanguageCodeEnumSeFi         LanguageCodeEnum = "SE_FI"
	LanguageCodeEnumSeNo         LanguageCodeEnum = "SE_NO"
	LanguageCodeEnumSeSe         LanguageCodeEnum = "SE_SE"
	LanguageCodeEnumSeh          LanguageCodeEnum = "SEH"
	LanguageCodeEnumSehMz        LanguageCodeEnum = "SEH_MZ"
	LanguageCodeEnumSes          LanguageCodeEnum = "SES"
	LanguageCodeEnumSesMl        LanguageCodeEnum = "SES_ML"
	LanguageCodeEnumSg           LanguageCodeEnum = "SG"
	LanguageCodeEnumSgCf         LanguageCodeEnum = "SG_CF"
	LanguageCodeEnumShi          LanguageCodeEnum = "SHI"
	LanguageCodeEnumShiLatn      LanguageCodeEnum = "SHI_LATN"
	LanguageCodeEnumShiLatnMa    LanguageCodeEnum = "SHI_LATN_MA"
	LanguageCodeEnumShiTfng      LanguageCodeEnum = "SHI_TFNG"
	LanguageCodeEnumShiTfngMa    LanguageCodeEnum = "SHI_TFNG_MA"
	LanguageCodeEnumSi           LanguageCodeEnum = "SI"
	LanguageCodeEnumSiLk         LanguageCodeEnum = "SI_LK"
	LanguageCodeEnumSk           LanguageCodeEnum = "SK"
	LanguageCodeEnumSkSk         LanguageCodeEnum = "SK_SK"
	LanguageCodeEnumSl           LanguageCodeEnum = "SL"
	LanguageCodeEnumSlSi         LanguageCodeEnum = "SL_SI"
	LanguageCodeEnumSmn          LanguageCodeEnum = "SMN"
	LanguageCodeEnumSmnFi        LanguageCodeEnum = "SMN_FI"
	LanguageCodeEnumSn           LanguageCodeEnum = "SN"
	LanguageCodeEnumSnZw         LanguageCodeEnum = "SN_ZW"
	LanguageCodeEnumSo           LanguageCodeEnum = "SO"
	LanguageCodeEnumSoDj         LanguageCodeEnum = "SO_DJ"
	LanguageCodeEnumSoEt         LanguageCodeEnum = "SO_ET"
	LanguageCodeEnumSoKe         LanguageCodeEnum = "SO_KE"
	LanguageCodeEnumSoSo         LanguageCodeEnum = "SO_SO"
	LanguageCodeEnumSq           LanguageCodeEnum = "SQ"
	LanguageCodeEnumSqAl         LanguageCodeEnum = "SQ_AL"
	LanguageCodeEnumSqMk         LanguageCodeEnum = "SQ_MK"
	LanguageCodeEnumSqXk         LanguageCodeEnum = "SQ_XK"
	LanguageCodeEnumSr           LanguageCodeEnum = "SR"
	LanguageCodeEnumSrCyrl       LanguageCodeEnum = "SR_CYRL"
	LanguageCodeEnumSrCyrlBa     LanguageCodeEnum = "SR_CYRL_BA"
	LanguageCodeEnumSrCyrlMe     LanguageCodeEnum = "SR_CYRL_ME"
	LanguageCodeEnumSrCyrlRs     LanguageCodeEnum = "SR_CYRL_RS"
	LanguageCodeEnumSrCyrlXk     LanguageCodeEnum = "SR_CYRL_XK"
	LanguageCodeEnumSrLatn       LanguageCodeEnum = "SR_LATN"
	LanguageCodeEnumSrLatnBa     LanguageCodeEnum = "SR_LATN_BA"
	LanguageCodeEnumSrLatnMe     LanguageCodeEnum = "SR_LATN_ME"
	LanguageCodeEnumSrLatnRs     LanguageCodeEnum = "SR_LATN_RS"
	LanguageCodeEnumSrLatnXk     LanguageCodeEnum = "SR_LATN_XK"
	LanguageCodeEnumSu           LanguageCodeEnum = "SU"
	LanguageCodeEnumSuLatn       LanguageCodeEnum = "SU_LATN"
	LanguageCodeEnumSuLatnID     LanguageCodeEnum = "SU_LATN_ID"
	LanguageCodeEnumSv           LanguageCodeEnum = "SV"
	LanguageCodeEnumSvAx         LanguageCodeEnum = "SV_AX"
	LanguageCodeEnumSvFi         LanguageCodeEnum = "SV_FI"
	LanguageCodeEnumSvSe         LanguageCodeEnum = "SV_SE"
	LanguageCodeEnumSw           LanguageCodeEnum = "SW"
	LanguageCodeEnumSwCd         LanguageCodeEnum = "SW_CD"
	LanguageCodeEnumSwKe         LanguageCodeEnum = "SW_KE"
	LanguageCodeEnumSwTz         LanguageCodeEnum = "SW_TZ"
	LanguageCodeEnumSwUg         LanguageCodeEnum = "SW_UG"
	LanguageCodeEnumTa           LanguageCodeEnum = "TA"
	LanguageCodeEnumTaIn         LanguageCodeEnum = "TA_IN"
	LanguageCodeEnumTaLk         LanguageCodeEnum = "TA_LK"
	LanguageCodeEnumTaMy         LanguageCodeEnum = "TA_MY"
	LanguageCodeEnumTaSg         LanguageCodeEnum = "TA_SG"
	LanguageCodeEnumTe           LanguageCodeEnum = "TE"
	LanguageCodeEnumTeIn         LanguageCodeEnum = "TE_IN"
	LanguageCodeEnumTeo          LanguageCodeEnum = "TEO"
	LanguageCodeEnumTeoKe        LanguageCodeEnum = "TEO_KE"
	LanguageCodeEnumTeoUg        LanguageCodeEnum = "TEO_UG"
	LanguageCodeEnumTg           LanguageCodeEnum = "TG"
	LanguageCodeEnumTgTj         LanguageCodeEnum = "TG_TJ"
	LanguageCodeEnumTh           LanguageCodeEnum = "TH"
	LanguageCodeEnumThTh         LanguageCodeEnum = "TH_TH"
	LanguageCodeEnumTi           LanguageCodeEnum = "TI"
	LanguageCodeEnumTiEr         LanguageCodeEnum = "TI_ER"
	LanguageCodeEnumTiEt         LanguageCodeEnum = "TI_ET"
	LanguageCodeEnumTk           LanguageCodeEnum = "TK"
	LanguageCodeEnumTkTm         LanguageCodeEnum = "TK_TM"
	LanguageCodeEnumTo           LanguageCodeEnum = "TO"
	LanguageCodeEnumToTo         LanguageCodeEnum = "TO_TO"
	LanguageCodeEnumTr           LanguageCodeEnum = "TR"
	LanguageCodeEnumTrCy         LanguageCodeEnum = "TR_CY"
	LanguageCodeEnumTrTr         LanguageCodeEnum = "TR_TR"
	LanguageCodeEnumTt           LanguageCodeEnum = "TT"
	LanguageCodeEnumTtRu         LanguageCodeEnum = "TT_RU"
	LanguageCodeEnumTwq          LanguageCodeEnum = "TWQ"
	LanguageCodeEnumTwqNe        LanguageCodeEnum = "TWQ_NE"
	LanguageCodeEnumTzm          LanguageCodeEnum = "TZM"
	LanguageCodeEnumTzmMa        LanguageCodeEnum = "TZM_MA"
	LanguageCodeEnumUg           LanguageCodeEnum = "UG"
	LanguageCodeEnumUgCn         LanguageCodeEnum = "UG_CN"
	LanguageCodeEnumUk           LanguageCodeEnum = "UK"
	LanguageCodeEnumUkUa         LanguageCodeEnum = "UK_UA"
	LanguageCodeEnumUr           LanguageCodeEnum = "UR"
	LanguageCodeEnumUrIn         LanguageCodeEnum = "UR_IN"
	LanguageCodeEnumUrPk         LanguageCodeEnum = "UR_PK"
	LanguageCodeEnumUz           LanguageCodeEnum = "UZ"
	LanguageCodeEnumUzArab       LanguageCodeEnum = "UZ_ARAB"
	LanguageCodeEnumUzArabAf     LanguageCodeEnum = "UZ_ARAB_AF"
	LanguageCodeEnumUzCyrl       LanguageCodeEnum = "UZ_CYRL"
	LanguageCodeEnumUzCyrlUz     LanguageCodeEnum = "UZ_CYRL_UZ"
	LanguageCodeEnumUzLatn       LanguageCodeEnum = "UZ_LATN"
	LanguageCodeEnumUzLatnUz     LanguageCodeEnum = "UZ_LATN_UZ"
	LanguageCodeEnumVai          LanguageCodeEnum = "VAI"
	LanguageCodeEnumVaiLatn      LanguageCodeEnum = "VAI_LATN"
	LanguageCodeEnumVaiLatnLr    LanguageCodeEnum = "VAI_LATN_LR"
	LanguageCodeEnumVaiVaii      LanguageCodeEnum = "VAI_VAII"
	LanguageCodeEnumVaiVaiiLr    LanguageCodeEnum = "VAI_VAII_LR"
	LanguageCodeEnumVi           LanguageCodeEnum = "VI"
	LanguageCodeEnumViVn         LanguageCodeEnum = "VI_VN"
	LanguageCodeEnumVo           LanguageCodeEnum = "VO"
	LanguageCodeEnumVun          LanguageCodeEnum = "VUN"
	LanguageCodeEnumVunTz        LanguageCodeEnum = "VUN_TZ"
	LanguageCodeEnumWae          LanguageCodeEnum = "WAE"
	LanguageCodeEnumWaeCh        LanguageCodeEnum = "WAE_CH"
	LanguageCodeEnumWo           LanguageCodeEnum = "WO"
	LanguageCodeEnumWoSn         LanguageCodeEnum = "WO_SN"
	LanguageCodeEnumXh           LanguageCodeEnum = "XH"
	LanguageCodeEnumXhZa         LanguageCodeEnum = "XH_ZA"
	LanguageCodeEnumXog          LanguageCodeEnum = "XOG"
	LanguageCodeEnumXogUg        LanguageCodeEnum = "XOG_UG"
	LanguageCodeEnumYav          LanguageCodeEnum = "YAV"
	LanguageCodeEnumYavCm        LanguageCodeEnum = "YAV_CM"
	LanguageCodeEnumYi           LanguageCodeEnum = "YI"
	LanguageCodeEnumYo           LanguageCodeEnum = "YO"
	LanguageCodeEnumYoBj         LanguageCodeEnum = "YO_BJ"
	LanguageCodeEnumYoNg         LanguageCodeEnum = "YO_NG"
	LanguageCodeEnumYue          LanguageCodeEnum = "YUE"
	LanguageCodeEnumYueHans      LanguageCodeEnum = "YUE_HANS"
	LanguageCodeEnumYueHansCn    LanguageCodeEnum = "YUE_HANS_CN"
	LanguageCodeEnumYueHant      LanguageCodeEnum = "YUE_HANT"
	LanguageCodeEnumYueHantHk    LanguageCodeEnum = "YUE_HANT_HK"
	LanguageCodeEnumZgh          LanguageCodeEnum = "ZGH"
	LanguageCodeEnumZghMa        LanguageCodeEnum = "ZGH_MA"
	LanguageCodeEnumZh           LanguageCodeEnum = "ZH"
	LanguageCodeEnumZhHans       LanguageCodeEnum = "ZH_HANS"
	LanguageCodeEnumZhHansCn     LanguageCodeEnum = "ZH_HANS_CN"
	LanguageCodeEnumZhHansHk     LanguageCodeEnum = "ZH_HANS_HK"
	LanguageCodeEnumZhHansMo     LanguageCodeEnum = "ZH_HANS_MO"
	LanguageCodeEnumZhHansSg     LanguageCodeEnum = "ZH_HANS_SG"
	LanguageCodeEnumZhHant       LanguageCodeEnum = "ZH_HANT"
	LanguageCodeEnumZhHantHk     LanguageCodeEnum = "ZH_HANT_HK"
	LanguageCodeEnumZhHantMo     LanguageCodeEnum = "ZH_HANT_MO"
	LanguageCodeEnumZhHantTw     LanguageCodeEnum = "ZH_HANT_TW"
	LanguageCodeEnumZu           LanguageCodeEnum = "ZU"
	LanguageCodeEnumZuZa         LanguageCodeEnum = "ZU_ZA"
)

func (e LanguageCodeEnum) IsValid() bool {
	switch e {
	case LanguageCodeEnumAf, LanguageCodeEnumAfNa, LanguageCodeEnumAfZa, LanguageCodeEnumAgq, LanguageCodeEnumAgqCm, LanguageCodeEnumAk, LanguageCodeEnumAkGh, LanguageCodeEnumAm, LanguageCodeEnumAmEt, LanguageCodeEnumAr, LanguageCodeEnumArAe, LanguageCodeEnumArBh, LanguageCodeEnumArDj, LanguageCodeEnumArDz, LanguageCodeEnumArEg, LanguageCodeEnumArEh, LanguageCodeEnumArEr, LanguageCodeEnumArIl, LanguageCodeEnumArIq, LanguageCodeEnumArJo, LanguageCodeEnumArKm, LanguageCodeEnumArKw, LanguageCodeEnumArLb, LanguageCodeEnumArLy, LanguageCodeEnumArMa, LanguageCodeEnumArMr, LanguageCodeEnumArOm, LanguageCodeEnumArPs, LanguageCodeEnumArQa, LanguageCodeEnumArSa, LanguageCodeEnumArSd, LanguageCodeEnumArSo, LanguageCodeEnumArSs, LanguageCodeEnumArSy, LanguageCodeEnumArTd, LanguageCodeEnumArTn, LanguageCodeEnumArYe, LanguageCodeEnumAs, LanguageCodeEnumAsIn, LanguageCodeEnumAsa, LanguageCodeEnumAsaTz, LanguageCodeEnumAst, LanguageCodeEnumAstEs, LanguageCodeEnumAz, LanguageCodeEnumAzCyrl, LanguageCodeEnumAzCyrlAz, LanguageCodeEnumAzLatn, LanguageCodeEnumAzLatnAz, LanguageCodeEnumBas, LanguageCodeEnumBasCm, LanguageCodeEnumBe, LanguageCodeEnumBeBy, LanguageCodeEnumBem, LanguageCodeEnumBemZm, LanguageCodeEnumBez, LanguageCodeEnumBezTz, LanguageCodeEnumBg, LanguageCodeEnumBgBg, LanguageCodeEnumBm, LanguageCodeEnumBmMl, LanguageCodeEnumBn, LanguageCodeEnumBnBd, LanguageCodeEnumBnIn, LanguageCodeEnumBo, LanguageCodeEnumBoCn, LanguageCodeEnumBoIn, LanguageCodeEnumBr, LanguageCodeEnumBrFr, LanguageCodeEnumBrx, LanguageCodeEnumBrxIn, LanguageCodeEnumBs, LanguageCodeEnumBsCyrl, LanguageCodeEnumBsCyrlBa, LanguageCodeEnumBsLatn, LanguageCodeEnumBsLatnBa, LanguageCodeEnumCa, LanguageCodeEnumCaAd, LanguageCodeEnumCaEs, LanguageCodeEnumCaEsValencia, LanguageCodeEnumCaFr, LanguageCodeEnumCaIt, LanguageCodeEnumCcp, LanguageCodeEnumCcpBd, LanguageCodeEnumCcpIn, LanguageCodeEnumCe, LanguageCodeEnumCeRu, LanguageCodeEnumCeb, LanguageCodeEnumCebPh, LanguageCodeEnumCgg, LanguageCodeEnumCggUg, LanguageCodeEnumChr, LanguageCodeEnumChrUs, LanguageCodeEnumCkb, LanguageCodeEnumCkbIq, LanguageCodeEnumCkbIr, LanguageCodeEnumCs, LanguageCodeEnumCsCz, LanguageCodeEnumCu, LanguageCodeEnumCuRu, LanguageCodeEnumCy, LanguageCodeEnumCyGb, LanguageCodeEnumDa, LanguageCodeEnumDaDk, LanguageCodeEnumDaGl, LanguageCodeEnumDav, LanguageCodeEnumDavKe, LanguageCodeEnumDe, LanguageCodeEnumDeAt, LanguageCodeEnumDeBe, LanguageCodeEnumDeCh, LanguageCodeEnumDeDe, LanguageCodeEnumDeIt, LanguageCodeEnumDeLi, LanguageCodeEnumDeLu, LanguageCodeEnumDje, LanguageCodeEnumDjeNe, LanguageCodeEnumDsb, LanguageCodeEnumDsbDe, LanguageCodeEnumDua, LanguageCodeEnumDuaCm, LanguageCodeEnumDyo, LanguageCodeEnumDyoSn, LanguageCodeEnumDz, LanguageCodeEnumDzBt, LanguageCodeEnumEbu, LanguageCodeEnumEbuKe, LanguageCodeEnumEe, LanguageCodeEnumEeGh, LanguageCodeEnumEeTg, LanguageCodeEnumEl, LanguageCodeEnumElCy, LanguageCodeEnumElGr, LanguageCodeEnumEn, LanguageCodeEnumEnAe, LanguageCodeEnumEnAg, LanguageCodeEnumEnAi, LanguageCodeEnumEnAs, LanguageCodeEnumEnAt, LanguageCodeEnumEnAu, LanguageCodeEnumEnBb, LanguageCodeEnumEnBe, LanguageCodeEnumEnBi, LanguageCodeEnumEnBm, LanguageCodeEnumEnBs, LanguageCodeEnumEnBw, LanguageCodeEnumEnBz, LanguageCodeEnumEnCa, LanguageCodeEnumEnCc, LanguageCodeEnumEnCh, LanguageCodeEnumEnCk, LanguageCodeEnumEnCm, LanguageCodeEnumEnCx, LanguageCodeEnumEnCy, LanguageCodeEnumEnDe, LanguageCodeEnumEnDg, LanguageCodeEnumEnDk, LanguageCodeEnumEnDm, LanguageCodeEnumEnEr, LanguageCodeEnumEnFi, LanguageCodeEnumEnFj, LanguageCodeEnumEnFk, LanguageCodeEnumEnFm, LanguageCodeEnumEnGb, LanguageCodeEnumEnGd, LanguageCodeEnumEnGg, LanguageCodeEnumEnGh, LanguageCodeEnumEnGi, LanguageCodeEnumEnGm, LanguageCodeEnumEnGu, LanguageCodeEnumEnGy, LanguageCodeEnumEnHk, LanguageCodeEnumEnIe, LanguageCodeEnumEnIl, LanguageCodeEnumEnIm, LanguageCodeEnumEnIn, LanguageCodeEnumEnIo, LanguageCodeEnumEnJe, LanguageCodeEnumEnJm, LanguageCodeEnumEnKe, LanguageCodeEnumEnKi, LanguageCodeEnumEnKn, LanguageCodeEnumEnKy, LanguageCodeEnumEnLc, LanguageCodeEnumEnLr, LanguageCodeEnumEnLs, LanguageCodeEnumEnMg, LanguageCodeEnumEnMh, LanguageCodeEnumEnMo, LanguageCodeEnumEnMp, LanguageCodeEnumEnMs, LanguageCodeEnumEnMt, LanguageCodeEnumEnMu, LanguageCodeEnumEnMw, LanguageCodeEnumEnMy, LanguageCodeEnumEnNa, LanguageCodeEnumEnNf, LanguageCodeEnumEnNg, LanguageCodeEnumEnNl, LanguageCodeEnumEnNr, LanguageCodeEnumEnNu, LanguageCodeEnumEnNz, LanguageCodeEnumEnPg, LanguageCodeEnumEnPh, LanguageCodeEnumEnPk, LanguageCodeEnumEnPn, LanguageCodeEnumEnPr, LanguageCodeEnumEnPw, LanguageCodeEnumEnRw, LanguageCodeEnumEnSb, LanguageCodeEnumEnSc, LanguageCodeEnumEnSd, LanguageCodeEnumEnSe, LanguageCodeEnumEnSg, LanguageCodeEnumEnSh, LanguageCodeEnumEnSi, LanguageCodeEnumEnSl, LanguageCodeEnumEnSs, LanguageCodeEnumEnSx, LanguageCodeEnumEnSz, LanguageCodeEnumEnTc, LanguageCodeEnumEnTk, LanguageCodeEnumEnTo, LanguageCodeEnumEnTt, LanguageCodeEnumEnTv, LanguageCodeEnumEnTz, LanguageCodeEnumEnUg, LanguageCodeEnumEnUm, LanguageCodeEnumEnUs, LanguageCodeEnumEnVc, LanguageCodeEnumEnVg, LanguageCodeEnumEnVi, LanguageCodeEnumEnVu, LanguageCodeEnumEnWs, LanguageCodeEnumEnZa, LanguageCodeEnumEnZm, LanguageCodeEnumEnZw, LanguageCodeEnumEo, LanguageCodeEnumEs, LanguageCodeEnumEsAr, LanguageCodeEnumEsBo, LanguageCodeEnumEsBr, LanguageCodeEnumEsBz, LanguageCodeEnumEsCl, LanguageCodeEnumEsCo, LanguageCodeEnumEsCr, LanguageCodeEnumEsCu, LanguageCodeEnumEsDo, LanguageCodeEnumEsEa, LanguageCodeEnumEsEc, LanguageCodeEnumEsEs, LanguageCodeEnumEsGq, LanguageCodeEnumEsGt, LanguageCodeEnumEsHn, LanguageCodeEnumEsIc, LanguageCodeEnumEsMx, LanguageCodeEnumEsNi, LanguageCodeEnumEsPa, LanguageCodeEnumEsPe, LanguageCodeEnumEsPh, LanguageCodeEnumEsPr, LanguageCodeEnumEsPy, LanguageCodeEnumEsSv, LanguageCodeEnumEsUs, LanguageCodeEnumEsUy, LanguageCodeEnumEsVe, LanguageCodeEnumEt, LanguageCodeEnumEtEe, LanguageCodeEnumEu, LanguageCodeEnumEuEs, LanguageCodeEnumEwo, LanguageCodeEnumEwoCm, LanguageCodeEnumFa, LanguageCodeEnumFaAf, LanguageCodeEnumFaIr, LanguageCodeEnumFf, LanguageCodeEnumFfAdlm, LanguageCodeEnumFfAdlmBf, LanguageCodeEnumFfAdlmCm, LanguageCodeEnumFfAdlmGh, LanguageCodeEnumFfAdlmGm, LanguageCodeEnumFfAdlmGn, LanguageCodeEnumFfAdlmGw, LanguageCodeEnumFfAdlmLr, LanguageCodeEnumFfAdlmMr, LanguageCodeEnumFfAdlmNe, LanguageCodeEnumFfAdlmNg, LanguageCodeEnumFfAdlmSl, LanguageCodeEnumFfAdlmSn, LanguageCodeEnumFfLatn, LanguageCodeEnumFfLatnBf, LanguageCodeEnumFfLatnCm, LanguageCodeEnumFfLatnGh, LanguageCodeEnumFfLatnGm, LanguageCodeEnumFfLatnGn, LanguageCodeEnumFfLatnGw, LanguageCodeEnumFfLatnLr, LanguageCodeEnumFfLatnMr, LanguageCodeEnumFfLatnNe, LanguageCodeEnumFfLatnNg, LanguageCodeEnumFfLatnSl, LanguageCodeEnumFfLatnSn, LanguageCodeEnumFi, LanguageCodeEnumFiFi, LanguageCodeEnumFil, LanguageCodeEnumFilPh, LanguageCodeEnumFo, LanguageCodeEnumFoDk, LanguageCodeEnumFoFo, LanguageCodeEnumFr, LanguageCodeEnumFrBe, LanguageCodeEnumFrBf, LanguageCodeEnumFrBi, LanguageCodeEnumFrBj, LanguageCodeEnumFrBl, LanguageCodeEnumFrCa, LanguageCodeEnumFrCd, LanguageCodeEnumFrCf, LanguageCodeEnumFrCg, LanguageCodeEnumFrCh, LanguageCodeEnumFrCi, LanguageCodeEnumFrCm, LanguageCodeEnumFrDj, LanguageCodeEnumFrDz, LanguageCodeEnumFrFr, LanguageCodeEnumFrGa, LanguageCodeEnumFrGf, LanguageCodeEnumFrGn, LanguageCodeEnumFrGp, LanguageCodeEnumFrGq, LanguageCodeEnumFrHt, LanguageCodeEnumFrKm, LanguageCodeEnumFrLu, LanguageCodeEnumFrMa, LanguageCodeEnumFrMc, LanguageCodeEnumFrMf, LanguageCodeEnumFrMg, LanguageCodeEnumFrMl, LanguageCodeEnumFrMq, LanguageCodeEnumFrMr, LanguageCodeEnumFrMu, LanguageCodeEnumFrNc, LanguageCodeEnumFrNe, LanguageCodeEnumFrPf, LanguageCodeEnumFrPm, LanguageCodeEnumFrRe, LanguageCodeEnumFrRw, LanguageCodeEnumFrSc, LanguageCodeEnumFrSn, LanguageCodeEnumFrSy, LanguageCodeEnumFrTd, LanguageCodeEnumFrTg, LanguageCodeEnumFrTn, LanguageCodeEnumFrVu, LanguageCodeEnumFrWf, LanguageCodeEnumFrYt, LanguageCodeEnumFur, LanguageCodeEnumFurIt, LanguageCodeEnumFy, LanguageCodeEnumFyNl, LanguageCodeEnumGa, LanguageCodeEnumGaGb, LanguageCodeEnumGaIe, LanguageCodeEnumGd, LanguageCodeEnumGdGb, LanguageCodeEnumGl, LanguageCodeEnumGlEs, LanguageCodeEnumGsw, LanguageCodeEnumGswCh, LanguageCodeEnumGswFr, LanguageCodeEnumGswLi, LanguageCodeEnumGu, LanguageCodeEnumGuIn, LanguageCodeEnumGuz, LanguageCodeEnumGuzKe, LanguageCodeEnumGv, LanguageCodeEnumGvIm, LanguageCodeEnumHa, LanguageCodeEnumHaGh, LanguageCodeEnumHaNe, LanguageCodeEnumHaNg, LanguageCodeEnumHaw, LanguageCodeEnumHawUs, LanguageCodeEnumHe, LanguageCodeEnumHeIl, LanguageCodeEnumHi, LanguageCodeEnumHiIn, LanguageCodeEnumHr, LanguageCodeEnumHrBa, LanguageCodeEnumHrHr, LanguageCodeEnumHsb, LanguageCodeEnumHsbDe, LanguageCodeEnumHu, LanguageCodeEnumHuHu, LanguageCodeEnumHy, LanguageCodeEnumHyAm, LanguageCodeEnumIa, LanguageCodeEnumString, LanguageCodeEnumIDID, LanguageCodeEnumIg, LanguageCodeEnumIgNg, LanguageCodeEnumIi, LanguageCodeEnumIiCn, LanguageCodeEnumIs, LanguageCodeEnumIsIs, LanguageCodeEnumIt, LanguageCodeEnumItCh, LanguageCodeEnumItIt, LanguageCodeEnumItSm, LanguageCodeEnumItVa, LanguageCodeEnumJa, LanguageCodeEnumJaJp, LanguageCodeEnumJgo, LanguageCodeEnumJgoCm, LanguageCodeEnumJmc, LanguageCodeEnumJmcTz, LanguageCodeEnumJv, LanguageCodeEnumJvID, LanguageCodeEnumKa, LanguageCodeEnumKaGe, LanguageCodeEnumKab, LanguageCodeEnumKabDz, LanguageCodeEnumKam, LanguageCodeEnumKamKe, LanguageCodeEnumKde, LanguageCodeEnumKdeTz, LanguageCodeEnumKea, LanguageCodeEnumKeaCv, LanguageCodeEnumKhq, LanguageCodeEnumKhqMl, LanguageCodeEnumKi, LanguageCodeEnumKiKe, LanguageCodeEnumKk, LanguageCodeEnumKkKz, LanguageCodeEnumKkj, LanguageCodeEnumKkjCm, LanguageCodeEnumKl, LanguageCodeEnumKlGl, LanguageCodeEnumKln, LanguageCodeEnumKlnKe, LanguageCodeEnumKm, LanguageCodeEnumKmKh, LanguageCodeEnumKn, LanguageCodeEnumKnIn, LanguageCodeEnumKo, LanguageCodeEnumKoKp, LanguageCodeEnumKoKr, LanguageCodeEnumKok, LanguageCodeEnumKokIn, LanguageCodeEnumKs, LanguageCodeEnumKsArab, LanguageCodeEnumKsArabIn, LanguageCodeEnumKsb, LanguageCodeEnumKsbTz, LanguageCodeEnumKsf, LanguageCodeEnumKsfCm, LanguageCodeEnumKsh, LanguageCodeEnumKshDe, LanguageCodeEnumKu, LanguageCodeEnumKuTr, LanguageCodeEnumKw, LanguageCodeEnumKwGb, LanguageCodeEnumKy, LanguageCodeEnumKyKg, LanguageCodeEnumLag, LanguageCodeEnumLagTz, LanguageCodeEnumLb, LanguageCodeEnumLbLu, LanguageCodeEnumLg, LanguageCodeEnumLgUg, LanguageCodeEnumLkt, LanguageCodeEnumLktUs, LanguageCodeEnumLn, LanguageCodeEnumLnAo, LanguageCodeEnumLnCd, LanguageCodeEnumLnCf, LanguageCodeEnumLnCg, LanguageCodeEnumLo, LanguageCodeEnumLoLa, LanguageCodeEnumLrc, LanguageCodeEnumLrcIq, LanguageCodeEnumLrcIr, LanguageCodeEnumLt, LanguageCodeEnumLtLt, LanguageCodeEnumLu, LanguageCodeEnumLuCd, LanguageCodeEnumLuo, LanguageCodeEnumLuoKe, LanguageCodeEnumLuy, LanguageCodeEnumLuyKe, LanguageCodeEnumLv, LanguageCodeEnumLvLv, LanguageCodeEnumMai, LanguageCodeEnumMaiIn, LanguageCodeEnumMas, LanguageCodeEnumMasKe, LanguageCodeEnumMasTz, LanguageCodeEnumMer, LanguageCodeEnumMerKe, LanguageCodeEnumMfe, LanguageCodeEnumMfeMu, LanguageCodeEnumMg, LanguageCodeEnumMgMg, LanguageCodeEnumMgh, LanguageCodeEnumMghMz, LanguageCodeEnumMgo, LanguageCodeEnumMgoCm, LanguageCodeEnumMi, LanguageCodeEnumMiNz, LanguageCodeEnumMk, LanguageCodeEnumMkMk, LanguageCodeEnumMl, LanguageCodeEnumMlIn, LanguageCodeEnumMn, LanguageCodeEnumMnMn, LanguageCodeEnumMni, LanguageCodeEnumMniBeng, LanguageCodeEnumMniBengIn, LanguageCodeEnumMr, LanguageCodeEnumMrIn, LanguageCodeEnumMs, LanguageCodeEnumMsBn, LanguageCodeEnumMsID, LanguageCodeEnumMsMy, LanguageCodeEnumMsSg, LanguageCodeEnumMt, LanguageCodeEnumMtMt, LanguageCodeEnumMua, LanguageCodeEnumMuaCm, LanguageCodeEnumMy, LanguageCodeEnumMyMm, LanguageCodeEnumMzn, LanguageCodeEnumMznIr, LanguageCodeEnumNaq, LanguageCodeEnumNaqNa, LanguageCodeEnumNb, LanguageCodeEnumNbNo, LanguageCodeEnumNbSj, LanguageCodeEnumNd, LanguageCodeEnumNdZw, LanguageCodeEnumNds, LanguageCodeEnumNdsDe, LanguageCodeEnumNdsNl, LanguageCodeEnumNe, LanguageCodeEnumNeIn, LanguageCodeEnumNeNp, LanguageCodeEnumNl, LanguageCodeEnumNlAw, LanguageCodeEnumNlBe, LanguageCodeEnumNlBq, LanguageCodeEnumNlCw, LanguageCodeEnumNlNl, LanguageCodeEnumNlSr, LanguageCodeEnumNlSx, LanguageCodeEnumNmg, LanguageCodeEnumNmgCm, LanguageCodeEnumNn, LanguageCodeEnumNnNo, LanguageCodeEnumNnh, LanguageCodeEnumNnhCm, LanguageCodeEnumNus, LanguageCodeEnumNusSs, LanguageCodeEnumNyn, LanguageCodeEnumNynUg, LanguageCodeEnumOm, LanguageCodeEnumOmEt, LanguageCodeEnumOmKe, LanguageCodeEnumOr, LanguageCodeEnumOrIn, LanguageCodeEnumOs, LanguageCodeEnumOsGe, LanguageCodeEnumOsRu, LanguageCodeEnumPa, LanguageCodeEnumPaArab, LanguageCodeEnumPaArabPk, LanguageCodeEnumPaGuru, LanguageCodeEnumPaGuruIn, LanguageCodeEnumPcm, LanguageCodeEnumPcmNg, LanguageCodeEnumPl, LanguageCodeEnumPlPl, LanguageCodeEnumPrg, LanguageCodeEnumPs, LanguageCodeEnumPsAf, LanguageCodeEnumPsPk, LanguageCodeEnumPt, LanguageCodeEnumPtAo, LanguageCodeEnumPtBr, LanguageCodeEnumPtCh, LanguageCodeEnumPtCv, LanguageCodeEnumPtGq, LanguageCodeEnumPtGw, LanguageCodeEnumPtLu, LanguageCodeEnumPtMo, LanguageCodeEnumPtMz, LanguageCodeEnumPtPt, LanguageCodeEnumPtSt, LanguageCodeEnumPtTl, LanguageCodeEnumQu, LanguageCodeEnumQuBo, LanguageCodeEnumQuEc, LanguageCodeEnumQuPe, LanguageCodeEnumRm, LanguageCodeEnumRmCh, LanguageCodeEnumRn, LanguageCodeEnumRnBi, LanguageCodeEnumRo, LanguageCodeEnumRoMd, LanguageCodeEnumRoRo, LanguageCodeEnumRof, LanguageCodeEnumRofTz, LanguageCodeEnumRu, LanguageCodeEnumRuBy, LanguageCodeEnumRuKg, LanguageCodeEnumRuKz, LanguageCodeEnumRuMd, LanguageCodeEnumRuRu, LanguageCodeEnumRuUa, LanguageCodeEnumRw, LanguageCodeEnumRwRw, LanguageCodeEnumRwk, LanguageCodeEnumRwkTz, LanguageCodeEnumSah, LanguageCodeEnumSahRu, LanguageCodeEnumSaq, LanguageCodeEnumSaqKe, LanguageCodeEnumSat, LanguageCodeEnumSatOlck, LanguageCodeEnumSatOlckIn, LanguageCodeEnumSbp, LanguageCodeEnumSbpTz, LanguageCodeEnumSd, LanguageCodeEnumSdArab, LanguageCodeEnumSdArabPk, LanguageCodeEnumSdDeva, LanguageCodeEnumSdDevaIn, LanguageCodeEnumSe, LanguageCodeEnumSeFi, LanguageCodeEnumSeNo, LanguageCodeEnumSeSe, LanguageCodeEnumSeh, LanguageCodeEnumSehMz, LanguageCodeEnumSes, LanguageCodeEnumSesMl, LanguageCodeEnumSg, LanguageCodeEnumSgCf, LanguageCodeEnumShi, LanguageCodeEnumShiLatn, LanguageCodeEnumShiLatnMa, LanguageCodeEnumShiTfng, LanguageCodeEnumShiTfngMa, LanguageCodeEnumSi, LanguageCodeEnumSiLk, LanguageCodeEnumSk, LanguageCodeEnumSkSk, LanguageCodeEnumSl, LanguageCodeEnumSlSi, LanguageCodeEnumSmn, LanguageCodeEnumSmnFi, LanguageCodeEnumSn, LanguageCodeEnumSnZw, LanguageCodeEnumSo, LanguageCodeEnumSoDj, LanguageCodeEnumSoEt, LanguageCodeEnumSoKe, LanguageCodeEnumSoSo, LanguageCodeEnumSq, LanguageCodeEnumSqAl, LanguageCodeEnumSqMk, LanguageCodeEnumSqXk, LanguageCodeEnumSr, LanguageCodeEnumSrCyrl, LanguageCodeEnumSrCyrlBa, LanguageCodeEnumSrCyrlMe, LanguageCodeEnumSrCyrlRs, LanguageCodeEnumSrCyrlXk, LanguageCodeEnumSrLatn, LanguageCodeEnumSrLatnBa, LanguageCodeEnumSrLatnMe, LanguageCodeEnumSrLatnRs, LanguageCodeEnumSrLatnXk, LanguageCodeEnumSu, LanguageCodeEnumSuLatn, LanguageCodeEnumSuLatnID, LanguageCodeEnumSv, LanguageCodeEnumSvAx, LanguageCodeEnumSvFi, LanguageCodeEnumSvSe, LanguageCodeEnumSw, LanguageCodeEnumSwCd, LanguageCodeEnumSwKe, LanguageCodeEnumSwTz, LanguageCodeEnumSwUg, LanguageCodeEnumTa, LanguageCodeEnumTaIn, LanguageCodeEnumTaLk, LanguageCodeEnumTaMy, LanguageCodeEnumTaSg, LanguageCodeEnumTe, LanguageCodeEnumTeIn, LanguageCodeEnumTeo, LanguageCodeEnumTeoKe, LanguageCodeEnumTeoUg, LanguageCodeEnumTg, LanguageCodeEnumTgTj, LanguageCodeEnumTh, LanguageCodeEnumThTh, LanguageCodeEnumTi, LanguageCodeEnumTiEr, LanguageCodeEnumTiEt, LanguageCodeEnumTk, LanguageCodeEnumTkTm, LanguageCodeEnumTo, LanguageCodeEnumToTo, LanguageCodeEnumTr, LanguageCodeEnumTrCy, LanguageCodeEnumTrTr, LanguageCodeEnumTt, LanguageCodeEnumTtRu, LanguageCodeEnumTwq, LanguageCodeEnumTwqNe, LanguageCodeEnumTzm, LanguageCodeEnumTzmMa, LanguageCodeEnumUg, LanguageCodeEnumUgCn, LanguageCodeEnumUk, LanguageCodeEnumUkUa, LanguageCodeEnumUr, LanguageCodeEnumUrIn, LanguageCodeEnumUrPk, LanguageCodeEnumUz, LanguageCodeEnumUzArab, LanguageCodeEnumUzArabAf, LanguageCodeEnumUzCyrl, LanguageCodeEnumUzCyrlUz, LanguageCodeEnumUzLatn, LanguageCodeEnumUzLatnUz, LanguageCodeEnumVai, LanguageCodeEnumVaiLatn, LanguageCodeEnumVaiLatnLr, LanguageCodeEnumVaiVaii, LanguageCodeEnumVaiVaiiLr, LanguageCodeEnumVi, LanguageCodeEnumViVn, LanguageCodeEnumVo, LanguageCodeEnumVun, LanguageCodeEnumVunTz, LanguageCodeEnumWae, LanguageCodeEnumWaeCh, LanguageCodeEnumWo, LanguageCodeEnumWoSn, LanguageCodeEnumXh, LanguageCodeEnumXhZa, LanguageCodeEnumXog, LanguageCodeEnumXogUg, LanguageCodeEnumYav, LanguageCodeEnumYavCm, LanguageCodeEnumYi, LanguageCodeEnumYo, LanguageCodeEnumYoBj, LanguageCodeEnumYoNg, LanguageCodeEnumYue, LanguageCodeEnumYueHans, LanguageCodeEnumYueHansCn, LanguageCodeEnumYueHant, LanguageCodeEnumYueHantHk, LanguageCodeEnumZgh, LanguageCodeEnumZghMa, LanguageCodeEnumZh, LanguageCodeEnumZhHans, LanguageCodeEnumZhHansCn, LanguageCodeEnumZhHansHk, LanguageCodeEnumZhHansMo, LanguageCodeEnumZhHansSg, LanguageCodeEnumZhHant, LanguageCodeEnumZhHantHk, LanguageCodeEnumZhHantMo, LanguageCodeEnumZhHantTw, LanguageCodeEnumZu, LanguageCodeEnumZuZa:
		return true
	}
	return false
}

type LoginErrorCode string

const (
	LoginErrorCodeGraphqlError LoginErrorCode = "GRAPHQL_ERROR"
	LoginErrorCodeInvalid      LoginErrorCode = "INVALID"
	LoginErrorCodeNotFound     LoginErrorCode = "NOT_FOUND"
	LoginErrorCodeRequired     LoginErrorCode = "REQUIRED"
	LoginErrorCodeUnique       LoginErrorCode = "UNIQUE"
)

func (e LoginErrorCode) IsValid() bool {
	switch e {
	case LoginErrorCodeGraphqlError, LoginErrorCodeInvalid, LoginErrorCodeNotFound, LoginErrorCodeRequired, LoginErrorCodeUnique:
		return true
	}
	return false
}

type MeasurementUnitsEnum string

const (
	MeasurementUnitsEnumCm              MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.CM)
	MeasurementUnitsEnumM               MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.M)
	MeasurementUnitsEnumKm              MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.KM)
	MeasurementUnitsEnumFt              MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.FT)
	MeasurementUnitsEnumYd              MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.YD)
	MeasurementUnitsEnumInch            MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.INCH)
	MeasurementUnitsEnumSqCm            MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.SQ_CM)
	MeasurementUnitsEnumSqM             MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.SQ_M)
	MeasurementUnitsEnumSqKm            MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.SQ_KM)
	MeasurementUnitsEnumSqFt            MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.SQ_FT)
	MeasurementUnitsEnumSqYd            MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.SQ_YD)
	MeasurementUnitsEnumSqInch          MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.SQ_INCH)
	MeasurementUnitsEnumCubicMillimeter MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.CUBIC_MILLIMETER)
	MeasurementUnitsEnumCubicCentimeter MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.CUBIC_CENTIMETER)
	MeasurementUnitsEnumCubicDecimeter  MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.CUBIC_DECIMETER)
	MeasurementUnitsEnumCubicMeter      MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.CUBIC_METER)
	MeasurementUnitsEnumLiter           MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.LITER)
	MeasurementUnitsEnumCubicFoot       MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.CUBIC_FOOT)
	MeasurementUnitsEnumCubicInch       MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.CUBIC_INCH)
	MeasurementUnitsEnumCubicYard       MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.CUBIC_YARD)
	MeasurementUnitsEnumQt              MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.QT)
	MeasurementUnitsEnumPint            MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.PINT)
	MeasurementUnitsEnumFlOz            MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.FL_OZ)
	MeasurementUnitsEnumAcreIn          MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.ACRE_IN)
	MeasurementUnitsEnumAcreFt          MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.ACRE_FT)
	MeasurementUnitsEnumG               MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.G)
	MeasurementUnitsEnumLb              MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.LB)
	MeasurementUnitsEnumOz              MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.OZ)
	MeasurementUnitsEnumKg              MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.KG)
	MeasurementUnitsEnumTonne           MeasurementUnitsEnum = MeasurementUnitsEnum(measurement.TONNE)
)

func (e MeasurementUnitsEnum) IsValid() bool {
	switch e {
	case MeasurementUnitsEnumCm, MeasurementUnitsEnumM, MeasurementUnitsEnumKm, MeasurementUnitsEnumFt, MeasurementUnitsEnumYd, MeasurementUnitsEnumInch, MeasurementUnitsEnumSqCm, MeasurementUnitsEnumSqM, MeasurementUnitsEnumSqKm, MeasurementUnitsEnumSqFt, MeasurementUnitsEnumSqYd, MeasurementUnitsEnumSqInch, MeasurementUnitsEnumCubicMillimeter, MeasurementUnitsEnumCubicCentimeter, MeasurementUnitsEnumCubicDecimeter, MeasurementUnitsEnumCubicMeter, MeasurementUnitsEnumLiter, MeasurementUnitsEnumCubicFoot, MeasurementUnitsEnumCubicInch, MeasurementUnitsEnumCubicYard, MeasurementUnitsEnumQt, MeasurementUnitsEnumPint, MeasurementUnitsEnumFlOz, MeasurementUnitsEnumAcreIn, MeasurementUnitsEnumAcreFt, MeasurementUnitsEnumG, MeasurementUnitsEnumLb, MeasurementUnitsEnumOz, MeasurementUnitsEnumKg, MeasurementUnitsEnumTonne:
		return true
	}
	return false
}

type MenuErrorCode string

const (
	MenuErrorCodeCannotAssignNode   MenuErrorCode = "CANNOT_ASSIGN_NODE"
	MenuErrorCodeGraphqlError       MenuErrorCode = "GRAPHQL_ERROR"
	MenuErrorCodeInvalid            MenuErrorCode = "INVALID"
	MenuErrorCodeInvalidMenuItem    MenuErrorCode = "INVALID_MENU_ITEM"
	MenuErrorCodeNoMenuItemProvided MenuErrorCode = "NO_MENU_ITEM_PROVIDED"
	MenuErrorCodeNotFound           MenuErrorCode = "NOT_FOUND"
	MenuErrorCodeRequired           MenuErrorCode = "REQUIRED"
	MenuErrorCodeTooManyMenuItems   MenuErrorCode = "TOO_MANY_MENU_ITEMS"
	MenuErrorCodeUnique             MenuErrorCode = "UNIQUE"
)

func (e MenuErrorCode) IsValid() bool {
	switch e {
	case MenuErrorCodeCannotAssignNode, MenuErrorCodeGraphqlError, MenuErrorCodeInvalid, MenuErrorCodeInvalidMenuItem, MenuErrorCodeNoMenuItemProvided, MenuErrorCodeNotFound, MenuErrorCodeRequired, MenuErrorCodeTooManyMenuItems, MenuErrorCodeUnique:
		return true
	}
	return false
}

type MenuItemsSortField string

const (
	MenuItemsSortFieldName MenuItemsSortField = "NAME"
)

func (e MenuItemsSortField) IsValid() bool {
	switch e {
	case MenuItemsSortFieldName:
		return true
	}
	return false
}

type MenuSortField string

const (
	MenuSortFieldName       MenuSortField = "NAME"
	MenuSortFieldItemsCount MenuSortField = "ITEMS_COUNT"
)

func (e MenuSortField) IsValid() bool {
	switch e {
	case MenuSortFieldName, MenuSortFieldItemsCount:
		return true
	}
	return false
}

type MetadataErrorCode string

const (
	MetadataErrorCodeGraphqlError MetadataErrorCode = "GRAPHQL_ERROR"
	MetadataErrorCodeInvalid      MetadataErrorCode = "INVALID"
	MetadataErrorCodeNotFound     MetadataErrorCode = "NOT_FOUND"
	MetadataErrorCodeRequired     MetadataErrorCode = "REQUIRED"
)

func (e MetadataErrorCode) IsValid() bool {
	switch e {
	case MetadataErrorCodeGraphqlError, MetadataErrorCodeInvalid, MetadataErrorCodeNotFound, MetadataErrorCodeRequired:
		return true
	}
	return false
}

type NavigationType string

const (
	NavigationTypeMain      NavigationType = "MAIN"
	NavigationTypeSecondary NavigationType = "SECONDARY"
)

func (e NavigationType) IsValid() bool {
	switch e {
	case NavigationTypeMain, NavigationTypeSecondary:
		return true
	}
	return false
}

type OrderAction string

const (
	OrderActionCapture    OrderAction = "CAPTURE"
	OrderActionMarkAsPaid OrderAction = "MARK_AS_PAID"
	OrderActionRefund     OrderAction = "REFUND"
	OrderActionVoid       OrderAction = "VOID"
)

func (e OrderAction) IsValid() bool {
	switch e {
	case OrderActionCapture, OrderActionMarkAsPaid, OrderActionRefund, OrderActionVoid:
		return true
	}
	return false
}

func (o OrderAction) Description() string {
	switch o {
	case OrderActionCapture:
		return "Represents the capture action."
	case OrderActionMarkAsPaid:
		return "Represents a mark-as-paid action."
	case OrderActionRefund:
		return "Represents a refund action."
	case OrderActionVoid:
		return "Represents a void action."
	default:
		return "Unsupported enum value: " + string(o)
	}
}

type OrderDirection = model.OrderDirection

const (
	OrderDirectionAsc  OrderDirection = model.ASC
	OrderDirectionDesc OrderDirection = model.DESC
)

type OrderDiscountType string

const (
	OrderDiscountTypeVoucher OrderDiscountType = OrderDiscountType(model.VOUCHER)
	OrderDiscountTypeManual  OrderDiscountType = OrderDiscountType(model.MANUAL)
)

func (e OrderDiscountType) IsValid() bool {
	switch e {
	case OrderDiscountTypeVoucher, OrderDiscountTypeManual:
		return true
	}
	return false
}

type OrderErrorCode string

const (
	OrderErrorCodeBillingAddressNotSet          OrderErrorCode = "BILLING_ADDRESS_NOT_SET"
	OrderErrorCodeCannotCancelFulfillment       OrderErrorCode = "CANNOT_CANCEL_FULFILLMENT"
	OrderErrorCodeCannotCancelOrder             OrderErrorCode = "CANNOT_CANCEL_ORDER"
	OrderErrorCodeCannotDelete                  OrderErrorCode = "CANNOT_DELETE"
	OrderErrorCodeCannotDiscount                OrderErrorCode = "CANNOT_DISCOUNT"
	OrderErrorCodeCannotRefund                  OrderErrorCode = "CANNOT_REFUND"
	OrderErrorCodeCannotFulfillUnpaidOrder      OrderErrorCode = "CANNOT_FULFILL_UNPAID_ORDER"
	OrderErrorCodeCaptureInactivePayment        OrderErrorCode = "CAPTURE_INACTIVE_PAYMENT"
	OrderErrorCodeGiftCardLine                  OrderErrorCode = "GIFT_CARD_LINE"
	OrderErrorCodeNotEditable                   OrderErrorCode = "NOT_EDITABLE"
	OrderErrorCodeFulfillOrderLine              OrderErrorCode = "FULFILL_ORDER_LINE"
	OrderErrorCodeGraphqlError                  OrderErrorCode = "GRAPHQL_ERROR"
	OrderErrorCodeInvalid                       OrderErrorCode = "INVALID"
	OrderErrorCodeProductNotPublished           OrderErrorCode = "PRODUCT_NOT_PUBLISHED"
	OrderErrorCodeProductUnavailableForPurchase OrderErrorCode = "PRODUCT_UNAVAILABLE_FOR_PURCHASE"
	OrderErrorCodeNotFound                      OrderErrorCode = "NOT_FOUND"
	OrderErrorCodeOrderNoShippingAddress        OrderErrorCode = "ORDER_NO_SHIPPING_ADDRESS"
	OrderErrorCodePaymentError                  OrderErrorCode = "PAYMENT_ERROR"
	OrderErrorCodePaymentMissing                OrderErrorCode = "PAYMENT_MISSING"
	OrderErrorCodeRequired                      OrderErrorCode = "REQUIRED"
	OrderErrorCodeShippingMethodNotApplicable   OrderErrorCode = "SHIPPING_METHOD_NOT_APPLICABLE"
	OrderErrorCodeShippingMethodRequired        OrderErrorCode = "SHIPPING_METHOD_REQUIRED"
	OrderErrorCodeTaxError                      OrderErrorCode = "TAX_ERROR"
	OrderErrorCodeUnique                        OrderErrorCode = "UNIQUE"
	OrderErrorCodeVoidInactivePayment           OrderErrorCode = "VOID_INACTIVE_PAYMENT"
	OrderErrorCodeZeroQuantity                  OrderErrorCode = "ZERO_QUANTITY"
	OrderErrorCodeInvalidQuantity               OrderErrorCode = "INVALID_QUANTITY"
	OrderErrorCodeInsufficientStock             OrderErrorCode = "INSUFFICIENT_STOCK"
	OrderErrorCodeDuplicatedInputItem           OrderErrorCode = "DUPLICATED_INPUT_ITEM"
	OrderErrorCodeNotAvailableInChannel         OrderErrorCode = "NOT_AVAILABLE_IN_CHANNEL"
	OrderErrorCodeChannelInactive               OrderErrorCode = "CHANNEL_INACTIVE"
)

func (e OrderErrorCode) IsValid() bool {
	switch e {
	case OrderErrorCodeBillingAddressNotSet, OrderErrorCodeCannotCancelFulfillment, OrderErrorCodeCannotCancelOrder, OrderErrorCodeCannotDelete, OrderErrorCodeCannotDiscount, OrderErrorCodeCannotRefund, OrderErrorCodeCannotFulfillUnpaidOrder, OrderErrorCodeCaptureInactivePayment, OrderErrorCodeGiftCardLine, OrderErrorCodeNotEditable, OrderErrorCodeFulfillOrderLine, OrderErrorCodeGraphqlError, OrderErrorCodeInvalid, OrderErrorCodeProductNotPublished, OrderErrorCodeProductUnavailableForPurchase, OrderErrorCodeNotFound, OrderErrorCodeOrderNoShippingAddress, OrderErrorCodePaymentError, OrderErrorCodePaymentMissing, OrderErrorCodeRequired, OrderErrorCodeShippingMethodNotApplicable, OrderErrorCodeShippingMethodRequired, OrderErrorCodeTaxError, OrderErrorCodeUnique, OrderErrorCodeVoidInactivePayment, OrderErrorCodeZeroQuantity, OrderErrorCodeInvalidQuantity, OrderErrorCodeInsufficientStock, OrderErrorCodeDuplicatedInputItem, OrderErrorCodeNotAvailableInChannel, OrderErrorCodeChannelInactive:
		return true
	}
	return false
}

type OrderEventsEmailsEnum string

const (
	OrderEventsEmailsEnumPaymentConfirmation     OrderEventsEmailsEnum = "PAYMENT_CONFIRMATION"
	OrderEventsEmailsEnumConfirmed               OrderEventsEmailsEnum = "CONFIRMED"
	OrderEventsEmailsEnumShippingConfirmation    OrderEventsEmailsEnum = "SHIPPING_CONFIRMATION"
	OrderEventsEmailsEnumTrackingUpdated         OrderEventsEmailsEnum = "TRACKING_UPDATED"
	OrderEventsEmailsEnumOrderConfirmation       OrderEventsEmailsEnum = "ORDER_CONFIRMATION"
	OrderEventsEmailsEnumOrderCancel             OrderEventsEmailsEnum = "ORDER_CANCEL"
	OrderEventsEmailsEnumOrderRefund             OrderEventsEmailsEnum = "ORDER_REFUND"
	OrderEventsEmailsEnumFulfillmentConfirmation OrderEventsEmailsEnum = "FULFILLMENT_CONFIRMATION"
	OrderEventsEmailsEnumDigitalLinks            OrderEventsEmailsEnum = "DIGITAL_LINKS"
)

func (e OrderEventsEmailsEnum) IsValid() bool {
	switch e {
	case OrderEventsEmailsEnumPaymentConfirmation, OrderEventsEmailsEnumConfirmed, OrderEventsEmailsEnumShippingConfirmation, OrderEventsEmailsEnumTrackingUpdated, OrderEventsEmailsEnumOrderConfirmation, OrderEventsEmailsEnumOrderCancel, OrderEventsEmailsEnumOrderRefund, OrderEventsEmailsEnumFulfillmentConfirmation, OrderEventsEmailsEnumDigitalLinks:
		return true
	}
	return false
}

type OrderEventsEnum string

const (
	OrderEventsEnumDraftCreated                      OrderEventsEnum = "DRAFT_CREATED"
	OrderEventsEnumDraftCreatedFromReplace           OrderEventsEnum = "DRAFT_CREATED_FROM_REPLACE"
	OrderEventsEnumAddedProducts                     OrderEventsEnum = "ADDED_PRODUCTS"
	OrderEventsEnumRemovedProducts                   OrderEventsEnum = "REMOVED_PRODUCTS"
	OrderEventsEnumPlaced                            OrderEventsEnum = "PLACED"
	OrderEventsEnumPlacedFromDraft                   OrderEventsEnum = "PLACED_FROM_DRAFT"
	OrderEventsEnumOversoldItems                     OrderEventsEnum = "OVERSOLD_ITEMS"
	OrderEventsEnumCanceled                          OrderEventsEnum = "CANCELED"
	OrderEventsEnumOrderMarkedAsPaid                 OrderEventsEnum = "ORDER_MARKED_AS_PAID"
	OrderEventsEnumOrderFullyPaid                    OrderEventsEnum = "ORDER_FULLY_PAID"
	OrderEventsEnumOrderReplacementCreated           OrderEventsEnum = "ORDER_REPLACEMENT_CREATED"
	OrderEventsEnumOrderDiscountAdded                OrderEventsEnum = "ORDER_DISCOUNT_ADDED"
	OrderEventsEnumOrderDiscountAutomaticallyUpdated OrderEventsEnum = "ORDER_DISCOUNT_AUTOMATICALLY_UPDATED"
	OrderEventsEnumOrderDiscountUpdated              OrderEventsEnum = "ORDER_DISCOUNT_UPDATED"
	OrderEventsEnumOrderDiscountDeleted              OrderEventsEnum = "ORDER_DISCOUNT_DELETED"
	OrderEventsEnumOrderLineDiscountUpdated          OrderEventsEnum = "ORDER_LINE_DISCOUNT_UPDATED"
	OrderEventsEnumOrderLineDiscountRemoved          OrderEventsEnum = "ORDER_LINE_DISCOUNT_REMOVED"
	OrderEventsEnumUpdatedAddress                    OrderEventsEnum = "UPDATED_ADDRESS"
	OrderEventsEnumEmailSent                         OrderEventsEnum = "EMAIL_SENT"
	OrderEventsEnumConfirmed                         OrderEventsEnum = "CONFIRMED"
	OrderEventsEnumPaymentAuthorized                 OrderEventsEnum = "PAYMENT_AUTHORIZED"
	OrderEventsEnumPaymentCaptured                   OrderEventsEnum = "PAYMENT_CAPTURED"
	OrderEventsEnumExternalServiceNotification       OrderEventsEnum = "EXTERNAL_SERVICE_NOTIFICATION"
	OrderEventsEnumPaymentRefunded                   OrderEventsEnum = "PAYMENT_REFUNDED"
	OrderEventsEnumPaymentVoided                     OrderEventsEnum = "PAYMENT_VOIDED"
	OrderEventsEnumPaymentFailed                     OrderEventsEnum = "PAYMENT_FAILED"
	OrderEventsEnumInvoiceRequested                  OrderEventsEnum = "INVOICE_REQUESTED"
	OrderEventsEnumInvoiceGenerated                  OrderEventsEnum = "INVOICE_GENERATED"
	OrderEventsEnumInvoiceUpdated                    OrderEventsEnum = "INVOICE_UPDATED"
	OrderEventsEnumInvoiceSent                       OrderEventsEnum = "INVOICE_SENT"
	OrderEventsEnumFulfillmentCanceled               OrderEventsEnum = "FULFILLMENT_CANCELED"
	OrderEventsEnumFulfillmentRestockedItems         OrderEventsEnum = "FULFILLMENT_RESTOCKED_ITEMS"
	OrderEventsEnumFulfillmentFulfilledItems         OrderEventsEnum = "FULFILLMENT_FULFILLED_ITEMS"
	OrderEventsEnumFulfillmentRefunded               OrderEventsEnum = "FULFILLMENT_REFUNDED"
	OrderEventsEnumFulfillmentReturned               OrderEventsEnum = "FULFILLMENT_RETURNED"
	OrderEventsEnumFulfillmentReplaced               OrderEventsEnum = "FULFILLMENT_REPLACED"
	OrderEventsEnumFulfillmentAwaitsApproval         OrderEventsEnum = "FULFILLMENT_AWAITS_APPROVAL"
	OrderEventsEnumTrackingUpdated                   OrderEventsEnum = "TRACKING_UPDATED"
	OrderEventsEnumNoteAdded                         OrderEventsEnum = "NOTE_ADDED"
	OrderEventsEnumOther                             OrderEventsEnum = "OTHER"
)

func (e OrderEventsEnum) IsValid() bool {
	switch e {
	case OrderEventsEnumDraftCreated, OrderEventsEnumDraftCreatedFromReplace, OrderEventsEnumAddedProducts, OrderEventsEnumRemovedProducts, OrderEventsEnumPlaced, OrderEventsEnumPlacedFromDraft, OrderEventsEnumOversoldItems, OrderEventsEnumCanceled, OrderEventsEnumOrderMarkedAsPaid, OrderEventsEnumOrderFullyPaid, OrderEventsEnumOrderReplacementCreated, OrderEventsEnumOrderDiscountAdded, OrderEventsEnumOrderDiscountAutomaticallyUpdated, OrderEventsEnumOrderDiscountUpdated, OrderEventsEnumOrderDiscountDeleted, OrderEventsEnumOrderLineDiscountUpdated, OrderEventsEnumOrderLineDiscountRemoved, OrderEventsEnumUpdatedAddress, OrderEventsEnumEmailSent, OrderEventsEnumConfirmed, OrderEventsEnumPaymentAuthorized, OrderEventsEnumPaymentCaptured, OrderEventsEnumExternalServiceNotification, OrderEventsEnumPaymentRefunded, OrderEventsEnumPaymentVoided, OrderEventsEnumPaymentFailed, OrderEventsEnumInvoiceRequested, OrderEventsEnumInvoiceGenerated, OrderEventsEnumInvoiceUpdated, OrderEventsEnumInvoiceSent, OrderEventsEnumFulfillmentCanceled, OrderEventsEnumFulfillmentRestockedItems, OrderEventsEnumFulfillmentFulfilledItems, OrderEventsEnumFulfillmentRefunded, OrderEventsEnumFulfillmentReturned, OrderEventsEnumFulfillmentReplaced, OrderEventsEnumFulfillmentAwaitsApproval, OrderEventsEnumTrackingUpdated, OrderEventsEnumNoteAdded, OrderEventsEnumOther:
		return true
	}
	return false
}

type OrderOriginEnum string

const (
	OrderOriginEnumCheckout OrderOriginEnum = OrderOriginEnum(model.CHECKOUT)
	OrderOriginEnumDraft    OrderOriginEnum = OrderOriginEnum(model.DRAFT)
	OrderOriginEnumReissue  OrderOriginEnum = OrderOriginEnum(model.REISSUE)
)

func (e OrderOriginEnum) IsValid() bool {
	switch e {
	case OrderOriginEnumCheckout, OrderOriginEnumDraft, OrderOriginEnumReissue:
		return true
	}
	return false
}

type OrderSettingsErrorCode string

const (
	OrderSettingsErrorCodeInvalid OrderSettingsErrorCode = "INVALID"
)

func (e OrderSettingsErrorCode) IsValid() bool {
	switch e {
	case OrderSettingsErrorCodeInvalid:
		return true
	}
	return false
}

type OrderSortField string

const (
	OrderSortFieldNumber            OrderSortField = "NUMBER"
	OrderSortFieldCreationDate      OrderSortField = "CREATION_DATE"
	OrderSortFieldCustomer          OrderSortField = "CUSTOMER"
	OrderSortFieldPayment           OrderSortField = "PAYMENT"
	OrderSortFieldFulfillmentStatus OrderSortField = "FULFILLMENT_STATUS"
)

func (e OrderSortField) IsValid() bool {
	switch e {
	case OrderSortFieldNumber, OrderSortFieldCreationDate, OrderSortFieldCustomer, OrderSortFieldPayment, OrderSortFieldFulfillmentStatus:
		return true
	}
	return false
}

type OrderStatus string

const (
	OrderStatusDraft              OrderStatus = OrderStatus(model.STATUS_DRAFT)
	OrderStatusUnconfirmed        OrderStatus = OrderStatus(model.UNCONFIRMED)
	OrderStatusUnfulfilled        OrderStatus = OrderStatus(model.UNFULFILLED)
	OrderStatusPartiallyFulfilled OrderStatus = OrderStatus(model.PARTIALLY_FULFILLED)
	OrderStatusPartiallyReturned  OrderStatus = OrderStatus(model.PARTIALLY_RETURNED)
	OrderStatusReturned           OrderStatus = OrderStatus(model.RETURNED)
	OrderStatusFulfilled          OrderStatus = OrderStatus(model.FULFILLED)
	OrderStatusCanceled           OrderStatus = OrderStatus(model.CANCELED)
)

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusDraft, OrderStatusUnconfirmed, OrderStatusUnfulfilled, OrderStatusPartiallyFulfilled, OrderStatusPartiallyReturned, OrderStatusReturned, OrderStatusFulfilled, OrderStatusCanceled:
		return true
	}
	return false
}

type OrderStatusFilter string

const (
	OrderStatusFilterReadyToFulfill     OrderStatusFilter = "READY_TO_FULFILL"
	OrderStatusFilterReadyToCapture     OrderStatusFilter = "READY_TO_CAPTURE"
	OrderStatusFilterUnfulfilled        OrderStatusFilter = "UNFULFILLED"
	OrderStatusFilterUnconfirmed        OrderStatusFilter = "UNCONFIRMED"
	OrderStatusFilterPartiallyFulfilled OrderStatusFilter = "PARTIALLY_FULFILLED"
	OrderStatusFilterFulfilled          OrderStatusFilter = "FULFILLED"
	OrderStatusFilterCanceled           OrderStatusFilter = "CANCELED"
)

func (e OrderStatusFilter) IsValid() bool {
	switch e {
	case OrderStatusFilterReadyToFulfill, OrderStatusFilterReadyToCapture, OrderStatusFilterUnfulfilled, OrderStatusFilterUnconfirmed, OrderStatusFilterPartiallyFulfilled, OrderStatusFilterFulfilled, OrderStatusFilterCanceled:
		return true
	}
	return false
}

type PageErrorCode string

const (
	PageErrorCodeGraphqlError             PageErrorCode = "GRAPHQL_ERROR"
	PageErrorCodeInvalid                  PageErrorCode = "INVALID"
	PageErrorCodeNotFound                 PageErrorCode = "NOT_FOUND"
	PageErrorCodeRequired                 PageErrorCode = "REQUIRED"
	PageErrorCodeUnique                   PageErrorCode = "UNIQUE"
	PageErrorCodeDuplicatedInputItem      PageErrorCode = "DUPLICATED_INPUT_ITEM"
	PageErrorCodeAttributeAlreadyAssigned PageErrorCode = "ATTRIBUTE_ALREADY_ASSIGNED"
)

func (e PageErrorCode) IsValid() bool {
	switch e {
	case PageErrorCodeGraphqlError, PageErrorCodeInvalid, PageErrorCodeNotFound, PageErrorCodeRequired, PageErrorCodeUnique, PageErrorCodeDuplicatedInputItem, PageErrorCodeAttributeAlreadyAssigned:
		return true
	}
	return false
}

type PageSortField string

const (
	PageSortFieldTitle           PageSortField = "TITLE"
	PageSortFieldSlug            PageSortField = "SLUG"
	PageSortFieldVisibility      PageSortField = "VISIBILITY"
	PageSortFieldCreationDate    PageSortField = "CREATION_DATE"
	PageSortFieldPublicationDate PageSortField = "PUBLICATION_DATE"
)

func (e PageSortField) IsValid() bool {
	switch e {
	case PageSortFieldTitle, PageSortFieldSlug, PageSortFieldVisibility, PageSortFieldCreationDate, PageSortFieldPublicationDate:
		return true
	}
	return false
}

type PageTypeSortField string

const (
	PageTypeSortFieldName PageTypeSortField = "NAME"
	PageTypeSortFieldSlug PageTypeSortField = "SLUG"
)

func (e PageTypeSortField) IsValid() bool {
	switch e {
	case PageTypeSortFieldName, PageTypeSortFieldSlug:
		return true
	}
	return false
}

type PaymentChargeStatusEnum string

const (
	PaymentChargeStatusEnumNotCharged        PaymentChargeStatusEnum = PaymentChargeStatusEnum(model.NOT_CHARGED)
	PaymentChargeStatusEnumPending           PaymentChargeStatusEnum = PaymentChargeStatusEnum(model.PENDING)
	PaymentChargeStatusEnumPartiallyCharged  PaymentChargeStatusEnum = PaymentChargeStatusEnum(model.PARTIALLY_CHARGED)
	PaymentChargeStatusEnumFullyCharged      PaymentChargeStatusEnum = PaymentChargeStatusEnum(model.FULLY_CHARGED)
	PaymentChargeStatusEnumPartiallyRefunded PaymentChargeStatusEnum = PaymentChargeStatusEnum(model.PARTIALLY_REFUNDED)
	PaymentChargeStatusEnumFullyRefunded     PaymentChargeStatusEnum = PaymentChargeStatusEnum(model.FULLY_REFUNDED)
	PaymentChargeStatusEnumRefused           PaymentChargeStatusEnum = PaymentChargeStatusEnum(model.REFUSED)
	PaymentChargeStatusEnumCancelled         PaymentChargeStatusEnum = PaymentChargeStatusEnum(model.CANCELLED)
)

func (e PaymentChargeStatusEnum) IsValid() bool {
	switch e {
	case PaymentChargeStatusEnumNotCharged, PaymentChargeStatusEnumPending, PaymentChargeStatusEnumPartiallyCharged, PaymentChargeStatusEnumFullyCharged, PaymentChargeStatusEnumPartiallyRefunded, PaymentChargeStatusEnumFullyRefunded, PaymentChargeStatusEnumRefused, PaymentChargeStatusEnumCancelled:
		return true
	}
	return false
}

type PaymentErrorCode string

const (
	PaymentErrorCodeBillingAddressNotSet     PaymentErrorCode = "BILLING_ADDRESS_NOT_SET"
	PaymentErrorCodeGraphqlError             PaymentErrorCode = "GRAPHQL_ERROR"
	PaymentErrorCodeInvalid                  PaymentErrorCode = "INVALID"
	PaymentErrorCodeNotFound                 PaymentErrorCode = "NOT_FOUND"
	PaymentErrorCodeRequired                 PaymentErrorCode = "REQUIRED"
	PaymentErrorCodeUnique                   PaymentErrorCode = "UNIQUE"
	PaymentErrorCodePartialPaymentNotAllowed PaymentErrorCode = "PARTIAL_PAYMENT_NOT_ALLOWED"
	PaymentErrorCodeShippingAddressNotSet    PaymentErrorCode = "SHIPPING_ADDRESS_NOT_SET"
	PaymentErrorCodeInvalidShippingMethod    PaymentErrorCode = "INVALID_SHIPPING_METHOD"
	PaymentErrorCodeShippingMethodNotSet     PaymentErrorCode = "SHIPPING_METHOD_NOT_SET"
	PaymentErrorCodePaymentError             PaymentErrorCode = "PAYMENT_ERROR"
	PaymentErrorCodeNotSupportedGateway      PaymentErrorCode = "NOT_SUPPORTED_GATEWAY"
	PaymentErrorCodeChannelInactive          PaymentErrorCode = "CHANNEL_INACTIVE"
)

func (e PaymentErrorCode) IsValid() bool {
	switch e {
	case PaymentErrorCodeBillingAddressNotSet, PaymentErrorCodeGraphqlError, PaymentErrorCodeInvalid, PaymentErrorCodeNotFound, PaymentErrorCodeRequired, PaymentErrorCodeUnique, PaymentErrorCodePartialPaymentNotAllowed, PaymentErrorCodeShippingAddressNotSet, PaymentErrorCodeInvalidShippingMethod, PaymentErrorCodeShippingMethodNotSet, PaymentErrorCodePaymentError, PaymentErrorCodeNotSupportedGateway, PaymentErrorCodeChannelInactive:
		return true
	}
	return false
}

type PermissionEnum string

const (
	PermissionEnumManageUsers                     PermissionEnum = "MANAGE_USERS"
	PermissionEnumManageStaff                     PermissionEnum = "MANAGE_STAFF"
	PermissionEnumImpersonateUser                 PermissionEnum = "IMPERSONATE_USER"
	PermissionEnumManageApps                      PermissionEnum = "MANAGE_APPS"
	PermissionEnumManageChannels                  PermissionEnum = "MANAGE_CHANNELS"
	PermissionEnumManageDiscounts                 PermissionEnum = "MANAGE_DISCOUNTS"
	PermissionEnumManagePlugins                   PermissionEnum = "MANAGE_PLUGINS"
	PermissionEnumManageGiftCard                  PermissionEnum = "MANAGE_GIFT_CARD"
	PermissionEnumManageMenus                     PermissionEnum = "MANAGE_MENUS"
	PermissionEnumManageOrders                    PermissionEnum = "MANAGE_ORDERS"
	PermissionEnumManagePages                     PermissionEnum = "MANAGE_PAGES"
	PermissionEnumManagePageTypesAndAttributes    PermissionEnum = "MANAGE_PAGE_TYPES_AND_ATTRIBUTES"
	PermissionEnumHandlePayments                  PermissionEnum = "HANDLE_PAYMENTS"
	PermissionEnumManageProducts                  PermissionEnum = "MANAGE_PRODUCTS"
	PermissionEnumManageProductTypesAndAttributes PermissionEnum = "MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES"
	PermissionEnumManageShipping                  PermissionEnum = "MANAGE_SHIPPING"
	PermissionEnumManageSettings                  PermissionEnum = "MANAGE_SETTINGS"
	PermissionEnumManageTranslations              PermissionEnum = "MANAGE_TRANSLATIONS"
	PermissionEnumManageCheckouts                 PermissionEnum = "MANAGE_CHECKOUTS"
)

func (e PermissionEnum) IsValid() bool {
	switch e {
	case PermissionEnumManageUsers, PermissionEnumManageStaff, PermissionEnumImpersonateUser, PermissionEnumManageApps, PermissionEnumManageChannels, PermissionEnumManageDiscounts, PermissionEnumManagePlugins, PermissionEnumManageGiftCard, PermissionEnumManageMenus, PermissionEnumManageOrders, PermissionEnumManagePages, PermissionEnumManagePageTypesAndAttributes, PermissionEnumHandlePayments, PermissionEnumManageProducts, PermissionEnumManageProductTypesAndAttributes, PermissionEnumManageShipping, PermissionEnumManageSettings, PermissionEnumManageTranslations, PermissionEnumManageCheckouts:
		return true
	}
	return false
}

type PermissionGroupErrorCode string

const (
	PermissionGroupErrorCodeAssignNonStaffMember        PermissionGroupErrorCode = "ASSIGN_NON_STAFF_MEMBER"
	PermissionGroupErrorCodeDuplicatedInputItem         PermissionGroupErrorCode = "DUPLICATED_INPUT_ITEM"
	PermissionGroupErrorCodeCannotRemoveFromLastGroup   PermissionGroupErrorCode = "CANNOT_REMOVE_FROM_LAST_GROUP"
	PermissionGroupErrorCodeLeftNotManageablePermission PermissionGroupErrorCode = "LEFT_NOT_MANAGEABLE_PERMISSION"
	PermissionGroupErrorCodeOutOfScopePermission        PermissionGroupErrorCode = "OUT_OF_SCOPE_PERMISSION"
	PermissionGroupErrorCodeOutOfScopeUser              PermissionGroupErrorCode = "OUT_OF_SCOPE_USER"
	PermissionGroupErrorCodeRequired                    PermissionGroupErrorCode = "REQUIRED"
	PermissionGroupErrorCodeUnique                      PermissionGroupErrorCode = "UNIQUE"
)

func (e PermissionGroupErrorCode) IsValid() bool {
	switch e {
	case PermissionGroupErrorCodeAssignNonStaffMember, PermissionGroupErrorCodeDuplicatedInputItem, PermissionGroupErrorCodeCannotRemoveFromLastGroup, PermissionGroupErrorCodeLeftNotManageablePermission, PermissionGroupErrorCodeOutOfScopePermission, PermissionGroupErrorCodeOutOfScopeUser, PermissionGroupErrorCodeRequired, PermissionGroupErrorCodeUnique:
		return true
	}
	return false
}

type PermissionGroupSortField string

const (
	PermissionGroupSortFieldName PermissionGroupSortField = "NAME"
)

func (e PermissionGroupSortField) IsValid() bool {
	switch e {
	case PermissionGroupSortFieldName:
		return true
	}
	return false
}

type PluginConfigurationType string

const (
	PluginConfigurationTypePerChannel PluginConfigurationType = "PER_CHANNEL"
	PluginConfigurationTypeGlobal     PluginConfigurationType = "GLOBAL"
)

func (e PluginConfigurationType) IsValid() bool {
	switch e {
	case PluginConfigurationTypePerChannel, PluginConfigurationTypeGlobal:
		return true
	}
	return false
}

type PluginErrorCode string

const (
	PluginErrorCodeGraphqlError        PluginErrorCode = "GRAPHQL_ERROR"
	PluginErrorCodeInvalid             PluginErrorCode = "INVALID"
	PluginErrorCodePluginMisconfigured PluginErrorCode = "PLUGIN_MISCONFIGURED"
	PluginErrorCodeNotFound            PluginErrorCode = "NOT_FOUND"
	PluginErrorCodeRequired            PluginErrorCode = "REQUIRED"
	PluginErrorCodeUnique              PluginErrorCode = "UNIQUE"
)

func (e PluginErrorCode) IsValid() bool {
	switch e {
	case PluginErrorCodeGraphqlError, PluginErrorCodeInvalid, PluginErrorCodePluginMisconfigured, PluginErrorCodeNotFound, PluginErrorCodeRequired, PluginErrorCodeUnique:
		return true
	}
	return false
}

type PluginSortField string

const (
	PluginSortFieldName     PluginSortField = "NAME"
	PluginSortFieldIsActive PluginSortField = "IS_ACTIVE"
)

func (e PluginSortField) IsValid() bool {
	switch e {
	case PluginSortFieldName, PluginSortFieldIsActive:
		return true
	}
	return false
}

type PostalCodeRuleInclusionTypeEnum string

const (
	PostalCodeRuleInclusionTypeEnumInclude PostalCodeRuleInclusionTypeEnum = "INCLUDE"
	PostalCodeRuleInclusionTypeEnumExclude PostalCodeRuleInclusionTypeEnum = "EXCLUDE"
)

func (e PostalCodeRuleInclusionTypeEnum) IsValid() bool {
	switch e {
	case PostalCodeRuleInclusionTypeEnumInclude, PostalCodeRuleInclusionTypeEnumExclude:
		return true
	}
	return false
}

type ProductAttributeType string

const (
	ProductAttributeTypeProduct ProductAttributeType = "PRODUCT"
	ProductAttributeTypeVariant ProductAttributeType = "VARIANT"
)

func (e ProductAttributeType) IsValid() bool {
	switch e {
	case ProductAttributeTypeProduct, ProductAttributeTypeVariant:
		return true
	}
	return false
}

type ProductErrorCode string

const (
	ProductErrorCodeAlreadyExists                     ProductErrorCode = "ALREADY_EXISTS"
	ProductErrorCodeAttributeAlreadyAssigned          ProductErrorCode = "ATTRIBUTE_ALREADY_ASSIGNED"
	ProductErrorCodeAttributeCannotBeAssigned         ProductErrorCode = "ATTRIBUTE_CANNOT_BE_ASSIGNED"
	ProductErrorCodeAttributeVariantsDisabled         ProductErrorCode = "ATTRIBUTE_VARIANTS_DISABLED"
	ProductErrorCodeDuplicatedInputItem               ProductErrorCode = "DUPLICATED_INPUT_ITEM"
	ProductErrorCodeGraphqlError                      ProductErrorCode = "GRAPHQL_ERROR"
	ProductErrorCodeInvalid                           ProductErrorCode = "INVALID"
	ProductErrorCodeProductWithoutCategory            ProductErrorCode = "PRODUCT_WITHOUT_CATEGORY"
	ProductErrorCodeNotProductsImage                  ProductErrorCode = "NOT_PRODUCTS_IMAGE"
	ProductErrorCodeNotProductsVariant                ProductErrorCode = "NOT_PRODUCTS_VARIANT"
	ProductErrorCodeNotFound                          ProductErrorCode = "NOT_FOUND"
	ProductErrorCodeRequired                          ProductErrorCode = "REQUIRED"
	ProductErrorCodeUnique                            ProductErrorCode = "UNIQUE"
	ProductErrorCodeVariantNoDigitalContent           ProductErrorCode = "VARIANT_NO_DIGITAL_CONTENT"
	ProductErrorCodeCannotManageProductWithoutVariant ProductErrorCode = "CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT"
	ProductErrorCodeProductNotAssignedToChannel       ProductErrorCode = "PRODUCT_NOT_ASSIGNED_TO_CHANNEL"
	ProductErrorCodeUnsupportedMediaProvider          ProductErrorCode = "UNSUPPORTED_MEDIA_PROVIDER"
)

func (e ProductErrorCode) IsValid() bool {
	switch e {
	case ProductErrorCodeAlreadyExists, ProductErrorCodeAttributeAlreadyAssigned, ProductErrorCodeAttributeCannotBeAssigned, ProductErrorCodeAttributeVariantsDisabled, ProductErrorCodeDuplicatedInputItem, ProductErrorCodeGraphqlError, ProductErrorCodeInvalid, ProductErrorCodeProductWithoutCategory, ProductErrorCodeNotProductsImage, ProductErrorCodeNotProductsVariant, ProductErrorCodeNotFound, ProductErrorCodeRequired, ProductErrorCodeUnique, ProductErrorCodeVariantNoDigitalContent, ProductErrorCodeCannotManageProductWithoutVariant, ProductErrorCodeProductNotAssignedToChannel, ProductErrorCodeUnsupportedMediaProvider:
		return true
	}
	return false
}

type ProductFieldEnum string

const (
	ProductFieldEnumName          ProductFieldEnum = "NAME"
	ProductFieldEnumDescription   ProductFieldEnum = "DESCRIPTION"
	ProductFieldEnumProductType   ProductFieldEnum = "PRODUCT_TYPE"
	ProductFieldEnumCategory      ProductFieldEnum = "CATEGORY"
	ProductFieldEnumProductWeight ProductFieldEnum = "PRODUCT_WEIGHT"
	ProductFieldEnumCollections   ProductFieldEnum = "COLLECTIONS"
	ProductFieldEnumChargeTaxes   ProductFieldEnum = "CHARGE_TAXES"
	ProductFieldEnumProductMedia  ProductFieldEnum = "PRODUCT_MEDIA"
	ProductFieldEnumVariantID     ProductFieldEnum = "VARIANT_ID"
	ProductFieldEnumVariantSku    ProductFieldEnum = "VARIANT_SKU"
	ProductFieldEnumVariantWeight ProductFieldEnum = "VARIANT_WEIGHT"
	ProductFieldEnumVariantMedia  ProductFieldEnum = "VARIANT_MEDIA"
)

func (e ProductFieldEnum) IsValid() bool {
	switch e {
	case ProductFieldEnumName, ProductFieldEnumDescription, ProductFieldEnumProductType, ProductFieldEnumCategory, ProductFieldEnumProductWeight, ProductFieldEnumCollections, ProductFieldEnumChargeTaxes, ProductFieldEnumProductMedia, ProductFieldEnumVariantID, ProductFieldEnumVariantSku, ProductFieldEnumVariantWeight, ProductFieldEnumVariantMedia:
		return true
	}
	return false
}

type ProductMediaType string

const (
	ProductMediaTypeImage ProductMediaType = model.IMAGE
	ProductMediaTypeVideo ProductMediaType = model.VIDEO
)

func (e ProductMediaType) IsValid() bool {
	switch e {
	case ProductMediaTypeImage, ProductMediaTypeVideo:
		return true
	}
	return false
}

type ProductOrderField string

const (
	ProductOrderFieldName            ProductOrderField = "NAME"
	ProductOrderFieldRank            ProductOrderField = "RANK"
	ProductOrderFieldPrice           ProductOrderField = "PRICE"
	ProductOrderFieldMinimalPrice    ProductOrderField = "MINIMAL_PRICE"
	ProductOrderFieldDate            ProductOrderField = "DATE"
	ProductOrderFieldType            ProductOrderField = "TYPE"
	ProductOrderFieldPublished       ProductOrderField = "PUBLISHED"
	ProductOrderFieldPublicationDate ProductOrderField = "PUBLICATION_DATE"
	ProductOrderFieldCollection      ProductOrderField = "COLLECTION"
	ProductOrderFieldRating          ProductOrderField = "RATING"
)

func (e ProductOrderField) IsValid() bool {
	switch e {
	case ProductOrderFieldName, ProductOrderFieldRank, ProductOrderFieldPrice, ProductOrderFieldMinimalPrice, ProductOrderFieldDate, ProductOrderFieldType, ProductOrderFieldPublished, ProductOrderFieldPublicationDate, ProductOrderFieldCollection, ProductOrderFieldRating:
		return true
	}
	return false
}

type ProductTypeConfigurable string

const (
	ProductTypeConfigurableConfigurable ProductTypeConfigurable = "CONFIGURABLE"
	ProductTypeConfigurableSimple       ProductTypeConfigurable = "SIMPLE"
)

func (e ProductTypeConfigurable) IsValid() bool {
	switch e {
	case ProductTypeConfigurableConfigurable, ProductTypeConfigurableSimple:
		return true
	}
	return false
}

type ProductTypeEnum string

const (
	ProductTypeEnumDigital   ProductTypeEnum = "DIGITAL"
	ProductTypeEnumShippable ProductTypeEnum = "SHIPPABLE"
)

func (e ProductTypeEnum) IsValid() bool {
	switch e {
	case ProductTypeEnumDigital, ProductTypeEnumShippable:
		return true
	}
	return false
}

type ProductTypeKindEnum string

const (
	ProductTypeKindEnumNormal   ProductTypeKindEnum = ProductTypeKindEnum(model.NORMAL)
	ProductTypeKindEnumGiftCard ProductTypeKindEnum = ProductTypeKindEnum(model.GIFT_CARD)
)

func (e ProductTypeKindEnum) IsValid() bool {
	switch e {
	case ProductTypeKindEnumNormal, ProductTypeKindEnumGiftCard:
		return true
	}
	return false
}

type ProductTypeSortField string

const (
	ProductTypeSortFieldName             ProductTypeSortField = "NAME"
	ProductTypeSortFieldDigital          ProductTypeSortField = "DIGITAL"
	ProductTypeSortFieldShippingRequired ProductTypeSortField = "SHIPPING_REQUIRED"
)

func (e ProductTypeSortField) IsValid() bool {
	switch e {
	case ProductTypeSortFieldName, ProductTypeSortFieldDigital, ProductTypeSortFieldShippingRequired:
		return true
	}
	return false
}

type ReportingPeriod string

const (
	ReportingPeriodToday     ReportingPeriod = "TODAY"
	ReportingPeriodThisMonth ReportingPeriod = "THIS_MONTH"
)

func (e ReportingPeriod) IsValid() bool {
	switch e {
	case ReportingPeriodToday, ReportingPeriodThisMonth:
		return true
	}
	return false
}

type SaleSortField string

const (
	SaleSortFieldName      SaleSortField = "NAME"
	SaleSortFieldStartDate SaleSortField = "START_DATE"
	SaleSortFieldEndDate   SaleSortField = "END_DATE"
	SaleSortFieldValue     SaleSortField = "VALUE"
	SaleSortFieldType      SaleSortField = "TYPE"
)

func (e SaleSortField) IsValid() bool {
	switch e {
	case SaleSortFieldName, SaleSortFieldStartDate, SaleSortFieldEndDate, SaleSortFieldValue, SaleSortFieldType:
		return true
	}
	return false
}

type SaleType string

const (
	SaleTypeFixed      SaleType = model.FIXED
	SaleTypePercentage SaleType = model.PERCENTAGE
)

func (e SaleType) IsValid() bool {
	switch e {
	case SaleTypeFixed, SaleTypePercentage:
		return true
	}
	return false
}

type ShippingErrorCode string

const (
	ShippingErrorCodeAlreadyExists       ShippingErrorCode = "ALREADY_EXISTS"
	ShippingErrorCodeGraphqlError        ShippingErrorCode = "GRAPHQL_ERROR"
	ShippingErrorCodeInvalid             ShippingErrorCode = "INVALID"
	ShippingErrorCodeMaxLessThanMin      ShippingErrorCode = "MAX_LESS_THAN_MIN"
	ShippingErrorCodeNotFound            ShippingErrorCode = "NOT_FOUND"
	ShippingErrorCodeRequired            ShippingErrorCode = "REQUIRED"
	ShippingErrorCodeUnique              ShippingErrorCode = "UNIQUE"
	ShippingErrorCodeDuplicatedInputItem ShippingErrorCode = "DUPLICATED_INPUT_ITEM"
)

func (e ShippingErrorCode) IsValid() bool {
	switch e {
	case ShippingErrorCodeAlreadyExists, ShippingErrorCodeGraphqlError, ShippingErrorCodeInvalid, ShippingErrorCodeMaxLessThanMin, ShippingErrorCodeNotFound, ShippingErrorCodeRequired, ShippingErrorCodeUnique, ShippingErrorCodeDuplicatedInputItem:
		return true
	}
	return false
}

type ShippingMethodTypeEnum string

const (
	ShippingMethodTypeEnumPrice  ShippingMethodTypeEnum = model.PRICE_BASED
	ShippingMethodTypeEnumWeight ShippingMethodTypeEnum = model.WEIGHT_BASED
)

func (e ShippingMethodTypeEnum) IsValid() bool {
	switch e {
	case ShippingMethodTypeEnumPrice, ShippingMethodTypeEnumWeight:
		return true
	}
	return false
}

type ShopErrorCode string

const (
	ShopErrorCodeAlreadyExists       ShopErrorCode = "ALREADY_EXISTS"
	ShopErrorCodeCannotFetchTaxRates ShopErrorCode = "CANNOT_FETCH_TAX_RATES"
	ShopErrorCodeGraphqlError        ShopErrorCode = "GRAPHQL_ERROR"
	ShopErrorCodeInvalid             ShopErrorCode = "INVALID"
	ShopErrorCodeNotFound            ShopErrorCode = "NOT_FOUND"
	ShopErrorCodeRequired            ShopErrorCode = "REQUIRED"
	ShopErrorCodeUnique              ShopErrorCode = "UNIQUE"
)

func (e ShopErrorCode) IsValid() bool {
	switch e {
	case ShopErrorCodeAlreadyExists, ShopErrorCodeCannotFetchTaxRates, ShopErrorCodeGraphqlError, ShopErrorCodeInvalid, ShopErrorCodeNotFound, ShopErrorCodeRequired, ShopErrorCodeUnique:
		return true
	}
	return false
}

type StaffMemberStatus string

const (
	StaffMemberStatusActive      StaffMemberStatus = StaffMemberStatus(model.ACTIVATED)
	StaffMemberStatusDeactivated StaffMemberStatus = StaffMemberStatus(model.DEACTIVATED)
)

func (e StaffMemberStatus) IsValid() bool {
	switch e {
	case StaffMemberStatusActive, StaffMemberStatusDeactivated:
		return true
	}
	return false
}

type StockAvailability string

const (
	StockAvailabilityInStock    StockAvailability = "IN_STOCK"
	StockAvailabilityOutOfStock StockAvailability = "OUT_OF_STOCK"
)

func (e StockAvailability) IsValid() bool {
	switch e {
	case StockAvailabilityInStock, StockAvailabilityOutOfStock:
		return true
	}
	return false
}

type StockErrorCode string

const (
	StockErrorCodeAlreadyExists StockErrorCode = "ALREADY_EXISTS"
	StockErrorCodeGraphqlError  StockErrorCode = "GRAPHQL_ERROR"
	StockErrorCodeInvalid       StockErrorCode = "INVALID"
	StockErrorCodeNotFound      StockErrorCode = "NOT_FOUND"
	StockErrorCodeRequired      StockErrorCode = "REQUIRED"
	StockErrorCodeUnique        StockErrorCode = "UNIQUE"
)

func (e StockErrorCode) IsValid() bool {
	switch e {
	case StockErrorCodeAlreadyExists, StockErrorCodeGraphqlError, StockErrorCodeInvalid, StockErrorCodeNotFound, StockErrorCodeRequired, StockErrorCodeUnique:
		return true
	}
	return false
}

type StorePaymentMethodEnum string

const (
	StorePaymentMethodEnumOnSession  StorePaymentMethodEnum = "ON_SESSION"
	StorePaymentMethodEnumOffSession StorePaymentMethodEnum = "OFF_SESSION"
	StorePaymentMethodEnumNone       StorePaymentMethodEnum = "NONE"
)

func (e StorePaymentMethodEnum) IsValid() bool {
	switch e {
	case StorePaymentMethodEnumOnSession, StorePaymentMethodEnumOffSession, StorePaymentMethodEnumNone:
		return true
	}
	return false
}

type TimePeriodTypeEnum string

const (
	TimePeriodTypeEnumDay   TimePeriodTypeEnum = TimePeriodTypeEnum(model.DAY)
	TimePeriodTypeEnumWeek  TimePeriodTypeEnum = TimePeriodTypeEnum(model.WEEK)
	TimePeriodTypeEnumMonth TimePeriodTypeEnum = TimePeriodTypeEnum(model.MONTH)
	TimePeriodTypeEnumYear  TimePeriodTypeEnum = TimePeriodTypeEnum(model.YEAR)
)

func (e TimePeriodTypeEnum) IsValid() bool {
	switch e {
	case TimePeriodTypeEnumDay, TimePeriodTypeEnumWeek, TimePeriodTypeEnumMonth, TimePeriodTypeEnumYear:
		return true
	}
	return false
}

type TransactionKind string

const (
	TransactionKindExternal        TransactionKind = model.EXTERNAL
	TransactionKindAuth            TransactionKind = model.AUTH
	TransactionKindPending         TransactionKind = model.PENDING
	TransactionKindActionToConfirm TransactionKind = model.ACTION_TO_CONFIRM
	TransactionKindRefund          TransactionKind = model.REFUND
	TransactionKindRefundOngoing   TransactionKind = model.REFUND_ONGOING
	TransactionKindCapture         TransactionKind = model.CAPTURE
	TransactionKindVoid            TransactionKind = model.VOID
	TransactionKindConfirm         TransactionKind = model.CONFIRM
	TransactionKindCancel          TransactionKind = model.CANCEL
)

func (e TransactionKind) IsValid() bool {
	switch e {
	case TransactionKindExternal, TransactionKindAuth, TransactionKindPending, TransactionKindActionToConfirm, TransactionKindRefund, TransactionKindRefundOngoing, TransactionKindCapture, TransactionKindVoid, TransactionKindConfirm, TransactionKindCancel:
		return true
	}
	return false
}

type TranslatableKinds string

const (
	TranslatableKindsAttribute      TranslatableKinds = "ATTRIBUTE"
	TranslatableKindsAttributeValue TranslatableKinds = "ATTRIBUTE_VALUE"
	TranslatableKindsCategory       TranslatableKinds = "CATEGORY"
	TranslatableKindsCollection     TranslatableKinds = "COLLECTION"
	TranslatableKindsMenuItem       TranslatableKinds = "MENU_ITEM"
	TranslatableKindsPage           TranslatableKinds = "PAGE"
	TranslatableKindsProduct        TranslatableKinds = "PRODUCT"
	TranslatableKindsSale           TranslatableKinds = "SALE"
	TranslatableKindsShippingMethod TranslatableKinds = "SHIPPING_METHOD"
	TranslatableKindsVariant        TranslatableKinds = "VARIANT"
	TranslatableKindsVoucher        TranslatableKinds = "VOUCHER"
)

func (e TranslatableKinds) IsValid() bool {
	switch e {
	case TranslatableKindsAttribute, TranslatableKindsAttributeValue, TranslatableKindsCategory, TranslatableKindsCollection, TranslatableKindsMenuItem, TranslatableKindsPage, TranslatableKindsProduct, TranslatableKindsSale, TranslatableKindsShippingMethod, TranslatableKindsVariant, TranslatableKindsVoucher:
		return true
	}
	return false
}

type TranslationErrorCode string

const (
	TranslationErrorCodeGraphqlError TranslationErrorCode = "GRAPHQL_ERROR"
	TranslationErrorCodeNotFound     TranslationErrorCode = "NOT_FOUND"
	TranslationErrorCodeRequired     TranslationErrorCode = "REQUIRED"
)

func (e TranslationErrorCode) IsValid() bool {
	switch e {
	case TranslationErrorCodeGraphqlError, TranslationErrorCodeNotFound, TranslationErrorCodeRequired:
		return true
	}
	return false
}

type UploadErrorCode string

const (
	UploadErrorCodeGraphqlError UploadErrorCode = "GRAPHQL_ERROR"
)

func (e UploadErrorCode) IsValid() bool {
	switch e {
	case UploadErrorCodeGraphqlError:
		return true
	}
	return false
}

type UserSortField string

const (
	UserSortFieldFirstName  UserSortField = "FIRST_NAME"
	UserSortFieldLastName   UserSortField = "LAST_NAME"
	UserSortFieldEmail      UserSortField = "EMAIL"
	UserSortFieldOrderCount UserSortField = "ORDER_COUNT"
)

func (e UserSortField) IsValid() bool {
	switch e {
	case UserSortFieldFirstName, UserSortFieldLastName, UserSortFieldEmail, UserSortFieldOrderCount:
		return true
	}
	return false
}

type VariantAttributeScope string

const (
	VariantAttributeScopeAll                 VariantAttributeScope = "ALL"
	VariantAttributeScopeVariantSelection    VariantAttributeScope = "VARIANT_SELECTION"
	VariantAttributeScopeNotVariantSelection VariantAttributeScope = "NOT_VARIANT_SELECTION"
)

func (e VariantAttributeScope) IsValid() bool {
	switch e {
	case VariantAttributeScopeAll, VariantAttributeScopeVariantSelection, VariantAttributeScopeNotVariantSelection:
		return true
	}
	return false
}

type VolumeUnitsEnum string

const (
	VolumeUnitsEnumCubicMillimeter VolumeUnitsEnum = measurement.CUBIC_MILLIMETER
	VolumeUnitsEnumCubicCentimeter VolumeUnitsEnum = measurement.CUBIC_CENTIMETER
	VolumeUnitsEnumCubicDecimeter  VolumeUnitsEnum = measurement.CUBIC_DECIMETER
	VolumeUnitsEnumCubicMeter      VolumeUnitsEnum = measurement.CUBIC_METER
	VolumeUnitsEnumLiter           VolumeUnitsEnum = measurement.LITER
	VolumeUnitsEnumCubicFoot       VolumeUnitsEnum = measurement.CUBIC_FOOT
	VolumeUnitsEnumCubicInch       VolumeUnitsEnum = measurement.CUBIC_INCH
	VolumeUnitsEnumCubicYard       VolumeUnitsEnum = measurement.CUBIC_YARD
	VolumeUnitsEnumQt              VolumeUnitsEnum = measurement.QT
	VolumeUnitsEnumPint            VolumeUnitsEnum = measurement.PINT
	VolumeUnitsEnumFlOz            VolumeUnitsEnum = measurement.FL_OZ
	VolumeUnitsEnumAcreIn          VolumeUnitsEnum = measurement.ACRE_IN
	VolumeUnitsEnumAcreFt          VolumeUnitsEnum = measurement.ACRE_FT
)

func (e VolumeUnitsEnum) IsValid() bool {
	switch e {
	case VolumeUnitsEnumCubicMillimeter, VolumeUnitsEnumCubicCentimeter, VolumeUnitsEnumCubicDecimeter, VolumeUnitsEnumCubicMeter, VolumeUnitsEnumLiter, VolumeUnitsEnumCubicFoot, VolumeUnitsEnumCubicInch, VolumeUnitsEnumCubicYard, VolumeUnitsEnumQt, VolumeUnitsEnumPint, VolumeUnitsEnumFlOz, VolumeUnitsEnumAcreIn, VolumeUnitsEnumAcreFt:
		return true
	}
	return false
}

type VoucherDiscountType string

const (
	VoucherDiscountTypeFixed      VoucherDiscountType = model.FIXED
	VoucherDiscountTypePercentage VoucherDiscountType = model.PERCENTAGE
	VoucherDiscountTypeShipping   VoucherDiscountType = model.SHIPPING
)

func (e VoucherDiscountType) IsValid() bool {
	switch e {
	case VoucherDiscountTypeFixed, VoucherDiscountTypePercentage, VoucherDiscountTypeShipping:
		return true
	}
	return false
}

type VoucherSortField string

const (
	VoucherSortFieldCode               VoucherSortField = "CODE"
	VoucherSortFieldStartDate          VoucherSortField = "START_DATE"
	VoucherSortFieldEndDate            VoucherSortField = "END_DATE"
	VoucherSortFieldValue              VoucherSortField = "VALUE"
	VoucherSortFieldType               VoucherSortField = "TYPE"
	VoucherSortFieldUsageLimit         VoucherSortField = "USAGE_LIMIT"
	VoucherSortFieldMinimumSpentAmount VoucherSortField = "MINIMUM_SPENT_AMOUNT"
)

func (e VoucherSortField) IsValid() bool {
	switch e {
	case VoucherSortFieldCode, VoucherSortFieldStartDate, VoucherSortFieldEndDate, VoucherSortFieldValue, VoucherSortFieldType, VoucherSortFieldUsageLimit, VoucherSortFieldMinimumSpentAmount:
		return true
	}
	return false
}

type VoucherTypeEnum string

const (
	VoucherTypeEnumShipping        VoucherTypeEnum = model.SHIPPING
	VoucherTypeEnumEntireOrder     VoucherTypeEnum = model.ENTIRE_ORDER
	VoucherTypeEnumSpecificProduct VoucherTypeEnum = model.SPECIFIC_PRODUCT
)

func (e VoucherTypeEnum) IsValid() bool {
	switch e {
	case VoucherTypeEnumShipping, VoucherTypeEnumEntireOrder, VoucherTypeEnumSpecificProduct:
		return true
	}
	return false
}

type WarehouseClickAndCollectOptionEnum string

const (
	WarehouseClickAndCollectOptionEnumDisabled WarehouseClickAndCollectOptionEnum = WarehouseClickAndCollectOptionEnum(model.DISABLED)
	WarehouseClickAndCollectOptionEnumLocal    WarehouseClickAndCollectOptionEnum = WarehouseClickAndCollectOptionEnum(model.LOCAL_STOCK)
	WarehouseClickAndCollectOptionEnumAll      WarehouseClickAndCollectOptionEnum = WarehouseClickAndCollectOptionEnum(model.ALL_WAREHOUSES)
)

func (e WarehouseClickAndCollectOptionEnum) IsValid() bool {
	switch e {
	case WarehouseClickAndCollectOptionEnumDisabled, WarehouseClickAndCollectOptionEnumLocal, WarehouseClickAndCollectOptionEnumAll:
		return true
	}
	return false
}

type WarehouseErrorCode string

const (
	WarehouseErrorCodeAlreadyExists WarehouseErrorCode = "ALREADY_EXISTS"
	WarehouseErrorCodeGraphqlError  WarehouseErrorCode = "GRAPHQL_ERROR"
	WarehouseErrorCodeInvalid       WarehouseErrorCode = "INVALID"
	WarehouseErrorCodeNotFound      WarehouseErrorCode = "NOT_FOUND"
	WarehouseErrorCodeRequired      WarehouseErrorCode = "REQUIRED"
	WarehouseErrorCodeUnique        WarehouseErrorCode = "UNIQUE"
)

func (e WarehouseErrorCode) IsValid() bool {
	switch e {
	case WarehouseErrorCodeAlreadyExists, WarehouseErrorCodeGraphqlError, WarehouseErrorCodeInvalid, WarehouseErrorCodeNotFound, WarehouseErrorCodeRequired, WarehouseErrorCodeUnique:
		return true
	}
	return false
}

type WarehouseSortField string

const (
	WarehouseSortFieldName WarehouseSortField = "NAME"
)

func (e WarehouseSortField) IsValid() bool {
	switch e {
	case WarehouseSortFieldName:
		return true
	}
	return false
}

type WebhookErrorCode string

const (
	WebhookErrorCodeGraphqlError WebhookErrorCode = "GRAPHQL_ERROR"
	WebhookErrorCodeInvalid      WebhookErrorCode = "INVALID"
	WebhookErrorCodeNotFound     WebhookErrorCode = "NOT_FOUND"
	WebhookErrorCodeRequired     WebhookErrorCode = "REQUIRED"
	WebhookErrorCodeUnique       WebhookErrorCode = "UNIQUE"
)

func (e WebhookErrorCode) IsValid() bool {
	switch e {
	case WebhookErrorCodeGraphqlError, WebhookErrorCodeInvalid, WebhookErrorCodeNotFound, WebhookErrorCodeRequired, WebhookErrorCodeUnique:
		return true
	}
	return false
}

type WebhookEventTypeEnum string

const (
	WebhookEventTypeEnumAnyEvents                 WebhookEventTypeEnum = "ANY_EVENTS"
	WebhookEventTypeEnumOrderCreated              WebhookEventTypeEnum = "ORDER_CREATED"
	WebhookEventTypeEnumOrderConfirmed            WebhookEventTypeEnum = "ORDER_CONFIRMED"
	WebhookEventTypeEnumOrderFullyPaid            WebhookEventTypeEnum = "ORDER_FULLY_PAID"
	WebhookEventTypeEnumOrderUpdated              WebhookEventTypeEnum = "ORDER_UPDATED"
	WebhookEventTypeEnumOrderCancelled            WebhookEventTypeEnum = "ORDER_CANCELLED"
	WebhookEventTypeEnumOrderFulfilled            WebhookEventTypeEnum = "ORDER_FULFILLED"
	WebhookEventTypeEnumDraftOrderCreated         WebhookEventTypeEnum = "DRAFT_ORDER_CREATED"
	WebhookEventTypeEnumDraftOrderUpdated         WebhookEventTypeEnum = "DRAFT_ORDER_UPDATED"
	WebhookEventTypeEnumDraftOrderDeleted         WebhookEventTypeEnum = "DRAFT_ORDER_DELETED"
	WebhookEventTypeEnumSaleCreated               WebhookEventTypeEnum = "SALE_CREATED"
	WebhookEventTypeEnumSaleUpdated               WebhookEventTypeEnum = "SALE_UPDATED"
	WebhookEventTypeEnumSaleDeleted               WebhookEventTypeEnum = "SALE_DELETED"
	WebhookEventTypeEnumInvoiceRequested          WebhookEventTypeEnum = "INVOICE_REQUESTED"
	WebhookEventTypeEnumInvoiceDeleted            WebhookEventTypeEnum = "INVOICE_DELETED"
	WebhookEventTypeEnumInvoiceSent               WebhookEventTypeEnum = "INVOICE_SENT"
	WebhookEventTypeEnumCustomerCreated           WebhookEventTypeEnum = "CUSTOMER_CREATED"
	WebhookEventTypeEnumCustomerUpdated           WebhookEventTypeEnum = "CUSTOMER_UPDATED"
	WebhookEventTypeEnumProductCreated            WebhookEventTypeEnum = "PRODUCT_CREATED"
	WebhookEventTypeEnumProductUpdated            WebhookEventTypeEnum = "PRODUCT_UPDATED"
	WebhookEventTypeEnumProductDeleted            WebhookEventTypeEnum = "PRODUCT_DELETED"
	WebhookEventTypeEnumProductVariantCreated     WebhookEventTypeEnum = "PRODUCT_VARIANT_CREATED"
	WebhookEventTypeEnumProductVariantUpdated     WebhookEventTypeEnum = "PRODUCT_VARIANT_UPDATED"
	WebhookEventTypeEnumProductVariantDeleted     WebhookEventTypeEnum = "PRODUCT_VARIANT_DELETED"
	WebhookEventTypeEnumProductVariantOutOfStock  WebhookEventTypeEnum = "PRODUCT_VARIANT_OUT_OF_STOCK"
	WebhookEventTypeEnumProductVariantBackInStock WebhookEventTypeEnum = "PRODUCT_VARIANT_BACK_IN_STOCK"
	WebhookEventTypeEnumCheckoutCreated           WebhookEventTypeEnum = "CHECKOUT_CREATED"
	WebhookEventTypeEnumCheckoutUpdated           WebhookEventTypeEnum = "CHECKOUT_UPDATED"
	WebhookEventTypeEnumFulfillmentCreated        WebhookEventTypeEnum = "FULFILLMENT_CREATED"
	WebhookEventTypeEnumFulfillmentCanceled       WebhookEventTypeEnum = "FULFILLMENT_CANCELED"
	WebhookEventTypeEnumNotifyUser                WebhookEventTypeEnum = "NOTIFY_USER"
	WebhookEventTypeEnumPageCreated               WebhookEventTypeEnum = "PAGE_CREATED"
	WebhookEventTypeEnumPageUpdated               WebhookEventTypeEnum = "PAGE_UPDATED"
	WebhookEventTypeEnumPageDeleted               WebhookEventTypeEnum = "PAGE_DELETED"
	WebhookEventTypeEnumPaymentAuthorize          WebhookEventTypeEnum = "PAYMENT_AUTHORIZE"
	WebhookEventTypeEnumPaymentCapture            WebhookEventTypeEnum = "PAYMENT_CAPTURE"
	WebhookEventTypeEnumPaymentConfirm            WebhookEventTypeEnum = "PAYMENT_CONFIRM"
	WebhookEventTypeEnumPaymentListGateways       WebhookEventTypeEnum = "PAYMENT_LIST_GATEWAYS"
	WebhookEventTypeEnumPaymentProcess            WebhookEventTypeEnum = "PAYMENT_PROCESS"
	WebhookEventTypeEnumPaymentRefund             WebhookEventTypeEnum = "PAYMENT_REFUND"
	WebhookEventTypeEnumPaymentVoid               WebhookEventTypeEnum = "PAYMENT_VOID"
	WebhookEventTypeEnumTranslationCreated        WebhookEventTypeEnum = "TRANSLATION_CREATED"
	WebhookEventTypeEnumTranslationUpdated        WebhookEventTypeEnum = "TRANSLATION_UPDATED"
)

func (e WebhookEventTypeEnum) IsValid() bool {
	switch e {
	case WebhookEventTypeEnumAnyEvents, WebhookEventTypeEnumOrderCreated, WebhookEventTypeEnumOrderConfirmed, WebhookEventTypeEnumOrderFullyPaid, WebhookEventTypeEnumOrderUpdated, WebhookEventTypeEnumOrderCancelled, WebhookEventTypeEnumOrderFulfilled, WebhookEventTypeEnumDraftOrderCreated, WebhookEventTypeEnumDraftOrderUpdated, WebhookEventTypeEnumDraftOrderDeleted, WebhookEventTypeEnumSaleCreated, WebhookEventTypeEnumSaleUpdated, WebhookEventTypeEnumSaleDeleted, WebhookEventTypeEnumInvoiceRequested, WebhookEventTypeEnumInvoiceDeleted, WebhookEventTypeEnumInvoiceSent, WebhookEventTypeEnumCustomerCreated, WebhookEventTypeEnumCustomerUpdated, WebhookEventTypeEnumProductCreated, WebhookEventTypeEnumProductUpdated, WebhookEventTypeEnumProductDeleted, WebhookEventTypeEnumProductVariantCreated, WebhookEventTypeEnumProductVariantUpdated, WebhookEventTypeEnumProductVariantDeleted, WebhookEventTypeEnumProductVariantOutOfStock, WebhookEventTypeEnumProductVariantBackInStock, WebhookEventTypeEnumCheckoutCreated, WebhookEventTypeEnumCheckoutUpdated, WebhookEventTypeEnumFulfillmentCreated, WebhookEventTypeEnumFulfillmentCanceled, WebhookEventTypeEnumNotifyUser, WebhookEventTypeEnumPageCreated, WebhookEventTypeEnumPageUpdated, WebhookEventTypeEnumPageDeleted, WebhookEventTypeEnumPaymentAuthorize, WebhookEventTypeEnumPaymentCapture, WebhookEventTypeEnumPaymentConfirm, WebhookEventTypeEnumPaymentListGateways, WebhookEventTypeEnumPaymentProcess, WebhookEventTypeEnumPaymentRefund, WebhookEventTypeEnumPaymentVoid, WebhookEventTypeEnumTranslationCreated, WebhookEventTypeEnumTranslationUpdated:
		return true
	}
	return false
}

type WebhookSampleEventTypeEnum string

const (
	WebhookSampleEventTypeEnumOrderCreated              WebhookSampleEventTypeEnum = "ORDER_CREATED"
	WebhookSampleEventTypeEnumOrderConfirmed            WebhookSampleEventTypeEnum = "ORDER_CONFIRMED"
	WebhookSampleEventTypeEnumOrderFullyPaid            WebhookSampleEventTypeEnum = "ORDER_FULLY_PAID"
	WebhookSampleEventTypeEnumOrderUpdated              WebhookSampleEventTypeEnum = "ORDER_UPDATED"
	WebhookSampleEventTypeEnumOrderCancelled            WebhookSampleEventTypeEnum = "ORDER_CANCELLED"
	WebhookSampleEventTypeEnumOrderFulfilled            WebhookSampleEventTypeEnum = "ORDER_FULFILLED"
	WebhookSampleEventTypeEnumDraftOrderCreated         WebhookSampleEventTypeEnum = "DRAFT_ORDER_CREATED"
	WebhookSampleEventTypeEnumDraftOrderUpdated         WebhookSampleEventTypeEnum = "DRAFT_ORDER_UPDATED"
	WebhookSampleEventTypeEnumDraftOrderDeleted         WebhookSampleEventTypeEnum = "DRAFT_ORDER_DELETED"
	WebhookSampleEventTypeEnumSaleCreated               WebhookSampleEventTypeEnum = "SALE_CREATED"
	WebhookSampleEventTypeEnumSaleUpdated               WebhookSampleEventTypeEnum = "SALE_UPDATED"
	WebhookSampleEventTypeEnumSaleDeleted               WebhookSampleEventTypeEnum = "SALE_DELETED"
	WebhookSampleEventTypeEnumInvoiceRequested          WebhookSampleEventTypeEnum = "INVOICE_REQUESTED"
	WebhookSampleEventTypeEnumInvoiceDeleted            WebhookSampleEventTypeEnum = "INVOICE_DELETED"
	WebhookSampleEventTypeEnumInvoiceSent               WebhookSampleEventTypeEnum = "INVOICE_SENT"
	WebhookSampleEventTypeEnumCustomerCreated           WebhookSampleEventTypeEnum = "CUSTOMER_CREATED"
	WebhookSampleEventTypeEnumCustomerUpdated           WebhookSampleEventTypeEnum = "CUSTOMER_UPDATED"
	WebhookSampleEventTypeEnumProductCreated            WebhookSampleEventTypeEnum = "PRODUCT_CREATED"
	WebhookSampleEventTypeEnumProductUpdated            WebhookSampleEventTypeEnum = "PRODUCT_UPDATED"
	WebhookSampleEventTypeEnumProductDeleted            WebhookSampleEventTypeEnum = "PRODUCT_DELETED"
	WebhookSampleEventTypeEnumProductVariantCreated     WebhookSampleEventTypeEnum = "PRODUCT_VARIANT_CREATED"
	WebhookSampleEventTypeEnumProductVariantUpdated     WebhookSampleEventTypeEnum = "PRODUCT_VARIANT_UPDATED"
	WebhookSampleEventTypeEnumProductVariantDeleted     WebhookSampleEventTypeEnum = "PRODUCT_VARIANT_DELETED"
	WebhookSampleEventTypeEnumProductVariantOutOfStock  WebhookSampleEventTypeEnum = "PRODUCT_VARIANT_OUT_OF_STOCK"
	WebhookSampleEventTypeEnumProductVariantBackInStock WebhookSampleEventTypeEnum = "PRODUCT_VARIANT_BACK_IN_STOCK"
	WebhookSampleEventTypeEnumCheckoutCreated           WebhookSampleEventTypeEnum = "CHECKOUT_CREATED"
	WebhookSampleEventTypeEnumCheckoutUpdated           WebhookSampleEventTypeEnum = "CHECKOUT_UPDATED"
	WebhookSampleEventTypeEnumFulfillmentCreated        WebhookSampleEventTypeEnum = "FULFILLMENT_CREATED"
	WebhookSampleEventTypeEnumFulfillmentCanceled       WebhookSampleEventTypeEnum = "FULFILLMENT_CANCELED"
	WebhookSampleEventTypeEnumNotifyUser                WebhookSampleEventTypeEnum = "NOTIFY_USER"
	WebhookSampleEventTypeEnumPageCreated               WebhookSampleEventTypeEnum = "PAGE_CREATED"
	WebhookSampleEventTypeEnumPageUpdated               WebhookSampleEventTypeEnum = "PAGE_UPDATED"
	WebhookSampleEventTypeEnumPageDeleted               WebhookSampleEventTypeEnum = "PAGE_DELETED"
	WebhookSampleEventTypeEnumPaymentAuthorize          WebhookSampleEventTypeEnum = "PAYMENT_AUTHORIZE"
	WebhookSampleEventTypeEnumPaymentCapture            WebhookSampleEventTypeEnum = "PAYMENT_CAPTURE"
	WebhookSampleEventTypeEnumPaymentConfirm            WebhookSampleEventTypeEnum = "PAYMENT_CONFIRM"
	WebhookSampleEventTypeEnumPaymentListGateways       WebhookSampleEventTypeEnum = "PAYMENT_LIST_GATEWAYS"
	WebhookSampleEventTypeEnumPaymentProcess            WebhookSampleEventTypeEnum = "PAYMENT_PROCESS"
	WebhookSampleEventTypeEnumPaymentRefund             WebhookSampleEventTypeEnum = "PAYMENT_REFUND"
	WebhookSampleEventTypeEnumPaymentVoid               WebhookSampleEventTypeEnum = "PAYMENT_VOID"
	WebhookSampleEventTypeEnumTranslationCreated        WebhookSampleEventTypeEnum = "TRANSLATION_CREATED"
	WebhookSampleEventTypeEnumTranslationUpdated        WebhookSampleEventTypeEnum = "TRANSLATION_UPDATED"
)

func (e WebhookSampleEventTypeEnum) IsValid() bool {
	switch e {
	case WebhookSampleEventTypeEnumOrderCreated, WebhookSampleEventTypeEnumOrderConfirmed, WebhookSampleEventTypeEnumOrderFullyPaid, WebhookSampleEventTypeEnumOrderUpdated, WebhookSampleEventTypeEnumOrderCancelled, WebhookSampleEventTypeEnumOrderFulfilled, WebhookSampleEventTypeEnumDraftOrderCreated, WebhookSampleEventTypeEnumDraftOrderUpdated, WebhookSampleEventTypeEnumDraftOrderDeleted, WebhookSampleEventTypeEnumSaleCreated, WebhookSampleEventTypeEnumSaleUpdated, WebhookSampleEventTypeEnumSaleDeleted, WebhookSampleEventTypeEnumInvoiceRequested, WebhookSampleEventTypeEnumInvoiceDeleted, WebhookSampleEventTypeEnumInvoiceSent, WebhookSampleEventTypeEnumCustomerCreated, WebhookSampleEventTypeEnumCustomerUpdated, WebhookSampleEventTypeEnumProductCreated, WebhookSampleEventTypeEnumProductUpdated, WebhookSampleEventTypeEnumProductDeleted, WebhookSampleEventTypeEnumProductVariantCreated, WebhookSampleEventTypeEnumProductVariantUpdated, WebhookSampleEventTypeEnumProductVariantDeleted, WebhookSampleEventTypeEnumProductVariantOutOfStock, WebhookSampleEventTypeEnumProductVariantBackInStock, WebhookSampleEventTypeEnumCheckoutCreated, WebhookSampleEventTypeEnumCheckoutUpdated, WebhookSampleEventTypeEnumFulfillmentCreated, WebhookSampleEventTypeEnumFulfillmentCanceled, WebhookSampleEventTypeEnumNotifyUser, WebhookSampleEventTypeEnumPageCreated, WebhookSampleEventTypeEnumPageUpdated, WebhookSampleEventTypeEnumPageDeleted, WebhookSampleEventTypeEnumPaymentAuthorize, WebhookSampleEventTypeEnumPaymentCapture, WebhookSampleEventTypeEnumPaymentConfirm, WebhookSampleEventTypeEnumPaymentListGateways, WebhookSampleEventTypeEnumPaymentProcess, WebhookSampleEventTypeEnumPaymentRefund, WebhookSampleEventTypeEnumPaymentVoid, WebhookSampleEventTypeEnumTranslationCreated, WebhookSampleEventTypeEnumTranslationUpdated:
		return true
	}
	return false
}

type WeightUnitsEnum string

const (
	WeightUnitsEnumG     WeightUnitsEnum = WeightUnitsEnum(measurement.G)
	WeightUnitsEnumLb    WeightUnitsEnum = WeightUnitsEnum(measurement.LB)
	WeightUnitsEnumOz    WeightUnitsEnum = WeightUnitsEnum(measurement.OZ)
	WeightUnitsEnumKg    WeightUnitsEnum = WeightUnitsEnum(measurement.KG)
	WeightUnitsEnumTonne WeightUnitsEnum = WeightUnitsEnum(measurement.TONNE)
)

func (e WeightUnitsEnum) IsValid() bool {
	switch e {
	case WeightUnitsEnumG, WeightUnitsEnumLb, WeightUnitsEnumOz, WeightUnitsEnumKg, WeightUnitsEnumTonne:
		return true
	}
	return false
}
