// Code generated by "make app-layers"
// DO NOT EDIT

package app

import (
	"context"
	"crypto/ecdsa"
	"io"
	"net/http"
	"reflect"

	"github.com/site-name/decimal"
	"github.com/sitename/sitename/app/sub_app_iface"
	"github.com/sitename/sitename/einterfaces"
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/model/account"
	modelAudit "github.com/sitename/sitename/model/audit"
	"github.com/sitename/sitename/modules/audit"
	"github.com/sitename/sitename/modules/slog"
	"github.com/sitename/sitename/modules/timezones"
	"github.com/sitename/sitename/services/httpservice"
	"github.com/sitename/sitename/services/imageproxy"
	"github.com/sitename/sitename/services/searchengine"
)

// AppIface is extracted from App struct and contains all it's exported methods. It's provided to allow partial interface passing and app layers creation.
type AppIface interface {
	// Account returns account sub app
	AccountApp() sub_app_iface.AccountApp
	// AsymmetricSigningKey will return a private key that can be used for asymmetric signing.
	AsymmetricSigningKey() *ecdsa.PrivateKey
	// Attribute returns attribute sub app
	AttributeApp() sub_app_iface.AttributeApp
	// Channel returns channel sub app
	ChannelApp() sub_app_iface.ChannelApp
	// CheckRolesExist get role model instances with given roleNames,
	// checks if at least one db role has name contained in given roleNames.
	CheckRolesExist(roleNames []string) *model.AppError
	// Checkout returns checkout sub app
	CheckoutApp() sub_app_iface.CheckoutApp
	// ClientConfigWithComputed gets the configuration in a format suitable for sending to the client.
	ClientConfigWithComputed() map[string]string
	// Configs return system's configurations
	Config() *model.Config
	// CreateRole takes a role struct and save it to database
	CreateRole(role *model.Role) (*model.Role, *model.AppError)
	// Csv returns csv sub app
	CsvApp() sub_app_iface.CsvApp
	// DiscountApp returns discount sub app
	DiscountApp() sub_app_iface.DiscountApp
	// DoAppMigrations migrate permissions
	DoAppMigrations()
	// DoPermissionsMigrations execute all the permissions migrations need by the current version.
	DoPermissionsMigrations() error
	// ExchangeCurrency Exchanges Money, TaxedMoney and their ranges to the specified currency.
	// get_rate parameter is a callable taking single argument (target currency)
	// that returns proper conversion rate
	//
	// `base` must be either *Money, *MoneyRange, *TaxedMoney, *TaxedMoneyRange. `conversionrate` can be nil
	//
	// NOTE: `base` and `toCurrency` must be validated before given to me.
	ExchangeCurrency(base interface{}, toCurrency string, conversionRate *decimal.Decimal) (interface{}, *model.AppError)
	// FileApp returns file sub app
	FileApp() sub_app_iface.FileApp
	// GetConfigFile proxies access to the given configuration file to the underlying config store.
	GetConfigFile(name string) ([]byte, error)
	// GetConversionRate get conversion rate to use in exchange
	GetConversionRate(fromCurrency string, toCurrency string) (*decimal.Decimal, *model.AppError)
	// GetCookieDomain
	GetCookieDomain() string
	// GetEnvironmentConfig returns a map of configuration keys whose values have been overridden by an environment variable.
	// If filter is not nil and returns false for a struct field, that field will be omitted.
	GetEnvironmentConfig(filter func(reflect.StructField) bool) map[string]interface{}
	// GetRole get 1 model.Role from database, returns nil and concret error if a problem occur
	GetRole(id string) (*model.Role, *model.AppError)
	// GetRoleByName gets a model.Role from database with given name, returns nil and concret error if a problem occur
	GetRoleByName(ctx context.Context, name string) (*model.Role, *model.AppError)
	// GetRolesByNames returns a slice of model.Role by given names
	GetRolesByNames(names []string) ([]*model.Role, *model.AppError)
	// GetSanitizedConfig gets the configuration for a system admin without any secrets.
	GetSanitizedConfig() *model.Config
	// GetSiteURL returns service's siteurl configuration.
	GetSiteURL() string
	// Giftcard returns giftcard sub app
	GiftcardApp() sub_app_iface.GiftcardApp
	// InvalidateCacheForUser
	InvalidateCacheForUser(userID string)
	// Invoice returns invoice sub app
	InvoiceApp() sub_app_iface.InvoiceApp
	// LimitedClientConfigWithComputed gets the configuration in a format suitable for sending to the client.
	LimitedClientConfigWithComputed() map[string]string
	// Log returns system logger
	Log() *slog.Logger
	// LogAuditRec logs an audit record using default LvlAuditCLI.
	LogAuditRec(rec *audit.Record, err error)
	// LogAuditRecWithLevel logs an audit record using specified Level.
	LogAuditRecWithLevel(rec *audit.Record, level slog.LogLevel, err error)
	// MakeAuditRecord creates a audit record pre-populated with defaults.
	MakeAuditRecord(event string, initialStatus string) *audit.Record
	// Menu returns menu sub app
	MenuApp() sub_app_iface.MenuApp
	// NotificationsLog returns system notification log
	NotificationsLog() *slog.Logger
	// Order returns order sub app
	OrderApp() sub_app_iface.OrderApp
	// Page returns page sub app
	PageApp() sub_app_iface.PageApp
	// Payment returns payment sub app
	PaymentApp() sub_app_iface.PaymentApp
	// PluginApp returns order sub app
	PluginApp() sub_app_iface.PluginApp
	// Product returns product sub app
	ProductApp() sub_app_iface.ProductApp
	// Publish puplish websocket events
	Publish(message *model.WebSocketEvent)
	// ResetPermissionsSystem reset permission system
	ResetPermissionsSystem() *model.AppError
	// SaveConfig replaces the active configuration, optionally notifying cluster peers.
	SaveConfig(newCfg *model.Config, sendConfigChangeClusterMessage bool) (*model.Config, *model.Config, *model.AppError)
	// Seo returns order seo app
	SeoApp() sub_app_iface.SeoApp
	// Shipping returns shipping sub app
	ShippingApp() sub_app_iface.ShippingApp
	// ShopApp returns shop sub app
	ShopApp() sub_app_iface.ShopApp
	// Srv returns system server
	Srv() *Server
	// This function migrates the default built in roles from code/config to the database.
	DoAdvancedPermissionsMigration()
	// ToLocalCurrency performs convert given price to local currency
	//
	// NOTE: `price` must be either *Money, *MoneyRange, *TaxedMoney, *TaxedMoneyRange
	ToLocalCurrency(price interface{}, currency string) (interface{}, *model.AppError)
	// UpdateConfig updates config
	UpdateConfig(f func(*model.Config))
	// Warehouse returns warehouse sub app
	WarehouseApp() sub_app_iface.WarehouseApp
	// Webhook returns webhook sub app
	WebhookApp() sub_app_iface.WebhookApp
	// Wishlist returns wishlist sub app
	WishlistApp() sub_app_iface.WishlistApp
	// func (a *App) Cloud() einterfaces.CloudInterface {
	// 	return a.srv.Cloud
	// }
	HTTPService() httpservice.HTTPService
	// metrics for app
	Metrics() einterfaces.MetricsInterface
	AccountMigration() einterfaces.AccountMigrationInterface
	AddConfigListener(listener func(*model.Config, *model.Config)) string
	ClientConfig() map[string]string
	ClientConfigHash() string
	Cluster() einterfaces.ClusterInterface
	Compliance() einterfaces.ComplianceInterface
	DBHealthCheckDelete() error
	DBHealthCheckWrite() error
	DataRetention() einterfaces.DataRetentionInterface
	DoSystemConsoleRolesCreationMigration()
	EnvironmentConfig(filter func(reflect.StructField) bool) map[string]interface{}
	ExportPermissions(w io.Writer) error
	GetAudits(userID string, limit int) (modelAudit.Audits, *model.AppError)
	GetAuditsPage(userID string, page int, perPage int) (modelAudit.Audits, *model.AppError)
	GetClusterId() string
	GetSystemInstallDate() (int64, *model.AppError)
	GetWarnMetricsStatus() (map[string]*model.WarnMetricStatus, *model.AppError)
	Handle404(w http.ResponseWriter, r *http.Request)
	HandleMessageExportConfig(cfg *model.Config, appCfg *model.Config)
	ImageProxy() *imageproxy.ImageProxy
	IsLeader() bool
	Ldap() einterfaces.LdapInterface
	LimitedClientConfig() map[string]string
	NewClusterDiscoveryService() *ClusterDiscoveryService
	NotifyAndSetWarnMetricAck(warnMetricId string, sender *account.User, forceAck bool, isBot bool) *model.AppError
	OriginChecker() func(*http.Request) bool
	PatchRole(role *model.Role, patch *model.RolePatch) (*model.Role, *model.AppError)
	PostActionCookieSecret() []byte
	ReloadConfig() error
	RemoveConfigListener(id string)
	Saml() einterfaces.SamlInterface
	SearchEngine() *searchengine.Broker
	SetPhase2PermissionsMigrationStatus(isComplete bool) error
	SetServer(srv *Server)
	Timezones() *timezones.Timezones
	UpdateRole(role *model.Role) (*model.Role, *model.AppError)
}
