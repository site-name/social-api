// Code generated by "make app-layers"
// DO NOT EDIT

package app

import (
	"crypto/ecdsa"
	"io"
	"net/http"
	"reflect"

	"github.com/sitename/sitename/app/sub_app_iface"
	"github.com/sitename/sitename/einterfaces"
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/model_helper"
	"github.com/sitename/sitename/modules/audit"
	"github.com/sitename/sitename/modules/slog"
	"github.com/sitename/sitename/modules/timezones"
	"github.com/sitename/sitename/services/httpservice"
	"github.com/sitename/sitename/services/imageproxy"
	"github.com/sitename/sitename/services/searchengine"
)

// AppIface is extracted from App struct and contains all it's exported methods. It's provided to allow partial interface passing and app layers creation.
type AppIface interface {
	// AsymmetricSigningKey will return a private key that can be used for asymmetric signing.
	AsymmetricSigningKey() *ecdsa.PrivateKey
	// ClientConfigWithComputed gets the configuration in a format suitable for sending to the client.
	ClientConfigWithComputed() map[string]string
	// Configs return system's configurations
	Config() *model_helper.Config
	// DoAppMigrations migrate permissions
	DoAppMigrations()
	// GetComplianceReports returns compliances along with an app error
	GetComplianceReports(page, perPage int) (model.ComplianceSlice, *model_helper.AppError)
	// GetConfigFile proxies access to the given configuration file to the underlying config store.
	GetConfigFile(name string) ([]byte, error)
	// GetEnvironmentConfig returns a map of configuration keys whose values have been overridden by an environment variable.
	// If filter is not nil and returns false for a struct field, that field will be omitted.
	GetEnvironmentConfig(filter func(reflect.StructField) bool) map[string]interface{}
	// GetSanitizedConfig gets the configuration for a system admin without any secrets.
	GetSanitizedConfig() *model_helper.Config
	// GetSiteURL returns service's siteurl configuration.
	GetSiteURL() string
	// InvalidateCacheForUser
	InvalidateCacheForUser(userID string)
	// LimitedClientConfigWithComputed gets the configuration in a format suitable for sending to the client.
	LimitedClientConfigWithComputed() map[string]string
	// LogAuditRec logs an audit record using default LvlAuditCLI.
	LogAuditRec(rec *audit.Record, err error)
	// LogAuditRecWithLevel logs an audit record using specified Level.
	LogAuditRecWithLevel(rec *audit.Record, level slog.Level, err error)
	// MakeAuditRecord creates a audit record pre-populated with defaults.
	MakeAuditRecord(event string, initialStatus string) *audit.Record
	// Publish puplish websocket events
	Publish(message *model_helper.WebSocketEvent)
	// ResetPermissionsSystem reset permission system
	ResetPermissionsSystem() *model_helper.AppError
	// SaveComplianceReport
	SaveComplianceReport(job model.Compliance) (*model.Compliance, *model_helper.AppError)
	// SaveConfig replaces the active configuration, optionally notifying cluster peers.
	SaveConfig(newCfg *model_helper.Config, sendConfigChangeClusterMessage bool) (*model_helper.Config, *model_helper.Config, *model_helper.AppError)
	// This function migrates the default built in roles from code/config to the database.
	DoAdvancedPermissionsMigration()
	// UpdateConfig updates config
	UpdateConfig(f func(*model_helper.Config))
	AccountMigration() einterfaces.AccountMigrationInterface
	AccountService() sub_app_iface.AccountService
	AddConfigListener(listener func(*model_helper.Config, *model_helper.Config)) string
	AttributeService() sub_app_iface.AttributeService
	ChannelService() sub_app_iface.ChannelService
	CheckoutService() sub_app_iface.CheckoutService
	ClientConfig() map[string]string
	ClientConfigHash() string
	Cluster() einterfaces.ClusterInterface
	Compliance() einterfaces.ComplianceInterface
	CsvService() sub_app_iface.CsvService
	DBHealthCheckDelete() error
	DBHealthCheckWrite() error
	DataRetention() einterfaces.DataRetentionInterface
	DiscountService() sub_app_iface.DiscountService
	DoSystemConsoleRolesCreationMigration()
	EnvironmentConfig(filter func(reflect.StructField) bool) map[string]interface{}
	ExportPermissions(w io.Writer) error
	FileService() sub_app_iface.FileService
	GetAudits(userID string, limit int) (model.AuditSlice, *model_helper.AppError)
	GetAuditsPage(userID string, page int, perPage int) (model.AuditSlice, *model_helper.AppError)
	GetClusterId() string
	GetClusterStatus() []*model_helper.ClusterInfo
	GetComplianceFile(job *model.Compliance) ([]byte, *model_helper.AppError)
	GetComplianceReport(reportID string) (*model.Compliance, *model_helper.AppError)
	GetLogs(page, perPage int) ([]string, *model_helper.AppError)
	GetLogsSkipSend(page, perPage int) ([]string, *model_helper.AppError)
	GetOpenGraphMetadata(requestURL string) ([]byte, error)
	GetSystemInstallDate() (int64, *model_helper.AppError)
	GetWarnMetricsStatus() (map[string]*model_helper.WarnMetricStatus, *model_helper.AppError)
	GiftcardService() sub_app_iface.GiftcardService
	HTTPService() httpservice.HTTPService
	Handle404(w http.ResponseWriter, r *http.Request)
	HandleMessageExportConfig(cfg *model_helper.Config, appCfg *model_helper.Config)
	ImageProxy() *imageproxy.ImageProxy
	ImageProxyAdder() func(string) string
	ImageProxyRemover() func(string) string
	InvoiceService() sub_app_iface.InvoiceService
	IsLeader() bool
	Ldap() einterfaces.LdapInterface
	LimitedClientConfig() map[string]string
	Log() *slog.Logger
	MenuService() sub_app_iface.MenuService
	Metrics() einterfaces.MetricsInterface
	NewClusterDiscoveryService() *ClusterDiscoveryService
	NotificationsLog() *slog.Logger
	NotifyAndSetWarnMetricAck(warnMetricId string, sender model.User, forceAck bool, isBot bool) *model_helper.AppError
	OrderService() sub_app_iface.OrderService
	OriginChecker() func(*http.Request) bool
	PageService() sub_app_iface.PageService
	PaymentService() sub_app_iface.PaymentService
	PluginService() sub_app_iface.PluginService
	PostActionCookieSecret() []byte
	ProductService() sub_app_iface.ProductService
	ReloadConfig() error
	RemoveConfigListener(id string)
	Saml() einterfaces.SamlInterface
	SearchEngine() *searchengine.Broker
	SeoService() sub_app_iface.SeoService
	SetPhase2PermissionsMigrationStatus(isComplete bool) error
	SetServer(srv *Server)
	ShippingService() sub_app_iface.ShippingService
	Srv() *Server
	Timezones() *timezones.Timezones
	WarehouseService() sub_app_iface.WarehouseService
	WebhookService() sub_app_iface.WebhookService
	WishlistService() sub_app_iface.WishlistService
}
