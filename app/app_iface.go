// Code generated by "make app-layers"
// DO NOT EDIT

package app

import (
	"bytes"
	"context"
	"crypto/ecdsa"
	"io"
	"mime/multipart"
	"net/http"
	"reflect"

	"github.com/sitename/sitename/einterfaces"
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/modules/filestore"
	"github.com/sitename/sitename/modules/i18n"
	"github.com/sitename/sitename/modules/slog"
	"github.com/sitename/sitename/modules/timezones"
	"github.com/sitename/sitename/services/httpservice"
	"github.com/sitename/sitename/services/imageproxy"
	"github.com/sitename/sitename/services/searchengine"
)

// AppIface is extracted from App struct and contains all it's exported methods. It's provided to allow partial interface passing and app layers creation.
type AppIface interface {
	// ClientConfigWithComputed gets the configuration in a format suitable for sending to the client.
	ClientConfigWithComputed() map[string]string
	// CreateGuest creates a guest and sets several fields of the returned User struct to
	// their zero values.
	CreateGuest(user *model.User) (*model.User, *model.AppError)
	// CreateUser creates a user and sets several fields of the returned User struct to
	// their zero values.
	CreateUser(user *model.User) (*model.User, *model.AppError)
	// GetConfigFile proxies access to the given configuration file to the underlying config store.
	GetConfigFile(name string) ([]byte, error)
	// GetEnvironmentConfig returns a map of configuration keys whose values have been overridden by an environment variable.
	// If filter is not nil and returns false for a struct field, that field will be omitted.
	GetEnvironmentConfig(filter func(reflect.StructField) bool) map[string]interface{}
	// GetSanitizedConfig gets the configuration for a system admin without any secrets.
	GetSanitizedConfig() *model.Config
	// GetSessionLengthInMillis returns the session length, in milliseconds,
	// based on the type of session (Mobile, SSO, Web/LDAP).
	GetSessionLengthInMillis(session *model.Session) int64
	// IsUserSignupAllowed checks email settings if signing up with email is allowed
	IsUserSignupAllowed() *model.AppError
	// IsUsernameTaken checks if the username is already used by another user. Return false if the username is invalid.
	IsUsernameTaken(name string) bool
	// LimitedClientConfigWithComputed gets the configuration in a format suitable for sending to the client.
	LimitedClientConfigWithComputed() map[string]string
	// SaveConfig replaces the active configuration, optionally notifying cluster peers.
	SaveConfig(newCfg *model.Config, sendConfigChangeClusterMessage bool) *model.AppError
	// SetSessionExpireInDays sets the session's expiry the specified number of days
	// relative to either the session creation date or the current time, depending
	// on the `ExtendSessionOnActivity` config setting.
	SetSessionExpireInDays(session *model.Session, days int)
	// This to be used for places we check the users password when they are already logged in
	DoubleCheckPassword(user *model.User, password string) *model.AppError
	// func (a *App) DataRetention() einterfaces.DataRetentionInterface {
	// 	return a.srv.DataRetention
	// }
	Metrics() einterfaces.MetricsInterface
	AcceptLanguage() string
	ActivateMfa(userID, token string) *model.AppError
	AddConfigListener(listener func(*model.Config, *model.Config)) string
	AddSessionToCache(s *model.Session)
	AdjustImage(file io.Reader) (*bytes.Buffer, *model.AppError)
	AsymmetricSigningKey() *ecdsa.PrivateKey
	AttachDeviceId(sessionID string, deviceID string, expiresAt int64) *model.AppError
	CheckPasswordAndAllCriteria(user *model.User, password string, mfaToken string) *model.AppError
	CheckRolesExist(roleNames []string) *model.AppError
	CheckUserAllAuthenticationCriteria(user *model.User, mfaToken string) *model.AppError
	CheckUserMfa(user *model.User, token string) *model.AppError
	CheckUserPostflightAuthenticationCriteria(user *model.User) *model.AppError
	CheckUserPreflightAuthenticationCriteria(user *model.User, mfaToken string) *model.AppError
	ClearSessionCacheForUser(userID string)
	ClearSessionCacheForUserSkipClusterSend(userID string)
	ClientConfig() map[string]string
	ClientConfigHash() string
	Cluster() einterfaces.ClusterInterface
	Compliance() einterfaces.ComplianceInterface
	Config() *model.Config
	Context() context.Context
	CreateSession(session *model.Session) (*model.Session, *model.AppError)
	CreateUserAccessToken(token *model.UserAccessToken) (*model.UserAccessToken, *model.AppError)
	CreateUserAsAdmin(user *model.User, redirect string) (*model.User, *model.AppError)
	CreateUserFromSignup(user *model.User, redirect string) (*model.User, *model.AppError)
	DBHealthCheckDelete() error
	DBHealthCheckWrite() error
	DeactivateGuests() *model.AppError
	DeactivateMfa(userID string) *model.AppError
	DeleteToken(token *model.Token) *model.AppError
	DisableUserAccessToken(token *model.UserAccessToken) *model.AppError
	DoAppMigrations()
	EnableUserAccessToken(token *model.UserAccessToken) *model.AppError
	EnvironmentConfig(filter func(reflect.StructField) bool) map[string]interface{}
	ExportPermissions(w io.Writer) error
	FileBackend() (filestore.FileBackend, *model.AppError)
	GenerateMfaSecret(userID string) (*model.MfaSecret, *model.AppError)
	GetClusterId() string
	GetCookieDomain() string
	GetDefaultProfileImage(user *model.User) ([]byte, *model.AppError)
	GetProfileImage(user *model.User) ([]byte, bool, *model.AppError)
	GetRolesByNames(names []string) ([]*model.Role, *model.AppError)
	GetSanitizeOptions(asAdmin bool) map[string]bool
	GetSession(token string) (*model.Session, *model.AppError)
	GetSessionById(sessionID string) (*model.Session, *model.AppError)
	GetSessions(userID string) ([]*model.Session, *model.AppError)
	GetSiteURL() string
	GetStatus(userID string) (*model.Status, *model.AppError)
	GetStatusFromCache(userID string) *model.Status
	GetT() i18n.TranslateFunc
	GetUser(userID string) (*model.User, *model.AppError)
	GetUserAccessToken(tokenID string, sanitize bool) (*model.UserAccessToken, *model.AppError)
	GetUserAccessTokens(page, perPage int) ([]*model.UserAccessToken, *model.AppError)
	GetUserAccessTokensForUser(userID string, page, perPage int) ([]*model.UserAccessToken, *model.AppError)
	GetUserByAuth(authData *string, authService string) (*model.User, *model.AppError)
	GetUserByEmail(email string) (*model.User, *model.AppError)
	GetUserByUsername(username string) (*model.User, *model.AppError)
	GetUsers(options *model.UserGetOptions) ([]*model.User, *model.AppError)
	HTTPService() httpservice.HTTPService
	Handle404(w http.ResponseWriter, r *http.Request)
	HandleMessageExportConfig(cfg *model.Config, appCfg *model.Config)
	ImageProxy() *imageproxy.ImageProxy
	InitServer()
	InvalidateCacheForUser(userID string)
	IpAddress() string
	IsFirstUserAccount() bool
	IsLeader() bool
	IsPasswordValid(password string) *model.AppError
	IsUserSignUpAllowed() *model.AppError
	Ldap() einterfaces.LdapInterface
	LimitedClientConfig() map[string]string
	Log() *slog.Logger
	NewClusterDiscoveryService() *ClusterDiscoveryService
	NotificationsLog() *slog.Logger
	OriginChecker() func(*http.Request) bool
	Path() string
	PostActionCookieSecret() []byte
	Publish(message *model.WebSocketEvent)
	ReadFile(path string) ([]byte, *model.AppError)
	ReloadConfig() error
	RemoveConfigListener(id string)
	RequestId() string
	ResetPermissionsSystem() *model.AppError
	RevokeAllSessions(userID string) *model.AppError
	RevokeSession(session *model.Session) *model.AppError
	RevokeSessionById(sessionID string) *model.AppError
	RevokeSessionsForDeviceId(userID string, deviceID string, currentSessionId string) *model.AppError
	RevokeUserAccessToken(token *model.UserAccessToken) *model.AppError
	SanitizeProfile(user *model.User, asAdmin bool)
	SearchEngine() *searchengine.Broker
	SearchUserAccessTokens(term string) ([]*model.UserAccessToken, *model.AppError)
	SendEmailVerification(user *model.User, newEmail, redirect string) *model.AppError
	Session() *model.Session
	SessionCacheLength() int
	SetAcceptLanguage(s string)
	SetContext(c context.Context)
	SetDefaultProfileImage(user *model.User) *model.AppError
	SetIpAddress(s string)
	SetPath(s string)
	SetProfileImage(userID string, imageData *multipart.FileHeader) *model.AppError
	SetProfileImageFromFile(userID string, file io.Reader) *model.AppError
	SetProfileImageFromMultiPartFile(userID string, file multipart.File) *model.AppError
	SetRequestId(s string)
	SetServer(srv *Server)
	SetSession(s *model.Session)
	SetT(t i18n.TranslateFunc)
	SetUserAgent(s string)
	Srv() *Server
	T(translationID string, args ...interface{}) string
	Timezones() *timezones.Timezones
	UpdateActive(user *model.User, active bool) (*model.User, *model.AppError)
	UpdateConfig(f func(*model.Config))
	UpdateLastActivityAtIfNeeded(session model.Session)
	UpdateUser(user *model.User, sendNotifications bool) (*model.User, *model.AppError)
	UpdateUserRolesWithUser(user *model.User, newRoles string, sendWebSocketEvent bool) (*model.User, *model.AppError)
	UserAgent() string
	VerifyUserEmail(userID, email string) *model.AppError
	WriteFile(fr io.Reader, path string) (int64, *model.AppError)
}
