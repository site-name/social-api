// Code generated by "make app-layers"
// DO NOT EDIT

package sub_app_iface

import (
	"github.com/site-name/decimal"
	goprices "github.com/site-name/go-prices"
	"github.com/sitename/sitename/app/plugin/interfaces"
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/model_helper"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

// PaymentService contains methods for working with payments
type PaymentService interface {
	// @requireActivePayment
	//
	// @withLockedPayment
	//
	// @raisePaymentError
	//
	// @paymentPostProcess
	// Confirm confirms payment
	Confirm(dbTransaction boil.ContextTransactor, payment model.Payment, manager interfaces.PluginManagerInterface, channelID string, additionalData map[string]any) (*model.PaymentTransaction, *model_helper.PaymentError, *model_helper.AppError)
	// @requireActivePayment
	//
	// @withLockedPayment
	//
	// @raisePaymentError
	//
	// @paymentPostProcess
	Authorize(dbTransaction boil.ContextTransactor, payment model.Payment, token string, manager interfaces.PluginManagerInterface, channelID string, customerID *string, storeSource bool) (*model.PaymentTransaction, *model_helper.PaymentError, *model_helper.AppError)
	// @requireActivePayment
	//
	// @withLockedPayment
	//
	// @raisePaymentError
	//
	// @paymentPostProcess
	Capture(dbTransaction boil.ContextTransactor, payment model.Payment, manager interfaces.PluginManagerInterface, channelID string, amount *decimal.Decimal, customerID *string, storeSource bool) (*model.PaymentTransaction, *model_helper.PaymentError, *model_helper.AppError)
	// @requireActivePayment
	//
	// @withLockedPayment
	//
	// @raisePaymentError
	//
	// @paymentPostProcess
	ProcessPayment(dbTransaction boil.ContextTransactor, payment model.Payment, token string, manager interfaces.PluginManagerInterface, channelID string, customerID *string, storeSource bool, additionalData map[string]any) (*model.PaymentTransaction, *model_helper.PaymentError, *model_helper.AppError)
	// @requireActivePayment
	//
	// @withLockedPayment
	//
	// @raisePaymentError
	//
	// @paymentPostProcess
	Refund(dbTransaction boil.ContextTransactor, payment model.Payment, manager interfaces.PluginManagerInterface, channelID string, amount *decimal.Decimal) (*model.PaymentTransaction, *model_helper.PaymentError, *model_helper.AppError)
	// @requireActivePayment
	//
	// @withLockedPayment
	//
	// @raisePaymentError
	//
	// @paymentPostProcess
	Void(dbTransaction boil.ContextTransactor, payment model.Payment, manager interfaces.PluginManagerInterface, channelID string) (*model.PaymentTransaction, *model_helper.PaymentError, *model_helper.AppError)
	// CreatePayment Create a payment instance.
	//
	// This method is responsible for creating payment instances that works for
	// both Django views and GraphQL mutations.
	//
	// NOTE: `customerIpAddress`, `paymentToken`, `returnUrl` and `externalReference` can be empty
	//
	// `extraData`, `ckout`, `ord` can be nil
	//
	// `storePaymentMethod` default to model.StorePaymentMethod.NONE
	CreatePayment(transaction boil.ContextTransactor, gateway string, total decimal.Decimal, currency model.Currency, email string, customerIpAddress string, paymentToken string, extraData map[string]string, checkout *model.Checkout, order *model.Order, returnUrl *string, externalReference *string, storePaymentMethod model.StorePaymentMethod, metadata model_helper.StringMap) (*model.Payment, *model_helper.PaymentError, *model_helper.AppError)
	// IsCurrencySupported Return true if the given gateway supports given currency.
	IsCurrencySupported(currency string, gatewayID string, manager interfaces.PluginManagerInterface) bool
	CleanAuthorize(payment model.Payment) *model_helper.PaymentError
	CleanCapture(payment model.Payment, amount decimal.Decimal) *model_helper.PaymentError
	CreatePaymentInformation(payment model.Payment, paymentToken *string, amount *decimal.Decimal, customerId *string, storeSource bool, additionalData map[string]any) (*model_helper.PaymentData, *model_helper.AppError)
	CreateTransaction(paymentID string, kind model.TransactionKind, paymentInformation *model_helper.PaymentData, actionRequired bool, gatewayResponse *model_helper.GatewayResponse, errorMsg string, isSuccess bool) (*model.PaymentTransaction, *model_helper.AppError)
	FetchCustomerId(user model.User, gateway string) (string, *model_helper.AppError)
	GatewayPostProcess(paymentTransaction model.PaymentTransaction, payment model.Payment) *model_helper.AppError
	GetAllPaymentsByCheckout(checkoutToken string) (model.PaymentSlice, *model_helper.AppError)
	GetAlreadyProcessedTransaction(paymentID string, gatewayResponse model_helper.GatewayResponse) (*model.PaymentTransaction, *model_helper.AppError)
	GetAlreadyProcessedTransactionOrCreateNewTransaction(paymentID string, kind model.TransactionKind, paymentInformation *model_helper.PaymentData, actionRequired bool, gatewayResponse *model_helper.GatewayResponse, errorMsg string) (*model.PaymentTransaction, *model_helper.AppError)
	GetLastOrderPayment(orderID string) (*model.Payment, *model_helper.AppError)
	GetLastPaymentTransaction(paymentID string) (*model.PaymentTransaction, *model_helper.AppError)
	GetLastpayment(payments model.PaymentSlice) *model.Payment
	GetPaymentToken(payment *model.Payment) (string, *model_helper.PaymentError, *model_helper.AppError)
	GetSubTotal(orderLines model.OrderLineSlice, fallbackCurrency string) (*goprices.TaxedMoney, *model_helper.AppError)
	GetTotalAuthorized(payments model.PaymentSlice, fallbackCurrency string) (*goprices.Money, *model_helper.AppError)
	ListGateways(manager interfaces.PluginManagerInterface, channelID string) []*model_helper.PaymentGateway
	ListPaymentSources(gateway string, customerID string, manager interfaces.PluginManagerInterface, channelID string) ([]*model_helper.CustomerSource, *model_helper.AppError)
	PaymentByID(transaction boil.ContextTransactor, paymentID string, lockForUpdate bool) (*model.Payment, *model_helper.AppError)
	PaymentCanVoid(payment model.Payment) (bool, *model_helper.AppError)
	PaymentGetAuthorizedAmount(payment model.Payment) (*goprices.Money, *model_helper.AppError)
	PaymentIsAuthorized(paymentID string) (bool, *model_helper.AppError)
	PaymentRefundOrVoid(dbTransaction boil.ContextTransactor, payment model.Payment, manager interfaces.PluginManagerInterface, channelSlug string) (*model_helper.PaymentError, *model_helper.AppError)
	PaymentsByOption(option model_helper.PaymentFilterOptions) (model.PaymentSlice, *model_helper.AppError)
	StoreCustomerId(userID string, gateway string, customerID string) *model_helper.AppError
	TransactionsByOption(option model_helper.PaymentTransactionFilterOpts) ([]*model.PaymentTransaction, *model_helper.AppError)
	UpdatePayment(payment model.Payment, gatewayResponse *model_helper.GatewayResponse) *model_helper.AppError
	UpdatePaymentMethodDetails(payment model.Payment, paymentMethodInfo *model_helper.PaymentMethodInfo) (changed bool)
	UpdatePaymentsOfCheckout(transaction boil.ContextTransactor, checkoutToken string, option model_helper.PaymentPatch) *model_helper.AppError
	UpsertPayment(transaction boil.ContextTransactor, payment model.Payment) (*model.Payment, *model_helper.AppError)
	UpsertTransaction(transaction boil.ContextTransactor, paymentTransaction model.PaymentTransaction) (*model.PaymentTransaction, *model_helper.AppError)
	ValidateGatewayResponse(response *model_helper.GatewayResponse) *model_helper.GatewayError
}
