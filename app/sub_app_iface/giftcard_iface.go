// Code generated by "make app-layers"
// DO NOT EDIT

package sub_app_iface

import (
	"time"

	"github.com/sitename/sitename/app/plugin/interfaces"
	"github.com/sitename/sitename/model"
	"gorm.io/gorm"
)

// GiftcardService contains methods for working with giftcards
type GiftcardService interface {
	// ActiveGiftcards finds giftcards wich have `ExpiryDate` are either NULL OR >= given date
	ActiveGiftcards(date time.Time) ([]*model.GiftCard, *model.AppError)
	// AddGiftcardCodeToCheckout adds giftcard data to checkout by code. Raise InvalidPromoCode if gift card cannot be applied.
	AddGiftcardCodeToCheckout(checkout *model.Checkout, email, promoCode, currency string) (*model.InvalidPromoCode, *model.AppError)
	// BulkUpsertGiftcardEvents tells store to upsert given giftcard events into database then returns them
	BulkUpsertGiftcardEvents(transaction *gorm.DB, events ...*model.GiftCardEvent) ([]*model.GiftCardEvent, *model.AppError)
	// CalculateExpiryDate calculate expiry date based on giftcard settings.
	CalculateExpiryDate(shopSettings model.ShopSettings) *time.Time
	// FulfillNonShippableGiftcards
	FulfillNonShippableGiftcards(orDer *model.Order, orderLines model.OrderLines, siteSettings model.ShopSettings, user *model.User, _ interface{}, manager interfaces.PluginManagerInterface) ([]*model.GiftCard, *model.InsufficientStock, *model.AppError)
	// GiftcardEventsByOptions returns a list of giftcard events filtered using given options
	GiftcardEventsByOptions(options *model.GiftCardEventFilterOption) ([]*model.GiftCardEvent, *model.AppError)
	// GiftcardsByOption finds a list of giftcards with given option
	GiftcardsByOption(option *model.GiftCardFilterOption) ([]*model.GiftCard, *model.AppError)
	// GiftcardsCreate creates purchased gift cards
	GiftcardsCreate(orDer *model.Order, giftcardLines model.OrderLines, quantities map[string]int, settings model.ShopSettings, requestorUser *model.User, _ interface{}, manager interfaces.PluginManagerInterface) ([]*model.GiftCard, *model.AppError)
	// GiftcardsUsedInOrderEvent bulk creates giftcard events
	GiftcardsUsedInOrderEvent(transaction *gorm.DB, balanceData model.BalanceData, orderID string, user *model.User, _ interface{}) ([]*model.GiftCardEvent, *model.AppError)
	// PromoCodeIsGiftCard checks whether there is giftcard with given code
	PromoCodeIsGiftCard(code string) (bool, *model.AppError)
	// RemoveGiftcardCodeFromCheckout drops a relation between giftcard and checkout
	RemoveGiftcardCodeFromCheckout(checkout *model.Checkout, giftcardCode string) *model.AppError
	// SendGiftcardNotification Trigger sending a gift card notification for the given recipient
	SendGiftcardNotification(requesterUser *model.User, _ interface{}, customerUser *model.User, email string, giftCard model.GiftCard, manager interfaces.PluginManagerInterface, channelID string, resending bool) *model.AppError
	// ToggleGiftcardStatus set status of given giftcard to inactive/active
	ToggleGiftcardStatus(giftCard *model.GiftCard) *model.AppError
	// UpsertGiftcards depends on given giftcard's Id to decide saves or updates it
	UpsertGiftcards(transaction *gorm.DB, giftcards ...*model.GiftCard) ([]*model.GiftCard, *model.AppError)
	// relations must be []*Order || []*Checkout
	AddGiftcardRelations(transaction *gorm.DB, giftcards model.Giftcards, relations any) *model.AppError
	// relations must be []*Order || []*Checkout
	RemoveGiftcardRelations(transaction *gorm.DB, giftcards model.Giftcards, relations any) *model.AppError
	DeactivateOrderGiftcards(orderID string, user *model.User, _ interface{}) *model.AppError
	DeleteGiftcards(transaction *gorm.DB, ids []string) *model.AppError
	FulfillGiftcardLines(giftcardLines model.OrderLines, requestorUser *model.User, _ interface{}, order *model.Order, manager interfaces.PluginManagerInterface) ([]*model.Fulfillment, *model.InsufficientStock, *model.AppError)
	GetDefaultGiftcardPayload(giftCard model.GiftCard) model.StringInterface
	GetGiftCard(id string) (*model.GiftCard, *model.AppError)
	GetNonShippableGiftcardLines(lines model.OrderLines) (model.OrderLines, *model.AppError)
	GiftcardsBoughtEvent(transaction *gorm.DB, giftcards []*model.GiftCard, orderID string, user *model.User, _ interface{}) ([]*model.GiftCardEvent, *model.AppError)
	GiftcardsByCheckout(checkoutToken string) ([]*model.GiftCard, *model.AppError)
	OrderHasGiftcardLines(orDer *model.Order) (bool, *model.AppError)
	SendGiftcardsToCustomer(giftcards []*model.GiftCard, userEmail string, requestorUser *model.User, _ interface{}, customerUser *model.User, manager interfaces.PluginManagerInterface, channelSlug string) *model.AppError
}
