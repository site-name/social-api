// Code generated by "make app-layers"
// DO NOT EDIT

package sub_app_iface

import (
	"time"

	"github.com/mattermost/gorp"
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/model/account"
	"github.com/sitename/sitename/model/checkout"
	"github.com/sitename/sitename/model/giftcard"
	"github.com/sitename/sitename/model/order"
	"github.com/sitename/sitename/model/shop"
)

// GiftcardService contains methods for working with giftcards
type GiftcardService interface {
	// ActiveGiftcards finds giftcards wich have `ExpiryDate` are either NULL OR >= given date
	ActiveGiftcards(date *time.Time) ([]*giftcard.GiftCard, *model.AppError)
	// AddGiftcardCodeToCheckout adds giftcard data to checkout by code. Raise InvalidPromoCode if gift card cannot be applied.
	AddGiftcardCodeToCheckout(ckout *checkout.Checkout, email, promoCode, currency string) (*giftcard.InvalidPromoCode, *model.AppError)
	// BulkUpsertGiftcardEvents tells store to upsert given giftcard events into database then returns them
	BulkUpsertGiftcardEvents(transaction *gorp.Transaction, events []*giftcard.GiftCardEvent) ([]*giftcard.GiftCardEvent, *model.AppError)
	// CommonCreateGiftcardEvent is common method for creating giftcard events
	CommonCreateGiftcardEvent(giftcardID, userID string, parameters model.StringMap, Type string) (*giftcard.GiftCardEvent, *model.AppError)
	// CreateGiftCardCheckout create a new giftcard-checkout relation and returns it
	CreateGiftCardCheckout(giftcardID string, checkoutToken string) (*giftcard.GiftCardCheckout, *model.AppError)
	// DeleteGiftCardCheckout drops a giftcard-checkout relation
	DeleteGiftCardCheckout(giftcardID string, checkoutToken string) *model.AppError
	// FulfillNonShippableGiftcards
	FulfillNonShippableGiftcards(orDer *order.Order, orderLines order.OrderLines, siteSettings *shop.Shop, user *account.User, _ interface{}, manager interface{}) ([]*giftcard.GiftCard, *model.AppError)
	// GiftcardsByOption finds a list of giftcards with given option
	GiftcardsByOption(transaction *gorp.Transaction, option *giftcard.GiftCardFilterOption) ([]*giftcard.GiftCard, *model.AppError)
	// GiftcardsCreate creates purchased gift cards
	GiftcardsCreate(orDer *order.Order, giftcardLines order.OrderLines, quantities map[string]int, settings *shop.Shop, requestorUser *account.User, _ interface{}, manager interface{}) ([]*giftcard.GiftCard, *model.AppError)
	// GiftcardsUsedInOrderEvent bulk creates giftcard events
	GiftcardsUsedInOrderEvent(transaction *gorp.Transaction, balanceData giftcard.BalanceData, orderID string, user *account.User, _ interface{}) ([]*giftcard.GiftCardEvent, *model.AppError)
	// PromoCodeIsGiftCard checks whether there is giftcard with given code
	PromoCodeIsGiftCard(code string) (bool, *model.AppError)
	// RemoveGiftcardCodeFromCheckout drops a relation between giftcard and checkout
	RemoveGiftcardCodeFromCheckout(ckout *checkout.Checkout, giftcardCode string) *model.AppError
	// ToggleGiftcardStatus set status of given giftcard to inactive/active
	ToggleGiftcardStatus(giftCard *giftcard.GiftCard) *model.AppError
	// UpsertGiftcards depends on given giftcard's Id to decide saves or updates it
	UpsertGiftcards(transaction *gorp.Transaction, giftcards ...*giftcard.GiftCard) ([]*giftcard.GiftCard, *model.AppError)
	// UpsertOrderGiftcardRelations takes an order-giftcard relation instance then save it
	UpsertOrderGiftcardRelations(transaction *gorp.Transaction, orderGiftCards ...*giftcard.OrderGiftCard) ([]*giftcard.OrderGiftCard, *model.AppError)
	GetGiftCard(id string) (*giftcard.GiftCard, *model.AppError)
	GetNonShippableGiftcardLines(lineIDs []string)
	GiftcardsByCheckout(checkoutToken string) ([]*giftcard.GiftCard, *model.AppError)
}
