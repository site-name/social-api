// Code generated by "make app-layers"
// DO NOT EDIT

package sub_app_iface

import (
	"io"
	"mime/multipart"
	"time"

	"github.com/sitename/sitename/app/request"
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/model/file"
	"github.com/sitename/sitename/modules/filestore"
)

// FileService contains methods for working with files
type FileService interface {
	// This function zip's up all the files in fileDatas array and then saves it to the directory specified with the specified zip file name
	// Ensure the zip file name ends with a .zip
	CreateZipFileAndAddFiles(fileBackend filestore.FileBackend, fileDatas []model.FileData, zipFileName, directory string) error
	// UploadFileX uploads a single file as specified in t. It applies the upload
	// constraints, executes plugins and image processing logic as needed. It
	// returns a filled-out FileInfo and an optional error. A plugin may reject the
	// upload, returning a rejection error. In this case FileInfo would have
	// contained the last "good" FileInfo before the execution of that plugin.
	UploadFileX(c *request.Context, channelID, name string, input io.Reader, opts ...func(*UploadFileTask)) (*file.FileInfo, *model.AppError)
	// Caller must close the first return value
	FileReader(path string) (filestore.ReadCloseSeeker, *model.AppError)
	// FileBackend returns filebackend of the system
	FileBackend() (filestore.FileBackend, *model.AppError)
	// FileExists checks if given path exists
	FileExists(path string) (bool, *model.AppError)
	// FileModTime get last modification time of given path
	FileModTime(path string) (time.Time, *model.AppError)
	// FileSize checks size of given path
	FileSize(path string) (int64, *model.AppError)
	// GetFileInfo get fileInfo object from database with given fileID, populates its "MiniPreview" and returns it.
	GetFileInfos(page, perPage int, opt *file.GetFileInfosOptions) ([]*file.FileInfo, *model.AppError)
	// MoveFile moves file from given oldPath to newPath
	MoveFile(oldPath, newPath string) *model.AppError
	// ReadFile read file content from given path
	ReadFile(path string) ([]byte, *model.AppError)
	// TestFileStoreConnection test if connection to file backend server is good
	TestFileStoreConnection() *model.AppError
	// TestFileStoreConnectionWithConfig test file backend connection with config
	TestFileStoreConnectionWithConfig(settings *model.FileSettings) *model.AppError
	// UploadFile uploads a single file in form of a completely constructed byte array for a channel.
	UploadFile(c *request.Context, data []byte, channelID string, filename string) (*file.FileInfo, *model.AppError)
	// Uploads some files to the given team and channel as the given user. files and filenames should have
	// the same length. clientIds should either not be provided or have the same length as files and filenames.
	// The provided files should be closed by the caller so that they are not leaked.
	UploadFiles(c *request.Context, teamID string, channelID string, userID string, files []io.ReadCloser, filenames []string, clientIds []string, now time.Time) (*file.FileUploadResponse, *model.AppError)
	AppendFile(fr io.Reader, path string) (int64, *model.AppError)
	CheckMandatoryS3Fields(settings *model.FileSettings) *model.AppError
	CopyFileInfos(userID string, fileIDs []string) ([]string, *model.AppError)
	DoUploadFile(c *request.Context, now time.Time, rawTeamId string, rawChannelId string, rawUserId string, rawFilename string, data []byte) (*file.FileInfo, *model.AppError)
	DoUploadFileExpectModification(c *request.Context, now time.Time, rawTeamId string, rawChannelId string, rawUserId string, rawFilename string, data []byte) (*file.FileInfo, []byte, *model.AppError)
	DownloadFromURL(downloadURL string) ([]byte, error)
	ExtractContentFromFileInfo(fileInfo *file.FileInfo) error
	GeneratePublicLink(siteURL string, info *file.FileInfo) string
	GetFile(fileID string) ([]byte, *model.AppError)
	GetFileInfo(fileID string) (*file.FileInfo, *model.AppError)
	GetUploadSession(uploadId string) (*file.UploadSession, *model.AppError)
	GetUploadSessionsForUser(userID string) ([]*file.UploadSession, *model.AppError)
	HandleImages(previewPathList []string, thumbnailPathList []string, fileData [][]byte)
	ListDirectory(path string) ([]string, *model.AppError)
	RemoveDirectory(path string) *model.AppError
	RemoveFile(path string) *model.AppError
	UploadData(c *request.Context, us *file.UploadSession, rd io.Reader) (*file.FileInfo, *model.AppError)
	UploadMultipartFiles(c *request.Context, teamID string, channelID string, userID string, fileHeaders []*multipart.FileHeader, clientIds []string, now time.Time) (*file.FileUploadResponse, *model.AppError)
	WriteFile(fr io.Reader, path string) (int64, *model.AppError)
}
