// Code generated by "make app-layers"
// DO NOT EDIT

package sub_app_iface

import (
	"github.com/site-name/decimal"
	goprices "github.com/site-name/go-prices"
	"github.com/sitename/sitename/app/order/types"
	"github.com/sitename/sitename/app/plugin/interfaces"
	"github.com/sitename/sitename/model_helper"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"gorm.io/gorm"
)

// OrderService contains methods for working with orders
type OrderService interface {
	// AddGiftcardsToOrder
	AddGiftcardsToOrder(transaction boil.ContextTransactor, checkoutInfo model_helper.CheckoutInfo, order *model.Order, totalPriceLeft *goprices.Money, user *model.User, _ any) *model_helper.AppError
	// AddVariantToOrder Add total_quantity of variant to order.
	//
	// Returns an order line the variant was added to.
	AddVariantToOrder(order model.Order, variant model.ProductVariant, quantity int, user *model.User, _ any, manager interfaces.PluginManagerInterface, discounts []*model_helper.DiscountInfo, allocateStock bool) (*model.OrderLine, *model.InsufficientStock, *model_helper.AppError)
	// AllDigitalOrderLinesOfOrder finds all order lines belong to given order, and are digital products
	AllDigitalOrderLinesOfOrder(orderID string) ([]*model.OrderLine, *model_helper.AppError)
	// ApplyDiscountToValue Calculate the price based on the provided values
	ApplyDiscountToValue(value *decimal.Decimal, valueType model.DiscountValueType, currency string, priceToDiscount any) (any, error)
	// AutomaticallyFulfillDigitalLines
	// Fulfill all digital lines which have enabled automatic fulfillment setting. Send confirmation email afterward.
	AutomaticallyFulfillDigitalLines(order model.Order, manager interfaces.PluginManagerInterface) (*model.InsufficientStock, *model_helper.AppError)
	// BulkDeleteFulfillments tells store to delete fulfillments that satisfy given option
	BulkDeleteFulfillments(transaction boil.ContextTransactor, fulfillments model.Fulfillments) *model_helper.AppError
	// BulkUpsertFulfillmentLines performs bulk upsert given fulfillment lines and returns them
	BulkUpsertFulfillmentLines(transaction boil.ContextTransactor, fulfillmentLines []*model.FulfillmentLine) ([]*model.FulfillmentLine, *model_helper.AppError)
	// BulkUpsertOrderLines perform bulk upsert given order lines
	BulkUpsertOrderLines(transaction boil.ContextTransactor, orderLines []*model.OrderLine) ([]*model.OrderLine, *model_helper.AppError)
	// BulkUpsertOrders performs bulk upsert given orders
	BulkUpsertOrders(transaction boil.ContextTransactor, orders []*model.Order) ([]*model.Order, *model_helper.AppError)
	// Calculate discount value depending on voucher and discount types.
	//
	// Raise NotApplicable if voucher of given type cannot be applied.
	GetVoucherDiscountForOrder(order *model.Order) (result any, notApplicableErr *model.NotApplicable, appErr *model_helper.AppError)
	// CanMarkOrderAsPaid checks if given order can be marked as paid.
	CanMarkOrderAsPaid(ord *model.Order, payments []*model.Payment) (bool, *model_helper.AppError)
	// CancelFulfillment Return products to corresponding stocks.
	CancelFulfillment(fulfillment model.Fulfillment, user *model.User, _ any, warehouse *model.WareHouse, manager interfaces.PluginManagerInterface) (*model.Fulfillment, *model_helper.AppError)
	// CancelOrder Release allocation of unfulfilled order items.
	CancelOrder(transaction boil.ContextTransactor, order *model.Order, user *model.User, _ any, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// CancelWaitingFulfillment cancels fulfillments which is in waiting for approval state.
	CancelWaitingFulfillment(fulfillment model.Fulfillment, user *model.User, _ any, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// ChangeOrderLineQuantity Change the quantity of ordered items in a order line.
	//
	// NOTE: userID can be empty
	ChangeOrderLineQuantity(transaction boil.ContextTransactor, userID string, _ any, lineInfo *model.OrderLineData, oldQuantity int, newQuantity int, channelSlug string, manager interfaces.PluginManagerInterface, sendEvent bool) (*model.InsufficientStock, *model_helper.AppError)
	// CleanMarkOrderAsPaid Check if an order can be marked as paid.
	CleanMarkOrderAsPaid(order *model.Order) *model_helper.AppError
	// CommonCreateOrderEvent is common method for creating desired order event instance
	CommonCreateOrderEvent(transaction boil.ContextTransactor, option *model.OrderEventOption) (*model.OrderEvent, *model_helper.AppError)
	// CreateGiftcardsWhenApprovingFulfillment
	CreateGiftcardsWhenApprovingFulfillment(order *model.Order, linesData []*model.OrderLineData, user *model.User, _ any, manager interfaces.PluginManagerInterface, settings model.ShopSettings) *model_helper.AppError
	// CreateOrderDiscountForOrder Add new order discount and update the prices
	CreateOrderDiscountForOrder(transaction boil.ContextTransactor, order *model.Order, reason string, valueType model.DiscountValueType, value *decimal.Decimal) (*model.OrderDiscount, *model_helper.AppError)
	// CreateReplaceOrder Create draft order with lines to replace
	CreateReplaceOrder(user *model.User, _ any, originalOrder model.Order, orderLinesToReplace []*model.OrderLineData, fulfillmentLinesToReplace []*model.FulfillmentLineData) (*model.Order, *model_helper.AppError)
	// CustomerEmail try finding order's owner's email. If order has no user or error occured during the finding process, returns order's UserEmail property instead
	CustomerEmail(ord *model.Order) (string, *model_helper.AppError)
	// DeleteFulfillmentLinesByOption tells store to delete fulfillment lines filtered by given option
	DeleteFulfillmentLinesByOption(transaction boil.ContextTransactor, option *model.FulfillmentLineFilterOption) *model_helper.AppError
	// DeleteOrderLine Delete an order line from an order.
	DeleteOrderLine(tx *gorm.DB, lineInfo *model.OrderLineData, manager interfaces.PluginManagerInterface) (*model.InsufficientStock, *model_helper.AppError)
	// DeleteOrderLines perform bulk delete given order lines
	DeleteOrderLines(tx *gorm.DB, orderLineIDs []string) *model_helper.AppError
	// FilterOrdersByOptions is common method for filtering orders by given option
	FilterOrdersByOptions(option *model.OrderFilterOption) (int64, []*model.Order, *model_helper.AppError)
	// Fulfill order.
	//
	//	Function create fulfillments with lines.
	//	Next updates Order based on created fulfillments.
	//
	//	Args:
	//	    requester (User): Requester who trigger this action.
	//	    order (Order): Order to fulfill
	//	    fulfillment_lines_for_warehouses (Dict): Dict with information from which
	//	        system create fulfillments. Example:
	//	            {
	//	                (Warehouse.pk): [
	//	                    {
	//	                        "order_line": (OrderLine),
	//	                        "quantity": (int),
	//	                    },
	//	                    ...
	//	                ]
	//	            }
	//	    manager (PluginsManager): Base manager for handling plugins logic.
	//	    notify_customer (bool): If `True` system send email about
	//	        fulfillments to customer.
	//
	//	Return:
	//	    List[Fulfillment]: Fulfillmet with lines created for this order
	//	        based on information form `fulfillment_lines_for_warehouses`
	//
	//
	//	Raise:
	//	    InsufficientStock: If system hasn't containt enough item in stock for any line.
	CreateFulfillments(user *model.User, _ any, order *model.Order, fulfillmentLinesForWarehouses map[string][]*model.QuantityOrderLine, manager interfaces.PluginManagerInterface, notifyCustomer bool, approved bool, allowStockTobeExceeded bool) ([]*model.Fulfillment, *model.InsufficientStock, *model_helper.AppError)
	// FulfillOrderLines Fulfill order line with given quantity
	FulfillOrderLines(orderLineInfos []*model.OrderLineData, manager interfaces.PluginManagerInterface, allowStockTobeExceeded bool) (*model.InsufficientStock, *model_helper.AppError)
	// FulfillmentByOption returns 1 fulfillment filtered using given options
	FulfillmentByOption(option *model.FulfillmentFilterOption) (*model.Fulfillment, *model_helper.AppError)
	// FulfillmentLinesByOption returns all fulfillment lines by option
	FulfillmentLinesByOption(option *model.FulfillmentLineFilterOption) (model.FulfillmentLines, *model_helper.AppError)
	// FulfillmentTrackingUpdated
	FulfillmentTrackingUpdated(fulfillment *model.Fulfillment, user *model.User, _ any, trackingNumber string, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// FulfillmentsByOption returns a list of fulfillments be given options
	FulfillmentsByOption(option *model.FulfillmentFilterOption) (model.Fulfillments, *model_helper.AppError)
	// Get prices of variants belonging to the discounted specific products.
	//
	// Specific products are products, collections and categories.
	// Product must be assigned directly to the discounted category, assigning
	// product to child category won't work
	GetPricesOfDiscountedSpecificProduct(orderLines []*model.OrderLine, voucher *model.Voucher) ([]*goprices.Money, *model_helper.AppError)
	// GetDiscountedLines returns a list of discounted order lines, filterd from given orderLines
	GetDiscountedLines(orderLines model.OrderLineSlice, voucher *model.Voucher) ([]*model.OrderLine, *model_helper.AppError)
	// GetOrderCountry Return country to which order will be shipped
	GetOrderCountry(order *model.Order) (model.CountryCode, *model_helper.AppError)
	// GetOrderDiscounts Return all discounts applied to the order by staff user
	GetOrderDiscounts(order *model.Order) ([]*model.OrderDiscount, *model_helper.AppError)
	// GetProductsVoucherDiscountForOrder Calculate products discount value for a voucher, depending on its type.
	GetProductsVoucherDiscountForOrder(order *model.Order) (*goprices.Money, *model_helper.AppError)
	// GetTotalOrderDiscount Return total order discount assigned to the order
	GetTotalOrderDiscount(order *model.Order) (*goprices.Money, *model_helper.AppError)
	// GetValidShippingMethodsForOrder returns a list of valid shipping methods for given order
	GetValidShippingMethodsForOrder(order *model.Order) (model.ShippingMethodSlice, *model_helper.AppError)
	// HandleFullyPaidOrder
	//
	// user can be nil
	HandleFullyPaidOrder(manager interfaces.PluginManagerInterface, order model.Order, user *model.User, _ any) (*model.InsufficientStock, *model_helper.AppError)
	// Mark order as paid.
	//
	// Allows to create a payment for an order without actually performing any
	// payment by the gateway.
	//
	// externalReference can be empty
	MarkOrderAsPaid(order model.Order, requestUser *model.User, _ any, manager interfaces.PluginManagerInterface, externalReference string) (*model.PaymentError, *model_helper.AppError)
	// OrderAuthorized
	OrderAuthorized(order model.Order, user *model.User, _ any, amount *decimal.Decimal, payMent model.Payment, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// OrderAwaitsFulfillmentApproval
	OrderAwaitsFulfillmentApproval(fulfillments []*model.Fulfillment, user *model.User, _ any, fulfillmentLines model.FulfillmentLines, manager interfaces.PluginManagerInterface, notifyCustomer bool) *model_helper.AppError
	// OrderById retuns an order with given id
	OrderById(id string) (*model.Order, *model_helper.AppError)
	// OrderCanCalcel checks if given order can be canceled
	OrderCanCancel(ord *model.Order) (bool, *model_helper.AppError)
	// OrderCanCapture
	OrderCanCapture(ord *model.Order, payment *model.Payment) (bool, *model_helper.AppError)
	// OrderCanRefund checks if order can refund
	OrderCanRefund(ord *model.Order, payment *model.Payment) (bool, *model_helper.AppError)
	// OrderCanVoid
	OrderCanVoid(ord *model.Order, payment *model.Payment) (bool, *model_helper.AppError)
	// OrderCaptured
	OrderCaptured(order model.Order, user *model.User, _ any, amount *decimal.Decimal, payMent model.Payment, manager interfaces.PluginManagerInterface) (*model.InsufficientStock, *model_helper.AppError)
	// OrderConfirmed Trigger event, plugin hooks and optionally confirmation email.
	OrderConfirmed(tx *gorm.DB, order model.Order, user *model.User, _ any, manager interfaces.PluginManagerInterface, sendConfirmationEmail bool) *model_helper.AppError
	// OrderCreated. `fromDraft` is default to false
	OrderCreated(tx *gorm.DB, order model.Order, user *model.User, _ any, manager interfaces.PluginManagerInterface, fromDraft bool) (*model.InsufficientStock, *model_helper.AppError)
	// OrderFulfilled
	OrderFulfilled(fulfillments []*model.Fulfillment, user *model.User, _ any, fulfillmentLines []*model.FulfillmentLine, manager interfaces.PluginManagerInterface, notifyCustomer bool) *model_helper.AppError
	// OrderIsCaptured checks if given order is captured
	OrderIsCaptured(orderID string) (bool, *model_helper.AppError)
	// OrderIsPreAuthorized checks if order is pre-authorized
	OrderIsPreAuthorized(orderID string) (bool, *model_helper.AppError)
	// OrderLineById returns an order line byt given orderLineID
	OrderLineById(orderLineID string) (*model.OrderLine, *model_helper.AppError)
	// OrderLineIsDigital Check if a variant is digital and contains digital content.
	OrderLineIsDigital(orderLine *model.OrderLine) (bool, *model_helper.AppError)
	// OrderLineNeedsAutomaticFulfillment Check if given line is digital and should be automatically fulfilled.
	//
	// NOTE: before calling this, caller can attach related data into `orderLine` so this function does not have to call the database
	OrderLineNeedsAutomaticFulfillment(orderLine *model.OrderLine) (bool, *model_helper.AppError)
	// OrderLinesByOption returns a list of order lines by given option
	OrderLinesByOption(option *model.OrderLineFilterOption) (model.OrderLineSlice, *model_helper.AppError)
	// OrderNeedsAutomaticFulfillment checks if given order has digital products which shoul be automatically fulfilled.
	OrderNeedsAutomaticFulfillment(order model.Order) (bool, *model_helper.AppError)
	// OrderRefunded
	OrderRefunded(order model.Order, user *model.User, _ any, amount decimal.Decimal, payMent model.Payment, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// OrderReturned
	OrderReturned(transaction boil.ContextTransactor, order model.Order, user *model.User, _ any, returnedLines []*model.QuantityOrderLine) *model_helper.AppError
	// OrderShippingIsRequired returns a boolean value indicating that given order requires shipping or not
	OrderShippingIsRequired(orderID string) (bool, *model_helper.AppError)
	// OrderShippingUpdated
	OrderShippingUpdated(order model.Order, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// OrderSubTotal returns sum of TotalPrice of all order lines that belong to given order
	OrderSubTotal(ord *model.Order) (*goprices.TaxedMoney, *model_helper.AppError)
	// OrderTotalAuthorized returns order's total authorized amount
	OrderTotalAuthorized(ord *model.Order) (*goprices.Money, *model_helper.AppError)
	// OrderTotalQuantity return total quantity of given order
	OrderTotalQuantity(orderID string) (int, *model_helper.AppError)
	// OrderVoided
	OrderVoided(order model.Order, user *model.User, _ any, payMent *model.Payment, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// Proceed with all steps required for refunding products.
	//
	// Calculate refunds for products based on the order's lines and fulfillment
	// lines.  The logic takes the list of order lines, fulfillment lines, and their
	// quantities which is used to create the refund fulfillment. The stock for
	// unfulfilled lines will be deallocated.
	//
	// NOTE: `refundShippingCosts` default to false
	CreateRefundFulfillment(requester *model.User, _ any, order model.Order, payMent model.Payment, orderLinesToRefund []*model.OrderLineData, fulfillmentLinesToRefund []*model.FulfillmentLineData, manager interfaces.PluginManagerInterface, amount *decimal.Decimal, refundShippingCosts bool) (*model.Fulfillment, *model.PaymentError, *model_helper.AppError)
	// Process the request for replacing or returning the products.
	//
	// Process the refund when the refund is set to True. The amount of refund will be
	// calculated for all lines with statuses different from refunded.  The lines which
	// are set to replace will not be included in the refund amount.
	//
	// If the amount is provided, the refund will be used for this amount.
	//
	// If refund_shipping_costs is True, the calculated refund amount will include
	// shipping costs.
	//
	// All lines with replace set to True will be used to create a new draft order, with
	// the same order details as the original order.  These lines will be moved to
	// fulfillment with status replaced. The events with relation to new order will be
	// created.
	//
	// All lines with replace set to False will be moved to fulfillment with status
	// returned/refunded_and_returned - depends on refund flag and current line status.
	// If the fulfillment line has refunded status it will be moved to
	// returned_and_refunded
	//
	// NOTE: `payMent`, `amount` , `user` are optional.
	//
	// `refund` and `refundShippingCosts` default to false.
	CreateFulfillmentsForReturnedProducts(user *model.User, _ any, order model.Order, payMent *model.Payment, orderLineDatas []*model.OrderLineData, fulfillmentLineDatas []*model.FulfillmentLineData, manager interfaces.PluginManagerInterface, refund bool, amount *decimal.Decimal, refundShippingCosts bool) (*model.Fulfillment, *model.Fulfillment, *model.Order, *model.PaymentError, *model_helper.AppError)
	// ProcessReplace Create replace fulfillment and new draft order.
	//
	// Move all requested lines to fulfillment with status replaced. Based on original
	// order create the draft order with all user details, and requested lines.
	ProcessReplace(requester *model.User, order model.Order, orderLineDatas []*model.OrderLineData, fulfillmentLineDatas []*model.FulfillmentLineData, manager interfaces.PluginManagerInterface) (*model.Fulfillment, *model.Order, *model_helper.AppError)
	// ReCalculateOrderWeight
	ReCalculateOrderWeight(transaction boil.ContextTransactor, order *model.Order) *model_helper.AppError
	// Recalculate all order discounts assigned to order.
	//
	// It returns the list of tuples which contains order discounts where the amount has been changed.
	RecalculateOrderDiscounts(transaction boil.ContextTransactor, order *model.Order) ([][2]*model.OrderDiscount, *model_helper.AppError)
	// Recalculate and assign total price of order.
	//
	// Total price is a sum of items in order and order shipping price minus
	// discount amount.
	//
	// Voucher discount amount is recalculated by default. To avoid this, pass
	// update_voucher_discount argument set to False.
	//
	// NOTE: `kwargs` can be nil
	RecalculateOrder(transaction boil.ContextTransactor, order *model.Order, kwargs map[string]any) *model_helper.AppError
	// RemoveDiscountFromOrderLine Drop discount applied to order line. Restore undiscounted price
	RemoveDiscountFromOrderLine(transaction boil.ContextTransactor, orderLine model.OrderLine, order model.Order, manager interfaces.PluginManagerInterface, taxIncluded bool) *model_helper.AppError
	// RemoveOrderDiscountFromOrder Remove the order discount from order and update the prices.
	RemoveOrderDiscountFromOrder(transaction boil.ContextTransactor, order *model.Order, orderDiscount *model.OrderDiscount) *model_helper.AppError
	// RestockFulfillmentLines Return fulfilled products to corresponding stocks.
	//
	// Return products to stocks and update order lines quantity fulfilled values.
	RestockFulfillmentLines(transaction boil.ContextTransactor, fulfillment *model.Fulfillment, warehouse *model.WareHouse) (appErr *model_helper.AppError)
	// RestockOrderLines Return ordered products to corresponding stocks
	RestockOrderLines(order *model.Order, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// SendFulfillmentConfirmationToCustomer
	//
	// NOTE: user can be nil
	SendFulfillmentConfirmationToCustomer(order *model.Order, fulfillment *model.Fulfillment, user *model.User, _, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// SendOrderConfirmation sends notification with order confirmation
	SendOrderConfirmation(order *model.Order, redirectURL string, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// SendOrderConfirmed Send email which tells customer that order has been confirmed
	SendOrderConfirmed(order model.Order, user *model.User, _ any, manager interfaces.PluginManagerInterface)
	// SendPaymentConfirmation sends notification with the payment confirmation
	SendPaymentConfirmation(order model.Order, manager interfaces.PluginManagerInterface) *model_helper.AppError
	// UpdateDiscountForOrderLine Update discount fields for order line. Apply discount to the price
	//
	// `reason`, `valueType` can be empty. `value` can be nil
	UpdateDiscountForOrderLine(tx *gorm.DB, orderLine model.OrderLine, order model.Order, reason string, valueType model.DiscountValueType, value *decimal.Decimal, manager interfaces.PluginManagerInterface, taxIncluded bool) *model_helper.AppError
	// UpdateOrderDiscountForOrder Update the order_discount for an order and recalculate the order's prices
	//
	// `reason`, `valueType` and `value` can be nil
	UpdateOrderDiscountForOrder(transaction boil.ContextTransactor, order *model.Order, orderDiscountToUpdate *model.OrderDiscount, reason string, valueType model.DiscountValueType, value *decimal.Decimal) *model_helper.AppError
	// UpdateOrderPrices Update prices in order with given discounts and proper taxes.
	UpdateOrderPrices(tx *gorm.DB, order model.Order, manager interfaces.PluginManagerInterface, taxIncluded bool) *model_helper.AppError
	// UpdateOrderStatus Update order status depending on fulfillments
	UpdateOrderStatus(transaction boil.ContextTransactor, order model.Order) *model_helper.AppError
	// UpdateOrderTotalPaid update given order's total paid amount
	UpdateOrderTotalPaid(transaction boil.ContextTransactor, orDer *model.Order) *model_helper.AppError
	// UpdateVoucherDiscount Recalculate order discount amount based on order voucher
	UpdateVoucherDiscount(fun types.RecalculateOrderPricesFunc) types.RecalculateOrderPricesFunc
	// UpsertFulfillment performs some actions then save given fulfillment
	UpsertFulfillment(transaction boil.ContextTransactor, fulfillment *model.Fulfillment) (*model.Fulfillment, *model_helper.AppError)
	// UpsertOrder depends on given order's Id property to decide update/save it
	UpsertOrder(transaction boil.ContextTransactor, order *model.Order) (*model.Order, *model_helper.AppError)
	// UpsertOrderLine depends on given orderLine's Id property to decide update order save it
	UpsertOrderLine(transaction boil.ContextTransactor, orderLine *model.OrderLine) (*model.OrderLine, *model_helper.AppError)
	// ValidateDraftOrder checks if the given order contains the proper data.
	//
	//	// Has proper customer data,
	//	// Shipping address and method are set up,
	//	// Product variants for order lines still exists in database.
	//	// Product variants are available in requested quantity.
	//	// Product variants are published.
	ValidateDraftOrder(order *model.Order) *model_helper.AppError
	// ValidateProductIsPublishedInChannel checks if some of given variants belong to unpublished products
	ValidateProductIsPublishedInChannel(variants model.ProductVariants, channelID string) *model_helper.AppError
	ApproveFulfillment(fulfillment *model.Fulfillment, user *model.User, _ any, manager interfaces.PluginManagerInterface, settings model.ShopSettings, notifyCustomer bool, allowStockTobeExceeded bool) (*model.Fulfillment, *model.InsufficientStock, *model_helper.AppError)
	CreateOrderEvent(transaction boil.ContextTransactor, orderLine *model.OrderLine, userID string, quantityDiff int) *model_helper.AppError
	CreateReturnFulfillment(requester *model.User, order model.Order, orderLineDatas []*model.OrderLineData, fulfillmentLineDatas []*model.FulfillmentLineData, totalRefundAmount *decimal.Decimal, shippingRefundAmount *decimal.Decimal, manager interfaces.PluginManagerInterface) (*model.Fulfillment, *model_helper.AppError)
	DeleteOrders(transaction boil.ContextTransactor, ids []string) (int64, *model_helper.AppError)
	DraftOrderCreatedFromReplaceEvent(transaction boil.ContextTransactor, draftOrder model.Order, originalOrder model.Order, user *model.User, _ any, lines []*model.QuantityOrderLine) (*model.OrderEvent, *model_helper.AppError)
	FilterOrderEventsByOptions(options *model.OrderEventFilterOptions) ([]*model.OrderEvent, *model_helper.AppError)
	FulfillmentAwaitsApprovalEvent(transaction boil.ContextTransactor, orDer *model.Order, user *model.User, _ any, fulfillmentLines model.FulfillmentLines) (*model.OrderEvent, *model_helper.AppError)
	FulfillmentCanceledEvent(transaction boil.ContextTransactor, orDer *model.Order, user *model.User, _ any, fulfillment *model.Fulfillment) (*model.OrderEvent, *model_helper.AppError)
	FulfillmentFulfilledItemsEvent(transaction boil.ContextTransactor, orDer *model.Order, user *model.User, _ any, fulfillmentLines model.FulfillmentLines) (*model.OrderEvent, *model_helper.AppError)
	FulfillmentReplacedEvent(transaction boil.ContextTransactor, orDer model.Order, user *model.User, _ any, replacedLines []*model.QuantityOrderLine) (*model.OrderEvent, *model_helper.AppError)
	FulfillmentTrackingUpdatedEvent(orDer *model.Order, user *model.User, _ any, trackingNumber string, fulfillment *model.Fulfillment) (*model.OrderEvent, *model_helper.AppError)
	GetValidCollectionPointsForOrder(lines model.OrderLineSlice, addressCountryCode model.CountryCode) (model.Warehouses, *model_helper.AppError)
	GetVoucherDiscountAssignedToOrder(order *model.Order) (*model.OrderDiscount, *model_helper.AppError)
	LinePerQuantityToLineObject(quantity int, line *model.OrderLine) model_types.JSONString
	LinesPerQuantityToLineObjectList(quantitiesPerOrderLine []*model.QuantityOrderLine) []model_types.JSONString
	MatchOrdersWithNewUser(user *model.User) *model_helper.AppError
	OrderConfirmedEvent(tx *gorm.DB, orDer model.Order, user *model.User, _ any) (*model.OrderEvent, *model_helper.AppError)
	OrderCreatedEvent(orDer model.Order, user *model.User, _ any, fromDraft bool) (*model.OrderEvent, *model_helper.AppError)
	OrderDiscountAutomaticallyUpdatedEvent(transaction boil.ContextTransactor, ord *model.Order, orderDiscount *model.OrderDiscount, oldOrderDiscount *model.OrderDiscount) (*model.OrderEvent, *model_helper.AppError)
	OrderDiscountEvent(transaction boil.ContextTransactor, eventType model.OrderEventType, ord *model.Order, user *model.User, orderDiscount *model.OrderDiscount, oldOrderDiscount *model.OrderDiscount) (*model.OrderEvent, *model_helper.AppError)
	OrderDiscountsAutomaticallyUpdatedEvent(transaction boil.ContextTransactor, ord *model.Order, changedOrderDiscounts [][2]*model.OrderDiscount) *model_helper.AppError
	OrderLineDiscountEvent(eventType model.OrderEventType, ord *model.Order, user *model.User, line *model.OrderLine, lineBeforeUpdate *model.OrderLine) (*model.OrderEvent, *model_helper.AppError)
	OrderManuallyMarkedAsPaidEvent(transaction boil.ContextTransactor, orDer model.Order, user *model.User, _ any, transactionReference string) (*model.OrderEvent, *model_helper.AppError)
	OrderNoteAddedEvent(tx *gorm.DB, order *model.Order, user *model.User, message string) (*model.OrderEvent, *model_helper.AppError)
	OrderReplacementCreated(transaction boil.ContextTransactor, originalOrder model.Order, replaceOrder *model.Order, user *model.User, _ any) (*model.OrderEvent, *model_helper.AppError)
	PrepareDiscountObject(orderDiscount *model.OrderDiscount, oldOrderDiscount *model.OrderDiscount) model_types.JSONString
	SendFulfillmentUpdate(order *model.Order, fulfillment *model.Fulfillment, manager interfaces.PluginManagerInterface) *model_helper.AppError
	SendOrderCancelledConfirmation(order *model.Order, user *model.User, _, manager interfaces.PluginManagerInterface) *model_helper.AppError
	SendOrderRefundedConfirmation(order model.Order, user *model.User, _ any, amount decimal.Decimal, currency string, manager interfaces.PluginManagerInterface) *model_helper.AppError
	SumOrderTotals(orders []*model.Order, currencyCode string) (*goprices.TaxedMoney, *model_helper.AppError)
	UpdateGiftcardBalance(giftCard *model.GiftCard, totalPriceLeft *goprices.Money) model.BalanceObject
	UpdateTaxesForOrderLine(line model.OrderLine, order model.Order, manager interfaces.PluginManagerInterface, taxIncluded bool) *model_helper.AppError
	UpdateTaxesForOrderLines(lines model.OrderLineSlice, order model.Order, manager interfaces.PluginManagerInterface, taxIncludeed bool) *model_helper.AppError
}
