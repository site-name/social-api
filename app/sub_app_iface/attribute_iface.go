// Code generated by "make app-layers"
// DO NOT EDIT

package sub_app_iface

import (
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/model/attribute"
)

// AttributeService contains methods for working with attributes
type AttributeService interface {
	// AssignedPageAttributeByOption returns 1 assigned page attribute
	AssignedPageAttributeByOption(option *attribute.AssignedPageAttributeFilterOption) (*attribute.AssignedPageAttribute, *model.AppError)
	// AssignedProductAttributeByOption returns an assigned product attribute filtered using given option
	AssignedProductAttributeByOption(option *attribute.AssignedProductAttributeFilterOption) (*attribute.AssignedProductAttribute, *model.AppError)
	// AssignedVariantAttributeByOption returns an assigned variant attribute filtered by given option
	AssignedVariantAttributeByOption(option *attribute.AssignedVariantAttributeFilterOption) (*attribute.AssignedVariantAttribute, *model.AppError)
	// AssignedVariantAttributesByOption returns a list of assigned variant attributes filtered by given options
	AssignedVariantAttributesByOption(option *attribute.AssignedVariantAttributeFilterOption) ([]*attribute.AssignedVariantAttribute, error)
	// AssociateAttributeValuesToInstance Assign given attribute values to a product or variant.
	// Note: be award this function invokes the ``set`` method on the instance's
	// attribute association. Meaning any values already assigned or concurrently
	// assigned will be overridden by this call.
	//
	// `instance` must be either *Product or *ProductVariant or *Page.
	// `attributeID` must be ID of processing `Attribute`
	//
	// Returned interface{} must be either: `*AssignedProductAttribute` or `*AssignedVariantAttribute` or `*AssignedPageAttribute`
	AssociateAttributeValuesToInstance(instance interface{}, attributeID string, values []*attribute.AttributeValue) (interface{}, *model.AppError)
	// AttributePageByOption returns an attribute page filtered using given option
	AttributePageByOption(option *attribute.AttributePageFilterOption) (*attribute.AttributePage, *model.AppError)
	// AttributeProductByOption returns an attribute product filtered using given option
	AttributeProductByOption(option *attribute.AttributeProductFilterOption) (*attribute.AttributeProduct, *model.AppError)
	// AttributeVariantByOption returns an attribute variant filtered using given option
	AttributeVariantByOption(option *attribute.AttributeVariantFilterOption) (*attribute.AttributeVariant, *model.AppError)
	// AttributesByOption returns a list of attributes filtered using given options
	AttributesByOption(option *attribute.AttributeFilterOption) ([]*attribute.Attribute, *model.AppError)
	// GetOrCreateAssignedPageAttribute gets or create an assigned page attribute, then returns it
	GetOrCreateAssignedPageAttribute(assignedPageAttribute *attribute.AssignedPageAttribute) (*attribute.AssignedPageAttribute, *model.AppError)
	// GetOrCreateAssignedProductAttribute get or create new instance from the given, then returns it
	GetOrCreateAssignedProductAttribute(assignedProductAttribute *attribute.AssignedProductAttribute) (*attribute.AssignedProductAttribute, *model.AppError)
	// GetOrCreateAssignedVariantAttribute get or create new assigned variant attribute with given option then returns it
	GetOrCreateAssignedVariantAttribute(assignedVariantAttr *attribute.AssignedVariantAttribute) (*attribute.AssignedVariantAttribute, *model.AppError)
	// UpsertAttribute inserts or updates given attribute and returns it
	UpsertAttribute(attr *attribute.Attribute) (*attribute.Attribute, *model.AppError)
	// UpsertAttributeValue insderts or updates given attribute value then returns it
	UpsertAttributeValue(attrValue *attribute.AttributeValue) (*attribute.AttributeValue, *model.AppError)
	AttributeByOption(option *attribute.AttributeFilterOption) (*attribute.Attribute, *model.AppError)
	AttributeValuesOfAttribute(attributeID string) ([]*attribute.AttributeValue, *model.AppError)
	DeleteAttributes(ids ...string) (int64, *model.AppError)
	FilterAttributeValuesByOptions(option attribute.AttributeValueFilterOptions) (attribute.AttributeValues, *model.AppError)
	PerformReordering(values attribute.AttributeValues, operations map[string]*int) *model.AppError
	DeleteAttributeValues(ids ...string) (int64, *model.AppError)
}
