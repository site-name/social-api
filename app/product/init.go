package product

import (
	"net/http"
	"time"

	goprices "github.com/site-name/go-prices"
	"github.com/sitename/sitename/app/plugin/interfaces"
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/model_helper"
	"github.com/sitename/sitename/modules/util"
)

// CalculateRevenueForVariant Calculate total revenue generated by a product variant
//
// NOTE: `startDate` must be UTC time
func (a *ServiceProduct) CalculateRevenueForVariant(
	variant *model.ProductVariant,
	startDate *time.Time,
	orderLines []*model.OrderLine,
	ordersDict map[string]*model.Order,
	currencyCode string,

) (*goprices.TaxedMoney, *model_helper.AppError) {
	// validate given currencyCode is valid:
	revenue, err := util.ZeroTaxedMoney(currencyCode)
	if err != nil {
		return nil, model_helper.NewAppError("CalculateRevenueForVariant", model_helper.InvalidArgumentAppErrorID, map[string]interface{}{"Fields": "currencyCode"}, err.Error(), http.StatusBadRequest)
	}

	for _, orderLine := range orderLines {
		orderLine.PopulateNonDbFields() // call this to populate money fields

		orderValue := ordersDict[orderLine.OrderID]
		if orderValue != nil && orderValue.CreateAt >= util.MillisFromTime(*startDate) {
			revenue, err = revenue.Add(orderLine.TotalPrice)
			if err != nil {
				return nil, model_helper.NewAppError("CalculateRevenueForVariant", model.ErrorCalculatingMoneyErrorID, nil, err.Error(), http.StatusInternalServerError)
			}
		}
	}

	return revenue, nil
}

// DeleteCategories Delete categories and perform all necessary actions.
//
// Set products of deleted categories as unpublished, delete categories
// and update products minimal variant prices.
func (a *ServiceProduct) DeleteCategories(categoryIDs []string, manager interfaces.PluginManagerInterface) *model_helper.AppError {
	panic("not implemented")
}

// CollectCategoriesTreeProducts Collect products from all levels in category tree.
func (a *ServiceProduct) CollectCategoriesTreeProducts(category *model.Category) (model.Products, *model_helper.AppError) {
	panic("not implemented")
}
