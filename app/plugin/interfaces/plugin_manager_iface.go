// Code generated by "make app-layers"
// DO NOT EDIT

package interfaces

import (
	"net/http"

	"github.com/site-name/decimal"
	goprices "github.com/site-name/go-prices"
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/model_helper"
	"github.com/sitename/sitename/modules/model_types"
)

// PluginManagerInterface contains methods for plugin manager
type PluginManagerInterface interface {
	// AssignTaxCodeToObjectMeta requires obj must be Product or ProductType
	AssignTaxCodeToObjectMeta(obj any, taxCode string) (*model_helper.TaxType, *model_helper.AppError)
	// GetTaxCodeFromObjectMeta
	//
	// NOTE: obj must be either Product or ProductType
	GetTaxCodeFromObjectMeta(obj any) (*model_helper.TaxType, *model_helper.AppError)
	// GetTaxRatePercentageValue
	//
	// obj must be either Product or ProductType
	GetTaxRatePercentageValue(obj any, country string) (*decimal.Decimal, *model_helper.AppError)
	ApplyTaxesToProduct(product model.Product, price goprices.Money, country model.CountryCode, channelID string) (*goprices.TaxedMoney, *model_helper.AppError)
	ApplyTaxesToShipping(price goprices.Money, shippingAddress model.Address, channelID string) (*goprices.TaxedMoney, *model_helper.AppError)
	AuthenticateUser(req *http.Request) (*model.User, *model_helper.AppError)
	AuthorizePayment(gateway string, paymentInformation model_helper.PaymentData, channelID string) (*model_helper.GatewayResponse, error)
	CalculateCheckoutLineTotal(checkoutInfo model_helper.CheckoutInfo, lines model_helper.CheckoutLineInfos, checkoutLineInfo model_helper.CheckoutLineInfo, address *model.Address, discounts []*model_helper.DiscountInfo) (*goprices.TaxedMoney, *model_helper.AppError)
	CalculateCheckoutLineUnitPrice(totalLinePrice goprices.TaxedMoney, quantity int, checkoutInfo model_helper.CheckoutInfo, lines model_helper.CheckoutLineInfos, checkoutLineInfo model_helper.CheckoutLineInfo, address *model.Address, discounts []*model_helper.DiscountInfo) (*goprices.TaxedMoney, *model_helper.AppError)
	CalculateCheckoutShipping(checkoutInfo model_helper.CheckoutInfo, lines model_helper.CheckoutLineInfos, address *model.Address, discounts []*model_helper.DiscountInfo) (*goprices.TaxedMoney, *model_helper.AppError)
	CalculateCheckoutSubTotal(checkoutInfo model_helper.CheckoutInfo, lines model_helper.CheckoutLineInfos, address *model.Address, discounts []*model_helper.DiscountInfo) (*goprices.TaxedMoney, *model_helper.AppError)
	CalculateCheckoutTotal(checkoutInfo model_helper.CheckoutInfo, lines model_helper.CheckoutLineInfos, address *model.Address, discounts []*model_helper.DiscountInfo) (*goprices.TaxedMoney, *model_helper.AppError)
	CalculateOrderLineUnit(orDer model.Order, orderLine model.OrderLine, variant model.ProductVariant, product model.Product) (*goprices.TaxedMoney, *model_helper.AppError)
	CalculateOrderShipping(orDer model.Order) (*goprices.TaxedMoney, *model_helper.AppError)
	CalculateOrderlineTotal(orDer model.Order, orderLine model.OrderLine, variant model.ProductVariant, product model.Product) (*goprices.TaxedMoney, *model_helper.AppError)
	CapturePayment(gateway string, paymentInformation model_helper.PaymentData, channelID string) (*model_helper.GatewayResponse, error)
	ChangeUserAddress(address model.Address, addressType *model.AddressTypeEnum, user *model.User) (*model.Address, *model_helper.AppError)
	CheckoutCreated(checkOut model.Checkout) (any, *model_helper.AppError)
	CheckoutUpdated(checkOut model.Checkout) (any, *model_helper.AppError)
	ConfirmPayment(gateway string, paymentInformation model_helper.PaymentData, channelID string) (*model_helper.GatewayResponse, error)
	CustomerCreated(customer model.User) (any, *model_helper.AppError)
	CustomerUpdated(customer model.User) (any, *model_helper.AppError)
	DraftOrderCreated(orDer model.Order) (any, *model_helper.AppError)
	DraftOrderDeleted(orDer model.Order) (any, *model_helper.AppError)
	DraftOrderUpdated(orDer model.Order) (any, *model_helper.AppError)
	ExternalAuthenticationUrl(pluginID string, data model_types.JSONString, req *http.Request) (model_types.JSONString, *model_helper.AppError)
	ExternalLogout(pluginID string, data model_types.JSONString, req *http.Request) (model_types.JSONString, *model_helper.AppError)
	ExternalObtainAccessTokens(pluginID string, data model_types.JSONString, req *http.Request) (*model_helper.ExternalAccessTokens, *model_helper.AppError)
	ExternalRefresh(pluginID string, data model_types.JSONString, req *http.Request) (*model_helper.ExternalAccessTokens, *model_helper.AppError)
	ExternalVerify(pluginID string, data model_types.JSONString, req *http.Request) (*model.User, model_types.JSONString, *model_helper.AppError)
	FetchTaxesData() (bool, *model_helper.AppError)
	FulfillmentCanceled(fulfillment model.Fulfillment) (any, *model_helper.AppError)
	FulfillmentCreated(fulfillment model.Fulfillment) (any, *model_helper.AppError)
	GetCheckoutLineTaxRate(checkoutInfo model_helper.CheckoutInfo, lines model_helper.CheckoutLineInfos, checkoutLineInfo model_helper.CheckoutLineInfo, address *model.Address, discounts []*model_helper.DiscountInfo, unitPrice goprices.TaxedMoney) (*decimal.Decimal, *model_helper.AppError)
	GetCheckoutShippingTaxRate(checkoutInfo model_helper.CheckoutInfo, lines model_helper.CheckoutLineInfos, address *model.Address, discounts []*model_helper.DiscountInfo, shippingPrice goprices.TaxedMoney) (*decimal.Decimal, *model_helper.AppError)
	GetClientToken(gateway string, tokenConfig model_helper.TokenConfig, channelID string) (string, *model_helper.AppError)
	GetOrderLineTaxRate(orDer model.Order, product model.Product, variant model.ProductVariant, address *model.Address, unitPrice goprices.TaxedMoney) (*decimal.Decimal, *model_helper.AppError)
	GetOrderShippingTaxRate(orDer model.Order, shippingPrice goprices.TaxedMoney) (*decimal.Decimal, *model_helper.AppError)
	GetTaxRateTypeChoices() ([]*model_helper.TaxType, *model_helper.AppError)
	InitializePayment(gateway string, paymentData model_types.JSONString, channelID string) *model_helper.InitializedPaymentResponse
	InvoiceDelete(inVoice model.Invoice) (any, *model_helper.AppError)
	InvoiceRequest(orDer model.Order, inVoice model.Invoice, number string) (any, *model_helper.AppError)
	InvoiceSent(inVoice model.Invoice, email string) (any, *model_helper.AppError)
	ListExternalAuthentications(activeOnly bool) ([]model_types.JSONString, *model_helper.AppError)
	ListPaymentGateways(currency string, checkOut *model.Checkout, channelID string, activeOnly bool) []*model_helper.PaymentGateway
	ListPaymentSources(gateway, customerID, channelID string) ([]*model_helper.CustomerSource, error)
	Notify(event string, payload model_types.JSONString, channelID string, pluginID string) (any, *model_helper.AppError)
	OrderCancelled(orDer model.Order) (any, *model_helper.AppError)
	OrderConfirmed(orDer model.Order) (any, *model_helper.AppError)
	OrderCreated(orDer model.Order) (any, *model_helper.AppError)
	OrderFulfilled(orDer model.Order) (any, *model_helper.AppError)
	OrderFullyPaid(orDer model.Order) (any, *model_helper.AppError)
	OrderUpdated(orDer model.Order) (any, *model_helper.AppError)
	PageCreated(paGe model.Page) (any, *model_helper.AppError)
	PageDeleted(paGe model.Page) (any, *model_helper.AppError)
	PageUpdated(paGe model.Page) (any, *model_helper.AppError)
	PreprocessOrderCreation(checkoutInfo model_helper.CheckoutInfo, discounts []*model_helper.DiscountInfo, lines model_helper.CheckoutLineInfos) (any, *model_helper.AppError)
	ProcessPayment(gateway string, paymentInformation model_helper.PaymentData, channelID string) (*model_helper.GatewayResponse, error)
	ProductCreated(product model.Product) (any, *model_helper.AppError)
	ProductDeleted(product model.Product, variants []int) (any, *model_helper.AppError)
	ProductUpdated(product model.Product) (any, *model_helper.AppError)
	ProductVariantBackInStock(stock model.Stock) *model_helper.AppError
	ProductVariantCreated(variant model.ProductVariant) (any, *model_helper.AppError)
	ProductVariantDeleted(variant model.ProductVariant) (any, *model_helper.AppError)
	ProductVariantOutOfStock(stock model.Stock) *model_helper.AppError
	ProductVariantUpdated(variant model.ProductVariant) (any, *model_helper.AppError)
	RefundPayment(gateway string, paymentInformation model_helper.PaymentData, channelID string) (*model_helper.GatewayResponse, error)
	SaleCreated(sale model.Sale, currentCatalogue model_helper.NodeCatalogueInfo) (any, *model_helper.AppError)
	SaleDeleted(sale model.Sale, previousCatalogue model_helper.NodeCatalogueInfo) (any, *model_helper.AppError)
	SaleUpdated(sale model.Sale, previousCatalogue, currentCatalogue model_helper.NodeCatalogueInfo) (any, *model_helper.AppError)
	SavePluginConfiguration(pluginID, channelID string, cleanedData model_types.JSONString) (*model.PluginConfiguration, *model_helper.AppError)
	ShowTaxesOnStoreFront() (bool, *model_helper.AppError)
	TokenIsRequiredAsPaymentInput(gateway, channelID string) (bool, *model_helper.AppError)
	TranslationCreated(translation any)
	TranslationUpdated(translation any)
	VoidPayment(gateway string, paymentInformation model_helper.PaymentData, channelID string) (*model_helper.GatewayResponse, error)
	Webhook(req *http.Request, pluginID, channelID string) (*http.Response, *model_helper.AppError)
	WebhookEndpointWithoutChannel(req *http.Request, pluginID string) (*http.Response, *model_helper.AppError)
}
