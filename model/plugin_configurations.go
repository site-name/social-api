// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PluginConfiguration is an object representing the database table.
type PluginConfiguration struct {
	ID            string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Identifier    string                 `boil:"identifier" json:"identifier" toml:"identifier" yaml:"identifier"`
	Name          string                 `boil:"name" json:"name" toml:"name" yaml:"name"`
	ChannelID     string                 `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	Description   string                 `boil:"description" json:"description" toml:"description" yaml:"description"`
	Active        bool                   `boil:"active" json:"active" toml:"active" yaml:"active"`
	Configuration model_types.JSONString `boil:"configuration" json:"configuration,omitempty" toml:"configuration" yaml:"configuration,omitempty"`

	R *pluginConfigurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pluginConfigurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PluginConfigurationColumns = struct {
	ID            string
	Identifier    string
	Name          string
	ChannelID     string
	Description   string
	Active        string
	Configuration string
}{
	ID:            "id",
	Identifier:    "identifier",
	Name:          "name",
	ChannelID:     "channel_id",
	Description:   "description",
	Active:        "active",
	Configuration: "configuration",
}

var PluginConfigurationTableColumns = struct {
	ID            string
	Identifier    string
	Name          string
	ChannelID     string
	Description   string
	Active        string
	Configuration string
}{
	ID:            "plugin_configurations.id",
	Identifier:    "plugin_configurations.identifier",
	Name:          "plugin_configurations.name",
	ChannelID:     "plugin_configurations.channel_id",
	Description:   "plugin_configurations.description",
	Active:        "plugin_configurations.active",
	Configuration: "plugin_configurations.configuration",
}

// Generated where

var PluginConfigurationWhere = struct {
	ID            whereHelperstring
	Identifier    whereHelperstring
	Name          whereHelperstring
	ChannelID     whereHelperstring
	Description   whereHelperstring
	Active        whereHelperbool
	Configuration whereHelpermodel_types_JSONString
}{
	ID:            whereHelperstring{field: "\"plugin_configurations\".\"id\""},
	Identifier:    whereHelperstring{field: "\"plugin_configurations\".\"identifier\""},
	Name:          whereHelperstring{field: "\"plugin_configurations\".\"name\""},
	ChannelID:     whereHelperstring{field: "\"plugin_configurations\".\"channel_id\""},
	Description:   whereHelperstring{field: "\"plugin_configurations\".\"description\""},
	Active:        whereHelperbool{field: "\"plugin_configurations\".\"active\""},
	Configuration: whereHelpermodel_types_JSONString{field: "\"plugin_configurations\".\"configuration\""},
}

// PluginConfigurationRels is where relationship names are stored.
var PluginConfigurationRels = struct {
	Channel string
}{
	Channel: "Channel",
}

// pluginConfigurationR is where relationships are stored.
type pluginConfigurationR struct {
	Channel *Channel `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
}

// NewStruct creates a new relationship struct
func (*pluginConfigurationR) NewStruct() *pluginConfigurationR {
	return &pluginConfigurationR{}
}

func (r *pluginConfigurationR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

// pluginConfigurationL is where Load methods for each relationship are stored.
type pluginConfigurationL struct{}

var (
	pluginConfigurationAllColumns            = []string{"id", "identifier", "name", "channel_id", "description", "active", "configuration"}
	pluginConfigurationColumnsWithoutDefault = []string{"id", "identifier", "name", "channel_id", "description", "active"}
	pluginConfigurationColumnsWithDefault    = []string{"configuration"}
	pluginConfigurationPrimaryKeyColumns     = []string{"id"}
	pluginConfigurationGeneratedColumns      = []string{}
)

type (
	// PluginConfigurationSlice is an alias for a slice of pointers to PluginConfiguration.
	// This should almost always be used instead of []PluginConfiguration.
	PluginConfigurationSlice []*PluginConfiguration

	pluginConfigurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pluginConfigurationType                 = reflect.TypeOf(&PluginConfiguration{})
	pluginConfigurationMapping              = queries.MakeStructMapping(pluginConfigurationType)
	pluginConfigurationPrimaryKeyMapping, _ = queries.BindMapping(pluginConfigurationType, pluginConfigurationMapping, pluginConfigurationPrimaryKeyColumns)
	pluginConfigurationInsertCacheMut       sync.RWMutex
	pluginConfigurationInsertCache          = make(map[string]insertCache)
	pluginConfigurationUpdateCacheMut       sync.RWMutex
	pluginConfigurationUpdateCache          = make(map[string]updateCache)
	pluginConfigurationUpsertCacheMut       sync.RWMutex
	pluginConfigurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single pluginConfiguration record from the query.
func (q pluginConfigurationQuery) One(exec boil.Executor) (*PluginConfiguration, error) {
	o := &PluginConfiguration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for plugin_configurations")
	}

	return o, nil
}

// All returns all PluginConfiguration records from the query.
func (q pluginConfigurationQuery) All(exec boil.Executor) (PluginConfigurationSlice, error) {
	var o []*PluginConfiguration

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to PluginConfiguration slice")
	}

	return o, nil
}

// Count returns the count of all PluginConfiguration records in the query.
func (q pluginConfigurationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count plugin_configurations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pluginConfigurationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if plugin_configurations exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *PluginConfiguration) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pluginConfigurationL) LoadChannel(e boil.Executor, singular bool, maybePluginConfiguration interface{}, mods queries.Applicator) error {
	var slice []*PluginConfiguration
	var object *PluginConfiguration

	if singular {
		var ok bool
		object, ok = maybePluginConfiguration.(*PluginConfiguration)
		if !ok {
			object = new(PluginConfiguration)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePluginConfiguration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePluginConfiguration))
			}
		}
	} else {
		s, ok := maybePluginConfiguration.(*[]*PluginConfiguration)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePluginConfiguration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePluginConfiguration))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &pluginConfigurationR{}
		}
		args[object.ChannelID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pluginConfigurationR{}
			}

			args[obj.ChannelID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.PluginConfigurations = append(foreign.R.PluginConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.PluginConfigurations = append(foreign.R.PluginConfigurations, local)
				break
			}
		}
	}

	return nil
}

// SetChannel of the pluginConfiguration to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.PluginConfigurations.
func (o *PluginConfiguration) SetChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"plugin_configurations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, pluginConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &pluginConfigurationR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			PluginConfigurations: PluginConfigurationSlice{o},
		}
	} else {
		related.R.PluginConfigurations = append(related.R.PluginConfigurations, o)
	}

	return nil
}

// PluginConfigurations retrieves all the records using an executor.
func PluginConfigurations(mods ...qm.QueryMod) pluginConfigurationQuery {
	mods = append(mods, qm.From("\"plugin_configurations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"plugin_configurations\".*"})
	}

	return pluginConfigurationQuery{q}
}

// FindPluginConfiguration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPluginConfiguration(exec boil.Executor, iD string, selectCols ...string) (*PluginConfiguration, error) {
	pluginConfigurationObj := &PluginConfiguration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"plugin_configurations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, pluginConfigurationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from plugin_configurations")
	}

	return pluginConfigurationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PluginConfiguration) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no plugin_configurations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(pluginConfigurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pluginConfigurationInsertCacheMut.RLock()
	cache, cached := pluginConfigurationInsertCache[key]
	pluginConfigurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pluginConfigurationAllColumns,
			pluginConfigurationColumnsWithDefault,
			pluginConfigurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pluginConfigurationType, pluginConfigurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pluginConfigurationType, pluginConfigurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"plugin_configurations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"plugin_configurations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into plugin_configurations")
	}

	if !cached {
		pluginConfigurationInsertCacheMut.Lock()
		pluginConfigurationInsertCache[key] = cache
		pluginConfigurationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PluginConfiguration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PluginConfiguration) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	pluginConfigurationUpdateCacheMut.RLock()
	cache, cached := pluginConfigurationUpdateCache[key]
	pluginConfigurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pluginConfigurationAllColumns,
			pluginConfigurationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update plugin_configurations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"plugin_configurations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pluginConfigurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pluginConfigurationType, pluginConfigurationMapping, append(wl, pluginConfigurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update plugin_configurations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for plugin_configurations")
	}

	if !cached {
		pluginConfigurationUpdateCacheMut.Lock()
		pluginConfigurationUpdateCache[key] = cache
		pluginConfigurationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q pluginConfigurationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for plugin_configurations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for plugin_configurations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PluginConfigurationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pluginConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"plugin_configurations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pluginConfigurationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in pluginConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all pluginConfiguration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PluginConfiguration) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no plugin_configurations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(pluginConfigurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pluginConfigurationUpsertCacheMut.RLock()
	cache, cached := pluginConfigurationUpsertCache[key]
	pluginConfigurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pluginConfigurationAllColumns,
			pluginConfigurationColumnsWithDefault,
			pluginConfigurationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pluginConfigurationAllColumns,
			pluginConfigurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert plugin_configurations, could not build update column list")
		}

		ret := strmangle.SetComplement(pluginConfigurationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pluginConfigurationPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert plugin_configurations, could not build conflict column list")
			}

			conflict = make([]string, len(pluginConfigurationPrimaryKeyColumns))
			copy(conflict, pluginConfigurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"plugin_configurations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pluginConfigurationType, pluginConfigurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pluginConfigurationType, pluginConfigurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert plugin_configurations")
	}

	if !cached {
		pluginConfigurationUpsertCacheMut.Lock()
		pluginConfigurationUpsertCache[key] = cache
		pluginConfigurationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PluginConfiguration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PluginConfiguration) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no PluginConfiguration provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pluginConfigurationPrimaryKeyMapping)
	sql := "DELETE FROM \"plugin_configurations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from plugin_configurations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for plugin_configurations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pluginConfigurationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no pluginConfigurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from plugin_configurations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for plugin_configurations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PluginConfigurationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pluginConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"plugin_configurations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pluginConfigurationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from pluginConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for plugin_configurations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PluginConfiguration) Reload(exec boil.Executor) error {
	ret, err := FindPluginConfiguration(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PluginConfigurationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PluginConfigurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pluginConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"plugin_configurations\".* FROM \"plugin_configurations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pluginConfigurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PluginConfigurationSlice")
	}

	*o = slice

	return nil
}

// PluginConfigurationExists checks if the PluginConfiguration row exists.
func PluginConfigurationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"plugin_configurations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if plugin_configurations exists")
	}

	return exists, nil
}

// Exists checks if the PluginConfiguration row exists.
func (o *PluginConfiguration) Exists(exec boil.Executor) (bool, error) {
	return PluginConfigurationExists(exec, o.ID)
}
