// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PageTranslation is an object representing the database table.
type PageTranslation struct {
	ID             string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageCode   Languagecode           `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	PageID         string                 `boil:"page_id" json:"page_id" toml:"page_id" yaml:"page_id"`
	Title          string                 `boil:"title" json:"title" toml:"title" yaml:"title"`
	Content        model_types.NullString `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	SeoTitle       model_types.NullString `boil:"seo_title" json:"seo_title,omitempty" toml:"seo_title" yaml:"seo_title,omitempty"`
	SeoDescription model_types.NullString `boil:"seo_description" json:"seo_description,omitempty" toml:"seo_description" yaml:"seo_description,omitempty"`

	R *pageTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pageTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PageTranslationColumns = struct {
	ID             string
	LanguageCode   string
	PageID         string
	Title          string
	Content        string
	SeoTitle       string
	SeoDescription string
}{
	ID:             "id",
	LanguageCode:   "language_code",
	PageID:         "page_id",
	Title:          "title",
	Content:        "content",
	SeoTitle:       "seo_title",
	SeoDescription: "seo_description",
}

var PageTranslationTableColumns = struct {
	ID             string
	LanguageCode   string
	PageID         string
	Title          string
	Content        string
	SeoTitle       string
	SeoDescription string
}{
	ID:             "page_translations.id",
	LanguageCode:   "page_translations.language_code",
	PageID:         "page_translations.page_id",
	Title:          "page_translations.title",
	Content:        "page_translations.content",
	SeoTitle:       "page_translations.seo_title",
	SeoDescription: "page_translations.seo_description",
}

// Generated where

var PageTranslationWhere = struct {
	ID             whereHelperstring
	LanguageCode   whereHelperLanguagecode
	PageID         whereHelperstring
	Title          whereHelperstring
	Content        whereHelpermodel_types_NullString
	SeoTitle       whereHelpermodel_types_NullString
	SeoDescription whereHelpermodel_types_NullString
}{
	ID:             whereHelperstring{field: "\"page_translations\".\"id\""},
	LanguageCode:   whereHelperLanguagecode{field: "\"page_translations\".\"language_code\""},
	PageID:         whereHelperstring{field: "\"page_translations\".\"page_id\""},
	Title:          whereHelperstring{field: "\"page_translations\".\"title\""},
	Content:        whereHelpermodel_types_NullString{field: "\"page_translations\".\"content\""},
	SeoTitle:       whereHelpermodel_types_NullString{field: "\"page_translations\".\"seo_title\""},
	SeoDescription: whereHelpermodel_types_NullString{field: "\"page_translations\".\"seo_description\""},
}

// PageTranslationRels is where relationship names are stored.
var PageTranslationRels = struct {
	Page string
}{
	Page: "Page",
}

// pageTranslationR is where relationships are stored.
type pageTranslationR struct {
	Page *Page `boil:"Page" json:"Page" toml:"Page" yaml:"Page"`
}

// NewStruct creates a new relationship struct
func (*pageTranslationR) NewStruct() *pageTranslationR {
	return &pageTranslationR{}
}

func (r *pageTranslationR) GetPage() *Page {
	if r == nil {
		return nil
	}
	return r.Page
}

// pageTranslationL is where Load methods for each relationship are stored.
type pageTranslationL struct{}

var (
	pageTranslationAllColumns            = []string{"id", "language_code", "page_id", "title", "content", "seo_title", "seo_description"}
	pageTranslationColumnsWithoutDefault = []string{"language_code", "page_id", "title"}
	pageTranslationColumnsWithDefault    = []string{"id", "content", "seo_title", "seo_description"}
	pageTranslationPrimaryKeyColumns     = []string{"id"}
	pageTranslationGeneratedColumns      = []string{}
)

type (
	// PageTranslationSlice is an alias for a slice of pointers to PageTranslation.
	// This should almost always be used instead of []PageTranslation.
	PageTranslationSlice []*PageTranslation

	pageTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pageTranslationType                 = reflect.TypeOf(&PageTranslation{})
	pageTranslationMapping              = queries.MakeStructMapping(pageTranslationType)
	pageTranslationPrimaryKeyMapping, _ = queries.BindMapping(pageTranslationType, pageTranslationMapping, pageTranslationPrimaryKeyColumns)
	pageTranslationInsertCacheMut       sync.RWMutex
	pageTranslationInsertCache          = make(map[string]insertCache)
	pageTranslationUpdateCacheMut       sync.RWMutex
	pageTranslationUpdateCache          = make(map[string]updateCache)
	pageTranslationUpsertCacheMut       sync.RWMutex
	pageTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single pageTranslation record from the query.
func (q pageTranslationQuery) One(exec boil.Executor) (*PageTranslation, error) {
	o := &PageTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for page_translations")
	}

	return o, nil
}

// All returns all PageTranslation records from the query.
func (q pageTranslationQuery) All(exec boil.Executor) (PageTranslationSlice, error) {
	var o []*PageTranslation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to PageTranslation slice")
	}

	return o, nil
}

// Count returns the count of all PageTranslation records in the query.
func (q pageTranslationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count page_translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pageTranslationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if page_translations exists")
	}

	return count > 0, nil
}

// Page pointed to by the foreign key.
func (o *PageTranslation) Page(mods ...qm.QueryMod) pageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PageID),
	}

	queryMods = append(queryMods, mods...)

	return Pages(queryMods...)
}

// LoadPage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pageTranslationL) LoadPage(e boil.Executor, singular bool, maybePageTranslation interface{}, mods queries.Applicator) error {
	var slice []*PageTranslation
	var object *PageTranslation

	if singular {
		var ok bool
		object, ok = maybePageTranslation.(*PageTranslation)
		if !ok {
			object = new(PageTranslation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePageTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePageTranslation))
			}
		}
	} else {
		s, ok := maybePageTranslation.(*[]*PageTranslation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePageTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePageTranslation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageTranslationR{}
		}
		args = append(args, object.PageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageTranslationR{}
			}

			for _, a := range args {
				if a == obj.PageID {
					continue Outer
				}
			}

			args = append(args, obj.PageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pages`),
		qm.WhereIn(`pages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Page")
	}

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Page")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pages")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Page = foreign
		if foreign.R == nil {
			foreign.R = &pageR{}
		}
		foreign.R.PageTranslations = append(foreign.R.PageTranslations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageID == foreign.ID {
				local.R.Page = foreign
				if foreign.R == nil {
					foreign.R = &pageR{}
				}
				foreign.R.PageTranslations = append(foreign.R.PageTranslations, local)
				break
			}
		}
	}

	return nil
}

// SetPage of the pageTranslation to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.PageTranslations.
func (o *PageTranslation) SetPage(exec boil.Executor, insert bool, related *Page) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"page_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
		strmangle.WhereClause("\"", "\"", 2, pageTranslationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageID = related.ID
	if o.R == nil {
		o.R = &pageTranslationR{
			Page: related,
		}
	} else {
		o.R.Page = related
	}

	if related.R == nil {
		related.R = &pageR{
			PageTranslations: PageTranslationSlice{o},
		}
	} else {
		related.R.PageTranslations = append(related.R.PageTranslations, o)
	}

	return nil
}

// PageTranslations retrieves all the records using an executor.
func PageTranslations(mods ...qm.QueryMod) pageTranslationQuery {
	mods = append(mods, qm.From("\"page_translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"page_translations\".*"})
	}

	return pageTranslationQuery{q}
}

// FindPageTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPageTranslation(exec boil.Executor, iD string, selectCols ...string) (*PageTranslation, error) {
	pageTranslationObj := &PageTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"page_translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, pageTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from page_translations")
	}

	return pageTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PageTranslation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no page_translations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(pageTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pageTranslationInsertCacheMut.RLock()
	cache, cached := pageTranslationInsertCache[key]
	pageTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pageTranslationAllColumns,
			pageTranslationColumnsWithDefault,
			pageTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pageTranslationType, pageTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pageTranslationType, pageTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"page_translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"page_translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into page_translations")
	}

	if !cached {
		pageTranslationInsertCacheMut.Lock()
		pageTranslationInsertCache[key] = cache
		pageTranslationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PageTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PageTranslation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	pageTranslationUpdateCacheMut.RLock()
	cache, cached := pageTranslationUpdateCache[key]
	pageTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pageTranslationAllColumns,
			pageTranslationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update page_translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"page_translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pageTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pageTranslationType, pageTranslationMapping, append(wl, pageTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update page_translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for page_translations")
	}

	if !cached {
		pageTranslationUpdateCacheMut.Lock()
		pageTranslationUpdateCache[key] = cache
		pageTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q pageTranslationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for page_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for page_translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PageTranslationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"page_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pageTranslationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in pageTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all pageTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PageTranslation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no page_translations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(pageTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pageTranslationUpsertCacheMut.RLock()
	cache, cached := pageTranslationUpsertCache[key]
	pageTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pageTranslationAllColumns,
			pageTranslationColumnsWithDefault,
			pageTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pageTranslationAllColumns,
			pageTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert page_translations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pageTranslationPrimaryKeyColumns))
			copy(conflict, pageTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"page_translations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pageTranslationType, pageTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pageTranslationType, pageTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert page_translations")
	}

	if !cached {
		pageTranslationUpsertCacheMut.Lock()
		pageTranslationUpsertCache[key] = cache
		pageTranslationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PageTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PageTranslation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no PageTranslation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pageTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"page_translations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from page_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for page_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pageTranslationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no pageTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from page_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for page_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PageTranslationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"page_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pageTranslationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from pageTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for page_translations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PageTranslation) Reload(exec boil.Executor) error {
	ret, err := FindPageTranslation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageTranslationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PageTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"page_translations\".* FROM \"page_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pageTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PageTranslationSlice")
	}

	*o = slice

	return nil
}

// PageTranslationExists checks if the PageTranslation row exists.
func PageTranslationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"page_translations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if page_translations exists")
	}

	return exists, nil
}

// Exists checks if the PageTranslation row exists.
func (o *PageTranslation) Exists(exec boil.Executor) (bool, error) {
	return PageTranslationExists(exec, o.ID)
}
