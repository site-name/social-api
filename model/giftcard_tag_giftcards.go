// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GiftcardTagGiftcard is an object representing the database table.
type GiftcardTagGiftcard struct {
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	GiftcardID string `boil:"giftcard_id" json:"giftcard_id" toml:"giftcard_id" yaml:"giftcard_id"`
	TagID      string `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`

	R *giftcardTagGiftcardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L giftcardTagGiftcardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GiftcardTagGiftcardColumns = struct {
	ID         string
	GiftcardID string
	TagID      string
}{
	ID:         "id",
	GiftcardID: "giftcard_id",
	TagID:      "tag_id",
}

var GiftcardTagGiftcardTableColumns = struct {
	ID         string
	GiftcardID string
	TagID      string
}{
	ID:         "giftcard_tag_giftcards.id",
	GiftcardID: "giftcard_tag_giftcards.giftcard_id",
	TagID:      "giftcard_tag_giftcards.tag_id",
}

// Generated where

var GiftcardTagGiftcardWhere = struct {
	ID         whereHelperstring
	GiftcardID whereHelperstring
	TagID      whereHelperstring
}{
	ID:         whereHelperstring{field: "\"giftcard_tag_giftcards\".\"id\""},
	GiftcardID: whereHelperstring{field: "\"giftcard_tag_giftcards\".\"giftcard_id\""},
	TagID:      whereHelperstring{field: "\"giftcard_tag_giftcards\".\"tag_id\""},
}

// GiftcardTagGiftcardRels is where relationship names are stored.
var GiftcardTagGiftcardRels = struct {
	Tag      string
	Giftcard string
}{
	Tag:      "Tag",
	Giftcard: "Giftcard",
}

// giftcardTagGiftcardR is where relationships are stored.
type giftcardTagGiftcardR struct {
	Tag      *GiftcardTag `boil:"Tag" json:"Tag" toml:"Tag" yaml:"Tag"`
	Giftcard *Giftcard    `boil:"Giftcard" json:"Giftcard" toml:"Giftcard" yaml:"Giftcard"`
}

// NewStruct creates a new relationship struct
func (*giftcardTagGiftcardR) NewStruct() *giftcardTagGiftcardR {
	return &giftcardTagGiftcardR{}
}

func (r *giftcardTagGiftcardR) GetTag() *GiftcardTag {
	if r == nil {
		return nil
	}
	return r.Tag
}

func (r *giftcardTagGiftcardR) GetGiftcard() *Giftcard {
	if r == nil {
		return nil
	}
	return r.Giftcard
}

// giftcardTagGiftcardL is where Load methods for each relationship are stored.
type giftcardTagGiftcardL struct{}

var (
	giftcardTagGiftcardAllColumns            = []string{"id", "giftcard_id", "tag_id"}
	giftcardTagGiftcardColumnsWithoutDefault = []string{"id", "giftcard_id", "tag_id"}
	giftcardTagGiftcardColumnsWithDefault    = []string{}
	giftcardTagGiftcardPrimaryKeyColumns     = []string{"id"}
	giftcardTagGiftcardGeneratedColumns      = []string{}
)

type (
	// GiftcardTagGiftcardSlice is an alias for a slice of pointers to GiftcardTagGiftcard.
	// This should almost always be used instead of []GiftcardTagGiftcard.
	GiftcardTagGiftcardSlice []*GiftcardTagGiftcard

	giftcardTagGiftcardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	giftcardTagGiftcardType                 = reflect.TypeOf(&GiftcardTagGiftcard{})
	giftcardTagGiftcardMapping              = queries.MakeStructMapping(giftcardTagGiftcardType)
	giftcardTagGiftcardPrimaryKeyMapping, _ = queries.BindMapping(giftcardTagGiftcardType, giftcardTagGiftcardMapping, giftcardTagGiftcardPrimaryKeyColumns)
	giftcardTagGiftcardInsertCacheMut       sync.RWMutex
	giftcardTagGiftcardInsertCache          = make(map[string]insertCache)
	giftcardTagGiftcardUpdateCacheMut       sync.RWMutex
	giftcardTagGiftcardUpdateCache          = make(map[string]updateCache)
	giftcardTagGiftcardUpsertCacheMut       sync.RWMutex
	giftcardTagGiftcardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single giftcardTagGiftcard record from the query.
func (q giftcardTagGiftcardQuery) One(exec boil.Executor) (*GiftcardTagGiftcard, error) {
	o := &GiftcardTagGiftcard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for giftcard_tag_giftcards")
	}

	return o, nil
}

// All returns all GiftcardTagGiftcard records from the query.
func (q giftcardTagGiftcardQuery) All(exec boil.Executor) (GiftcardTagGiftcardSlice, error) {
	var o []*GiftcardTagGiftcard

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to GiftcardTagGiftcard slice")
	}

	return o, nil
}

// Count returns the count of all GiftcardTagGiftcard records in the query.
func (q giftcardTagGiftcardQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count giftcard_tag_giftcards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q giftcardTagGiftcardQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if giftcard_tag_giftcards exists")
	}

	return count > 0, nil
}

// Tag pointed to by the foreign key.
func (o *GiftcardTagGiftcard) Tag(mods ...qm.QueryMod) giftcardTagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TagID),
	}

	queryMods = append(queryMods, mods...)

	return GiftcardTags(queryMods...)
}

// Giftcard pointed to by the foreign key.
func (o *GiftcardTagGiftcard) Giftcard(mods ...qm.QueryMod) giftcardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GiftcardID),
	}

	queryMods = append(queryMods, mods...)

	return Giftcards(queryMods...)
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (giftcardTagGiftcardL) LoadTag(e boil.Executor, singular bool, maybeGiftcardTagGiftcard interface{}, mods queries.Applicator) error {
	var slice []*GiftcardTagGiftcard
	var object *GiftcardTagGiftcard

	if singular {
		var ok bool
		object, ok = maybeGiftcardTagGiftcard.(*GiftcardTagGiftcard)
		if !ok {
			object = new(GiftcardTagGiftcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGiftcardTagGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGiftcardTagGiftcard))
			}
		}
	} else {
		s, ok := maybeGiftcardTagGiftcard.(*[]*GiftcardTagGiftcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGiftcardTagGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGiftcardTagGiftcard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &giftcardTagGiftcardR{}
		}
		args[object.TagID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &giftcardTagGiftcardR{}
			}

			args[obj.TagID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`giftcard_tags`),
		qm.WhereIn(`giftcard_tags.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GiftcardTag")
	}

	var resultSlice []*GiftcardTag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GiftcardTag")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for giftcard_tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for giftcard_tags")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tag = foreign
		if foreign.R == nil {
			foreign.R = &giftcardTagR{}
		}
		foreign.R.TagGiftcardTagGiftcards = append(foreign.R.TagGiftcardTagGiftcards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TagID == foreign.ID {
				local.R.Tag = foreign
				if foreign.R == nil {
					foreign.R = &giftcardTagR{}
				}
				foreign.R.TagGiftcardTagGiftcards = append(foreign.R.TagGiftcardTagGiftcards, local)
				break
			}
		}
	}

	return nil
}

// LoadGiftcard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (giftcardTagGiftcardL) LoadGiftcard(e boil.Executor, singular bool, maybeGiftcardTagGiftcard interface{}, mods queries.Applicator) error {
	var slice []*GiftcardTagGiftcard
	var object *GiftcardTagGiftcard

	if singular {
		var ok bool
		object, ok = maybeGiftcardTagGiftcard.(*GiftcardTagGiftcard)
		if !ok {
			object = new(GiftcardTagGiftcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGiftcardTagGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGiftcardTagGiftcard))
			}
		}
	} else {
		s, ok := maybeGiftcardTagGiftcard.(*[]*GiftcardTagGiftcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGiftcardTagGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGiftcardTagGiftcard))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &giftcardTagGiftcardR{}
		}
		args[object.GiftcardID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &giftcardTagGiftcardR{}
			}

			args[obj.GiftcardID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`giftcards`),
		qm.WhereIn(`giftcards.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Giftcard")
	}

	var resultSlice []*Giftcard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Giftcard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for giftcards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for giftcards")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Giftcard = foreign
		if foreign.R == nil {
			foreign.R = &giftcardR{}
		}
		foreign.R.GiftcardTagGiftcards = append(foreign.R.GiftcardTagGiftcards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GiftcardID == foreign.ID {
				local.R.Giftcard = foreign
				if foreign.R == nil {
					foreign.R = &giftcardR{}
				}
				foreign.R.GiftcardTagGiftcards = append(foreign.R.GiftcardTagGiftcards, local)
				break
			}
		}
	}

	return nil
}

// SetTag of the giftcardTagGiftcard to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.TagGiftcardTagGiftcards.
func (o *GiftcardTagGiftcard) SetTag(exec boil.Executor, insert bool, related *GiftcardTag) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"giftcard_tag_giftcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tag_id"}),
		strmangle.WhereClause("\"", "\"", 2, giftcardTagGiftcardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TagID = related.ID
	if o.R == nil {
		o.R = &giftcardTagGiftcardR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &giftcardTagR{
			TagGiftcardTagGiftcards: GiftcardTagGiftcardSlice{o},
		}
	} else {
		related.R.TagGiftcardTagGiftcards = append(related.R.TagGiftcardTagGiftcards, o)
	}

	return nil
}

// SetGiftcard of the giftcardTagGiftcard to the related item.
// Sets o.R.Giftcard to related.
// Adds o to related.R.GiftcardTagGiftcards.
func (o *GiftcardTagGiftcard) SetGiftcard(exec boil.Executor, insert bool, related *Giftcard) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"giftcard_tag_giftcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"giftcard_id"}),
		strmangle.WhereClause("\"", "\"", 2, giftcardTagGiftcardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GiftcardID = related.ID
	if o.R == nil {
		o.R = &giftcardTagGiftcardR{
			Giftcard: related,
		}
	} else {
		o.R.Giftcard = related
	}

	if related.R == nil {
		related.R = &giftcardR{
			GiftcardTagGiftcards: GiftcardTagGiftcardSlice{o},
		}
	} else {
		related.R.GiftcardTagGiftcards = append(related.R.GiftcardTagGiftcards, o)
	}

	return nil
}

// GiftcardTagGiftcards retrieves all the records using an executor.
func GiftcardTagGiftcards(mods ...qm.QueryMod) giftcardTagGiftcardQuery {
	mods = append(mods, qm.From("\"giftcard_tag_giftcards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"giftcard_tag_giftcards\".*"})
	}

	return giftcardTagGiftcardQuery{q}
}

// FindGiftcardTagGiftcard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGiftcardTagGiftcard(exec boil.Executor, iD string, selectCols ...string) (*GiftcardTagGiftcard, error) {
	giftcardTagGiftcardObj := &GiftcardTagGiftcard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"giftcard_tag_giftcards\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, giftcardTagGiftcardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from giftcard_tag_giftcards")
	}

	return giftcardTagGiftcardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GiftcardTagGiftcard) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no giftcard_tag_giftcards provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(giftcardTagGiftcardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	giftcardTagGiftcardInsertCacheMut.RLock()
	cache, cached := giftcardTagGiftcardInsertCache[key]
	giftcardTagGiftcardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			giftcardTagGiftcardAllColumns,
			giftcardTagGiftcardColumnsWithDefault,
			giftcardTagGiftcardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(giftcardTagGiftcardType, giftcardTagGiftcardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(giftcardTagGiftcardType, giftcardTagGiftcardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"giftcard_tag_giftcards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"giftcard_tag_giftcards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into giftcard_tag_giftcards")
	}

	if !cached {
		giftcardTagGiftcardInsertCacheMut.Lock()
		giftcardTagGiftcardInsertCache[key] = cache
		giftcardTagGiftcardInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GiftcardTagGiftcard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GiftcardTagGiftcard) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	giftcardTagGiftcardUpdateCacheMut.RLock()
	cache, cached := giftcardTagGiftcardUpdateCache[key]
	giftcardTagGiftcardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			giftcardTagGiftcardAllColumns,
			giftcardTagGiftcardPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update giftcard_tag_giftcards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"giftcard_tag_giftcards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, giftcardTagGiftcardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(giftcardTagGiftcardType, giftcardTagGiftcardMapping, append(wl, giftcardTagGiftcardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update giftcard_tag_giftcards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for giftcard_tag_giftcards")
	}

	if !cached {
		giftcardTagGiftcardUpdateCacheMut.Lock()
		giftcardTagGiftcardUpdateCache[key] = cache
		giftcardTagGiftcardUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q giftcardTagGiftcardQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for giftcard_tag_giftcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for giftcard_tag_giftcards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GiftcardTagGiftcardSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giftcardTagGiftcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"giftcard_tag_giftcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, giftcardTagGiftcardPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in giftcardTagGiftcard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all giftcardTagGiftcard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GiftcardTagGiftcard) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no giftcard_tag_giftcards provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(giftcardTagGiftcardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	giftcardTagGiftcardUpsertCacheMut.RLock()
	cache, cached := giftcardTagGiftcardUpsertCache[key]
	giftcardTagGiftcardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			giftcardTagGiftcardAllColumns,
			giftcardTagGiftcardColumnsWithDefault,
			giftcardTagGiftcardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			giftcardTagGiftcardAllColumns,
			giftcardTagGiftcardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert giftcard_tag_giftcards, could not build update column list")
		}

		ret := strmangle.SetComplement(giftcardTagGiftcardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(giftcardTagGiftcardPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert giftcard_tag_giftcards, could not build conflict column list")
			}

			conflict = make([]string, len(giftcardTagGiftcardPrimaryKeyColumns))
			copy(conflict, giftcardTagGiftcardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"giftcard_tag_giftcards\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(giftcardTagGiftcardType, giftcardTagGiftcardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(giftcardTagGiftcardType, giftcardTagGiftcardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert giftcard_tag_giftcards")
	}

	if !cached {
		giftcardTagGiftcardUpsertCacheMut.Lock()
		giftcardTagGiftcardUpsertCache[key] = cache
		giftcardTagGiftcardUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single GiftcardTagGiftcard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GiftcardTagGiftcard) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no GiftcardTagGiftcard provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), giftcardTagGiftcardPrimaryKeyMapping)
	sql := "DELETE FROM \"giftcard_tag_giftcards\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from giftcard_tag_giftcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for giftcard_tag_giftcards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q giftcardTagGiftcardQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no giftcardTagGiftcardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from giftcard_tag_giftcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for giftcard_tag_giftcards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GiftcardTagGiftcardSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giftcardTagGiftcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"giftcard_tag_giftcards\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, giftcardTagGiftcardPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from giftcardTagGiftcard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for giftcard_tag_giftcards")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GiftcardTagGiftcard) Reload(exec boil.Executor) error {
	ret, err := FindGiftcardTagGiftcard(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GiftcardTagGiftcardSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GiftcardTagGiftcardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giftcardTagGiftcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"giftcard_tag_giftcards\".* FROM \"giftcard_tag_giftcards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, giftcardTagGiftcardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in GiftcardTagGiftcardSlice")
	}

	*o = slice

	return nil
}

// GiftcardTagGiftcardExists checks if the GiftcardTagGiftcard row exists.
func GiftcardTagGiftcardExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"giftcard_tag_giftcards\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if giftcard_tag_giftcards exists")
	}

	return exists, nil
}

// Exists checks if the GiftcardTagGiftcard row exists.
func (o *GiftcardTagGiftcard) Exists(exec boil.Executor) (bool, error) {
	return GiftcardTagGiftcardExists(exec, o.ID)
}
