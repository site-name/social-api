// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderGrantedRefundLine is an object representing the database table.
type OrderGrantedRefundLine struct {
	ID              string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderLineID     model_types.NullString `boil:"order_line_id" json:"order_line_id,omitempty" toml:"order_line_id" yaml:"order_line_id,omitempty"`
	Quantity        int                    `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	GrantedRefundID model_types.NullString `boil:"granted_refund_id" json:"granted_refund_id,omitempty" toml:"granted_refund_id" yaml:"granted_refund_id,omitempty"`
	Reason          model_types.NullString `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`

	R *orderGrantedRefundLineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderGrantedRefundLineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderGrantedRefundLineColumns = struct {
	ID              string
	OrderLineID     string
	Quantity        string
	GrantedRefundID string
	Reason          string
}{
	ID:              "id",
	OrderLineID:     "order_line_id",
	Quantity:        "quantity",
	GrantedRefundID: "granted_refund_id",
	Reason:          "reason",
}

var OrderGrantedRefundLineTableColumns = struct {
	ID              string
	OrderLineID     string
	Quantity        string
	GrantedRefundID string
	Reason          string
}{
	ID:              "order_granted_refund_lines.id",
	OrderLineID:     "order_granted_refund_lines.order_line_id",
	Quantity:        "order_granted_refund_lines.quantity",
	GrantedRefundID: "order_granted_refund_lines.granted_refund_id",
	Reason:          "order_granted_refund_lines.reason",
}

// Generated where

var OrderGrantedRefundLineWhere = struct {
	ID              whereHelperstring
	OrderLineID     whereHelpermodel_types_NullString
	Quantity        whereHelperint
	GrantedRefundID whereHelpermodel_types_NullString
	Reason          whereHelpermodel_types_NullString
}{
	ID:              whereHelperstring{field: "\"order_granted_refund_lines\".\"id\""},
	OrderLineID:     whereHelpermodel_types_NullString{field: "\"order_granted_refund_lines\".\"order_line_id\""},
	Quantity:        whereHelperint{field: "\"order_granted_refund_lines\".\"quantity\""},
	GrantedRefundID: whereHelpermodel_types_NullString{field: "\"order_granted_refund_lines\".\"granted_refund_id\""},
	Reason:          whereHelpermodel_types_NullString{field: "\"order_granted_refund_lines\".\"reason\""},
}

// OrderGrantedRefundLineRels is where relationship names are stored.
var OrderGrantedRefundLineRels = struct {
	GrantedRefund string
	OrderLine     string
}{
	GrantedRefund: "GrantedRefund",
	OrderLine:     "OrderLine",
}

// orderGrantedRefundLineR is where relationships are stored.
type orderGrantedRefundLineR struct {
	GrantedRefund *OrderGrantedRefund `boil:"GrantedRefund" json:"GrantedRefund" toml:"GrantedRefund" yaml:"GrantedRefund"`
	OrderLine     *OrderLine          `boil:"OrderLine" json:"OrderLine" toml:"OrderLine" yaml:"OrderLine"`
}

// NewStruct creates a new relationship struct
func (*orderGrantedRefundLineR) NewStruct() *orderGrantedRefundLineR {
	return &orderGrantedRefundLineR{}
}

func (r *orderGrantedRefundLineR) GetGrantedRefund() *OrderGrantedRefund {
	if r == nil {
		return nil
	}
	return r.GrantedRefund
}

func (r *orderGrantedRefundLineR) GetOrderLine() *OrderLine {
	if r == nil {
		return nil
	}
	return r.OrderLine
}

// orderGrantedRefundLineL is where Load methods for each relationship are stored.
type orderGrantedRefundLineL struct{}

var (
	orderGrantedRefundLineAllColumns            = []string{"id", "order_line_id", "quantity", "granted_refund_id", "reason"}
	orderGrantedRefundLineColumnsWithoutDefault = []string{"id", "quantity"}
	orderGrantedRefundLineColumnsWithDefault    = []string{"order_line_id", "granted_refund_id", "reason"}
	orderGrantedRefundLinePrimaryKeyColumns     = []string{"id"}
	orderGrantedRefundLineGeneratedColumns      = []string{}
)

type (
	// OrderGrantedRefundLineSlice is an alias for a slice of pointers to OrderGrantedRefundLine.
	// This should almost always be used instead of []OrderGrantedRefundLine.
	OrderGrantedRefundLineSlice []*OrderGrantedRefundLine

	orderGrantedRefundLineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderGrantedRefundLineType                 = reflect.TypeOf(&OrderGrantedRefundLine{})
	orderGrantedRefundLineMapping              = queries.MakeStructMapping(orderGrantedRefundLineType)
	orderGrantedRefundLinePrimaryKeyMapping, _ = queries.BindMapping(orderGrantedRefundLineType, orderGrantedRefundLineMapping, orderGrantedRefundLinePrimaryKeyColumns)
	orderGrantedRefundLineInsertCacheMut       sync.RWMutex
	orderGrantedRefundLineInsertCache          = make(map[string]insertCache)
	orderGrantedRefundLineUpdateCacheMut       sync.RWMutex
	orderGrantedRefundLineUpdateCache          = make(map[string]updateCache)
	orderGrantedRefundLineUpsertCacheMut       sync.RWMutex
	orderGrantedRefundLineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single orderGrantedRefundLine record from the query.
func (q orderGrantedRefundLineQuery) One(exec boil.Executor) (*OrderGrantedRefundLine, error) {
	o := &OrderGrantedRefundLine{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for order_granted_refund_lines")
	}

	return o, nil
}

// All returns all OrderGrantedRefundLine records from the query.
func (q orderGrantedRefundLineQuery) All(exec boil.Executor) (OrderGrantedRefundLineSlice, error) {
	var o []*OrderGrantedRefundLine

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to OrderGrantedRefundLine slice")
	}

	return o, nil
}

// Count returns the count of all OrderGrantedRefundLine records in the query.
func (q orderGrantedRefundLineQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count order_granted_refund_lines rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderGrantedRefundLineQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if order_granted_refund_lines exists")
	}

	return count > 0, nil
}

// GrantedRefund pointed to by the foreign key.
func (o *OrderGrantedRefundLine) GrantedRefund(mods ...qm.QueryMod) orderGrantedRefundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GrantedRefundID),
	}

	queryMods = append(queryMods, mods...)

	return OrderGrantedRefunds(queryMods...)
}

// OrderLine pointed to by the foreign key.
func (o *OrderGrantedRefundLine) OrderLine(mods ...qm.QueryMod) orderLineQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderLineID),
	}

	queryMods = append(queryMods, mods...)

	return OrderLines(queryMods...)
}

// LoadGrantedRefund allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderGrantedRefundLineL) LoadGrantedRefund(e boil.Executor, singular bool, maybeOrderGrantedRefundLine interface{}, mods queries.Applicator) error {
	var slice []*OrderGrantedRefundLine
	var object *OrderGrantedRefundLine

	if singular {
		var ok bool
		object, ok = maybeOrderGrantedRefundLine.(*OrderGrantedRefundLine)
		if !ok {
			object = new(OrderGrantedRefundLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderGrantedRefundLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderGrantedRefundLine))
			}
		}
	} else {
		s, ok := maybeOrderGrantedRefundLine.(*[]*OrderGrantedRefundLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderGrantedRefundLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderGrantedRefundLine))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderGrantedRefundLineR{}
		}
		if !queries.IsNil(object.GrantedRefundID) {
			args[object.GrantedRefundID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderGrantedRefundLineR{}
			}

			if !queries.IsNil(obj.GrantedRefundID) {
				args[obj.GrantedRefundID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_granted_refunds`),
		qm.WhereIn(`order_granted_refunds.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderGrantedRefund")
	}

	var resultSlice []*OrderGrantedRefund
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderGrantedRefund")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_granted_refunds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_granted_refunds")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GrantedRefund = foreign
		if foreign.R == nil {
			foreign.R = &orderGrantedRefundR{}
		}
		foreign.R.GrantedRefundOrderGrantedRefundLines = append(foreign.R.GrantedRefundOrderGrantedRefundLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GrantedRefundID, foreign.ID) {
				local.R.GrantedRefund = foreign
				if foreign.R == nil {
					foreign.R = &orderGrantedRefundR{}
				}
				foreign.R.GrantedRefundOrderGrantedRefundLines = append(foreign.R.GrantedRefundOrderGrantedRefundLines, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderLine allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderGrantedRefundLineL) LoadOrderLine(e boil.Executor, singular bool, maybeOrderGrantedRefundLine interface{}, mods queries.Applicator) error {
	var slice []*OrderGrantedRefundLine
	var object *OrderGrantedRefundLine

	if singular {
		var ok bool
		object, ok = maybeOrderGrantedRefundLine.(*OrderGrantedRefundLine)
		if !ok {
			object = new(OrderGrantedRefundLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderGrantedRefundLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderGrantedRefundLine))
			}
		}
	} else {
		s, ok := maybeOrderGrantedRefundLine.(*[]*OrderGrantedRefundLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderGrantedRefundLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderGrantedRefundLine))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderGrantedRefundLineR{}
		}
		if !queries.IsNil(object.OrderLineID) {
			args[object.OrderLineID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderGrantedRefundLineR{}
			}

			if !queries.IsNil(obj.OrderLineID) {
				args[obj.OrderLineID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_lines`),
		qm.WhereIn(`order_lines.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderLine")
	}

	var resultSlice []*OrderLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderLine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_lines")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderLine = foreign
		if foreign.R == nil {
			foreign.R = &orderLineR{}
		}
		foreign.R.OrderGrantedRefundLines = append(foreign.R.OrderGrantedRefundLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderLineID, foreign.ID) {
				local.R.OrderLine = foreign
				if foreign.R == nil {
					foreign.R = &orderLineR{}
				}
				foreign.R.OrderGrantedRefundLines = append(foreign.R.OrderGrantedRefundLines, local)
				break
			}
		}
	}

	return nil
}

// SetGrantedRefund of the orderGrantedRefundLine to the related item.
// Sets o.R.GrantedRefund to related.
// Adds o to related.R.GrantedRefundOrderGrantedRefundLines.
func (o *OrderGrantedRefundLine) SetGrantedRefund(exec boil.Executor, insert bool, related *OrderGrantedRefund) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_granted_refund_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"granted_refund_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderGrantedRefundLinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GrantedRefundID, related.ID)
	if o.R == nil {
		o.R = &orderGrantedRefundLineR{
			GrantedRefund: related,
		}
	} else {
		o.R.GrantedRefund = related
	}

	if related.R == nil {
		related.R = &orderGrantedRefundR{
			GrantedRefundOrderGrantedRefundLines: OrderGrantedRefundLineSlice{o},
		}
	} else {
		related.R.GrantedRefundOrderGrantedRefundLines = append(related.R.GrantedRefundOrderGrantedRefundLines, o)
	}

	return nil
}

// RemoveGrantedRefund relationship.
// Sets o.R.GrantedRefund to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderGrantedRefundLine) RemoveGrantedRefund(exec boil.Executor, related *OrderGrantedRefund) error {
	var err error

	queries.SetScanner(&o.GrantedRefundID, nil)
	if _, err = o.Update(exec, boil.Whitelist("granted_refund_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.GrantedRefund = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GrantedRefundOrderGrantedRefundLines {
		if queries.Equal(o.GrantedRefundID, ri.GrantedRefundID) {
			continue
		}

		ln := len(related.R.GrantedRefundOrderGrantedRefundLines)
		if ln > 1 && i < ln-1 {
			related.R.GrantedRefundOrderGrantedRefundLines[i] = related.R.GrantedRefundOrderGrantedRefundLines[ln-1]
		}
		related.R.GrantedRefundOrderGrantedRefundLines = related.R.GrantedRefundOrderGrantedRefundLines[:ln-1]
		break
	}
	return nil
}

// SetOrderLine of the orderGrantedRefundLine to the related item.
// Sets o.R.OrderLine to related.
// Adds o to related.R.OrderGrantedRefundLines.
func (o *OrderGrantedRefundLine) SetOrderLine(exec boil.Executor, insert bool, related *OrderLine) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_granted_refund_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_line_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderGrantedRefundLinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderLineID, related.ID)
	if o.R == nil {
		o.R = &orderGrantedRefundLineR{
			OrderLine: related,
		}
	} else {
		o.R.OrderLine = related
	}

	if related.R == nil {
		related.R = &orderLineR{
			OrderGrantedRefundLines: OrderGrantedRefundLineSlice{o},
		}
	} else {
		related.R.OrderGrantedRefundLines = append(related.R.OrderGrantedRefundLines, o)
	}

	return nil
}

// RemoveOrderLine relationship.
// Sets o.R.OrderLine to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderGrantedRefundLine) RemoveOrderLine(exec boil.Executor, related *OrderLine) error {
	var err error

	queries.SetScanner(&o.OrderLineID, nil)
	if _, err = o.Update(exec, boil.Whitelist("order_line_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderLine = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderGrantedRefundLines {
		if queries.Equal(o.OrderLineID, ri.OrderLineID) {
			continue
		}

		ln := len(related.R.OrderGrantedRefundLines)
		if ln > 1 && i < ln-1 {
			related.R.OrderGrantedRefundLines[i] = related.R.OrderGrantedRefundLines[ln-1]
		}
		related.R.OrderGrantedRefundLines = related.R.OrderGrantedRefundLines[:ln-1]
		break
	}
	return nil
}

// OrderGrantedRefundLines retrieves all the records using an executor.
func OrderGrantedRefundLines(mods ...qm.QueryMod) orderGrantedRefundLineQuery {
	mods = append(mods, qm.From("\"order_granted_refund_lines\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_granted_refund_lines\".*"})
	}

	return orderGrantedRefundLineQuery{q}
}

// FindOrderGrantedRefundLine retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderGrantedRefundLine(exec boil.Executor, iD string, selectCols ...string) (*OrderGrantedRefundLine, error) {
	orderGrantedRefundLineObj := &OrderGrantedRefundLine{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_granted_refund_lines\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, orderGrantedRefundLineObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from order_granted_refund_lines")
	}

	return orderGrantedRefundLineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderGrantedRefundLine) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no order_granted_refund_lines provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderGrantedRefundLineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderGrantedRefundLineInsertCacheMut.RLock()
	cache, cached := orderGrantedRefundLineInsertCache[key]
	orderGrantedRefundLineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderGrantedRefundLineAllColumns,
			orderGrantedRefundLineColumnsWithDefault,
			orderGrantedRefundLineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderGrantedRefundLineType, orderGrantedRefundLineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderGrantedRefundLineType, orderGrantedRefundLineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_granted_refund_lines\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_granted_refund_lines\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into order_granted_refund_lines")
	}

	if !cached {
		orderGrantedRefundLineInsertCacheMut.Lock()
		orderGrantedRefundLineInsertCache[key] = cache
		orderGrantedRefundLineInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OrderGrantedRefundLine.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderGrantedRefundLine) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	orderGrantedRefundLineUpdateCacheMut.RLock()
	cache, cached := orderGrantedRefundLineUpdateCache[key]
	orderGrantedRefundLineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderGrantedRefundLineAllColumns,
			orderGrantedRefundLinePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update order_granted_refund_lines, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_granted_refund_lines\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderGrantedRefundLinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderGrantedRefundLineType, orderGrantedRefundLineMapping, append(wl, orderGrantedRefundLinePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update order_granted_refund_lines row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for order_granted_refund_lines")
	}

	if !cached {
		orderGrantedRefundLineUpdateCacheMut.Lock()
		orderGrantedRefundLineUpdateCache[key] = cache
		orderGrantedRefundLineUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q orderGrantedRefundLineQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for order_granted_refund_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for order_granted_refund_lines")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderGrantedRefundLineSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderGrantedRefundLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_granted_refund_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderGrantedRefundLinePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in orderGrantedRefundLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all orderGrantedRefundLine")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderGrantedRefundLine) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no order_granted_refund_lines provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(orderGrantedRefundLineColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderGrantedRefundLineUpsertCacheMut.RLock()
	cache, cached := orderGrantedRefundLineUpsertCache[key]
	orderGrantedRefundLineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderGrantedRefundLineAllColumns,
			orderGrantedRefundLineColumnsWithDefault,
			orderGrantedRefundLineColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderGrantedRefundLineAllColumns,
			orderGrantedRefundLinePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert order_granted_refund_lines, could not build update column list")
		}

		ret := strmangle.SetComplement(orderGrantedRefundLineAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderGrantedRefundLinePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert order_granted_refund_lines, could not build conflict column list")
			}

			conflict = make([]string, len(orderGrantedRefundLinePrimaryKeyColumns))
			copy(conflict, orderGrantedRefundLinePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_granted_refund_lines\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderGrantedRefundLineType, orderGrantedRefundLineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderGrantedRefundLineType, orderGrantedRefundLineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert order_granted_refund_lines")
	}

	if !cached {
		orderGrantedRefundLineUpsertCacheMut.Lock()
		orderGrantedRefundLineUpsertCache[key] = cache
		orderGrantedRefundLineUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single OrderGrantedRefundLine record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderGrantedRefundLine) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no OrderGrantedRefundLine provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderGrantedRefundLinePrimaryKeyMapping)
	sql := "DELETE FROM \"order_granted_refund_lines\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from order_granted_refund_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for order_granted_refund_lines")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderGrantedRefundLineQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no orderGrantedRefundLineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from order_granted_refund_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for order_granted_refund_lines")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderGrantedRefundLineSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderGrantedRefundLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_granted_refund_lines\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, orderGrantedRefundLinePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from orderGrantedRefundLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for order_granted_refund_lines")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderGrantedRefundLine) Reload(exec boil.Executor) error {
	ret, err := FindOrderGrantedRefundLine(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderGrantedRefundLineSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderGrantedRefundLineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderGrantedRefundLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_granted_refund_lines\".* FROM \"order_granted_refund_lines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderGrantedRefundLinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in OrderGrantedRefundLineSlice")
	}

	*o = slice

	return nil
}

// OrderGrantedRefundLineExists checks if the OrderGrantedRefundLine row exists.
func OrderGrantedRefundLineExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_granted_refund_lines\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if order_granted_refund_lines exists")
	}

	return exists, nil
}

// Exists checks if the OrderGrantedRefundLine row exists.
func (o *OrderGrantedRefundLine) Exists(exec boil.Executor) (bool, error) {
	return OrderGrantedRefundLineExists(exec, o.ID)
}
