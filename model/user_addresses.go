// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserAddress is an object representing the database table.
type UserAddress struct {
	ID        string `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	AddressID string `boil:"address_id" json:"address_id" toml:"address_id" yaml:"address_id"`

	R *userAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAddressColumns = struct {
	ID        string
	UserID    string
	AddressID string
}{
	ID:        "id",
	UserID:    "user_id",
	AddressID: "address_id",
}

var UserAddressTableColumns = struct {
	ID        string
	UserID    string
	AddressID string
}{
	ID:        "user_addresses.id",
	UserID:    "user_addresses.user_id",
	AddressID: "user_addresses.address_id",
}

// Generated where

var UserAddressWhere = struct {
	ID        whereHelperstring
	UserID    whereHelperstring
	AddressID whereHelperstring
}{
	ID:        whereHelperstring{field: "\"user_addresses\".\"id\""},
	UserID:    whereHelperstring{field: "\"user_addresses\".\"user_id\""},
	AddressID: whereHelperstring{field: "\"user_addresses\".\"address_id\""},
}

// UserAddressRels is where relationship names are stored.
var UserAddressRels = struct {
}{}

// userAddressR is where relationships are stored.
type userAddressR struct {
}

// NewStruct creates a new relationship struct
func (*userAddressR) NewStruct() *userAddressR {
	return &userAddressR{}
}

// userAddressL is where Load methods for each relationship are stored.
type userAddressL struct{}

var (
	userAddressAllColumns            = []string{"id", "user_id", "address_id"}
	userAddressColumnsWithoutDefault = []string{"user_id", "address_id"}
	userAddressColumnsWithDefault    = []string{"id"}
	userAddressPrimaryKeyColumns     = []string{"id"}
	userAddressGeneratedColumns      = []string{}
)

type (
	// UserAddressSlice is an alias for a slice of pointers to UserAddress.
	// This should almost always be used instead of []UserAddress.
	UserAddressSlice []*UserAddress

	userAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAddressType                 = reflect.TypeOf(&UserAddress{})
	userAddressMapping              = queries.MakeStructMapping(userAddressType)
	userAddressPrimaryKeyMapping, _ = queries.BindMapping(userAddressType, userAddressMapping, userAddressPrimaryKeyColumns)
	userAddressInsertCacheMut       sync.RWMutex
	userAddressInsertCache          = make(map[string]insertCache)
	userAddressUpdateCacheMut       sync.RWMutex
	userAddressUpdateCache          = make(map[string]updateCache)
	userAddressUpsertCacheMut       sync.RWMutex
	userAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userAddress record from the query.
func (q userAddressQuery) One(exec boil.Executor) (*UserAddress, error) {
	o := &UserAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for user_addresses")
	}

	return o, nil
}

// All returns all UserAddress records from the query.
func (q userAddressQuery) All(exec boil.Executor) (UserAddressSlice, error) {
	var o []*UserAddress

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to UserAddress slice")
	}

	return o, nil
}

// Count returns the count of all UserAddress records in the query.
func (q userAddressQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count user_addresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAddressQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if user_addresses exists")
	}

	return count > 0, nil
}

// UserAddresses retrieves all the records using an executor.
func UserAddresses(mods ...qm.QueryMod) userAddressQuery {
	mods = append(mods, qm.From("\"user_addresses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_addresses\".*"})
	}

	return userAddressQuery{q}
}

// FindUserAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAddress(exec boil.Executor, iD string, selectCols ...string) (*UserAddress, error) {
	userAddressObj := &UserAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_addresses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, userAddressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from user_addresses")
	}

	return userAddressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAddress) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no user_addresses provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(userAddressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAddressInsertCacheMut.RLock()
	cache, cached := userAddressInsertCache[key]
	userAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAddressAllColumns,
			userAddressColumnsWithDefault,
			userAddressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userAddressType, userAddressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAddressType, userAddressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_addresses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_addresses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into user_addresses")
	}

	if !cached {
		userAddressInsertCacheMut.Lock()
		userAddressInsertCache[key] = cache
		userAddressInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserAddress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAddress) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	userAddressUpdateCacheMut.RLock()
	cache, cached := userAddressUpdateCache[key]
	userAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAddressAllColumns,
			userAddressPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update user_addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_addresses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAddressType, userAddressMapping, append(wl, userAddressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update user_addresses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for user_addresses")
	}

	if !cached {
		userAddressUpdateCacheMut.Lock()
		userAddressUpdateCache[key] = cache
		userAddressUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userAddressQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for user_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for user_addresses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAddressSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAddressPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in userAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all userAddress")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAddress) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no user_addresses provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(userAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAddressUpsertCacheMut.RLock()
	cache, cached := userAddressUpsertCache[key]
	userAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userAddressAllColumns,
			userAddressColumnsWithDefault,
			userAddressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAddressAllColumns,
			userAddressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert user_addresses, could not build update column list")
		}

		ret := strmangle.SetComplement(userAddressAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userAddressPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert user_addresses, could not build conflict column list")
			}

			conflict = make([]string, len(userAddressPrimaryKeyColumns))
			copy(conflict, userAddressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_addresses\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userAddressType, userAddressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAddressType, userAddressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert user_addresses")
	}

	if !cached {
		userAddressUpsertCacheMut.Lock()
		userAddressUpsertCache[key] = cache
		userAddressUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAddress) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no UserAddress provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAddressPrimaryKeyMapping)
	sql := "DELETE FROM \"user_addresses\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from user_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for user_addresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAddressQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no userAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from user_addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for user_addresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAddressSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAddressPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from userAddress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for user_addresses")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAddress) Reload(exec boil.Executor) error {
	ret, err := FindUserAddress(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAddressSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_addresses\".* FROM \"user_addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in UserAddressSlice")
	}

	*o = slice

	return nil
}

// UserAddressExists checks if the UserAddress row exists.
func UserAddressExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_addresses\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if user_addresses exists")
	}

	return exists, nil
}

// Exists checks if the UserAddress row exists.
func (o *UserAddress) Exists(exec boil.Executor) (bool, error) {
	return UserAddressExists(exec, o.ID)
}
