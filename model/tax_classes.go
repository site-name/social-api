// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TaxClass is an object representing the database table.
type TaxClass struct {
	ID              string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name            string                 `boil:"name" json:"name" toml:"name" yaml:"name"`
	Metatata        model_types.JSONString `boil:"metatata" json:"metatata,omitempty" toml:"metatata" yaml:"metatata,omitempty"`
	PrivateMetadata model_types.JSONString `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *taxClassR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taxClassL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaxClassColumns = struct {
	ID              string
	Name            string
	Metatata        string
	PrivateMetadata string
}{
	ID:              "id",
	Name:            "name",
	Metatata:        "metatata",
	PrivateMetadata: "private_metadata",
}

var TaxClassTableColumns = struct {
	ID              string
	Name            string
	Metatata        string
	PrivateMetadata string
}{
	ID:              "tax_classes.id",
	Name:            "tax_classes.name",
	Metatata:        "tax_classes.metatata",
	PrivateMetadata: "tax_classes.private_metadata",
}

// Generated where

var TaxClassWhere = struct {
	ID              whereHelperstring
	Name            whereHelperstring
	Metatata        whereHelpermodel_types_JSONString
	PrivateMetadata whereHelpermodel_types_JSONString
}{
	ID:              whereHelperstring{field: "\"tax_classes\".\"id\""},
	Name:            whereHelperstring{field: "\"tax_classes\".\"name\""},
	Metatata:        whereHelpermodel_types_JSONString{field: "\"tax_classes\".\"metatata\""},
	PrivateMetadata: whereHelpermodel_types_JSONString{field: "\"tax_classes\".\"private_metadata\""},
}

// TaxClassRels is where relationship names are stored.
var TaxClassRels = struct {
	OrderLines           string
	Products             string
	ShippingMethods      string
	TaxClassCountryRates string
}{
	OrderLines:           "OrderLines",
	Products:             "Products",
	ShippingMethods:      "ShippingMethods",
	TaxClassCountryRates: "TaxClassCountryRates",
}

// taxClassR is where relationships are stored.
type taxClassR struct {
	OrderLines           OrderLineSlice           `boil:"OrderLines" json:"OrderLines" toml:"OrderLines" yaml:"OrderLines"`
	Products             ProductSlice             `boil:"Products" json:"Products" toml:"Products" yaml:"Products"`
	ShippingMethods      ShippingMethodSlice      `boil:"ShippingMethods" json:"ShippingMethods" toml:"ShippingMethods" yaml:"ShippingMethods"`
	TaxClassCountryRates TaxClassCountryRateSlice `boil:"TaxClassCountryRates" json:"TaxClassCountryRates" toml:"TaxClassCountryRates" yaml:"TaxClassCountryRates"`
}

// NewStruct creates a new relationship struct
func (*taxClassR) NewStruct() *taxClassR {
	return &taxClassR{}
}

func (r *taxClassR) GetOrderLines() OrderLineSlice {
	if r == nil {
		return nil
	}
	return r.OrderLines
}

func (r *taxClassR) GetProducts() ProductSlice {
	if r == nil {
		return nil
	}
	return r.Products
}

func (r *taxClassR) GetShippingMethods() ShippingMethodSlice {
	if r == nil {
		return nil
	}
	return r.ShippingMethods
}

func (r *taxClassR) GetTaxClassCountryRates() TaxClassCountryRateSlice {
	if r == nil {
		return nil
	}
	return r.TaxClassCountryRates
}

// taxClassL is where Load methods for each relationship are stored.
type taxClassL struct{}

var (
	taxClassAllColumns            = []string{"id", "name", "metatata", "private_metadata"}
	taxClassColumnsWithoutDefault = []string{"id", "name"}
	taxClassColumnsWithDefault    = []string{"metatata", "private_metadata"}
	taxClassPrimaryKeyColumns     = []string{"id"}
	taxClassGeneratedColumns      = []string{}
)

type (
	// TaxClassSlice is an alias for a slice of pointers to TaxClass.
	// This should almost always be used instead of []TaxClass.
	TaxClassSlice []*TaxClass

	taxClassQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taxClassType                 = reflect.TypeOf(&TaxClass{})
	taxClassMapping              = queries.MakeStructMapping(taxClassType)
	taxClassPrimaryKeyMapping, _ = queries.BindMapping(taxClassType, taxClassMapping, taxClassPrimaryKeyColumns)
	taxClassInsertCacheMut       sync.RWMutex
	taxClassInsertCache          = make(map[string]insertCache)
	taxClassUpdateCacheMut       sync.RWMutex
	taxClassUpdateCache          = make(map[string]updateCache)
	taxClassUpsertCacheMut       sync.RWMutex
	taxClassUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single taxClass record from the query.
func (q taxClassQuery) One(exec boil.Executor) (*TaxClass, error) {
	o := &TaxClass{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for tax_classes")
	}

	return o, nil
}

// All returns all TaxClass records from the query.
func (q taxClassQuery) All(exec boil.Executor) (TaxClassSlice, error) {
	var o []*TaxClass

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TaxClass slice")
	}

	return o, nil
}

// Count returns the count of all TaxClass records in the query.
func (q taxClassQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count tax_classes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q taxClassQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if tax_classes exists")
	}

	return count > 0, nil
}

// OrderLines retrieves all the order_line's OrderLines with an executor.
func (o *TaxClass) OrderLines(mods ...qm.QueryMod) orderLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_lines\".\"tax_class_id\"=?", o.ID),
	)

	return OrderLines(queryMods...)
}

// Products retrieves all the product's Products with an executor.
func (o *TaxClass) Products(mods ...qm.QueryMod) productQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"products\".\"tax_class_id\"=?", o.ID),
	)

	return Products(queryMods...)
}

// ShippingMethods retrieves all the shipping_method's ShippingMethods with an executor.
func (o *TaxClass) ShippingMethods(mods ...qm.QueryMod) shippingMethodQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_methods\".\"tax_class_id\"=?", o.ID),
	)

	return ShippingMethods(queryMods...)
}

// TaxClassCountryRates retrieves all the tax_class_country_rate's TaxClassCountryRates with an executor.
func (o *TaxClass) TaxClassCountryRates(mods ...qm.QueryMod) taxClassCountryRateQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tax_class_country_rates\".\"tax_class_id\"=?", o.ID),
	)

	return TaxClassCountryRates(queryMods...)
}

// LoadOrderLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (taxClassL) LoadOrderLines(e boil.Executor, singular bool, maybeTaxClass interface{}, mods queries.Applicator) error {
	var slice []*TaxClass
	var object *TaxClass

	if singular {
		var ok bool
		object, ok = maybeTaxClass.(*TaxClass)
		if !ok {
			object = new(TaxClass)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxClass)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxClass))
			}
		}
	} else {
		s, ok := maybeTaxClass.(*[]*TaxClass)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxClass)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxClass))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &taxClassR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxClassR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_lines`),
		qm.WhereIn(`order_lines.tax_class_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_lines")
	}

	var resultSlice []*OrderLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_lines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_lines")
	}

	if singular {
		object.R.OrderLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderLineR{}
			}
			foreign.R.TaxClass = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TaxClassID) {
				local.R.OrderLines = append(local.R.OrderLines, foreign)
				if foreign.R == nil {
					foreign.R = &orderLineR{}
				}
				foreign.R.TaxClass = local
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (taxClassL) LoadProducts(e boil.Executor, singular bool, maybeTaxClass interface{}, mods queries.Applicator) error {
	var slice []*TaxClass
	var object *TaxClass

	if singular {
		var ok bool
		object, ok = maybeTaxClass.(*TaxClass)
		if !ok {
			object = new(TaxClass)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxClass)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxClass))
			}
		}
	} else {
		s, ok := maybeTaxClass.(*[]*TaxClass)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxClass)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxClass))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &taxClassR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxClassR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.tax_class_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load products")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if singular {
		object.R.Products = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productR{}
			}
			foreign.R.TaxClass = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TaxClassID) {
				local.R.Products = append(local.R.Products, foreign)
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.TaxClass = local
				break
			}
		}
	}

	return nil
}

// LoadShippingMethods allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (taxClassL) LoadShippingMethods(e boil.Executor, singular bool, maybeTaxClass interface{}, mods queries.Applicator) error {
	var slice []*TaxClass
	var object *TaxClass

	if singular {
		var ok bool
		object, ok = maybeTaxClass.(*TaxClass)
		if !ok {
			object = new(TaxClass)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxClass)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxClass))
			}
		}
	} else {
		s, ok := maybeTaxClass.(*[]*TaxClass)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxClass)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxClass))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &taxClassR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxClassR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shipping_methods`),
		qm.WhereIn(`shipping_methods.tax_class_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_methods")
	}

	var resultSlice []*ShippingMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_methods")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_methods")
	}

	if singular {
		object.R.ShippingMethods = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodR{}
			}
			foreign.R.TaxClass = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TaxClassID) {
				local.R.ShippingMethods = append(local.R.ShippingMethods, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodR{}
				}
				foreign.R.TaxClass = local
				break
			}
		}
	}

	return nil
}

// LoadTaxClassCountryRates allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (taxClassL) LoadTaxClassCountryRates(e boil.Executor, singular bool, maybeTaxClass interface{}, mods queries.Applicator) error {
	var slice []*TaxClass
	var object *TaxClass

	if singular {
		var ok bool
		object, ok = maybeTaxClass.(*TaxClass)
		if !ok {
			object = new(TaxClass)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxClass)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxClass))
			}
		}
	} else {
		s, ok := maybeTaxClass.(*[]*TaxClass)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxClass)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxClass))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &taxClassR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxClassR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tax_class_country_rates`),
		qm.WhereIn(`tax_class_country_rates.tax_class_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_class_country_rates")
	}

	var resultSlice []*TaxClassCountryRate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_class_country_rates")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_class_country_rates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_class_country_rates")
	}

	if singular {
		object.R.TaxClassCountryRates = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxClassCountryRateR{}
			}
			foreign.R.TaxClass = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TaxClassID) {
				local.R.TaxClassCountryRates = append(local.R.TaxClassCountryRates, foreign)
				if foreign.R == nil {
					foreign.R = &taxClassCountryRateR{}
				}
				foreign.R.TaxClass = local
				break
			}
		}
	}

	return nil
}

// AddOrderLines adds the given related objects to the existing relationships
// of the tax_class, optionally inserting them as new records.
// Appends related to o.R.OrderLines.
// Sets related.R.TaxClass appropriately.
func (o *TaxClass) AddOrderLines(exec boil.Executor, insert bool, related ...*OrderLine) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TaxClassID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_lines\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tax_class_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderLinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TaxClassID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &taxClassR{
			OrderLines: related,
		}
	} else {
		o.R.OrderLines = append(o.R.OrderLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderLineR{
				TaxClass: o,
			}
		} else {
			rel.R.TaxClass = o
		}
	}
	return nil
}

// SetOrderLines removes all previously related items of the
// tax_class replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TaxClass's OrderLines accordingly.
// Replaces o.R.OrderLines with related.
// Sets related.R.TaxClass's OrderLines accordingly.
func (o *TaxClass) SetOrderLines(exec boil.Executor, insert bool, related ...*OrderLine) error {
	query := "update \"order_lines\" set \"tax_class_id\" = null where \"tax_class_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderLines {
			queries.SetScanner(&rel.TaxClassID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TaxClass = nil
		}
		o.R.OrderLines = nil
	}

	return o.AddOrderLines(exec, insert, related...)
}

// RemoveOrderLines relationships from objects passed in.
// Removes related items from R.OrderLines (uses pointer comparison, removal does not keep order)
// Sets related.R.TaxClass.
func (o *TaxClass) RemoveOrderLines(exec boil.Executor, related ...*OrderLine) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TaxClassID, nil)
		if rel.R != nil {
			rel.R.TaxClass = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("tax_class_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderLines {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderLines)
			if ln > 1 && i < ln-1 {
				o.R.OrderLines[i] = o.R.OrderLines[ln-1]
			}
			o.R.OrderLines = o.R.OrderLines[:ln-1]
			break
		}
	}

	return nil
}

// AddProducts adds the given related objects to the existing relationships
// of the tax_class, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.TaxClass appropriately.
func (o *TaxClass) AddProducts(exec boil.Executor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TaxClassID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tax_class_id"}),
				strmangle.WhereClause("\"", "\"", 2, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TaxClassID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &taxClassR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				TaxClass: o,
			}
		} else {
			rel.R.TaxClass = o
		}
	}
	return nil
}

// SetProducts removes all previously related items of the
// tax_class replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TaxClass's Products accordingly.
// Replaces o.R.Products with related.
// Sets related.R.TaxClass's Products accordingly.
func (o *TaxClass) SetProducts(exec boil.Executor, insert bool, related ...*Product) error {
	query := "update \"products\" set \"tax_class_id\" = null where \"tax_class_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Products {
			queries.SetScanner(&rel.TaxClassID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TaxClass = nil
		}
		o.R.Products = nil
	}

	return o.AddProducts(exec, insert, related...)
}

// RemoveProducts relationships from objects passed in.
// Removes related items from R.Products (uses pointer comparison, removal does not keep order)
// Sets related.R.TaxClass.
func (o *TaxClass) RemoveProducts(exec boil.Executor, related ...*Product) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TaxClassID, nil)
		if rel.R != nil {
			rel.R.TaxClass = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("tax_class_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Products {
			if rel != ri {
				continue
			}

			ln := len(o.R.Products)
			if ln > 1 && i < ln-1 {
				o.R.Products[i] = o.R.Products[ln-1]
			}
			o.R.Products = o.R.Products[:ln-1]
			break
		}
	}

	return nil
}

// AddShippingMethods adds the given related objects to the existing relationships
// of the tax_class, optionally inserting them as new records.
// Appends related to o.R.ShippingMethods.
// Sets related.R.TaxClass appropriately.
func (o *TaxClass) AddShippingMethods(exec boil.Executor, insert bool, related ...*ShippingMethod) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TaxClassID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_methods\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tax_class_id"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TaxClassID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &taxClassR{
			ShippingMethods: related,
		}
	} else {
		o.R.ShippingMethods = append(o.R.ShippingMethods, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodR{
				TaxClass: o,
			}
		} else {
			rel.R.TaxClass = o
		}
	}
	return nil
}

// SetShippingMethods removes all previously related items of the
// tax_class replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TaxClass's ShippingMethods accordingly.
// Replaces o.R.ShippingMethods with related.
// Sets related.R.TaxClass's ShippingMethods accordingly.
func (o *TaxClass) SetShippingMethods(exec boil.Executor, insert bool, related ...*ShippingMethod) error {
	query := "update \"shipping_methods\" set \"tax_class_id\" = null where \"tax_class_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ShippingMethods {
			queries.SetScanner(&rel.TaxClassID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TaxClass = nil
		}
		o.R.ShippingMethods = nil
	}

	return o.AddShippingMethods(exec, insert, related...)
}

// RemoveShippingMethods relationships from objects passed in.
// Removes related items from R.ShippingMethods (uses pointer comparison, removal does not keep order)
// Sets related.R.TaxClass.
func (o *TaxClass) RemoveShippingMethods(exec boil.Executor, related ...*ShippingMethod) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TaxClassID, nil)
		if rel.R != nil {
			rel.R.TaxClass = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("tax_class_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ShippingMethods {
			if rel != ri {
				continue
			}

			ln := len(o.R.ShippingMethods)
			if ln > 1 && i < ln-1 {
				o.R.ShippingMethods[i] = o.R.ShippingMethods[ln-1]
			}
			o.R.ShippingMethods = o.R.ShippingMethods[:ln-1]
			break
		}
	}

	return nil
}

// AddTaxClassCountryRates adds the given related objects to the existing relationships
// of the tax_class, optionally inserting them as new records.
// Appends related to o.R.TaxClassCountryRates.
// Sets related.R.TaxClass appropriately.
func (o *TaxClass) AddTaxClassCountryRates(exec boil.Executor, insert bool, related ...*TaxClassCountryRate) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TaxClassID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tax_class_country_rates\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tax_class_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxClassCountryRatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TaxClassID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &taxClassR{
			TaxClassCountryRates: related,
		}
	} else {
		o.R.TaxClassCountryRates = append(o.R.TaxClassCountryRates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxClassCountryRateR{
				TaxClass: o,
			}
		} else {
			rel.R.TaxClass = o
		}
	}
	return nil
}

// SetTaxClassCountryRates removes all previously related items of the
// tax_class replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TaxClass's TaxClassCountryRates accordingly.
// Replaces o.R.TaxClassCountryRates with related.
// Sets related.R.TaxClass's TaxClassCountryRates accordingly.
func (o *TaxClass) SetTaxClassCountryRates(exec boil.Executor, insert bool, related ...*TaxClassCountryRate) error {
	query := "update \"tax_class_country_rates\" set \"tax_class_id\" = null where \"tax_class_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TaxClassCountryRates {
			queries.SetScanner(&rel.TaxClassID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TaxClass = nil
		}
		o.R.TaxClassCountryRates = nil
	}

	return o.AddTaxClassCountryRates(exec, insert, related...)
}

// RemoveTaxClassCountryRates relationships from objects passed in.
// Removes related items from R.TaxClassCountryRates (uses pointer comparison, removal does not keep order)
// Sets related.R.TaxClass.
func (o *TaxClass) RemoveTaxClassCountryRates(exec boil.Executor, related ...*TaxClassCountryRate) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TaxClassID, nil)
		if rel.R != nil {
			rel.R.TaxClass = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("tax_class_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TaxClassCountryRates {
			if rel != ri {
				continue
			}

			ln := len(o.R.TaxClassCountryRates)
			if ln > 1 && i < ln-1 {
				o.R.TaxClassCountryRates[i] = o.R.TaxClassCountryRates[ln-1]
			}
			o.R.TaxClassCountryRates = o.R.TaxClassCountryRates[:ln-1]
			break
		}
	}

	return nil
}

// TaxClasses retrieves all the records using an executor.
func TaxClasses(mods ...qm.QueryMod) taxClassQuery {
	mods = append(mods, qm.From("\"tax_classes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tax_classes\".*"})
	}

	return taxClassQuery{q}
}

// FindTaxClass retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaxClass(exec boil.Executor, iD string, selectCols ...string) (*TaxClass, error) {
	taxClassObj := &TaxClass{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tax_classes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, taxClassObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from tax_classes")
	}

	return taxClassObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaxClass) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tax_classes provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(taxClassColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taxClassInsertCacheMut.RLock()
	cache, cached := taxClassInsertCache[key]
	taxClassInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taxClassAllColumns,
			taxClassColumnsWithDefault,
			taxClassColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taxClassType, taxClassMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taxClassType, taxClassMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tax_classes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tax_classes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into tax_classes")
	}

	if !cached {
		taxClassInsertCacheMut.Lock()
		taxClassInsertCache[key] = cache
		taxClassInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TaxClass.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaxClass) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	taxClassUpdateCacheMut.RLock()
	cache, cached := taxClassUpdateCache[key]
	taxClassUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taxClassAllColumns,
			taxClassPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update tax_classes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tax_classes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, taxClassPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taxClassType, taxClassMapping, append(wl, taxClassPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update tax_classes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for tax_classes")
	}

	if !cached {
		taxClassUpdateCacheMut.Lock()
		taxClassUpdateCache[key] = cache
		taxClassUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q taxClassQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for tax_classes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for tax_classes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaxClassSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tax_classes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, taxClassPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in taxClass slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all taxClass")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaxClass) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no tax_classes provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(taxClassColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taxClassUpsertCacheMut.RLock()
	cache, cached := taxClassUpsertCache[key]
	taxClassUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			taxClassAllColumns,
			taxClassColumnsWithDefault,
			taxClassColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			taxClassAllColumns,
			taxClassPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert tax_classes, could not build update column list")
		}

		ret := strmangle.SetComplement(taxClassAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(taxClassPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert tax_classes, could not build conflict column list")
			}

			conflict = make([]string, len(taxClassPrimaryKeyColumns))
			copy(conflict, taxClassPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tax_classes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(taxClassType, taxClassMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taxClassType, taxClassMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert tax_classes")
	}

	if !cached {
		taxClassUpsertCacheMut.Lock()
		taxClassUpsertCache[key] = cache
		taxClassUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TaxClass record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaxClass) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TaxClass provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taxClassPrimaryKeyMapping)
	sql := "DELETE FROM \"tax_classes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from tax_classes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for tax_classes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taxClassQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no taxClassQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from tax_classes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for tax_classes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaxClassSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tax_classes\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, taxClassPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from taxClass slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for tax_classes")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaxClass) Reload(exec boil.Executor) error {
	ret, err := FindTaxClass(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxClassSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaxClassSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tax_classes\".* FROM \"tax_classes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taxClassPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TaxClassSlice")
	}

	*o = slice

	return nil
}

// TaxClassExists checks if the TaxClass row exists.
func TaxClassExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tax_classes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if tax_classes exists")
	}

	return exists, nil
}

// Exists checks if the TaxClass row exists.
func (o *TaxClass) Exists(exec boil.Executor) (bool, error) {
	return TaxClassExists(exec, o.ID)
}
