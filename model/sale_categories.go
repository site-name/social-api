// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SaleCategory is an object representing the database table.
type SaleCategory struct {
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	SaleID     string `boil:"sale_id" json:"sale_id" toml:"sale_id" yaml:"sale_id"`
	CategoryID string `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	CreatedAt  int64  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *saleCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L saleCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SaleCategoryColumns = struct {
	ID         string
	SaleID     string
	CategoryID string
	CreatedAt  string
}{
	ID:         "id",
	SaleID:     "sale_id",
	CategoryID: "category_id",
	CreatedAt:  "created_at",
}

var SaleCategoryTableColumns = struct {
	ID         string
	SaleID     string
	CategoryID string
	CreatedAt  string
}{
	ID:         "sale_categories.id",
	SaleID:     "sale_categories.sale_id",
	CategoryID: "sale_categories.category_id",
	CreatedAt:  "sale_categories.created_at",
}

// Generated where

var SaleCategoryWhere = struct {
	ID         whereHelperstring
	SaleID     whereHelperstring
	CategoryID whereHelperstring
	CreatedAt  whereHelperint64
}{
	ID:         whereHelperstring{field: "\"sale_categories\".\"id\""},
	SaleID:     whereHelperstring{field: "\"sale_categories\".\"sale_id\""},
	CategoryID: whereHelperstring{field: "\"sale_categories\".\"category_id\""},
	CreatedAt:  whereHelperint64{field: "\"sale_categories\".\"created_at\""},
}

// SaleCategoryRels is where relationship names are stored.
var SaleCategoryRels = struct {
	Category string
	Sale     string
}{
	Category: "Category",
	Sale:     "Sale",
}

// saleCategoryR is where relationships are stored.
type saleCategoryR struct {
	Category *Category `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	Sale     *Sale     `boil:"Sale" json:"Sale" toml:"Sale" yaml:"Sale"`
}

// NewStruct creates a new relationship struct
func (*saleCategoryR) NewStruct() *saleCategoryR {
	return &saleCategoryR{}
}

func (r *saleCategoryR) GetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *saleCategoryR) GetSale() *Sale {
	if r == nil {
		return nil
	}
	return r.Sale
}

// saleCategoryL is where Load methods for each relationship are stored.
type saleCategoryL struct{}

var (
	saleCategoryAllColumns            = []string{"id", "sale_id", "category_id", "created_at"}
	saleCategoryColumnsWithoutDefault = []string{"sale_id", "category_id", "created_at"}
	saleCategoryColumnsWithDefault    = []string{"id"}
	saleCategoryPrimaryKeyColumns     = []string{"id"}
	saleCategoryGeneratedColumns      = []string{}
)

type (
	// SaleCategorySlice is an alias for a slice of pointers to SaleCategory.
	// This should almost always be used instead of []SaleCategory.
	SaleCategorySlice []*SaleCategory

	saleCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	saleCategoryType                 = reflect.TypeOf(&SaleCategory{})
	saleCategoryMapping              = queries.MakeStructMapping(saleCategoryType)
	saleCategoryPrimaryKeyMapping, _ = queries.BindMapping(saleCategoryType, saleCategoryMapping, saleCategoryPrimaryKeyColumns)
	saleCategoryInsertCacheMut       sync.RWMutex
	saleCategoryInsertCache          = make(map[string]insertCache)
	saleCategoryUpdateCacheMut       sync.RWMutex
	saleCategoryUpdateCache          = make(map[string]updateCache)
	saleCategoryUpsertCacheMut       sync.RWMutex
	saleCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single saleCategory record from the query.
func (q saleCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SaleCategory, error) {
	o := &SaleCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for sale_categories")
	}

	return o, nil
}

// All returns all SaleCategory records from the query.
func (q saleCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SaleCategorySlice, error) {
	var o []*SaleCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to SaleCategory slice")
	}

	return o, nil
}

// Count returns the count of all SaleCategory records in the query.
func (q saleCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count sale_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q saleCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if sale_categories exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *SaleCategory) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// Sale pointed to by the foreign key.
func (o *SaleCategory) Sale(mods ...qm.QueryMod) saleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SaleID),
	}

	queryMods = append(queryMods, mods...)

	return Sales(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleCategoryL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSaleCategory interface{}, mods queries.Applicator) error {
	var slice []*SaleCategory
	var object *SaleCategory

	if singular {
		var ok bool
		object, ok = maybeSaleCategory.(*SaleCategory)
		if !ok {
			object = new(SaleCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSaleCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSaleCategory))
			}
		}
	} else {
		s, ok := maybeSaleCategory.(*[]*SaleCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSaleCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSaleCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleCategoryR{}
		}
		args = append(args, object.CategoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleCategoryR{}
			}

			for _, a := range args {
				if a == obj.CategoryID {
					continue Outer
				}
			}

			args = append(args, obj.CategoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.SaleCategories = append(foreign.R.SaleCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.ID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.SaleCategories = append(foreign.R.SaleCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadSale allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleCategoryL) LoadSale(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSaleCategory interface{}, mods queries.Applicator) error {
	var slice []*SaleCategory
	var object *SaleCategory

	if singular {
		var ok bool
		object, ok = maybeSaleCategory.(*SaleCategory)
		if !ok {
			object = new(SaleCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSaleCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSaleCategory))
			}
		}
	} else {
		s, ok := maybeSaleCategory.(*[]*SaleCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSaleCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSaleCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleCategoryR{}
		}
		args = append(args, object.SaleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleCategoryR{}
			}

			for _, a := range args {
				if a == obj.SaleID {
					continue Outer
				}
			}

			args = append(args, obj.SaleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sales`),
		qm.WhereIn(`sales.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sale")
	}

	var resultSlice []*Sale
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sale")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sales")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sales")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sale = foreign
		if foreign.R == nil {
			foreign.R = &saleR{}
		}
		foreign.R.SaleCategories = append(foreign.R.SaleCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SaleID == foreign.ID {
				local.R.Sale = foreign
				if foreign.R == nil {
					foreign.R = &saleR{}
				}
				foreign.R.SaleCategories = append(foreign.R.SaleCategories, local)
				break
			}
		}
	}

	return nil
}

// SetCategory of the saleCategory to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.SaleCategories.
func (o *SaleCategory) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, saleCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.ID
	if o.R == nil {
		o.R = &saleCategoryR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			SaleCategories: SaleCategorySlice{o},
		}
	} else {
		related.R.SaleCategories = append(related.R.SaleCategories, o)
	}

	return nil
}

// SetSale of the saleCategory to the related item.
// Sets o.R.Sale to related.
// Adds o to related.R.SaleCategories.
func (o *SaleCategory) SetSale(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sale) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sale_id"}),
		strmangle.WhereClause("\"", "\"", 2, saleCategoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SaleID = related.ID
	if o.R == nil {
		o.R = &saleCategoryR{
			Sale: related,
		}
	} else {
		o.R.Sale = related
	}

	if related.R == nil {
		related.R = &saleR{
			SaleCategories: SaleCategorySlice{o},
		}
	} else {
		related.R.SaleCategories = append(related.R.SaleCategories, o)
	}

	return nil
}

// SaleCategories retrieves all the records using an executor.
func SaleCategories(mods ...qm.QueryMod) saleCategoryQuery {
	mods = append(mods, qm.From("\"sale_categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale_categories\".*"})
	}

	return saleCategoryQuery{q}
}

// FindSaleCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSaleCategory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SaleCategory, error) {
	saleCategoryObj := &SaleCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale_categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, saleCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from sale_categories")
	}

	return saleCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SaleCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no sale_categories provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(saleCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	saleCategoryInsertCacheMut.RLock()
	cache, cached := saleCategoryInsertCache[key]
	saleCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			saleCategoryAllColumns,
			saleCategoryColumnsWithDefault,
			saleCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(saleCategoryType, saleCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(saleCategoryType, saleCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into sale_categories")
	}

	if !cached {
		saleCategoryInsertCacheMut.Lock()
		saleCategoryInsertCache[key] = cache
		saleCategoryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SaleCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SaleCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	saleCategoryUpdateCacheMut.RLock()
	cache, cached := saleCategoryUpdateCache[key]
	saleCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			saleCategoryAllColumns,
			saleCategoryPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update sale_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, saleCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(saleCategoryType, saleCategoryMapping, append(wl, saleCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update sale_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for sale_categories")
	}

	if !cached {
		saleCategoryUpdateCacheMut.Lock()
		saleCategoryUpdateCache[key] = cache
		saleCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q saleCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for sale_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for sale_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SaleCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, saleCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in saleCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all saleCategory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SaleCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no sale_categories provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(saleCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	saleCategoryUpsertCacheMut.RLock()
	cache, cached := saleCategoryUpsertCache[key]
	saleCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			saleCategoryAllColumns,
			saleCategoryColumnsWithDefault,
			saleCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			saleCategoryAllColumns,
			saleCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert sale_categories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(saleCategoryPrimaryKeyColumns))
			copy(conflict, saleCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale_categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(saleCategoryType, saleCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(saleCategoryType, saleCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert sale_categories")
	}

	if !cached {
		saleCategoryUpsertCacheMut.Lock()
		saleCategoryUpsertCache[key] = cache
		saleCategoryUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SaleCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SaleCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no SaleCategory provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), saleCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"sale_categories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from sale_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for sale_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q saleCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no saleCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from sale_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for sale_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SaleCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, saleCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from saleCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for sale_categories")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SaleCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSaleCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SaleCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SaleCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale_categories\".* FROM \"sale_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, saleCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in SaleCategorySlice")
	}

	*o = slice

	return nil
}

// SaleCategoryExists checks if the SaleCategory row exists.
func SaleCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale_categories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if sale_categories exists")
	}

	return exists, nil
}

// Exists checks if the SaleCategory row exists.
func (o *SaleCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SaleCategoryExists(ctx, exec, o.ID)
}
