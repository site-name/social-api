// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PromotionRule is an object representing the database table.
type PromotionRule struct {
	ID                 string                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name               string                  `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description        model_types.JSONString  `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	PromotionID        string                  `boil:"promotion_id" json:"promotion_id" toml:"promotion_id" yaml:"promotion_id"`
	CataloguePredicate model_types.JSONString  `boil:"catalogue_predicate" json:"catalogue_predicate,omitempty" toml:"catalogue_predicate" yaml:"catalogue_predicate,omitempty"`
	OrderPredicate     model_types.JSONString  `boil:"order_predicate" json:"order_predicate,omitempty" toml:"order_predicate" yaml:"order_predicate,omitempty"`
	RewardValueType    NullRewardValueType     `boil:"reward_value_type" json:"reward_value_type,omitempty" toml:"reward_value_type" yaml:"reward_value_type,omitempty"`
	RewardValue        model_types.NullDecimal `boil:"reward_value" json:"reward_value,omitempty" toml:"reward_value" yaml:"reward_value,omitempty"`
	RewardType         NullRewardType          `boil:"reward_type" json:"reward_type,omitempty" toml:"reward_type" yaml:"reward_type,omitempty"`
	VariantsDirty      model_types.NullBool    `boil:"variants_dirty" json:"variants_dirty,omitempty" toml:"variants_dirty" yaml:"variants_dirty,omitempty"`

	R *promotionRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L promotionRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PromotionRuleColumns = struct {
	ID                 string
	Name               string
	Description        string
	PromotionID        string
	CataloguePredicate string
	OrderPredicate     string
	RewardValueType    string
	RewardValue        string
	RewardType         string
	VariantsDirty      string
}{
	ID:                 "id",
	Name:               "name",
	Description:        "description",
	PromotionID:        "promotion_id",
	CataloguePredicate: "catalogue_predicate",
	OrderPredicate:     "order_predicate",
	RewardValueType:    "reward_value_type",
	RewardValue:        "reward_value",
	RewardType:         "reward_type",
	VariantsDirty:      "variants_dirty",
}

var PromotionRuleTableColumns = struct {
	ID                 string
	Name               string
	Description        string
	PromotionID        string
	CataloguePredicate string
	OrderPredicate     string
	RewardValueType    string
	RewardValue        string
	RewardType         string
	VariantsDirty      string
}{
	ID:                 "promotion_rules.id",
	Name:               "promotion_rules.name",
	Description:        "promotion_rules.description",
	PromotionID:        "promotion_rules.promotion_id",
	CataloguePredicate: "promotion_rules.catalogue_predicate",
	OrderPredicate:     "promotion_rules.order_predicate",
	RewardValueType:    "promotion_rules.reward_value_type",
	RewardValue:        "promotion_rules.reward_value",
	RewardType:         "promotion_rules.reward_type",
	VariantsDirty:      "promotion_rules.variants_dirty",
}

// Generated where

type whereHelperNullRewardValueType struct{ field string }

func (w whereHelperNullRewardValueType) EQ(x NullRewardValueType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullRewardValueType) NEQ(x NullRewardValueType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullRewardValueType) LT(x NullRewardValueType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullRewardValueType) LTE(x NullRewardValueType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullRewardValueType) GT(x NullRewardValueType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullRewardValueType) GTE(x NullRewardValueType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullRewardValueType) IN(slice []NullRewardValueType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullRewardValueType) NIN(slice []NullRewardValueType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullRewardValueType) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperNullRewardValueType) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelperNullRewardType struct{ field string }

func (w whereHelperNullRewardType) EQ(x NullRewardType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullRewardType) NEQ(x NullRewardType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullRewardType) LT(x NullRewardType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullRewardType) LTE(x NullRewardType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullRewardType) GT(x NullRewardType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullRewardType) GTE(x NullRewardType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullRewardType) IN(slice []NullRewardType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullRewardType) NIN(slice []NullRewardType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullRewardType) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperNullRewardType) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var PromotionRuleWhere = struct {
	ID                 whereHelperstring
	Name               whereHelperstring
	Description        whereHelpermodel_types_JSONString
	PromotionID        whereHelperstring
	CataloguePredicate whereHelpermodel_types_JSONString
	OrderPredicate     whereHelpermodel_types_JSONString
	RewardValueType    whereHelperNullRewardValueType
	RewardValue        whereHelpermodel_types_NullDecimal
	RewardType         whereHelperNullRewardType
	VariantsDirty      whereHelpermodel_types_NullBool
}{
	ID:                 whereHelperstring{field: "\"promotion_rules\".\"id\""},
	Name:               whereHelperstring{field: "\"promotion_rules\".\"name\""},
	Description:        whereHelpermodel_types_JSONString{field: "\"promotion_rules\".\"description\""},
	PromotionID:        whereHelperstring{field: "\"promotion_rules\".\"promotion_id\""},
	CataloguePredicate: whereHelpermodel_types_JSONString{field: "\"promotion_rules\".\"catalogue_predicate\""},
	OrderPredicate:     whereHelpermodel_types_JSONString{field: "\"promotion_rules\".\"order_predicate\""},
	RewardValueType:    whereHelperNullRewardValueType{field: "\"promotion_rules\".\"reward_value_type\""},
	RewardValue:        whereHelpermodel_types_NullDecimal{field: "\"promotion_rules\".\"reward_value\""},
	RewardType:         whereHelperNullRewardType{field: "\"promotion_rules\".\"reward_type\""},
	VariantsDirty:      whereHelpermodel_types_NullBool{field: "\"promotion_rules\".\"variants_dirty\""},
}

// PromotionRuleRels is where relationship names are stored.
var PromotionRuleRels = struct {
	Promotion                           string
	CheckoutDiscounts                   string
	CheckoutLineDiscounts               string
	OrderDiscounts                      string
	OrderLineDiscounts                  string
	PromotionRuleChannels               string
	PromotionRuleGifts                  string
	PromotionRuleProductVariants        string
	VariantChannelListingPromotionRules string
}{
	Promotion:                           "Promotion",
	CheckoutDiscounts:                   "CheckoutDiscounts",
	CheckoutLineDiscounts:               "CheckoutLineDiscounts",
	OrderDiscounts:                      "OrderDiscounts",
	OrderLineDiscounts:                  "OrderLineDiscounts",
	PromotionRuleChannels:               "PromotionRuleChannels",
	PromotionRuleGifts:                  "PromotionRuleGifts",
	PromotionRuleProductVariants:        "PromotionRuleProductVariants",
	VariantChannelListingPromotionRules: "VariantChannelListingPromotionRules",
}

// promotionRuleR is where relationships are stored.
type promotionRuleR struct {
	Promotion                           *Promotion                              `boil:"Promotion" json:"Promotion" toml:"Promotion" yaml:"Promotion"`
	CheckoutDiscounts                   CheckoutDiscountSlice                   `boil:"CheckoutDiscounts" json:"CheckoutDiscounts" toml:"CheckoutDiscounts" yaml:"CheckoutDiscounts"`
	CheckoutLineDiscounts               CheckoutLineDiscountSlice               `boil:"CheckoutLineDiscounts" json:"CheckoutLineDiscounts" toml:"CheckoutLineDiscounts" yaml:"CheckoutLineDiscounts"`
	OrderDiscounts                      OrderDiscountSlice                      `boil:"OrderDiscounts" json:"OrderDiscounts" toml:"OrderDiscounts" yaml:"OrderDiscounts"`
	OrderLineDiscounts                  OrderLineDiscountSlice                  `boil:"OrderLineDiscounts" json:"OrderLineDiscounts" toml:"OrderLineDiscounts" yaml:"OrderLineDiscounts"`
	PromotionRuleChannels               PromotionRuleChannelSlice               `boil:"PromotionRuleChannels" json:"PromotionRuleChannels" toml:"PromotionRuleChannels" yaml:"PromotionRuleChannels"`
	PromotionRuleGifts                  PromotionRuleGiftSlice                  `boil:"PromotionRuleGifts" json:"PromotionRuleGifts" toml:"PromotionRuleGifts" yaml:"PromotionRuleGifts"`
	PromotionRuleProductVariants        PromotionRuleProductVariantSlice        `boil:"PromotionRuleProductVariants" json:"PromotionRuleProductVariants" toml:"PromotionRuleProductVariants" yaml:"PromotionRuleProductVariants"`
	VariantChannelListingPromotionRules VariantChannelListingPromotionRuleSlice `boil:"VariantChannelListingPromotionRules" json:"VariantChannelListingPromotionRules" toml:"VariantChannelListingPromotionRules" yaml:"VariantChannelListingPromotionRules"`
}

// NewStruct creates a new relationship struct
func (*promotionRuleR) NewStruct() *promotionRuleR {
	return &promotionRuleR{}
}

func (r *promotionRuleR) GetPromotion() *Promotion {
	if r == nil {
		return nil
	}
	return r.Promotion
}

func (r *promotionRuleR) GetCheckoutDiscounts() CheckoutDiscountSlice {
	if r == nil {
		return nil
	}
	return r.CheckoutDiscounts
}

func (r *promotionRuleR) GetCheckoutLineDiscounts() CheckoutLineDiscountSlice {
	if r == nil {
		return nil
	}
	return r.CheckoutLineDiscounts
}

func (r *promotionRuleR) GetOrderDiscounts() OrderDiscountSlice {
	if r == nil {
		return nil
	}
	return r.OrderDiscounts
}

func (r *promotionRuleR) GetOrderLineDiscounts() OrderLineDiscountSlice {
	if r == nil {
		return nil
	}
	return r.OrderLineDiscounts
}

func (r *promotionRuleR) GetPromotionRuleChannels() PromotionRuleChannelSlice {
	if r == nil {
		return nil
	}
	return r.PromotionRuleChannels
}

func (r *promotionRuleR) GetPromotionRuleGifts() PromotionRuleGiftSlice {
	if r == nil {
		return nil
	}
	return r.PromotionRuleGifts
}

func (r *promotionRuleR) GetPromotionRuleProductVariants() PromotionRuleProductVariantSlice {
	if r == nil {
		return nil
	}
	return r.PromotionRuleProductVariants
}

func (r *promotionRuleR) GetVariantChannelListingPromotionRules() VariantChannelListingPromotionRuleSlice {
	if r == nil {
		return nil
	}
	return r.VariantChannelListingPromotionRules
}

// promotionRuleL is where Load methods for each relationship are stored.
type promotionRuleL struct{}

var (
	promotionRuleAllColumns            = []string{"id", "name", "description", "promotion_id", "catalogue_predicate", "order_predicate", "reward_value_type", "reward_value", "reward_type", "variants_dirty"}
	promotionRuleColumnsWithoutDefault = []string{"id", "name", "promotion_id"}
	promotionRuleColumnsWithDefault    = []string{"description", "catalogue_predicate", "order_predicate", "reward_value_type", "reward_value", "reward_type", "variants_dirty"}
	promotionRulePrimaryKeyColumns     = []string{"id"}
	promotionRuleGeneratedColumns      = []string{}
)

type (
	// PromotionRuleSlice is an alias for a slice of pointers to PromotionRule.
	// This should almost always be used instead of []PromotionRule.
	PromotionRuleSlice []*PromotionRule

	promotionRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	promotionRuleType                 = reflect.TypeOf(&PromotionRule{})
	promotionRuleMapping              = queries.MakeStructMapping(promotionRuleType)
	promotionRulePrimaryKeyMapping, _ = queries.BindMapping(promotionRuleType, promotionRuleMapping, promotionRulePrimaryKeyColumns)
	promotionRuleInsertCacheMut       sync.RWMutex
	promotionRuleInsertCache          = make(map[string]insertCache)
	promotionRuleUpdateCacheMut       sync.RWMutex
	promotionRuleUpdateCache          = make(map[string]updateCache)
	promotionRuleUpsertCacheMut       sync.RWMutex
	promotionRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single promotionRule record from the query.
func (q promotionRuleQuery) One(exec boil.Executor) (*PromotionRule, error) {
	o := &PromotionRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for promotion_rules")
	}

	return o, nil
}

// All returns all PromotionRule records from the query.
func (q promotionRuleQuery) All(exec boil.Executor) (PromotionRuleSlice, error) {
	var o []*PromotionRule

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to PromotionRule slice")
	}

	return o, nil
}

// Count returns the count of all PromotionRule records in the query.
func (q promotionRuleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count promotion_rules rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q promotionRuleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if promotion_rules exists")
	}

	return count > 0, nil
}

// Promotion pointed to by the foreign key.
func (o *PromotionRule) Promotion(mods ...qm.QueryMod) promotionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PromotionID),
	}

	queryMods = append(queryMods, mods...)

	return Promotions(queryMods...)
}

// CheckoutDiscounts retrieves all the checkout_discount's CheckoutDiscounts with an executor.
func (o *PromotionRule) CheckoutDiscounts(mods ...qm.QueryMod) checkoutDiscountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkout_discounts\".\"promotion_rule_id\"=?", o.ID),
	)

	return CheckoutDiscounts(queryMods...)
}

// CheckoutLineDiscounts retrieves all the checkout_line_discount's CheckoutLineDiscounts with an executor.
func (o *PromotionRule) CheckoutLineDiscounts(mods ...qm.QueryMod) checkoutLineDiscountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkout_line_discounts\".\"promotion_rule_id\"=?", o.ID),
	)

	return CheckoutLineDiscounts(queryMods...)
}

// OrderDiscounts retrieves all the order_discount's OrderDiscounts with an executor.
func (o *PromotionRule) OrderDiscounts(mods ...qm.QueryMod) orderDiscountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_discounts\".\"promotion_rule_id\"=?", o.ID),
	)

	return OrderDiscounts(queryMods...)
}

// OrderLineDiscounts retrieves all the order_line_discount's OrderLineDiscounts with an executor.
func (o *PromotionRule) OrderLineDiscounts(mods ...qm.QueryMod) orderLineDiscountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_line_discounts\".\"promotion_rule_id\"=?", o.ID),
	)

	return OrderLineDiscounts(queryMods...)
}

// PromotionRuleChannels retrieves all the promotion_rule_channel's PromotionRuleChannels with an executor.
func (o *PromotionRule) PromotionRuleChannels(mods ...qm.QueryMod) promotionRuleChannelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"promotion_rule_channels\".\"promotion_rule_id\"=?", o.ID),
	)

	return PromotionRuleChannels(queryMods...)
}

// PromotionRuleGifts retrieves all the promotion_rule_gift's PromotionRuleGifts with an executor.
func (o *PromotionRule) PromotionRuleGifts(mods ...qm.QueryMod) promotionRuleGiftQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"promotion_rule_gifts\".\"promotion_rule_id\"=?", o.ID),
	)

	return PromotionRuleGifts(queryMods...)
}

// PromotionRuleProductVariants retrieves all the promotion_rule_product_variant's PromotionRuleProductVariants with an executor.
func (o *PromotionRule) PromotionRuleProductVariants(mods ...qm.QueryMod) promotionRuleProductVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"promotion_rule_product_variants\".\"promotion_rule_id\"=?", o.ID),
	)

	return PromotionRuleProductVariants(queryMods...)
}

// VariantChannelListingPromotionRules retrieves all the variant_channel_listing_promotion_rule's VariantChannelListingPromotionRules with an executor.
func (o *PromotionRule) VariantChannelListingPromotionRules(mods ...qm.QueryMod) variantChannelListingPromotionRuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"variant_channel_listing_promotion_rules\".\"promotion_rule_id\"=?", o.ID),
	)

	return VariantChannelListingPromotionRules(queryMods...)
}

// LoadPromotion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (promotionRuleL) LoadPromotion(e boil.Executor, singular bool, maybePromotionRule interface{}, mods queries.Applicator) error {
	var slice []*PromotionRule
	var object *PromotionRule

	if singular {
		var ok bool
		object, ok = maybePromotionRule.(*PromotionRule)
		if !ok {
			object = new(PromotionRule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRule))
			}
		}
	} else {
		s, ok := maybePromotionRule.(*[]*PromotionRule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleR{}
		}
		args[object.PromotionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleR{}
			}

			args[obj.PromotionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`promotions`),
		qm.WhereIn(`promotions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Promotion")
	}

	var resultSlice []*Promotion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Promotion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for promotions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for promotions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Promotion = foreign
		if foreign.R == nil {
			foreign.R = &promotionR{}
		}
		foreign.R.PromotionRules = append(foreign.R.PromotionRules, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PromotionID == foreign.ID {
				local.R.Promotion = foreign
				if foreign.R == nil {
					foreign.R = &promotionR{}
				}
				foreign.R.PromotionRules = append(foreign.R.PromotionRules, local)
				break
			}
		}
	}

	return nil
}

// LoadCheckoutDiscounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (promotionRuleL) LoadCheckoutDiscounts(e boil.Executor, singular bool, maybePromotionRule interface{}, mods queries.Applicator) error {
	var slice []*PromotionRule
	var object *PromotionRule

	if singular {
		var ok bool
		object, ok = maybePromotionRule.(*PromotionRule)
		if !ok {
			object = new(PromotionRule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRule))
			}
		}
	} else {
		s, ok := maybePromotionRule.(*[]*PromotionRule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`checkout_discounts`),
		qm.WhereIn(`checkout_discounts.promotion_rule_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkout_discounts")
	}

	var resultSlice []*CheckoutDiscount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkout_discounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkout_discounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkout_discounts")
	}

	if singular {
		object.R.CheckoutDiscounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutDiscountR{}
			}
			foreign.R.PromotionRule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PromotionRuleID) {
				local.R.CheckoutDiscounts = append(local.R.CheckoutDiscounts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutDiscountR{}
				}
				foreign.R.PromotionRule = local
				break
			}
		}
	}

	return nil
}

// LoadCheckoutLineDiscounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (promotionRuleL) LoadCheckoutLineDiscounts(e boil.Executor, singular bool, maybePromotionRule interface{}, mods queries.Applicator) error {
	var slice []*PromotionRule
	var object *PromotionRule

	if singular {
		var ok bool
		object, ok = maybePromotionRule.(*PromotionRule)
		if !ok {
			object = new(PromotionRule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRule))
			}
		}
	} else {
		s, ok := maybePromotionRule.(*[]*PromotionRule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`checkout_line_discounts`),
		qm.WhereIn(`checkout_line_discounts.promotion_rule_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkout_line_discounts")
	}

	var resultSlice []*CheckoutLineDiscount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkout_line_discounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkout_line_discounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkout_line_discounts")
	}

	if singular {
		object.R.CheckoutLineDiscounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutLineDiscountR{}
			}
			foreign.R.PromotionRule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PromotionRuleID) {
				local.R.CheckoutLineDiscounts = append(local.R.CheckoutLineDiscounts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutLineDiscountR{}
				}
				foreign.R.PromotionRule = local
				break
			}
		}
	}

	return nil
}

// LoadOrderDiscounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (promotionRuleL) LoadOrderDiscounts(e boil.Executor, singular bool, maybePromotionRule interface{}, mods queries.Applicator) error {
	var slice []*PromotionRule
	var object *PromotionRule

	if singular {
		var ok bool
		object, ok = maybePromotionRule.(*PromotionRule)
		if !ok {
			object = new(PromotionRule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRule))
			}
		}
	} else {
		s, ok := maybePromotionRule.(*[]*PromotionRule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_discounts`),
		qm.WhereIn(`order_discounts.promotion_rule_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_discounts")
	}

	var resultSlice []*OrderDiscount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_discounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_discounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_discounts")
	}

	if singular {
		object.R.OrderDiscounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderDiscountR{}
			}
			foreign.R.PromotionRule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PromotionRuleID) {
				local.R.OrderDiscounts = append(local.R.OrderDiscounts, foreign)
				if foreign.R == nil {
					foreign.R = &orderDiscountR{}
				}
				foreign.R.PromotionRule = local
				break
			}
		}
	}

	return nil
}

// LoadOrderLineDiscounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (promotionRuleL) LoadOrderLineDiscounts(e boil.Executor, singular bool, maybePromotionRule interface{}, mods queries.Applicator) error {
	var slice []*PromotionRule
	var object *PromotionRule

	if singular {
		var ok bool
		object, ok = maybePromotionRule.(*PromotionRule)
		if !ok {
			object = new(PromotionRule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRule))
			}
		}
	} else {
		s, ok := maybePromotionRule.(*[]*PromotionRule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_line_discounts`),
		qm.WhereIn(`order_line_discounts.promotion_rule_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_line_discounts")
	}

	var resultSlice []*OrderLineDiscount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_line_discounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_line_discounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_line_discounts")
	}

	if singular {
		object.R.OrderLineDiscounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderLineDiscountR{}
			}
			foreign.R.PromotionRule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PromotionRuleID) {
				local.R.OrderLineDiscounts = append(local.R.OrderLineDiscounts, foreign)
				if foreign.R == nil {
					foreign.R = &orderLineDiscountR{}
				}
				foreign.R.PromotionRule = local
				break
			}
		}
	}

	return nil
}

// LoadPromotionRuleChannels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (promotionRuleL) LoadPromotionRuleChannels(e boil.Executor, singular bool, maybePromotionRule interface{}, mods queries.Applicator) error {
	var slice []*PromotionRule
	var object *PromotionRule

	if singular {
		var ok bool
		object, ok = maybePromotionRule.(*PromotionRule)
		if !ok {
			object = new(PromotionRule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRule))
			}
		}
	} else {
		s, ok := maybePromotionRule.(*[]*PromotionRule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`promotion_rule_channels`),
		qm.WhereIn(`promotion_rule_channels.promotion_rule_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load promotion_rule_channels")
	}

	var resultSlice []*PromotionRuleChannel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice promotion_rule_channels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on promotion_rule_channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for promotion_rule_channels")
	}

	if singular {
		object.R.PromotionRuleChannels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &promotionRuleChannelR{}
			}
			foreign.R.PromotionRule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PromotionRuleID {
				local.R.PromotionRuleChannels = append(local.R.PromotionRuleChannels, foreign)
				if foreign.R == nil {
					foreign.R = &promotionRuleChannelR{}
				}
				foreign.R.PromotionRule = local
				break
			}
		}
	}

	return nil
}

// LoadPromotionRuleGifts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (promotionRuleL) LoadPromotionRuleGifts(e boil.Executor, singular bool, maybePromotionRule interface{}, mods queries.Applicator) error {
	var slice []*PromotionRule
	var object *PromotionRule

	if singular {
		var ok bool
		object, ok = maybePromotionRule.(*PromotionRule)
		if !ok {
			object = new(PromotionRule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRule))
			}
		}
	} else {
		s, ok := maybePromotionRule.(*[]*PromotionRule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`promotion_rule_gifts`),
		qm.WhereIn(`promotion_rule_gifts.promotion_rule_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load promotion_rule_gifts")
	}

	var resultSlice []*PromotionRuleGift
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice promotion_rule_gifts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on promotion_rule_gifts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for promotion_rule_gifts")
	}

	if singular {
		object.R.PromotionRuleGifts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &promotionRuleGiftR{}
			}
			foreign.R.PromotionRule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PromotionRuleID {
				local.R.PromotionRuleGifts = append(local.R.PromotionRuleGifts, foreign)
				if foreign.R == nil {
					foreign.R = &promotionRuleGiftR{}
				}
				foreign.R.PromotionRule = local
				break
			}
		}
	}

	return nil
}

// LoadPromotionRuleProductVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (promotionRuleL) LoadPromotionRuleProductVariants(e boil.Executor, singular bool, maybePromotionRule interface{}, mods queries.Applicator) error {
	var slice []*PromotionRule
	var object *PromotionRule

	if singular {
		var ok bool
		object, ok = maybePromotionRule.(*PromotionRule)
		if !ok {
			object = new(PromotionRule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRule))
			}
		}
	} else {
		s, ok := maybePromotionRule.(*[]*PromotionRule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`promotion_rule_product_variants`),
		qm.WhereIn(`promotion_rule_product_variants.promotion_rule_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load promotion_rule_product_variants")
	}

	var resultSlice []*PromotionRuleProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice promotion_rule_product_variants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on promotion_rule_product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for promotion_rule_product_variants")
	}

	if singular {
		object.R.PromotionRuleProductVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &promotionRuleProductVariantR{}
			}
			foreign.R.PromotionRule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PromotionRuleID {
				local.R.PromotionRuleProductVariants = append(local.R.PromotionRuleProductVariants, foreign)
				if foreign.R == nil {
					foreign.R = &promotionRuleProductVariantR{}
				}
				foreign.R.PromotionRule = local
				break
			}
		}
	}

	return nil
}

// LoadVariantChannelListingPromotionRules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (promotionRuleL) LoadVariantChannelListingPromotionRules(e boil.Executor, singular bool, maybePromotionRule interface{}, mods queries.Applicator) error {
	var slice []*PromotionRule
	var object *PromotionRule

	if singular {
		var ok bool
		object, ok = maybePromotionRule.(*PromotionRule)
		if !ok {
			object = new(PromotionRule)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRule))
			}
		}
	} else {
		s, ok := maybePromotionRule.(*[]*PromotionRule)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRule)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRule))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`variant_channel_listing_promotion_rules`),
		qm.WhereIn(`variant_channel_listing_promotion_rules.promotion_rule_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load variant_channel_listing_promotion_rules")
	}

	var resultSlice []*VariantChannelListingPromotionRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice variant_channel_listing_promotion_rules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on variant_channel_listing_promotion_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for variant_channel_listing_promotion_rules")
	}

	if singular {
		object.R.VariantChannelListingPromotionRules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &variantChannelListingPromotionRuleR{}
			}
			foreign.R.PromotionRule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PromotionRuleID {
				local.R.VariantChannelListingPromotionRules = append(local.R.VariantChannelListingPromotionRules, foreign)
				if foreign.R == nil {
					foreign.R = &variantChannelListingPromotionRuleR{}
				}
				foreign.R.PromotionRule = local
				break
			}
		}
	}

	return nil
}

// SetPromotion of the promotionRule to the related item.
// Sets o.R.Promotion to related.
// Adds o to related.R.PromotionRules.
func (o *PromotionRule) SetPromotion(exec boil.Executor, insert bool, related *Promotion) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"promotion_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_id"}),
		strmangle.WhereClause("\"", "\"", 2, promotionRulePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PromotionID = related.ID
	if o.R == nil {
		o.R = &promotionRuleR{
			Promotion: related,
		}
	} else {
		o.R.Promotion = related
	}

	if related.R == nil {
		related.R = &promotionR{
			PromotionRules: PromotionRuleSlice{o},
		}
	} else {
		related.R.PromotionRules = append(related.R.PromotionRules, o)
	}

	return nil
}

// AddCheckoutDiscounts adds the given related objects to the existing relationships
// of the promotion_rule, optionally inserting them as new records.
// Appends related to o.R.CheckoutDiscounts.
// Sets related.R.PromotionRule appropriately.
func (o *PromotionRule) AddCheckoutDiscounts(exec boil.Executor, insert bool, related ...*CheckoutDiscount) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PromotionRuleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkout_discounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutDiscountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PromotionRuleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &promotionRuleR{
			CheckoutDiscounts: related,
		}
	} else {
		o.R.CheckoutDiscounts = append(o.R.CheckoutDiscounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutDiscountR{
				PromotionRule: o,
			}
		} else {
			rel.R.PromotionRule = o
		}
	}
	return nil
}

// SetCheckoutDiscounts removes all previously related items of the
// promotion_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PromotionRule's CheckoutDiscounts accordingly.
// Replaces o.R.CheckoutDiscounts with related.
// Sets related.R.PromotionRule's CheckoutDiscounts accordingly.
func (o *PromotionRule) SetCheckoutDiscounts(exec boil.Executor, insert bool, related ...*CheckoutDiscount) error {
	query := "update \"checkout_discounts\" set \"promotion_rule_id\" = null where \"promotion_rule_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CheckoutDiscounts {
			queries.SetScanner(&rel.PromotionRuleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PromotionRule = nil
		}
		o.R.CheckoutDiscounts = nil
	}

	return o.AddCheckoutDiscounts(exec, insert, related...)
}

// RemoveCheckoutDiscounts relationships from objects passed in.
// Removes related items from R.CheckoutDiscounts (uses pointer comparison, removal does not keep order)
// Sets related.R.PromotionRule.
func (o *PromotionRule) RemoveCheckoutDiscounts(exec boil.Executor, related ...*CheckoutDiscount) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PromotionRuleID, nil)
		if rel.R != nil {
			rel.R.PromotionRule = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("promotion_rule_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CheckoutDiscounts {
			if rel != ri {
				continue
			}

			ln := len(o.R.CheckoutDiscounts)
			if ln > 1 && i < ln-1 {
				o.R.CheckoutDiscounts[i] = o.R.CheckoutDiscounts[ln-1]
			}
			o.R.CheckoutDiscounts = o.R.CheckoutDiscounts[:ln-1]
			break
		}
	}

	return nil
}

// AddCheckoutLineDiscounts adds the given related objects to the existing relationships
// of the promotion_rule, optionally inserting them as new records.
// Appends related to o.R.CheckoutLineDiscounts.
// Sets related.R.PromotionRule appropriately.
func (o *PromotionRule) AddCheckoutLineDiscounts(exec boil.Executor, insert bool, related ...*CheckoutLineDiscount) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PromotionRuleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkout_line_discounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutLineDiscountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PromotionRuleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &promotionRuleR{
			CheckoutLineDiscounts: related,
		}
	} else {
		o.R.CheckoutLineDiscounts = append(o.R.CheckoutLineDiscounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutLineDiscountR{
				PromotionRule: o,
			}
		} else {
			rel.R.PromotionRule = o
		}
	}
	return nil
}

// SetCheckoutLineDiscounts removes all previously related items of the
// promotion_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PromotionRule's CheckoutLineDiscounts accordingly.
// Replaces o.R.CheckoutLineDiscounts with related.
// Sets related.R.PromotionRule's CheckoutLineDiscounts accordingly.
func (o *PromotionRule) SetCheckoutLineDiscounts(exec boil.Executor, insert bool, related ...*CheckoutLineDiscount) error {
	query := "update \"checkout_line_discounts\" set \"promotion_rule_id\" = null where \"promotion_rule_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CheckoutLineDiscounts {
			queries.SetScanner(&rel.PromotionRuleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PromotionRule = nil
		}
		o.R.CheckoutLineDiscounts = nil
	}

	return o.AddCheckoutLineDiscounts(exec, insert, related...)
}

// RemoveCheckoutLineDiscounts relationships from objects passed in.
// Removes related items from R.CheckoutLineDiscounts (uses pointer comparison, removal does not keep order)
// Sets related.R.PromotionRule.
func (o *PromotionRule) RemoveCheckoutLineDiscounts(exec boil.Executor, related ...*CheckoutLineDiscount) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PromotionRuleID, nil)
		if rel.R != nil {
			rel.R.PromotionRule = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("promotion_rule_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CheckoutLineDiscounts {
			if rel != ri {
				continue
			}

			ln := len(o.R.CheckoutLineDiscounts)
			if ln > 1 && i < ln-1 {
				o.R.CheckoutLineDiscounts[i] = o.R.CheckoutLineDiscounts[ln-1]
			}
			o.R.CheckoutLineDiscounts = o.R.CheckoutLineDiscounts[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderDiscounts adds the given related objects to the existing relationships
// of the promotion_rule, optionally inserting them as new records.
// Appends related to o.R.OrderDiscounts.
// Sets related.R.PromotionRule appropriately.
func (o *PromotionRule) AddOrderDiscounts(exec boil.Executor, insert bool, related ...*OrderDiscount) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PromotionRuleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_discounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderDiscountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PromotionRuleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &promotionRuleR{
			OrderDiscounts: related,
		}
	} else {
		o.R.OrderDiscounts = append(o.R.OrderDiscounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderDiscountR{
				PromotionRule: o,
			}
		} else {
			rel.R.PromotionRule = o
		}
	}
	return nil
}

// SetOrderDiscounts removes all previously related items of the
// promotion_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PromotionRule's OrderDiscounts accordingly.
// Replaces o.R.OrderDiscounts with related.
// Sets related.R.PromotionRule's OrderDiscounts accordingly.
func (o *PromotionRule) SetOrderDiscounts(exec boil.Executor, insert bool, related ...*OrderDiscount) error {
	query := "update \"order_discounts\" set \"promotion_rule_id\" = null where \"promotion_rule_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderDiscounts {
			queries.SetScanner(&rel.PromotionRuleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PromotionRule = nil
		}
		o.R.OrderDiscounts = nil
	}

	return o.AddOrderDiscounts(exec, insert, related...)
}

// RemoveOrderDiscounts relationships from objects passed in.
// Removes related items from R.OrderDiscounts (uses pointer comparison, removal does not keep order)
// Sets related.R.PromotionRule.
func (o *PromotionRule) RemoveOrderDiscounts(exec boil.Executor, related ...*OrderDiscount) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PromotionRuleID, nil)
		if rel.R != nil {
			rel.R.PromotionRule = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("promotion_rule_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderDiscounts {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderDiscounts)
			if ln > 1 && i < ln-1 {
				o.R.OrderDiscounts[i] = o.R.OrderDiscounts[ln-1]
			}
			o.R.OrderDiscounts = o.R.OrderDiscounts[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderLineDiscounts adds the given related objects to the existing relationships
// of the promotion_rule, optionally inserting them as new records.
// Appends related to o.R.OrderLineDiscounts.
// Sets related.R.PromotionRule appropriately.
func (o *PromotionRule) AddOrderLineDiscounts(exec boil.Executor, insert bool, related ...*OrderLineDiscount) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PromotionRuleID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_line_discounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderLineDiscountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PromotionRuleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &promotionRuleR{
			OrderLineDiscounts: related,
		}
	} else {
		o.R.OrderLineDiscounts = append(o.R.OrderLineDiscounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderLineDiscountR{
				PromotionRule: o,
			}
		} else {
			rel.R.PromotionRule = o
		}
	}
	return nil
}

// SetOrderLineDiscounts removes all previously related items of the
// promotion_rule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PromotionRule's OrderLineDiscounts accordingly.
// Replaces o.R.OrderLineDiscounts with related.
// Sets related.R.PromotionRule's OrderLineDiscounts accordingly.
func (o *PromotionRule) SetOrderLineDiscounts(exec boil.Executor, insert bool, related ...*OrderLineDiscount) error {
	query := "update \"order_line_discounts\" set \"promotion_rule_id\" = null where \"promotion_rule_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderLineDiscounts {
			queries.SetScanner(&rel.PromotionRuleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PromotionRule = nil
		}
		o.R.OrderLineDiscounts = nil
	}

	return o.AddOrderLineDiscounts(exec, insert, related...)
}

// RemoveOrderLineDiscounts relationships from objects passed in.
// Removes related items from R.OrderLineDiscounts (uses pointer comparison, removal does not keep order)
// Sets related.R.PromotionRule.
func (o *PromotionRule) RemoveOrderLineDiscounts(exec boil.Executor, related ...*OrderLineDiscount) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PromotionRuleID, nil)
		if rel.R != nil {
			rel.R.PromotionRule = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("promotion_rule_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderLineDiscounts {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderLineDiscounts)
			if ln > 1 && i < ln-1 {
				o.R.OrderLineDiscounts[i] = o.R.OrderLineDiscounts[ln-1]
			}
			o.R.OrderLineDiscounts = o.R.OrderLineDiscounts[:ln-1]
			break
		}
	}

	return nil
}

// AddPromotionRuleChannels adds the given related objects to the existing relationships
// of the promotion_rule, optionally inserting them as new records.
// Appends related to o.R.PromotionRuleChannels.
// Sets related.R.PromotionRule appropriately.
func (o *PromotionRule) AddPromotionRuleChannels(exec boil.Executor, insert bool, related ...*PromotionRuleChannel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PromotionRuleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"promotion_rule_channels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, promotionRuleChannelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PromotionRuleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &promotionRuleR{
			PromotionRuleChannels: related,
		}
	} else {
		o.R.PromotionRuleChannels = append(o.R.PromotionRuleChannels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &promotionRuleChannelR{
				PromotionRule: o,
			}
		} else {
			rel.R.PromotionRule = o
		}
	}
	return nil
}

// AddPromotionRuleGifts adds the given related objects to the existing relationships
// of the promotion_rule, optionally inserting them as new records.
// Appends related to o.R.PromotionRuleGifts.
// Sets related.R.PromotionRule appropriately.
func (o *PromotionRule) AddPromotionRuleGifts(exec boil.Executor, insert bool, related ...*PromotionRuleGift) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PromotionRuleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"promotion_rule_gifts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, promotionRuleGiftPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PromotionRuleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &promotionRuleR{
			PromotionRuleGifts: related,
		}
	} else {
		o.R.PromotionRuleGifts = append(o.R.PromotionRuleGifts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &promotionRuleGiftR{
				PromotionRule: o,
			}
		} else {
			rel.R.PromotionRule = o
		}
	}
	return nil
}

// AddPromotionRuleProductVariants adds the given related objects to the existing relationships
// of the promotion_rule, optionally inserting them as new records.
// Appends related to o.R.PromotionRuleProductVariants.
// Sets related.R.PromotionRule appropriately.
func (o *PromotionRule) AddPromotionRuleProductVariants(exec boil.Executor, insert bool, related ...*PromotionRuleProductVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PromotionRuleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"promotion_rule_product_variants\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, promotionRuleProductVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PromotionRuleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &promotionRuleR{
			PromotionRuleProductVariants: related,
		}
	} else {
		o.R.PromotionRuleProductVariants = append(o.R.PromotionRuleProductVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &promotionRuleProductVariantR{
				PromotionRule: o,
			}
		} else {
			rel.R.PromotionRule = o
		}
	}
	return nil
}

// AddVariantChannelListingPromotionRules adds the given related objects to the existing relationships
// of the promotion_rule, optionally inserting them as new records.
// Appends related to o.R.VariantChannelListingPromotionRules.
// Sets related.R.PromotionRule appropriately.
func (o *PromotionRule) AddVariantChannelListingPromotionRules(exec boil.Executor, insert bool, related ...*VariantChannelListingPromotionRule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PromotionRuleID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"variant_channel_listing_promotion_rules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
				strmangle.WhereClause("\"", "\"", 2, variantChannelListingPromotionRulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PromotionRuleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &promotionRuleR{
			VariantChannelListingPromotionRules: related,
		}
	} else {
		o.R.VariantChannelListingPromotionRules = append(o.R.VariantChannelListingPromotionRules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &variantChannelListingPromotionRuleR{
				PromotionRule: o,
			}
		} else {
			rel.R.PromotionRule = o
		}
	}
	return nil
}

// PromotionRules retrieves all the records using an executor.
func PromotionRules(mods ...qm.QueryMod) promotionRuleQuery {
	mods = append(mods, qm.From("\"promotion_rules\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"promotion_rules\".*"})
	}

	return promotionRuleQuery{q}
}

// FindPromotionRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPromotionRule(exec boil.Executor, iD string, selectCols ...string) (*PromotionRule, error) {
	promotionRuleObj := &PromotionRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"promotion_rules\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, promotionRuleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from promotion_rules")
	}

	return promotionRuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PromotionRule) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no promotion_rules provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(promotionRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	promotionRuleInsertCacheMut.RLock()
	cache, cached := promotionRuleInsertCache[key]
	promotionRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			promotionRuleAllColumns,
			promotionRuleColumnsWithDefault,
			promotionRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(promotionRuleType, promotionRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(promotionRuleType, promotionRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"promotion_rules\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"promotion_rules\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into promotion_rules")
	}

	if !cached {
		promotionRuleInsertCacheMut.Lock()
		promotionRuleInsertCache[key] = cache
		promotionRuleInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PromotionRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PromotionRule) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	promotionRuleUpdateCacheMut.RLock()
	cache, cached := promotionRuleUpdateCache[key]
	promotionRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			promotionRuleAllColumns,
			promotionRulePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update promotion_rules, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"promotion_rules\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, promotionRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(promotionRuleType, promotionRuleMapping, append(wl, promotionRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update promotion_rules row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for promotion_rules")
	}

	if !cached {
		promotionRuleUpdateCacheMut.Lock()
		promotionRuleUpdateCache[key] = cache
		promotionRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q promotionRuleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for promotion_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for promotion_rules")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PromotionRuleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"promotion_rules\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, promotionRulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in promotionRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all promotionRule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PromotionRule) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no promotion_rules provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(promotionRuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	promotionRuleUpsertCacheMut.RLock()
	cache, cached := promotionRuleUpsertCache[key]
	promotionRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			promotionRuleAllColumns,
			promotionRuleColumnsWithDefault,
			promotionRuleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			promotionRuleAllColumns,
			promotionRulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert promotion_rules, could not build update column list")
		}

		ret := strmangle.SetComplement(promotionRuleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(promotionRulePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert promotion_rules, could not build conflict column list")
			}

			conflict = make([]string, len(promotionRulePrimaryKeyColumns))
			copy(conflict, promotionRulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"promotion_rules\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(promotionRuleType, promotionRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(promotionRuleType, promotionRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert promotion_rules")
	}

	if !cached {
		promotionRuleUpsertCacheMut.Lock()
		promotionRuleUpsertCache[key] = cache
		promotionRuleUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PromotionRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PromotionRule) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no PromotionRule provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), promotionRulePrimaryKeyMapping)
	sql := "DELETE FROM \"promotion_rules\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from promotion_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for promotion_rules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q promotionRuleQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no promotionRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from promotion_rules")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for promotion_rules")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PromotionRuleSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"promotion_rules\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, promotionRulePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from promotionRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for promotion_rules")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PromotionRule) Reload(exec boil.Executor) error {
	ret, err := FindPromotionRule(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PromotionRuleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PromotionRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"promotion_rules\".* FROM \"promotion_rules\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, promotionRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PromotionRuleSlice")
	}

	*o = slice

	return nil
}

// PromotionRuleExists checks if the PromotionRule row exists.
func PromotionRuleExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"promotion_rules\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if promotion_rules exists")
	}

	return exists, nil
}

// Exists checks if the PromotionRule row exists.
func (o *PromotionRule) Exists(exec boil.Executor) (bool, error) {
	return PromotionRuleExists(exec, o.ID)
}
