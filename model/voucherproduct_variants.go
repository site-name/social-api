// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VoucherproductVariant is an object representing the database table.
type VoucherproductVariant struct {
	ID               string `boil:"id" json:"id" toml:"id" yaml:"id"`
	VoucherID        string `boil:"voucher_id" json:"voucher_id" toml:"voucher_id" yaml:"voucher_id"`
	ProductVariantID string `boil:"product_variant_id" json:"product_variant_id" toml:"product_variant_id" yaml:"product_variant_id"`
	CreatedAt        int64  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *voucherproductVariantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voucherproductVariantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoucherproductVariantColumns = struct {
	ID               string
	VoucherID        string
	ProductVariantID string
	CreatedAt        string
}{
	ID:               "id",
	VoucherID:        "voucher_id",
	ProductVariantID: "product_variant_id",
	CreatedAt:        "created_at",
}

var VoucherproductVariantTableColumns = struct {
	ID               string
	VoucherID        string
	ProductVariantID string
	CreatedAt        string
}{
	ID:               "voucherproduct_variants.id",
	VoucherID:        "voucherproduct_variants.voucher_id",
	ProductVariantID: "voucherproduct_variants.product_variant_id",
	CreatedAt:        "voucherproduct_variants.created_at",
}

// Generated where

var VoucherproductVariantWhere = struct {
	ID               whereHelperstring
	VoucherID        whereHelperstring
	ProductVariantID whereHelperstring
	CreatedAt        whereHelperint64
}{
	ID:               whereHelperstring{field: "\"voucherproduct_variants\".\"id\""},
	VoucherID:        whereHelperstring{field: "\"voucherproduct_variants\".\"voucher_id\""},
	ProductVariantID: whereHelperstring{field: "\"voucherproduct_variants\".\"product_variant_id\""},
	CreatedAt:        whereHelperint64{field: "\"voucherproduct_variants\".\"created_at\""},
}

// VoucherproductVariantRels is where relationship names are stored.
var VoucherproductVariantRels = struct {
}{}

// voucherproductVariantR is where relationships are stored.
type voucherproductVariantR struct {
}

// NewStruct creates a new relationship struct
func (*voucherproductVariantR) NewStruct() *voucherproductVariantR {
	return &voucherproductVariantR{}
}

// voucherproductVariantL is where Load methods for each relationship are stored.
type voucherproductVariantL struct{}

var (
	voucherproductVariantAllColumns            = []string{"id", "voucher_id", "product_variant_id", "created_at"}
	voucherproductVariantColumnsWithoutDefault = []string{"voucher_id", "product_variant_id", "created_at"}
	voucherproductVariantColumnsWithDefault    = []string{"id"}
	voucherproductVariantPrimaryKeyColumns     = []string{"id"}
	voucherproductVariantGeneratedColumns      = []string{}
)

type (
	// VoucherproductVariantSlice is an alias for a slice of pointers to VoucherproductVariant.
	// This should almost always be used instead of []VoucherproductVariant.
	VoucherproductVariantSlice []*VoucherproductVariant

	voucherproductVariantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voucherproductVariantType                 = reflect.TypeOf(&VoucherproductVariant{})
	voucherproductVariantMapping              = queries.MakeStructMapping(voucherproductVariantType)
	voucherproductVariantPrimaryKeyMapping, _ = queries.BindMapping(voucherproductVariantType, voucherproductVariantMapping, voucherproductVariantPrimaryKeyColumns)
	voucherproductVariantInsertCacheMut       sync.RWMutex
	voucherproductVariantInsertCache          = make(map[string]insertCache)
	voucherproductVariantUpdateCacheMut       sync.RWMutex
	voucherproductVariantUpdateCache          = make(map[string]updateCache)
	voucherproductVariantUpsertCacheMut       sync.RWMutex
	voucherproductVariantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single voucherproductVariant record from the query.
func (q voucherproductVariantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VoucherproductVariant, error) {
	o := &VoucherproductVariant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for voucherproduct_variants")
	}

	return o, nil
}

// All returns all VoucherproductVariant records from the query.
func (q voucherproductVariantQuery) All(ctx context.Context, exec boil.ContextExecutor) (VoucherproductVariantSlice, error) {
	var o []*VoucherproductVariant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to VoucherproductVariant slice")
	}

	return o, nil
}

// Count returns the count of all VoucherproductVariant records in the query.
func (q voucherproductVariantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count voucherproduct_variants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voucherproductVariantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if voucherproduct_variants exists")
	}

	return count > 0, nil
}

// VoucherproductVariants retrieves all the records using an executor.
func VoucherproductVariants(mods ...qm.QueryMod) voucherproductVariantQuery {
	mods = append(mods, qm.From("\"voucherproduct_variants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"voucherproduct_variants\".*"})
	}

	return voucherproductVariantQuery{q}
}

// FindVoucherproductVariant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoucherproductVariant(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*VoucherproductVariant, error) {
	voucherproductVariantObj := &VoucherproductVariant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"voucherproduct_variants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, voucherproductVariantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from voucherproduct_variants")
	}

	return voucherproductVariantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VoucherproductVariant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no voucherproduct_variants provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(voucherproductVariantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voucherproductVariantInsertCacheMut.RLock()
	cache, cached := voucherproductVariantInsertCache[key]
	voucherproductVariantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voucherproductVariantAllColumns,
			voucherproductVariantColumnsWithDefault,
			voucherproductVariantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voucherproductVariantType, voucherproductVariantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voucherproductVariantType, voucherproductVariantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"voucherproduct_variants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"voucherproduct_variants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into voucherproduct_variants")
	}

	if !cached {
		voucherproductVariantInsertCacheMut.Lock()
		voucherproductVariantInsertCache[key] = cache
		voucherproductVariantInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the VoucherproductVariant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VoucherproductVariant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	voucherproductVariantUpdateCacheMut.RLock()
	cache, cached := voucherproductVariantUpdateCache[key]
	voucherproductVariantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voucherproductVariantAllColumns,
			voucherproductVariantPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update voucherproduct_variants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"voucherproduct_variants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, voucherproductVariantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voucherproductVariantType, voucherproductVariantMapping, append(wl, voucherproductVariantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update voucherproduct_variants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for voucherproduct_variants")
	}

	if !cached {
		voucherproductVariantUpdateCacheMut.Lock()
		voucherproductVariantUpdateCache[key] = cache
		voucherproductVariantUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q voucherproductVariantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for voucherproduct_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for voucherproduct_variants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoucherproductVariantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherproductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"voucherproduct_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, voucherproductVariantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in voucherproductVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all voucherproductVariant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VoucherproductVariant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no voucherproduct_variants provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherproductVariantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voucherproductVariantUpsertCacheMut.RLock()
	cache, cached := voucherproductVariantUpsertCache[key]
	voucherproductVariantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			voucherproductVariantAllColumns,
			voucherproductVariantColumnsWithDefault,
			voucherproductVariantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voucherproductVariantAllColumns,
			voucherproductVariantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert voucherproduct_variants, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(voucherproductVariantPrimaryKeyColumns))
			copy(conflict, voucherproductVariantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"voucherproduct_variants\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(voucherproductVariantType, voucherproductVariantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voucherproductVariantType, voucherproductVariantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert voucherproduct_variants")
	}

	if !cached {
		voucherproductVariantUpsertCacheMut.Lock()
		voucherproductVariantUpsertCache[key] = cache
		voucherproductVariantUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single VoucherproductVariant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VoucherproductVariant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no VoucherproductVariant provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voucherproductVariantPrimaryKeyMapping)
	sql := "DELETE FROM \"voucherproduct_variants\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from voucherproduct_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for voucherproduct_variants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voucherproductVariantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no voucherproductVariantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from voucherproduct_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for voucherproduct_variants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoucherproductVariantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherproductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"voucherproduct_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherproductVariantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from voucherproductVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for voucherproduct_variants")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VoucherproductVariant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVoucherproductVariant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoucherproductVariantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoucherproductVariantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherproductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"voucherproduct_variants\".* FROM \"voucherproduct_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherproductVariantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in VoucherproductVariantSlice")
	}

	*o = slice

	return nil
}

// VoucherproductVariantExists checks if the VoucherproductVariant row exists.
func VoucherproductVariantExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"voucherproduct_variants\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if voucherproduct_variants exists")
	}

	return exists, nil
}

// Exists checks if the VoucherproductVariant row exists.
func (o *VoucherproductVariant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VoucherproductVariantExists(ctx, exec, o.ID)
}
