// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TransactionItem is an object representing the database table.
type TransactionItem struct {
	Token                 string                 `boil:"token" json:"token" toml:"token" yaml:"token"`
	UseOldID              bool                   `boil:"use_old_id" json:"use_old_id" toml:"use_old_id" yaml:"use_old_id"`
	CreatedAt             int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedAt            int64                  `boil:"modified_at" json:"modified_at" toml:"modified_at" yaml:"modified_at"`
	IdempotencyKey        model_types.NullString `boil:"idempotency_key" json:"idempotency_key,omitempty" toml:"idempotency_key" yaml:"idempotency_key,omitempty"`
	Name                  model_types.NullString `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Message               model_types.NullString `boil:"message" json:"message,omitempty" toml:"message" yaml:"message,omitempty"`
	PSPReference          model_types.NullString `boil:"psp_reference" json:"psp_reference,omitempty" toml:"psp_reference" yaml:"psp_reference,omitempty"`
	AvailableActions      model_types.NullString `boil:"available_actions" json:"available_actions,omitempty" toml:"available_actions" yaml:"available_actions,omitempty"`
	Currency              Currency               `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	ChargedValue          decimal.Decimal        `boil:"charged_value" json:"charged_value" toml:"charged_value" yaml:"charged_value"`
	AuthorizedValue       decimal.Decimal        `boil:"authorized_value" json:"authorized_value" toml:"authorized_value" yaml:"authorized_value"`
	RefundedValue         decimal.Decimal        `boil:"refunded_value" json:"refunded_value" toml:"refunded_value" yaml:"refunded_value"`
	CanceledValue         decimal.Decimal        `boil:"canceled_value" json:"canceled_value" toml:"canceled_value" yaml:"canceled_value"`
	RefundPendingValue    decimal.Decimal        `boil:"refund_pending_value" json:"refund_pending_value" toml:"refund_pending_value" yaml:"refund_pending_value"`
	ChargePendingValue    decimal.Decimal        `boil:"charge_pending_value" json:"charge_pending_value" toml:"charge_pending_value" yaml:"charge_pending_value"`
	AuthorizePendingValue decimal.Decimal        `boil:"authorize_pending_value" json:"authorize_pending_value" toml:"authorize_pending_value" yaml:"authorize_pending_value"`
	CancelPendingValue    decimal.Decimal        `boil:"cancel_pending_value" json:"cancel_pending_value" toml:"cancel_pending_value" yaml:"cancel_pending_value"`
	ExternalURL           model_types.NullString `boil:"external_url" json:"external_url,omitempty" toml:"external_url" yaml:"external_url,omitempty"`
	CheckoutID            model_types.NullString `boil:"checkout_id" json:"checkout_id,omitempty" toml:"checkout_id" yaml:"checkout_id,omitempty"`
	OrderID               model_types.NullString `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	UserID                model_types.NullString `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	AppID                 model_types.NullString `boil:"app_id" json:"app_id,omitempty" toml:"app_id" yaml:"app_id,omitempty"`
	AppIdentifier         model_types.NullString `boil:"app_identifier" json:"app_identifier,omitempty" toml:"app_identifier" yaml:"app_identifier,omitempty"`
	LastRefundSuccess     model_types.NullBool   `boil:"last_refund_success" json:"last_refund_success,omitempty" toml:"last_refund_success" yaml:"last_refund_success,omitempty"`
	Metadata              model_types.JSONString `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata       model_types.JSONString `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *transactionItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionItemColumns = struct {
	Token                 string
	UseOldID              string
	CreatedAt             string
	ModifiedAt            string
	IdempotencyKey        string
	Name                  string
	Message               string
	PSPReference          string
	AvailableActions      string
	Currency              string
	ChargedValue          string
	AuthorizedValue       string
	RefundedValue         string
	CanceledValue         string
	RefundPendingValue    string
	ChargePendingValue    string
	AuthorizePendingValue string
	CancelPendingValue    string
	ExternalURL           string
	CheckoutID            string
	OrderID               string
	UserID                string
	AppID                 string
	AppIdentifier         string
	LastRefundSuccess     string
	Metadata              string
	PrivateMetadata       string
}{
	Token:                 "token",
	UseOldID:              "use_old_id",
	CreatedAt:             "created_at",
	ModifiedAt:            "modified_at",
	IdempotencyKey:        "idempotency_key",
	Name:                  "name",
	Message:               "message",
	PSPReference:          "psp_reference",
	AvailableActions:      "available_actions",
	Currency:              "currency",
	ChargedValue:          "charged_value",
	AuthorizedValue:       "authorized_value",
	RefundedValue:         "refunded_value",
	CanceledValue:         "canceled_value",
	RefundPendingValue:    "refund_pending_value",
	ChargePendingValue:    "charge_pending_value",
	AuthorizePendingValue: "authorize_pending_value",
	CancelPendingValue:    "cancel_pending_value",
	ExternalURL:           "external_url",
	CheckoutID:            "checkout_id",
	OrderID:               "order_id",
	UserID:                "user_id",
	AppID:                 "app_id",
	AppIdentifier:         "app_identifier",
	LastRefundSuccess:     "last_refund_success",
	Metadata:              "metadata",
	PrivateMetadata:       "private_metadata",
}

var TransactionItemTableColumns = struct {
	Token                 string
	UseOldID              string
	CreatedAt             string
	ModifiedAt            string
	IdempotencyKey        string
	Name                  string
	Message               string
	PSPReference          string
	AvailableActions      string
	Currency              string
	ChargedValue          string
	AuthorizedValue       string
	RefundedValue         string
	CanceledValue         string
	RefundPendingValue    string
	ChargePendingValue    string
	AuthorizePendingValue string
	CancelPendingValue    string
	ExternalURL           string
	CheckoutID            string
	OrderID               string
	UserID                string
	AppID                 string
	AppIdentifier         string
	LastRefundSuccess     string
	Metadata              string
	PrivateMetadata       string
}{
	Token:                 "transaction_items.token",
	UseOldID:              "transaction_items.use_old_id",
	CreatedAt:             "transaction_items.created_at",
	ModifiedAt:            "transaction_items.modified_at",
	IdempotencyKey:        "transaction_items.idempotency_key",
	Name:                  "transaction_items.name",
	Message:               "transaction_items.message",
	PSPReference:          "transaction_items.psp_reference",
	AvailableActions:      "transaction_items.available_actions",
	Currency:              "transaction_items.currency",
	ChargedValue:          "transaction_items.charged_value",
	AuthorizedValue:       "transaction_items.authorized_value",
	RefundedValue:         "transaction_items.refunded_value",
	CanceledValue:         "transaction_items.canceled_value",
	RefundPendingValue:    "transaction_items.refund_pending_value",
	ChargePendingValue:    "transaction_items.charge_pending_value",
	AuthorizePendingValue: "transaction_items.authorize_pending_value",
	CancelPendingValue:    "transaction_items.cancel_pending_value",
	ExternalURL:           "transaction_items.external_url",
	CheckoutID:            "transaction_items.checkout_id",
	OrderID:               "transaction_items.order_id",
	UserID:                "transaction_items.user_id",
	AppID:                 "transaction_items.app_id",
	AppIdentifier:         "transaction_items.app_identifier",
	LastRefundSuccess:     "transaction_items.last_refund_success",
	Metadata:              "transaction_items.metadata",
	PrivateMetadata:       "transaction_items.private_metadata",
}

// Generated where

var TransactionItemWhere = struct {
	Token                 whereHelperstring
	UseOldID              whereHelperbool
	CreatedAt             whereHelperint64
	ModifiedAt            whereHelperint64
	IdempotencyKey        whereHelpermodel_types_NullString
	Name                  whereHelpermodel_types_NullString
	Message               whereHelpermodel_types_NullString
	PSPReference          whereHelpermodel_types_NullString
	AvailableActions      whereHelpermodel_types_NullString
	Currency              whereHelperCurrency
	ChargedValue          whereHelperdecimal_Decimal
	AuthorizedValue       whereHelperdecimal_Decimal
	RefundedValue         whereHelperdecimal_Decimal
	CanceledValue         whereHelperdecimal_Decimal
	RefundPendingValue    whereHelperdecimal_Decimal
	ChargePendingValue    whereHelperdecimal_Decimal
	AuthorizePendingValue whereHelperdecimal_Decimal
	CancelPendingValue    whereHelperdecimal_Decimal
	ExternalURL           whereHelpermodel_types_NullString
	CheckoutID            whereHelpermodel_types_NullString
	OrderID               whereHelpermodel_types_NullString
	UserID                whereHelpermodel_types_NullString
	AppID                 whereHelpermodel_types_NullString
	AppIdentifier         whereHelpermodel_types_NullString
	LastRefundSuccess     whereHelpermodel_types_NullBool
	Metadata              whereHelpermodel_types_JSONString
	PrivateMetadata       whereHelpermodel_types_JSONString
}{
	Token:                 whereHelperstring{field: "\"transaction_items\".\"token\""},
	UseOldID:              whereHelperbool{field: "\"transaction_items\".\"use_old_id\""},
	CreatedAt:             whereHelperint64{field: "\"transaction_items\".\"created_at\""},
	ModifiedAt:            whereHelperint64{field: "\"transaction_items\".\"modified_at\""},
	IdempotencyKey:        whereHelpermodel_types_NullString{field: "\"transaction_items\".\"idempotency_key\""},
	Name:                  whereHelpermodel_types_NullString{field: "\"transaction_items\".\"name\""},
	Message:               whereHelpermodel_types_NullString{field: "\"transaction_items\".\"message\""},
	PSPReference:          whereHelpermodel_types_NullString{field: "\"transaction_items\".\"psp_reference\""},
	AvailableActions:      whereHelpermodel_types_NullString{field: "\"transaction_items\".\"available_actions\""},
	Currency:              whereHelperCurrency{field: "\"transaction_items\".\"currency\""},
	ChargedValue:          whereHelperdecimal_Decimal{field: "\"transaction_items\".\"charged_value\""},
	AuthorizedValue:       whereHelperdecimal_Decimal{field: "\"transaction_items\".\"authorized_value\""},
	RefundedValue:         whereHelperdecimal_Decimal{field: "\"transaction_items\".\"refunded_value\""},
	CanceledValue:         whereHelperdecimal_Decimal{field: "\"transaction_items\".\"canceled_value\""},
	RefundPendingValue:    whereHelperdecimal_Decimal{field: "\"transaction_items\".\"refund_pending_value\""},
	ChargePendingValue:    whereHelperdecimal_Decimal{field: "\"transaction_items\".\"charge_pending_value\""},
	AuthorizePendingValue: whereHelperdecimal_Decimal{field: "\"transaction_items\".\"authorize_pending_value\""},
	CancelPendingValue:    whereHelperdecimal_Decimal{field: "\"transaction_items\".\"cancel_pending_value\""},
	ExternalURL:           whereHelpermodel_types_NullString{field: "\"transaction_items\".\"external_url\""},
	CheckoutID:            whereHelpermodel_types_NullString{field: "\"transaction_items\".\"checkout_id\""},
	OrderID:               whereHelpermodel_types_NullString{field: "\"transaction_items\".\"order_id\""},
	UserID:                whereHelpermodel_types_NullString{field: "\"transaction_items\".\"user_id\""},
	AppID:                 whereHelpermodel_types_NullString{field: "\"transaction_items\".\"app_id\""},
	AppIdentifier:         whereHelpermodel_types_NullString{field: "\"transaction_items\".\"app_identifier\""},
	LastRefundSuccess:     whereHelpermodel_types_NullBool{field: "\"transaction_items\".\"last_refund_success\""},
	Metadata:              whereHelpermodel_types_JSONString{field: "\"transaction_items\".\"metadata\""},
	PrivateMetadata:       whereHelpermodel_types_JSONString{field: "\"transaction_items\".\"private_metadata\""},
}

// TransactionItemRels is where relationship names are stored.
var TransactionItemRels = struct {
	Checkout          string
	Order             string
	User              string
	TransactionEvents string
}{
	Checkout:          "Checkout",
	Order:             "Order",
	User:              "User",
	TransactionEvents: "TransactionEvents",
}

// transactionItemR is where relationships are stored.
type transactionItemR struct {
	Checkout          *Checkout             `boil:"Checkout" json:"Checkout" toml:"Checkout" yaml:"Checkout"`
	Order             *Order                `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	User              *User                 `boil:"User" json:"User" toml:"User" yaml:"User"`
	TransactionEvents TransactionEventSlice `boil:"TransactionEvents" json:"TransactionEvents" toml:"TransactionEvents" yaml:"TransactionEvents"`
}

// NewStruct creates a new relationship struct
func (*transactionItemR) NewStruct() *transactionItemR {
	return &transactionItemR{}
}

func (r *transactionItemR) GetCheckout() *Checkout {
	if r == nil {
		return nil
	}
	return r.Checkout
}

func (r *transactionItemR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *transactionItemR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *transactionItemR) GetTransactionEvents() TransactionEventSlice {
	if r == nil {
		return nil
	}
	return r.TransactionEvents
}

// transactionItemL is where Load methods for each relationship are stored.
type transactionItemL struct{}

var (
	transactionItemAllColumns            = []string{"token", "use_old_id", "created_at", "modified_at", "idempotency_key", "name", "message", "psp_reference", "available_actions", "currency", "charged_value", "authorized_value", "refunded_value", "canceled_value", "refund_pending_value", "charge_pending_value", "authorize_pending_value", "cancel_pending_value", "external_url", "checkout_id", "order_id", "user_id", "app_id", "app_identifier", "last_refund_success", "metadata", "private_metadata"}
	transactionItemColumnsWithoutDefault = []string{"token", "created_at", "modified_at", "currency"}
	transactionItemColumnsWithDefault    = []string{"use_old_id", "idempotency_key", "name", "message", "psp_reference", "available_actions", "charged_value", "authorized_value", "refunded_value", "canceled_value", "refund_pending_value", "charge_pending_value", "authorize_pending_value", "cancel_pending_value", "external_url", "checkout_id", "order_id", "user_id", "app_id", "app_identifier", "last_refund_success", "metadata", "private_metadata"}
	transactionItemPrimaryKeyColumns     = []string{"token"}
	transactionItemGeneratedColumns      = []string{}
)

type (
	// TransactionItemSlice is an alias for a slice of pointers to TransactionItem.
	// This should almost always be used instead of []TransactionItem.
	TransactionItemSlice []*TransactionItem

	transactionItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionItemType                 = reflect.TypeOf(&TransactionItem{})
	transactionItemMapping              = queries.MakeStructMapping(transactionItemType)
	transactionItemPrimaryKeyMapping, _ = queries.BindMapping(transactionItemType, transactionItemMapping, transactionItemPrimaryKeyColumns)
	transactionItemInsertCacheMut       sync.RWMutex
	transactionItemInsertCache          = make(map[string]insertCache)
	transactionItemUpdateCacheMut       sync.RWMutex
	transactionItemUpdateCache          = make(map[string]updateCache)
	transactionItemUpsertCacheMut       sync.RWMutex
	transactionItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single transactionItem record from the query.
func (q transactionItemQuery) One(exec boil.Executor) (*TransactionItem, error) {
	o := &TransactionItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for transaction_items")
	}

	return o, nil
}

// All returns all TransactionItem records from the query.
func (q transactionItemQuery) All(exec boil.Executor) (TransactionItemSlice, error) {
	var o []*TransactionItem

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TransactionItem slice")
	}

	return o, nil
}

// Count returns the count of all TransactionItem records in the query.
func (q transactionItemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count transaction_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transactionItemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if transaction_items exists")
	}

	return count > 0, nil
}

// Checkout pointed to by the foreign key.
func (o *TransactionItem) Checkout(mods ...qm.QueryMod) checkoutQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"token\" = ?", o.CheckoutID),
	}

	queryMods = append(queryMods, mods...)

	return Checkouts(queryMods...)
}

// Order pointed to by the foreign key.
func (o *TransactionItem) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// User pointed to by the foreign key.
func (o *TransactionItem) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// TransactionEvents retrieves all the transaction_event's TransactionEvents with an executor.
func (o *TransactionItem) TransactionEvents(mods ...qm.QueryMod) transactionEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transaction_events\".\"transaction_item_id\"=?", o.Token),
	)

	return TransactionEvents(queryMods...)
}

// LoadCheckout allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionItemL) LoadCheckout(e boil.Executor, singular bool, maybeTransactionItem interface{}, mods queries.Applicator) error {
	var slice []*TransactionItem
	var object *TransactionItem

	if singular {
		var ok bool
		object, ok = maybeTransactionItem.(*TransactionItem)
		if !ok {
			object = new(TransactionItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransactionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransactionItem))
			}
		}
	} else {
		s, ok := maybeTransactionItem.(*[]*TransactionItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransactionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransactionItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionItemR{}
		}
		if !queries.IsNil(object.CheckoutID) {
			args[object.CheckoutID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionItemR{}
			}

			if !queries.IsNil(obj.CheckoutID) {
				args[obj.CheckoutID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.token in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Checkout")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Checkout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Checkout = foreign
		if foreign.R == nil {
			foreign.R = &checkoutR{}
		}
		foreign.R.TransactionItems = append(foreign.R.TransactionItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CheckoutID, foreign.Token) {
				local.R.Checkout = foreign
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.TransactionItems = append(foreign.R.TransactionItems, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionItemL) LoadOrder(e boil.Executor, singular bool, maybeTransactionItem interface{}, mods queries.Applicator) error {
	var slice []*TransactionItem
	var object *TransactionItem

	if singular {
		var ok bool
		object, ok = maybeTransactionItem.(*TransactionItem)
		if !ok {
			object = new(TransactionItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransactionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransactionItem))
			}
		}
	} else {
		s, ok := maybeTransactionItem.(*[]*TransactionItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransactionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransactionItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionItemR{}
		}
		if !queries.IsNil(object.OrderID) {
			args[object.OrderID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionItemR{}
			}

			if !queries.IsNil(obj.OrderID) {
				args[obj.OrderID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.TransactionItems = append(foreign.R.TransactionItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.TransactionItems = append(foreign.R.TransactionItems, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionItemL) LoadUser(e boil.Executor, singular bool, maybeTransactionItem interface{}, mods queries.Applicator) error {
	var slice []*TransactionItem
	var object *TransactionItem

	if singular {
		var ok bool
		object, ok = maybeTransactionItem.(*TransactionItem)
		if !ok {
			object = new(TransactionItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransactionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransactionItem))
			}
		}
	} else {
		s, ok := maybeTransactionItem.(*[]*TransactionItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransactionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransactionItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionItemR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionItemR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.TransactionItems = append(foreign.R.TransactionItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.TransactionItems = append(foreign.R.TransactionItems, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactionEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (transactionItemL) LoadTransactionEvents(e boil.Executor, singular bool, maybeTransactionItem interface{}, mods queries.Applicator) error {
	var slice []*TransactionItem
	var object *TransactionItem

	if singular {
		var ok bool
		object, ok = maybeTransactionItem.(*TransactionItem)
		if !ok {
			object = new(TransactionItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransactionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransactionItem))
			}
		}
	} else {
		s, ok := maybeTransactionItem.(*[]*TransactionItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransactionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransactionItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionItemR{}
		}
		args[object.Token] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionItemR{}
			}
			args[obj.Token] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transaction_events`),
		qm.WhereIn(`transaction_events.transaction_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transaction_events")
	}

	var resultSlice []*TransactionEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transaction_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transaction_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction_events")
	}

	if singular {
		object.R.TransactionEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionEventR{}
			}
			foreign.R.TransactionItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Token, foreign.TransactionItemID) {
				local.R.TransactionEvents = append(local.R.TransactionEvents, foreign)
				if foreign.R == nil {
					foreign.R = &transactionEventR{}
				}
				foreign.R.TransactionItem = local
				break
			}
		}
	}

	return nil
}

// SetCheckout of the transactionItem to the related item.
// Sets o.R.Checkout to related.
// Adds o to related.R.TransactionItems.
func (o *TransactionItem) SetCheckout(exec boil.Executor, insert bool, related *Checkout) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"checkout_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionItemPrimaryKeyColumns),
	)
	values := []interface{}{related.Token, o.Token}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CheckoutID, related.Token)
	if o.R == nil {
		o.R = &transactionItemR{
			Checkout: related,
		}
	} else {
		o.R.Checkout = related
	}

	if related.R == nil {
		related.R = &checkoutR{
			TransactionItems: TransactionItemSlice{o},
		}
	} else {
		related.R.TransactionItems = append(related.R.TransactionItems, o)
	}

	return nil
}

// RemoveCheckout relationship.
// Sets o.R.Checkout to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TransactionItem) RemoveCheckout(exec boil.Executor, related *Checkout) error {
	var err error

	queries.SetScanner(&o.CheckoutID, nil)
	if _, err = o.Update(exec, boil.Whitelist("checkout_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Checkout = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TransactionItems {
		if queries.Equal(o.CheckoutID, ri.CheckoutID) {
			continue
		}

		ln := len(related.R.TransactionItems)
		if ln > 1 && i < ln-1 {
			related.R.TransactionItems[i] = related.R.TransactionItems[ln-1]
		}
		related.R.TransactionItems = related.R.TransactionItems[:ln-1]
		break
	}
	return nil
}

// SetOrder of the transactionItem to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.TransactionItems.
func (o *TransactionItem) SetOrder(exec boil.Executor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &transactionItemR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			TransactionItems: TransactionItemSlice{o},
		}
	} else {
		related.R.TransactionItems = append(related.R.TransactionItems, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TransactionItem) RemoveOrder(exec boil.Executor, related *Order) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Order = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TransactionItems {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.TransactionItems)
		if ln > 1 && i < ln-1 {
			related.R.TransactionItems[i] = related.R.TransactionItems[ln-1]
		}
		related.R.TransactionItems = related.R.TransactionItems[:ln-1]
		break
	}
	return nil
}

// SetUser of the transactionItem to the related item.
// Sets o.R.User to related.
// Adds o to related.R.TransactionItems.
func (o *TransactionItem) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &transactionItemR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			TransactionItems: TransactionItemSlice{o},
		}
	} else {
		related.R.TransactionItems = append(related.R.TransactionItems, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TransactionItem) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TransactionItems {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.TransactionItems)
		if ln > 1 && i < ln-1 {
			related.R.TransactionItems[i] = related.R.TransactionItems[ln-1]
		}
		related.R.TransactionItems = related.R.TransactionItems[:ln-1]
		break
	}
	return nil
}

// AddTransactionEvents adds the given related objects to the existing relationships
// of the transaction_item, optionally inserting them as new records.
// Appends related to o.R.TransactionEvents.
// Sets related.R.TransactionItem appropriately.
func (o *TransactionItem) AddTransactionEvents(exec boil.Executor, insert bool, related ...*TransactionEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TransactionItemID, o.Token)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transaction_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionEventPrimaryKeyColumns),
			)
			values := []interface{}{o.Token, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TransactionItemID, o.Token)
		}
	}

	if o.R == nil {
		o.R = &transactionItemR{
			TransactionEvents: related,
		}
	} else {
		o.R.TransactionEvents = append(o.R.TransactionEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionEventR{
				TransactionItem: o,
			}
		} else {
			rel.R.TransactionItem = o
		}
	}
	return nil
}

// SetTransactionEvents removes all previously related items of the
// transaction_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionItem's TransactionEvents accordingly.
// Replaces o.R.TransactionEvents with related.
// Sets related.R.TransactionItem's TransactionEvents accordingly.
func (o *TransactionItem) SetTransactionEvents(exec boil.Executor, insert bool, related ...*TransactionEvent) error {
	query := "update \"transaction_events\" set \"transaction_item_id\" = null where \"transaction_item_id\" = $1"
	values := []interface{}{o.Token}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TransactionEvents {
			queries.SetScanner(&rel.TransactionItemID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TransactionItem = nil
		}
		o.R.TransactionEvents = nil
	}

	return o.AddTransactionEvents(exec, insert, related...)
}

// RemoveTransactionEvents relationships from objects passed in.
// Removes related items from R.TransactionEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionItem.
func (o *TransactionItem) RemoveTransactionEvents(exec boil.Executor, related ...*TransactionEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TransactionItemID, nil)
		if rel.R != nil {
			rel.R.TransactionItem = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("transaction_item_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TransactionEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.TransactionEvents)
			if ln > 1 && i < ln-1 {
				o.R.TransactionEvents[i] = o.R.TransactionEvents[ln-1]
			}
			o.R.TransactionEvents = o.R.TransactionEvents[:ln-1]
			break
		}
	}

	return nil
}

// TransactionItems retrieves all the records using an executor.
func TransactionItems(mods ...qm.QueryMod) transactionItemQuery {
	mods = append(mods, qm.From("\"transaction_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"transaction_items\".*"})
	}

	return transactionItemQuery{q}
}

// FindTransactionItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionItem(exec boil.Executor, token string, selectCols ...string) (*TransactionItem, error) {
	transactionItemObj := &TransactionItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transaction_items\" where \"token\"=$1", sel,
	)

	q := queries.Raw(query, token)

	err := q.Bind(nil, exec, transactionItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from transaction_items")
	}

	return transactionItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionItem) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no transaction_items provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(transactionItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionItemInsertCacheMut.RLock()
	cache, cached := transactionItemInsertCache[key]
	transactionItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionItemAllColumns,
			transactionItemColumnsWithDefault,
			transactionItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionItemType, transactionItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionItemType, transactionItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transaction_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transaction_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into transaction_items")
	}

	if !cached {
		transactionItemInsertCacheMut.Lock()
		transactionItemInsertCache[key] = cache
		transactionItemInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TransactionItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionItem) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	transactionItemUpdateCacheMut.RLock()
	cache, cached := transactionItemUpdateCache[key]
	transactionItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionItemAllColumns,
			transactionItemPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update transaction_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transaction_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionItemType, transactionItemMapping, append(wl, transactionItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update transaction_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for transaction_items")
	}

	if !cached {
		transactionItemUpdateCacheMut.Lock()
		transactionItemUpdateCache[key] = cache
		transactionItemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q transactionItemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for transaction_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for transaction_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transaction_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in transactionItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all transactionItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionItem) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no transaction_items provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionItemUpsertCacheMut.RLock()
	cache, cached := transactionItemUpsertCache[key]
	transactionItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			transactionItemAllColumns,
			transactionItemColumnsWithDefault,
			transactionItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transactionItemAllColumns,
			transactionItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert transaction_items, could not build update column list")
		}

		ret := strmangle.SetComplement(transactionItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(transactionItemPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert transaction_items, could not build conflict column list")
			}

			conflict = make([]string, len(transactionItemPrimaryKeyColumns))
			copy(conflict, transactionItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transaction_items\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(transactionItemType, transactionItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionItemType, transactionItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert transaction_items")
	}

	if !cached {
		transactionItemUpsertCacheMut.Lock()
		transactionItemUpsertCache[key] = cache
		transactionItemUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TransactionItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionItem) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TransactionItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionItemPrimaryKeyMapping)
	sql := "DELETE FROM \"transaction_items\" WHERE \"token\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from transaction_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for transaction_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transactionItemQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no transactionItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from transaction_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for transaction_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionItemSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transaction_items\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, transactionItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from transactionItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for transaction_items")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionItem) Reload(exec boil.Executor) error {
	ret, err := FindTransactionItem(exec, o.Token)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transaction_items\".* FROM \"transaction_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TransactionItemSlice")
	}

	*o = slice

	return nil
}

// TransactionItemExists checks if the TransactionItem row exists.
func TransactionItemExists(exec boil.Executor, token string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transaction_items\" where \"token\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, token)
	}
	row := exec.QueryRow(sql, token)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if transaction_items exists")
	}

	return exists, nil
}

// Exists checks if the TransactionItem row exists.
func (o *TransactionItem) Exists(exec boil.Executor) (bool, error) {
	return TransactionItemExists(exec, o.Token)
}
