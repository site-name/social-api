// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingZoneChannel is an object representing the database table.
type ShippingZoneChannel struct {
	ID             string `boil:"id" json:"id" toml:"id" yaml:"id"`
	ShippingZoneID string `boil:"shipping_zone_id" json:"shipping_zone_id" toml:"shipping_zone_id" yaml:"shipping_zone_id"`
	ChannelID      string `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`

	R *shippingZoneChannelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingZoneChannelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingZoneChannelColumns = struct {
	ID             string
	ShippingZoneID string
	ChannelID      string
}{
	ID:             "id",
	ShippingZoneID: "shipping_zone_id",
	ChannelID:      "channel_id",
}

var ShippingZoneChannelTableColumns = struct {
	ID             string
	ShippingZoneID string
	ChannelID      string
}{
	ID:             "shipping_zone_channels.id",
	ShippingZoneID: "shipping_zone_channels.shipping_zone_id",
	ChannelID:      "shipping_zone_channels.channel_id",
}

// Generated where

var ShippingZoneChannelWhere = struct {
	ID             whereHelperstring
	ShippingZoneID whereHelperstring
	ChannelID      whereHelperstring
}{
	ID:             whereHelperstring{field: "\"shipping_zone_channels\".\"id\""},
	ShippingZoneID: whereHelperstring{field: "\"shipping_zone_channels\".\"shipping_zone_id\""},
	ChannelID:      whereHelperstring{field: "\"shipping_zone_channels\".\"channel_id\""},
}

// ShippingZoneChannelRels is where relationship names are stored.
var ShippingZoneChannelRels = struct {
	Channel      string
	ShippingZone string
}{
	Channel:      "Channel",
	ShippingZone: "ShippingZone",
}

// shippingZoneChannelR is where relationships are stored.
type shippingZoneChannelR struct {
	Channel      *Channel      `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
	ShippingZone *ShippingZone `boil:"ShippingZone" json:"ShippingZone" toml:"ShippingZone" yaml:"ShippingZone"`
}

// NewStruct creates a new relationship struct
func (*shippingZoneChannelR) NewStruct() *shippingZoneChannelR {
	return &shippingZoneChannelR{}
}

func (r *shippingZoneChannelR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *shippingZoneChannelR) GetShippingZone() *ShippingZone {
	if r == nil {
		return nil
	}
	return r.ShippingZone
}

// shippingZoneChannelL is where Load methods for each relationship are stored.
type shippingZoneChannelL struct{}

var (
	shippingZoneChannelAllColumns            = []string{"id", "shipping_zone_id", "channel_id"}
	shippingZoneChannelColumnsWithoutDefault = []string{"id", "shipping_zone_id", "channel_id"}
	shippingZoneChannelColumnsWithDefault    = []string{}
	shippingZoneChannelPrimaryKeyColumns     = []string{"id"}
	shippingZoneChannelGeneratedColumns      = []string{}
)

type (
	// ShippingZoneChannelSlice is an alias for a slice of pointers to ShippingZoneChannel.
	// This should almost always be used instead of []ShippingZoneChannel.
	ShippingZoneChannelSlice []*ShippingZoneChannel

	shippingZoneChannelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingZoneChannelType                 = reflect.TypeOf(&ShippingZoneChannel{})
	shippingZoneChannelMapping              = queries.MakeStructMapping(shippingZoneChannelType)
	shippingZoneChannelPrimaryKeyMapping, _ = queries.BindMapping(shippingZoneChannelType, shippingZoneChannelMapping, shippingZoneChannelPrimaryKeyColumns)
	shippingZoneChannelInsertCacheMut       sync.RWMutex
	shippingZoneChannelInsertCache          = make(map[string]insertCache)
	shippingZoneChannelUpdateCacheMut       sync.RWMutex
	shippingZoneChannelUpdateCache          = make(map[string]updateCache)
	shippingZoneChannelUpsertCacheMut       sync.RWMutex
	shippingZoneChannelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single shippingZoneChannel record from the query.
func (q shippingZoneChannelQuery) One(exec boil.Executor) (*ShippingZoneChannel, error) {
	o := &ShippingZoneChannel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for shipping_zone_channels")
	}

	return o, nil
}

// All returns all ShippingZoneChannel records from the query.
func (q shippingZoneChannelQuery) All(exec boil.Executor) (ShippingZoneChannelSlice, error) {
	var o []*ShippingZoneChannel

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ShippingZoneChannel slice")
	}

	return o, nil
}

// Count returns the count of all ShippingZoneChannel records in the query.
func (q shippingZoneChannelQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count shipping_zone_channels rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingZoneChannelQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if shipping_zone_channels exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *ShippingZoneChannel) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// ShippingZone pointed to by the foreign key.
func (o *ShippingZoneChannel) ShippingZone(mods ...qm.QueryMod) shippingZoneQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShippingZoneID),
	}

	queryMods = append(queryMods, mods...)

	return ShippingZones(queryMods...)
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shippingZoneChannelL) LoadChannel(e boil.Executor, singular bool, maybeShippingZoneChannel interface{}, mods queries.Applicator) error {
	var slice []*ShippingZoneChannel
	var object *ShippingZoneChannel

	if singular {
		var ok bool
		object, ok = maybeShippingZoneChannel.(*ShippingZoneChannel)
		if !ok {
			object = new(ShippingZoneChannel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingZoneChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingZoneChannel))
			}
		}
	} else {
		s, ok := maybeShippingZoneChannel.(*[]*ShippingZoneChannel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingZoneChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingZoneChannel))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shippingZoneChannelR{}
		}
		args[object.ChannelID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingZoneChannelR{}
			}

			args[obj.ChannelID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.ShippingZoneChannels = append(foreign.R.ShippingZoneChannels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.ShippingZoneChannels = append(foreign.R.ShippingZoneChannels, local)
				break
			}
		}
	}

	return nil
}

// LoadShippingZone allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shippingZoneChannelL) LoadShippingZone(e boil.Executor, singular bool, maybeShippingZoneChannel interface{}, mods queries.Applicator) error {
	var slice []*ShippingZoneChannel
	var object *ShippingZoneChannel

	if singular {
		var ok bool
		object, ok = maybeShippingZoneChannel.(*ShippingZoneChannel)
		if !ok {
			object = new(ShippingZoneChannel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingZoneChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingZoneChannel))
			}
		}
	} else {
		s, ok := maybeShippingZoneChannel.(*[]*ShippingZoneChannel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingZoneChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingZoneChannel))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shippingZoneChannelR{}
		}
		args[object.ShippingZoneID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingZoneChannelR{}
			}

			args[obj.ShippingZoneID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shipping_zones`),
		qm.WhereIn(`shipping_zones.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingZone")
	}

	var resultSlice []*ShippingZone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingZone")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_zones")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_zones")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingZone = foreign
		if foreign.R == nil {
			foreign.R = &shippingZoneR{}
		}
		foreign.R.ShippingZoneChannels = append(foreign.R.ShippingZoneChannels, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShippingZoneID == foreign.ID {
				local.R.ShippingZone = foreign
				if foreign.R == nil {
					foreign.R = &shippingZoneR{}
				}
				foreign.R.ShippingZoneChannels = append(foreign.R.ShippingZoneChannels, local)
				break
			}
		}
	}

	return nil
}

// SetChannel of the shippingZoneChannel to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.ShippingZoneChannels.
func (o *ShippingZoneChannel) SetChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shipping_zone_channels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, shippingZoneChannelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &shippingZoneChannelR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			ShippingZoneChannels: ShippingZoneChannelSlice{o},
		}
	} else {
		related.R.ShippingZoneChannels = append(related.R.ShippingZoneChannels, o)
	}

	return nil
}

// SetShippingZone of the shippingZoneChannel to the related item.
// Sets o.R.ShippingZone to related.
// Adds o to related.R.ShippingZoneChannels.
func (o *ShippingZoneChannel) SetShippingZone(exec boil.Executor, insert bool, related *ShippingZone) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shipping_zone_channels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_zone_id"}),
		strmangle.WhereClause("\"", "\"", 2, shippingZoneChannelPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShippingZoneID = related.ID
	if o.R == nil {
		o.R = &shippingZoneChannelR{
			ShippingZone: related,
		}
	} else {
		o.R.ShippingZone = related
	}

	if related.R == nil {
		related.R = &shippingZoneR{
			ShippingZoneChannels: ShippingZoneChannelSlice{o},
		}
	} else {
		related.R.ShippingZoneChannels = append(related.R.ShippingZoneChannels, o)
	}

	return nil
}

// ShippingZoneChannels retrieves all the records using an executor.
func ShippingZoneChannels(mods ...qm.QueryMod) shippingZoneChannelQuery {
	mods = append(mods, qm.From("\"shipping_zone_channels\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_zone_channels\".*"})
	}

	return shippingZoneChannelQuery{q}
}

// FindShippingZoneChannel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingZoneChannel(exec boil.Executor, iD string, selectCols ...string) (*ShippingZoneChannel, error) {
	shippingZoneChannelObj := &ShippingZoneChannel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_zone_channels\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, shippingZoneChannelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from shipping_zone_channels")
	}

	return shippingZoneChannelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingZoneChannel) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shipping_zone_channels provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(shippingZoneChannelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingZoneChannelInsertCacheMut.RLock()
	cache, cached := shippingZoneChannelInsertCache[key]
	shippingZoneChannelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingZoneChannelAllColumns,
			shippingZoneChannelColumnsWithDefault,
			shippingZoneChannelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingZoneChannelType, shippingZoneChannelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingZoneChannelType, shippingZoneChannelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_zone_channels\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_zone_channels\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into shipping_zone_channels")
	}

	if !cached {
		shippingZoneChannelInsertCacheMut.Lock()
		shippingZoneChannelInsertCache[key] = cache
		shippingZoneChannelInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ShippingZoneChannel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingZoneChannel) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	shippingZoneChannelUpdateCacheMut.RLock()
	cache, cached := shippingZoneChannelUpdateCache[key]
	shippingZoneChannelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingZoneChannelAllColumns,
			shippingZoneChannelPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update shipping_zone_channels, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_zone_channels\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingZoneChannelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingZoneChannelType, shippingZoneChannelMapping, append(wl, shippingZoneChannelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update shipping_zone_channels row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for shipping_zone_channels")
	}

	if !cached {
		shippingZoneChannelUpdateCacheMut.Lock()
		shippingZoneChannelUpdateCache[key] = cache
		shippingZoneChannelUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q shippingZoneChannelQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for shipping_zone_channels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for shipping_zone_channels")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingZoneChannelSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingZoneChannelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_zone_channels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingZoneChannelPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in shippingZoneChannel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all shippingZoneChannel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingZoneChannel) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no shipping_zone_channels provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingZoneChannelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingZoneChannelUpsertCacheMut.RLock()
	cache, cached := shippingZoneChannelUpsertCache[key]
	shippingZoneChannelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shippingZoneChannelAllColumns,
			shippingZoneChannelColumnsWithDefault,
			shippingZoneChannelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingZoneChannelAllColumns,
			shippingZoneChannelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert shipping_zone_channels, could not build update column list")
		}

		ret := strmangle.SetComplement(shippingZoneChannelAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(shippingZoneChannelPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert shipping_zone_channels, could not build conflict column list")
			}

			conflict = make([]string, len(shippingZoneChannelPrimaryKeyColumns))
			copy(conflict, shippingZoneChannelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_zone_channels\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shippingZoneChannelType, shippingZoneChannelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingZoneChannelType, shippingZoneChannelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert shipping_zone_channels")
	}

	if !cached {
		shippingZoneChannelUpsertCacheMut.Lock()
		shippingZoneChannelUpsertCache[key] = cache
		shippingZoneChannelUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ShippingZoneChannel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingZoneChannel) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ShippingZoneChannel provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingZoneChannelPrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_zone_channels\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from shipping_zone_channels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for shipping_zone_channels")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingZoneChannelQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no shippingZoneChannelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shipping_zone_channels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_zone_channels")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingZoneChannelSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingZoneChannelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_zone_channels\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingZoneChannelPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shippingZoneChannel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_zone_channels")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingZoneChannel) Reload(exec boil.Executor) error {
	ret, err := FindShippingZoneChannel(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingZoneChannelSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingZoneChannelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingZoneChannelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_zone_channels\".* FROM \"shipping_zone_channels\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingZoneChannelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ShippingZoneChannelSlice")
	}

	*o = slice

	return nil
}

// ShippingZoneChannelExists checks if the ShippingZoneChannel row exists.
func ShippingZoneChannelExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_zone_channels\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if shipping_zone_channels exists")
	}

	return exists, nil
}

// Exists checks if the ShippingZoneChannel row exists.
func (o *ShippingZoneChannel) Exists(exec boil.Executor) (bool, error) {
	return ShippingZoneChannelExists(exec, o.ID)
}
