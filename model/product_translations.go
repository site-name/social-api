// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductTranslation is an object representing the database table.
type ProductTranslation struct {
	ID             string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageCode   LanguageCode           `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	ProductID      string                 `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	Name           string                 `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description    string                 `boil:"description" json:"description" toml:"description" yaml:"description"`
	SeoTitle       model_types.NullString `boil:"seo_title" json:"seo_title,omitempty" toml:"seo_title" yaml:"seo_title,omitempty"`
	SeoDescription model_types.NullString `boil:"seo_description" json:"seo_description,omitempty" toml:"seo_description" yaml:"seo_description,omitempty"`

	R *productTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductTranslationColumns = struct {
	ID             string
	LanguageCode   string
	ProductID      string
	Name           string
	Description    string
	SeoTitle       string
	SeoDescription string
}{
	ID:             "id",
	LanguageCode:   "language_code",
	ProductID:      "product_id",
	Name:           "name",
	Description:    "description",
	SeoTitle:       "seo_title",
	SeoDescription: "seo_description",
}

var ProductTranslationTableColumns = struct {
	ID             string
	LanguageCode   string
	ProductID      string
	Name           string
	Description    string
	SeoTitle       string
	SeoDescription string
}{
	ID:             "product_translations.id",
	LanguageCode:   "product_translations.language_code",
	ProductID:      "product_translations.product_id",
	Name:           "product_translations.name",
	Description:    "product_translations.description",
	SeoTitle:       "product_translations.seo_title",
	SeoDescription: "product_translations.seo_description",
}

// Generated where

var ProductTranslationWhere = struct {
	ID             whereHelperstring
	LanguageCode   whereHelperLanguageCode
	ProductID      whereHelperstring
	Name           whereHelperstring
	Description    whereHelperstring
	SeoTitle       whereHelpermodel_types_NullString
	SeoDescription whereHelpermodel_types_NullString
}{
	ID:             whereHelperstring{field: "\"product_translations\".\"id\""},
	LanguageCode:   whereHelperLanguageCode{field: "\"product_translations\".\"language_code\""},
	ProductID:      whereHelperstring{field: "\"product_translations\".\"product_id\""},
	Name:           whereHelperstring{field: "\"product_translations\".\"name\""},
	Description:    whereHelperstring{field: "\"product_translations\".\"description\""},
	SeoTitle:       whereHelpermodel_types_NullString{field: "\"product_translations\".\"seo_title\""},
	SeoDescription: whereHelpermodel_types_NullString{field: "\"product_translations\".\"seo_description\""},
}

// ProductTranslationRels is where relationship names are stored.
var ProductTranslationRels = struct {
	Product string
}{
	Product: "Product",
}

// productTranslationR is where relationships are stored.
type productTranslationR struct {
	Product *Product `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*productTranslationR) NewStruct() *productTranslationR {
	return &productTranslationR{}
}

func (r *productTranslationR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

// productTranslationL is where Load methods for each relationship are stored.
type productTranslationL struct{}

var (
	productTranslationAllColumns            = []string{"id", "language_code", "product_id", "name", "description", "seo_title", "seo_description"}
	productTranslationColumnsWithoutDefault = []string{"language_code", "product_id", "name", "description"}
	productTranslationColumnsWithDefault    = []string{"id", "seo_title", "seo_description"}
	productTranslationPrimaryKeyColumns     = []string{"id"}
	productTranslationGeneratedColumns      = []string{}
)

type (
	// ProductTranslationSlice is an alias for a slice of pointers to ProductTranslation.
	// This should almost always be used instead of []ProductTranslation.
	ProductTranslationSlice []*ProductTranslation

	productTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productTranslationType                 = reflect.TypeOf(&ProductTranslation{})
	productTranslationMapping              = queries.MakeStructMapping(productTranslationType)
	productTranslationPrimaryKeyMapping, _ = queries.BindMapping(productTranslationType, productTranslationMapping, productTranslationPrimaryKeyColumns)
	productTranslationInsertCacheMut       sync.RWMutex
	productTranslationInsertCache          = make(map[string]insertCache)
	productTranslationUpdateCacheMut       sync.RWMutex
	productTranslationUpdateCache          = make(map[string]updateCache)
	productTranslationUpsertCacheMut       sync.RWMutex
	productTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single productTranslation record from the query.
func (q productTranslationQuery) One(exec boil.Executor) (*ProductTranslation, error) {
	o := &ProductTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for product_translations")
	}

	return o, nil
}

// All returns all ProductTranslation records from the query.
func (q productTranslationQuery) All(exec boil.Executor) (ProductTranslationSlice, error) {
	var o []*ProductTranslation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ProductTranslation slice")
	}

	return o, nil
}

// Count returns the count of all ProductTranslation records in the query.
func (q productTranslationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count product_translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productTranslationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if product_translations exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *ProductTranslation) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productTranslationL) LoadProduct(e boil.Executor, singular bool, maybeProductTranslation interface{}, mods queries.Applicator) error {
	var slice []*ProductTranslation
	var object *ProductTranslation

	if singular {
		var ok bool
		object, ok = maybeProductTranslation.(*ProductTranslation)
		if !ok {
			object = new(ProductTranslation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductTranslation))
			}
		}
	} else {
		s, ok := maybeProductTranslation.(*[]*ProductTranslation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductTranslation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productTranslationR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productTranslationR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductTranslations = append(foreign.R.ProductTranslations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductTranslations = append(foreign.R.ProductTranslations, local)
				break
			}
		}
	}

	return nil
}

// SetProduct of the productTranslation to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductTranslations.
func (o *ProductTranslation) SetProduct(exec boil.Executor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productTranslationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productTranslationR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductTranslations: ProductTranslationSlice{o},
		}
	} else {
		related.R.ProductTranslations = append(related.R.ProductTranslations, o)
	}

	return nil
}

// ProductTranslations retrieves all the records using an executor.
func ProductTranslations(mods ...qm.QueryMod) productTranslationQuery {
	mods = append(mods, qm.From("\"product_translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_translations\".*"})
	}

	return productTranslationQuery{q}
}

// FindProductTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductTranslation(exec boil.Executor, iD string, selectCols ...string) (*ProductTranslation, error) {
	productTranslationObj := &ProductTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, productTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from product_translations")
	}

	return productTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductTranslation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_translations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(productTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productTranslationInsertCacheMut.RLock()
	cache, cached := productTranslationInsertCache[key]
	productTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productTranslationAllColumns,
			productTranslationColumnsWithDefault,
			productTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productTranslationType, productTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productTranslationType, productTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into product_translations")
	}

	if !cached {
		productTranslationInsertCacheMut.Lock()
		productTranslationInsertCache[key] = cache
		productTranslationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ProductTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductTranslation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	productTranslationUpdateCacheMut.RLock()
	cache, cached := productTranslationUpdateCache[key]
	productTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productTranslationAllColumns,
			productTranslationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update product_translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productTranslationType, productTranslationMapping, append(wl, productTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update product_translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for product_translations")
	}

	if !cached {
		productTranslationUpdateCacheMut.Lock()
		productTranslationUpdateCache[key] = cache
		productTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q productTranslationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for product_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for product_translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductTranslationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productTranslationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in productTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all productTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductTranslation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no product_translations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(productTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productTranslationUpsertCacheMut.RLock()
	cache, cached := productTranslationUpsertCache[key]
	productTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productTranslationAllColumns,
			productTranslationColumnsWithDefault,
			productTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productTranslationAllColumns,
			productTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert product_translations, could not build update column list")
		}

		ret := strmangle.SetComplement(productTranslationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(productTranslationPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert product_translations, could not build conflict column list")
			}

			conflict = make([]string, len(productTranslationPrimaryKeyColumns))
			copy(conflict, productTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_translations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(productTranslationType, productTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productTranslationType, productTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert product_translations")
	}

	if !cached {
		productTranslationUpsertCacheMut.Lock()
		productTranslationUpsertCache[key] = cache
		productTranslationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ProductTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductTranslation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ProductTranslation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"product_translations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from product_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for product_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productTranslationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no productTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from product_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductTranslationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productTranslationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from productTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_translations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductTranslation) Reload(exec boil.Executor) error {
	ret, err := FindProductTranslation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductTranslationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_translations\".* FROM \"product_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ProductTranslationSlice")
	}

	*o = slice

	return nil
}

// ProductTranslationExists checks if the ProductTranslation row exists.
func ProductTranslationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_translations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if product_translations exists")
	}

	return exists, nil
}

// Exists checks if the ProductTranslation row exists.
func (o *ProductTranslation) Exists(exec boil.Executor) (bool, error) {
	return ProductTranslationExists(exec, o.ID)
}
