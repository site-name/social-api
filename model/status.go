// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Status is an object representing the database table.
type Status struct {
	UserID         string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Status         string `boil:"status" json:"status" toml:"status" yaml:"status"`
	Manual         bool   `boil:"manual" json:"manual" toml:"manual" yaml:"manual"`
	LastActivityAt int64  `boil:"last_activity_at" json:"last_activity_at" toml:"last_activity_at" yaml:"last_activity_at"`

	R *statusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L statusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StatusColumns = struct {
	UserID         string
	Status         string
	Manual         string
	LastActivityAt string
}{
	UserID:         "user_id",
	Status:         "status",
	Manual:         "manual",
	LastActivityAt: "last_activity_at",
}

var StatusTableColumns = struct {
	UserID         string
	Status         string
	Manual         string
	LastActivityAt string
}{
	UserID:         "status.user_id",
	Status:         "status.status",
	Manual:         "status.manual",
	LastActivityAt: "status.last_activity_at",
}

// Generated where

var StatusWhere = struct {
	UserID         whereHelperstring
	Status         whereHelperstring
	Manual         whereHelperbool
	LastActivityAt whereHelperint64
}{
	UserID:         whereHelperstring{field: "\"status\".\"user_id\""},
	Status:         whereHelperstring{field: "\"status\".\"status\""},
	Manual:         whereHelperbool{field: "\"status\".\"manual\""},
	LastActivityAt: whereHelperint64{field: "\"status\".\"last_activity_at\""},
}

// StatusRels is where relationship names are stored.
var StatusRels = struct {
}{}

// statusR is where relationships are stored.
type statusR struct {
}

// NewStruct creates a new relationship struct
func (*statusR) NewStruct() *statusR {
	return &statusR{}
}

// statusL is where Load methods for each relationship are stored.
type statusL struct{}

var (
	statusAllColumns            = []string{"user_id", "status", "manual", "last_activity_at"}
	statusColumnsWithoutDefault = []string{"user_id", "status", "manual", "last_activity_at"}
	statusColumnsWithDefault    = []string{}
	statusPrimaryKeyColumns     = []string{"user_id"}
	statusGeneratedColumns      = []string{}
)

type (
	// StatusSlice is an alias for a slice of pointers to Status.
	// This should almost always be used instead of []Status.
	StatusSlice []*Status

	statusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	statusType                 = reflect.TypeOf(&Status{})
	statusMapping              = queries.MakeStructMapping(statusType)
	statusPrimaryKeyMapping, _ = queries.BindMapping(statusType, statusMapping, statusPrimaryKeyColumns)
	statusInsertCacheMut       sync.RWMutex
	statusInsertCache          = make(map[string]insertCache)
	statusUpdateCacheMut       sync.RWMutex
	statusUpdateCache          = make(map[string]updateCache)
	statusUpsertCacheMut       sync.RWMutex
	statusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single status record from the query.
func (q statusQuery) One(exec boil.Executor) (*Status, error) {
	o := &Status{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for status")
	}

	return o, nil
}

// All returns all Status records from the query.
func (q statusQuery) All(exec boil.Executor) (StatusSlice, error) {
	var o []*Status

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Status slice")
	}

	return o, nil
}

// Count returns the count of all Status records in the query.
func (q statusQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count status rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q statusQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if status exists")
	}

	return count > 0, nil
}

// Statuses retrieves all the records using an executor.
func Statuses(mods ...qm.QueryMod) statusQuery {
	mods = append(mods, qm.From("\"status\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"status\".*"})
	}

	return statusQuery{q}
}

// FindStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStatus(exec boil.Executor, userID string, selectCols ...string) (*Status, error) {
	statusObj := &Status{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"status\" where \"user_id\"=$1", sel,
	)

	q := queries.Raw(query, userID)

	err := q.Bind(nil, exec, statusObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from status")
	}

	return statusObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Status) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no status provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(statusColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	statusInsertCacheMut.RLock()
	cache, cached := statusInsertCache[key]
	statusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			statusAllColumns,
			statusColumnsWithDefault,
			statusColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(statusType, statusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(statusType, statusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"status\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"status\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into status")
	}

	if !cached {
		statusInsertCacheMut.Lock()
		statusInsertCache[key] = cache
		statusInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Status.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Status) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	statusUpdateCacheMut.RLock()
	cache, cached := statusUpdateCache[key]
	statusUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			statusAllColumns,
			statusPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update status, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"status\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, statusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(statusType, statusMapping, append(wl, statusPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update status row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for status")
	}

	if !cached {
		statusUpdateCacheMut.Lock()
		statusUpdateCache[key] = cache
		statusUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q statusQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for status")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StatusSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"status\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, statusPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in status slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all status")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Status) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no status provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(statusColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	statusUpsertCacheMut.RLock()
	cache, cached := statusUpsertCache[key]
	statusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			statusAllColumns,
			statusColumnsWithDefault,
			statusColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			statusAllColumns,
			statusPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert status, could not build update column list")
		}

		ret := strmangle.SetComplement(statusAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(statusPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert status, could not build conflict column list")
			}

			conflict = make([]string, len(statusPrimaryKeyColumns))
			copy(conflict, statusPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"status\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(statusType, statusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(statusType, statusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert status")
	}

	if !cached {
		statusUpsertCacheMut.Lock()
		statusUpsertCache[key] = cache
		statusUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Status record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Status) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Status provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), statusPrimaryKeyMapping)
	sql := "DELETE FROM \"status\" WHERE \"user_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for status")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q statusQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no statusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from status")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for status")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StatusSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, statusPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from status slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for status")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Status) Reload(exec boil.Executor) error {
	ret, err := FindStatus(exec, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StatusSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), statusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"status\".* FROM \"status\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, statusPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in StatusSlice")
	}

	*o = slice

	return nil
}

// StatusExists checks if the Status row exists.
func StatusExists(exec boil.Executor, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"status\" where \"user_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userID)
	}
	row := exec.QueryRow(sql, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if status exists")
	}

	return exists, nil
}

// Exists checks if the Status row exists.
func (o *Status) Exists(exec boil.Executor) (bool, error) {
	return StatusExists(exec, o.UserID)
}
