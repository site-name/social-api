// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MenuItem is an object representing the database table.
type MenuItem struct {
	ID              string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	MenuID          string                 `boil:"menu_id" json:"menu_id" toml:"menu_id" yaml:"menu_id"`
	Name            string                 `boil:"name" json:"name" toml:"name" yaml:"name"`
	ParentID        model_types.NullString `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	URL             model_types.NullString `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	CategoryID      model_types.NullString `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`
	CollectionID    model_types.NullString `boil:"collection_id" json:"collection_id,omitempty" toml:"collection_id" yaml:"collection_id,omitempty"`
	PageID          model_types.NullString `boil:"page_id" json:"page_id,omitempty" toml:"page_id" yaml:"page_id,omitempty"`
	Metadata        model_types.JsonMap    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata model_types.JsonMap    `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`
	SortOrder       model_types.NullInt    `boil:"sort_order" json:"sort_order,omitempty" toml:"sort_order" yaml:"sort_order,omitempty"`

	R *menuItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuItemColumns = struct {
	ID              string
	MenuID          string
	Name            string
	ParentID        string
	URL             string
	CategoryID      string
	CollectionID    string
	PageID          string
	Metadata        string
	PrivateMetadata string
	SortOrder       string
}{
	ID:              "id",
	MenuID:          "menu_id",
	Name:            "name",
	ParentID:        "parent_id",
	URL:             "url",
	CategoryID:      "category_id",
	CollectionID:    "collection_id",
	PageID:          "page_id",
	Metadata:        "metadata",
	PrivateMetadata: "private_metadata",
	SortOrder:       "sort_order",
}

var MenuItemTableColumns = struct {
	ID              string
	MenuID          string
	Name            string
	ParentID        string
	URL             string
	CategoryID      string
	CollectionID    string
	PageID          string
	Metadata        string
	PrivateMetadata string
	SortOrder       string
}{
	ID:              "menu_items.id",
	MenuID:          "menu_items.menu_id",
	Name:            "menu_items.name",
	ParentID:        "menu_items.parent_id",
	URL:             "menu_items.url",
	CategoryID:      "menu_items.category_id",
	CollectionID:    "menu_items.collection_id",
	PageID:          "menu_items.page_id",
	Metadata:        "menu_items.metadata",
	PrivateMetadata: "menu_items.private_metadata",
	SortOrder:       "menu_items.sort_order",
}

// Generated where

var MenuItemWhere = struct {
	ID              whereHelperstring
	MenuID          whereHelperstring
	Name            whereHelperstring
	ParentID        whereHelpermodel_types_NullString
	URL             whereHelpermodel_types_NullString
	CategoryID      whereHelpermodel_types_NullString
	CollectionID    whereHelpermodel_types_NullString
	PageID          whereHelpermodel_types_NullString
	Metadata        whereHelpermodel_types_JsonMap
	PrivateMetadata whereHelpermodel_types_JsonMap
	SortOrder       whereHelpermodel_types_NullInt
}{
	ID:              whereHelperstring{field: "\"menu_items\".\"id\""},
	MenuID:          whereHelperstring{field: "\"menu_items\".\"menu_id\""},
	Name:            whereHelperstring{field: "\"menu_items\".\"name\""},
	ParentID:        whereHelpermodel_types_NullString{field: "\"menu_items\".\"parent_id\""},
	URL:             whereHelpermodel_types_NullString{field: "\"menu_items\".\"url\""},
	CategoryID:      whereHelpermodel_types_NullString{field: "\"menu_items\".\"category_id\""},
	CollectionID:    whereHelpermodel_types_NullString{field: "\"menu_items\".\"collection_id\""},
	PageID:          whereHelpermodel_types_NullString{field: "\"menu_items\".\"page_id\""},
	Metadata:        whereHelpermodel_types_JsonMap{field: "\"menu_items\".\"metadata\""},
	PrivateMetadata: whereHelpermodel_types_JsonMap{field: "\"menu_items\".\"private_metadata\""},
	SortOrder:       whereHelpermodel_types_NullInt{field: "\"menu_items\".\"sort_order\""},
}

// MenuItemRels is where relationship names are stored.
var MenuItemRels = struct {
	Category             string
	Collection           string
	Parent               string
	Menu                 string
	Page                 string
	MenuItemTranslations string
	ParentMenuItems      string
}{
	Category:             "Category",
	Collection:           "Collection",
	Parent:               "Parent",
	Menu:                 "Menu",
	Page:                 "Page",
	MenuItemTranslations: "MenuItemTranslations",
	ParentMenuItems:      "ParentMenuItems",
}

// menuItemR is where relationships are stored.
type menuItemR struct {
	Category             *Category                `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	Collection           *Collection              `boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
	Parent               *MenuItem                `boil:"Parent" json:"Parent" toml:"Parent" yaml:"Parent"`
	Menu                 *Menu                    `boil:"Menu" json:"Menu" toml:"Menu" yaml:"Menu"`
	Page                 *Page                    `boil:"Page" json:"Page" toml:"Page" yaml:"Page"`
	MenuItemTranslations MenuItemTranslationSlice `boil:"MenuItemTranslations" json:"MenuItemTranslations" toml:"MenuItemTranslations" yaml:"MenuItemTranslations"`
	ParentMenuItems      MenuItemSlice            `boil:"ParentMenuItems" json:"ParentMenuItems" toml:"ParentMenuItems" yaml:"ParentMenuItems"`
}

// NewStruct creates a new relationship struct
func (*menuItemR) NewStruct() *menuItemR {
	return &menuItemR{}
}

func (r *menuItemR) GetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *menuItemR) GetCollection() *Collection {
	if r == nil {
		return nil
	}
	return r.Collection
}

func (r *menuItemR) GetParent() *MenuItem {
	if r == nil {
		return nil
	}
	return r.Parent
}

func (r *menuItemR) GetMenu() *Menu {
	if r == nil {
		return nil
	}
	return r.Menu
}

func (r *menuItemR) GetPage() *Page {
	if r == nil {
		return nil
	}
	return r.Page
}

func (r *menuItemR) GetMenuItemTranslations() MenuItemTranslationSlice {
	if r == nil {
		return nil
	}
	return r.MenuItemTranslations
}

func (r *menuItemR) GetParentMenuItems() MenuItemSlice {
	if r == nil {
		return nil
	}
	return r.ParentMenuItems
}

// menuItemL is where Load methods for each relationship are stored.
type menuItemL struct{}

var (
	menuItemAllColumns            = []string{"id", "menu_id", "name", "parent_id", "url", "category_id", "collection_id", "page_id", "metadata", "private_metadata", "sort_order"}
	menuItemColumnsWithoutDefault = []string{"id", "menu_id", "name"}
	menuItemColumnsWithDefault    = []string{"parent_id", "url", "category_id", "collection_id", "page_id", "metadata", "private_metadata", "sort_order"}
	menuItemPrimaryKeyColumns     = []string{"id"}
	menuItemGeneratedColumns      = []string{}
)

type (
	// MenuItemSlice is an alias for a slice of pointers to MenuItem.
	// This should almost always be used instead of []MenuItem.
	MenuItemSlice []*MenuItem

	menuItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuItemType                 = reflect.TypeOf(&MenuItem{})
	menuItemMapping              = queries.MakeStructMapping(menuItemType)
	menuItemPrimaryKeyMapping, _ = queries.BindMapping(menuItemType, menuItemMapping, menuItemPrimaryKeyColumns)
	menuItemInsertCacheMut       sync.RWMutex
	menuItemInsertCache          = make(map[string]insertCache)
	menuItemUpdateCacheMut       sync.RWMutex
	menuItemUpdateCache          = make(map[string]updateCache)
	menuItemUpsertCacheMut       sync.RWMutex
	menuItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single menuItem record from the query.
func (q menuItemQuery) One(exec boil.Executor) (*MenuItem, error) {
	o := &MenuItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for menu_items")
	}

	return o, nil
}

// All returns all MenuItem records from the query.
func (q menuItemQuery) All(exec boil.Executor) (MenuItemSlice, error) {
	var o []*MenuItem

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to MenuItem slice")
	}

	return o, nil
}

// Count returns the count of all MenuItem records in the query.
func (q menuItemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count menu_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q menuItemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if menu_items exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *MenuItem) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// Collection pointed to by the foreign key.
func (o *MenuItem) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
	}

	queryMods = append(queryMods, mods...)

	return Collections(queryMods...)
}

// Parent pointed to by the foreign key.
func (o *MenuItem) Parent(mods ...qm.QueryMod) menuItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	return MenuItems(queryMods...)
}

// Menu pointed to by the foreign key.
func (o *MenuItem) Menu(mods ...qm.QueryMod) menuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MenuID),
	}

	queryMods = append(queryMods, mods...)

	return Menus(queryMods...)
}

// Page pointed to by the foreign key.
func (o *MenuItem) Page(mods ...qm.QueryMod) pageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PageID),
	}

	queryMods = append(queryMods, mods...)

	return Pages(queryMods...)
}

// MenuItemTranslations retrieves all the menu_item_translation's MenuItemTranslations with an executor.
func (o *MenuItem) MenuItemTranslations(mods ...qm.QueryMod) menuItemTranslationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"menu_item_translations\".\"menu_item_id\"=?", o.ID),
	)

	return MenuItemTranslations(queryMods...)
}

// ParentMenuItems retrieves all the menu_item's MenuItems with an executor via parent_id column.
func (o *MenuItem) ParentMenuItems(mods ...qm.QueryMod) menuItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"menu_items\".\"parent_id\"=?", o.ID),
	)

	return MenuItems(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadCategory(e boil.Executor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		if !queries.IsNil(object.CategoryID) {
			args[object.CategoryID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			if !queries.IsNil(obj.CategoryID) {
				args[obj.CategoryID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.MenuItems = append(foreign.R.MenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CategoryID, foreign.ID) {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.MenuItems = append(foreign.R.MenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadCollection(e boil.Executor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		if !queries.IsNil(object.CollectionID) {
			args[object.CollectionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			if !queries.IsNil(obj.CollectionID) {
				args[obj.CollectionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.MenuItems = append(foreign.R.MenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CollectionID, foreign.ID) {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.MenuItems = append(foreign.R.MenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadParent(e boil.Executor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		if !queries.IsNil(object.ParentID) {
			args[object.ParentID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			if !queries.IsNil(obj.ParentID) {
				args[obj.ParentID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menu_items`),
		qm.WhereIn(`menu_items.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MenuItem")
	}

	var resultSlice []*MenuItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MenuItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menu_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_items")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &menuItemR{}
		}
		foreign.R.ParentMenuItems = append(foreign.R.ParentMenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ParentID, foreign.ID) {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &menuItemR{}
				}
				foreign.R.ParentMenuItems = append(foreign.R.ParentMenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadMenu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadMenu(e boil.Executor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		args[object.MenuID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			args[obj.MenuID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menus`),
		qm.WhereIn(`menus.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Menu")
	}

	var resultSlice []*Menu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menus")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Menu = foreign
		if foreign.R == nil {
			foreign.R = &menuR{}
		}
		foreign.R.MenuItems = append(foreign.R.MenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MenuID == foreign.ID {
				local.R.Menu = foreign
				if foreign.R == nil {
					foreign.R = &menuR{}
				}
				foreign.R.MenuItems = append(foreign.R.MenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadPage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadPage(e boil.Executor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		if !queries.IsNil(object.PageID) {
			args[object.PageID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			if !queries.IsNil(obj.PageID) {
				args[obj.PageID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`pages`),
		qm.WhereIn(`pages.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Page")
	}

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Page")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pages")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Page = foreign
		if foreign.R == nil {
			foreign.R = &pageR{}
		}
		foreign.R.MenuItems = append(foreign.R.MenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PageID, foreign.ID) {
				local.R.Page = foreign
				if foreign.R == nil {
					foreign.R = &pageR{}
				}
				foreign.R.MenuItems = append(foreign.R.MenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadMenuItemTranslations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuItemL) LoadMenuItemTranslations(e boil.Executor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menu_item_translations`),
		qm.WhereIn(`menu_item_translations.menu_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_item_translations")
	}

	var resultSlice []*MenuItemTranslation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_item_translations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_item_translations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_item_translations")
	}

	if singular {
		object.R.MenuItemTranslations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuItemTranslationR{}
			}
			foreign.R.MenuItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MenuItemID {
				local.R.MenuItemTranslations = append(local.R.MenuItemTranslations, foreign)
				if foreign.R == nil {
					foreign.R = &menuItemTranslationR{}
				}
				foreign.R.MenuItem = local
				break
			}
		}
	}

	return nil
}

// LoadParentMenuItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuItemL) LoadParentMenuItems(e boil.Executor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menu_items`),
		qm.WhereIn(`menu_items.parent_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_items")
	}

	var resultSlice []*MenuItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_items")
	}

	if singular {
		object.R.ParentMenuItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuItemR{}
			}
			foreign.R.Parent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ParentID) {
				local.R.ParentMenuItems = append(local.R.ParentMenuItems, foreign)
				if foreign.R == nil {
					foreign.R = &menuItemR{}
				}
				foreign.R.Parent = local
				break
			}
		}
	}

	return nil
}

// SetCategory of the menuItem to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.MenuItems.
func (o *MenuItem) SetCategory(exec boil.Executor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CategoryID, related.ID)
	if o.R == nil {
		o.R = &menuItemR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			MenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.MenuItems = append(related.R.MenuItems, o)
	}

	return nil
}

// RemoveCategory relationship.
// Sets o.R.Category to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuItem) RemoveCategory(exec boil.Executor, related *Category) error {
	var err error

	queries.SetScanner(&o.CategoryID, nil)
	if _, err = o.Update(exec, boil.Whitelist("category_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Category = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MenuItems {
		if queries.Equal(o.CategoryID, ri.CategoryID) {
			continue
		}

		ln := len(related.R.MenuItems)
		if ln > 1 && i < ln-1 {
			related.R.MenuItems[i] = related.R.MenuItems[ln-1]
		}
		related.R.MenuItems = related.R.MenuItems[:ln-1]
		break
	}
	return nil
}

// SetCollection of the menuItem to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.MenuItems.
func (o *MenuItem) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CollectionID, related.ID)
	if o.R == nil {
		o.R = &menuItemR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			MenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.MenuItems = append(related.R.MenuItems, o)
	}

	return nil
}

// RemoveCollection relationship.
// Sets o.R.Collection to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuItem) RemoveCollection(exec boil.Executor, related *Collection) error {
	var err error

	queries.SetScanner(&o.CollectionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("collection_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Collection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MenuItems {
		if queries.Equal(o.CollectionID, ri.CollectionID) {
			continue
		}

		ln := len(related.R.MenuItems)
		if ln > 1 && i < ln-1 {
			related.R.MenuItems[i] = related.R.MenuItems[ln-1]
		}
		related.R.MenuItems = related.R.MenuItems[:ln-1]
		break
	}
	return nil
}

// SetParent of the menuItem to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentMenuItems.
func (o *MenuItem) SetParent(exec boil.Executor, insert bool, related *MenuItem) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ParentID, related.ID)
	if o.R == nil {
		o.R = &menuItemR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &menuItemR{
			ParentMenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.ParentMenuItems = append(related.R.ParentMenuItems, o)
	}

	return nil
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuItem) RemoveParent(exec boil.Executor, related *MenuItem) error {
	var err error

	queries.SetScanner(&o.ParentID, nil)
	if _, err = o.Update(exec, boil.Whitelist("parent_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Parent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentMenuItems {
		if queries.Equal(o.ParentID, ri.ParentID) {
			continue
		}

		ln := len(related.R.ParentMenuItems)
		if ln > 1 && i < ln-1 {
			related.R.ParentMenuItems[i] = related.R.ParentMenuItems[ln-1]
		}
		related.R.ParentMenuItems = related.R.ParentMenuItems[:ln-1]
		break
	}
	return nil
}

// SetMenu of the menuItem to the related item.
// Sets o.R.Menu to related.
// Adds o to related.R.MenuItems.
func (o *MenuItem) SetMenu(exec boil.Executor, insert bool, related *Menu) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"menu_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MenuID = related.ID
	if o.R == nil {
		o.R = &menuItemR{
			Menu: related,
		}
	} else {
		o.R.Menu = related
	}

	if related.R == nil {
		related.R = &menuR{
			MenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.MenuItems = append(related.R.MenuItems, o)
	}

	return nil
}

// SetPage of the menuItem to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.MenuItems.
func (o *MenuItem) SetPage(exec boil.Executor, insert bool, related *Page) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PageID, related.ID)
	if o.R == nil {
		o.R = &menuItemR{
			Page: related,
		}
	} else {
		o.R.Page = related
	}

	if related.R == nil {
		related.R = &pageR{
			MenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.MenuItems = append(related.R.MenuItems, o)
	}

	return nil
}

// RemovePage relationship.
// Sets o.R.Page to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuItem) RemovePage(exec boil.Executor, related *Page) error {
	var err error

	queries.SetScanner(&o.PageID, nil)
	if _, err = o.Update(exec, boil.Whitelist("page_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Page = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MenuItems {
		if queries.Equal(o.PageID, ri.PageID) {
			continue
		}

		ln := len(related.R.MenuItems)
		if ln > 1 && i < ln-1 {
			related.R.MenuItems[i] = related.R.MenuItems[ln-1]
		}
		related.R.MenuItems = related.R.MenuItems[:ln-1]
		break
	}
	return nil
}

// AddMenuItemTranslations adds the given related objects to the existing relationships
// of the menu_item, optionally inserting them as new records.
// Appends related to o.R.MenuItemTranslations.
// Sets related.R.MenuItem appropriately.
func (o *MenuItem) AddMenuItemTranslations(exec boil.Executor, insert bool, related ...*MenuItemTranslation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MenuItemID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"menu_item_translations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"menu_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, menuItemTranslationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MenuItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &menuItemR{
			MenuItemTranslations: related,
		}
	} else {
		o.R.MenuItemTranslations = append(o.R.MenuItemTranslations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuItemTranslationR{
				MenuItem: o,
			}
		} else {
			rel.R.MenuItem = o
		}
	}
	return nil
}

// AddParentMenuItems adds the given related objects to the existing relationships
// of the menu_item, optionally inserting them as new records.
// Appends related to o.R.ParentMenuItems.
// Sets related.R.Parent appropriately.
func (o *MenuItem) AddParentMenuItems(exec boil.Executor, insert bool, related ...*MenuItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ParentID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"menu_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
				strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ParentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &menuItemR{
			ParentMenuItems: related,
		}
	} else {
		o.R.ParentMenuItems = append(o.R.ParentMenuItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuItemR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentMenuItems removes all previously related items of the
// menu_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentMenuItems accordingly.
// Replaces o.R.ParentMenuItems with related.
// Sets related.R.Parent's ParentMenuItems accordingly.
func (o *MenuItem) SetParentMenuItems(exec boil.Executor, insert bool, related ...*MenuItem) error {
	query := "update \"menu_items\" set \"parent_id\" = null where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentMenuItems {
			queries.SetScanner(&rel.ParentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}
		o.R.ParentMenuItems = nil
	}

	return o.AddParentMenuItems(exec, insert, related...)
}

// RemoveParentMenuItems relationships from objects passed in.
// Removes related items from R.ParentMenuItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *MenuItem) RemoveParentMenuItems(exec boil.Executor, related ...*MenuItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ParentID, nil)
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("parent_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentMenuItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentMenuItems)
			if ln > 1 && i < ln-1 {
				o.R.ParentMenuItems[i] = o.R.ParentMenuItems[ln-1]
			}
			o.R.ParentMenuItems = o.R.ParentMenuItems[:ln-1]
			break
		}
	}

	return nil
}

// MenuItems retrieves all the records using an executor.
func MenuItems(mods ...qm.QueryMod) menuItemQuery {
	mods = append(mods, qm.From("\"menu_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"menu_items\".*"})
	}

	return menuItemQuery{q}
}

// FindMenuItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenuItem(exec boil.Executor, iD string, selectCols ...string) (*MenuItem, error) {
	menuItemObj := &MenuItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"menu_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, menuItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from menu_items")
	}

	return menuItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MenuItem) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no menu_items provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(menuItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuItemInsertCacheMut.RLock()
	cache, cached := menuItemInsertCache[key]
	menuItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuItemAllColumns,
			menuItemColumnsWithDefault,
			menuItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuItemType, menuItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"menu_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"menu_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into menu_items")
	}

	if !cached {
		menuItemInsertCacheMut.Lock()
		menuItemInsertCache[key] = cache
		menuItemInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MenuItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MenuItem) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	menuItemUpdateCacheMut.RLock()
	cache, cached := menuItemUpdateCache[key]
	menuItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuItemAllColumns,
			menuItemPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update menu_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"menu_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, menuItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, append(wl, menuItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update menu_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for menu_items")
	}

	if !cached {
		menuItemUpdateCacheMut.Lock()
		menuItemUpdateCache[key] = cache
		menuItemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q menuItemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for menu_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, menuItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in menuItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all menuItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MenuItem) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no menu_items provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(menuItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuItemUpsertCacheMut.RLock()
	cache, cached := menuItemUpsertCache[key]
	menuItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			menuItemAllColumns,
			menuItemColumnsWithDefault,
			menuItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuItemAllColumns,
			menuItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert menu_items, could not build update column list")
		}

		ret := strmangle.SetComplement(menuItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(menuItemPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert menu_items, could not build conflict column list")
			}

			conflict = make([]string, len(menuItemPrimaryKeyColumns))
			copy(conflict, menuItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"menu_items\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuItemType, menuItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert menu_items")
	}

	if !cached {
		menuItemUpsertCacheMut.Lock()
		menuItemUpsertCache[key] = cache
		menuItemUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MenuItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MenuItem) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MenuItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuItemPrimaryKeyMapping)
	sql := "DELETE FROM \"menu_items\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for menu_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q menuItemQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no menuItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for menu_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuItemSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"menu_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from menuItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for menu_items")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MenuItem) Reload(exec boil.Executor) error {
	ret, err := FindMenuItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"menu_items\".* FROM \"menu_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MenuItemSlice")
	}

	*o = slice

	return nil
}

// MenuItemExists checks if the MenuItem row exists.
func MenuItemExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"menu_items\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if menu_items exists")
	}

	return exists, nil
}

// Exists checks if the MenuItem row exists.
func (o *MenuItem) Exists(exec boil.Executor) (bool, error) {
	return MenuItemExists(exec, o.ID)
}
