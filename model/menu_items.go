// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MenuItem is an object representing the database table.
type MenuItem struct {
	ID              string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	MenuID          string                 `boil:"menu_id" json:"menu_id" toml:"menu_id" yaml:"menu_id"`
	Name            string                 `boil:"name" json:"name" toml:"name" yaml:"name"`
	ParentID        model_types.NullString `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	URL             model_types.NullString `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	CategoryID      model_types.NullString `boil:"category_id" json:"category_id,omitempty" toml:"category_id" yaml:"category_id,omitempty"`
	CollectionID    model_types.NullString `boil:"collection_id" json:"collection_id,omitempty" toml:"collection_id" yaml:"collection_id,omitempty"`
	PageID          model_types.NullString `boil:"page_id" json:"page_id,omitempty" toml:"page_id" yaml:"page_id,omitempty"`
	Metadata        model_types.JsonMap    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata model_types.JsonMap    `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`
	SortOrder       model_types.NullInt    `boil:"sort_order" json:"sort_order,omitempty" toml:"sort_order" yaml:"sort_order,omitempty"`

	R *menuItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuItemColumns = struct {
	ID              string
	MenuID          string
	Name            string
	ParentID        string
	URL             string
	CategoryID      string
	CollectionID    string
	PageID          string
	Metadata        string
	PrivateMetadata string
	SortOrder       string
}{
	ID:              "id",
	MenuID:          "menu_id",
	Name:            "name",
	ParentID:        "parent_id",
	URL:             "url",
	CategoryID:      "category_id",
	CollectionID:    "collection_id",
	PageID:          "page_id",
	Metadata:        "metadata",
	PrivateMetadata: "private_metadata",
	SortOrder:       "sort_order",
}

var MenuItemTableColumns = struct {
	ID              string
	MenuID          string
	Name            string
	ParentID        string
	URL             string
	CategoryID      string
	CollectionID    string
	PageID          string
	Metadata        string
	PrivateMetadata string
	SortOrder       string
}{
	ID:              "menu_items.id",
	MenuID:          "menu_items.menu_id",
	Name:            "menu_items.name",
	ParentID:        "menu_items.parent_id",
	URL:             "menu_items.url",
	CategoryID:      "menu_items.category_id",
	CollectionID:    "menu_items.collection_id",
	PageID:          "menu_items.page_id",
	Metadata:        "menu_items.metadata",
	PrivateMetadata: "menu_items.private_metadata",
	SortOrder:       "menu_items.sort_order",
}

// Generated where

var MenuItemWhere = struct {
	ID              whereHelperstring
	MenuID          whereHelperstring
	Name            whereHelperstring
	ParentID        whereHelpermodel_types_NullString
	URL             whereHelpermodel_types_NullString
	CategoryID      whereHelpermodel_types_NullString
	CollectionID    whereHelpermodel_types_NullString
	PageID          whereHelpermodel_types_NullString
	Metadata        whereHelpermodel_types_JsonMap
	PrivateMetadata whereHelpermodel_types_JsonMap
	SortOrder       whereHelpermodel_types_NullInt
}{
	ID:              whereHelperstring{field: "\"menu_items\".\"id\""},
	MenuID:          whereHelperstring{field: "\"menu_items\".\"menu_id\""},
	Name:            whereHelperstring{field: "\"menu_items\".\"name\""},
	ParentID:        whereHelpermodel_types_NullString{field: "\"menu_items\".\"parent_id\""},
	URL:             whereHelpermodel_types_NullString{field: "\"menu_items\".\"url\""},
	CategoryID:      whereHelpermodel_types_NullString{field: "\"menu_items\".\"category_id\""},
	CollectionID:    whereHelpermodel_types_NullString{field: "\"menu_items\".\"collection_id\""},
	PageID:          whereHelpermodel_types_NullString{field: "\"menu_items\".\"page_id\""},
	Metadata:        whereHelpermodel_types_JsonMap{field: "\"menu_items\".\"metadata\""},
	PrivateMetadata: whereHelpermodel_types_JsonMap{field: "\"menu_items\".\"private_metadata\""},
	SortOrder:       whereHelpermodel_types_NullInt{field: "\"menu_items\".\"sort_order\""},
}

// MenuItemRels is where relationship names are stored.
var MenuItemRels = struct {
}{}

// menuItemR is where relationships are stored.
type menuItemR struct {
}

// NewStruct creates a new relationship struct
func (*menuItemR) NewStruct() *menuItemR {
	return &menuItemR{}
}

// menuItemL is where Load methods for each relationship are stored.
type menuItemL struct{}

var (
	menuItemAllColumns            = []string{"id", "menu_id", "name", "parent_id", "url", "category_id", "collection_id", "page_id", "metadata", "private_metadata", "sort_order"}
	menuItemColumnsWithoutDefault = []string{"menu_id", "name"}
	menuItemColumnsWithDefault    = []string{"id", "parent_id", "url", "category_id", "collection_id", "page_id", "metadata", "private_metadata", "sort_order"}
	menuItemPrimaryKeyColumns     = []string{"id"}
	menuItemGeneratedColumns      = []string{}
)

type (
	// MenuItemSlice is an alias for a slice of pointers to MenuItem.
	// This should almost always be used instead of []MenuItem.
	MenuItemSlice []*MenuItem

	menuItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuItemType                 = reflect.TypeOf(&MenuItem{})
	menuItemMapping              = queries.MakeStructMapping(menuItemType)
	menuItemPrimaryKeyMapping, _ = queries.BindMapping(menuItemType, menuItemMapping, menuItemPrimaryKeyColumns)
	menuItemInsertCacheMut       sync.RWMutex
	menuItemInsertCache          = make(map[string]insertCache)
	menuItemUpdateCacheMut       sync.RWMutex
	menuItemUpdateCache          = make(map[string]updateCache)
	menuItemUpsertCacheMut       sync.RWMutex
	menuItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single menuItem record from the query.
func (q menuItemQuery) One(exec boil.Executor) (*MenuItem, error) {
	o := &MenuItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for menu_items")
	}

	return o, nil
}

// All returns all MenuItem records from the query.
func (q menuItemQuery) All(exec boil.Executor) (MenuItemSlice, error) {
	var o []*MenuItem

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to MenuItem slice")
	}

	return o, nil
}

// Count returns the count of all MenuItem records in the query.
func (q menuItemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count menu_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q menuItemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if menu_items exists")
	}

	return count > 0, nil
}

// MenuItems retrieves all the records using an executor.
func MenuItems(mods ...qm.QueryMod) menuItemQuery {
	mods = append(mods, qm.From("\"menu_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"menu_items\".*"})
	}

	return menuItemQuery{q}
}

// FindMenuItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenuItem(exec boil.Executor, iD string, selectCols ...string) (*MenuItem, error) {
	menuItemObj := &MenuItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"menu_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, menuItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from menu_items")
	}

	return menuItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MenuItem) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no menu_items provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(menuItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuItemInsertCacheMut.RLock()
	cache, cached := menuItemInsertCache[key]
	menuItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuItemAllColumns,
			menuItemColumnsWithDefault,
			menuItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuItemType, menuItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"menu_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"menu_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into menu_items")
	}

	if !cached {
		menuItemInsertCacheMut.Lock()
		menuItemInsertCache[key] = cache
		menuItemInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the MenuItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MenuItem) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	menuItemUpdateCacheMut.RLock()
	cache, cached := menuItemUpdateCache[key]
	menuItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuItemAllColumns,
			menuItemPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update menu_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"menu_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, menuItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, append(wl, menuItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update menu_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for menu_items")
	}

	if !cached {
		menuItemUpdateCacheMut.Lock()
		menuItemUpdateCache[key] = cache
		menuItemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q menuItemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for menu_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuItemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, menuItemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in menuItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all menuItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MenuItem) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no menu_items provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(menuItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuItemUpsertCacheMut.RLock()
	cache, cached := menuItemUpsertCache[key]
	menuItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			menuItemAllColumns,
			menuItemColumnsWithDefault,
			menuItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuItemAllColumns,
			menuItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert menu_items, could not build update column list")
		}

		ret := strmangle.SetComplement(menuItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(menuItemPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert menu_items, could not build conflict column list")
			}

			conflict = make([]string, len(menuItemPrimaryKeyColumns))
			copy(conflict, menuItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"menu_items\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuItemType, menuItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert menu_items")
	}

	if !cached {
		menuItemUpsertCacheMut.Lock()
		menuItemUpsertCache[key] = cache
		menuItemUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single MenuItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MenuItem) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no MenuItem provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuItemPrimaryKeyMapping)
	sql := "DELETE FROM \"menu_items\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for menu_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q menuItemQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no menuItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for menu_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuItemSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"menu_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from menuItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for menu_items")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MenuItem) Reload(exec boil.Executor) error {
	ret, err := FindMenuItem(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuItemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"menu_items\".* FROM \"menu_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in MenuItemSlice")
	}

	*o = slice

	return nil
}

// MenuItemExists checks if the MenuItem row exists.
func MenuItemExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"menu_items\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if menu_items exists")
	}

	return exists, nil
}

// Exists checks if the MenuItem row exists.
func (o *MenuItem) Exists(exec boil.Executor) (bool, error) {
	return MenuItemExists(exec, o.ID)
}
