package account

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ModelMetadata) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Metadata":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Metadata")
				return
			}
			if z.Metadata == nil {
				z.Metadata = make(StringMap, zb0002)
			} else if len(z.Metadata) > 0 {
				for key := range z.Metadata {
					delete(z.Metadata, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Metadata")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Metadata", za0001)
					return
				}
				z.Metadata[za0001] = za0002
			}
		case "PrivateMetadata":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "PrivateMetadata")
				return
			}
			if z.PrivateMetadata == nil {
				z.PrivateMetadata = make(StringMap, zb0003)
			} else if len(z.PrivateMetadata) > 0 {
				for key := range z.PrivateMetadata {
					delete(z.PrivateMetadata, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 string
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PrivateMetadata")
					return
				}
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PrivateMetadata", za0003)
					return
				}
				z.PrivateMetadata[za0003] = za0004
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ModelMetadata) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Metadata"
	err = en.Append(0x82, 0xa8, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Metadata)))
	if err != nil {
		err = msgp.WrapError(err, "Metadata")
		return
	}
	for za0001, za0002 := range z.Metadata {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Metadata")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Metadata", za0001)
			return
		}
	}
	// write "PrivateMetadata"
	err = en.Append(0xaf, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.PrivateMetadata)))
	if err != nil {
		err = msgp.WrapError(err, "PrivateMetadata")
		return
	}
	for za0003, za0004 := range z.PrivateMetadata {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "PrivateMetadata")
			return
		}
		err = en.WriteString(za0004)
		if err != nil {
			err = msgp.WrapError(err, "PrivateMetadata", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ModelMetadata) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Metadata"
	o = append(o, 0x82, 0xa8, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendMapHeader(o, uint32(len(z.Metadata)))
	for za0001, za0002 := range z.Metadata {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "PrivateMetadata"
	o = append(o, 0xaf, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendMapHeader(o, uint32(len(z.PrivateMetadata)))
	for za0003, za0004 := range z.PrivateMetadata {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendString(o, za0004)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ModelMetadata) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Metadata":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Metadata")
				return
			}
			if z.Metadata == nil {
				z.Metadata = make(StringMap, zb0002)
			} else if len(z.Metadata) > 0 {
				for key := range z.Metadata {
					delete(z.Metadata, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Metadata")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Metadata", za0001)
					return
				}
				z.Metadata[za0001] = za0002
			}
		case "PrivateMetadata":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrivateMetadata")
				return
			}
			if z.PrivateMetadata == nil {
				z.PrivateMetadata = make(StringMap, zb0003)
			} else if len(z.PrivateMetadata) > 0 {
				for key := range z.PrivateMetadata {
					delete(z.PrivateMetadata, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 string
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PrivateMetadata")
					return
				}
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PrivateMetadata", za0003)
					return
				}
				z.PrivateMetadata[za0003] = za0004
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ModelMetadata) Msgsize() (s int) {
	s = 1 + 9 + msgp.MapHeaderSize
	if z.Metadata != nil {
		for za0001, za0002 := range z.Metadata {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 16 + msgp.MapHeaderSize
	if z.PrivateMetadata != nil {
		for za0003, za0004 := range z.PrivateMetadata {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.StringPrefixSize + len(za0004)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StringMap) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(StringMap, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		zb0002, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StringMap) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		err = en.WriteString(zb0005)
		if err != nil {
			err = msgp.WrapError(err, zb0004)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StringMap) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		o = msgp.AppendString(o, zb0005)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StringMap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(StringMap, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 string
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		zb0002, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StringMap) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004) + msgp.StringPrefixSize + len(zb0005)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *User) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Email":
			z.Email, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		case "Username":
			z.Username, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "FirstName":
			z.FirstName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "LastName":
			z.LastName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "DefaultShippingAddressID":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DefaultShippingAddressID")
					return
				}
				z.DefaultShippingAddressID = nil
			} else {
				if z.DefaultShippingAddressID == nil {
					z.DefaultShippingAddressID = new(string)
				}
				*z.DefaultShippingAddressID, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "DefaultShippingAddressID")
					return
				}
			}
		case "DefaultBillingAddressID":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "DefaultBillingAddressID")
					return
				}
				z.DefaultBillingAddressID = nil
			} else {
				if z.DefaultBillingAddressID == nil {
					z.DefaultBillingAddressID = new(string)
				}
				*z.DefaultBillingAddressID, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "DefaultBillingAddressID")
					return
				}
			}
		case "Password":
			z.Password, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		case "AuthData":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AuthData")
					return
				}
				z.AuthData = nil
			} else {
				if z.AuthData == nil {
					z.AuthData = new(string)
				}
				*z.AuthData, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AuthData")
					return
				}
			}
		case "AuthService":
			z.AuthService, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AuthService")
				return
			}
		case "EmailVerified":
			z.EmailVerified, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "EmailVerified")
				return
			}
		case "Nickname":
			z.Nickname, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Nickname")
				return
			}
		case "Roles":
			z.Roles, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Roles")
				return
			}
		case "Props":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Props")
				return
			}
			if z.Props == nil {
				z.Props = make(StringMap, zb0002)
			} else if len(z.Props) > 0 {
				for key := range z.Props {
					delete(z.Props, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Props")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Props", za0001)
					return
				}
				z.Props[za0001] = za0002
			}
		case "NotifyProps":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "NotifyProps")
				return
			}
			if z.NotifyProps == nil {
				z.NotifyProps = make(StringMap, zb0003)
			} else if len(z.NotifyProps) > 0 {
				for key := range z.NotifyProps {
					delete(z.NotifyProps, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 string
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "NotifyProps")
					return
				}
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "NotifyProps", za0003)
					return
				}
				z.NotifyProps[za0003] = za0004
			}
		case "LastPasswordUpdate":
			z.LastPasswordUpdate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "LastPasswordUpdate")
				return
			}
		case "LastPictureUpdate":
			z.LastPictureUpdate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "LastPictureUpdate")
				return
			}
		case "FailedAttempts":
			z.FailedAttempts, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "FailedAttempts")
				return
			}
		case "Locale":
			z.Locale, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Locale")
				return
			}
		case "Timezone":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Timezone")
				return
			}
			if z.Timezone == nil {
				z.Timezone = make(StringMap, zb0004)
			} else if len(z.Timezone) > 0 {
				for key := range z.Timezone {
					delete(z.Timezone, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0005 string
				var za0006 string
				za0005, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Timezone")
					return
				}
				za0006, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Timezone", za0005)
					return
				}
				z.Timezone[za0005] = za0006
			}
		case "MfaActive":
			z.MfaActive, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "MfaActive")
				return
			}
		case "MfaSecret":
			z.MfaSecret, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MfaSecret")
				return
			}
		case "CreateAt":
			z.CreateAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CreateAt")
				return
			}
		case "UpdateAt":
			z.UpdateAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "UpdateAt")
				return
			}
		case "DeleteAt":
			z.DeleteAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "DeleteAt")
				return
			}
		case "IsStaff":
			z.IsStaff, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsStaff")
				return
			}
		case "IsActive":
			z.IsActive, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsActive")
				return
			}
		case "Note":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
				z.Note = nil
			} else {
				if z.Note == nil {
					z.Note = new(string)
				}
				*z.Note, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
			}
		case "JwtTokenKey":
			z.JwtTokenKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "JwtTokenKey")
				return
			}
		case "LastActivityAt":
			z.LastActivityAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "LastActivityAt")
				return
			}
		case "TermsOfServiceId":
			z.TermsOfServiceId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TermsOfServiceId")
				return
			}
		case "TermsOfServiceCreateAt":
			z.TermsOfServiceCreateAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "TermsOfServiceCreateAt")
				return
			}
		case "DisableWelcomeEmail":
			z.DisableWelcomeEmail, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "DisableWelcomeEmail")
				return
			}
		case "ModelMetadata":
			err = z.ModelMetadata.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ModelMetadata")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *User) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 34
	// write "Id"
	err = en.Append(0xde, 0x0, 0x22, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Email"
	err = en.Append(0xa5, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Email)
	if err != nil {
		err = msgp.WrapError(err, "Email")
		return
	}
	// write "Username"
	err = en.Append(0xa8, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Username)
	if err != nil {
		err = msgp.WrapError(err, "Username")
		return
	}
	// write "FirstName"
	err = en.Append(0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FirstName)
	if err != nil {
		err = msgp.WrapError(err, "FirstName")
		return
	}
	// write "LastName"
	err = en.Append(0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.LastName)
	if err != nil {
		err = msgp.WrapError(err, "LastName")
		return
	}
	// write "DefaultShippingAddressID"
	err = en.Append(0xb8, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44)
	if err != nil {
		return
	}
	if z.DefaultShippingAddressID == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.DefaultShippingAddressID)
		if err != nil {
			err = msgp.WrapError(err, "DefaultShippingAddressID")
			return
		}
	}
	// write "DefaultBillingAddressID"
	err = en.Append(0xb7, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44)
	if err != nil {
		return
	}
	if z.DefaultBillingAddressID == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.DefaultBillingAddressID)
		if err != nil {
			err = msgp.WrapError(err, "DefaultBillingAddressID")
			return
		}
	}
	// write "Password"
	err = en.Append(0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Password)
	if err != nil {
		err = msgp.WrapError(err, "Password")
		return
	}
	// write "AuthData"
	err = en.Append(0xa8, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	if z.AuthData == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.AuthData)
		if err != nil {
			err = msgp.WrapError(err, "AuthData")
			return
		}
	}
	// write "AuthService"
	err = en.Append(0xab, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.AuthService)
	if err != nil {
		err = msgp.WrapError(err, "AuthService")
		return
	}
	// write "EmailVerified"
	err = en.Append(0xad, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.EmailVerified)
	if err != nil {
		err = msgp.WrapError(err, "EmailVerified")
		return
	}
	// write "Nickname"
	err = en.Append(0xa8, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Nickname)
	if err != nil {
		err = msgp.WrapError(err, "Nickname")
		return
	}
	// write "Roles"
	err = en.Append(0xa5, 0x52, 0x6f, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Roles)
	if err != nil {
		err = msgp.WrapError(err, "Roles")
		return
	}
	// write "Props"
	err = en.Append(0xa5, 0x50, 0x72, 0x6f, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Props)))
	if err != nil {
		err = msgp.WrapError(err, "Props")
		return
	}
	for za0001, za0002 := range z.Props {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Props")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Props", za0001)
			return
		}
	}
	// write "NotifyProps"
	err = en.Append(0xab, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.NotifyProps)))
	if err != nil {
		err = msgp.WrapError(err, "NotifyProps")
		return
	}
	for za0003, za0004 := range z.NotifyProps {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "NotifyProps")
			return
		}
		err = en.WriteString(za0004)
		if err != nil {
			err = msgp.WrapError(err, "NotifyProps", za0003)
			return
		}
	}
	// write "LastPasswordUpdate"
	err = en.Append(0xb2, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.LastPasswordUpdate)
	if err != nil {
		err = msgp.WrapError(err, "LastPasswordUpdate")
		return
	}
	// write "LastPictureUpdate"
	err = en.Append(0xb1, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.LastPictureUpdate)
	if err != nil {
		err = msgp.WrapError(err, "LastPictureUpdate")
		return
	}
	// write "FailedAttempts"
	err = en.Append(0xae, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.FailedAttempts)
	if err != nil {
		err = msgp.WrapError(err, "FailedAttempts")
		return
	}
	// write "Locale"
	err = en.Append(0xa6, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Locale)
	if err != nil {
		err = msgp.WrapError(err, "Locale")
		return
	}
	// write "Timezone"
	err = en.Append(0xa8, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Timezone)))
	if err != nil {
		err = msgp.WrapError(err, "Timezone")
		return
	}
	for za0005, za0006 := range z.Timezone {
		err = en.WriteString(za0005)
		if err != nil {
			err = msgp.WrapError(err, "Timezone")
			return
		}
		err = en.WriteString(za0006)
		if err != nil {
			err = msgp.WrapError(err, "Timezone", za0005)
			return
		}
	}
	// write "MfaActive"
	err = en.Append(0xa9, 0x4d, 0x66, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.MfaActive)
	if err != nil {
		err = msgp.WrapError(err, "MfaActive")
		return
	}
	// write "MfaSecret"
	err = en.Append(0xa9, 0x4d, 0x66, 0x61, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.MfaSecret)
	if err != nil {
		err = msgp.WrapError(err, "MfaSecret")
		return
	}
	// write "CreateAt"
	err = en.Append(0xa8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CreateAt)
	if err != nil {
		err = msgp.WrapError(err, "CreateAt")
		return
	}
	// write "UpdateAt"
	err = en.Append(0xa8, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.UpdateAt)
	if err != nil {
		err = msgp.WrapError(err, "UpdateAt")
		return
	}
	// write "DeleteAt"
	err = en.Append(0xa8, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.DeleteAt)
	if err != nil {
		err = msgp.WrapError(err, "DeleteAt")
		return
	}
	// write "IsStaff"
	err = en.Append(0xa7, 0x49, 0x73, 0x53, 0x74, 0x61, 0x66, 0x66)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsStaff)
	if err != nil {
		err = msgp.WrapError(err, "IsStaff")
		return
	}
	// write "IsActive"
	err = en.Append(0xa8, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsActive)
	if err != nil {
		err = msgp.WrapError(err, "IsActive")
		return
	}
	// write "Note"
	err = en.Append(0xa4, 0x4e, 0x6f, 0x74, 0x65)
	if err != nil {
		return
	}
	if z.Note == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.Note)
		if err != nil {
			err = msgp.WrapError(err, "Note")
			return
		}
	}
	// write "JwtTokenKey"
	err = en.Append(0xab, 0x4a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.JwtTokenKey)
	if err != nil {
		err = msgp.WrapError(err, "JwtTokenKey")
		return
	}
	// write "LastActivityAt"
	err = en.Append(0xae, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.LastActivityAt)
	if err != nil {
		err = msgp.WrapError(err, "LastActivityAt")
		return
	}
	// write "TermsOfServiceId"
	err = en.Append(0xb0, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.TermsOfServiceId)
	if err != nil {
		err = msgp.WrapError(err, "TermsOfServiceId")
		return
	}
	// write "TermsOfServiceCreateAt"
	err = en.Append(0xb6, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.TermsOfServiceCreateAt)
	if err != nil {
		err = msgp.WrapError(err, "TermsOfServiceCreateAt")
		return
	}
	// write "DisableWelcomeEmail"
	err = en.Append(0xb3, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.DisableWelcomeEmail)
	if err != nil {
		err = msgp.WrapError(err, "DisableWelcomeEmail")
		return
	}
	// write "ModelMetadata"
	err = en.Append(0xad, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.ModelMetadata.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ModelMetadata")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *User) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 34
	// string "Id"
	o = append(o, 0xde, 0x0, 0x22, 0xa2, 0x49, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "Email"
	o = append(o, 0xa5, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	o = msgp.AppendString(o, z.Email)
	// string "Username"
	o = append(o, 0xa8, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Username)
	// string "FirstName"
	o = append(o, 0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.FirstName)
	// string "LastName"
	o = append(o, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.LastName)
	// string "DefaultShippingAddressID"
	o = append(o, 0xb8, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44)
	if z.DefaultShippingAddressID == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.DefaultShippingAddressID)
	}
	// string "DefaultBillingAddressID"
	o = append(o, 0xb7, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44)
	if z.DefaultBillingAddressID == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.DefaultBillingAddressID)
	}
	// string "Password"
	o = append(o, 0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	o = msgp.AppendString(o, z.Password)
	// string "AuthData"
	o = append(o, 0xa8, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61)
	if z.AuthData == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.AuthData)
	}
	// string "AuthService"
	o = append(o, 0xab, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.AuthService)
	// string "EmailVerified"
	o = append(o, 0xad, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64)
	o = msgp.AppendBool(o, z.EmailVerified)
	// string "Nickname"
	o = append(o, 0xa8, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Nickname)
	// string "Roles"
	o = append(o, 0xa5, 0x52, 0x6f, 0x6c, 0x65, 0x73)
	o = msgp.AppendString(o, z.Roles)
	// string "Props"
	o = append(o, 0xa5, 0x50, 0x72, 0x6f, 0x70, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Props)))
	for za0001, za0002 := range z.Props {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "NotifyProps"
	o = append(o, 0xab, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.NotifyProps)))
	for za0003, za0004 := range z.NotifyProps {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendString(o, za0004)
	}
	// string "LastPasswordUpdate"
	o = append(o, 0xb2, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65)
	o = msgp.AppendInt64(o, z.LastPasswordUpdate)
	// string "LastPictureUpdate"
	o = append(o, 0xb1, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65)
	o = msgp.AppendInt64(o, z.LastPictureUpdate)
	// string "FailedAttempts"
	o = append(o, 0xae, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73)
	o = msgp.AppendInt(o, z.FailedAttempts)
	// string "Locale"
	o = append(o, 0xa6, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Locale)
	// string "Timezone"
	o = append(o, 0xa8, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65)
	o = msgp.AppendMapHeader(o, uint32(len(z.Timezone)))
	for za0005, za0006 := range z.Timezone {
		o = msgp.AppendString(o, za0005)
		o = msgp.AppendString(o, za0006)
	}
	// string "MfaActive"
	o = append(o, 0xa9, 0x4d, 0x66, 0x61, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65)
	o = msgp.AppendBool(o, z.MfaActive)
	// string "MfaSecret"
	o = append(o, 0xa9, 0x4d, 0x66, 0x61, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74)
	o = msgp.AppendString(o, z.MfaSecret)
	// string "CreateAt"
	o = append(o, 0xa8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.CreateAt)
	// string "UpdateAt"
	o = append(o, 0xa8, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.UpdateAt)
	// string "DeleteAt"
	o = append(o, 0xa8, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.DeleteAt)
	// string "IsStaff"
	o = append(o, 0xa7, 0x49, 0x73, 0x53, 0x74, 0x61, 0x66, 0x66)
	o = msgp.AppendBool(o, z.IsStaff)
	// string "IsActive"
	o = append(o, 0xa8, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65)
	o = msgp.AppendBool(o, z.IsActive)
	// string "Note"
	o = append(o, 0xa4, 0x4e, 0x6f, 0x74, 0x65)
	if z.Note == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.Note)
	}
	// string "JwtTokenKey"
	o = append(o, 0xab, 0x4a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.JwtTokenKey)
	// string "LastActivityAt"
	o = append(o, 0xae, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.LastActivityAt)
	// string "TermsOfServiceId"
	o = append(o, 0xb0, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.TermsOfServiceId)
	// string "TermsOfServiceCreateAt"
	o = append(o, 0xb6, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.TermsOfServiceCreateAt)
	// string "DisableWelcomeEmail"
	o = append(o, 0xb3, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	o = msgp.AppendBool(o, z.DisableWelcomeEmail)
	// string "ModelMetadata"
	o = append(o, 0xad, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61)
	o, err = z.ModelMetadata.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ModelMetadata")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *User) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Email":
			z.Email, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Email")
				return
			}
		case "Username":
			z.Username, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "FirstName":
			z.FirstName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "LastName":
			z.LastName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "DefaultShippingAddressID":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DefaultShippingAddressID = nil
			} else {
				if z.DefaultShippingAddressID == nil {
					z.DefaultShippingAddressID = new(string)
				}
				*z.DefaultShippingAddressID, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DefaultShippingAddressID")
					return
				}
			}
		case "DefaultBillingAddressID":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.DefaultBillingAddressID = nil
			} else {
				if z.DefaultBillingAddressID == nil {
					z.DefaultBillingAddressID = new(string)
				}
				*z.DefaultBillingAddressID, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DefaultBillingAddressID")
					return
				}
			}
		case "Password":
			z.Password, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		case "AuthData":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AuthData = nil
			} else {
				if z.AuthData == nil {
					z.AuthData = new(string)
				}
				*z.AuthData, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthData")
					return
				}
			}
		case "AuthService":
			z.AuthService, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AuthService")
				return
			}
		case "EmailVerified":
			z.EmailVerified, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EmailVerified")
				return
			}
		case "Nickname":
			z.Nickname, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nickname")
				return
			}
		case "Roles":
			z.Roles, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Roles")
				return
			}
		case "Props":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Props")
				return
			}
			if z.Props == nil {
				z.Props = make(StringMap, zb0002)
			} else if len(z.Props) > 0 {
				for key := range z.Props {
					delete(z.Props, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Props")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Props", za0001)
					return
				}
				z.Props[za0001] = za0002
			}
		case "NotifyProps":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NotifyProps")
				return
			}
			if z.NotifyProps == nil {
				z.NotifyProps = make(StringMap, zb0003)
			} else if len(z.NotifyProps) > 0 {
				for key := range z.NotifyProps {
					delete(z.NotifyProps, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 string
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NotifyProps")
					return
				}
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NotifyProps", za0003)
					return
				}
				z.NotifyProps[za0003] = za0004
			}
		case "LastPasswordUpdate":
			z.LastPasswordUpdate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastPasswordUpdate")
				return
			}
		case "LastPictureUpdate":
			z.LastPictureUpdate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastPictureUpdate")
				return
			}
		case "FailedAttempts":
			z.FailedAttempts, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FailedAttempts")
				return
			}
		case "Locale":
			z.Locale, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Locale")
				return
			}
		case "Timezone":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timezone")
				return
			}
			if z.Timezone == nil {
				z.Timezone = make(StringMap, zb0004)
			} else if len(z.Timezone) > 0 {
				for key := range z.Timezone {
					delete(z.Timezone, key)
				}
			}
			for zb0004 > 0 {
				var za0005 string
				var za0006 string
				zb0004--
				za0005, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Timezone")
					return
				}
				za0006, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Timezone", za0005)
					return
				}
				z.Timezone[za0005] = za0006
			}
		case "MfaActive":
			z.MfaActive, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MfaActive")
				return
			}
		case "MfaSecret":
			z.MfaSecret, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MfaSecret")
				return
			}
		case "CreateAt":
			z.CreateAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateAt")
				return
			}
		case "UpdateAt":
			z.UpdateAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpdateAt")
				return
			}
		case "DeleteAt":
			z.DeleteAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeleteAt")
				return
			}
		case "IsStaff":
			z.IsStaff, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsStaff")
				return
			}
		case "IsActive":
			z.IsActive, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsActive")
				return
			}
		case "Note":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Note = nil
			} else {
				if z.Note == nil {
					z.Note = new(string)
				}
				*z.Note, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Note")
					return
				}
			}
		case "JwtTokenKey":
			z.JwtTokenKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "JwtTokenKey")
				return
			}
		case "LastActivityAt":
			z.LastActivityAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastActivityAt")
				return
			}
		case "TermsOfServiceId":
			z.TermsOfServiceId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TermsOfServiceId")
				return
			}
		case "TermsOfServiceCreateAt":
			z.TermsOfServiceCreateAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TermsOfServiceCreateAt")
				return
			}
		case "DisableWelcomeEmail":
			z.DisableWelcomeEmail, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DisableWelcomeEmail")
				return
			}
		case "ModelMetadata":
			bts, err = z.ModelMetadata.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ModelMetadata")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *User) Msgsize() (s int) {
	s = 3 + 3 + msgp.StringPrefixSize + len(z.Id) + 6 + msgp.StringPrefixSize + len(z.Email) + 9 + msgp.StringPrefixSize + len(z.Username) + 10 + msgp.StringPrefixSize + len(z.FirstName) + 9 + msgp.StringPrefixSize + len(z.LastName) + 25
	if z.DefaultShippingAddressID == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.DefaultShippingAddressID)
	}
	s += 24
	if z.DefaultBillingAddressID == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.DefaultBillingAddressID)
	}
	s += 9 + msgp.StringPrefixSize + len(z.Password) + 9
	if z.AuthData == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AuthData)
	}
	s += 12 + msgp.StringPrefixSize + len(z.AuthService) + 14 + msgp.BoolSize + 9 + msgp.StringPrefixSize + len(z.Nickname) + 6 + msgp.StringPrefixSize + len(z.Roles) + 6 + msgp.MapHeaderSize
	if z.Props != nil {
		for za0001, za0002 := range z.Props {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 12 + msgp.MapHeaderSize
	if z.NotifyProps != nil {
		for za0003, za0004 := range z.NotifyProps {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.StringPrefixSize + len(za0004)
		}
	}
	s += 19 + msgp.Int64Size + 18 + msgp.Int64Size + 15 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.Locale) + 9 + msgp.MapHeaderSize
	if z.Timezone != nil {
		for za0005, za0006 := range z.Timezone {
			_ = za0006
			s += msgp.StringPrefixSize + len(za0005) + msgp.StringPrefixSize + len(za0006)
		}
	}
	s += 10 + msgp.BoolSize + 10 + msgp.StringPrefixSize + len(z.MfaSecret) + 9 + msgp.Int64Size + 9 + msgp.Int64Size + 9 + msgp.Int64Size + 8 + msgp.BoolSize + 9 + msgp.BoolSize + 5
	if z.Note == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Note)
	}
	s += 12 + msgp.StringPrefixSize + len(z.JwtTokenKey) + 15 + msgp.Int64Size + 17 + msgp.StringPrefixSize + len(z.TermsOfServiceId) + 23 + msgp.Int64Size + 20 + msgp.BoolSize + 14 + z.ModelMetadata.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UserAuth) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Password":
			z.Password, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		case "AuthData":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AuthData")
					return
				}
				z.AuthData = nil
			} else {
				if z.AuthData == nil {
					z.AuthData = new(string)
				}
				*z.AuthData, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "AuthData")
					return
				}
			}
		case "AuthService":
			z.AuthService, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AuthService")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UserAuth) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Password"
	err = en.Append(0x83, 0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Password)
	if err != nil {
		err = msgp.WrapError(err, "Password")
		return
	}
	// write "AuthData"
	err = en.Append(0xa8, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	if z.AuthData == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.AuthData)
		if err != nil {
			err = msgp.WrapError(err, "AuthData")
			return
		}
	}
	// write "AuthService"
	err = en.Append(0xab, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.AuthService)
	if err != nil {
		err = msgp.WrapError(err, "AuthService")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UserAuth) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Password"
	o = append(o, 0x83, 0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	o = msgp.AppendString(o, z.Password)
	// string "AuthData"
	o = append(o, 0xa8, 0x41, 0x75, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61)
	if z.AuthData == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.AuthData)
	}
	// string "AuthService"
	o = append(o, 0xab, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.AuthService)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserAuth) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Password":
			z.Password, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Password")
				return
			}
		case "AuthData":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AuthData = nil
			} else {
				if z.AuthData == nil {
					z.AuthData = new(string)
				}
				*z.AuthData, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuthData")
					return
				}
			}
		case "AuthService":
			z.AuthService, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AuthService")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserAuth) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.Password) + 9
	if z.AuthData == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.AuthData)
	}
	s += 12 + msgp.StringPrefixSize + len(z.AuthService)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UserForIndexing) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Username":
			z.Username, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "Nickname":
			z.Nickname, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Nickname")
				return
			}
		case "FirstName":
			z.FirstName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "LastName":
			z.LastName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "Roles":
			z.Roles, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Roles")
				return
			}
		case "CreateAt":
			z.CreateAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CreateAt")
				return
			}
		case "DeleteAt":
			z.DeleteAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "DeleteAt")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UserForIndexing) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "Id"
	err = en.Append(0x88, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Username"
	err = en.Append(0xa8, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Username)
	if err != nil {
		err = msgp.WrapError(err, "Username")
		return
	}
	// write "Nickname"
	err = en.Append(0xa8, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Nickname)
	if err != nil {
		err = msgp.WrapError(err, "Nickname")
		return
	}
	// write "FirstName"
	err = en.Append(0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.FirstName)
	if err != nil {
		err = msgp.WrapError(err, "FirstName")
		return
	}
	// write "LastName"
	err = en.Append(0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.LastName)
	if err != nil {
		err = msgp.WrapError(err, "LastName")
		return
	}
	// write "Roles"
	err = en.Append(0xa5, 0x52, 0x6f, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Roles)
	if err != nil {
		err = msgp.WrapError(err, "Roles")
		return
	}
	// write "CreateAt"
	err = en.Append(0xa8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CreateAt)
	if err != nil {
		err = msgp.WrapError(err, "CreateAt")
		return
	}
	// write "DeleteAt"
	err = en.Append(0xa8, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.DeleteAt)
	if err != nil {
		err = msgp.WrapError(err, "DeleteAt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UserForIndexing) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "Id"
	o = append(o, 0x88, 0xa2, 0x49, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "Username"
	o = append(o, 0xa8, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Username)
	// string "Nickname"
	o = append(o, 0xa8, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Nickname)
	// string "FirstName"
	o = append(o, 0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.FirstName)
	// string "LastName"
	o = append(o, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.LastName)
	// string "Roles"
	o = append(o, 0xa5, 0x52, 0x6f, 0x6c, 0x65, 0x73)
	o = msgp.AppendString(o, z.Roles)
	// string "CreateAt"
	o = append(o, 0xa8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.CreateAt)
	// string "DeleteAt"
	o = append(o, 0xa8, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.DeleteAt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserForIndexing) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Username":
			z.Username, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Username")
				return
			}
		case "Nickname":
			z.Nickname, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nickname")
				return
			}
		case "FirstName":
			z.FirstName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstName")
				return
			}
		case "LastName":
			z.LastName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastName")
				return
			}
		case "Roles":
			z.Roles, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Roles")
				return
			}
		case "CreateAt":
			z.CreateAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateAt")
				return
			}
		case "DeleteAt":
			z.DeleteAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeleteAt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserForIndexing) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.Id) + 9 + msgp.StringPrefixSize + len(z.Username) + 9 + msgp.StringPrefixSize + len(z.Nickname) + 10 + msgp.StringPrefixSize + len(z.FirstName) + 9 + msgp.StringPrefixSize + len(z.LastName) + 6 + msgp.StringPrefixSize + len(z.Roles) + 9 + msgp.Int64Size + 9 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UserMap) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(UserMap, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 *User
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(User)
			}
			err = zb0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z UserMap) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if zb0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = zb0005.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z UserMap) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		if zb0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zb0005.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserMap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(UserMap, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 *User
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			zb0002 = nil
		} else {
			if zb0002 == nil {
				zb0002 = new(User)
			}
			bts, err = zb0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z UserMap) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004)
			if zb0005 == nil {
				s += msgp.NilSize
			} else {
				s += zb0005.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UserPatch) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Username":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Username")
					return
				}
				z.Username = nil
			} else {
				if z.Username == nil {
					z.Username = new(string)
				}
				*z.Username, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Username")
					return
				}
			}
		case "Password":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Password")
					return
				}
				z.Password = nil
			} else {
				if z.Password == nil {
					z.Password = new(string)
				}
				*z.Password, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Password")
					return
				}
			}
		case "Nickname":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Nickname")
					return
				}
				z.Nickname = nil
			} else {
				if z.Nickname == nil {
					z.Nickname = new(string)
				}
				*z.Nickname, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Nickname")
					return
				}
			}
		case "FirstName":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "FirstName")
					return
				}
				z.FirstName = nil
			} else {
				if z.FirstName == nil {
					z.FirstName = new(string)
				}
				*z.FirstName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "FirstName")
					return
				}
			}
		case "LastName":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "LastName")
					return
				}
				z.LastName = nil
			} else {
				if z.LastName == nil {
					z.LastName = new(string)
				}
				*z.LastName, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "LastName")
					return
				}
			}
		case "Email":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Email")
					return
				}
				z.Email = nil
			} else {
				if z.Email == nil {
					z.Email = new(string)
				}
				*z.Email, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Email")
					return
				}
			}
		case "Locale":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Locale")
					return
				}
				z.Locale = nil
			} else {
				if z.Locale == nil {
					z.Locale = new(string)
				}
				*z.Locale, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Locale")
					return
				}
			}
		case "Timezone":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Timezone")
				return
			}
			if z.Timezone == nil {
				z.Timezone = make(StringMap, zb0002)
			} else if len(z.Timezone) > 0 {
				for key := range z.Timezone {
					delete(z.Timezone, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Timezone")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Timezone", za0001)
					return
				}
				z.Timezone[za0001] = za0002
			}
		case "NotifyProps":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "NotifyProps")
				return
			}
			if z.NotifyProps == nil {
				z.NotifyProps = make(StringMap, zb0003)
			} else if len(z.NotifyProps) > 0 {
				for key := range z.NotifyProps {
					delete(z.NotifyProps, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0003 string
				var za0004 string
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "NotifyProps")
					return
				}
				za0004, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "NotifyProps", za0003)
					return
				}
				z.NotifyProps[za0003] = za0004
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UserPatch) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "Username"
	err = en.Append(0x89, 0xa8, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	if z.Username == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.Username)
		if err != nil {
			err = msgp.WrapError(err, "Username")
			return
		}
	}
	// write "Password"
	err = en.Append(0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	if err != nil {
		return
	}
	if z.Password == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.Password)
		if err != nil {
			err = msgp.WrapError(err, "Password")
			return
		}
	}
	// write "Nickname"
	err = en.Append(0xa8, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	if z.Nickname == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.Nickname)
		if err != nil {
			err = msgp.WrapError(err, "Nickname")
			return
		}
	}
	// write "FirstName"
	err = en.Append(0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	if z.FirstName == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.FirstName)
		if err != nil {
			err = msgp.WrapError(err, "FirstName")
			return
		}
	}
	// write "LastName"
	err = en.Append(0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	if z.LastName == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.LastName)
		if err != nil {
			err = msgp.WrapError(err, "LastName")
			return
		}
	}
	// write "Email"
	err = en.Append(0xa5, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	if err != nil {
		return
	}
	if z.Email == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.Email)
		if err != nil {
			err = msgp.WrapError(err, "Email")
			return
		}
	}
	// write "Locale"
	err = en.Append(0xa6, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65)
	if err != nil {
		return
	}
	if z.Locale == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteString(*z.Locale)
		if err != nil {
			err = msgp.WrapError(err, "Locale")
			return
		}
	}
	// write "Timezone"
	err = en.Append(0xa8, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Timezone)))
	if err != nil {
		err = msgp.WrapError(err, "Timezone")
		return
	}
	for za0001, za0002 := range z.Timezone {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Timezone")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Timezone", za0001)
			return
		}
	}
	// write "NotifyProps"
	err = en.Append(0xab, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.NotifyProps)))
	if err != nil {
		err = msgp.WrapError(err, "NotifyProps")
		return
	}
	for za0003, za0004 := range z.NotifyProps {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "NotifyProps")
			return
		}
		err = en.WriteString(za0004)
		if err != nil {
			err = msgp.WrapError(err, "NotifyProps", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UserPatch) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "Username"
	o = append(o, 0x89, 0xa8, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65)
	if z.Username == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.Username)
	}
	// string "Password"
	o = append(o, 0xa8, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64)
	if z.Password == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.Password)
	}
	// string "Nickname"
	o = append(o, 0xa8, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65)
	if z.Nickname == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.Nickname)
	}
	// string "FirstName"
	o = append(o, 0xa9, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if z.FirstName == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.FirstName)
	}
	// string "LastName"
	o = append(o, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if z.LastName == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.LastName)
	}
	// string "Email"
	o = append(o, 0xa5, 0x45, 0x6d, 0x61, 0x69, 0x6c)
	if z.Email == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.Email)
	}
	// string "Locale"
	o = append(o, 0xa6, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65)
	if z.Locale == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendString(o, *z.Locale)
	}
	// string "Timezone"
	o = append(o, 0xa8, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65)
	o = msgp.AppendMapHeader(o, uint32(len(z.Timezone)))
	for za0001, za0002 := range z.Timezone {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "NotifyProps"
	o = append(o, 0xab, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.NotifyProps)))
	for za0003, za0004 := range z.NotifyProps {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendString(o, za0004)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserPatch) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Username":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Username = nil
			} else {
				if z.Username == nil {
					z.Username = new(string)
				}
				*z.Username, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Username")
					return
				}
			}
		case "Password":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Password = nil
			} else {
				if z.Password == nil {
					z.Password = new(string)
				}
				*z.Password, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Password")
					return
				}
			}
		case "Nickname":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Nickname = nil
			} else {
				if z.Nickname == nil {
					z.Nickname = new(string)
				}
				*z.Nickname, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Nickname")
					return
				}
			}
		case "FirstName":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.FirstName = nil
			} else {
				if z.FirstName == nil {
					z.FirstName = new(string)
				}
				*z.FirstName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FirstName")
					return
				}
			}
		case "LastName":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.LastName = nil
			} else {
				if z.LastName == nil {
					z.LastName = new(string)
				}
				*z.LastName, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LastName")
					return
				}
			}
		case "Email":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Email = nil
			} else {
				if z.Email == nil {
					z.Email = new(string)
				}
				*z.Email, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Email")
					return
				}
			}
		case "Locale":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Locale = nil
			} else {
				if z.Locale == nil {
					z.Locale = new(string)
				}
				*z.Locale, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Locale")
					return
				}
			}
		case "Timezone":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timezone")
				return
			}
			if z.Timezone == nil {
				z.Timezone = make(StringMap, zb0002)
			} else if len(z.Timezone) > 0 {
				for key := range z.Timezone {
					delete(z.Timezone, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Timezone")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Timezone", za0001)
					return
				}
				z.Timezone[za0001] = za0002
			}
		case "NotifyProps":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NotifyProps")
				return
			}
			if z.NotifyProps == nil {
				z.NotifyProps = make(StringMap, zb0003)
			} else if len(z.NotifyProps) > 0 {
				for key := range z.NotifyProps {
					delete(z.NotifyProps, key)
				}
			}
			for zb0003 > 0 {
				var za0003 string
				var za0004 string
				zb0003--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NotifyProps")
					return
				}
				za0004, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NotifyProps", za0003)
					return
				}
				z.NotifyProps[za0003] = za0004
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserPatch) Msgsize() (s int) {
	s = 1 + 9
	if z.Username == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Username)
	}
	s += 9
	if z.Password == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Password)
	}
	s += 9
	if z.Nickname == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Nickname)
	}
	s += 10
	if z.FirstName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.FirstName)
	}
	s += 9
	if z.LastName == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.LastName)
	}
	s += 6
	if z.Email == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Email)
	}
	s += 7
	if z.Locale == nil {
		s += msgp.NilSize
	} else {
		s += msgp.StringPrefixSize + len(*z.Locale)
	}
	s += 9 + msgp.MapHeaderSize
	if z.Timezone != nil {
		for za0001, za0002 := range z.Timezone {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 12 + msgp.MapHeaderSize
	if z.NotifyProps != nil {
		for za0003, za0004 := range z.NotifyProps {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.StringPrefixSize + len(za0004)
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UserSlice) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(UserSlice, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(User)
			}
			err = (*z)[zb0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z UserSlice) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		if z[zb0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z[zb0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z UserSlice) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		if z[zb0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z[zb0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserSlice) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(UserSlice, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(User)
			}
			bts, err = (*z)[zb0001].UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z UserSlice) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UserUpdate) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Old":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Old")
					return
				}
				z.Old = nil
			} else {
				if z.Old == nil {
					z.Old = new(User)
				}
				err = z.Old.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Old")
					return
				}
			}
		case "New":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "New")
					return
				}
				z.New = nil
			} else {
				if z.New == nil {
					z.New = new(User)
				}
				err = z.New.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "New")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UserUpdate) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Old"
	err = en.Append(0x82, 0xa3, 0x4f, 0x6c, 0x64)
	if err != nil {
		return
	}
	if z.Old == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Old.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Old")
			return
		}
	}
	// write "New"
	err = en.Append(0xa3, 0x4e, 0x65, 0x77)
	if err != nil {
		return
	}
	if z.New == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.New.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "New")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UserUpdate) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Old"
	o = append(o, 0x82, 0xa3, 0x4f, 0x6c, 0x64)
	if z.Old == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Old.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Old")
			return
		}
	}
	// string "New"
	o = append(o, 0xa3, 0x4e, 0x65, 0x77)
	if z.New == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.New.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "New")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserUpdate) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Old":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Old = nil
			} else {
				if z.Old == nil {
					z.Old = new(User)
				}
				bts, err = z.Old.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Old")
					return
				}
			}
		case "New":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.New = nil
			} else {
				if z.New == nil {
					z.New = new(User)
				}
				bts, err = z.New.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "New")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserUpdate) Msgsize() (s int) {
	s = 1 + 4
	if z.Old == nil {
		s += msgp.NilSize
	} else {
		s += z.Old.Msgsize()
	}
	s += 4
	if z.New == nil {
		s += msgp.NilSize
	} else {
		s += z.New.Msgsize()
	}
	return
}
