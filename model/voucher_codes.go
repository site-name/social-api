// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VoucherCode is an object representing the database table.
type VoucherCode struct {
	ID        string `boil:"id" json:"id" toml:"id" yaml:"id"`
	VoucherID string `boil:"voucher_id" json:"voucher_id" toml:"voucher_id" yaml:"voucher_id"`
	Code      string `boil:"code" json:"code" toml:"code" yaml:"code"`
	Used      int    `boil:"used" json:"used" toml:"used" yaml:"used"`
	IsActive  bool   `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	CreatedAt int64  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *voucherCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voucherCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoucherCodeColumns = struct {
	ID        string
	VoucherID string
	Code      string
	Used      string
	IsActive  string
	CreatedAt string
}{
	ID:        "id",
	VoucherID: "voucher_id",
	Code:      "code",
	Used:      "used",
	IsActive:  "is_active",
	CreatedAt: "created_at",
}

var VoucherCodeTableColumns = struct {
	ID        string
	VoucherID string
	Code      string
	Used      string
	IsActive  string
	CreatedAt string
}{
	ID:        "voucher_codes.id",
	VoucherID: "voucher_codes.voucher_id",
	Code:      "voucher_codes.code",
	Used:      "voucher_codes.used",
	IsActive:  "voucher_codes.is_active",
	CreatedAt: "voucher_codes.created_at",
}

// Generated where

var VoucherCodeWhere = struct {
	ID        whereHelperstring
	VoucherID whereHelperstring
	Code      whereHelperstring
	Used      whereHelperint
	IsActive  whereHelperbool
	CreatedAt whereHelperint64
}{
	ID:        whereHelperstring{field: "\"voucher_codes\".\"id\""},
	VoucherID: whereHelperstring{field: "\"voucher_codes\".\"voucher_id\""},
	Code:      whereHelperstring{field: "\"voucher_codes\".\"code\""},
	Used:      whereHelperint{field: "\"voucher_codes\".\"used\""},
	IsActive:  whereHelperbool{field: "\"voucher_codes\".\"is_active\""},
	CreatedAt: whereHelperint64{field: "\"voucher_codes\".\"created_at\""},
}

// VoucherCodeRels is where relationship names are stored.
var VoucherCodeRels = struct {
	Voucher          string
	VoucherCustomers string
}{
	Voucher:          "Voucher",
	VoucherCustomers: "VoucherCustomers",
}

// voucherCodeR is where relationships are stored.
type voucherCodeR struct {
	Voucher          *Voucher             `boil:"Voucher" json:"Voucher" toml:"Voucher" yaml:"Voucher"`
	VoucherCustomers VoucherCustomerSlice `boil:"VoucherCustomers" json:"VoucherCustomers" toml:"VoucherCustomers" yaml:"VoucherCustomers"`
}

// NewStruct creates a new relationship struct
func (*voucherCodeR) NewStruct() *voucherCodeR {
	return &voucherCodeR{}
}

func (r *voucherCodeR) GetVoucher() *Voucher {
	if r == nil {
		return nil
	}
	return r.Voucher
}

func (r *voucherCodeR) GetVoucherCustomers() VoucherCustomerSlice {
	if r == nil {
		return nil
	}
	return r.VoucherCustomers
}

// voucherCodeL is where Load methods for each relationship are stored.
type voucherCodeL struct{}

var (
	voucherCodeAllColumns            = []string{"id", "voucher_id", "code", "used", "is_active", "created_at"}
	voucherCodeColumnsWithoutDefault = []string{"id", "voucher_id", "code", "created_at"}
	voucherCodeColumnsWithDefault    = []string{"used", "is_active"}
	voucherCodePrimaryKeyColumns     = []string{"id"}
	voucherCodeGeneratedColumns      = []string{}
)

type (
	// VoucherCodeSlice is an alias for a slice of pointers to VoucherCode.
	// This should almost always be used instead of []VoucherCode.
	VoucherCodeSlice []*VoucherCode

	voucherCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voucherCodeType                 = reflect.TypeOf(&VoucherCode{})
	voucherCodeMapping              = queries.MakeStructMapping(voucherCodeType)
	voucherCodePrimaryKeyMapping, _ = queries.BindMapping(voucherCodeType, voucherCodeMapping, voucherCodePrimaryKeyColumns)
	voucherCodeInsertCacheMut       sync.RWMutex
	voucherCodeInsertCache          = make(map[string]insertCache)
	voucherCodeUpdateCacheMut       sync.RWMutex
	voucherCodeUpdateCache          = make(map[string]updateCache)
	voucherCodeUpsertCacheMut       sync.RWMutex
	voucherCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single voucherCode record from the query.
func (q voucherCodeQuery) One(exec boil.Executor) (*VoucherCode, error) {
	o := &VoucherCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for voucher_codes")
	}

	return o, nil
}

// All returns all VoucherCode records from the query.
func (q voucherCodeQuery) All(exec boil.Executor) (VoucherCodeSlice, error) {
	var o []*VoucherCode

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to VoucherCode slice")
	}

	return o, nil
}

// Count returns the count of all VoucherCode records in the query.
func (q voucherCodeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count voucher_codes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voucherCodeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if voucher_codes exists")
	}

	return count > 0, nil
}

// Voucher pointed to by the foreign key.
func (o *VoucherCode) Voucher(mods ...qm.QueryMod) voucherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VoucherID),
	}

	queryMods = append(queryMods, mods...)

	return Vouchers(queryMods...)
}

// VoucherCustomers retrieves all the voucher_customer's VoucherCustomers with an executor.
func (o *VoucherCode) VoucherCustomers(mods ...qm.QueryMod) voucherCustomerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_customers\".\"voucher_code_id\"=?", o.ID),
	)

	return VoucherCustomers(queryMods...)
}

// LoadVoucher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voucherCodeL) LoadVoucher(e boil.Executor, singular bool, maybeVoucherCode interface{}, mods queries.Applicator) error {
	var slice []*VoucherCode
	var object *VoucherCode

	if singular {
		var ok bool
		object, ok = maybeVoucherCode.(*VoucherCode)
		if !ok {
			object = new(VoucherCode)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucherCode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucherCode))
			}
		}
	} else {
		s, ok := maybeVoucherCode.(*[]*VoucherCode)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucherCode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucherCode))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &voucherCodeR{}
		}
		args[object.VoucherID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherCodeR{}
			}

			args[obj.VoucherID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`vouchers`),
		qm.WhereIn(`vouchers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Voucher")
	}

	var resultSlice []*Voucher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Voucher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vouchers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vouchers")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Voucher = foreign
		if foreign.R == nil {
			foreign.R = &voucherR{}
		}
		foreign.R.VoucherCodes = append(foreign.R.VoucherCodes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VoucherID == foreign.ID {
				local.R.Voucher = foreign
				if foreign.R == nil {
					foreign.R = &voucherR{}
				}
				foreign.R.VoucherCodes = append(foreign.R.VoucherCodes, local)
				break
			}
		}
	}

	return nil
}

// LoadVoucherCustomers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (voucherCodeL) LoadVoucherCustomers(e boil.Executor, singular bool, maybeVoucherCode interface{}, mods queries.Applicator) error {
	var slice []*VoucherCode
	var object *VoucherCode

	if singular {
		var ok bool
		object, ok = maybeVoucherCode.(*VoucherCode)
		if !ok {
			object = new(VoucherCode)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucherCode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucherCode))
			}
		}
	} else {
		s, ok := maybeVoucherCode.(*[]*VoucherCode)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucherCode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucherCode))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &voucherCodeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherCodeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`voucher_customers`),
		qm.WhereIn(`voucher_customers.voucher_code_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_customers")
	}

	var resultSlice []*VoucherCustomer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_customers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_customers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_customers")
	}

	if singular {
		object.R.VoucherCustomers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherCustomerR{}
			}
			foreign.R.VoucherCode = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.VoucherCodeID {
				local.R.VoucherCustomers = append(local.R.VoucherCustomers, foreign)
				if foreign.R == nil {
					foreign.R = &voucherCustomerR{}
				}
				foreign.R.VoucherCode = local
				break
			}
		}
	}

	return nil
}

// SetVoucher of the voucherCode to the related item.
// Sets o.R.Voucher to related.
// Adds o to related.R.VoucherCodes.
func (o *VoucherCode) SetVoucher(exec boil.Executor, insert bool, related *Voucher) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"voucher_codes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voucher_id"}),
		strmangle.WhereClause("\"", "\"", 2, voucherCodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VoucherID = related.ID
	if o.R == nil {
		o.R = &voucherCodeR{
			Voucher: related,
		}
	} else {
		o.R.Voucher = related
	}

	if related.R == nil {
		related.R = &voucherR{
			VoucherCodes: VoucherCodeSlice{o},
		}
	} else {
		related.R.VoucherCodes = append(related.R.VoucherCodes, o)
	}

	return nil
}

// AddVoucherCustomers adds the given related objects to the existing relationships
// of the voucher_code, optionally inserting them as new records.
// Appends related to o.R.VoucherCustomers.
// Sets related.R.VoucherCode appropriately.
func (o *VoucherCode) AddVoucherCustomers(exec boil.Executor, insert bool, related ...*VoucherCustomer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.VoucherCodeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_customers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"voucher_code_id"}),
				strmangle.WhereClause("\"", "\"", 2, voucherCustomerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.VoucherCodeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &voucherCodeR{
			VoucherCustomers: related,
		}
	} else {
		o.R.VoucherCustomers = append(o.R.VoucherCustomers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherCustomerR{
				VoucherCode: o,
			}
		} else {
			rel.R.VoucherCode = o
		}
	}
	return nil
}

// VoucherCodes retrieves all the records using an executor.
func VoucherCodes(mods ...qm.QueryMod) voucherCodeQuery {
	mods = append(mods, qm.From("\"voucher_codes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"voucher_codes\".*"})
	}

	return voucherCodeQuery{q}
}

// FindVoucherCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoucherCode(exec boil.Executor, iD string, selectCols ...string) (*VoucherCode, error) {
	voucherCodeObj := &VoucherCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"voucher_codes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, voucherCodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from voucher_codes")
	}

	return voucherCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VoucherCode) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no voucher_codes provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(voucherCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voucherCodeInsertCacheMut.RLock()
	cache, cached := voucherCodeInsertCache[key]
	voucherCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voucherCodeAllColumns,
			voucherCodeColumnsWithDefault,
			voucherCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voucherCodeType, voucherCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voucherCodeType, voucherCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"voucher_codes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"voucher_codes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into voucher_codes")
	}

	if !cached {
		voucherCodeInsertCacheMut.Lock()
		voucherCodeInsertCache[key] = cache
		voucherCodeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the VoucherCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VoucherCode) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	voucherCodeUpdateCacheMut.RLock()
	cache, cached := voucherCodeUpdateCache[key]
	voucherCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voucherCodeAllColumns,
			voucherCodePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update voucher_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"voucher_codes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, voucherCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voucherCodeType, voucherCodeMapping, append(wl, voucherCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update voucher_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for voucher_codes")
	}

	if !cached {
		voucherCodeUpdateCacheMut.Lock()
		voucherCodeUpdateCache[key] = cache
		voucherCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q voucherCodeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for voucher_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for voucher_codes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoucherCodeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"voucher_codes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, voucherCodePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in voucherCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all voucherCode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VoucherCode) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no voucher_codes provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voucherCodeUpsertCacheMut.RLock()
	cache, cached := voucherCodeUpsertCache[key]
	voucherCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			voucherCodeAllColumns,
			voucherCodeColumnsWithDefault,
			voucherCodeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voucherCodeAllColumns,
			voucherCodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert voucher_codes, could not build update column list")
		}

		ret := strmangle.SetComplement(voucherCodeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(voucherCodePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert voucher_codes, could not build conflict column list")
			}

			conflict = make([]string, len(voucherCodePrimaryKeyColumns))
			copy(conflict, voucherCodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"voucher_codes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(voucherCodeType, voucherCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voucherCodeType, voucherCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert voucher_codes")
	}

	if !cached {
		voucherCodeUpsertCacheMut.Lock()
		voucherCodeUpsertCache[key] = cache
		voucherCodeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single VoucherCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VoucherCode) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no VoucherCode provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voucherCodePrimaryKeyMapping)
	sql := "DELETE FROM \"voucher_codes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from voucher_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for voucher_codes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voucherCodeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no voucherCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from voucher_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for voucher_codes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoucherCodeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"voucher_codes\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, voucherCodePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from voucherCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for voucher_codes")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VoucherCode) Reload(exec boil.Executor) error {
	ret, err := FindVoucherCode(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoucherCodeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoucherCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"voucher_codes\".* FROM \"voucher_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in VoucherCodeSlice")
	}

	*o = slice

	return nil
}

// VoucherCodeExists checks if the VoucherCode row exists.
func VoucherCodeExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"voucher_codes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if voucher_codes exists")
	}

	return exists, nil
}

// Exists checks if the VoucherCode row exists.
func (o *VoucherCode) Exists(exec boil.Executor) (bool, error) {
	return VoucherCodeExists(exec, o.ID)
}
