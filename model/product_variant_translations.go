// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductVariantTranslation is an object representing the database table.
type ProductVariantTranslation struct {
	ID               string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageCode     Languagecode `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	ProductVariantID string       `boil:"product_variant_id" json:"product_variant_id" toml:"product_variant_id" yaml:"product_variant_id"`
	Name             string       `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *productVariantTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productVariantTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductVariantTranslationColumns = struct {
	ID               string
	LanguageCode     string
	ProductVariantID string
	Name             string
}{
	ID:               "id",
	LanguageCode:     "language_code",
	ProductVariantID: "product_variant_id",
	Name:             "name",
}

var ProductVariantTranslationTableColumns = struct {
	ID               string
	LanguageCode     string
	ProductVariantID string
	Name             string
}{
	ID:               "product_variant_translations.id",
	LanguageCode:     "product_variant_translations.language_code",
	ProductVariantID: "product_variant_translations.product_variant_id",
	Name:             "product_variant_translations.name",
}

// Generated where

var ProductVariantTranslationWhere = struct {
	ID               whereHelperstring
	LanguageCode     whereHelperLanguagecode
	ProductVariantID whereHelperstring
	Name             whereHelperstring
}{
	ID:               whereHelperstring{field: "\"product_variant_translations\".\"id\""},
	LanguageCode:     whereHelperLanguagecode{field: "\"product_variant_translations\".\"language_code\""},
	ProductVariantID: whereHelperstring{field: "\"product_variant_translations\".\"product_variant_id\""},
	Name:             whereHelperstring{field: "\"product_variant_translations\".\"name\""},
}

// ProductVariantTranslationRels is where relationship names are stored.
var ProductVariantTranslationRels = struct {
	ProductVariant string
}{
	ProductVariant: "ProductVariant",
}

// productVariantTranslationR is where relationships are stored.
type productVariantTranslationR struct {
	ProductVariant *ProductVariant `boil:"ProductVariant" json:"ProductVariant" toml:"ProductVariant" yaml:"ProductVariant"`
}

// NewStruct creates a new relationship struct
func (*productVariantTranslationR) NewStruct() *productVariantTranslationR {
	return &productVariantTranslationR{}
}

func (r *productVariantTranslationR) GetProductVariant() *ProductVariant {
	if r == nil {
		return nil
	}
	return r.ProductVariant
}

// productVariantTranslationL is where Load methods for each relationship are stored.
type productVariantTranslationL struct{}

var (
	productVariantTranslationAllColumns            = []string{"id", "language_code", "product_variant_id", "name"}
	productVariantTranslationColumnsWithoutDefault = []string{"language_code", "product_variant_id", "name"}
	productVariantTranslationColumnsWithDefault    = []string{"id"}
	productVariantTranslationPrimaryKeyColumns     = []string{"id"}
	productVariantTranslationGeneratedColumns      = []string{}
)

type (
	// ProductVariantTranslationSlice is an alias for a slice of pointers to ProductVariantTranslation.
	// This should almost always be used instead of []ProductVariantTranslation.
	ProductVariantTranslationSlice []*ProductVariantTranslation

	productVariantTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productVariantTranslationType                 = reflect.TypeOf(&ProductVariantTranslation{})
	productVariantTranslationMapping              = queries.MakeStructMapping(productVariantTranslationType)
	productVariantTranslationPrimaryKeyMapping, _ = queries.BindMapping(productVariantTranslationType, productVariantTranslationMapping, productVariantTranslationPrimaryKeyColumns)
	productVariantTranslationInsertCacheMut       sync.RWMutex
	productVariantTranslationInsertCache          = make(map[string]insertCache)
	productVariantTranslationUpdateCacheMut       sync.RWMutex
	productVariantTranslationUpdateCache          = make(map[string]updateCache)
	productVariantTranslationUpsertCacheMut       sync.RWMutex
	productVariantTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single productVariantTranslation record from the query.
func (q productVariantTranslationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductVariantTranslation, error) {
	o := &ProductVariantTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for product_variant_translations")
	}

	return o, nil
}

// All returns all ProductVariantTranslation records from the query.
func (q productVariantTranslationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductVariantTranslationSlice, error) {
	var o []*ProductVariantTranslation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ProductVariantTranslation slice")
	}

	return o, nil
}

// Count returns the count of all ProductVariantTranslation records in the query.
func (q productVariantTranslationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count product_variant_translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productVariantTranslationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if product_variant_translations exists")
	}

	return count > 0, nil
}

// ProductVariant pointed to by the foreign key.
func (o *ProductVariantTranslation) ProductVariant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductVariantID),
	}

	queryMods = append(queryMods, mods...)

	return ProductVariants(queryMods...)
}

// LoadProductVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productVariantTranslationL) LoadProductVariant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariantTranslation interface{}, mods queries.Applicator) error {
	var slice []*ProductVariantTranslation
	var object *ProductVariantTranslation

	if singular {
		var ok bool
		object, ok = maybeProductVariantTranslation.(*ProductVariantTranslation)
		if !ok {
			object = new(ProductVariantTranslation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariantTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariantTranslation))
			}
		}
	} else {
		s, ok := maybeProductVariantTranslation.(*[]*ProductVariantTranslation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariantTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariantTranslation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantTranslationR{}
		}
		args = append(args, object.ProductVariantID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantTranslationR{}
			}

			for _, a := range args {
				if a == obj.ProductVariantID {
					continue Outer
				}
			}

			args = append(args, obj.ProductVariantID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductVariant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.ProductVariantTranslations = append(foreign.R.ProductVariantTranslations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductVariantID == foreign.ID {
				local.R.ProductVariant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.ProductVariantTranslations = append(foreign.R.ProductVariantTranslations, local)
				break
			}
		}
	}

	return nil
}

// SetProductVariant of the productVariantTranslation to the related item.
// Sets o.R.ProductVariant to related.
// Adds o to related.R.ProductVariantTranslations.
func (o *ProductVariantTranslation) SetProductVariant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_variant_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_variant_id"}),
		strmangle.WhereClause("\"", "\"", 2, productVariantTranslationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductVariantID = related.ID
	if o.R == nil {
		o.R = &productVariantTranslationR{
			ProductVariant: related,
		}
	} else {
		o.R.ProductVariant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			ProductVariantTranslations: ProductVariantTranslationSlice{o},
		}
	} else {
		related.R.ProductVariantTranslations = append(related.R.ProductVariantTranslations, o)
	}

	return nil
}

// ProductVariantTranslations retrieves all the records using an executor.
func ProductVariantTranslations(mods ...qm.QueryMod) productVariantTranslationQuery {
	mods = append(mods, qm.From("\"product_variant_translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_variant_translations\".*"})
	}

	return productVariantTranslationQuery{q}
}

// FindProductVariantTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductVariantTranslation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ProductVariantTranslation, error) {
	productVariantTranslationObj := &ProductVariantTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_variant_translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productVariantTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from product_variant_translations")
	}

	return productVariantTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductVariantTranslation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_variant_translations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(productVariantTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productVariantTranslationInsertCacheMut.RLock()
	cache, cached := productVariantTranslationInsertCache[key]
	productVariantTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productVariantTranslationAllColumns,
			productVariantTranslationColumnsWithDefault,
			productVariantTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productVariantTranslationType, productVariantTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productVariantTranslationType, productVariantTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_variant_translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_variant_translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into product_variant_translations")
	}

	if !cached {
		productVariantTranslationInsertCacheMut.Lock()
		productVariantTranslationInsertCache[key] = cache
		productVariantTranslationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ProductVariantTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductVariantTranslation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	productVariantTranslationUpdateCacheMut.RLock()
	cache, cached := productVariantTranslationUpdateCache[key]
	productVariantTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productVariantTranslationAllColumns,
			productVariantTranslationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update product_variant_translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_variant_translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productVariantTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productVariantTranslationType, productVariantTranslationMapping, append(wl, productVariantTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update product_variant_translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for product_variant_translations")
	}

	if !cached {
		productVariantTranslationUpdateCacheMut.Lock()
		productVariantTranslationUpdateCache[key] = cache
		productVariantTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q productVariantTranslationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for product_variant_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for product_variant_translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductVariantTranslationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_variant_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productVariantTranslationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in productVariantTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all productVariantTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductVariantTranslation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_variant_translations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(productVariantTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productVariantTranslationUpsertCacheMut.RLock()
	cache, cached := productVariantTranslationUpsertCache[key]
	productVariantTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productVariantTranslationAllColumns,
			productVariantTranslationColumnsWithDefault,
			productVariantTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productVariantTranslationAllColumns,
			productVariantTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert product_variant_translations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productVariantTranslationPrimaryKeyColumns))
			copy(conflict, productVariantTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_variant_translations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productVariantTranslationType, productVariantTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productVariantTranslationType, productVariantTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert product_variant_translations")
	}

	if !cached {
		productVariantTranslationUpsertCacheMut.Lock()
		productVariantTranslationUpsertCache[key] = cache
		productVariantTranslationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ProductVariantTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductVariantTranslation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ProductVariantTranslation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productVariantTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"product_variant_translations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from product_variant_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for product_variant_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productVariantTranslationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no productVariantTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from product_variant_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_variant_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductVariantTranslationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_variant_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productVariantTranslationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from productVariantTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_variant_translations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductVariantTranslation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductVariantTranslation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductVariantTranslationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductVariantTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_variant_translations\".* FROM \"product_variant_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productVariantTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ProductVariantTranslationSlice")
	}

	*o = slice

	return nil
}

// ProductVariantTranslationExists checks if the ProductVariantTranslation row exists.
func ProductVariantTranslationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_variant_translations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if product_variant_translations exists")
	}

	return exists, nil
}

// Exists checks if the ProductVariantTranslation row exists.
func (o *ProductVariantTranslation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductVariantTranslationExists(ctx, exec, o.ID)
}
