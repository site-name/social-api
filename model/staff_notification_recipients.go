// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StaffNotificationRecipient is an object representing the database table.
type StaffNotificationRecipient struct {
	ID         string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     model_types.NullString `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	StaffEmail model_types.NullString `boil:"staff_email" json:"staff_email,omitempty" toml:"staff_email" yaml:"staff_email,omitempty"`
	Active     bool                   `boil:"active" json:"active" toml:"active" yaml:"active"`

	R *staffNotificationRecipientR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L staffNotificationRecipientL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaffNotificationRecipientColumns = struct {
	ID         string
	UserID     string
	StaffEmail string
	Active     string
}{
	ID:         "id",
	UserID:     "user_id",
	StaffEmail: "staff_email",
	Active:     "active",
}

var StaffNotificationRecipientTableColumns = struct {
	ID         string
	UserID     string
	StaffEmail string
	Active     string
}{
	ID:         "staff_notification_recipients.id",
	UserID:     "staff_notification_recipients.user_id",
	StaffEmail: "staff_notification_recipients.staff_email",
	Active:     "staff_notification_recipients.active",
}

// Generated where

var StaffNotificationRecipientWhere = struct {
	ID         whereHelperstring
	UserID     whereHelpermodel_types_NullString
	StaffEmail whereHelpermodel_types_NullString
	Active     whereHelperbool
}{
	ID:         whereHelperstring{field: "\"staff_notification_recipients\".\"id\""},
	UserID:     whereHelpermodel_types_NullString{field: "\"staff_notification_recipients\".\"user_id\""},
	StaffEmail: whereHelpermodel_types_NullString{field: "\"staff_notification_recipients\".\"staff_email\""},
	Active:     whereHelperbool{field: "\"staff_notification_recipients\".\"active\""},
}

// StaffNotificationRecipientRels is where relationship names are stored.
var StaffNotificationRecipientRels = struct {
	User string
}{
	User: "User",
}

// staffNotificationRecipientR is where relationships are stored.
type staffNotificationRecipientR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*staffNotificationRecipientR) NewStruct() *staffNotificationRecipientR {
	return &staffNotificationRecipientR{}
}

func (r *staffNotificationRecipientR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// staffNotificationRecipientL is where Load methods for each relationship are stored.
type staffNotificationRecipientL struct{}

var (
	staffNotificationRecipientAllColumns            = []string{"id", "user_id", "staff_email", "active"}
	staffNotificationRecipientColumnsWithoutDefault = []string{"id", "active"}
	staffNotificationRecipientColumnsWithDefault    = []string{"user_id", "staff_email"}
	staffNotificationRecipientPrimaryKeyColumns     = []string{"id"}
	staffNotificationRecipientGeneratedColumns      = []string{}
)

type (
	// StaffNotificationRecipientSlice is an alias for a slice of pointers to StaffNotificationRecipient.
	// This should almost always be used instead of []StaffNotificationRecipient.
	StaffNotificationRecipientSlice []*StaffNotificationRecipient

	staffNotificationRecipientQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staffNotificationRecipientType                 = reflect.TypeOf(&StaffNotificationRecipient{})
	staffNotificationRecipientMapping              = queries.MakeStructMapping(staffNotificationRecipientType)
	staffNotificationRecipientPrimaryKeyMapping, _ = queries.BindMapping(staffNotificationRecipientType, staffNotificationRecipientMapping, staffNotificationRecipientPrimaryKeyColumns)
	staffNotificationRecipientInsertCacheMut       sync.RWMutex
	staffNotificationRecipientInsertCache          = make(map[string]insertCache)
	staffNotificationRecipientUpdateCacheMut       sync.RWMutex
	staffNotificationRecipientUpdateCache          = make(map[string]updateCache)
	staffNotificationRecipientUpsertCacheMut       sync.RWMutex
	staffNotificationRecipientUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single staffNotificationRecipient record from the query.
func (q staffNotificationRecipientQuery) One(exec boil.Executor) (*StaffNotificationRecipient, error) {
	o := &StaffNotificationRecipient{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for staff_notification_recipients")
	}

	return o, nil
}

// All returns all StaffNotificationRecipient records from the query.
func (q staffNotificationRecipientQuery) All(exec boil.Executor) (StaffNotificationRecipientSlice, error) {
	var o []*StaffNotificationRecipient

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to StaffNotificationRecipient slice")
	}

	return o, nil
}

// Count returns the count of all StaffNotificationRecipient records in the query.
func (q staffNotificationRecipientQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count staff_notification_recipients rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q staffNotificationRecipientQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if staff_notification_recipients exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *StaffNotificationRecipient) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staffNotificationRecipientL) LoadUser(e boil.Executor, singular bool, maybeStaffNotificationRecipient interface{}, mods queries.Applicator) error {
	var slice []*StaffNotificationRecipient
	var object *StaffNotificationRecipient

	if singular {
		var ok bool
		object, ok = maybeStaffNotificationRecipient.(*StaffNotificationRecipient)
		if !ok {
			object = new(StaffNotificationRecipient)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStaffNotificationRecipient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStaffNotificationRecipient))
			}
		}
	} else {
		s, ok := maybeStaffNotificationRecipient.(*[]*StaffNotificationRecipient)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStaffNotificationRecipient)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStaffNotificationRecipient))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &staffNotificationRecipientR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staffNotificationRecipientR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.StaffNotificationRecipients = append(foreign.R.StaffNotificationRecipients, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.StaffNotificationRecipients = append(foreign.R.StaffNotificationRecipients, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the staffNotificationRecipient to the related item.
// Sets o.R.User to related.
// Adds o to related.R.StaffNotificationRecipients.
func (o *StaffNotificationRecipient) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"staff_notification_recipients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, staffNotificationRecipientPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &staffNotificationRecipientR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			StaffNotificationRecipients: StaffNotificationRecipientSlice{o},
		}
	} else {
		related.R.StaffNotificationRecipients = append(related.R.StaffNotificationRecipients, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *StaffNotificationRecipient) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StaffNotificationRecipients {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.StaffNotificationRecipients)
		if ln > 1 && i < ln-1 {
			related.R.StaffNotificationRecipients[i] = related.R.StaffNotificationRecipients[ln-1]
		}
		related.R.StaffNotificationRecipients = related.R.StaffNotificationRecipients[:ln-1]
		break
	}
	return nil
}

// StaffNotificationRecipients retrieves all the records using an executor.
func StaffNotificationRecipients(mods ...qm.QueryMod) staffNotificationRecipientQuery {
	mods = append(mods, qm.From("\"staff_notification_recipients\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"staff_notification_recipients\".*"})
	}

	return staffNotificationRecipientQuery{q}
}

// FindStaffNotificationRecipient retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaffNotificationRecipient(exec boil.Executor, iD string, selectCols ...string) (*StaffNotificationRecipient, error) {
	staffNotificationRecipientObj := &StaffNotificationRecipient{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"staff_notification_recipients\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, staffNotificationRecipientObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from staff_notification_recipients")
	}

	return staffNotificationRecipientObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StaffNotificationRecipient) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no staff_notification_recipients provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(staffNotificationRecipientColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staffNotificationRecipientInsertCacheMut.RLock()
	cache, cached := staffNotificationRecipientInsertCache[key]
	staffNotificationRecipientInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staffNotificationRecipientAllColumns,
			staffNotificationRecipientColumnsWithDefault,
			staffNotificationRecipientColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staffNotificationRecipientType, staffNotificationRecipientMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staffNotificationRecipientType, staffNotificationRecipientMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"staff_notification_recipients\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"staff_notification_recipients\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into staff_notification_recipients")
	}

	if !cached {
		staffNotificationRecipientInsertCacheMut.Lock()
		staffNotificationRecipientInsertCache[key] = cache
		staffNotificationRecipientInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the StaffNotificationRecipient.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StaffNotificationRecipient) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	staffNotificationRecipientUpdateCacheMut.RLock()
	cache, cached := staffNotificationRecipientUpdateCache[key]
	staffNotificationRecipientUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staffNotificationRecipientAllColumns,
			staffNotificationRecipientPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update staff_notification_recipients, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"staff_notification_recipients\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, staffNotificationRecipientPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staffNotificationRecipientType, staffNotificationRecipientMapping, append(wl, staffNotificationRecipientPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update staff_notification_recipients row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for staff_notification_recipients")
	}

	if !cached {
		staffNotificationRecipientUpdateCacheMut.Lock()
		staffNotificationRecipientUpdateCache[key] = cache
		staffNotificationRecipientUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q staffNotificationRecipientQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for staff_notification_recipients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for staff_notification_recipients")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaffNotificationRecipientSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffNotificationRecipientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"staff_notification_recipients\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, staffNotificationRecipientPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in staffNotificationRecipient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all staffNotificationRecipient")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StaffNotificationRecipient) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no staff_notification_recipients provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(staffNotificationRecipientColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staffNotificationRecipientUpsertCacheMut.RLock()
	cache, cached := staffNotificationRecipientUpsertCache[key]
	staffNotificationRecipientUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			staffNotificationRecipientAllColumns,
			staffNotificationRecipientColumnsWithDefault,
			staffNotificationRecipientColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			staffNotificationRecipientAllColumns,
			staffNotificationRecipientPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert staff_notification_recipients, could not build update column list")
		}

		ret := strmangle.SetComplement(staffNotificationRecipientAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(staffNotificationRecipientPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert staff_notification_recipients, could not build conflict column list")
			}

			conflict = make([]string, len(staffNotificationRecipientPrimaryKeyColumns))
			copy(conflict, staffNotificationRecipientPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"staff_notification_recipients\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(staffNotificationRecipientType, staffNotificationRecipientMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staffNotificationRecipientType, staffNotificationRecipientMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert staff_notification_recipients")
	}

	if !cached {
		staffNotificationRecipientUpsertCacheMut.Lock()
		staffNotificationRecipientUpsertCache[key] = cache
		staffNotificationRecipientUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single StaffNotificationRecipient record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StaffNotificationRecipient) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no StaffNotificationRecipient provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staffNotificationRecipientPrimaryKeyMapping)
	sql := "DELETE FROM \"staff_notification_recipients\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from staff_notification_recipients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for staff_notification_recipients")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q staffNotificationRecipientQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no staffNotificationRecipientQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from staff_notification_recipients")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for staff_notification_recipients")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaffNotificationRecipientSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffNotificationRecipientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"staff_notification_recipients\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, staffNotificationRecipientPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from staffNotificationRecipient slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for staff_notification_recipients")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StaffNotificationRecipient) Reload(exec boil.Executor) error {
	ret, err := FindStaffNotificationRecipient(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaffNotificationRecipientSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaffNotificationRecipientSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staffNotificationRecipientPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"staff_notification_recipients\".* FROM \"staff_notification_recipients\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, staffNotificationRecipientPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in StaffNotificationRecipientSlice")
	}

	*o = slice

	return nil
}

// StaffNotificationRecipientExists checks if the StaffNotificationRecipient row exists.
func StaffNotificationRecipientExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"staff_notification_recipients\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if staff_notification_recipients exists")
	}

	return exists, nil
}

// Exists checks if the StaffNotificationRecipient row exists.
func (o *StaffNotificationRecipient) Exists(exec boil.Executor) (bool, error) {
	return StaffNotificationRecipientExists(exec, o.ID)
}
