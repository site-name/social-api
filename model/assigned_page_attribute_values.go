// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssignedPageAttributeValue is an object representing the database table.
type AssignedPageAttributeValue struct {
	ID           string              `boil:"id" json:"id" toml:"id" yaml:"id"`
	ValueID      string              `boil:"value_id" json:"value_id" toml:"value_id" yaml:"value_id"`
	AssignmentID string              `boil:"assignment_id" json:"assignment_id" toml:"assignment_id" yaml:"assignment_id"`
	SortOrder    model_types.NullInt `boil:"sort_order" json:"sort_order,omitempty" toml:"sort_order" yaml:"sort_order,omitempty"`

	R *assignedPageAttributeValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignedPageAttributeValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignedPageAttributeValueColumns = struct {
	ID           string
	ValueID      string
	AssignmentID string
	SortOrder    string
}{
	ID:           "id",
	ValueID:      "value_id",
	AssignmentID: "assignment_id",
	SortOrder:    "sort_order",
}

var AssignedPageAttributeValueTableColumns = struct {
	ID           string
	ValueID      string
	AssignmentID string
	SortOrder    string
}{
	ID:           "assigned_page_attribute_values.id",
	ValueID:      "assigned_page_attribute_values.value_id",
	AssignmentID: "assigned_page_attribute_values.assignment_id",
	SortOrder:    "assigned_page_attribute_values.sort_order",
}

// Generated where

type whereHelpermodel_types_NullInt struct{ field string }

func (w whereHelpermodel_types_NullInt) EQ(x model_types.NullInt) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpermodel_types_NullInt) NEQ(x model_types.NullInt) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpermodel_types_NullInt) LT(x model_types.NullInt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpermodel_types_NullInt) LTE(x model_types.NullInt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpermodel_types_NullInt) GT(x model_types.NullInt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpermodel_types_NullInt) GTE(x model_types.NullInt) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpermodel_types_NullInt) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpermodel_types_NullInt) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var AssignedPageAttributeValueWhere = struct {
	ID           whereHelperstring
	ValueID      whereHelperstring
	AssignmentID whereHelperstring
	SortOrder    whereHelpermodel_types_NullInt
}{
	ID:           whereHelperstring{field: "\"assigned_page_attribute_values\".\"id\""},
	ValueID:      whereHelperstring{field: "\"assigned_page_attribute_values\".\"value_id\""},
	AssignmentID: whereHelperstring{field: "\"assigned_page_attribute_values\".\"assignment_id\""},
	SortOrder:    whereHelpermodel_types_NullInt{field: "\"assigned_page_attribute_values\".\"sort_order\""},
}

// AssignedPageAttributeValueRels is where relationship names are stored.
var AssignedPageAttributeValueRels = struct {
	Assignment string
	Value      string
}{
	Assignment: "Assignment",
	Value:      "Value",
}

// assignedPageAttributeValueR is where relationships are stored.
type assignedPageAttributeValueR struct {
	Assignment *AssignedPageAttribute `boil:"Assignment" json:"Assignment" toml:"Assignment" yaml:"Assignment"`
	Value      *AttributeValue        `boil:"Value" json:"Value" toml:"Value" yaml:"Value"`
}

// NewStruct creates a new relationship struct
func (*assignedPageAttributeValueR) NewStruct() *assignedPageAttributeValueR {
	return &assignedPageAttributeValueR{}
}

func (r *assignedPageAttributeValueR) GetAssignment() *AssignedPageAttribute {
	if r == nil {
		return nil
	}
	return r.Assignment
}

func (r *assignedPageAttributeValueR) GetValue() *AttributeValue {
	if r == nil {
		return nil
	}
	return r.Value
}

// assignedPageAttributeValueL is where Load methods for each relationship are stored.
type assignedPageAttributeValueL struct{}

var (
	assignedPageAttributeValueAllColumns            = []string{"id", "value_id", "assignment_id", "sort_order"}
	assignedPageAttributeValueColumnsWithoutDefault = []string{"id", "value_id", "assignment_id"}
	assignedPageAttributeValueColumnsWithDefault    = []string{"sort_order"}
	assignedPageAttributeValuePrimaryKeyColumns     = []string{"id"}
	assignedPageAttributeValueGeneratedColumns      = []string{}
)

type (
	// AssignedPageAttributeValueSlice is an alias for a slice of pointers to AssignedPageAttributeValue.
	// This should almost always be used instead of []AssignedPageAttributeValue.
	AssignedPageAttributeValueSlice []*AssignedPageAttributeValue

	assignedPageAttributeValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignedPageAttributeValueType                 = reflect.TypeOf(&AssignedPageAttributeValue{})
	assignedPageAttributeValueMapping              = queries.MakeStructMapping(assignedPageAttributeValueType)
	assignedPageAttributeValuePrimaryKeyMapping, _ = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, assignedPageAttributeValuePrimaryKeyColumns)
	assignedPageAttributeValueInsertCacheMut       sync.RWMutex
	assignedPageAttributeValueInsertCache          = make(map[string]insertCache)
	assignedPageAttributeValueUpdateCacheMut       sync.RWMutex
	assignedPageAttributeValueUpdateCache          = make(map[string]updateCache)
	assignedPageAttributeValueUpsertCacheMut       sync.RWMutex
	assignedPageAttributeValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single assignedPageAttributeValue record from the query.
func (q assignedPageAttributeValueQuery) One(exec boil.Executor) (*AssignedPageAttributeValue, error) {
	o := &AssignedPageAttributeValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for assigned_page_attribute_values")
	}

	return o, nil
}

// All returns all AssignedPageAttributeValue records from the query.
func (q assignedPageAttributeValueQuery) All(exec boil.Executor) (AssignedPageAttributeValueSlice, error) {
	var o []*AssignedPageAttributeValue

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to AssignedPageAttributeValue slice")
	}

	return o, nil
}

// Count returns the count of all AssignedPageAttributeValue records in the query.
func (q assignedPageAttributeValueQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count assigned_page_attribute_values rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignedPageAttributeValueQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if assigned_page_attribute_values exists")
	}

	return count > 0, nil
}

// Assignment pointed to by the foreign key.
func (o *AssignedPageAttributeValue) Assignment(mods ...qm.QueryMod) assignedPageAttributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AssignmentID),
	}

	queryMods = append(queryMods, mods...)

	return AssignedPageAttributes(queryMods...)
}

// Value pointed to by the foreign key.
func (o *AssignedPageAttributeValue) Value(mods ...qm.QueryMod) attributeValueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ValueID),
	}

	queryMods = append(queryMods, mods...)

	return AttributeValues(queryMods...)
}

// LoadAssignment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedPageAttributeValueL) LoadAssignment(e boil.Executor, singular bool, maybeAssignedPageAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AssignedPageAttributeValue
	var object *AssignedPageAttributeValue

	if singular {
		var ok bool
		object, ok = maybeAssignedPageAttributeValue.(*AssignedPageAttributeValue)
		if !ok {
			object = new(AssignedPageAttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedPageAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedPageAttributeValue))
			}
		}
	} else {
		s, ok := maybeAssignedPageAttributeValue.(*[]*AssignedPageAttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedPageAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedPageAttributeValue))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &assignedPageAttributeValueR{}
		}
		args[object.AssignmentID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedPageAttributeValueR{}
			}

			args[obj.AssignmentID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`assigned_page_attributes`),
		qm.WhereIn(`assigned_page_attributes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssignedPageAttribute")
	}

	var resultSlice []*AssignedPageAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssignedPageAttribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assigned_page_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_page_attributes")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Assignment = foreign
		if foreign.R == nil {
			foreign.R = &assignedPageAttributeR{}
		}
		foreign.R.AssignmentAssignedPageAttributeValues = append(foreign.R.AssignmentAssignedPageAttributeValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssignmentID == foreign.ID {
				local.R.Assignment = foreign
				if foreign.R == nil {
					foreign.R = &assignedPageAttributeR{}
				}
				foreign.R.AssignmentAssignedPageAttributeValues = append(foreign.R.AssignmentAssignedPageAttributeValues, local)
				break
			}
		}
	}

	return nil
}

// LoadValue allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedPageAttributeValueL) LoadValue(e boil.Executor, singular bool, maybeAssignedPageAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AssignedPageAttributeValue
	var object *AssignedPageAttributeValue

	if singular {
		var ok bool
		object, ok = maybeAssignedPageAttributeValue.(*AssignedPageAttributeValue)
		if !ok {
			object = new(AssignedPageAttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedPageAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedPageAttributeValue))
			}
		}
	} else {
		s, ok := maybeAssignedPageAttributeValue.(*[]*AssignedPageAttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedPageAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedPageAttributeValue))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &assignedPageAttributeValueR{}
		}
		args[object.ValueID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedPageAttributeValueR{}
			}

			args[obj.ValueID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`attribute_values`),
		qm.WhereIn(`attribute_values.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AttributeValue")
	}

	var resultSlice []*AttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AttributeValue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_values")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Value = foreign
		if foreign.R == nil {
			foreign.R = &attributeValueR{}
		}
		foreign.R.ValueAssignedPageAttributeValues = append(foreign.R.ValueAssignedPageAttributeValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ValueID == foreign.ID {
				local.R.Value = foreign
				if foreign.R == nil {
					foreign.R = &attributeValueR{}
				}
				foreign.R.ValueAssignedPageAttributeValues = append(foreign.R.ValueAssignedPageAttributeValues, local)
				break
			}
		}
	}

	return nil
}

// SetAssignment of the assignedPageAttributeValue to the related item.
// Sets o.R.Assignment to related.
// Adds o to related.R.AssignmentAssignedPageAttributeValues.
func (o *AssignedPageAttributeValue) SetAssignment(exec boil.Executor, insert bool, related *AssignedPageAttribute) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_page_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"assignment_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedPageAttributeValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssignmentID = related.ID
	if o.R == nil {
		o.R = &assignedPageAttributeValueR{
			Assignment: related,
		}
	} else {
		o.R.Assignment = related
	}

	if related.R == nil {
		related.R = &assignedPageAttributeR{
			AssignmentAssignedPageAttributeValues: AssignedPageAttributeValueSlice{o},
		}
	} else {
		related.R.AssignmentAssignedPageAttributeValues = append(related.R.AssignmentAssignedPageAttributeValues, o)
	}

	return nil
}

// SetValue of the assignedPageAttributeValue to the related item.
// Sets o.R.Value to related.
// Adds o to related.R.ValueAssignedPageAttributeValues.
func (o *AssignedPageAttributeValue) SetValue(exec boil.Executor, insert bool, related *AttributeValue) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_page_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"value_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedPageAttributeValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ValueID = related.ID
	if o.R == nil {
		o.R = &assignedPageAttributeValueR{
			Value: related,
		}
	} else {
		o.R.Value = related
	}

	if related.R == nil {
		related.R = &attributeValueR{
			ValueAssignedPageAttributeValues: AssignedPageAttributeValueSlice{o},
		}
	} else {
		related.R.ValueAssignedPageAttributeValues = append(related.R.ValueAssignedPageAttributeValues, o)
	}

	return nil
}

// AssignedPageAttributeValues retrieves all the records using an executor.
func AssignedPageAttributeValues(mods ...qm.QueryMod) assignedPageAttributeValueQuery {
	mods = append(mods, qm.From("\"assigned_page_attribute_values\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assigned_page_attribute_values\".*"})
	}

	return assignedPageAttributeValueQuery{q}
}

// FindAssignedPageAttributeValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignedPageAttributeValue(exec boil.Executor, iD string, selectCols ...string) (*AssignedPageAttributeValue, error) {
	assignedPageAttributeValueObj := &AssignedPageAttributeValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assigned_page_attribute_values\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, assignedPageAttributeValueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from assigned_page_attribute_values")
	}

	return assignedPageAttributeValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssignedPageAttributeValue) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no assigned_page_attribute_values provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(assignedPageAttributeValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignedPageAttributeValueInsertCacheMut.RLock()
	cache, cached := assignedPageAttributeValueInsertCache[key]
	assignedPageAttributeValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignedPageAttributeValueAllColumns,
			assignedPageAttributeValueColumnsWithDefault,
			assignedPageAttributeValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assigned_page_attribute_values\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assigned_page_attribute_values\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into assigned_page_attribute_values")
	}

	if !cached {
		assignedPageAttributeValueInsertCacheMut.Lock()
		assignedPageAttributeValueInsertCache[key] = cache
		assignedPageAttributeValueInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AssignedPageAttributeValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssignedPageAttributeValue) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	assignedPageAttributeValueUpdateCacheMut.RLock()
	cache, cached := assignedPageAttributeValueUpdateCache[key]
	assignedPageAttributeValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignedPageAttributeValueAllColumns,
			assignedPageAttributeValuePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update assigned_page_attribute_values, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assigned_page_attribute_values\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignedPageAttributeValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, append(wl, assignedPageAttributeValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update assigned_page_attribute_values row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for assigned_page_attribute_values")
	}

	if !cached {
		assignedPageAttributeValueUpdateCacheMut.Lock()
		assignedPageAttributeValueUpdateCache[key] = cache
		assignedPageAttributeValueUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q assignedPageAttributeValueQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for assigned_page_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for assigned_page_attribute_values")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignedPageAttributeValueSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPageAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assigned_page_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignedPageAttributeValuePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in assignedPageAttributeValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all assignedPageAttributeValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssignedPageAttributeValue) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no assigned_page_attribute_values provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedPageAttributeValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignedPageAttributeValueUpsertCacheMut.RLock()
	cache, cached := assignedPageAttributeValueUpsertCache[key]
	assignedPageAttributeValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			assignedPageAttributeValueAllColumns,
			assignedPageAttributeValueColumnsWithDefault,
			assignedPageAttributeValueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignedPageAttributeValueAllColumns,
			assignedPageAttributeValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert assigned_page_attribute_values, could not build update column list")
		}

		ret := strmangle.SetComplement(assignedPageAttributeValueAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(assignedPageAttributeValuePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert assigned_page_attribute_values, could not build conflict column list")
			}

			conflict = make([]string, len(assignedPageAttributeValuePrimaryKeyColumns))
			copy(conflict, assignedPageAttributeValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"assigned_page_attribute_values\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert assigned_page_attribute_values")
	}

	if !cached {
		assignedPageAttributeValueUpsertCacheMut.Lock()
		assignedPageAttributeValueUpsertCache[key] = cache
		assignedPageAttributeValueUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AssignedPageAttributeValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssignedPageAttributeValue) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no AssignedPageAttributeValue provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignedPageAttributeValuePrimaryKeyMapping)
	sql := "DELETE FROM \"assigned_page_attribute_values\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from assigned_page_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for assigned_page_attribute_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignedPageAttributeValueQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no assignedPageAttributeValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from assigned_page_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for assigned_page_attribute_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignedPageAttributeValueSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPageAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assigned_page_attribute_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedPageAttributeValuePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from assignedPageAttributeValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for assigned_page_attribute_values")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssignedPageAttributeValue) Reload(exec boil.Executor) error {
	ret, err := FindAssignedPageAttributeValue(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignedPageAttributeValueSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignedPageAttributeValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPageAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assigned_page_attribute_values\".* FROM \"assigned_page_attribute_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedPageAttributeValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in AssignedPageAttributeValueSlice")
	}

	*o = slice

	return nil
}

// AssignedPageAttributeValueExists checks if the AssignedPageAttributeValue row exists.
func AssignedPageAttributeValueExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assigned_page_attribute_values\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if assigned_page_attribute_values exists")
	}

	return exists, nil
}

// Exists checks if the AssignedPageAttributeValue row exists.
func (o *AssignedPageAttributeValue) Exists(exec boil.Executor) (bool, error) {
	return AssignedPageAttributeValueExists(exec, o.ID)
}
