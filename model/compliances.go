// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Compliance is an object representing the database table.
type Compliance struct {
	ID        string           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt int64            `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UserID    string           `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Status    ComplianceStatus `boil:"status" json:"status" toml:"status" yaml:"status"`
	Count     int              `boil:"count" json:"count" toml:"count" yaml:"count"`
	Desc      string           `boil:"desc" json:"desc" toml:"desc" yaml:"desc"`
	Type      ComplianceType   `boil:"type" json:"type" toml:"type" yaml:"type"`
	StartAt   int64            `boil:"start_at" json:"start_at" toml:"start_at" yaml:"start_at"`
	EndAt     int64            `boil:"end_at" json:"end_at" toml:"end_at" yaml:"end_at"`
	Keywords  string           `boil:"keywords" json:"keywords" toml:"keywords" yaml:"keywords"`
	Emails    string           `boil:"emails" json:"emails" toml:"emails" yaml:"emails"`

	R *complianceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L complianceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ComplianceColumns = struct {
	ID        string
	CreatedAt string
	UserID    string
	Status    string
	Count     string
	Desc      string
	Type      string
	StartAt   string
	EndAt     string
	Keywords  string
	Emails    string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UserID:    "user_id",
	Status:    "status",
	Count:     "count",
	Desc:      "desc",
	Type:      "type",
	StartAt:   "start_at",
	EndAt:     "end_at",
	Keywords:  "keywords",
	Emails:    "emails",
}

var ComplianceTableColumns = struct {
	ID        string
	CreatedAt string
	UserID    string
	Status    string
	Count     string
	Desc      string
	Type      string
	StartAt   string
	EndAt     string
	Keywords  string
	Emails    string
}{
	ID:        "compliances.id",
	CreatedAt: "compliances.created_at",
	UserID:    "compliances.user_id",
	Status:    "compliances.status",
	Count:     "compliances.count",
	Desc:      "compliances.desc",
	Type:      "compliances.type",
	StartAt:   "compliances.start_at",
	EndAt:     "compliances.end_at",
	Keywords:  "compliances.keywords",
	Emails:    "compliances.emails",
}

// Generated where

type whereHelperComplianceStatus struct{ field string }

func (w whereHelperComplianceStatus) EQ(x ComplianceStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperComplianceStatus) NEQ(x ComplianceStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperComplianceStatus) LT(x ComplianceStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperComplianceStatus) LTE(x ComplianceStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperComplianceStatus) GT(x ComplianceStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperComplianceStatus) GTE(x ComplianceStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperComplianceStatus) IN(slice []ComplianceStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperComplianceStatus) NIN(slice []ComplianceStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperComplianceType struct{ field string }

func (w whereHelperComplianceType) EQ(x ComplianceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperComplianceType) NEQ(x ComplianceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperComplianceType) LT(x ComplianceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperComplianceType) LTE(x ComplianceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperComplianceType) GT(x ComplianceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperComplianceType) GTE(x ComplianceType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperComplianceType) IN(slice []ComplianceType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperComplianceType) NIN(slice []ComplianceType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ComplianceWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelperint64
	UserID    whereHelperstring
	Status    whereHelperComplianceStatus
	Count     whereHelperint
	Desc      whereHelperstring
	Type      whereHelperComplianceType
	StartAt   whereHelperint64
	EndAt     whereHelperint64
	Keywords  whereHelperstring
	Emails    whereHelperstring
}{
	ID:        whereHelperstring{field: "\"compliances\".\"id\""},
	CreatedAt: whereHelperint64{field: "\"compliances\".\"created_at\""},
	UserID:    whereHelperstring{field: "\"compliances\".\"user_id\""},
	Status:    whereHelperComplianceStatus{field: "\"compliances\".\"status\""},
	Count:     whereHelperint{field: "\"compliances\".\"count\""},
	Desc:      whereHelperstring{field: "\"compliances\".\"desc\""},
	Type:      whereHelperComplianceType{field: "\"compliances\".\"type\""},
	StartAt:   whereHelperint64{field: "\"compliances\".\"start_at\""},
	EndAt:     whereHelperint64{field: "\"compliances\".\"end_at\""},
	Keywords:  whereHelperstring{field: "\"compliances\".\"keywords\""},
	Emails:    whereHelperstring{field: "\"compliances\".\"emails\""},
}

// ComplianceRels is where relationship names are stored.
var ComplianceRels = struct {
	User string
}{
	User: "User",
}

// complianceR is where relationships are stored.
type complianceR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*complianceR) NewStruct() *complianceR {
	return &complianceR{}
}

func (r *complianceR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// complianceL is where Load methods for each relationship are stored.
type complianceL struct{}

var (
	complianceAllColumns            = []string{"id", "created_at", "user_id", "status", "count", "desc", "type", "start_at", "end_at", "keywords", "emails"}
	complianceColumnsWithoutDefault = []string{"created_at", "user_id", "status", "count", "desc", "type", "start_at", "end_at", "keywords", "emails"}
	complianceColumnsWithDefault    = []string{"id"}
	compliancePrimaryKeyColumns     = []string{"id"}
	complianceGeneratedColumns      = []string{}
)

type (
	// ComplianceSlice is an alias for a slice of pointers to Compliance.
	// This should almost always be used instead of []Compliance.
	ComplianceSlice []*Compliance

	complianceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	complianceType                 = reflect.TypeOf(&Compliance{})
	complianceMapping              = queries.MakeStructMapping(complianceType)
	compliancePrimaryKeyMapping, _ = queries.BindMapping(complianceType, complianceMapping, compliancePrimaryKeyColumns)
	complianceInsertCacheMut       sync.RWMutex
	complianceInsertCache          = make(map[string]insertCache)
	complianceUpdateCacheMut       sync.RWMutex
	complianceUpdateCache          = make(map[string]updateCache)
	complianceUpsertCacheMut       sync.RWMutex
	complianceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single compliance record from the query.
func (q complianceQuery) One(exec boil.Executor) (*Compliance, error) {
	o := &Compliance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for compliances")
	}

	return o, nil
}

// All returns all Compliance records from the query.
func (q complianceQuery) All(exec boil.Executor) (ComplianceSlice, error) {
	var o []*Compliance

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Compliance slice")
	}

	return o, nil
}

// Count returns the count of all Compliance records in the query.
func (q complianceQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count compliances rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q complianceQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if compliances exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Compliance) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (complianceL) LoadUser(e boil.Executor, singular bool, maybeCompliance interface{}, mods queries.Applicator) error {
	var slice []*Compliance
	var object *Compliance

	if singular {
		var ok bool
		object, ok = maybeCompliance.(*Compliance)
		if !ok {
			object = new(Compliance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCompliance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCompliance))
			}
		}
	} else {
		s, ok := maybeCompliance.(*[]*Compliance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCompliance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCompliance))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &complianceR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &complianceR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Compliances = append(foreign.R.Compliances, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Compliances = append(foreign.R.Compliances, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the compliance to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Compliances.
func (o *Compliance) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"compliances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, compliancePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &complianceR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Compliances: ComplianceSlice{o},
		}
	} else {
		related.R.Compliances = append(related.R.Compliances, o)
	}

	return nil
}

// Compliances retrieves all the records using an executor.
func Compliances(mods ...qm.QueryMod) complianceQuery {
	mods = append(mods, qm.From("\"compliances\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"compliances\".*"})
	}

	return complianceQuery{q}
}

// FindCompliance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCompliance(exec boil.Executor, iD string, selectCols ...string) (*Compliance, error) {
	complianceObj := &Compliance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"compliances\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, complianceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from compliances")
	}

	return complianceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Compliance) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no compliances provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(complianceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	complianceInsertCacheMut.RLock()
	cache, cached := complianceInsertCache[key]
	complianceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			complianceAllColumns,
			complianceColumnsWithDefault,
			complianceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(complianceType, complianceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(complianceType, complianceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"compliances\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"compliances\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into compliances")
	}

	if !cached {
		complianceInsertCacheMut.Lock()
		complianceInsertCache[key] = cache
		complianceInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Compliance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Compliance) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	complianceUpdateCacheMut.RLock()
	cache, cached := complianceUpdateCache[key]
	complianceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			complianceAllColumns,
			compliancePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update compliances, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"compliances\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, compliancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(complianceType, complianceMapping, append(wl, compliancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update compliances row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for compliances")
	}

	if !cached {
		complianceUpdateCacheMut.Lock()
		complianceUpdateCache[key] = cache
		complianceUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q complianceQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for compliances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for compliances")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ComplianceSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compliancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"compliances\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, compliancePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in compliance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all compliance")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Compliance) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no compliances provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(complianceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	complianceUpsertCacheMut.RLock()
	cache, cached := complianceUpsertCache[key]
	complianceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			complianceAllColumns,
			complianceColumnsWithDefault,
			complianceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			complianceAllColumns,
			compliancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert compliances, could not build update column list")
		}

		ret := strmangle.SetComplement(complianceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(compliancePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert compliances, could not build conflict column list")
			}

			conflict = make([]string, len(compliancePrimaryKeyColumns))
			copy(conflict, compliancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"compliances\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(complianceType, complianceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(complianceType, complianceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert compliances")
	}

	if !cached {
		complianceUpsertCacheMut.Lock()
		complianceUpsertCache[key] = cache
		complianceUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Compliance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Compliance) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Compliance provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), compliancePrimaryKeyMapping)
	sql := "DELETE FROM \"compliances\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from compliances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for compliances")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q complianceQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no complianceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from compliances")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for compliances")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ComplianceSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compliancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"compliances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, compliancePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from compliance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for compliances")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Compliance) Reload(exec boil.Executor) error {
	ret, err := FindCompliance(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ComplianceSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ComplianceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), compliancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"compliances\".* FROM \"compliances\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, compliancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ComplianceSlice")
	}

	*o = slice

	return nil
}

// ComplianceExists checks if the Compliance row exists.
func ComplianceExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"compliances\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if compliances exists")
	}

	return exists, nil
}

// Exists checks if the Compliance row exists.
func (o *Compliance) Exists(exec boil.Executor) (bool, error) {
	return ComplianceExists(exec, o.ID)
}
