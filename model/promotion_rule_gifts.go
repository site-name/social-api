// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PromotionRuleGift is an object representing the database table.
type PromotionRuleGift struct {
	ID               string `boil:"id" json:"id" toml:"id" yaml:"id"`
	PromotionRuleID  string `boil:"promotion_rule_id" json:"promotion_rule_id" toml:"promotion_rule_id" yaml:"promotion_rule_id"`
	ProductVariantID string `boil:"product_variant_id" json:"product_variant_id" toml:"product_variant_id" yaml:"product_variant_id"`

	R *promotionRuleGiftR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L promotionRuleGiftL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PromotionRuleGiftColumns = struct {
	ID               string
	PromotionRuleID  string
	ProductVariantID string
}{
	ID:               "id",
	PromotionRuleID:  "promotion_rule_id",
	ProductVariantID: "product_variant_id",
}

var PromotionRuleGiftTableColumns = struct {
	ID               string
	PromotionRuleID  string
	ProductVariantID string
}{
	ID:               "promotion_rule_gifts.id",
	PromotionRuleID:  "promotion_rule_gifts.promotion_rule_id",
	ProductVariantID: "promotion_rule_gifts.product_variant_id",
}

// Generated where

var PromotionRuleGiftWhere = struct {
	ID               whereHelperstring
	PromotionRuleID  whereHelperstring
	ProductVariantID whereHelperstring
}{
	ID:               whereHelperstring{field: "\"promotion_rule_gifts\".\"id\""},
	PromotionRuleID:  whereHelperstring{field: "\"promotion_rule_gifts\".\"promotion_rule_id\""},
	ProductVariantID: whereHelperstring{field: "\"promotion_rule_gifts\".\"product_variant_id\""},
}

// PromotionRuleGiftRels is where relationship names are stored.
var PromotionRuleGiftRels = struct {
	ProductVariant string
	PromotionRule  string
}{
	ProductVariant: "ProductVariant",
	PromotionRule:  "PromotionRule",
}

// promotionRuleGiftR is where relationships are stored.
type promotionRuleGiftR struct {
	ProductVariant *ProductVariant `boil:"ProductVariant" json:"ProductVariant" toml:"ProductVariant" yaml:"ProductVariant"`
	PromotionRule  *PromotionRule  `boil:"PromotionRule" json:"PromotionRule" toml:"PromotionRule" yaml:"PromotionRule"`
}

// NewStruct creates a new relationship struct
func (*promotionRuleGiftR) NewStruct() *promotionRuleGiftR {
	return &promotionRuleGiftR{}
}

func (r *promotionRuleGiftR) GetProductVariant() *ProductVariant {
	if r == nil {
		return nil
	}
	return r.ProductVariant
}

func (r *promotionRuleGiftR) GetPromotionRule() *PromotionRule {
	if r == nil {
		return nil
	}
	return r.PromotionRule
}

// promotionRuleGiftL is where Load methods for each relationship are stored.
type promotionRuleGiftL struct{}

var (
	promotionRuleGiftAllColumns            = []string{"id", "promotion_rule_id", "product_variant_id"}
	promotionRuleGiftColumnsWithoutDefault = []string{"id", "promotion_rule_id", "product_variant_id"}
	promotionRuleGiftColumnsWithDefault    = []string{}
	promotionRuleGiftPrimaryKeyColumns     = []string{"id"}
	promotionRuleGiftGeneratedColumns      = []string{}
)

type (
	// PromotionRuleGiftSlice is an alias for a slice of pointers to PromotionRuleGift.
	// This should almost always be used instead of []PromotionRuleGift.
	PromotionRuleGiftSlice []*PromotionRuleGift

	promotionRuleGiftQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	promotionRuleGiftType                 = reflect.TypeOf(&PromotionRuleGift{})
	promotionRuleGiftMapping              = queries.MakeStructMapping(promotionRuleGiftType)
	promotionRuleGiftPrimaryKeyMapping, _ = queries.BindMapping(promotionRuleGiftType, promotionRuleGiftMapping, promotionRuleGiftPrimaryKeyColumns)
	promotionRuleGiftInsertCacheMut       sync.RWMutex
	promotionRuleGiftInsertCache          = make(map[string]insertCache)
	promotionRuleGiftUpdateCacheMut       sync.RWMutex
	promotionRuleGiftUpdateCache          = make(map[string]updateCache)
	promotionRuleGiftUpsertCacheMut       sync.RWMutex
	promotionRuleGiftUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single promotionRuleGift record from the query.
func (q promotionRuleGiftQuery) One(exec boil.Executor) (*PromotionRuleGift, error) {
	o := &PromotionRuleGift{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for promotion_rule_gifts")
	}

	return o, nil
}

// All returns all PromotionRuleGift records from the query.
func (q promotionRuleGiftQuery) All(exec boil.Executor) (PromotionRuleGiftSlice, error) {
	var o []*PromotionRuleGift

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to PromotionRuleGift slice")
	}

	return o, nil
}

// Count returns the count of all PromotionRuleGift records in the query.
func (q promotionRuleGiftQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count promotion_rule_gifts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q promotionRuleGiftQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if promotion_rule_gifts exists")
	}

	return count > 0, nil
}

// ProductVariant pointed to by the foreign key.
func (o *PromotionRuleGift) ProductVariant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductVariantID),
	}

	queryMods = append(queryMods, mods...)

	return ProductVariants(queryMods...)
}

// PromotionRule pointed to by the foreign key.
func (o *PromotionRuleGift) PromotionRule(mods ...qm.QueryMod) promotionRuleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PromotionRuleID),
	}

	queryMods = append(queryMods, mods...)

	return PromotionRules(queryMods...)
}

// LoadProductVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (promotionRuleGiftL) LoadProductVariant(e boil.Executor, singular bool, maybePromotionRuleGift interface{}, mods queries.Applicator) error {
	var slice []*PromotionRuleGift
	var object *PromotionRuleGift

	if singular {
		var ok bool
		object, ok = maybePromotionRuleGift.(*PromotionRuleGift)
		if !ok {
			object = new(PromotionRuleGift)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRuleGift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRuleGift))
			}
		}
	} else {
		s, ok := maybePromotionRuleGift.(*[]*PromotionRuleGift)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRuleGift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRuleGift))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleGiftR{}
		}
		args[object.ProductVariantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleGiftR{}
			}

			args[obj.ProductVariantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductVariant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.PromotionRuleGifts = append(foreign.R.PromotionRuleGifts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductVariantID == foreign.ID {
				local.R.ProductVariant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.PromotionRuleGifts = append(foreign.R.PromotionRuleGifts, local)
				break
			}
		}
	}

	return nil
}

// LoadPromotionRule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (promotionRuleGiftL) LoadPromotionRule(e boil.Executor, singular bool, maybePromotionRuleGift interface{}, mods queries.Applicator) error {
	var slice []*PromotionRuleGift
	var object *PromotionRuleGift

	if singular {
		var ok bool
		object, ok = maybePromotionRuleGift.(*PromotionRuleGift)
		if !ok {
			object = new(PromotionRuleGift)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionRuleGift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionRuleGift))
			}
		}
	} else {
		s, ok := maybePromotionRuleGift.(*[]*PromotionRuleGift)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionRuleGift)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionRuleGift))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionRuleGiftR{}
		}
		args[object.PromotionRuleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionRuleGiftR{}
			}

			args[obj.PromotionRuleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`promotion_rules`),
		qm.WhereIn(`promotion_rules.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PromotionRule")
	}

	var resultSlice []*PromotionRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PromotionRule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for promotion_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for promotion_rules")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PromotionRule = foreign
		if foreign.R == nil {
			foreign.R = &promotionRuleR{}
		}
		foreign.R.PromotionRuleGifts = append(foreign.R.PromotionRuleGifts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PromotionRuleID == foreign.ID {
				local.R.PromotionRule = foreign
				if foreign.R == nil {
					foreign.R = &promotionRuleR{}
				}
				foreign.R.PromotionRuleGifts = append(foreign.R.PromotionRuleGifts, local)
				break
			}
		}
	}

	return nil
}

// SetProductVariant of the promotionRuleGift to the related item.
// Sets o.R.ProductVariant to related.
// Adds o to related.R.PromotionRuleGifts.
func (o *PromotionRuleGift) SetProductVariant(exec boil.Executor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"promotion_rule_gifts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_variant_id"}),
		strmangle.WhereClause("\"", "\"", 2, promotionRuleGiftPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductVariantID = related.ID
	if o.R == nil {
		o.R = &promotionRuleGiftR{
			ProductVariant: related,
		}
	} else {
		o.R.ProductVariant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			PromotionRuleGifts: PromotionRuleGiftSlice{o},
		}
	} else {
		related.R.PromotionRuleGifts = append(related.R.PromotionRuleGifts, o)
	}

	return nil
}

// SetPromotionRule of the promotionRuleGift to the related item.
// Sets o.R.PromotionRule to related.
// Adds o to related.R.PromotionRuleGifts.
func (o *PromotionRuleGift) SetPromotionRule(exec boil.Executor, insert bool, related *PromotionRule) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"promotion_rule_gifts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
		strmangle.WhereClause("\"", "\"", 2, promotionRuleGiftPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PromotionRuleID = related.ID
	if o.R == nil {
		o.R = &promotionRuleGiftR{
			PromotionRule: related,
		}
	} else {
		o.R.PromotionRule = related
	}

	if related.R == nil {
		related.R = &promotionRuleR{
			PromotionRuleGifts: PromotionRuleGiftSlice{o},
		}
	} else {
		related.R.PromotionRuleGifts = append(related.R.PromotionRuleGifts, o)
	}

	return nil
}

// PromotionRuleGifts retrieves all the records using an executor.
func PromotionRuleGifts(mods ...qm.QueryMod) promotionRuleGiftQuery {
	mods = append(mods, qm.From("\"promotion_rule_gifts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"promotion_rule_gifts\".*"})
	}

	return promotionRuleGiftQuery{q}
}

// FindPromotionRuleGift retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPromotionRuleGift(exec boil.Executor, iD string, selectCols ...string) (*PromotionRuleGift, error) {
	promotionRuleGiftObj := &PromotionRuleGift{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"promotion_rule_gifts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, promotionRuleGiftObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from promotion_rule_gifts")
	}

	return promotionRuleGiftObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PromotionRuleGift) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no promotion_rule_gifts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(promotionRuleGiftColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	promotionRuleGiftInsertCacheMut.RLock()
	cache, cached := promotionRuleGiftInsertCache[key]
	promotionRuleGiftInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			promotionRuleGiftAllColumns,
			promotionRuleGiftColumnsWithDefault,
			promotionRuleGiftColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(promotionRuleGiftType, promotionRuleGiftMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(promotionRuleGiftType, promotionRuleGiftMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"promotion_rule_gifts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"promotion_rule_gifts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into promotion_rule_gifts")
	}

	if !cached {
		promotionRuleGiftInsertCacheMut.Lock()
		promotionRuleGiftInsertCache[key] = cache
		promotionRuleGiftInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PromotionRuleGift.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PromotionRuleGift) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	promotionRuleGiftUpdateCacheMut.RLock()
	cache, cached := promotionRuleGiftUpdateCache[key]
	promotionRuleGiftUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			promotionRuleGiftAllColumns,
			promotionRuleGiftPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update promotion_rule_gifts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"promotion_rule_gifts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, promotionRuleGiftPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(promotionRuleGiftType, promotionRuleGiftMapping, append(wl, promotionRuleGiftPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update promotion_rule_gifts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for promotion_rule_gifts")
	}

	if !cached {
		promotionRuleGiftUpdateCacheMut.Lock()
		promotionRuleGiftUpdateCache[key] = cache
		promotionRuleGiftUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q promotionRuleGiftQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for promotion_rule_gifts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for promotion_rule_gifts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PromotionRuleGiftSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionRuleGiftPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"promotion_rule_gifts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, promotionRuleGiftPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in promotionRuleGift slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all promotionRuleGift")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PromotionRuleGift) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no promotion_rule_gifts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(promotionRuleGiftColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	promotionRuleGiftUpsertCacheMut.RLock()
	cache, cached := promotionRuleGiftUpsertCache[key]
	promotionRuleGiftUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			promotionRuleGiftAllColumns,
			promotionRuleGiftColumnsWithDefault,
			promotionRuleGiftColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			promotionRuleGiftAllColumns,
			promotionRuleGiftPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert promotion_rule_gifts, could not build update column list")
		}

		ret := strmangle.SetComplement(promotionRuleGiftAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(promotionRuleGiftPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert promotion_rule_gifts, could not build conflict column list")
			}

			conflict = make([]string, len(promotionRuleGiftPrimaryKeyColumns))
			copy(conflict, promotionRuleGiftPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"promotion_rule_gifts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(promotionRuleGiftType, promotionRuleGiftMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(promotionRuleGiftType, promotionRuleGiftMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert promotion_rule_gifts")
	}

	if !cached {
		promotionRuleGiftUpsertCacheMut.Lock()
		promotionRuleGiftUpsertCache[key] = cache
		promotionRuleGiftUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PromotionRuleGift record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PromotionRuleGift) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no PromotionRuleGift provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), promotionRuleGiftPrimaryKeyMapping)
	sql := "DELETE FROM \"promotion_rule_gifts\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from promotion_rule_gifts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for promotion_rule_gifts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q promotionRuleGiftQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no promotionRuleGiftQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from promotion_rule_gifts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for promotion_rule_gifts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PromotionRuleGiftSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionRuleGiftPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"promotion_rule_gifts\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, promotionRuleGiftPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from promotionRuleGift slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for promotion_rule_gifts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PromotionRuleGift) Reload(exec boil.Executor) error {
	ret, err := FindPromotionRuleGift(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PromotionRuleGiftSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PromotionRuleGiftSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionRuleGiftPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"promotion_rule_gifts\".* FROM \"promotion_rule_gifts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, promotionRuleGiftPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PromotionRuleGiftSlice")
	}

	*o = slice

	return nil
}

// PromotionRuleGiftExists checks if the PromotionRuleGift row exists.
func PromotionRuleGiftExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"promotion_rule_gifts\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if promotion_rule_gifts exists")
	}

	return exists, nil
}

// Exists checks if the PromotionRuleGift row exists.
func (o *PromotionRuleGift) Exists(exec boil.Executor) (bool, error) {
	return PromotionRuleGiftExists(exec, o.ID)
}
