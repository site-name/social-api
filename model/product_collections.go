// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductCollection is an object representing the database table.
type ProductCollection struct {
	ID           string `boil:"id" json:"id" toml:"id" yaml:"id"`
	CollectionID string `boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	ProductID    string `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`

	R *productCollectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productCollectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductCollectionColumns = struct {
	ID           string
	CollectionID string
	ProductID    string
}{
	ID:           "id",
	CollectionID: "collection_id",
	ProductID:    "product_id",
}

var ProductCollectionTableColumns = struct {
	ID           string
	CollectionID string
	ProductID    string
}{
	ID:           "product_collections.id",
	CollectionID: "product_collections.collection_id",
	ProductID:    "product_collections.product_id",
}

// Generated where

var ProductCollectionWhere = struct {
	ID           whereHelperstring
	CollectionID whereHelperstring
	ProductID    whereHelperstring
}{
	ID:           whereHelperstring{field: "\"product_collections\".\"id\""},
	CollectionID: whereHelperstring{field: "\"product_collections\".\"collection_id\""},
	ProductID:    whereHelperstring{field: "\"product_collections\".\"product_id\""},
}

// ProductCollectionRels is where relationship names are stored.
var ProductCollectionRels = struct {
	Collection string
	Product    string
}{
	Collection: "Collection",
	Product:    "Product",
}

// productCollectionR is where relationships are stored.
type productCollectionR struct {
	Collection *Collection `boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
	Product    *Product    `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*productCollectionR) NewStruct() *productCollectionR {
	return &productCollectionR{}
}

func (r *productCollectionR) GetCollection() *Collection {
	if r == nil {
		return nil
	}
	return r.Collection
}

func (r *productCollectionR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

// productCollectionL is where Load methods for each relationship are stored.
type productCollectionL struct{}

var (
	productCollectionAllColumns            = []string{"id", "collection_id", "product_id"}
	productCollectionColumnsWithoutDefault = []string{"collection_id", "product_id"}
	productCollectionColumnsWithDefault    = []string{"id"}
	productCollectionPrimaryKeyColumns     = []string{"id"}
	productCollectionGeneratedColumns      = []string{}
)

type (
	// ProductCollectionSlice is an alias for a slice of pointers to ProductCollection.
	// This should almost always be used instead of []ProductCollection.
	ProductCollectionSlice []*ProductCollection

	productCollectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productCollectionType                 = reflect.TypeOf(&ProductCollection{})
	productCollectionMapping              = queries.MakeStructMapping(productCollectionType)
	productCollectionPrimaryKeyMapping, _ = queries.BindMapping(productCollectionType, productCollectionMapping, productCollectionPrimaryKeyColumns)
	productCollectionInsertCacheMut       sync.RWMutex
	productCollectionInsertCache          = make(map[string]insertCache)
	productCollectionUpdateCacheMut       sync.RWMutex
	productCollectionUpdateCache          = make(map[string]updateCache)
	productCollectionUpsertCacheMut       sync.RWMutex
	productCollectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single productCollection record from the query.
func (q productCollectionQuery) One(exec boil.Executor) (*ProductCollection, error) {
	o := &ProductCollection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for product_collections")
	}

	return o, nil
}

// All returns all ProductCollection records from the query.
func (q productCollectionQuery) All(exec boil.Executor) (ProductCollectionSlice, error) {
	var o []*ProductCollection

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ProductCollection slice")
	}

	return o, nil
}

// Count returns the count of all ProductCollection records in the query.
func (q productCollectionQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count product_collections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productCollectionQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if product_collections exists")
	}

	return count > 0, nil
}

// Collection pointed to by the foreign key.
func (o *ProductCollection) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
	}

	queryMods = append(queryMods, mods...)

	return Collections(queryMods...)
}

// Product pointed to by the foreign key.
func (o *ProductCollection) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productCollectionL) LoadCollection(e boil.Executor, singular bool, maybeProductCollection interface{}, mods queries.Applicator) error {
	var slice []*ProductCollection
	var object *ProductCollection

	if singular {
		var ok bool
		object, ok = maybeProductCollection.(*ProductCollection)
		if !ok {
			object = new(ProductCollection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductCollection))
			}
		}
	} else {
		s, ok := maybeProductCollection.(*[]*ProductCollection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductCollection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productCollectionR{}
		}
		args[object.CollectionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productCollectionR{}
			}

			args[obj.CollectionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.ProductCollections = append(foreign.R.ProductCollections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.ID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.ProductCollections = append(foreign.R.ProductCollections, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productCollectionL) LoadProduct(e boil.Executor, singular bool, maybeProductCollection interface{}, mods queries.Applicator) error {
	var slice []*ProductCollection
	var object *ProductCollection

	if singular {
		var ok bool
		object, ok = maybeProductCollection.(*ProductCollection)
		if !ok {
			object = new(ProductCollection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductCollection))
			}
		}
	} else {
		s, ok := maybeProductCollection.(*[]*ProductCollection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductCollection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &productCollectionR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productCollectionR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductCollections = append(foreign.R.ProductCollections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductCollections = append(foreign.R.ProductCollections, local)
				break
			}
		}
	}

	return nil
}

// SetCollection of the productCollection to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.ProductCollections.
func (o *ProductCollection) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, productCollectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.ID
	if o.R == nil {
		o.R = &productCollectionR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			ProductCollections: ProductCollectionSlice{o},
		}
	} else {
		related.R.ProductCollections = append(related.R.ProductCollections, o)
	}

	return nil
}

// SetProduct of the productCollection to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductCollections.
func (o *ProductCollection) SetProduct(exec boil.Executor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productCollectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productCollectionR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductCollections: ProductCollectionSlice{o},
		}
	} else {
		related.R.ProductCollections = append(related.R.ProductCollections, o)
	}

	return nil
}

// ProductCollections retrieves all the records using an executor.
func ProductCollections(mods ...qm.QueryMod) productCollectionQuery {
	mods = append(mods, qm.From("\"product_collections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_collections\".*"})
	}

	return productCollectionQuery{q}
}

// FindProductCollection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductCollection(exec boil.Executor, iD string, selectCols ...string) (*ProductCollection, error) {
	productCollectionObj := &ProductCollection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_collections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, productCollectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from product_collections")
	}

	return productCollectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductCollection) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_collections provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(productCollectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productCollectionInsertCacheMut.RLock()
	cache, cached := productCollectionInsertCache[key]
	productCollectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productCollectionAllColumns,
			productCollectionColumnsWithDefault,
			productCollectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productCollectionType, productCollectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productCollectionType, productCollectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_collections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_collections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into product_collections")
	}

	if !cached {
		productCollectionInsertCacheMut.Lock()
		productCollectionInsertCache[key] = cache
		productCollectionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ProductCollection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductCollection) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	productCollectionUpdateCacheMut.RLock()
	cache, cached := productCollectionUpdateCache[key]
	productCollectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productCollectionAllColumns,
			productCollectionPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update product_collections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_collections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productCollectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productCollectionType, productCollectionMapping, append(wl, productCollectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update product_collections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for product_collections")
	}

	if !cached {
		productCollectionUpdateCacheMut.Lock()
		productCollectionUpdateCache[key] = cache
		productCollectionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q productCollectionQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for product_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for product_collections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductCollectionSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productCollectionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in productCollection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all productCollection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductCollection) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no product_collections provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(productCollectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productCollectionUpsertCacheMut.RLock()
	cache, cached := productCollectionUpsertCache[key]
	productCollectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productCollectionAllColumns,
			productCollectionColumnsWithDefault,
			productCollectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productCollectionAllColumns,
			productCollectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert product_collections, could not build update column list")
		}

		ret := strmangle.SetComplement(productCollectionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(productCollectionPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert product_collections, could not build conflict column list")
			}

			conflict = make([]string, len(productCollectionPrimaryKeyColumns))
			copy(conflict, productCollectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_collections\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(productCollectionType, productCollectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productCollectionType, productCollectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert product_collections")
	}

	if !cached {
		productCollectionUpsertCacheMut.Lock()
		productCollectionUpsertCache[key] = cache
		productCollectionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ProductCollection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductCollection) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ProductCollection provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productCollectionPrimaryKeyMapping)
	sql := "DELETE FROM \"product_collections\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from product_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for product_collections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productCollectionQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no productCollectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from product_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_collections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductCollectionSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_collections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productCollectionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from productCollection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_collections")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductCollection) Reload(exec boil.Executor) error {
	ret, err := FindProductCollection(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductCollectionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductCollectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_collections\".* FROM \"product_collections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productCollectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ProductCollectionSlice")
	}

	*o = slice

	return nil
}

// ProductCollectionExists checks if the ProductCollection row exists.
func ProductCollectionExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_collections\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if product_collections exists")
	}

	return exists, nil
}

// Exists checks if the ProductCollection row exists.
func (o *ProductCollection) Exists(exec boil.Executor) (bool, error) {
	return ProductCollectionExists(exec, o.ID)
}
