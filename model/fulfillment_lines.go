// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FulfillmentLine is an object representing the database table.
type FulfillmentLine struct {
	ID            string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderLineID   string                 `boil:"order_line_id" json:"order_line_id" toml:"order_line_id" yaml:"order_line_id"`
	FulfillmentID string                 `boil:"fulfillment_id" json:"fulfillment_id" toml:"fulfillment_id" yaml:"fulfillment_id"`
	Quantity      int                    `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	StockID       model_types.NullString `boil:"stock_id" json:"stock_id,omitempty" toml:"stock_id" yaml:"stock_id,omitempty"`

	R *fulfillmentLineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fulfillmentLineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FulfillmentLineColumns = struct {
	ID            string
	OrderLineID   string
	FulfillmentID string
	Quantity      string
	StockID       string
}{
	ID:            "id",
	OrderLineID:   "order_line_id",
	FulfillmentID: "fulfillment_id",
	Quantity:      "quantity",
	StockID:       "stock_id",
}

var FulfillmentLineTableColumns = struct {
	ID            string
	OrderLineID   string
	FulfillmentID string
	Quantity      string
	StockID       string
}{
	ID:            "fulfillment_lines.id",
	OrderLineID:   "fulfillment_lines.order_line_id",
	FulfillmentID: "fulfillment_lines.fulfillment_id",
	Quantity:      "fulfillment_lines.quantity",
	StockID:       "fulfillment_lines.stock_id",
}

// Generated where

var FulfillmentLineWhere = struct {
	ID            whereHelperstring
	OrderLineID   whereHelperstring
	FulfillmentID whereHelperstring
	Quantity      whereHelperint
	StockID       whereHelpermodel_types_NullString
}{
	ID:            whereHelperstring{field: "\"fulfillment_lines\".\"id\""},
	OrderLineID:   whereHelperstring{field: "\"fulfillment_lines\".\"order_line_id\""},
	FulfillmentID: whereHelperstring{field: "\"fulfillment_lines\".\"fulfillment_id\""},
	Quantity:      whereHelperint{field: "\"fulfillment_lines\".\"quantity\""},
	StockID:       whereHelpermodel_types_NullString{field: "\"fulfillment_lines\".\"stock_id\""},
}

// FulfillmentLineRels is where relationship names are stored.
var FulfillmentLineRels = struct {
	OrderLine string
	Stock     string
}{
	OrderLine: "OrderLine",
	Stock:     "Stock",
}

// fulfillmentLineR is where relationships are stored.
type fulfillmentLineR struct {
	OrderLine *OrderLine `boil:"OrderLine" json:"OrderLine" toml:"OrderLine" yaml:"OrderLine"`
	Stock     *Stock     `boil:"Stock" json:"Stock" toml:"Stock" yaml:"Stock"`
}

// NewStruct creates a new relationship struct
func (*fulfillmentLineR) NewStruct() *fulfillmentLineR {
	return &fulfillmentLineR{}
}

func (r *fulfillmentLineR) GetOrderLine() *OrderLine {
	if r == nil {
		return nil
	}
	return r.OrderLine
}

func (r *fulfillmentLineR) GetStock() *Stock {
	if r == nil {
		return nil
	}
	return r.Stock
}

// fulfillmentLineL is where Load methods for each relationship are stored.
type fulfillmentLineL struct{}

var (
	fulfillmentLineAllColumns            = []string{"id", "order_line_id", "fulfillment_id", "quantity", "stock_id"}
	fulfillmentLineColumnsWithoutDefault = []string{"order_line_id", "fulfillment_id", "quantity"}
	fulfillmentLineColumnsWithDefault    = []string{"id", "stock_id"}
	fulfillmentLinePrimaryKeyColumns     = []string{"id"}
	fulfillmentLineGeneratedColumns      = []string{}
)

type (
	// FulfillmentLineSlice is an alias for a slice of pointers to FulfillmentLine.
	// This should almost always be used instead of []FulfillmentLine.
	FulfillmentLineSlice []*FulfillmentLine

	fulfillmentLineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fulfillmentLineType                 = reflect.TypeOf(&FulfillmentLine{})
	fulfillmentLineMapping              = queries.MakeStructMapping(fulfillmentLineType)
	fulfillmentLinePrimaryKeyMapping, _ = queries.BindMapping(fulfillmentLineType, fulfillmentLineMapping, fulfillmentLinePrimaryKeyColumns)
	fulfillmentLineInsertCacheMut       sync.RWMutex
	fulfillmentLineInsertCache          = make(map[string]insertCache)
	fulfillmentLineUpdateCacheMut       sync.RWMutex
	fulfillmentLineUpdateCache          = make(map[string]updateCache)
	fulfillmentLineUpsertCacheMut       sync.RWMutex
	fulfillmentLineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single fulfillmentLine record from the query.
func (q fulfillmentLineQuery) One(exec boil.Executor) (*FulfillmentLine, error) {
	o := &FulfillmentLine{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for fulfillment_lines")
	}

	return o, nil
}

// All returns all FulfillmentLine records from the query.
func (q fulfillmentLineQuery) All(exec boil.Executor) (FulfillmentLineSlice, error) {
	var o []*FulfillmentLine

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to FulfillmentLine slice")
	}

	return o, nil
}

// Count returns the count of all FulfillmentLine records in the query.
func (q fulfillmentLineQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count fulfillment_lines rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fulfillmentLineQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if fulfillment_lines exists")
	}

	return count > 0, nil
}

// OrderLine pointed to by the foreign key.
func (o *FulfillmentLine) OrderLine(mods ...qm.QueryMod) orderLineQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderLineID),
	}

	queryMods = append(queryMods, mods...)

	return OrderLines(queryMods...)
}

// Stock pointed to by the foreign key.
func (o *FulfillmentLine) Stock(mods ...qm.QueryMod) stockQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StockID),
	}

	queryMods = append(queryMods, mods...)

	return Stocks(queryMods...)
}

// LoadOrderLine allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fulfillmentLineL) LoadOrderLine(e boil.Executor, singular bool, maybeFulfillmentLine interface{}, mods queries.Applicator) error {
	var slice []*FulfillmentLine
	var object *FulfillmentLine

	if singular {
		var ok bool
		object, ok = maybeFulfillmentLine.(*FulfillmentLine)
		if !ok {
			object = new(FulfillmentLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFulfillmentLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFulfillmentLine))
			}
		}
	} else {
		s, ok := maybeFulfillmentLine.(*[]*FulfillmentLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFulfillmentLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFulfillmentLine))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &fulfillmentLineR{}
		}
		args[object.OrderLineID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fulfillmentLineR{}
			}

			args[obj.OrderLineID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_lines`),
		qm.WhereIn(`order_lines.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderLine")
	}

	var resultSlice []*OrderLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderLine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_lines")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderLine = foreign
		if foreign.R == nil {
			foreign.R = &orderLineR{}
		}
		foreign.R.FulfillmentLines = append(foreign.R.FulfillmentLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderLineID == foreign.ID {
				local.R.OrderLine = foreign
				if foreign.R == nil {
					foreign.R = &orderLineR{}
				}
				foreign.R.FulfillmentLines = append(foreign.R.FulfillmentLines, local)
				break
			}
		}
	}

	return nil
}

// LoadStock allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fulfillmentLineL) LoadStock(e boil.Executor, singular bool, maybeFulfillmentLine interface{}, mods queries.Applicator) error {
	var slice []*FulfillmentLine
	var object *FulfillmentLine

	if singular {
		var ok bool
		object, ok = maybeFulfillmentLine.(*FulfillmentLine)
		if !ok {
			object = new(FulfillmentLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFulfillmentLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFulfillmentLine))
			}
		}
	} else {
		s, ok := maybeFulfillmentLine.(*[]*FulfillmentLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFulfillmentLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFulfillmentLine))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &fulfillmentLineR{}
		}
		if !queries.IsNil(object.StockID) {
			args[object.StockID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fulfillmentLineR{}
			}

			if !queries.IsNil(obj.StockID) {
				args[obj.StockID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`stocks`),
		qm.WhereIn(`stocks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Stock")
	}

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Stock")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stocks")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Stock = foreign
		if foreign.R == nil {
			foreign.R = &stockR{}
		}
		foreign.R.FulfillmentLines = append(foreign.R.FulfillmentLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.StockID, foreign.ID) {
				local.R.Stock = foreign
				if foreign.R == nil {
					foreign.R = &stockR{}
				}
				foreign.R.FulfillmentLines = append(foreign.R.FulfillmentLines, local)
				break
			}
		}
	}

	return nil
}

// SetOrderLine of the fulfillmentLine to the related item.
// Sets o.R.OrderLine to related.
// Adds o to related.R.FulfillmentLines.
func (o *FulfillmentLine) SetOrderLine(exec boil.Executor, insert bool, related *OrderLine) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"fulfillment_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_line_id"}),
		strmangle.WhereClause("\"", "\"", 2, fulfillmentLinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderLineID = related.ID
	if o.R == nil {
		o.R = &fulfillmentLineR{
			OrderLine: related,
		}
	} else {
		o.R.OrderLine = related
	}

	if related.R == nil {
		related.R = &orderLineR{
			FulfillmentLines: FulfillmentLineSlice{o},
		}
	} else {
		related.R.FulfillmentLines = append(related.R.FulfillmentLines, o)
	}

	return nil
}

// SetStock of the fulfillmentLine to the related item.
// Sets o.R.Stock to related.
// Adds o to related.R.FulfillmentLines.
func (o *FulfillmentLine) SetStock(exec boil.Executor, insert bool, related *Stock) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"fulfillment_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"stock_id"}),
		strmangle.WhereClause("\"", "\"", 2, fulfillmentLinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.StockID, related.ID)
	if o.R == nil {
		o.R = &fulfillmentLineR{
			Stock: related,
		}
	} else {
		o.R.Stock = related
	}

	if related.R == nil {
		related.R = &stockR{
			FulfillmentLines: FulfillmentLineSlice{o},
		}
	} else {
		related.R.FulfillmentLines = append(related.R.FulfillmentLines, o)
	}

	return nil
}

// RemoveStock relationship.
// Sets o.R.Stock to nil.
// Removes o from all passed in related items' relationships struct.
func (o *FulfillmentLine) RemoveStock(exec boil.Executor, related *Stock) error {
	var err error

	queries.SetScanner(&o.StockID, nil)
	if _, err = o.Update(exec, boil.Whitelist("stock_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Stock = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FulfillmentLines {
		if queries.Equal(o.StockID, ri.StockID) {
			continue
		}

		ln := len(related.R.FulfillmentLines)
		if ln > 1 && i < ln-1 {
			related.R.FulfillmentLines[i] = related.R.FulfillmentLines[ln-1]
		}
		related.R.FulfillmentLines = related.R.FulfillmentLines[:ln-1]
		break
	}
	return nil
}

// FulfillmentLines retrieves all the records using an executor.
func FulfillmentLines(mods ...qm.QueryMod) fulfillmentLineQuery {
	mods = append(mods, qm.From("\"fulfillment_lines\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"fulfillment_lines\".*"})
	}

	return fulfillmentLineQuery{q}
}

// FindFulfillmentLine retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFulfillmentLine(exec boil.Executor, iD string, selectCols ...string) (*FulfillmentLine, error) {
	fulfillmentLineObj := &FulfillmentLine{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fulfillment_lines\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, fulfillmentLineObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from fulfillment_lines")
	}

	return fulfillmentLineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FulfillmentLine) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no fulfillment_lines provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(fulfillmentLineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fulfillmentLineInsertCacheMut.RLock()
	cache, cached := fulfillmentLineInsertCache[key]
	fulfillmentLineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fulfillmentLineAllColumns,
			fulfillmentLineColumnsWithDefault,
			fulfillmentLineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fulfillmentLineType, fulfillmentLineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fulfillmentLineType, fulfillmentLineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fulfillment_lines\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fulfillment_lines\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into fulfillment_lines")
	}

	if !cached {
		fulfillmentLineInsertCacheMut.Lock()
		fulfillmentLineInsertCache[key] = cache
		fulfillmentLineInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the FulfillmentLine.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FulfillmentLine) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	fulfillmentLineUpdateCacheMut.RLock()
	cache, cached := fulfillmentLineUpdateCache[key]
	fulfillmentLineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fulfillmentLineAllColumns,
			fulfillmentLinePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update fulfillment_lines, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fulfillment_lines\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fulfillmentLinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fulfillmentLineType, fulfillmentLineMapping, append(wl, fulfillmentLinePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update fulfillment_lines row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for fulfillment_lines")
	}

	if !cached {
		fulfillmentLineUpdateCacheMut.Lock()
		fulfillmentLineUpdateCache[key] = cache
		fulfillmentLineUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q fulfillmentLineQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for fulfillment_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for fulfillment_lines")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FulfillmentLineSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fulfillmentLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fulfillment_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fulfillmentLinePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in fulfillmentLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all fulfillmentLine")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FulfillmentLine) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no fulfillment_lines provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(fulfillmentLineColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fulfillmentLineUpsertCacheMut.RLock()
	cache, cached := fulfillmentLineUpsertCache[key]
	fulfillmentLineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			fulfillmentLineAllColumns,
			fulfillmentLineColumnsWithDefault,
			fulfillmentLineColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fulfillmentLineAllColumns,
			fulfillmentLinePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert fulfillment_lines, could not build update column list")
		}

		ret := strmangle.SetComplement(fulfillmentLineAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(fulfillmentLinePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert fulfillment_lines, could not build conflict column list")
			}

			conflict = make([]string, len(fulfillmentLinePrimaryKeyColumns))
			copy(conflict, fulfillmentLinePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fulfillment_lines\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(fulfillmentLineType, fulfillmentLineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fulfillmentLineType, fulfillmentLineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert fulfillment_lines")
	}

	if !cached {
		fulfillmentLineUpsertCacheMut.Lock()
		fulfillmentLineUpsertCache[key] = cache
		fulfillmentLineUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single FulfillmentLine record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FulfillmentLine) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no FulfillmentLine provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fulfillmentLinePrimaryKeyMapping)
	sql := "DELETE FROM \"fulfillment_lines\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from fulfillment_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for fulfillment_lines")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fulfillmentLineQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no fulfillmentLineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from fulfillment_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for fulfillment_lines")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FulfillmentLineSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fulfillmentLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"fulfillment_lines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fulfillmentLinePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from fulfillmentLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for fulfillment_lines")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FulfillmentLine) Reload(exec boil.Executor) error {
	ret, err := FindFulfillmentLine(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FulfillmentLineSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FulfillmentLineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fulfillmentLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fulfillment_lines\".* FROM \"fulfillment_lines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fulfillmentLinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in FulfillmentLineSlice")
	}

	*o = slice

	return nil
}

// FulfillmentLineExists checks if the FulfillmentLine row exists.
func FulfillmentLineExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fulfillment_lines\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if fulfillment_lines exists")
	}

	return exists, nil
}

// Exists checks if the FulfillmentLine row exists.
func (o *FulfillmentLine) Exists(exec boil.Executor) (bool, error) {
	return FulfillmentLineExists(exec, o.ID)
}
