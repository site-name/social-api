// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssignedVariantAttribute is an object representing the database table.
type AssignedVariantAttribute struct {
	ID           string `boil:"id" json:"id" toml:"id" yaml:"id"`
	VariantID    string `boil:"variant_id" json:"variant_id" toml:"variant_id" yaml:"variant_id"`
	AssignmentID string `boil:"assignment_id" json:"assignment_id" toml:"assignment_id" yaml:"assignment_id"`

	R *assignedVariantAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignedVariantAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignedVariantAttributeColumns = struct {
	ID           string
	VariantID    string
	AssignmentID string
}{
	ID:           "id",
	VariantID:    "variant_id",
	AssignmentID: "assignment_id",
}

var AssignedVariantAttributeTableColumns = struct {
	ID           string
	VariantID    string
	AssignmentID string
}{
	ID:           "assigned_variant_attributes.id",
	VariantID:    "assigned_variant_attributes.variant_id",
	AssignmentID: "assigned_variant_attributes.assignment_id",
}

// Generated where

var AssignedVariantAttributeWhere = struct {
	ID           whereHelperstring
	VariantID    whereHelperstring
	AssignmentID whereHelperstring
}{
	ID:           whereHelperstring{field: "\"assigned_variant_attributes\".\"id\""},
	VariantID:    whereHelperstring{field: "\"assigned_variant_attributes\".\"variant_id\""},
	AssignmentID: whereHelperstring{field: "\"assigned_variant_attributes\".\"assignment_id\""},
}

// AssignedVariantAttributeRels is where relationship names are stored.
var AssignedVariantAttributeRels = struct {
	Assignment                               string
	Variant                                  string
	AssignmentAssignedVariantAttributeValues string
}{
	Assignment:                               "Assignment",
	Variant:                                  "Variant",
	AssignmentAssignedVariantAttributeValues: "AssignmentAssignedVariantAttributeValues",
}

// assignedVariantAttributeR is where relationships are stored.
type assignedVariantAttributeR struct {
	Assignment                               *AttributeVariant                  `boil:"Assignment" json:"Assignment" toml:"Assignment" yaml:"Assignment"`
	Variant                                  *ProductVariant                    `boil:"Variant" json:"Variant" toml:"Variant" yaml:"Variant"`
	AssignmentAssignedVariantAttributeValues AssignedVariantAttributeValueSlice `boil:"AssignmentAssignedVariantAttributeValues" json:"AssignmentAssignedVariantAttributeValues" toml:"AssignmentAssignedVariantAttributeValues" yaml:"AssignmentAssignedVariantAttributeValues"`
}

// NewStruct creates a new relationship struct
func (*assignedVariantAttributeR) NewStruct() *assignedVariantAttributeR {
	return &assignedVariantAttributeR{}
}

func (r *assignedVariantAttributeR) GetAssignment() *AttributeVariant {
	if r == nil {
		return nil
	}
	return r.Assignment
}

func (r *assignedVariantAttributeR) GetVariant() *ProductVariant {
	if r == nil {
		return nil
	}
	return r.Variant
}

func (r *assignedVariantAttributeR) GetAssignmentAssignedVariantAttributeValues() AssignedVariantAttributeValueSlice {
	if r == nil {
		return nil
	}
	return r.AssignmentAssignedVariantAttributeValues
}

// assignedVariantAttributeL is where Load methods for each relationship are stored.
type assignedVariantAttributeL struct{}

var (
	assignedVariantAttributeAllColumns            = []string{"id", "variant_id", "assignment_id"}
	assignedVariantAttributeColumnsWithoutDefault = []string{"variant_id", "assignment_id"}
	assignedVariantAttributeColumnsWithDefault    = []string{"id"}
	assignedVariantAttributePrimaryKeyColumns     = []string{"id"}
	assignedVariantAttributeGeneratedColumns      = []string{}
)

type (
	// AssignedVariantAttributeSlice is an alias for a slice of pointers to AssignedVariantAttribute.
	// This should almost always be used instead of []AssignedVariantAttribute.
	AssignedVariantAttributeSlice []*AssignedVariantAttribute

	assignedVariantAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignedVariantAttributeType                 = reflect.TypeOf(&AssignedVariantAttribute{})
	assignedVariantAttributeMapping              = queries.MakeStructMapping(assignedVariantAttributeType)
	assignedVariantAttributePrimaryKeyMapping, _ = queries.BindMapping(assignedVariantAttributeType, assignedVariantAttributeMapping, assignedVariantAttributePrimaryKeyColumns)
	assignedVariantAttributeInsertCacheMut       sync.RWMutex
	assignedVariantAttributeInsertCache          = make(map[string]insertCache)
	assignedVariantAttributeUpdateCacheMut       sync.RWMutex
	assignedVariantAttributeUpdateCache          = make(map[string]updateCache)
	assignedVariantAttributeUpsertCacheMut       sync.RWMutex
	assignedVariantAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single assignedVariantAttribute record from the query.
func (q assignedVariantAttributeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssignedVariantAttribute, error) {
	o := &AssignedVariantAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for assigned_variant_attributes")
	}

	return o, nil
}

// All returns all AssignedVariantAttribute records from the query.
func (q assignedVariantAttributeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssignedVariantAttributeSlice, error) {
	var o []*AssignedVariantAttribute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to AssignedVariantAttribute slice")
	}

	return o, nil
}

// Count returns the count of all AssignedVariantAttribute records in the query.
func (q assignedVariantAttributeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count assigned_variant_attributes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignedVariantAttributeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if assigned_variant_attributes exists")
	}

	return count > 0, nil
}

// Assignment pointed to by the foreign key.
func (o *AssignedVariantAttribute) Assignment(mods ...qm.QueryMod) attributeVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AssignmentID),
	}

	queryMods = append(queryMods, mods...)

	return AttributeVariants(queryMods...)
}

// Variant pointed to by the foreign key.
func (o *AssignedVariantAttribute) Variant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VariantID),
	}

	queryMods = append(queryMods, mods...)

	return ProductVariants(queryMods...)
}

// AssignmentAssignedVariantAttributeValues retrieves all the assigned_variant_attribute_value's AssignedVariantAttributeValues with an executor via assignment_id column.
func (o *AssignedVariantAttribute) AssignmentAssignedVariantAttributeValues(mods ...qm.QueryMod) assignedVariantAttributeValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_variant_attribute_values\".\"assignment_id\"=?", o.ID),
	)

	return AssignedVariantAttributeValues(queryMods...)
}

// LoadAssignment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedVariantAttributeL) LoadAssignment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedVariantAttribute interface{}, mods queries.Applicator) error {
	var slice []*AssignedVariantAttribute
	var object *AssignedVariantAttribute

	if singular {
		var ok bool
		object, ok = maybeAssignedVariantAttribute.(*AssignedVariantAttribute)
		if !ok {
			object = new(AssignedVariantAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedVariantAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedVariantAttribute))
			}
		}
	} else {
		s, ok := maybeAssignedVariantAttribute.(*[]*AssignedVariantAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedVariantAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedVariantAttribute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedVariantAttributeR{}
		}
		args = append(args, object.AssignmentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedVariantAttributeR{}
			}

			for _, a := range args {
				if a == obj.AssignmentID {
					continue Outer
				}
			}

			args = append(args, obj.AssignmentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attribute_variants`),
		qm.WhereIn(`attribute_variants.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AttributeVariant")
	}

	var resultSlice []*AttributeVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AttributeVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attribute_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_variants")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Assignment = foreign
		if foreign.R == nil {
			foreign.R = &attributeVariantR{}
		}
		foreign.R.AssignmentAssignedVariantAttributes = append(foreign.R.AssignmentAssignedVariantAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssignmentID == foreign.ID {
				local.R.Assignment = foreign
				if foreign.R == nil {
					foreign.R = &attributeVariantR{}
				}
				foreign.R.AssignmentAssignedVariantAttributes = append(foreign.R.AssignmentAssignedVariantAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedVariantAttributeL) LoadVariant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedVariantAttribute interface{}, mods queries.Applicator) error {
	var slice []*AssignedVariantAttribute
	var object *AssignedVariantAttribute

	if singular {
		var ok bool
		object, ok = maybeAssignedVariantAttribute.(*AssignedVariantAttribute)
		if !ok {
			object = new(AssignedVariantAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedVariantAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedVariantAttribute))
			}
		}
	} else {
		s, ok := maybeAssignedVariantAttribute.(*[]*AssignedVariantAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedVariantAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedVariantAttribute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedVariantAttributeR{}
		}
		args = append(args, object.VariantID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedVariantAttributeR{}
			}

			for _, a := range args {
				if a == obj.VariantID {
					continue Outer
				}
			}

			args = append(args, obj.VariantID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Variant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.VariantAssignedVariantAttributes = append(foreign.R.VariantAssignedVariantAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariantID == foreign.ID {
				local.R.Variant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.VariantAssignedVariantAttributes = append(foreign.R.VariantAssignedVariantAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignmentAssignedVariantAttributeValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assignedVariantAttributeL) LoadAssignmentAssignedVariantAttributeValues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedVariantAttribute interface{}, mods queries.Applicator) error {
	var slice []*AssignedVariantAttribute
	var object *AssignedVariantAttribute

	if singular {
		var ok bool
		object, ok = maybeAssignedVariantAttribute.(*AssignedVariantAttribute)
		if !ok {
			object = new(AssignedVariantAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedVariantAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedVariantAttribute))
			}
		}
	} else {
		s, ok := maybeAssignedVariantAttribute.(*[]*AssignedVariantAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedVariantAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedVariantAttribute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedVariantAttributeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedVariantAttributeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_variant_attribute_values`),
		qm.WhereIn(`assigned_variant_attribute_values.assignment_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_variant_attribute_values")
	}

	var resultSlice []*AssignedVariantAttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_variant_attribute_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_variant_attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_variant_attribute_values")
	}

	if singular {
		object.R.AssignmentAssignedVariantAttributeValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedVariantAttributeValueR{}
			}
			foreign.R.Assignment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AssignmentID {
				local.R.AssignmentAssignedVariantAttributeValues = append(local.R.AssignmentAssignedVariantAttributeValues, foreign)
				if foreign.R == nil {
					foreign.R = &assignedVariantAttributeValueR{}
				}
				foreign.R.Assignment = local
				break
			}
		}
	}

	return nil
}

// SetAssignment of the assignedVariantAttribute to the related item.
// Sets o.R.Assignment to related.
// Adds o to related.R.AssignmentAssignedVariantAttributes.
func (o *AssignedVariantAttribute) SetAssignment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AttributeVariant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_variant_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"assignment_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedVariantAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssignmentID = related.ID
	if o.R == nil {
		o.R = &assignedVariantAttributeR{
			Assignment: related,
		}
	} else {
		o.R.Assignment = related
	}

	if related.R == nil {
		related.R = &attributeVariantR{
			AssignmentAssignedVariantAttributes: AssignedVariantAttributeSlice{o},
		}
	} else {
		related.R.AssignmentAssignedVariantAttributes = append(related.R.AssignmentAssignedVariantAttributes, o)
	}

	return nil
}

// SetVariant of the assignedVariantAttribute to the related item.
// Sets o.R.Variant to related.
// Adds o to related.R.VariantAssignedVariantAttributes.
func (o *AssignedVariantAttribute) SetVariant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_variant_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"variant_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedVariantAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariantID = related.ID
	if o.R == nil {
		o.R = &assignedVariantAttributeR{
			Variant: related,
		}
	} else {
		o.R.Variant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			VariantAssignedVariantAttributes: AssignedVariantAttributeSlice{o},
		}
	} else {
		related.R.VariantAssignedVariantAttributes = append(related.R.VariantAssignedVariantAttributes, o)
	}

	return nil
}

// AddAssignmentAssignedVariantAttributeValues adds the given related objects to the existing relationships
// of the assigned_variant_attribute, optionally inserting them as new records.
// Appends related to o.R.AssignmentAssignedVariantAttributeValues.
// Sets related.R.Assignment appropriately.
func (o *AssignedVariantAttribute) AddAssignmentAssignedVariantAttributeValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedVariantAttributeValue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssignmentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_variant_attribute_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assignment_id"}),
				strmangle.WhereClause("\"", "\"", 2, assignedVariantAttributeValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssignmentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &assignedVariantAttributeR{
			AssignmentAssignedVariantAttributeValues: related,
		}
	} else {
		o.R.AssignmentAssignedVariantAttributeValues = append(o.R.AssignmentAssignedVariantAttributeValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedVariantAttributeValueR{
				Assignment: o,
			}
		} else {
			rel.R.Assignment = o
		}
	}
	return nil
}

// AssignedVariantAttributes retrieves all the records using an executor.
func AssignedVariantAttributes(mods ...qm.QueryMod) assignedVariantAttributeQuery {
	mods = append(mods, qm.From("\"assigned_variant_attributes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assigned_variant_attributes\".*"})
	}

	return assignedVariantAttributeQuery{q}
}

// FindAssignedVariantAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignedVariantAttribute(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AssignedVariantAttribute, error) {
	assignedVariantAttributeObj := &AssignedVariantAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assigned_variant_attributes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assignedVariantAttributeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from assigned_variant_attributes")
	}

	return assignedVariantAttributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssignedVariantAttribute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no assigned_variant_attributes provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(assignedVariantAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignedVariantAttributeInsertCacheMut.RLock()
	cache, cached := assignedVariantAttributeInsertCache[key]
	assignedVariantAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignedVariantAttributeAllColumns,
			assignedVariantAttributeColumnsWithDefault,
			assignedVariantAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assignedVariantAttributeType, assignedVariantAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignedVariantAttributeType, assignedVariantAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assigned_variant_attributes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assigned_variant_attributes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into assigned_variant_attributes")
	}

	if !cached {
		assignedVariantAttributeInsertCacheMut.Lock()
		assignedVariantAttributeInsertCache[key] = cache
		assignedVariantAttributeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AssignedVariantAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssignedVariantAttribute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	assignedVariantAttributeUpdateCacheMut.RLock()
	cache, cached := assignedVariantAttributeUpdateCache[key]
	assignedVariantAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignedVariantAttributeAllColumns,
			assignedVariantAttributePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update assigned_variant_attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assigned_variant_attributes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignedVariantAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignedVariantAttributeType, assignedVariantAttributeMapping, append(wl, assignedVariantAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update assigned_variant_attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for assigned_variant_attributes")
	}

	if !cached {
		assignedVariantAttributeUpdateCacheMut.Lock()
		assignedVariantAttributeUpdateCache[key] = cache
		assignedVariantAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q assignedVariantAttributeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for assigned_variant_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for assigned_variant_attributes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignedVariantAttributeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedVariantAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assigned_variant_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignedVariantAttributePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in assignedVariantAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all assignedVariantAttribute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssignedVariantAttribute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no assigned_variant_attributes provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedVariantAttributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignedVariantAttributeUpsertCacheMut.RLock()
	cache, cached := assignedVariantAttributeUpsertCache[key]
	assignedVariantAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assignedVariantAttributeAllColumns,
			assignedVariantAttributeColumnsWithDefault,
			assignedVariantAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignedVariantAttributeAllColumns,
			assignedVariantAttributePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert assigned_variant_attributes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assignedVariantAttributePrimaryKeyColumns))
			copy(conflict, assignedVariantAttributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"assigned_variant_attributes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assignedVariantAttributeType, assignedVariantAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignedVariantAttributeType, assignedVariantAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert assigned_variant_attributes")
	}

	if !cached {
		assignedVariantAttributeUpsertCacheMut.Lock()
		assignedVariantAttributeUpsertCache[key] = cache
		assignedVariantAttributeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AssignedVariantAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssignedVariantAttribute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no AssignedVariantAttribute provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignedVariantAttributePrimaryKeyMapping)
	sql := "DELETE FROM \"assigned_variant_attributes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from assigned_variant_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for assigned_variant_attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignedVariantAttributeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no assignedVariantAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from assigned_variant_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for assigned_variant_attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignedVariantAttributeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedVariantAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assigned_variant_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedVariantAttributePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from assignedVariantAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for assigned_variant_attributes")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssignedVariantAttribute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssignedVariantAttribute(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignedVariantAttributeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignedVariantAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedVariantAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assigned_variant_attributes\".* FROM \"assigned_variant_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedVariantAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in AssignedVariantAttributeSlice")
	}

	*o = slice

	return nil
}

// AssignedVariantAttributeExists checks if the AssignedVariantAttribute row exists.
func AssignedVariantAttributeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assigned_variant_attributes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if assigned_variant_attributes exists")
	}

	return exists, nil
}

// Exists checks if the AssignedVariantAttribute row exists.
func (o *AssignedVariantAttribute) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssignedVariantAttributeExists(ctx, exec, o.ID)
}
