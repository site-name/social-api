// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SaleTranslation is an object representing the database table.
type SaleTranslation struct {
	ID           string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageCode Languagecode `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	Name         string       `boil:"name" json:"name" toml:"name" yaml:"name"`
	SaleID       string       `boil:"sale_id" json:"sale_id" toml:"sale_id" yaml:"sale_id"`

	R *saleTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L saleTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SaleTranslationColumns = struct {
	ID           string
	LanguageCode string
	Name         string
	SaleID       string
}{
	ID:           "id",
	LanguageCode: "language_code",
	Name:         "name",
	SaleID:       "sale_id",
}

var SaleTranslationTableColumns = struct {
	ID           string
	LanguageCode string
	Name         string
	SaleID       string
}{
	ID:           "sale_translations.id",
	LanguageCode: "sale_translations.language_code",
	Name:         "sale_translations.name",
	SaleID:       "sale_translations.sale_id",
}

// Generated where

var SaleTranslationWhere = struct {
	ID           whereHelperstring
	LanguageCode whereHelperLanguagecode
	Name         whereHelperstring
	SaleID       whereHelperstring
}{
	ID:           whereHelperstring{field: "\"sale_translations\".\"id\""},
	LanguageCode: whereHelperLanguagecode{field: "\"sale_translations\".\"language_code\""},
	Name:         whereHelperstring{field: "\"sale_translations\".\"name\""},
	SaleID:       whereHelperstring{field: "\"sale_translations\".\"sale_id\""},
}

// SaleTranslationRels is where relationship names are stored.
var SaleTranslationRels = struct {
	Sale string
}{
	Sale: "Sale",
}

// saleTranslationR is where relationships are stored.
type saleTranslationR struct {
	Sale *Sale `boil:"Sale" json:"Sale" toml:"Sale" yaml:"Sale"`
}

// NewStruct creates a new relationship struct
func (*saleTranslationR) NewStruct() *saleTranslationR {
	return &saleTranslationR{}
}

func (r *saleTranslationR) GetSale() *Sale {
	if r == nil {
		return nil
	}
	return r.Sale
}

// saleTranslationL is where Load methods for each relationship are stored.
type saleTranslationL struct{}

var (
	saleTranslationAllColumns            = []string{"id", "language_code", "name", "sale_id"}
	saleTranslationColumnsWithoutDefault = []string{"language_code", "name", "sale_id"}
	saleTranslationColumnsWithDefault    = []string{"id"}
	saleTranslationPrimaryKeyColumns     = []string{"id"}
	saleTranslationGeneratedColumns      = []string{}
)

type (
	// SaleTranslationSlice is an alias for a slice of pointers to SaleTranslation.
	// This should almost always be used instead of []SaleTranslation.
	SaleTranslationSlice []*SaleTranslation

	saleTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	saleTranslationType                 = reflect.TypeOf(&SaleTranslation{})
	saleTranslationMapping              = queries.MakeStructMapping(saleTranslationType)
	saleTranslationPrimaryKeyMapping, _ = queries.BindMapping(saleTranslationType, saleTranslationMapping, saleTranslationPrimaryKeyColumns)
	saleTranslationInsertCacheMut       sync.RWMutex
	saleTranslationInsertCache          = make(map[string]insertCache)
	saleTranslationUpdateCacheMut       sync.RWMutex
	saleTranslationUpdateCache          = make(map[string]updateCache)
	saleTranslationUpsertCacheMut       sync.RWMutex
	saleTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single saleTranslation record from the query.
func (q saleTranslationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SaleTranslation, error) {
	o := &SaleTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for sale_translations")
	}

	return o, nil
}

// All returns all SaleTranslation records from the query.
func (q saleTranslationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SaleTranslationSlice, error) {
	var o []*SaleTranslation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to SaleTranslation slice")
	}

	return o, nil
}

// Count returns the count of all SaleTranslation records in the query.
func (q saleTranslationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count sale_translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q saleTranslationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if sale_translations exists")
	}

	return count > 0, nil
}

// Sale pointed to by the foreign key.
func (o *SaleTranslation) Sale(mods ...qm.QueryMod) saleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SaleID),
	}

	queryMods = append(queryMods, mods...)

	return Sales(queryMods...)
}

// LoadSale allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleTranslationL) LoadSale(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSaleTranslation interface{}, mods queries.Applicator) error {
	var slice []*SaleTranslation
	var object *SaleTranslation

	if singular {
		var ok bool
		object, ok = maybeSaleTranslation.(*SaleTranslation)
		if !ok {
			object = new(SaleTranslation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSaleTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSaleTranslation))
			}
		}
	} else {
		s, ok := maybeSaleTranslation.(*[]*SaleTranslation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSaleTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSaleTranslation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleTranslationR{}
		}
		args = append(args, object.SaleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleTranslationR{}
			}

			for _, a := range args {
				if a == obj.SaleID {
					continue Outer
				}
			}

			args = append(args, obj.SaleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sales`),
		qm.WhereIn(`sales.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sale")
	}

	var resultSlice []*Sale
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sale")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sales")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sales")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Sale = foreign
		if foreign.R == nil {
			foreign.R = &saleR{}
		}
		foreign.R.SaleTranslations = append(foreign.R.SaleTranslations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SaleID == foreign.ID {
				local.R.Sale = foreign
				if foreign.R == nil {
					foreign.R = &saleR{}
				}
				foreign.R.SaleTranslations = append(foreign.R.SaleTranslations, local)
				break
			}
		}
	}

	return nil
}

// SetSale of the saleTranslation to the related item.
// Sets o.R.Sale to related.
// Adds o to related.R.SaleTranslations.
func (o *SaleTranslation) SetSale(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sale) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sale_id"}),
		strmangle.WhereClause("\"", "\"", 2, saleTranslationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SaleID = related.ID
	if o.R == nil {
		o.R = &saleTranslationR{
			Sale: related,
		}
	} else {
		o.R.Sale = related
	}

	if related.R == nil {
		related.R = &saleR{
			SaleTranslations: SaleTranslationSlice{o},
		}
	} else {
		related.R.SaleTranslations = append(related.R.SaleTranslations, o)
	}

	return nil
}

// SaleTranslations retrieves all the records using an executor.
func SaleTranslations(mods ...qm.QueryMod) saleTranslationQuery {
	mods = append(mods, qm.From("\"sale_translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale_translations\".*"})
	}

	return saleTranslationQuery{q}
}

// FindSaleTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSaleTranslation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SaleTranslation, error) {
	saleTranslationObj := &SaleTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale_translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, saleTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from sale_translations")
	}

	return saleTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SaleTranslation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no sale_translations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(saleTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	saleTranslationInsertCacheMut.RLock()
	cache, cached := saleTranslationInsertCache[key]
	saleTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			saleTranslationAllColumns,
			saleTranslationColumnsWithDefault,
			saleTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(saleTranslationType, saleTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(saleTranslationType, saleTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale_translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale_translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into sale_translations")
	}

	if !cached {
		saleTranslationInsertCacheMut.Lock()
		saleTranslationInsertCache[key] = cache
		saleTranslationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SaleTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SaleTranslation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	saleTranslationUpdateCacheMut.RLock()
	cache, cached := saleTranslationUpdateCache[key]
	saleTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			saleTranslationAllColumns,
			saleTranslationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update sale_translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale_translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, saleTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(saleTranslationType, saleTranslationMapping, append(wl, saleTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update sale_translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for sale_translations")
	}

	if !cached {
		saleTranslationUpdateCacheMut.Lock()
		saleTranslationUpdateCache[key] = cache
		saleTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q saleTranslationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for sale_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for sale_translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SaleTranslationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, saleTranslationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in saleTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all saleTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SaleTranslation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no sale_translations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(saleTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	saleTranslationUpsertCacheMut.RLock()
	cache, cached := saleTranslationUpsertCache[key]
	saleTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			saleTranslationAllColumns,
			saleTranslationColumnsWithDefault,
			saleTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			saleTranslationAllColumns,
			saleTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert sale_translations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(saleTranslationPrimaryKeyColumns))
			copy(conflict, saleTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale_translations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(saleTranslationType, saleTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(saleTranslationType, saleTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert sale_translations")
	}

	if !cached {
		saleTranslationUpsertCacheMut.Lock()
		saleTranslationUpsertCache[key] = cache
		saleTranslationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SaleTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SaleTranslation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no SaleTranslation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), saleTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"sale_translations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from sale_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for sale_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q saleTranslationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no saleTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from sale_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for sale_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SaleTranslationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, saleTranslationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from saleTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for sale_translations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SaleTranslation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSaleTranslation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SaleTranslationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SaleTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale_translations\".* FROM \"sale_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, saleTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in SaleTranslationSlice")
	}

	*o = slice

	return nil
}

// SaleTranslationExists checks if the SaleTranslation row exists.
func SaleTranslationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale_translations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if sale_translations exists")
	}

	return exists, nil
}

// Exists checks if the SaleTranslation row exists.
func (o *SaleTranslation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SaleTranslationExists(ctx, exec, o.ID)
}
