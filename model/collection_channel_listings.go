// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CollectionChannelListing is an object representing the database table.
type CollectionChannelListing struct {
	ID              string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CollectionID    string                 `boil:"collection_id" json:"collection_id" toml:"collection_id" yaml:"collection_id"`
	ChannelID       model_types.NullString `boil:"channel_id" json:"channel_id,omitempty" toml:"channel_id" yaml:"channel_id,omitempty"`
	PublicationDate model_types.NullTime   `boil:"publication_date" json:"publication_date,omitempty" toml:"publication_date" yaml:"publication_date,omitempty"`
	IsPublished     model_types.NullBool   `boil:"is_published" json:"is_published,omitempty" toml:"is_published" yaml:"is_published,omitempty"`

	R *collectionChannelListingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L collectionChannelListingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CollectionChannelListingColumns = struct {
	ID              string
	CreatedAt       string
	CollectionID    string
	ChannelID       string
	PublicationDate string
	IsPublished     string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	CollectionID:    "collection_id",
	ChannelID:       "channel_id",
	PublicationDate: "publication_date",
	IsPublished:     "is_published",
}

var CollectionChannelListingTableColumns = struct {
	ID              string
	CreatedAt       string
	CollectionID    string
	ChannelID       string
	PublicationDate string
	IsPublished     string
}{
	ID:              "collection_channel_listings.id",
	CreatedAt:       "collection_channel_listings.created_at",
	CollectionID:    "collection_channel_listings.collection_id",
	ChannelID:       "collection_channel_listings.channel_id",
	PublicationDate: "collection_channel_listings.publication_date",
	IsPublished:     "collection_channel_listings.is_published",
}

// Generated where

var CollectionChannelListingWhere = struct {
	ID              whereHelperstring
	CreatedAt       whereHelperint64
	CollectionID    whereHelperstring
	ChannelID       whereHelpermodel_types_NullString
	PublicationDate whereHelpermodel_types_NullTime
	IsPublished     whereHelpermodel_types_NullBool
}{
	ID:              whereHelperstring{field: "\"collection_channel_listings\".\"id\""},
	CreatedAt:       whereHelperint64{field: "\"collection_channel_listings\".\"created_at\""},
	CollectionID:    whereHelperstring{field: "\"collection_channel_listings\".\"collection_id\""},
	ChannelID:       whereHelpermodel_types_NullString{field: "\"collection_channel_listings\".\"channel_id\""},
	PublicationDate: whereHelpermodel_types_NullTime{field: "\"collection_channel_listings\".\"publication_date\""},
	IsPublished:     whereHelpermodel_types_NullBool{field: "\"collection_channel_listings\".\"is_published\""},
}

// CollectionChannelListingRels is where relationship names are stored.
var CollectionChannelListingRels = struct {
	Channel    string
	Collection string
}{
	Channel:    "Channel",
	Collection: "Collection",
}

// collectionChannelListingR is where relationships are stored.
type collectionChannelListingR struct {
	Channel    *Channel    `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
	Collection *Collection `boil:"Collection" json:"Collection" toml:"Collection" yaml:"Collection"`
}

// NewStruct creates a new relationship struct
func (*collectionChannelListingR) NewStruct() *collectionChannelListingR {
	return &collectionChannelListingR{}
}

func (r *collectionChannelListingR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *collectionChannelListingR) GetCollection() *Collection {
	if r == nil {
		return nil
	}
	return r.Collection
}

// collectionChannelListingL is where Load methods for each relationship are stored.
type collectionChannelListingL struct{}

var (
	collectionChannelListingAllColumns            = []string{"id", "created_at", "collection_id", "channel_id", "publication_date", "is_published"}
	collectionChannelListingColumnsWithoutDefault = []string{"created_at", "collection_id"}
	collectionChannelListingColumnsWithDefault    = []string{"id", "channel_id", "publication_date", "is_published"}
	collectionChannelListingPrimaryKeyColumns     = []string{"id"}
	collectionChannelListingGeneratedColumns      = []string{}
)

type (
	// CollectionChannelListingSlice is an alias for a slice of pointers to CollectionChannelListing.
	// This should almost always be used instead of []CollectionChannelListing.
	CollectionChannelListingSlice []*CollectionChannelListing

	collectionChannelListingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	collectionChannelListingType                 = reflect.TypeOf(&CollectionChannelListing{})
	collectionChannelListingMapping              = queries.MakeStructMapping(collectionChannelListingType)
	collectionChannelListingPrimaryKeyMapping, _ = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, collectionChannelListingPrimaryKeyColumns)
	collectionChannelListingInsertCacheMut       sync.RWMutex
	collectionChannelListingInsertCache          = make(map[string]insertCache)
	collectionChannelListingUpdateCacheMut       sync.RWMutex
	collectionChannelListingUpdateCache          = make(map[string]updateCache)
	collectionChannelListingUpsertCacheMut       sync.RWMutex
	collectionChannelListingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single collectionChannelListing record from the query.
func (q collectionChannelListingQuery) One(exec boil.Executor) (*CollectionChannelListing, error) {
	o := &CollectionChannelListing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for collection_channel_listings")
	}

	return o, nil
}

// All returns all CollectionChannelListing records from the query.
func (q collectionChannelListingQuery) All(exec boil.Executor) (CollectionChannelListingSlice, error) {
	var o []*CollectionChannelListing

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to CollectionChannelListing slice")
	}

	return o, nil
}

// Count returns the count of all CollectionChannelListing records in the query.
func (q collectionChannelListingQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count collection_channel_listings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q collectionChannelListingQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if collection_channel_listings exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *CollectionChannelListing) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// Collection pointed to by the foreign key.
func (o *CollectionChannelListing) Collection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionID),
	}

	queryMods = append(queryMods, mods...)

	return Collections(queryMods...)
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collectionChannelListingL) LoadChannel(e boil.Executor, singular bool, maybeCollectionChannelListing interface{}, mods queries.Applicator) error {
	var slice []*CollectionChannelListing
	var object *CollectionChannelListing

	if singular {
		var ok bool
		object, ok = maybeCollectionChannelListing.(*CollectionChannelListing)
		if !ok {
			object = new(CollectionChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollectionChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollectionChannelListing))
			}
		}
	} else {
		s, ok := maybeCollectionChannelListing.(*[]*CollectionChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollectionChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollectionChannelListing))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &collectionChannelListingR{}
		}
		if !queries.IsNil(object.ChannelID) {
			args[object.ChannelID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionChannelListingR{}
			}

			if !queries.IsNil(obj.ChannelID) {
				args[obj.ChannelID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.CollectionChannelListings = append(foreign.R.CollectionChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChannelID, foreign.ID) {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.CollectionChannelListings = append(foreign.R.CollectionChannelListings, local)
				break
			}
		}
	}

	return nil
}

// LoadCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collectionChannelListingL) LoadCollection(e boil.Executor, singular bool, maybeCollectionChannelListing interface{}, mods queries.Applicator) error {
	var slice []*CollectionChannelListing
	var object *CollectionChannelListing

	if singular {
		var ok bool
		object, ok = maybeCollectionChannelListing.(*CollectionChannelListing)
		if !ok {
			object = new(CollectionChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollectionChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollectionChannelListing))
			}
		}
	} else {
		s, ok := maybeCollectionChannelListing.(*[]*CollectionChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollectionChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollectionChannelListing))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &collectionChannelListingR{}
		}
		args[object.CollectionID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionChannelListingR{}
			}

			args[obj.CollectionID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Collection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.CollectionChannelListings = append(foreign.R.CollectionChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CollectionID == foreign.ID {
				local.R.Collection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.CollectionChannelListings = append(foreign.R.CollectionChannelListings, local)
				break
			}
		}
	}

	return nil
}

// SetChannel of the collectionChannelListing to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.CollectionChannelListings.
func (o *CollectionChannelListing) SetChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"collection_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, collectionChannelListingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChannelID, related.ID)
	if o.R == nil {
		o.R = &collectionChannelListingR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			CollectionChannelListings: CollectionChannelListingSlice{o},
		}
	} else {
		related.R.CollectionChannelListings = append(related.R.CollectionChannelListings, o)
	}

	return nil
}

// RemoveChannel relationship.
// Sets o.R.Channel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CollectionChannelListing) RemoveChannel(exec boil.Executor, related *Channel) error {
	var err error

	queries.SetScanner(&o.ChannelID, nil)
	if _, err = o.Update(exec, boil.Whitelist("channel_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Channel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CollectionChannelListings {
		if queries.Equal(o.ChannelID, ri.ChannelID) {
			continue
		}

		ln := len(related.R.CollectionChannelListings)
		if ln > 1 && i < ln-1 {
			related.R.CollectionChannelListings[i] = related.R.CollectionChannelListings[ln-1]
		}
		related.R.CollectionChannelListings = related.R.CollectionChannelListings[:ln-1]
		break
	}
	return nil
}

// SetCollection of the collectionChannelListing to the related item.
// Sets o.R.Collection to related.
// Adds o to related.R.CollectionChannelListings.
func (o *CollectionChannelListing) SetCollection(exec boil.Executor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"collection_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
		strmangle.WhereClause("\"", "\"", 2, collectionChannelListingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CollectionID = related.ID
	if o.R == nil {
		o.R = &collectionChannelListingR{
			Collection: related,
		}
	} else {
		o.R.Collection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			CollectionChannelListings: CollectionChannelListingSlice{o},
		}
	} else {
		related.R.CollectionChannelListings = append(related.R.CollectionChannelListings, o)
	}

	return nil
}

// CollectionChannelListings retrieves all the records using an executor.
func CollectionChannelListings(mods ...qm.QueryMod) collectionChannelListingQuery {
	mods = append(mods, qm.From("\"collection_channel_listings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"collection_channel_listings\".*"})
	}

	return collectionChannelListingQuery{q}
}

// FindCollectionChannelListing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCollectionChannelListing(exec boil.Executor, iD string, selectCols ...string) (*CollectionChannelListing, error) {
	collectionChannelListingObj := &CollectionChannelListing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"collection_channel_listings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, collectionChannelListingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from collection_channel_listings")
	}

	return collectionChannelListingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CollectionChannelListing) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no collection_channel_listings provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(collectionChannelListingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	collectionChannelListingInsertCacheMut.RLock()
	cache, cached := collectionChannelListingInsertCache[key]
	collectionChannelListingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			collectionChannelListingAllColumns,
			collectionChannelListingColumnsWithDefault,
			collectionChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"collection_channel_listings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"collection_channel_listings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into collection_channel_listings")
	}

	if !cached {
		collectionChannelListingInsertCacheMut.Lock()
		collectionChannelListingInsertCache[key] = cache
		collectionChannelListingInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CollectionChannelListing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CollectionChannelListing) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	collectionChannelListingUpdateCacheMut.RLock()
	cache, cached := collectionChannelListingUpdateCache[key]
	collectionChannelListingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			collectionChannelListingAllColumns,
			collectionChannelListingPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update collection_channel_listings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"collection_channel_listings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, collectionChannelListingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, append(wl, collectionChannelListingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update collection_channel_listings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for collection_channel_listings")
	}

	if !cached {
		collectionChannelListingUpdateCacheMut.Lock()
		collectionChannelListingUpdateCache[key] = cache
		collectionChannelListingUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q collectionChannelListingQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for collection_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for collection_channel_listings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CollectionChannelListingSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"collection_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, collectionChannelListingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in collectionChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all collectionChannelListing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CollectionChannelListing) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no collection_channel_listings provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(collectionChannelListingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	collectionChannelListingUpsertCacheMut.RLock()
	cache, cached := collectionChannelListingUpsertCache[key]
	collectionChannelListingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			collectionChannelListingAllColumns,
			collectionChannelListingColumnsWithDefault,
			collectionChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			collectionChannelListingAllColumns,
			collectionChannelListingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert collection_channel_listings, could not build update column list")
		}

		ret := strmangle.SetComplement(collectionChannelListingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(collectionChannelListingPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert collection_channel_listings, could not build conflict column list")
			}

			conflict = make([]string, len(collectionChannelListingPrimaryKeyColumns))
			copy(conflict, collectionChannelListingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"collection_channel_listings\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert collection_channel_listings")
	}

	if !cached {
		collectionChannelListingUpsertCacheMut.Lock()
		collectionChannelListingUpsertCache[key] = cache
		collectionChannelListingUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CollectionChannelListing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CollectionChannelListing) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no CollectionChannelListing provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), collectionChannelListingPrimaryKeyMapping)
	sql := "DELETE FROM \"collection_channel_listings\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from collection_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for collection_channel_listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q collectionChannelListingQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no collectionChannelListingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from collection_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for collection_channel_listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CollectionChannelListingSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"collection_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, collectionChannelListingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from collectionChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for collection_channel_listings")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CollectionChannelListing) Reload(exec boil.Executor) error {
	ret, err := FindCollectionChannelListing(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CollectionChannelListingSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CollectionChannelListingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"collection_channel_listings\".* FROM \"collection_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, collectionChannelListingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in CollectionChannelListingSlice")
	}

	*o = slice

	return nil
}

// CollectionChannelListingExists checks if the CollectionChannelListing row exists.
func CollectionChannelListingExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"collection_channel_listings\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if collection_channel_listings exists")
	}

	return exists, nil
}

// Exists checks if the CollectionChannelListing row exists.
func (o *CollectionChannelListing) Exists(exec boil.Executor) (bool, error) {
	return CollectionChannelListingExists(exec, o.ID)
}
