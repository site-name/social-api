// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Address is an object representing the database table.
type Address struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	FirstName      string      `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName       string      `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	CompanyName    string      `boil:"company_name" json:"company_name" toml:"company_name" yaml:"company_name"`
	StreetAddress1 string      `boil:"street_address1" json:"street_address1" toml:"street_address1" yaml:"street_address1"`
	StreetAddress2 string      `boil:"street_address2" json:"street_address2" toml:"street_address2" yaml:"street_address2"`
	City           string      `boil:"city" json:"city" toml:"city" yaml:"city"`
	CityArea       string      `boil:"city_area" json:"city_area" toml:"city_area" yaml:"city_area"`
	PostalCode     string      `boil:"postal_code" json:"postal_code" toml:"postal_code" yaml:"postal_code"`
	Country        Countrycode `boil:"country" json:"country" toml:"country" yaml:"country"`
	CountryArea    string      `boil:"country_area" json:"country_area" toml:"country_area" yaml:"country_area"`
	Phone          string      `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	CreatedAt      int64       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      int64       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *addressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L addressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AddressColumns = struct {
	ID             string
	FirstName      string
	LastName       string
	CompanyName    string
	StreetAddress1 string
	StreetAddress2 string
	City           string
	CityArea       string
	PostalCode     string
	Country        string
	CountryArea    string
	Phone          string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	FirstName:      "first_name",
	LastName:       "last_name",
	CompanyName:    "company_name",
	StreetAddress1: "street_address1",
	StreetAddress2: "street_address2",
	City:           "city",
	CityArea:       "city_area",
	PostalCode:     "postal_code",
	Country:        "country",
	CountryArea:    "country_area",
	Phone:          "phone",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var AddressTableColumns = struct {
	ID             string
	FirstName      string
	LastName       string
	CompanyName    string
	StreetAddress1 string
	StreetAddress2 string
	City           string
	CityArea       string
	PostalCode     string
	Country        string
	CountryArea    string
	Phone          string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "addresses.id",
	FirstName:      "addresses.first_name",
	LastName:       "addresses.last_name",
	CompanyName:    "addresses.company_name",
	StreetAddress1: "addresses.street_address1",
	StreetAddress2: "addresses.street_address2",
	City:           "addresses.city",
	CityArea:       "addresses.city_area",
	PostalCode:     "addresses.postal_code",
	Country:        "addresses.country",
	CountryArea:    "addresses.country_area",
	Phone:          "addresses.phone",
	CreatedAt:      "addresses.created_at",
	UpdatedAt:      "addresses.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperCountrycode struct{ field string }

func (w whereHelperCountrycode) EQ(x Countrycode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperCountrycode) NEQ(x Countrycode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperCountrycode) LT(x Countrycode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperCountrycode) LTE(x Countrycode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperCountrycode) GT(x Countrycode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperCountrycode) GTE(x Countrycode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperCountrycode) IN(slice []Countrycode) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperCountrycode) NIN(slice []Countrycode) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AddressWhere = struct {
	ID             whereHelperstring
	FirstName      whereHelperstring
	LastName       whereHelperstring
	CompanyName    whereHelperstring
	StreetAddress1 whereHelperstring
	StreetAddress2 whereHelperstring
	City           whereHelperstring
	CityArea       whereHelperstring
	PostalCode     whereHelperstring
	Country        whereHelperCountrycode
	CountryArea    whereHelperstring
	Phone          whereHelperstring
	CreatedAt      whereHelperint64
	UpdatedAt      whereHelperint64
}{
	ID:             whereHelperstring{field: "\"addresses\".\"id\""},
	FirstName:      whereHelperstring{field: "\"addresses\".\"first_name\""},
	LastName:       whereHelperstring{field: "\"addresses\".\"last_name\""},
	CompanyName:    whereHelperstring{field: "\"addresses\".\"company_name\""},
	StreetAddress1: whereHelperstring{field: "\"addresses\".\"street_address1\""},
	StreetAddress2: whereHelperstring{field: "\"addresses\".\"street_address2\""},
	City:           whereHelperstring{field: "\"addresses\".\"city\""},
	CityArea:       whereHelperstring{field: "\"addresses\".\"city_area\""},
	PostalCode:     whereHelperstring{field: "\"addresses\".\"postal_code\""},
	Country:        whereHelperCountrycode{field: "\"addresses\".\"country\""},
	CountryArea:    whereHelperstring{field: "\"addresses\".\"country_area\""},
	Phone:          whereHelperstring{field: "\"addresses\".\"phone\""},
	CreatedAt:      whereHelperint64{field: "\"addresses\".\"created_at\""},
	UpdatedAt:      whereHelperint64{field: "\"addresses\".\"updated_at\""},
}

// AddressRels is where relationship names are stored.
var AddressRels = struct {
	BillingAddressCheckouts     string
	BillingAddressOrders        string
	Shops                       string
	UserAddresses               string
	DefaultShippingAddressUsers string
	Warehouses                  string
}{
	BillingAddressCheckouts:     "BillingAddressCheckouts",
	BillingAddressOrders:        "BillingAddressOrders",
	Shops:                       "Shops",
	UserAddresses:               "UserAddresses",
	DefaultShippingAddressUsers: "DefaultShippingAddressUsers",
	Warehouses:                  "Warehouses",
}

// addressR is where relationships are stored.
type addressR struct {
	BillingAddressCheckouts     CheckoutSlice    `boil:"BillingAddressCheckouts" json:"BillingAddressCheckouts" toml:"BillingAddressCheckouts" yaml:"BillingAddressCheckouts"`
	BillingAddressOrders        OrderSlice       `boil:"BillingAddressOrders" json:"BillingAddressOrders" toml:"BillingAddressOrders" yaml:"BillingAddressOrders"`
	Shops                       ShopSlice        `boil:"Shops" json:"Shops" toml:"Shops" yaml:"Shops"`
	UserAddresses               UserAddressSlice `boil:"UserAddresses" json:"UserAddresses" toml:"UserAddresses" yaml:"UserAddresses"`
	DefaultShippingAddressUsers UserSlice        `boil:"DefaultShippingAddressUsers" json:"DefaultShippingAddressUsers" toml:"DefaultShippingAddressUsers" yaml:"DefaultShippingAddressUsers"`
	Warehouses                  WarehouseSlice   `boil:"Warehouses" json:"Warehouses" toml:"Warehouses" yaml:"Warehouses"`
}

// NewStruct creates a new relationship struct
func (*addressR) NewStruct() *addressR {
	return &addressR{}
}

func (r *addressR) GetBillingAddressCheckouts() CheckoutSlice {
	if r == nil {
		return nil
	}
	return r.BillingAddressCheckouts
}

func (r *addressR) GetBillingAddressOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.BillingAddressOrders
}

func (r *addressR) GetShops() ShopSlice {
	if r == nil {
		return nil
	}
	return r.Shops
}

func (r *addressR) GetUserAddresses() UserAddressSlice {
	if r == nil {
		return nil
	}
	return r.UserAddresses
}

func (r *addressR) GetDefaultShippingAddressUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.DefaultShippingAddressUsers
}

func (r *addressR) GetWarehouses() WarehouseSlice {
	if r == nil {
		return nil
	}
	return r.Warehouses
}

// addressL is where Load methods for each relationship are stored.
type addressL struct{}

var (
	addressAllColumns            = []string{"id", "first_name", "last_name", "company_name", "street_address1", "street_address2", "city", "city_area", "postal_code", "country", "country_area", "phone", "created_at", "updated_at"}
	addressColumnsWithoutDefault = []string{"first_name", "last_name", "company_name", "street_address1", "street_address2", "city", "city_area", "postal_code", "country", "country_area", "phone", "created_at", "updated_at"}
	addressColumnsWithDefault    = []string{"id"}
	addressPrimaryKeyColumns     = []string{"id"}
	addressGeneratedColumns      = []string{}
)

type (
	// AddressSlice is an alias for a slice of pointers to Address.
	// This should almost always be used instead of []Address.
	AddressSlice []*Address

	addressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	addressType                 = reflect.TypeOf(&Address{})
	addressMapping              = queries.MakeStructMapping(addressType)
	addressPrimaryKeyMapping, _ = queries.BindMapping(addressType, addressMapping, addressPrimaryKeyColumns)
	addressInsertCacheMut       sync.RWMutex
	addressInsertCache          = make(map[string]insertCache)
	addressUpdateCacheMut       sync.RWMutex
	addressUpdateCache          = make(map[string]updateCache)
	addressUpsertCacheMut       sync.RWMutex
	addressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single address record from the query.
func (q addressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Address, error) {
	o := &Address{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for addresses")
	}

	return o, nil
}

// All returns all Address records from the query.
func (q addressQuery) All(ctx context.Context, exec boil.ContextExecutor) (AddressSlice, error) {
	var o []*Address

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Address slice")
	}

	return o, nil
}

// Count returns the count of all Address records in the query.
func (q addressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count addresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q addressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if addresses exists")
	}

	return count > 0, nil
}

// BillingAddressCheckouts retrieves all the checkout's Checkouts with an executor via billing_address_id column.
func (o *Address) BillingAddressCheckouts(mods ...qm.QueryMod) checkoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkouts\".\"billing_address_id\"=?", o.ID),
	)

	return Checkouts(queryMods...)
}

// BillingAddressOrders retrieves all the order's Orders with an executor via billing_address_id column.
func (o *Address) BillingAddressOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"billing_address_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// Shops retrieves all the shop's Shops with an executor.
func (o *Address) Shops(mods ...qm.QueryMod) shopQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shops\".\"address_id\"=?", o.ID),
	)

	return Shops(queryMods...)
}

// UserAddresses retrieves all the user_address's UserAddresses with an executor.
func (o *Address) UserAddresses(mods ...qm.QueryMod) userAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_addresses\".\"address_id\"=?", o.ID),
	)

	return UserAddresses(queryMods...)
}

// DefaultShippingAddressUsers retrieves all the user's Users with an executor via default_shipping_address_id column.
func (o *Address) DefaultShippingAddressUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"default_shipping_address_id\"=?", o.ID),
	)

	return Users(queryMods...)
}

// Warehouses retrieves all the warehouse's Warehouses with an executor.
func (o *Address) Warehouses(mods ...qm.QueryMod) warehouseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"warehouses\".\"address_id\"=?", o.ID),
	)

	return Warehouses(queryMods...)
}

// LoadBillingAddressCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadBillingAddressCheckouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.billing_address_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkouts")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if singular {
		object.R.BillingAddressCheckouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutR{}
			}
			foreign.R.BillingAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BillingAddressID) {
				local.R.BillingAddressCheckouts = append(local.R.BillingAddressCheckouts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.BillingAddress = local
				break
			}
		}
	}

	return nil
}

// LoadBillingAddressOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadBillingAddressOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.billing_address_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if singular {
		object.R.BillingAddressOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.BillingAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BillingAddressID) {
				local.R.BillingAddressOrders = append(local.R.BillingAddressOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.BillingAddress = local
				break
			}
		}
	}

	return nil
}

// LoadShops allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadShops(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shops`),
		qm.WhereIn(`shops.address_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shops")
	}

	var resultSlice []*Shop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shops")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shops")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shops")
	}

	if singular {
		object.R.Shops = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shopR{}
			}
			foreign.R.Address = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AddressID) {
				local.R.Shops = append(local.R.Shops, foreign)
				if foreign.R == nil {
					foreign.R = &shopR{}
				}
				foreign.R.Address = local
				break
			}
		}
	}

	return nil
}

// LoadUserAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadUserAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_addresses`),
		qm.WhereIn(`user_addresses.address_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_addresses")
	}

	var resultSlice []*UserAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_addresses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_addresses")
	}

	if singular {
		object.R.UserAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userAddressR{}
			}
			foreign.R.Address = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AddressID {
				local.R.UserAddresses = append(local.R.UserAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &userAddressR{}
				}
				foreign.R.Address = local
				break
			}
		}
	}

	return nil
}

// LoadDefaultShippingAddressUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadDefaultShippingAddressUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.default_shipping_address_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if singular {
		object.R.DefaultShippingAddressUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.DefaultShippingAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DefaultShippingAddressID) {
				local.R.DefaultShippingAddressUsers = append(local.R.DefaultShippingAddressUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.DefaultShippingAddress = local
				break
			}
		}
	}

	return nil
}

// LoadWarehouses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadWarehouses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses.address_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load warehouses")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice warehouses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if singular {
		object.R.Warehouses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &warehouseR{}
			}
			foreign.R.Address = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AddressID) {
				local.R.Warehouses = append(local.R.Warehouses, foreign)
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.Address = local
				break
			}
		}
	}

	return nil
}

// AddBillingAddressCheckouts adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.BillingAddressCheckouts.
// Sets related.R.BillingAddress appropriately.
func (o *Address) AddBillingAddressCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillingAddressID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"billing_address_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillingAddressID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			BillingAddressCheckouts: related,
		}
	} else {
		o.R.BillingAddressCheckouts = append(o.R.BillingAddressCheckouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutR{
				BillingAddress: o,
			}
		} else {
			rel.R.BillingAddress = o
		}
	}
	return nil
}

// SetBillingAddressCheckouts removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillingAddress's BillingAddressCheckouts accordingly.
// Replaces o.R.BillingAddressCheckouts with related.
// Sets related.R.BillingAddress's BillingAddressCheckouts accordingly.
func (o *Address) SetBillingAddressCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	query := "update \"checkouts\" set \"billing_address_id\" = null where \"billing_address_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BillingAddressCheckouts {
			queries.SetScanner(&rel.BillingAddressID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BillingAddress = nil
		}
		o.R.BillingAddressCheckouts = nil
	}

	return o.AddBillingAddressCheckouts(ctx, exec, insert, related...)
}

// RemoveBillingAddressCheckouts relationships from objects passed in.
// Removes related items from R.BillingAddressCheckouts (uses pointer comparison, removal does not keep order)
// Sets related.R.BillingAddress.
func (o *Address) RemoveBillingAddressCheckouts(ctx context.Context, exec boil.ContextExecutor, related ...*Checkout) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillingAddressID, nil)
		if rel.R != nil {
			rel.R.BillingAddress = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("billing_address_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillingAddressCheckouts {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillingAddressCheckouts)
			if ln > 1 && i < ln-1 {
				o.R.BillingAddressCheckouts[i] = o.R.BillingAddressCheckouts[ln-1]
			}
			o.R.BillingAddressCheckouts = o.R.BillingAddressCheckouts[:ln-1]
			break
		}
	}

	return nil
}

// AddBillingAddressOrders adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.BillingAddressOrders.
// Sets related.R.BillingAddress appropriately.
func (o *Address) AddBillingAddressOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BillingAddressID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"billing_address_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BillingAddressID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			BillingAddressOrders: related,
		}
	} else {
		o.R.BillingAddressOrders = append(o.R.BillingAddressOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				BillingAddress: o,
			}
		} else {
			rel.R.BillingAddress = o
		}
	}
	return nil
}

// SetBillingAddressOrders removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillingAddress's BillingAddressOrders accordingly.
// Replaces o.R.BillingAddressOrders with related.
// Sets related.R.BillingAddress's BillingAddressOrders accordingly.
func (o *Address) SetBillingAddressOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"billing_address_id\" = null where \"billing_address_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BillingAddressOrders {
			queries.SetScanner(&rel.BillingAddressID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BillingAddress = nil
		}
		o.R.BillingAddressOrders = nil
	}

	return o.AddBillingAddressOrders(ctx, exec, insert, related...)
}

// RemoveBillingAddressOrders relationships from objects passed in.
// Removes related items from R.BillingAddressOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.BillingAddress.
func (o *Address) RemoveBillingAddressOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BillingAddressID, nil)
		if rel.R != nil {
			rel.R.BillingAddress = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("billing_address_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillingAddressOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillingAddressOrders)
			if ln > 1 && i < ln-1 {
				o.R.BillingAddressOrders[i] = o.R.BillingAddressOrders[ln-1]
			}
			o.R.BillingAddressOrders = o.R.BillingAddressOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddShops adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Shops.
// Sets related.R.Address appropriately.
func (o *Address) AddShops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shop) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shops\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"address_id"}),
				strmangle.WhereClause("\"", "\"", 2, shopPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			Shops: related,
		}
	} else {
		o.R.Shops = append(o.R.Shops, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shopR{
				Address: o,
			}
		} else {
			rel.R.Address = o
		}
	}
	return nil
}

// SetShops removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Address's Shops accordingly.
// Replaces o.R.Shops with related.
// Sets related.R.Address's Shops accordingly.
func (o *Address) SetShops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shop) error {
	query := "update \"shops\" set \"address_id\" = null where \"address_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Shops {
			queries.SetScanner(&rel.AddressID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Address = nil
		}
		o.R.Shops = nil
	}

	return o.AddShops(ctx, exec, insert, related...)
}

// RemoveShops relationships from objects passed in.
// Removes related items from R.Shops (uses pointer comparison, removal does not keep order)
// Sets related.R.Address.
func (o *Address) RemoveShops(ctx context.Context, exec boil.ContextExecutor, related ...*Shop) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if rel.R != nil {
			rel.R.Address = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("address_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Shops {
			if rel != ri {
				continue
			}

			ln := len(o.R.Shops)
			if ln > 1 && i < ln-1 {
				o.R.Shops[i] = o.R.Shops[ln-1]
			}
			o.R.Shops = o.R.Shops[:ln-1]
			break
		}
	}

	return nil
}

// AddUserAddresses adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.UserAddresses.
// Sets related.R.Address appropriately.
func (o *Address) AddUserAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AddressID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_addresses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"address_id"}),
				strmangle.WhereClause("\"", "\"", 2, userAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AddressID = o.ID
		}
	}

	if o.R == nil {
		o.R = &addressR{
			UserAddresses: related,
		}
	} else {
		o.R.UserAddresses = append(o.R.UserAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userAddressR{
				Address: o,
			}
		} else {
			rel.R.Address = o
		}
	}
	return nil
}

// AddDefaultShippingAddressUsers adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.DefaultShippingAddressUsers.
// Sets related.R.DefaultShippingAddress appropriately.
func (o *Address) AddDefaultShippingAddressUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DefaultShippingAddressID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"default_shipping_address_id"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DefaultShippingAddressID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			DefaultShippingAddressUsers: related,
		}
	} else {
		o.R.DefaultShippingAddressUsers = append(o.R.DefaultShippingAddressUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				DefaultShippingAddress: o,
			}
		} else {
			rel.R.DefaultShippingAddress = o
		}
	}
	return nil
}

// SetDefaultShippingAddressUsers removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DefaultShippingAddress's DefaultShippingAddressUsers accordingly.
// Replaces o.R.DefaultShippingAddressUsers with related.
// Sets related.R.DefaultShippingAddress's DefaultShippingAddressUsers accordingly.
func (o *Address) SetDefaultShippingAddressUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"default_shipping_address_id\" = null where \"default_shipping_address_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DefaultShippingAddressUsers {
			queries.SetScanner(&rel.DefaultShippingAddressID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DefaultShippingAddress = nil
		}
		o.R.DefaultShippingAddressUsers = nil
	}

	return o.AddDefaultShippingAddressUsers(ctx, exec, insert, related...)
}

// RemoveDefaultShippingAddressUsers relationships from objects passed in.
// Removes related items from R.DefaultShippingAddressUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.DefaultShippingAddress.
func (o *Address) RemoveDefaultShippingAddressUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DefaultShippingAddressID, nil)
		if rel.R != nil {
			rel.R.DefaultShippingAddress = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("default_shipping_address_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DefaultShippingAddressUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.DefaultShippingAddressUsers)
			if ln > 1 && i < ln-1 {
				o.R.DefaultShippingAddressUsers[i] = o.R.DefaultShippingAddressUsers[ln-1]
			}
			o.R.DefaultShippingAddressUsers = o.R.DefaultShippingAddressUsers[:ln-1]
			break
		}
	}

	return nil
}

// AddWarehouses adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.Warehouses.
// Sets related.R.Address appropriately.
func (o *Address) AddWarehouses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Warehouse) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AddressID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"warehouses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"address_id"}),
				strmangle.WhereClause("\"", "\"", 2, warehousePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AddressID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			Warehouses: related,
		}
	} else {
		o.R.Warehouses = append(o.R.Warehouses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &warehouseR{
				Address: o,
			}
		} else {
			rel.R.Address = o
		}
	}
	return nil
}

// SetWarehouses removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Address's Warehouses accordingly.
// Replaces o.R.Warehouses with related.
// Sets related.R.Address's Warehouses accordingly.
func (o *Address) SetWarehouses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Warehouse) error {
	query := "update \"warehouses\" set \"address_id\" = null where \"address_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Warehouses {
			queries.SetScanner(&rel.AddressID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Address = nil
		}
		o.R.Warehouses = nil
	}

	return o.AddWarehouses(ctx, exec, insert, related...)
}

// RemoveWarehouses relationships from objects passed in.
// Removes related items from R.Warehouses (uses pointer comparison, removal does not keep order)
// Sets related.R.Address.
func (o *Address) RemoveWarehouses(ctx context.Context, exec boil.ContextExecutor, related ...*Warehouse) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AddressID, nil)
		if rel.R != nil {
			rel.R.Address = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("address_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Warehouses {
			if rel != ri {
				continue
			}

			ln := len(o.R.Warehouses)
			if ln > 1 && i < ln-1 {
				o.R.Warehouses[i] = o.R.Warehouses[ln-1]
			}
			o.R.Warehouses = o.R.Warehouses[:ln-1]
			break
		}
	}

	return nil
}

// Addresses retrieves all the records using an executor.
func Addresses(mods ...qm.QueryMod) addressQuery {
	mods = append(mods, qm.From("\"addresses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"addresses\".*"})
	}

	return addressQuery{q}
}

// FindAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAddress(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Address, error) {
	addressObj := &Address{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"addresses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, addressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from addresses")
	}

	return addressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Address) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no addresses provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(addressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	addressInsertCacheMut.RLock()
	cache, cached := addressInsertCache[key]
	addressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			addressAllColumns,
			addressColumnsWithDefault,
			addressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(addressType, addressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"addresses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"addresses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into addresses")
	}

	if !cached {
		addressInsertCacheMut.Lock()
		addressInsertCache[key] = cache
		addressInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Address.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Address) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	addressUpdateCacheMut.RLock()
	cache, cached := addressUpdateCache[key]
	addressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			addressAllColumns,
			addressPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"addresses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, addressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, append(wl, addressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update addresses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for addresses")
	}

	if !cached {
		addressUpdateCacheMut.Lock()
		addressUpdateCache[key] = cache
		addressUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q addressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for addresses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, addressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in address slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all address")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Address) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no addresses provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(addressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	addressUpsertCacheMut.RLock()
	cache, cached := addressUpsertCache[key]
	addressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			addressAllColumns,
			addressColumnsWithDefault,
			addressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			addressAllColumns,
			addressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert addresses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(addressPrimaryKeyColumns))
			copy(conflict, addressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"addresses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(addressType, addressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert addresses")
	}

	if !cached {
		addressUpsertCacheMut.Lock()
		addressUpsertCache[key] = cache
		addressUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Address record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Address) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Address provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), addressPrimaryKeyMapping)
	sql := "DELETE FROM \"addresses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for addresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q addressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no addressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for addresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, addressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from address slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for addresses")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Address) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAddress(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"addresses\".* FROM \"addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, addressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in AddressSlice")
	}

	*o = slice

	return nil
}

// AddressExists checks if the Address row exists.
func AddressExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"addresses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if addresses exists")
	}

	return exists, nil
}

// Exists checks if the Address row exists.
func (o *Address) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AddressExists(ctx, exec, o.ID)
}
