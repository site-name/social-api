// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TransactionEvent is an object representing the database table.
type TransactionEvent struct {
	ID                     string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	IdempotencyKey         model_types.NullString `boil:"idempotency_key" json:"idempotency_key,omitempty" toml:"idempotency_key" yaml:"idempotency_key,omitempty"`
	PSPReference           model_types.NullString `boil:"psp_reference" json:"psp_reference,omitempty" toml:"psp_reference" yaml:"psp_reference,omitempty"`
	Message                model_types.NullString `boil:"message" json:"message,omitempty" toml:"message" yaml:"message,omitempty"`
	TransactionItemID      model_types.NullString `boil:"transaction_item_id" json:"transaction_item_id,omitempty" toml:"transaction_item_id" yaml:"transaction_item_id,omitempty"`
	ExternalURL            model_types.NullString `boil:"external_url" json:"external_url,omitempty" toml:"external_url" yaml:"external_url,omitempty"`
	Currency               Currency               `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Type                   TransactionEventType   `boil:"type" json:"type" toml:"type" yaml:"type"`
	AmountValue            decimal.Decimal        `boil:"amount_value" json:"amount_value" toml:"amount_value" yaml:"amount_value"`
	UserID                 model_types.NullString `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	AppID                  model_types.NullString `boil:"app_id" json:"app_id,omitempty" toml:"app_id" yaml:"app_id,omitempty"`
	AppIdentifier          model_types.NullString `boil:"app_identifier" json:"app_identifier,omitempty" toml:"app_identifier" yaml:"app_identifier,omitempty"`
	IncludeInCalculations  bool                   `boil:"include_in_calculations" json:"include_in_calculations" toml:"include_in_calculations" yaml:"include_in_calculations"`
	RelatedGrantedRefundID model_types.NullString `boil:"related_granted_refund_id" json:"related_granted_refund_id,omitempty" toml:"related_granted_refund_id" yaml:"related_granted_refund_id,omitempty"`
	CreatedAt              int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *transactionEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionEventColumns = struct {
	ID                     string
	IdempotencyKey         string
	PSPReference           string
	Message                string
	TransactionItemID      string
	ExternalURL            string
	Currency               string
	Type                   string
	AmountValue            string
	UserID                 string
	AppID                  string
	AppIdentifier          string
	IncludeInCalculations  string
	RelatedGrantedRefundID string
	CreatedAt              string
}{
	ID:                     "id",
	IdempotencyKey:         "idempotency_key",
	PSPReference:           "psp_reference",
	Message:                "message",
	TransactionItemID:      "transaction_item_id",
	ExternalURL:            "external_url",
	Currency:               "currency",
	Type:                   "type",
	AmountValue:            "amount_value",
	UserID:                 "user_id",
	AppID:                  "app_id",
	AppIdentifier:          "app_identifier",
	IncludeInCalculations:  "include_in_calculations",
	RelatedGrantedRefundID: "related_granted_refund_id",
	CreatedAt:              "created_at",
}

var TransactionEventTableColumns = struct {
	ID                     string
	IdempotencyKey         string
	PSPReference           string
	Message                string
	TransactionItemID      string
	ExternalURL            string
	Currency               string
	Type                   string
	AmountValue            string
	UserID                 string
	AppID                  string
	AppIdentifier          string
	IncludeInCalculations  string
	RelatedGrantedRefundID string
	CreatedAt              string
}{
	ID:                     "transaction_events.id",
	IdempotencyKey:         "transaction_events.idempotency_key",
	PSPReference:           "transaction_events.psp_reference",
	Message:                "transaction_events.message",
	TransactionItemID:      "transaction_events.transaction_item_id",
	ExternalURL:            "transaction_events.external_url",
	Currency:               "transaction_events.currency",
	Type:                   "transaction_events.type",
	AmountValue:            "transaction_events.amount_value",
	UserID:                 "transaction_events.user_id",
	AppID:                  "transaction_events.app_id",
	AppIdentifier:          "transaction_events.app_identifier",
	IncludeInCalculations:  "transaction_events.include_in_calculations",
	RelatedGrantedRefundID: "transaction_events.related_granted_refund_id",
	CreatedAt:              "transaction_events.created_at",
}

// Generated where

type whereHelperTransactionEventType struct{ field string }

func (w whereHelperTransactionEventType) EQ(x TransactionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperTransactionEventType) NEQ(x TransactionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperTransactionEventType) LT(x TransactionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperTransactionEventType) LTE(x TransactionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperTransactionEventType) GT(x TransactionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperTransactionEventType) GTE(x TransactionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperTransactionEventType) IN(slice []TransactionEventType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperTransactionEventType) NIN(slice []TransactionEventType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TransactionEventWhere = struct {
	ID                     whereHelperstring
	IdempotencyKey         whereHelpermodel_types_NullString
	PSPReference           whereHelpermodel_types_NullString
	Message                whereHelpermodel_types_NullString
	TransactionItemID      whereHelpermodel_types_NullString
	ExternalURL            whereHelpermodel_types_NullString
	Currency               whereHelperCurrency
	Type                   whereHelperTransactionEventType
	AmountValue            whereHelperdecimal_Decimal
	UserID                 whereHelpermodel_types_NullString
	AppID                  whereHelpermodel_types_NullString
	AppIdentifier          whereHelpermodel_types_NullString
	IncludeInCalculations  whereHelperbool
	RelatedGrantedRefundID whereHelpermodel_types_NullString
	CreatedAt              whereHelperint64
}{
	ID:                     whereHelperstring{field: "\"transaction_events\".\"id\""},
	IdempotencyKey:         whereHelpermodel_types_NullString{field: "\"transaction_events\".\"idempotency_key\""},
	PSPReference:           whereHelpermodel_types_NullString{field: "\"transaction_events\".\"psp_reference\""},
	Message:                whereHelpermodel_types_NullString{field: "\"transaction_events\".\"message\""},
	TransactionItemID:      whereHelpermodel_types_NullString{field: "\"transaction_events\".\"transaction_item_id\""},
	ExternalURL:            whereHelpermodel_types_NullString{field: "\"transaction_events\".\"external_url\""},
	Currency:               whereHelperCurrency{field: "\"transaction_events\".\"currency\""},
	Type:                   whereHelperTransactionEventType{field: "\"transaction_events\".\"type\""},
	AmountValue:            whereHelperdecimal_Decimal{field: "\"transaction_events\".\"amount_value\""},
	UserID:                 whereHelpermodel_types_NullString{field: "\"transaction_events\".\"user_id\""},
	AppID:                  whereHelpermodel_types_NullString{field: "\"transaction_events\".\"app_id\""},
	AppIdentifier:          whereHelpermodel_types_NullString{field: "\"transaction_events\".\"app_identifier\""},
	IncludeInCalculations:  whereHelperbool{field: "\"transaction_events\".\"include_in_calculations\""},
	RelatedGrantedRefundID: whereHelpermodel_types_NullString{field: "\"transaction_events\".\"related_granted_refund_id\""},
	CreatedAt:              whereHelperint64{field: "\"transaction_events\".\"created_at\""},
}

// TransactionEventRels is where relationship names are stored.
var TransactionEventRels = struct {
	RelatedGrantedRefund string
	TransactionItem      string
	User                 string
}{
	RelatedGrantedRefund: "RelatedGrantedRefund",
	TransactionItem:      "TransactionItem",
	User:                 "User",
}

// transactionEventR is where relationships are stored.
type transactionEventR struct {
	RelatedGrantedRefund *OrderGrantedRefund `boil:"RelatedGrantedRefund" json:"RelatedGrantedRefund" toml:"RelatedGrantedRefund" yaml:"RelatedGrantedRefund"`
	TransactionItem      *TransactionItem    `boil:"TransactionItem" json:"TransactionItem" toml:"TransactionItem" yaml:"TransactionItem"`
	User                 *User               `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*transactionEventR) NewStruct() *transactionEventR {
	return &transactionEventR{}
}

func (r *transactionEventR) GetRelatedGrantedRefund() *OrderGrantedRefund {
	if r == nil {
		return nil
	}
	return r.RelatedGrantedRefund
}

func (r *transactionEventR) GetTransactionItem() *TransactionItem {
	if r == nil {
		return nil
	}
	return r.TransactionItem
}

func (r *transactionEventR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// transactionEventL is where Load methods for each relationship are stored.
type transactionEventL struct{}

var (
	transactionEventAllColumns            = []string{"id", "idempotency_key", "psp_reference", "message", "transaction_item_id", "external_url", "currency", "type", "amount_value", "user_id", "app_id", "app_identifier", "include_in_calculations", "related_granted_refund_id", "created_at"}
	transactionEventColumnsWithoutDefault = []string{"id", "currency", "type", "created_at"}
	transactionEventColumnsWithDefault    = []string{"idempotency_key", "psp_reference", "message", "transaction_item_id", "external_url", "amount_value", "user_id", "app_id", "app_identifier", "include_in_calculations", "related_granted_refund_id"}
	transactionEventPrimaryKeyColumns     = []string{"id"}
	transactionEventGeneratedColumns      = []string{}
)

type (
	// TransactionEventSlice is an alias for a slice of pointers to TransactionEvent.
	// This should almost always be used instead of []TransactionEvent.
	TransactionEventSlice []*TransactionEvent

	transactionEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionEventType                 = reflect.TypeOf(&TransactionEvent{})
	transactionEventMapping              = queries.MakeStructMapping(transactionEventType)
	transactionEventPrimaryKeyMapping, _ = queries.BindMapping(transactionEventType, transactionEventMapping, transactionEventPrimaryKeyColumns)
	transactionEventInsertCacheMut       sync.RWMutex
	transactionEventInsertCache          = make(map[string]insertCache)
	transactionEventUpdateCacheMut       sync.RWMutex
	transactionEventUpdateCache          = make(map[string]updateCache)
	transactionEventUpsertCacheMut       sync.RWMutex
	transactionEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single transactionEvent record from the query.
func (q transactionEventQuery) One(exec boil.Executor) (*TransactionEvent, error) {
	o := &TransactionEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for transaction_events")
	}

	return o, nil
}

// All returns all TransactionEvent records from the query.
func (q transactionEventQuery) All(exec boil.Executor) (TransactionEventSlice, error) {
	var o []*TransactionEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TransactionEvent slice")
	}

	return o, nil
}

// Count returns the count of all TransactionEvent records in the query.
func (q transactionEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count transaction_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transactionEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if transaction_events exists")
	}

	return count > 0, nil
}

// RelatedGrantedRefund pointed to by the foreign key.
func (o *TransactionEvent) RelatedGrantedRefund(mods ...qm.QueryMod) orderGrantedRefundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RelatedGrantedRefundID),
	}

	queryMods = append(queryMods, mods...)

	return OrderGrantedRefunds(queryMods...)
}

// TransactionItem pointed to by the foreign key.
func (o *TransactionEvent) TransactionItem(mods ...qm.QueryMod) transactionItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"token\" = ?", o.TransactionItemID),
	}

	queryMods = append(queryMods, mods...)

	return TransactionItems(queryMods...)
}

// User pointed to by the foreign key.
func (o *TransactionEvent) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadRelatedGrantedRefund allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionEventL) LoadRelatedGrantedRefund(e boil.Executor, singular bool, maybeTransactionEvent interface{}, mods queries.Applicator) error {
	var slice []*TransactionEvent
	var object *TransactionEvent

	if singular {
		var ok bool
		object, ok = maybeTransactionEvent.(*TransactionEvent)
		if !ok {
			object = new(TransactionEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransactionEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransactionEvent))
			}
		}
	} else {
		s, ok := maybeTransactionEvent.(*[]*TransactionEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransactionEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransactionEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionEventR{}
		}
		if !queries.IsNil(object.RelatedGrantedRefundID) {
			args[object.RelatedGrantedRefundID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionEventR{}
			}

			if !queries.IsNil(obj.RelatedGrantedRefundID) {
				args[obj.RelatedGrantedRefundID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_granted_refunds`),
		qm.WhereIn(`order_granted_refunds.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderGrantedRefund")
	}

	var resultSlice []*OrderGrantedRefund
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderGrantedRefund")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_granted_refunds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_granted_refunds")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.RelatedGrantedRefund = foreign
		if foreign.R == nil {
			foreign.R = &orderGrantedRefundR{}
		}
		foreign.R.RelatedGrantedRefundTransactionEvents = append(foreign.R.RelatedGrantedRefundTransactionEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RelatedGrantedRefundID, foreign.ID) {
				local.R.RelatedGrantedRefund = foreign
				if foreign.R == nil {
					foreign.R = &orderGrantedRefundR{}
				}
				foreign.R.RelatedGrantedRefundTransactionEvents = append(foreign.R.RelatedGrantedRefundTransactionEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactionItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionEventL) LoadTransactionItem(e boil.Executor, singular bool, maybeTransactionEvent interface{}, mods queries.Applicator) error {
	var slice []*TransactionEvent
	var object *TransactionEvent

	if singular {
		var ok bool
		object, ok = maybeTransactionEvent.(*TransactionEvent)
		if !ok {
			object = new(TransactionEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransactionEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransactionEvent))
			}
		}
	} else {
		s, ok := maybeTransactionEvent.(*[]*TransactionEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransactionEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransactionEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionEventR{}
		}
		if !queries.IsNil(object.TransactionItemID) {
			args[object.TransactionItemID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionEventR{}
			}

			if !queries.IsNil(obj.TransactionItemID) {
				args[obj.TransactionItemID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transaction_items`),
		qm.WhereIn(`transaction_items.token in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TransactionItem")
	}

	var resultSlice []*TransactionItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TransactionItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transaction_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction_items")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionItem = foreign
		if foreign.R == nil {
			foreign.R = &transactionItemR{}
		}
		foreign.R.TransactionEvents = append(foreign.R.TransactionEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TransactionItemID, foreign.Token) {
				local.R.TransactionItem = foreign
				if foreign.R == nil {
					foreign.R = &transactionItemR{}
				}
				foreign.R.TransactionEvents = append(foreign.R.TransactionEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionEventL) LoadUser(e boil.Executor, singular bool, maybeTransactionEvent interface{}, mods queries.Applicator) error {
	var slice []*TransactionEvent
	var object *TransactionEvent

	if singular {
		var ok bool
		object, ok = maybeTransactionEvent.(*TransactionEvent)
		if !ok {
			object = new(TransactionEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransactionEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransactionEvent))
			}
		}
	} else {
		s, ok := maybeTransactionEvent.(*[]*TransactionEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransactionEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransactionEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionEventR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionEventR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.TransactionEvents = append(foreign.R.TransactionEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.TransactionEvents = append(foreign.R.TransactionEvents, local)
				break
			}
		}
	}

	return nil
}

// SetRelatedGrantedRefund of the transactionEvent to the related item.
// Sets o.R.RelatedGrantedRefund to related.
// Adds o to related.R.RelatedGrantedRefundTransactionEvents.
func (o *TransactionEvent) SetRelatedGrantedRefund(exec boil.Executor, insert bool, related *OrderGrantedRefund) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"related_granted_refund_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RelatedGrantedRefundID, related.ID)
	if o.R == nil {
		o.R = &transactionEventR{
			RelatedGrantedRefund: related,
		}
	} else {
		o.R.RelatedGrantedRefund = related
	}

	if related.R == nil {
		related.R = &orderGrantedRefundR{
			RelatedGrantedRefundTransactionEvents: TransactionEventSlice{o},
		}
	} else {
		related.R.RelatedGrantedRefundTransactionEvents = append(related.R.RelatedGrantedRefundTransactionEvents, o)
	}

	return nil
}

// RemoveRelatedGrantedRefund relationship.
// Sets o.R.RelatedGrantedRefund to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TransactionEvent) RemoveRelatedGrantedRefund(exec boil.Executor, related *OrderGrantedRefund) error {
	var err error

	queries.SetScanner(&o.RelatedGrantedRefundID, nil)
	if _, err = o.Update(exec, boil.Whitelist("related_granted_refund_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.RelatedGrantedRefund = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RelatedGrantedRefundTransactionEvents {
		if queries.Equal(o.RelatedGrantedRefundID, ri.RelatedGrantedRefundID) {
			continue
		}

		ln := len(related.R.RelatedGrantedRefundTransactionEvents)
		if ln > 1 && i < ln-1 {
			related.R.RelatedGrantedRefundTransactionEvents[i] = related.R.RelatedGrantedRefundTransactionEvents[ln-1]
		}
		related.R.RelatedGrantedRefundTransactionEvents = related.R.RelatedGrantedRefundTransactionEvents[:ln-1]
		break
	}
	return nil
}

// SetTransactionItem of the transactionEvent to the related item.
// Sets o.R.TransactionItem to related.
// Adds o to related.R.TransactionEvents.
func (o *TransactionEvent) SetTransactionItem(exec boil.Executor, insert bool, related *TransactionItem) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionEventPrimaryKeyColumns),
	)
	values := []interface{}{related.Token, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TransactionItemID, related.Token)
	if o.R == nil {
		o.R = &transactionEventR{
			TransactionItem: related,
		}
	} else {
		o.R.TransactionItem = related
	}

	if related.R == nil {
		related.R = &transactionItemR{
			TransactionEvents: TransactionEventSlice{o},
		}
	} else {
		related.R.TransactionEvents = append(related.R.TransactionEvents, o)
	}

	return nil
}

// RemoveTransactionItem relationship.
// Sets o.R.TransactionItem to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TransactionEvent) RemoveTransactionItem(exec boil.Executor, related *TransactionItem) error {
	var err error

	queries.SetScanner(&o.TransactionItemID, nil)
	if _, err = o.Update(exec, boil.Whitelist("transaction_item_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TransactionItem = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TransactionEvents {
		if queries.Equal(o.TransactionItemID, ri.TransactionItemID) {
			continue
		}

		ln := len(related.R.TransactionEvents)
		if ln > 1 && i < ln-1 {
			related.R.TransactionEvents[i] = related.R.TransactionEvents[ln-1]
		}
		related.R.TransactionEvents = related.R.TransactionEvents[:ln-1]
		break
	}
	return nil
}

// SetUser of the transactionEvent to the related item.
// Sets o.R.User to related.
// Adds o to related.R.TransactionEvents.
func (o *TransactionEvent) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &transactionEventR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			TransactionEvents: TransactionEventSlice{o},
		}
	} else {
		related.R.TransactionEvents = append(related.R.TransactionEvents, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TransactionEvent) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TransactionEvents {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.TransactionEvents)
		if ln > 1 && i < ln-1 {
			related.R.TransactionEvents[i] = related.R.TransactionEvents[ln-1]
		}
		related.R.TransactionEvents = related.R.TransactionEvents[:ln-1]
		break
	}
	return nil
}

// TransactionEvents retrieves all the records using an executor.
func TransactionEvents(mods ...qm.QueryMod) transactionEventQuery {
	mods = append(mods, qm.From("\"transaction_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"transaction_events\".*"})
	}

	return transactionEventQuery{q}
}

// FindTransactionEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionEvent(exec boil.Executor, iD string, selectCols ...string) (*TransactionEvent, error) {
	transactionEventObj := &TransactionEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transaction_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, transactionEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from transaction_events")
	}

	return transactionEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no transaction_events provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(transactionEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionEventInsertCacheMut.RLock()
	cache, cached := transactionEventInsertCache[key]
	transactionEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionEventAllColumns,
			transactionEventColumnsWithDefault,
			transactionEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionEventType, transactionEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionEventType, transactionEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transaction_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transaction_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into transaction_events")
	}

	if !cached {
		transactionEventInsertCacheMut.Lock()
		transactionEventInsertCache[key] = cache
		transactionEventInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TransactionEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	transactionEventUpdateCacheMut.RLock()
	cache, cached := transactionEventUpdateCache[key]
	transactionEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionEventAllColumns,
			transactionEventPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update transaction_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transaction_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionEventType, transactionEventMapping, append(wl, transactionEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update transaction_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for transaction_events")
	}

	if !cached {
		transactionEventUpdateCacheMut.Lock()
		transactionEventUpdateCache[key] = cache
		transactionEventUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q transactionEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for transaction_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for transaction_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transaction_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in transactionEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all transactionEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no transaction_events provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionEventUpsertCacheMut.RLock()
	cache, cached := transactionEventUpsertCache[key]
	transactionEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			transactionEventAllColumns,
			transactionEventColumnsWithDefault,
			transactionEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transactionEventAllColumns,
			transactionEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert transaction_events, could not build update column list")
		}

		ret := strmangle.SetComplement(transactionEventAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(transactionEventPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert transaction_events, could not build conflict column list")
			}

			conflict = make([]string, len(transactionEventPrimaryKeyColumns))
			copy(conflict, transactionEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transaction_events\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(transactionEventType, transactionEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionEventType, transactionEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert transaction_events")
	}

	if !cached {
		transactionEventUpsertCacheMut.Lock()
		transactionEventUpsertCache[key] = cache
		transactionEventUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TransactionEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TransactionEvent provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionEventPrimaryKeyMapping)
	sql := "DELETE FROM \"transaction_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from transaction_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for transaction_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transactionEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no transactionEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from transaction_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for transaction_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transaction_events\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, transactionEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from transactionEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for transaction_events")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionEvent) Reload(exec boil.Executor) error {
	ret, err := FindTransactionEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transaction_events\".* FROM \"transaction_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TransactionEventSlice")
	}

	*o = slice

	return nil
}

// TransactionEventExists checks if the TransactionEvent row exists.
func TransactionEventExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transaction_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if transaction_events exists")
	}

	return exists, nil
}

// Exists checks if the TransactionEvent row exists.
func (o *TransactionEvent) Exists(exec boil.Executor) (bool, error) {
	return TransactionEventExists(exec, o.ID)
}
