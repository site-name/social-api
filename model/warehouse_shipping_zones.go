// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WarehouseShippingZone is an object representing the database table.
type WarehouseShippingZone struct {
	ID             string `boil:"id" json:"id" toml:"id" yaml:"id"`
	WarehouseID    string `boil:"warehouse_id" json:"warehouse_id" toml:"warehouse_id" yaml:"warehouse_id"`
	ShippingZoneID string `boil:"shipping_zone_id" json:"shipping_zone_id" toml:"shipping_zone_id" yaml:"shipping_zone_id"`

	R *warehouseShippingZoneR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L warehouseShippingZoneL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WarehouseShippingZoneColumns = struct {
	ID             string
	WarehouseID    string
	ShippingZoneID string
}{
	ID:             "id",
	WarehouseID:    "warehouse_id",
	ShippingZoneID: "shipping_zone_id",
}

var WarehouseShippingZoneTableColumns = struct {
	ID             string
	WarehouseID    string
	ShippingZoneID string
}{
	ID:             "warehouse_shipping_zones.id",
	WarehouseID:    "warehouse_shipping_zones.warehouse_id",
	ShippingZoneID: "warehouse_shipping_zones.shipping_zone_id",
}

// Generated where

var WarehouseShippingZoneWhere = struct {
	ID             whereHelperstring
	WarehouseID    whereHelperstring
	ShippingZoneID whereHelperstring
}{
	ID:             whereHelperstring{field: "\"warehouse_shipping_zones\".\"id\""},
	WarehouseID:    whereHelperstring{field: "\"warehouse_shipping_zones\".\"warehouse_id\""},
	ShippingZoneID: whereHelperstring{field: "\"warehouse_shipping_zones\".\"shipping_zone_id\""},
}

// WarehouseShippingZoneRels is where relationship names are stored.
var WarehouseShippingZoneRels = struct {
	ShippingZone string
	Warehouse    string
}{
	ShippingZone: "ShippingZone",
	Warehouse:    "Warehouse",
}

// warehouseShippingZoneR is where relationships are stored.
type warehouseShippingZoneR struct {
	ShippingZone *ShippingZone `boil:"ShippingZone" json:"ShippingZone" toml:"ShippingZone" yaml:"ShippingZone"`
	Warehouse    *Warehouse    `boil:"Warehouse" json:"Warehouse" toml:"Warehouse" yaml:"Warehouse"`
}

// NewStruct creates a new relationship struct
func (*warehouseShippingZoneR) NewStruct() *warehouseShippingZoneR {
	return &warehouseShippingZoneR{}
}

func (r *warehouseShippingZoneR) GetShippingZone() *ShippingZone {
	if r == nil {
		return nil
	}
	return r.ShippingZone
}

func (r *warehouseShippingZoneR) GetWarehouse() *Warehouse {
	if r == nil {
		return nil
	}
	return r.Warehouse
}

// warehouseShippingZoneL is where Load methods for each relationship are stored.
type warehouseShippingZoneL struct{}

var (
	warehouseShippingZoneAllColumns            = []string{"id", "warehouse_id", "shipping_zone_id"}
	warehouseShippingZoneColumnsWithoutDefault = []string{"id", "warehouse_id", "shipping_zone_id"}
	warehouseShippingZoneColumnsWithDefault    = []string{}
	warehouseShippingZonePrimaryKeyColumns     = []string{"id"}
	warehouseShippingZoneGeneratedColumns      = []string{}
)

type (
	// WarehouseShippingZoneSlice is an alias for a slice of pointers to WarehouseShippingZone.
	// This should almost always be used instead of []WarehouseShippingZone.
	WarehouseShippingZoneSlice []*WarehouseShippingZone

	warehouseShippingZoneQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	warehouseShippingZoneType                 = reflect.TypeOf(&WarehouseShippingZone{})
	warehouseShippingZoneMapping              = queries.MakeStructMapping(warehouseShippingZoneType)
	warehouseShippingZonePrimaryKeyMapping, _ = queries.BindMapping(warehouseShippingZoneType, warehouseShippingZoneMapping, warehouseShippingZonePrimaryKeyColumns)
	warehouseShippingZoneInsertCacheMut       sync.RWMutex
	warehouseShippingZoneInsertCache          = make(map[string]insertCache)
	warehouseShippingZoneUpdateCacheMut       sync.RWMutex
	warehouseShippingZoneUpdateCache          = make(map[string]updateCache)
	warehouseShippingZoneUpsertCacheMut       sync.RWMutex
	warehouseShippingZoneUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single warehouseShippingZone record from the query.
func (q warehouseShippingZoneQuery) One(exec boil.Executor) (*WarehouseShippingZone, error) {
	o := &WarehouseShippingZone{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for warehouse_shipping_zones")
	}

	return o, nil
}

// All returns all WarehouseShippingZone records from the query.
func (q warehouseShippingZoneQuery) All(exec boil.Executor) (WarehouseShippingZoneSlice, error) {
	var o []*WarehouseShippingZone

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to WarehouseShippingZone slice")
	}

	return o, nil
}

// Count returns the count of all WarehouseShippingZone records in the query.
func (q warehouseShippingZoneQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count warehouse_shipping_zones rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q warehouseShippingZoneQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if warehouse_shipping_zones exists")
	}

	return count > 0, nil
}

// ShippingZone pointed to by the foreign key.
func (o *WarehouseShippingZone) ShippingZone(mods ...qm.QueryMod) shippingZoneQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShippingZoneID),
	}

	queryMods = append(queryMods, mods...)

	return ShippingZones(queryMods...)
}

// Warehouse pointed to by the foreign key.
func (o *WarehouseShippingZone) Warehouse(mods ...qm.QueryMod) warehouseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WarehouseID),
	}

	queryMods = append(queryMods, mods...)

	return Warehouses(queryMods...)
}

// LoadShippingZone allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (warehouseShippingZoneL) LoadShippingZone(e boil.Executor, singular bool, maybeWarehouseShippingZone interface{}, mods queries.Applicator) error {
	var slice []*WarehouseShippingZone
	var object *WarehouseShippingZone

	if singular {
		var ok bool
		object, ok = maybeWarehouseShippingZone.(*WarehouseShippingZone)
		if !ok {
			object = new(WarehouseShippingZone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouseShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouseShippingZone))
			}
		}
	} else {
		s, ok := maybeWarehouseShippingZone.(*[]*WarehouseShippingZone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouseShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouseShippingZone))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseShippingZoneR{}
		}
		args[object.ShippingZoneID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseShippingZoneR{}
			}

			args[obj.ShippingZoneID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shipping_zones`),
		qm.WhereIn(`shipping_zones.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingZone")
	}

	var resultSlice []*ShippingZone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingZone")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_zones")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_zones")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingZone = foreign
		if foreign.R == nil {
			foreign.R = &shippingZoneR{}
		}
		foreign.R.WarehouseShippingZones = append(foreign.R.WarehouseShippingZones, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShippingZoneID == foreign.ID {
				local.R.ShippingZone = foreign
				if foreign.R == nil {
					foreign.R = &shippingZoneR{}
				}
				foreign.R.WarehouseShippingZones = append(foreign.R.WarehouseShippingZones, local)
				break
			}
		}
	}

	return nil
}

// LoadWarehouse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (warehouseShippingZoneL) LoadWarehouse(e boil.Executor, singular bool, maybeWarehouseShippingZone interface{}, mods queries.Applicator) error {
	var slice []*WarehouseShippingZone
	var object *WarehouseShippingZone

	if singular {
		var ok bool
		object, ok = maybeWarehouseShippingZone.(*WarehouseShippingZone)
		if !ok {
			object = new(WarehouseShippingZone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouseShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouseShippingZone))
			}
		}
	} else {
		s, ok := maybeWarehouseShippingZone.(*[]*WarehouseShippingZone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouseShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouseShippingZone))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseShippingZoneR{}
		}
		args[object.WarehouseID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseShippingZoneR{}
			}

			args[obj.WarehouseID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Warehouse")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Warehouse")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Warehouse = foreign
		if foreign.R == nil {
			foreign.R = &warehouseR{}
		}
		foreign.R.WarehouseShippingZones = append(foreign.R.WarehouseShippingZones, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WarehouseID == foreign.ID {
				local.R.Warehouse = foreign
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.WarehouseShippingZones = append(foreign.R.WarehouseShippingZones, local)
				break
			}
		}
	}

	return nil
}

// SetShippingZone of the warehouseShippingZone to the related item.
// Sets o.R.ShippingZone to related.
// Adds o to related.R.WarehouseShippingZones.
func (o *WarehouseShippingZone) SetShippingZone(exec boil.Executor, insert bool, related *ShippingZone) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"warehouse_shipping_zones\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_zone_id"}),
		strmangle.WhereClause("\"", "\"", 2, warehouseShippingZonePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShippingZoneID = related.ID
	if o.R == nil {
		o.R = &warehouseShippingZoneR{
			ShippingZone: related,
		}
	} else {
		o.R.ShippingZone = related
	}

	if related.R == nil {
		related.R = &shippingZoneR{
			WarehouseShippingZones: WarehouseShippingZoneSlice{o},
		}
	} else {
		related.R.WarehouseShippingZones = append(related.R.WarehouseShippingZones, o)
	}

	return nil
}

// SetWarehouse of the warehouseShippingZone to the related item.
// Sets o.R.Warehouse to related.
// Adds o to related.R.WarehouseShippingZones.
func (o *WarehouseShippingZone) SetWarehouse(exec boil.Executor, insert bool, related *Warehouse) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"warehouse_shipping_zones\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"warehouse_id"}),
		strmangle.WhereClause("\"", "\"", 2, warehouseShippingZonePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WarehouseID = related.ID
	if o.R == nil {
		o.R = &warehouseShippingZoneR{
			Warehouse: related,
		}
	} else {
		o.R.Warehouse = related
	}

	if related.R == nil {
		related.R = &warehouseR{
			WarehouseShippingZones: WarehouseShippingZoneSlice{o},
		}
	} else {
		related.R.WarehouseShippingZones = append(related.R.WarehouseShippingZones, o)
	}

	return nil
}

// WarehouseShippingZones retrieves all the records using an executor.
func WarehouseShippingZones(mods ...qm.QueryMod) warehouseShippingZoneQuery {
	mods = append(mods, qm.From("\"warehouse_shipping_zones\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"warehouse_shipping_zones\".*"})
	}

	return warehouseShippingZoneQuery{q}
}

// FindWarehouseShippingZone retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWarehouseShippingZone(exec boil.Executor, iD string, selectCols ...string) (*WarehouseShippingZone, error) {
	warehouseShippingZoneObj := &WarehouseShippingZone{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"warehouse_shipping_zones\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, warehouseShippingZoneObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from warehouse_shipping_zones")
	}

	return warehouseShippingZoneObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WarehouseShippingZone) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no warehouse_shipping_zones provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(warehouseShippingZoneColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	warehouseShippingZoneInsertCacheMut.RLock()
	cache, cached := warehouseShippingZoneInsertCache[key]
	warehouseShippingZoneInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			warehouseShippingZoneAllColumns,
			warehouseShippingZoneColumnsWithDefault,
			warehouseShippingZoneColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(warehouseShippingZoneType, warehouseShippingZoneMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(warehouseShippingZoneType, warehouseShippingZoneMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"warehouse_shipping_zones\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"warehouse_shipping_zones\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into warehouse_shipping_zones")
	}

	if !cached {
		warehouseShippingZoneInsertCacheMut.Lock()
		warehouseShippingZoneInsertCache[key] = cache
		warehouseShippingZoneInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the WarehouseShippingZone.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WarehouseShippingZone) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	warehouseShippingZoneUpdateCacheMut.RLock()
	cache, cached := warehouseShippingZoneUpdateCache[key]
	warehouseShippingZoneUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			warehouseShippingZoneAllColumns,
			warehouseShippingZonePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update warehouse_shipping_zones, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"warehouse_shipping_zones\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, warehouseShippingZonePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(warehouseShippingZoneType, warehouseShippingZoneMapping, append(wl, warehouseShippingZonePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update warehouse_shipping_zones row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for warehouse_shipping_zones")
	}

	if !cached {
		warehouseShippingZoneUpdateCacheMut.Lock()
		warehouseShippingZoneUpdateCache[key] = cache
		warehouseShippingZoneUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q warehouseShippingZoneQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for warehouse_shipping_zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for warehouse_shipping_zones")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WarehouseShippingZoneSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehouseShippingZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"warehouse_shipping_zones\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, warehouseShippingZonePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in warehouseShippingZone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all warehouseShippingZone")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WarehouseShippingZone) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no warehouse_shipping_zones provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseShippingZoneColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	warehouseShippingZoneUpsertCacheMut.RLock()
	cache, cached := warehouseShippingZoneUpsertCache[key]
	warehouseShippingZoneUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			warehouseShippingZoneAllColumns,
			warehouseShippingZoneColumnsWithDefault,
			warehouseShippingZoneColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			warehouseShippingZoneAllColumns,
			warehouseShippingZonePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert warehouse_shipping_zones, could not build update column list")
		}

		ret := strmangle.SetComplement(warehouseShippingZoneAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(warehouseShippingZonePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert warehouse_shipping_zones, could not build conflict column list")
			}

			conflict = make([]string, len(warehouseShippingZonePrimaryKeyColumns))
			copy(conflict, warehouseShippingZonePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"warehouse_shipping_zones\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(warehouseShippingZoneType, warehouseShippingZoneMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(warehouseShippingZoneType, warehouseShippingZoneMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert warehouse_shipping_zones")
	}

	if !cached {
		warehouseShippingZoneUpsertCacheMut.Lock()
		warehouseShippingZoneUpsertCache[key] = cache
		warehouseShippingZoneUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single WarehouseShippingZone record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WarehouseShippingZone) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no WarehouseShippingZone provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), warehouseShippingZonePrimaryKeyMapping)
	sql := "DELETE FROM \"warehouse_shipping_zones\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from warehouse_shipping_zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for warehouse_shipping_zones")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q warehouseShippingZoneQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no warehouseShippingZoneQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from warehouse_shipping_zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for warehouse_shipping_zones")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WarehouseShippingZoneSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehouseShippingZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"warehouse_shipping_zones\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, warehouseShippingZonePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from warehouseShippingZone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for warehouse_shipping_zones")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WarehouseShippingZone) Reload(exec boil.Executor) error {
	ret, err := FindWarehouseShippingZone(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WarehouseShippingZoneSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WarehouseShippingZoneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehouseShippingZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"warehouse_shipping_zones\".* FROM \"warehouse_shipping_zones\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehouseShippingZonePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in WarehouseShippingZoneSlice")
	}

	*o = slice

	return nil
}

// WarehouseShippingZoneExists checks if the WarehouseShippingZone row exists.
func WarehouseShippingZoneExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"warehouse_shipping_zones\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if warehouse_shipping_zones exists")
	}

	return exists, nil
}

// Exists checks if the WarehouseShippingZone row exists.
func (o *WarehouseShippingZone) Exists(exec boil.Executor) (bool, error) {
	return WarehouseShippingZoneExists(exec, o.ID)
}
