// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Collection is an object representing the database table.
type Collection struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name               string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug               string      `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	BackgroundImage    null.String `boil:"background_image" json:"background_image,omitempty" toml:"background_image" yaml:"background_image,omitempty"`
	BackgroundImageAlt string      `boil:"background_image_alt" json:"background_image_alt" toml:"background_image_alt" yaml:"background_image_alt"`
	Description        null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Metadata           null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata    null.JSON   `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`
	SeoTitle           string      `boil:"seo_title" json:"seo_title" toml:"seo_title" yaml:"seo_title"`
	SeoDescription     string      `boil:"seo_description" json:"seo_description" toml:"seo_description" yaml:"seo_description"`

	R *collectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L collectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CollectionColumns = struct {
	ID                 string
	Name               string
	Slug               string
	BackgroundImage    string
	BackgroundImageAlt string
	Description        string
	Metadata           string
	PrivateMetadata    string
	SeoTitle           string
	SeoDescription     string
}{
	ID:                 "id",
	Name:               "name",
	Slug:               "slug",
	BackgroundImage:    "background_image",
	BackgroundImageAlt: "background_image_alt",
	Description:        "description",
	Metadata:           "metadata",
	PrivateMetadata:    "private_metadata",
	SeoTitle:           "seo_title",
	SeoDescription:     "seo_description",
}

var CollectionTableColumns = struct {
	ID                 string
	Name               string
	Slug               string
	BackgroundImage    string
	BackgroundImageAlt string
	Description        string
	Metadata           string
	PrivateMetadata    string
	SeoTitle           string
	SeoDescription     string
}{
	ID:                 "collections.id",
	Name:               "collections.name",
	Slug:               "collections.slug",
	BackgroundImage:    "collections.background_image",
	BackgroundImageAlt: "collections.background_image_alt",
	Description:        "collections.description",
	Metadata:           "collections.metadata",
	PrivateMetadata:    "collections.private_metadata",
	SeoTitle:           "collections.seo_title",
	SeoDescription:     "collections.seo_description",
}

// Generated where

var CollectionWhere = struct {
	ID                 whereHelperstring
	Name               whereHelperstring
	Slug               whereHelperstring
	BackgroundImage    whereHelpernull_String
	BackgroundImageAlt whereHelperstring
	Description        whereHelpernull_String
	Metadata           whereHelpernull_JSON
	PrivateMetadata    whereHelpernull_JSON
	SeoTitle           whereHelperstring
	SeoDescription     whereHelperstring
}{
	ID:                 whereHelperstring{field: "\"collections\".\"id\""},
	Name:               whereHelperstring{field: "\"collections\".\"name\""},
	Slug:               whereHelperstring{field: "\"collections\".\"slug\""},
	BackgroundImage:    whereHelpernull_String{field: "\"collections\".\"background_image\""},
	BackgroundImageAlt: whereHelperstring{field: "\"collections\".\"background_image_alt\""},
	Description:        whereHelpernull_String{field: "\"collections\".\"description\""},
	Metadata:           whereHelpernull_JSON{field: "\"collections\".\"metadata\""},
	PrivateMetadata:    whereHelpernull_JSON{field: "\"collections\".\"private_metadata\""},
	SeoTitle:           whereHelperstring{field: "\"collections\".\"seo_title\""},
	SeoDescription:     whereHelperstring{field: "\"collections\".\"seo_description\""},
}

// CollectionRels is where relationship names are stored.
var CollectionRels = struct {
	CollectionChannelListings string
	CollectionTranslations    string
	MenuItems                 string
	ProductCollections        string
	SaleCollections           string
	VoucherCollections        string
}{
	CollectionChannelListings: "CollectionChannelListings",
	CollectionTranslations:    "CollectionTranslations",
	MenuItems:                 "MenuItems",
	ProductCollections:        "ProductCollections",
	SaleCollections:           "SaleCollections",
	VoucherCollections:        "VoucherCollections",
}

// collectionR is where relationships are stored.
type collectionR struct {
	CollectionChannelListings CollectionChannelListingSlice `boil:"CollectionChannelListings" json:"CollectionChannelListings" toml:"CollectionChannelListings" yaml:"CollectionChannelListings"`
	CollectionTranslations    CollectionTranslationSlice    `boil:"CollectionTranslations" json:"CollectionTranslations" toml:"CollectionTranslations" yaml:"CollectionTranslations"`
	MenuItems                 MenuItemSlice                 `boil:"MenuItems" json:"MenuItems" toml:"MenuItems" yaml:"MenuItems"`
	ProductCollections        ProductCollectionSlice        `boil:"ProductCollections" json:"ProductCollections" toml:"ProductCollections" yaml:"ProductCollections"`
	SaleCollections           SaleCollectionSlice           `boil:"SaleCollections" json:"SaleCollections" toml:"SaleCollections" yaml:"SaleCollections"`
	VoucherCollections        VoucherCollectionSlice        `boil:"VoucherCollections" json:"VoucherCollections" toml:"VoucherCollections" yaml:"VoucherCollections"`
}

// NewStruct creates a new relationship struct
func (*collectionR) NewStruct() *collectionR {
	return &collectionR{}
}

func (r *collectionR) GetCollectionChannelListings() CollectionChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.CollectionChannelListings
}

func (r *collectionR) GetCollectionTranslations() CollectionTranslationSlice {
	if r == nil {
		return nil
	}
	return r.CollectionTranslations
}

func (r *collectionR) GetMenuItems() MenuItemSlice {
	if r == nil {
		return nil
	}
	return r.MenuItems
}

func (r *collectionR) GetProductCollections() ProductCollectionSlice {
	if r == nil {
		return nil
	}
	return r.ProductCollections
}

func (r *collectionR) GetSaleCollections() SaleCollectionSlice {
	if r == nil {
		return nil
	}
	return r.SaleCollections
}

func (r *collectionR) GetVoucherCollections() VoucherCollectionSlice {
	if r == nil {
		return nil
	}
	return r.VoucherCollections
}

// collectionL is where Load methods for each relationship are stored.
type collectionL struct{}

var (
	collectionAllColumns            = []string{"id", "name", "slug", "background_image", "background_image_alt", "description", "metadata", "private_metadata", "seo_title", "seo_description"}
	collectionColumnsWithoutDefault = []string{"name", "slug", "background_image_alt", "seo_title", "seo_description"}
	collectionColumnsWithDefault    = []string{"id", "background_image", "description", "metadata", "private_metadata"}
	collectionPrimaryKeyColumns     = []string{"id"}
	collectionGeneratedColumns      = []string{}
)

type (
	// CollectionSlice is an alias for a slice of pointers to Collection.
	// This should almost always be used instead of []Collection.
	CollectionSlice []*Collection

	collectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	collectionType                 = reflect.TypeOf(&Collection{})
	collectionMapping              = queries.MakeStructMapping(collectionType)
	collectionPrimaryKeyMapping, _ = queries.BindMapping(collectionType, collectionMapping, collectionPrimaryKeyColumns)
	collectionInsertCacheMut       sync.RWMutex
	collectionInsertCache          = make(map[string]insertCache)
	collectionUpdateCacheMut       sync.RWMutex
	collectionUpdateCache          = make(map[string]updateCache)
	collectionUpsertCacheMut       sync.RWMutex
	collectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single collection record from the query.
func (q collectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Collection, error) {
	o := &Collection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for collections")
	}

	return o, nil
}

// All returns all Collection records from the query.
func (q collectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (CollectionSlice, error) {
	var o []*Collection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Collection slice")
	}

	return o, nil
}

// Count returns the count of all Collection records in the query.
func (q collectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count collections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q collectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if collections exists")
	}

	return count > 0, nil
}

// CollectionChannelListings retrieves all the collection_channel_listing's CollectionChannelListings with an executor.
func (o *Collection) CollectionChannelListings(mods ...qm.QueryMod) collectionChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"collection_channel_listings\".\"collection_id\"=?", o.ID),
	)

	return CollectionChannelListings(queryMods...)
}

// CollectionTranslations retrieves all the collection_translation's CollectionTranslations with an executor.
func (o *Collection) CollectionTranslations(mods ...qm.QueryMod) collectionTranslationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"collection_translations\".\"collection_id\"=?", o.ID),
	)

	return CollectionTranslations(queryMods...)
}

// MenuItems retrieves all the menu_item's MenuItems with an executor.
func (o *Collection) MenuItems(mods ...qm.QueryMod) menuItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"menu_items\".\"collection_id\"=?", o.ID),
	)

	return MenuItems(queryMods...)
}

// ProductCollections retrieves all the product_collection's ProductCollections with an executor.
func (o *Collection) ProductCollections(mods ...qm.QueryMod) productCollectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_collections\".\"collection_id\"=?", o.ID),
	)

	return ProductCollections(queryMods...)
}

// SaleCollections retrieves all the sale_collection's SaleCollections with an executor.
func (o *Collection) SaleCollections(mods ...qm.QueryMod) saleCollectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_collections\".\"collection_id\"=?", o.ID),
	)

	return SaleCollections(queryMods...)
}

// VoucherCollections retrieves all the voucher_collection's VoucherCollections with an executor.
func (o *Collection) VoucherCollections(mods ...qm.QueryMod) voucherCollectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_collections\".\"collection_id\"=?", o.ID),
	)

	return VoucherCollections(queryMods...)
}

// LoadCollectionChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (collectionL) LoadCollectionChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollection interface{}, mods queries.Applicator) error {
	var slice []*Collection
	var object *Collection

	if singular {
		var ok bool
		object, ok = maybeCollection.(*Collection)
		if !ok {
			object = new(Collection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollection))
			}
		}
	} else {
		s, ok := maybeCollection.(*[]*Collection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collection_channel_listings`),
		qm.WhereIn(`collection_channel_listings.collection_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collection_channel_listings")
	}

	var resultSlice []*CollectionChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice collection_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collection_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collection_channel_listings")
	}

	if singular {
		object.R.CollectionChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collectionChannelListingR{}
			}
			foreign.R.Collection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CollectionID {
				local.R.CollectionChannelListings = append(local.R.CollectionChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &collectionChannelListingR{}
				}
				foreign.R.Collection = local
				break
			}
		}
	}

	return nil
}

// LoadCollectionTranslations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (collectionL) LoadCollectionTranslations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollection interface{}, mods queries.Applicator) error {
	var slice []*Collection
	var object *Collection

	if singular {
		var ok bool
		object, ok = maybeCollection.(*Collection)
		if !ok {
			object = new(Collection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollection))
			}
		}
	} else {
		s, ok := maybeCollection.(*[]*Collection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collection_translations`),
		qm.WhereIn(`collection_translations.collection_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collection_translations")
	}

	var resultSlice []*CollectionTranslation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice collection_translations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collection_translations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collection_translations")
	}

	if singular {
		object.R.CollectionTranslations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collectionTranslationR{}
			}
			foreign.R.Collection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CollectionID {
				local.R.CollectionTranslations = append(local.R.CollectionTranslations, foreign)
				if foreign.R == nil {
					foreign.R = &collectionTranslationR{}
				}
				foreign.R.Collection = local
				break
			}
		}
	}

	return nil
}

// LoadMenuItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (collectionL) LoadMenuItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollection interface{}, mods queries.Applicator) error {
	var slice []*Collection
	var object *Collection

	if singular {
		var ok bool
		object, ok = maybeCollection.(*Collection)
		if !ok {
			object = new(Collection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollection))
			}
		}
	} else {
		s, ok := maybeCollection.(*[]*Collection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menu_items`),
		qm.WhereIn(`menu_items.collection_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_items")
	}

	var resultSlice []*MenuItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_items")
	}

	if singular {
		object.R.MenuItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuItemR{}
			}
			foreign.R.Collection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CollectionID) {
				local.R.MenuItems = append(local.R.MenuItems, foreign)
				if foreign.R == nil {
					foreign.R = &menuItemR{}
				}
				foreign.R.Collection = local
				break
			}
		}
	}

	return nil
}

// LoadProductCollections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (collectionL) LoadProductCollections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollection interface{}, mods queries.Applicator) error {
	var slice []*Collection
	var object *Collection

	if singular {
		var ok bool
		object, ok = maybeCollection.(*Collection)
		if !ok {
			object = new(Collection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollection))
			}
		}
	} else {
		s, ok := maybeCollection.(*[]*Collection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_collections`),
		qm.WhereIn(`product_collections.collection_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_collections")
	}

	var resultSlice []*ProductCollection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_collections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_collections")
	}

	if singular {
		object.R.ProductCollections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productCollectionR{}
			}
			foreign.R.Collection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CollectionID {
				local.R.ProductCollections = append(local.R.ProductCollections, foreign)
				if foreign.R == nil {
					foreign.R = &productCollectionR{}
				}
				foreign.R.Collection = local
				break
			}
		}
	}

	return nil
}

// LoadSaleCollections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (collectionL) LoadSaleCollections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollection interface{}, mods queries.Applicator) error {
	var slice []*Collection
	var object *Collection

	if singular {
		var ok bool
		object, ok = maybeCollection.(*Collection)
		if !ok {
			object = new(Collection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollection))
			}
		}
	} else {
		s, ok := maybeCollection.(*[]*Collection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sale_collections`),
		qm.WhereIn(`sale_collections.collection_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_collections")
	}

	var resultSlice []*SaleCollection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_collections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_collections")
	}

	if singular {
		object.R.SaleCollections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &saleCollectionR{}
			}
			foreign.R.Collection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CollectionID {
				local.R.SaleCollections = append(local.R.SaleCollections, foreign)
				if foreign.R == nil {
					foreign.R = &saleCollectionR{}
				}
				foreign.R.Collection = local
				break
			}
		}
	}

	return nil
}

// LoadVoucherCollections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (collectionL) LoadVoucherCollections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollection interface{}, mods queries.Applicator) error {
	var slice []*Collection
	var object *Collection

	if singular {
		var ok bool
		object, ok = maybeCollection.(*Collection)
		if !ok {
			object = new(Collection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollection))
			}
		}
	} else {
		s, ok := maybeCollection.(*[]*Collection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collectionR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voucher_collections`),
		qm.WhereIn(`voucher_collections.collection_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_collections")
	}

	var resultSlice []*VoucherCollection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_collections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_collections")
	}

	if singular {
		object.R.VoucherCollections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherCollectionR{}
			}
			foreign.R.Collection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CollectionID {
				local.R.VoucherCollections = append(local.R.VoucherCollections, foreign)
				if foreign.R == nil {
					foreign.R = &voucherCollectionR{}
				}
				foreign.R.Collection = local
				break
			}
		}
	}

	return nil
}

// AddCollectionChannelListings adds the given related objects to the existing relationships
// of the collection, optionally inserting them as new records.
// Appends related to o.R.CollectionChannelListings.
// Sets related.R.Collection appropriately.
func (o *Collection) AddCollectionChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CollectionChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CollectionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"collection_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
				strmangle.WhereClause("\"", "\"", 2, collectionChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CollectionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &collectionR{
			CollectionChannelListings: related,
		}
	} else {
		o.R.CollectionChannelListings = append(o.R.CollectionChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collectionChannelListingR{
				Collection: o,
			}
		} else {
			rel.R.Collection = o
		}
	}
	return nil
}

// AddCollectionTranslations adds the given related objects to the existing relationships
// of the collection, optionally inserting them as new records.
// Appends related to o.R.CollectionTranslations.
// Sets related.R.Collection appropriately.
func (o *Collection) AddCollectionTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CollectionTranslation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CollectionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"collection_translations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
				strmangle.WhereClause("\"", "\"", 2, collectionTranslationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CollectionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &collectionR{
			CollectionTranslations: related,
		}
	} else {
		o.R.CollectionTranslations = append(o.R.CollectionTranslations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collectionTranslationR{
				Collection: o,
			}
		} else {
			rel.R.Collection = o
		}
	}
	return nil
}

// AddMenuItems adds the given related objects to the existing relationships
// of the collection, optionally inserting them as new records.
// Appends related to o.R.MenuItems.
// Sets related.R.Collection appropriately.
func (o *Collection) AddMenuItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CollectionID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"menu_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
				strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CollectionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &collectionR{
			MenuItems: related,
		}
	} else {
		o.R.MenuItems = append(o.R.MenuItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuItemR{
				Collection: o,
			}
		} else {
			rel.R.Collection = o
		}
	}
	return nil
}

// SetMenuItems removes all previously related items of the
// collection replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Collection's MenuItems accordingly.
// Replaces o.R.MenuItems with related.
// Sets related.R.Collection's MenuItems accordingly.
func (o *Collection) SetMenuItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItem) error {
	query := "update \"menu_items\" set \"collection_id\" = null where \"collection_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MenuItems {
			queries.SetScanner(&rel.CollectionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Collection = nil
		}
		o.R.MenuItems = nil
	}

	return o.AddMenuItems(ctx, exec, insert, related...)
}

// RemoveMenuItems relationships from objects passed in.
// Removes related items from R.MenuItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Collection.
func (o *Collection) RemoveMenuItems(ctx context.Context, exec boil.ContextExecutor, related ...*MenuItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CollectionID, nil)
		if rel.R != nil {
			rel.R.Collection = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("collection_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MenuItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.MenuItems)
			if ln > 1 && i < ln-1 {
				o.R.MenuItems[i] = o.R.MenuItems[ln-1]
			}
			o.R.MenuItems = o.R.MenuItems[:ln-1]
			break
		}
	}

	return nil
}

// AddProductCollections adds the given related objects to the existing relationships
// of the collection, optionally inserting them as new records.
// Appends related to o.R.ProductCollections.
// Sets related.R.Collection appropriately.
func (o *Collection) AddProductCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductCollection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CollectionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_collections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
				strmangle.WhereClause("\"", "\"", 2, productCollectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CollectionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &collectionR{
			ProductCollections: related,
		}
	} else {
		o.R.ProductCollections = append(o.R.ProductCollections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productCollectionR{
				Collection: o,
			}
		} else {
			rel.R.Collection = o
		}
	}
	return nil
}

// AddSaleCollections adds the given related objects to the existing relationships
// of the collection, optionally inserting them as new records.
// Appends related to o.R.SaleCollections.
// Sets related.R.Collection appropriately.
func (o *Collection) AddSaleCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleCollection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CollectionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_collections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
				strmangle.WhereClause("\"", "\"", 2, saleCollectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CollectionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &collectionR{
			SaleCollections: related,
		}
	} else {
		o.R.SaleCollections = append(o.R.SaleCollections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &saleCollectionR{
				Collection: o,
			}
		} else {
			rel.R.Collection = o
		}
	}
	return nil
}

// AddVoucherCollections adds the given related objects to the existing relationships
// of the collection, optionally inserting them as new records.
// Appends related to o.R.VoucherCollections.
// Sets related.R.Collection appropriately.
func (o *Collection) AddVoucherCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherCollection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CollectionID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_collections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collection_id"}),
				strmangle.WhereClause("\"", "\"", 2, voucherCollectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CollectionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &collectionR{
			VoucherCollections: related,
		}
	} else {
		o.R.VoucherCollections = append(o.R.VoucherCollections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherCollectionR{
				Collection: o,
			}
		} else {
			rel.R.Collection = o
		}
	}
	return nil
}

// Collections retrieves all the records using an executor.
func Collections(mods ...qm.QueryMod) collectionQuery {
	mods = append(mods, qm.From("\"collections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"collections\".*"})
	}

	return collectionQuery{q}
}

// FindCollection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCollection(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Collection, error) {
	collectionObj := &Collection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"collections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, collectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from collections")
	}

	return collectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Collection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no collections provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(collectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	collectionInsertCacheMut.RLock()
	cache, cached := collectionInsertCache[key]
	collectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			collectionAllColumns,
			collectionColumnsWithDefault,
			collectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(collectionType, collectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(collectionType, collectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"collections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"collections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into collections")
	}

	if !cached {
		collectionInsertCacheMut.Lock()
		collectionInsertCache[key] = cache
		collectionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Collection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Collection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	collectionUpdateCacheMut.RLock()
	cache, cached := collectionUpdateCache[key]
	collectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			collectionAllColumns,
			collectionPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update collections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"collections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, collectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(collectionType, collectionMapping, append(wl, collectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update collections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for collections")
	}

	if !cached {
		collectionUpdateCacheMut.Lock()
		collectionUpdateCache[key] = cache
		collectionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q collectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for collections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CollectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, collectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in collection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all collection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Collection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no collections provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(collectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	collectionUpsertCacheMut.RLock()
	cache, cached := collectionUpsertCache[key]
	collectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			collectionAllColumns,
			collectionColumnsWithDefault,
			collectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			collectionAllColumns,
			collectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert collections, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(collectionPrimaryKeyColumns))
			copy(conflict, collectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"collections\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(collectionType, collectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(collectionType, collectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert collections")
	}

	if !cached {
		collectionUpsertCacheMut.Lock()
		collectionUpsertCache[key] = cache
		collectionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Collection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Collection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Collection provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), collectionPrimaryKeyMapping)
	sql := "DELETE FROM \"collections\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for collections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q collectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no collectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for collections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CollectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"collections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, collectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from collection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for collections")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Collection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCollection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CollectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CollectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"collections\".* FROM \"collections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, collectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in CollectionSlice")
	}

	*o = slice

	return nil
}

// CollectionExists checks if the Collection row exists.
func CollectionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"collections\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if collections exists")
	}

	return exists, nil
}

// Exists checks if the Collection row exists.
func (o *Collection) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CollectionExists(ctx, exec, o.ID)
}
