// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShopStaff is an object representing the database table.
type ShopStaff struct {
	ID             string                `boil:"id" json:"id" toml:"id" yaml:"id"`
	StaffID        string                `boil:"staff_id" json:"staff_id" toml:"staff_id" yaml:"staff_id"`
	CreatedAt      int64                 `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	EndAt          model_types.NullInt64 `boil:"end_at" json:"end_at,omitempty" toml:"end_at" yaml:"end_at,omitempty"`
	SalaryPeriod   StaffSalaryPeriod     `boil:"salary_period" json:"salary_period" toml:"salary_period" yaml:"salary_period"`
	Salary         decimal.Decimal       `boil:"salary" json:"salary" toml:"salary" yaml:"salary"`
	SalaryCurrency Currency              `boil:"salary_currency" json:"salary_currency" toml:"salary_currency" yaml:"salary_currency"`

	R *shopStaffR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shopStaffL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShopStaffColumns = struct {
	ID             string
	StaffID        string
	CreatedAt      string
	EndAt          string
	SalaryPeriod   string
	Salary         string
	SalaryCurrency string
}{
	ID:             "id",
	StaffID:        "staff_id",
	CreatedAt:      "created_at",
	EndAt:          "end_at",
	SalaryPeriod:   "salary_period",
	Salary:         "salary",
	SalaryCurrency: "salary_currency",
}

var ShopStaffTableColumns = struct {
	ID             string
	StaffID        string
	CreatedAt      string
	EndAt          string
	SalaryPeriod   string
	Salary         string
	SalaryCurrency string
}{
	ID:             "shop_staffs.id",
	StaffID:        "shop_staffs.staff_id",
	CreatedAt:      "shop_staffs.created_at",
	EndAt:          "shop_staffs.end_at",
	SalaryPeriod:   "shop_staffs.salary_period",
	Salary:         "shop_staffs.salary",
	SalaryCurrency: "shop_staffs.salary_currency",
}

// Generated where

type whereHelperStaffSalaryPeriod struct{ field string }

func (w whereHelperStaffSalaryPeriod) EQ(x StaffSalaryPeriod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperStaffSalaryPeriod) NEQ(x StaffSalaryPeriod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperStaffSalaryPeriod) LT(x StaffSalaryPeriod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperStaffSalaryPeriod) LTE(x StaffSalaryPeriod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperStaffSalaryPeriod) GT(x StaffSalaryPeriod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperStaffSalaryPeriod) GTE(x StaffSalaryPeriod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperStaffSalaryPeriod) IN(slice []StaffSalaryPeriod) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperStaffSalaryPeriod) NIN(slice []StaffSalaryPeriod) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ShopStaffWhere = struct {
	ID             whereHelperstring
	StaffID        whereHelperstring
	CreatedAt      whereHelperint64
	EndAt          whereHelpermodel_types_NullInt64
	SalaryPeriod   whereHelperStaffSalaryPeriod
	Salary         whereHelperdecimal_Decimal
	SalaryCurrency whereHelperCurrency
}{
	ID:             whereHelperstring{field: "\"shop_staffs\".\"id\""},
	StaffID:        whereHelperstring{field: "\"shop_staffs\".\"staff_id\""},
	CreatedAt:      whereHelperint64{field: "\"shop_staffs\".\"created_at\""},
	EndAt:          whereHelpermodel_types_NullInt64{field: "\"shop_staffs\".\"end_at\""},
	SalaryPeriod:   whereHelperStaffSalaryPeriod{field: "\"shop_staffs\".\"salary_period\""},
	Salary:         whereHelperdecimal_Decimal{field: "\"shop_staffs\".\"salary\""},
	SalaryCurrency: whereHelperCurrency{field: "\"shop_staffs\".\"salary_currency\""},
}

// ShopStaffRels is where relationship names are stored.
var ShopStaffRels = struct {
	Staff string
}{
	Staff: "Staff",
}

// shopStaffR is where relationships are stored.
type shopStaffR struct {
	Staff *User `boil:"Staff" json:"Staff" toml:"Staff" yaml:"Staff"`
}

// NewStruct creates a new relationship struct
func (*shopStaffR) NewStruct() *shopStaffR {
	return &shopStaffR{}
}

func (r *shopStaffR) GetStaff() *User {
	if r == nil {
		return nil
	}
	return r.Staff
}

// shopStaffL is where Load methods for each relationship are stored.
type shopStaffL struct{}

var (
	shopStaffAllColumns            = []string{"id", "staff_id", "created_at", "end_at", "salary_period", "salary", "salary_currency"}
	shopStaffColumnsWithoutDefault = []string{"staff_id", "created_at", "salary_period", "salary_currency"}
	shopStaffColumnsWithDefault    = []string{"id", "end_at", "salary"}
	shopStaffPrimaryKeyColumns     = []string{"id"}
	shopStaffGeneratedColumns      = []string{}
)

type (
	// ShopStaffSlice is an alias for a slice of pointers to ShopStaff.
	// This should almost always be used instead of []ShopStaff.
	ShopStaffSlice []*ShopStaff

	shopStaffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shopStaffType                 = reflect.TypeOf(&ShopStaff{})
	shopStaffMapping              = queries.MakeStructMapping(shopStaffType)
	shopStaffPrimaryKeyMapping, _ = queries.BindMapping(shopStaffType, shopStaffMapping, shopStaffPrimaryKeyColumns)
	shopStaffInsertCacheMut       sync.RWMutex
	shopStaffInsertCache          = make(map[string]insertCache)
	shopStaffUpdateCacheMut       sync.RWMutex
	shopStaffUpdateCache          = make(map[string]updateCache)
	shopStaffUpsertCacheMut       sync.RWMutex
	shopStaffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single shopStaff record from the query.
func (q shopStaffQuery) One(exec boil.Executor) (*ShopStaff, error) {
	o := &ShopStaff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for shop_staffs")
	}

	return o, nil
}

// All returns all ShopStaff records from the query.
func (q shopStaffQuery) All(exec boil.Executor) (ShopStaffSlice, error) {
	var o []*ShopStaff

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ShopStaff slice")
	}

	return o, nil
}

// Count returns the count of all ShopStaff records in the query.
func (q shopStaffQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count shop_staffs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shopStaffQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if shop_staffs exists")
	}

	return count > 0, nil
}

// Staff pointed to by the foreign key.
func (o *ShopStaff) Staff(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.StaffID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadStaff allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shopStaffL) LoadStaff(e boil.Executor, singular bool, maybeShopStaff interface{}, mods queries.Applicator) error {
	var slice []*ShopStaff
	var object *ShopStaff

	if singular {
		var ok bool
		object, ok = maybeShopStaff.(*ShopStaff)
		if !ok {
			object = new(ShopStaff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShopStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShopStaff))
			}
		}
	} else {
		s, ok := maybeShopStaff.(*[]*ShopStaff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShopStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShopStaff))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shopStaffR{}
		}
		args[object.StaffID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shopStaffR{}
			}

			args[obj.StaffID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Staff = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.StaffShopStaff = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.StaffID == foreign.ID {
				local.R.Staff = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.StaffShopStaff = local
				break
			}
		}
	}

	return nil
}

// SetStaff of the shopStaff to the related item.
// Sets o.R.Staff to related.
// Adds o to related.R.StaffShopStaff.
func (o *ShopStaff) SetStaff(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shop_staffs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"staff_id"}),
		strmangle.WhereClause("\"", "\"", 2, shopStaffPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.StaffID = related.ID
	if o.R == nil {
		o.R = &shopStaffR{
			Staff: related,
		}
	} else {
		o.R.Staff = related
	}

	if related.R == nil {
		related.R = &userR{
			StaffShopStaff: o,
		}
	} else {
		related.R.StaffShopStaff = o
	}

	return nil
}

// ShopStaffs retrieves all the records using an executor.
func ShopStaffs(mods ...qm.QueryMod) shopStaffQuery {
	mods = append(mods, qm.From("\"shop_staffs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shop_staffs\".*"})
	}

	return shopStaffQuery{q}
}

// FindShopStaff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShopStaff(exec boil.Executor, iD string, selectCols ...string) (*ShopStaff, error) {
	shopStaffObj := &ShopStaff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shop_staffs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, shopStaffObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from shop_staffs")
	}

	return shopStaffObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShopStaff) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shop_staffs provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(shopStaffColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shopStaffInsertCacheMut.RLock()
	cache, cached := shopStaffInsertCache[key]
	shopStaffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shopStaffAllColumns,
			shopStaffColumnsWithDefault,
			shopStaffColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shopStaffType, shopStaffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shopStaffType, shopStaffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shop_staffs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shop_staffs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into shop_staffs")
	}

	if !cached {
		shopStaffInsertCacheMut.Lock()
		shopStaffInsertCache[key] = cache
		shopStaffInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ShopStaff.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShopStaff) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	shopStaffUpdateCacheMut.RLock()
	cache, cached := shopStaffUpdateCache[key]
	shopStaffUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shopStaffAllColumns,
			shopStaffPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update shop_staffs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shop_staffs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shopStaffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shopStaffType, shopStaffMapping, append(wl, shopStaffPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update shop_staffs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for shop_staffs")
	}

	if !cached {
		shopStaffUpdateCacheMut.Lock()
		shopStaffUpdateCache[key] = cache
		shopStaffUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q shopStaffQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for shop_staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for shop_staffs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShopStaffSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopStaffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shop_staffs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shopStaffPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in shopStaff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all shopStaff")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShopStaff) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no shop_staffs provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(shopStaffColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shopStaffUpsertCacheMut.RLock()
	cache, cached := shopStaffUpsertCache[key]
	shopStaffUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shopStaffAllColumns,
			shopStaffColumnsWithDefault,
			shopStaffColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shopStaffAllColumns,
			shopStaffPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert shop_staffs, could not build update column list")
		}

		ret := strmangle.SetComplement(shopStaffAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(shopStaffPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert shop_staffs, could not build conflict column list")
			}

			conflict = make([]string, len(shopStaffPrimaryKeyColumns))
			copy(conflict, shopStaffPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shop_staffs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shopStaffType, shopStaffMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shopStaffType, shopStaffMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert shop_staffs")
	}

	if !cached {
		shopStaffUpsertCacheMut.Lock()
		shopStaffUpsertCache[key] = cache
		shopStaffUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ShopStaff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShopStaff) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ShopStaff provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shopStaffPrimaryKeyMapping)
	sql := "DELETE FROM \"shop_staffs\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from shop_staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for shop_staffs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shopStaffQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no shopStaffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shop_staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shop_staffs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShopStaffSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopStaffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shop_staffs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopStaffPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shopStaff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shop_staffs")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShopStaff) Reload(exec boil.Executor) error {
	ret, err := FindShopStaff(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShopStaffSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShopStaffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopStaffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shop_staffs\".* FROM \"shop_staffs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopStaffPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ShopStaffSlice")
	}

	*o = slice

	return nil
}

// ShopStaffExists checks if the ShopStaff row exists.
func ShopStaffExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shop_staffs\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if shop_staffs exists")
	}

	return exists, nil
}

// Exists checks if the ShopStaff row exists.
func (o *ShopStaff) Exists(exec boil.Executor) (bool, error) {
	return ShopStaffExists(exec, o.ID)
}
