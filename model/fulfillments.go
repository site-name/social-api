// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Fulfillment is an object representing the database table.
type Fulfillment struct {
	ID                   string                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	FulfillmentOrder     int                     `boil:"fulfillment_order" json:"fulfillment_order" toml:"fulfillment_order" yaml:"fulfillment_order"`
	OrderID              string                  `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	Status               Fulfillmentstatus       `boil:"status" json:"status" toml:"status" yaml:"status"`
	TrackingNumber       string                  `boil:"tracking_number" json:"tracking_number" toml:"tracking_number" yaml:"tracking_number"`
	CreatedAt            int64                   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ShippingRefundAmount model_types.NullDecimal `boil:"shipping_refund_amount" json:"shipping_refund_amount,omitempty" toml:"shipping_refund_amount" yaml:"shipping_refund_amount,omitempty"`
	TotalRefundAmount    model_types.NullDecimal `boil:"total_refund_amount" json:"total_refund_amount,omitempty" toml:"total_refund_amount" yaml:"total_refund_amount,omitempty"`
	Metadata             model_types.JsonMap     `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata      model_types.JsonMap     `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *fulfillmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fulfillmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FulfillmentColumns = struct {
	ID                   string
	FulfillmentOrder     string
	OrderID              string
	Status               string
	TrackingNumber       string
	CreatedAt            string
	ShippingRefundAmount string
	TotalRefundAmount    string
	Metadata             string
	PrivateMetadata      string
}{
	ID:                   "id",
	FulfillmentOrder:     "fulfillment_order",
	OrderID:              "order_id",
	Status:               "status",
	TrackingNumber:       "tracking_number",
	CreatedAt:            "created_at",
	ShippingRefundAmount: "shipping_refund_amount",
	TotalRefundAmount:    "total_refund_amount",
	Metadata:             "metadata",
	PrivateMetadata:      "private_metadata",
}

var FulfillmentTableColumns = struct {
	ID                   string
	FulfillmentOrder     string
	OrderID              string
	Status               string
	TrackingNumber       string
	CreatedAt            string
	ShippingRefundAmount string
	TotalRefundAmount    string
	Metadata             string
	PrivateMetadata      string
}{
	ID:                   "fulfillments.id",
	FulfillmentOrder:     "fulfillments.fulfillment_order",
	OrderID:              "fulfillments.order_id",
	Status:               "fulfillments.status",
	TrackingNumber:       "fulfillments.tracking_number",
	CreatedAt:            "fulfillments.created_at",
	ShippingRefundAmount: "fulfillments.shipping_refund_amount",
	TotalRefundAmount:    "fulfillments.total_refund_amount",
	Metadata:             "fulfillments.metadata",
	PrivateMetadata:      "fulfillments.private_metadata",
}

// Generated where

type whereHelperFulfillmentstatus struct{ field string }

func (w whereHelperFulfillmentstatus) EQ(x Fulfillmentstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperFulfillmentstatus) NEQ(x Fulfillmentstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperFulfillmentstatus) LT(x Fulfillmentstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperFulfillmentstatus) LTE(x Fulfillmentstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperFulfillmentstatus) GT(x Fulfillmentstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperFulfillmentstatus) GTE(x Fulfillmentstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperFulfillmentstatus) IN(slice []Fulfillmentstatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperFulfillmentstatus) NIN(slice []Fulfillmentstatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpermodel_types_NullDecimal struct{ field string }

func (w whereHelpermodel_types_NullDecimal) EQ(x model_types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpermodel_types_NullDecimal) NEQ(x model_types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpermodel_types_NullDecimal) LT(x model_types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpermodel_types_NullDecimal) LTE(x model_types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpermodel_types_NullDecimal) GT(x model_types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpermodel_types_NullDecimal) GTE(x model_types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpermodel_types_NullDecimal) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelpermodel_types_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var FulfillmentWhere = struct {
	ID                   whereHelperstring
	FulfillmentOrder     whereHelperint
	OrderID              whereHelperstring
	Status               whereHelperFulfillmentstatus
	TrackingNumber       whereHelperstring
	CreatedAt            whereHelperint64
	ShippingRefundAmount whereHelpermodel_types_NullDecimal
	TotalRefundAmount    whereHelpermodel_types_NullDecimal
	Metadata             whereHelpermodel_types_JsonMap
	PrivateMetadata      whereHelpermodel_types_JsonMap
}{
	ID:                   whereHelperstring{field: "\"fulfillments\".\"id\""},
	FulfillmentOrder:     whereHelperint{field: "\"fulfillments\".\"fulfillment_order\""},
	OrderID:              whereHelperstring{field: "\"fulfillments\".\"order_id\""},
	Status:               whereHelperFulfillmentstatus{field: "\"fulfillments\".\"status\""},
	TrackingNumber:       whereHelperstring{field: "\"fulfillments\".\"tracking_number\""},
	CreatedAt:            whereHelperint64{field: "\"fulfillments\".\"created_at\""},
	ShippingRefundAmount: whereHelpermodel_types_NullDecimal{field: "\"fulfillments\".\"shipping_refund_amount\""},
	TotalRefundAmount:    whereHelpermodel_types_NullDecimal{field: "\"fulfillments\".\"total_refund_amount\""},
	Metadata:             whereHelpermodel_types_JsonMap{field: "\"fulfillments\".\"metadata\""},
	PrivateMetadata:      whereHelpermodel_types_JsonMap{field: "\"fulfillments\".\"private_metadata\""},
}

// FulfillmentRels is where relationship names are stored.
var FulfillmentRels = struct {
	Order string
}{
	Order: "Order",
}

// fulfillmentR is where relationships are stored.
type fulfillmentR struct {
	Order *Order `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
}

// NewStruct creates a new relationship struct
func (*fulfillmentR) NewStruct() *fulfillmentR {
	return &fulfillmentR{}
}

func (r *fulfillmentR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

// fulfillmentL is where Load methods for each relationship are stored.
type fulfillmentL struct{}

var (
	fulfillmentAllColumns            = []string{"id", "fulfillment_order", "order_id", "status", "tracking_number", "created_at", "shipping_refund_amount", "total_refund_amount", "metadata", "private_metadata"}
	fulfillmentColumnsWithoutDefault = []string{"fulfillment_order", "order_id", "status", "tracking_number", "created_at"}
	fulfillmentColumnsWithDefault    = []string{"id", "shipping_refund_amount", "total_refund_amount", "metadata", "private_metadata"}
	fulfillmentPrimaryKeyColumns     = []string{"id"}
	fulfillmentGeneratedColumns      = []string{}
)

type (
	// FulfillmentSlice is an alias for a slice of pointers to Fulfillment.
	// This should almost always be used instead of []Fulfillment.
	FulfillmentSlice []*Fulfillment

	fulfillmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fulfillmentType                 = reflect.TypeOf(&Fulfillment{})
	fulfillmentMapping              = queries.MakeStructMapping(fulfillmentType)
	fulfillmentPrimaryKeyMapping, _ = queries.BindMapping(fulfillmentType, fulfillmentMapping, fulfillmentPrimaryKeyColumns)
	fulfillmentInsertCacheMut       sync.RWMutex
	fulfillmentInsertCache          = make(map[string]insertCache)
	fulfillmentUpdateCacheMut       sync.RWMutex
	fulfillmentUpdateCache          = make(map[string]updateCache)
	fulfillmentUpsertCacheMut       sync.RWMutex
	fulfillmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single fulfillment record from the query.
func (q fulfillmentQuery) One(exec boil.Executor) (*Fulfillment, error) {
	o := &Fulfillment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for fulfillments")
	}

	return o, nil
}

// All returns all Fulfillment records from the query.
func (q fulfillmentQuery) All(exec boil.Executor) (FulfillmentSlice, error) {
	var o []*Fulfillment

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Fulfillment slice")
	}

	return o, nil
}

// Count returns the count of all Fulfillment records in the query.
func (q fulfillmentQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count fulfillments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q fulfillmentQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if fulfillments exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *Fulfillment) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (fulfillmentL) LoadOrder(e boil.Executor, singular bool, maybeFulfillment interface{}, mods queries.Applicator) error {
	var slice []*Fulfillment
	var object *Fulfillment

	if singular {
		var ok bool
		object, ok = maybeFulfillment.(*Fulfillment)
		if !ok {
			object = new(Fulfillment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeFulfillment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeFulfillment))
			}
		}
	} else {
		s, ok := maybeFulfillment.(*[]*Fulfillment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeFulfillment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeFulfillment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &fulfillmentR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &fulfillmentR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.Fulfillments = append(foreign.R.Fulfillments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Fulfillments = append(foreign.R.Fulfillments, local)
				break
			}
		}
	}

	return nil
}

// SetOrder of the fulfillment to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.Fulfillments.
func (o *Fulfillment) SetOrder(exec boil.Executor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"fulfillments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, fulfillmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &fulfillmentR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			Fulfillments: FulfillmentSlice{o},
		}
	} else {
		related.R.Fulfillments = append(related.R.Fulfillments, o)
	}

	return nil
}

// Fulfillments retrieves all the records using an executor.
func Fulfillments(mods ...qm.QueryMod) fulfillmentQuery {
	mods = append(mods, qm.From("\"fulfillments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"fulfillments\".*"})
	}

	return fulfillmentQuery{q}
}

// FindFulfillment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFulfillment(exec boil.Executor, iD string, selectCols ...string) (*Fulfillment, error) {
	fulfillmentObj := &Fulfillment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fulfillments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, fulfillmentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from fulfillments")
	}

	return fulfillmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Fulfillment) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no fulfillments provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(fulfillmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fulfillmentInsertCacheMut.RLock()
	cache, cached := fulfillmentInsertCache[key]
	fulfillmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fulfillmentAllColumns,
			fulfillmentColumnsWithDefault,
			fulfillmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fulfillmentType, fulfillmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fulfillmentType, fulfillmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fulfillments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fulfillments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into fulfillments")
	}

	if !cached {
		fulfillmentInsertCacheMut.Lock()
		fulfillmentInsertCache[key] = cache
		fulfillmentInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Fulfillment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Fulfillment) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	fulfillmentUpdateCacheMut.RLock()
	cache, cached := fulfillmentUpdateCache[key]
	fulfillmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fulfillmentAllColumns,
			fulfillmentPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update fulfillments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fulfillments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fulfillmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fulfillmentType, fulfillmentMapping, append(wl, fulfillmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update fulfillments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for fulfillments")
	}

	if !cached {
		fulfillmentUpdateCacheMut.Lock()
		fulfillmentUpdateCache[key] = cache
		fulfillmentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q fulfillmentQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for fulfillments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for fulfillments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FulfillmentSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fulfillmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fulfillments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fulfillmentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in fulfillment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all fulfillment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Fulfillment) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no fulfillments provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(fulfillmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fulfillmentUpsertCacheMut.RLock()
	cache, cached := fulfillmentUpsertCache[key]
	fulfillmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fulfillmentAllColumns,
			fulfillmentColumnsWithDefault,
			fulfillmentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fulfillmentAllColumns,
			fulfillmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert fulfillments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fulfillmentPrimaryKeyColumns))
			copy(conflict, fulfillmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fulfillments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fulfillmentType, fulfillmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fulfillmentType, fulfillmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert fulfillments")
	}

	if !cached {
		fulfillmentUpsertCacheMut.Lock()
		fulfillmentUpsertCache[key] = cache
		fulfillmentUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Fulfillment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Fulfillment) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Fulfillment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fulfillmentPrimaryKeyMapping)
	sql := "DELETE FROM \"fulfillments\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from fulfillments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for fulfillments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q fulfillmentQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no fulfillmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from fulfillments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for fulfillments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FulfillmentSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fulfillmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"fulfillments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fulfillmentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from fulfillment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for fulfillments")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Fulfillment) Reload(exec boil.Executor) error {
	ret, err := FindFulfillment(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FulfillmentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FulfillmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fulfillmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fulfillments\".* FROM \"fulfillments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fulfillmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in FulfillmentSlice")
	}

	*o = slice

	return nil
}

// FulfillmentExists checks if the Fulfillment row exists.
func FulfillmentExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fulfillments\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if fulfillments exists")
	}

	return exists, nil
}

// Exists checks if the Fulfillment row exists.
func (o *Fulfillment) Exists(exec boil.Executor) (bool, error) {
	return FulfillmentExists(exec, o.ID)
}
