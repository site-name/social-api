// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Checkout is an object representing the database table.
type Checkout struct {
	Token                  string                 `boil:"token" json:"token" toml:"token" yaml:"token"`
	CreatedAt              int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              int64                  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UserID                 model_types.NullString `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Email                  string                 `boil:"email" json:"email" toml:"email" yaml:"email"`
	Quantity               int                    `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	ChannelID              string                 `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	BillingAddressID       model_types.NullString `boil:"billing_address_id" json:"billing_address_id,omitempty" toml:"billing_address_id" yaml:"billing_address_id,omitempty"`
	ShippingAddressID      model_types.NullString `boil:"shipping_address_id" json:"shipping_address_id,omitempty" toml:"shipping_address_id" yaml:"shipping_address_id,omitempty"`
	ShippingMethodID       model_types.NullString `boil:"shipping_method_id" json:"shipping_method_id,omitempty" toml:"shipping_method_id" yaml:"shipping_method_id,omitempty"`
	CollectionPointID      model_types.NullString `boil:"collection_point_id" json:"collection_point_id,omitempty" toml:"collection_point_id" yaml:"collection_point_id,omitempty"`
	Note                   string                 `boil:"note" json:"note" toml:"note" yaml:"note"`
	Currency               string                 `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Country                CountryCode            `boil:"country" json:"country" toml:"country" yaml:"country"`
	DiscountAmount         decimal.Decimal        `boil:"discount_amount" json:"discount_amount" toml:"discount_amount" yaml:"discount_amount"`
	DiscountName           model_types.NullString `boil:"discount_name" json:"discount_name,omitempty" toml:"discount_name" yaml:"discount_name,omitempty"`
	TranslatedDiscountName model_types.NullString `boil:"translated_discount_name" json:"translated_discount_name,omitempty" toml:"translated_discount_name" yaml:"translated_discount_name,omitempty"`
	VoucherCode            model_types.NullString `boil:"voucher_code" json:"voucher_code,omitempty" toml:"voucher_code" yaml:"voucher_code,omitempty"`
	RedirectURL            model_types.NullString `boil:"redirect_url" json:"redirect_url,omitempty" toml:"redirect_url" yaml:"redirect_url,omitempty"`
	TrackingCode           model_types.NullString `boil:"tracking_code" json:"tracking_code,omitempty" toml:"tracking_code" yaml:"tracking_code,omitempty"`
	LanguageCode           LanguageCode           `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	Metadata               model_types.JsonMap    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata        model_types.JsonMap    `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *checkoutR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checkoutL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CheckoutColumns = struct {
	Token                  string
	CreatedAt              string
	UpdatedAt              string
	UserID                 string
	Email                  string
	Quantity               string
	ChannelID              string
	BillingAddressID       string
	ShippingAddressID      string
	ShippingMethodID       string
	CollectionPointID      string
	Note                   string
	Currency               string
	Country                string
	DiscountAmount         string
	DiscountName           string
	TranslatedDiscountName string
	VoucherCode            string
	RedirectURL            string
	TrackingCode           string
	LanguageCode           string
	Metadata               string
	PrivateMetadata        string
}{
	Token:                  "token",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	UserID:                 "user_id",
	Email:                  "email",
	Quantity:               "quantity",
	ChannelID:              "channel_id",
	BillingAddressID:       "billing_address_id",
	ShippingAddressID:      "shipping_address_id",
	ShippingMethodID:       "shipping_method_id",
	CollectionPointID:      "collection_point_id",
	Note:                   "note",
	Currency:               "currency",
	Country:                "country",
	DiscountAmount:         "discount_amount",
	DiscountName:           "discount_name",
	TranslatedDiscountName: "translated_discount_name",
	VoucherCode:            "voucher_code",
	RedirectURL:            "redirect_url",
	TrackingCode:           "tracking_code",
	LanguageCode:           "language_code",
	Metadata:               "metadata",
	PrivateMetadata:        "private_metadata",
}

var CheckoutTableColumns = struct {
	Token                  string
	CreatedAt              string
	UpdatedAt              string
	UserID                 string
	Email                  string
	Quantity               string
	ChannelID              string
	BillingAddressID       string
	ShippingAddressID      string
	ShippingMethodID       string
	CollectionPointID      string
	Note                   string
	Currency               string
	Country                string
	DiscountAmount         string
	DiscountName           string
	TranslatedDiscountName string
	VoucherCode            string
	RedirectURL            string
	TrackingCode           string
	LanguageCode           string
	Metadata               string
	PrivateMetadata        string
}{
	Token:                  "checkouts.token",
	CreatedAt:              "checkouts.created_at",
	UpdatedAt:              "checkouts.updated_at",
	UserID:                 "checkouts.user_id",
	Email:                  "checkouts.email",
	Quantity:               "checkouts.quantity",
	ChannelID:              "checkouts.channel_id",
	BillingAddressID:       "checkouts.billing_address_id",
	ShippingAddressID:      "checkouts.shipping_address_id",
	ShippingMethodID:       "checkouts.shipping_method_id",
	CollectionPointID:      "checkouts.collection_point_id",
	Note:                   "checkouts.note",
	Currency:               "checkouts.currency",
	Country:                "checkouts.country",
	DiscountAmount:         "checkouts.discount_amount",
	DiscountName:           "checkouts.discount_name",
	TranslatedDiscountName: "checkouts.translated_discount_name",
	VoucherCode:            "checkouts.voucher_code",
	RedirectURL:            "checkouts.redirect_url",
	TrackingCode:           "checkouts.tracking_code",
	LanguageCode:           "checkouts.language_code",
	Metadata:               "checkouts.metadata",
	PrivateMetadata:        "checkouts.private_metadata",
}

// Generated where

type whereHelperdecimal_Decimal struct{ field string }

func (w whereHelperdecimal_Decimal) EQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdecimal_Decimal) NEQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdecimal_Decimal) LT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_Decimal) LTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_Decimal) GT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_Decimal) GTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CheckoutWhere = struct {
	Token                  whereHelperstring
	CreatedAt              whereHelperint64
	UpdatedAt              whereHelperint64
	UserID                 whereHelpermodel_types_NullString
	Email                  whereHelperstring
	Quantity               whereHelperint
	ChannelID              whereHelperstring
	BillingAddressID       whereHelpermodel_types_NullString
	ShippingAddressID      whereHelpermodel_types_NullString
	ShippingMethodID       whereHelpermodel_types_NullString
	CollectionPointID      whereHelpermodel_types_NullString
	Note                   whereHelperstring
	Currency               whereHelperstring
	Country                whereHelperCountryCode
	DiscountAmount         whereHelperdecimal_Decimal
	DiscountName           whereHelpermodel_types_NullString
	TranslatedDiscountName whereHelpermodel_types_NullString
	VoucherCode            whereHelpermodel_types_NullString
	RedirectURL            whereHelpermodel_types_NullString
	TrackingCode           whereHelpermodel_types_NullString
	LanguageCode           whereHelperLanguageCode
	Metadata               whereHelpermodel_types_JsonMap
	PrivateMetadata        whereHelpermodel_types_JsonMap
}{
	Token:                  whereHelperstring{field: "\"checkouts\".\"token\""},
	CreatedAt:              whereHelperint64{field: "\"checkouts\".\"created_at\""},
	UpdatedAt:              whereHelperint64{field: "\"checkouts\".\"updated_at\""},
	UserID:                 whereHelpermodel_types_NullString{field: "\"checkouts\".\"user_id\""},
	Email:                  whereHelperstring{field: "\"checkouts\".\"email\""},
	Quantity:               whereHelperint{field: "\"checkouts\".\"quantity\""},
	ChannelID:              whereHelperstring{field: "\"checkouts\".\"channel_id\""},
	BillingAddressID:       whereHelpermodel_types_NullString{field: "\"checkouts\".\"billing_address_id\""},
	ShippingAddressID:      whereHelpermodel_types_NullString{field: "\"checkouts\".\"shipping_address_id\""},
	ShippingMethodID:       whereHelpermodel_types_NullString{field: "\"checkouts\".\"shipping_method_id\""},
	CollectionPointID:      whereHelpermodel_types_NullString{field: "\"checkouts\".\"collection_point_id\""},
	Note:                   whereHelperstring{field: "\"checkouts\".\"note\""},
	Currency:               whereHelperstring{field: "\"checkouts\".\"currency\""},
	Country:                whereHelperCountryCode{field: "\"checkouts\".\"country\""},
	DiscountAmount:         whereHelperdecimal_Decimal{field: "\"checkouts\".\"discount_amount\""},
	DiscountName:           whereHelpermodel_types_NullString{field: "\"checkouts\".\"discount_name\""},
	TranslatedDiscountName: whereHelpermodel_types_NullString{field: "\"checkouts\".\"translated_discount_name\""},
	VoucherCode:            whereHelpermodel_types_NullString{field: "\"checkouts\".\"voucher_code\""},
	RedirectURL:            whereHelpermodel_types_NullString{field: "\"checkouts\".\"redirect_url\""},
	TrackingCode:           whereHelpermodel_types_NullString{field: "\"checkouts\".\"tracking_code\""},
	LanguageCode:           whereHelperLanguageCode{field: "\"checkouts\".\"language_code\""},
	Metadata:               whereHelpermodel_types_JsonMap{field: "\"checkouts\".\"metadata\""},
	PrivateMetadata:        whereHelpermodel_types_JsonMap{field: "\"checkouts\".\"private_metadata\""},
}

// CheckoutRels is where relationship names are stored.
var CheckoutRels = struct {
}{}

// checkoutR is where relationships are stored.
type checkoutR struct {
}

// NewStruct creates a new relationship struct
func (*checkoutR) NewStruct() *checkoutR {
	return &checkoutR{}
}

// checkoutL is where Load methods for each relationship are stored.
type checkoutL struct{}

var (
	checkoutAllColumns            = []string{"token", "created_at", "updated_at", "user_id", "email", "quantity", "channel_id", "billing_address_id", "shipping_address_id", "shipping_method_id", "collection_point_id", "note", "currency", "country", "discount_amount", "discount_name", "translated_discount_name", "voucher_code", "redirect_url", "tracking_code", "language_code", "metadata", "private_metadata"}
	checkoutColumnsWithoutDefault = []string{"created_at", "updated_at", "email", "quantity", "channel_id", "note", "currency", "country", "language_code"}
	checkoutColumnsWithDefault    = []string{"token", "user_id", "billing_address_id", "shipping_address_id", "shipping_method_id", "collection_point_id", "discount_amount", "discount_name", "translated_discount_name", "voucher_code", "redirect_url", "tracking_code", "metadata", "private_metadata"}
	checkoutPrimaryKeyColumns     = []string{"token"}
	checkoutGeneratedColumns      = []string{}
)

type (
	// CheckoutSlice is an alias for a slice of pointers to Checkout.
	// This should almost always be used instead of []Checkout.
	CheckoutSlice []*Checkout

	checkoutQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checkoutType                 = reflect.TypeOf(&Checkout{})
	checkoutMapping              = queries.MakeStructMapping(checkoutType)
	checkoutPrimaryKeyMapping, _ = queries.BindMapping(checkoutType, checkoutMapping, checkoutPrimaryKeyColumns)
	checkoutInsertCacheMut       sync.RWMutex
	checkoutInsertCache          = make(map[string]insertCache)
	checkoutUpdateCacheMut       sync.RWMutex
	checkoutUpdateCache          = make(map[string]updateCache)
	checkoutUpsertCacheMut       sync.RWMutex
	checkoutUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single checkout record from the query.
func (q checkoutQuery) One(exec boil.Executor) (*Checkout, error) {
	o := &Checkout{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for checkouts")
	}

	return o, nil
}

// All returns all Checkout records from the query.
func (q checkoutQuery) All(exec boil.Executor) (CheckoutSlice, error) {
	var o []*Checkout

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Checkout slice")
	}

	return o, nil
}

// Count returns the count of all Checkout records in the query.
func (q checkoutQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count checkouts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q checkoutQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if checkouts exists")
	}

	return count > 0, nil
}

// Checkouts retrieves all the records using an executor.
func Checkouts(mods ...qm.QueryMod) checkoutQuery {
	mods = append(mods, qm.From("\"checkouts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"checkouts\".*"})
	}

	return checkoutQuery{q}
}

// FindCheckout retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCheckout(exec boil.Executor, token string, selectCols ...string) (*Checkout, error) {
	checkoutObj := &Checkout{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"checkouts\" where \"token\"=$1", sel,
	)

	q := queries.Raw(query, token)

	err := q.Bind(nil, exec, checkoutObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from checkouts")
	}

	return checkoutObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Checkout) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no checkouts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(checkoutColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checkoutInsertCacheMut.RLock()
	cache, cached := checkoutInsertCache[key]
	checkoutInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checkoutAllColumns,
			checkoutColumnsWithDefault,
			checkoutColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checkoutType, checkoutMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"checkouts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"checkouts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into checkouts")
	}

	if !cached {
		checkoutInsertCacheMut.Lock()
		checkoutInsertCache[key] = cache
		checkoutInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Checkout.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Checkout) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	checkoutUpdateCacheMut.RLock()
	cache, cached := checkoutUpdateCache[key]
	checkoutUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checkoutAllColumns,
			checkoutPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update checkouts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"checkouts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, checkoutPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, append(wl, checkoutPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update checkouts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for checkouts")
	}

	if !cached {
		checkoutUpdateCacheMut.Lock()
		checkoutUpdateCache[key] = cache
		checkoutUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q checkoutQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for checkouts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CheckoutSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, checkoutPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in checkout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all checkout")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Checkout) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no checkouts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checkoutUpsertCacheMut.RLock()
	cache, cached := checkoutUpsertCache[key]
	checkoutUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			checkoutAllColumns,
			checkoutColumnsWithDefault,
			checkoutColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			checkoutAllColumns,
			checkoutPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert checkouts, could not build update column list")
		}

		ret := strmangle.SetComplement(checkoutAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(checkoutPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert checkouts, could not build conflict column list")
			}

			conflict = make([]string, len(checkoutPrimaryKeyColumns))
			copy(conflict, checkoutPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"checkouts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checkoutType, checkoutMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert checkouts")
	}

	if !cached {
		checkoutUpsertCacheMut.Lock()
		checkoutUpsertCache[key] = cache
		checkoutUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Checkout record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Checkout) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Checkout provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checkoutPrimaryKeyMapping)
	sql := "DELETE FROM \"checkouts\" WHERE \"token\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for checkouts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q checkoutQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no checkoutQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for checkouts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CheckoutSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from checkout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for checkouts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Checkout) Reload(exec boil.Executor) error {
	ret, err := FindCheckout(exec, o.Token)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckoutSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CheckoutSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"checkouts\".* FROM \"checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in CheckoutSlice")
	}

	*o = slice

	return nil
}

// CheckoutExists checks if the Checkout row exists.
func CheckoutExists(exec boil.Executor, token string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"checkouts\" where \"token\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, token)
	}
	row := exec.QueryRow(sql, token)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if checkouts exists")
	}

	return exists, nil
}

// Exists checks if the Checkout row exists.
func (o *Checkout) Exists(exec boil.Executor) (bool, error) {
	return CheckoutExists(exec, o.Token)
}
