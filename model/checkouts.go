// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Checkout is an object representing the database table.
type Checkout struct {
	Token                  string                 `boil:"token" json:"token" toml:"token" yaml:"token"`
	CreatedAt              int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt              int64                  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UserID                 model_types.NullString `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Email                  string                 `boil:"email" json:"email" toml:"email" yaml:"email"`
	Quantity               int                    `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	ChannelID              string                 `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	BillingAddressID       model_types.NullString `boil:"billing_address_id" json:"billing_address_id,omitempty" toml:"billing_address_id" yaml:"billing_address_id,omitempty"`
	ShippingAddressID      model_types.NullString `boil:"shipping_address_id" json:"shipping_address_id,omitempty" toml:"shipping_address_id" yaml:"shipping_address_id,omitempty"`
	ShippingMethodID       model_types.NullString `boil:"shipping_method_id" json:"shipping_method_id,omitempty" toml:"shipping_method_id" yaml:"shipping_method_id,omitempty"`
	CollectionPointID      model_types.NullString `boil:"collection_point_id" json:"collection_point_id,omitempty" toml:"collection_point_id" yaml:"collection_point_id,omitempty"`
	Note                   string                 `boil:"note" json:"note" toml:"note" yaml:"note"`
	Currency               Currency               `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Country                CountryCode            `boil:"country" json:"country" toml:"country" yaml:"country"`
	DiscountAmount         decimal.Decimal        `boil:"discount_amount" json:"discount_amount" toml:"discount_amount" yaml:"discount_amount"`
	DiscountName           model_types.NullString `boil:"discount_name" json:"discount_name,omitempty" toml:"discount_name" yaml:"discount_name,omitempty"`
	TranslatedDiscountName model_types.NullString `boil:"translated_discount_name" json:"translated_discount_name,omitempty" toml:"translated_discount_name" yaml:"translated_discount_name,omitempty"`
	VoucherCode            model_types.NullString `boil:"voucher_code" json:"voucher_code,omitempty" toml:"voucher_code" yaml:"voucher_code,omitempty"`
	RedirectURL            model_types.NullString `boil:"redirect_url" json:"redirect_url,omitempty" toml:"redirect_url" yaml:"redirect_url,omitempty"`
	TrackingCode           model_types.NullString `boil:"tracking_code" json:"tracking_code,omitempty" toml:"tracking_code" yaml:"tracking_code,omitempty"`
	LanguageCode           LanguageCode           `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	Metadata               model_types.JsonMap    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata        model_types.JsonMap    `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *checkoutR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checkoutL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CheckoutColumns = struct {
	Token                  string
	CreatedAt              string
	UpdatedAt              string
	UserID                 string
	Email                  string
	Quantity               string
	ChannelID              string
	BillingAddressID       string
	ShippingAddressID      string
	ShippingMethodID       string
	CollectionPointID      string
	Note                   string
	Currency               string
	Country                string
	DiscountAmount         string
	DiscountName           string
	TranslatedDiscountName string
	VoucherCode            string
	RedirectURL            string
	TrackingCode           string
	LanguageCode           string
	Metadata               string
	PrivateMetadata        string
}{
	Token:                  "token",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	UserID:                 "user_id",
	Email:                  "email",
	Quantity:               "quantity",
	ChannelID:              "channel_id",
	BillingAddressID:       "billing_address_id",
	ShippingAddressID:      "shipping_address_id",
	ShippingMethodID:       "shipping_method_id",
	CollectionPointID:      "collection_point_id",
	Note:                   "note",
	Currency:               "currency",
	Country:                "country",
	DiscountAmount:         "discount_amount",
	DiscountName:           "discount_name",
	TranslatedDiscountName: "translated_discount_name",
	VoucherCode:            "voucher_code",
	RedirectURL:            "redirect_url",
	TrackingCode:           "tracking_code",
	LanguageCode:           "language_code",
	Metadata:               "metadata",
	PrivateMetadata:        "private_metadata",
}

var CheckoutTableColumns = struct {
	Token                  string
	CreatedAt              string
	UpdatedAt              string
	UserID                 string
	Email                  string
	Quantity               string
	ChannelID              string
	BillingAddressID       string
	ShippingAddressID      string
	ShippingMethodID       string
	CollectionPointID      string
	Note                   string
	Currency               string
	Country                string
	DiscountAmount         string
	DiscountName           string
	TranslatedDiscountName string
	VoucherCode            string
	RedirectURL            string
	TrackingCode           string
	LanguageCode           string
	Metadata               string
	PrivateMetadata        string
}{
	Token:                  "checkouts.token",
	CreatedAt:              "checkouts.created_at",
	UpdatedAt:              "checkouts.updated_at",
	UserID:                 "checkouts.user_id",
	Email:                  "checkouts.email",
	Quantity:               "checkouts.quantity",
	ChannelID:              "checkouts.channel_id",
	BillingAddressID:       "checkouts.billing_address_id",
	ShippingAddressID:      "checkouts.shipping_address_id",
	ShippingMethodID:       "checkouts.shipping_method_id",
	CollectionPointID:      "checkouts.collection_point_id",
	Note:                   "checkouts.note",
	Currency:               "checkouts.currency",
	Country:                "checkouts.country",
	DiscountAmount:         "checkouts.discount_amount",
	DiscountName:           "checkouts.discount_name",
	TranslatedDiscountName: "checkouts.translated_discount_name",
	VoucherCode:            "checkouts.voucher_code",
	RedirectURL:            "checkouts.redirect_url",
	TrackingCode:           "checkouts.tracking_code",
	LanguageCode:           "checkouts.language_code",
	Metadata:               "checkouts.metadata",
	PrivateMetadata:        "checkouts.private_metadata",
}

// Generated where

type whereHelperdecimal_Decimal struct{ field string }

func (w whereHelperdecimal_Decimal) EQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperdecimal_Decimal) NEQ(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperdecimal_Decimal) LT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperdecimal_Decimal) LTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperdecimal_Decimal) GT(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperdecimal_Decimal) GTE(x decimal.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CheckoutWhere = struct {
	Token                  whereHelperstring
	CreatedAt              whereHelperint64
	UpdatedAt              whereHelperint64
	UserID                 whereHelpermodel_types_NullString
	Email                  whereHelperstring
	Quantity               whereHelperint
	ChannelID              whereHelperstring
	BillingAddressID       whereHelpermodel_types_NullString
	ShippingAddressID      whereHelpermodel_types_NullString
	ShippingMethodID       whereHelpermodel_types_NullString
	CollectionPointID      whereHelpermodel_types_NullString
	Note                   whereHelperstring
	Currency               whereHelperCurrency
	Country                whereHelperCountryCode
	DiscountAmount         whereHelperdecimal_Decimal
	DiscountName           whereHelpermodel_types_NullString
	TranslatedDiscountName whereHelpermodel_types_NullString
	VoucherCode            whereHelpermodel_types_NullString
	RedirectURL            whereHelpermodel_types_NullString
	TrackingCode           whereHelpermodel_types_NullString
	LanguageCode           whereHelperLanguageCode
	Metadata               whereHelpermodel_types_JsonMap
	PrivateMetadata        whereHelpermodel_types_JsonMap
}{
	Token:                  whereHelperstring{field: "\"checkouts\".\"token\""},
	CreatedAt:              whereHelperint64{field: "\"checkouts\".\"created_at\""},
	UpdatedAt:              whereHelperint64{field: "\"checkouts\".\"updated_at\""},
	UserID:                 whereHelpermodel_types_NullString{field: "\"checkouts\".\"user_id\""},
	Email:                  whereHelperstring{field: "\"checkouts\".\"email\""},
	Quantity:               whereHelperint{field: "\"checkouts\".\"quantity\""},
	ChannelID:              whereHelperstring{field: "\"checkouts\".\"channel_id\""},
	BillingAddressID:       whereHelpermodel_types_NullString{field: "\"checkouts\".\"billing_address_id\""},
	ShippingAddressID:      whereHelpermodel_types_NullString{field: "\"checkouts\".\"shipping_address_id\""},
	ShippingMethodID:       whereHelpermodel_types_NullString{field: "\"checkouts\".\"shipping_method_id\""},
	CollectionPointID:      whereHelpermodel_types_NullString{field: "\"checkouts\".\"collection_point_id\""},
	Note:                   whereHelperstring{field: "\"checkouts\".\"note\""},
	Currency:               whereHelperCurrency{field: "\"checkouts\".\"currency\""},
	Country:                whereHelperCountryCode{field: "\"checkouts\".\"country\""},
	DiscountAmount:         whereHelperdecimal_Decimal{field: "\"checkouts\".\"discount_amount\""},
	DiscountName:           whereHelpermodel_types_NullString{field: "\"checkouts\".\"discount_name\""},
	TranslatedDiscountName: whereHelpermodel_types_NullString{field: "\"checkouts\".\"translated_discount_name\""},
	VoucherCode:            whereHelpermodel_types_NullString{field: "\"checkouts\".\"voucher_code\""},
	RedirectURL:            whereHelpermodel_types_NullString{field: "\"checkouts\".\"redirect_url\""},
	TrackingCode:           whereHelpermodel_types_NullString{field: "\"checkouts\".\"tracking_code\""},
	LanguageCode:           whereHelperLanguageCode{field: "\"checkouts\".\"language_code\""},
	Metadata:               whereHelpermodel_types_JsonMap{field: "\"checkouts\".\"metadata\""},
	PrivateMetadata:        whereHelpermodel_types_JsonMap{field: "\"checkouts\".\"private_metadata\""},
}

// CheckoutRels is where relationship names are stored.
var CheckoutRels = struct {
	BillingAddress    string
	Channel           string
	ShippingMethod    string
	User              string
	CollectionPoint   string
	CheckoutLines     string
	GiftcardCheckouts string
	Payments          string
}{
	BillingAddress:    "BillingAddress",
	Channel:           "Channel",
	ShippingMethod:    "ShippingMethod",
	User:              "User",
	CollectionPoint:   "CollectionPoint",
	CheckoutLines:     "CheckoutLines",
	GiftcardCheckouts: "GiftcardCheckouts",
	Payments:          "Payments",
}

// checkoutR is where relationships are stored.
type checkoutR struct {
	BillingAddress    *Address              `boil:"BillingAddress" json:"BillingAddress" toml:"BillingAddress" yaml:"BillingAddress"`
	Channel           *Channel              `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
	ShippingMethod    *ShippingMethod       `boil:"ShippingMethod" json:"ShippingMethod" toml:"ShippingMethod" yaml:"ShippingMethod"`
	User              *User                 `boil:"User" json:"User" toml:"User" yaml:"User"`
	CollectionPoint   *Warehouse            `boil:"CollectionPoint" json:"CollectionPoint" toml:"CollectionPoint" yaml:"CollectionPoint"`
	CheckoutLines     CheckoutLineSlice     `boil:"CheckoutLines" json:"CheckoutLines" toml:"CheckoutLines" yaml:"CheckoutLines"`
	GiftcardCheckouts GiftcardCheckoutSlice `boil:"GiftcardCheckouts" json:"GiftcardCheckouts" toml:"GiftcardCheckouts" yaml:"GiftcardCheckouts"`
	Payments          PaymentSlice          `boil:"Payments" json:"Payments" toml:"Payments" yaml:"Payments"`
}

// NewStruct creates a new relationship struct
func (*checkoutR) NewStruct() *checkoutR {
	return &checkoutR{}
}

func (r *checkoutR) GetBillingAddress() *Address {
	if r == nil {
		return nil
	}
	return r.BillingAddress
}

func (r *checkoutR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *checkoutR) GetShippingMethod() *ShippingMethod {
	if r == nil {
		return nil
	}
	return r.ShippingMethod
}

func (r *checkoutR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *checkoutR) GetCollectionPoint() *Warehouse {
	if r == nil {
		return nil
	}
	return r.CollectionPoint
}

func (r *checkoutR) GetCheckoutLines() CheckoutLineSlice {
	if r == nil {
		return nil
	}
	return r.CheckoutLines
}

func (r *checkoutR) GetGiftcardCheckouts() GiftcardCheckoutSlice {
	if r == nil {
		return nil
	}
	return r.GiftcardCheckouts
}

func (r *checkoutR) GetPayments() PaymentSlice {
	if r == nil {
		return nil
	}
	return r.Payments
}

// checkoutL is where Load methods for each relationship are stored.
type checkoutL struct{}

var (
	checkoutAllColumns            = []string{"token", "created_at", "updated_at", "user_id", "email", "quantity", "channel_id", "billing_address_id", "shipping_address_id", "shipping_method_id", "collection_point_id", "note", "currency", "country", "discount_amount", "discount_name", "translated_discount_name", "voucher_code", "redirect_url", "tracking_code", "language_code", "metadata", "private_metadata"}
	checkoutColumnsWithoutDefault = []string{"token", "created_at", "updated_at", "email", "quantity", "channel_id", "note", "currency", "country", "language_code"}
	checkoutColumnsWithDefault    = []string{"user_id", "billing_address_id", "shipping_address_id", "shipping_method_id", "collection_point_id", "discount_amount", "discount_name", "translated_discount_name", "voucher_code", "redirect_url", "tracking_code", "metadata", "private_metadata"}
	checkoutPrimaryKeyColumns     = []string{"token"}
	checkoutGeneratedColumns      = []string{}
)

type (
	// CheckoutSlice is an alias for a slice of pointers to Checkout.
	// This should almost always be used instead of []Checkout.
	CheckoutSlice []*Checkout

	checkoutQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checkoutType                 = reflect.TypeOf(&Checkout{})
	checkoutMapping              = queries.MakeStructMapping(checkoutType)
	checkoutPrimaryKeyMapping, _ = queries.BindMapping(checkoutType, checkoutMapping, checkoutPrimaryKeyColumns)
	checkoutInsertCacheMut       sync.RWMutex
	checkoutInsertCache          = make(map[string]insertCache)
	checkoutUpdateCacheMut       sync.RWMutex
	checkoutUpdateCache          = make(map[string]updateCache)
	checkoutUpsertCacheMut       sync.RWMutex
	checkoutUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single checkout record from the query.
func (q checkoutQuery) One(exec boil.Executor) (*Checkout, error) {
	o := &Checkout{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for checkouts")
	}

	return o, nil
}

// All returns all Checkout records from the query.
func (q checkoutQuery) All(exec boil.Executor) (CheckoutSlice, error) {
	var o []*Checkout

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Checkout slice")
	}

	return o, nil
}

// Count returns the count of all Checkout records in the query.
func (q checkoutQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count checkouts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q checkoutQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if checkouts exists")
	}

	return count > 0, nil
}

// BillingAddress pointed to by the foreign key.
func (o *Checkout) BillingAddress(mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BillingAddressID),
	}

	queryMods = append(queryMods, mods...)

	return Addresses(queryMods...)
}

// Channel pointed to by the foreign key.
func (o *Checkout) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// ShippingMethod pointed to by the foreign key.
func (o *Checkout) ShippingMethod(mods ...qm.QueryMod) shippingMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShippingMethodID),
	}

	queryMods = append(queryMods, mods...)

	return ShippingMethods(queryMods...)
}

// User pointed to by the foreign key.
func (o *Checkout) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// CollectionPoint pointed to by the foreign key.
func (o *Checkout) CollectionPoint(mods ...qm.QueryMod) warehouseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionPointID),
	}

	queryMods = append(queryMods, mods...)

	return Warehouses(queryMods...)
}

// CheckoutLines retrieves all the checkout_line's CheckoutLines with an executor.
func (o *Checkout) CheckoutLines(mods ...qm.QueryMod) checkoutLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkout_lines\".\"checkout_id\"=?", o.Token),
	)

	return CheckoutLines(queryMods...)
}

// GiftcardCheckouts retrieves all the giftcard_checkout's GiftcardCheckouts with an executor.
func (o *Checkout) GiftcardCheckouts(mods ...qm.QueryMod) giftcardCheckoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"giftcard_checkouts\".\"checkout_id\"=?", o.Token),
	)

	return GiftcardCheckouts(queryMods...)
}

// Payments retrieves all the payment's Payments with an executor.
func (o *Checkout) Payments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payments\".\"checkout_id\"=?", o.Token),
	)

	return Payments(queryMods...)
}

// LoadBillingAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadBillingAddress(e boil.Executor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.BillingAddressID) {
			args[object.BillingAddressID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			if !queries.IsNil(obj.BillingAddressID) {
				args[obj.BillingAddressID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`addresses`),
		qm.WhereIn(`addresses.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for addresses")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillingAddress = foreign
		if foreign.R == nil {
			foreign.R = &addressR{}
		}
		foreign.R.BillingAddressCheckouts = append(foreign.R.BillingAddressCheckouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillingAddressID, foreign.ID) {
				local.R.BillingAddress = foreign
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.BillingAddressCheckouts = append(foreign.R.BillingAddressCheckouts, local)
				break
			}
		}
	}

	return nil
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadChannel(e boil.Executor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		args[object.ChannelID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			args[obj.ChannelID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.Checkouts = append(foreign.R.Checkouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.Checkouts = append(foreign.R.Checkouts, local)
				break
			}
		}
	}

	return nil
}

// LoadShippingMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadShippingMethod(e boil.Executor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.ShippingMethodID) {
			args[object.ShippingMethodID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			if !queries.IsNil(obj.ShippingMethodID) {
				args[obj.ShippingMethodID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shipping_methods`),
		qm.WhereIn(`shipping_methods.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingMethod")
	}

	var resultSlice []*ShippingMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_methods")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingMethod = foreign
		if foreign.R == nil {
			foreign.R = &shippingMethodR{}
		}
		foreign.R.Checkouts = append(foreign.R.Checkouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ShippingMethodID, foreign.ID) {
				local.R.ShippingMethod = foreign
				if foreign.R == nil {
					foreign.R = &shippingMethodR{}
				}
				foreign.R.Checkouts = append(foreign.R.Checkouts, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadUser(e boil.Executor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Checkouts = append(foreign.R.Checkouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Checkouts = append(foreign.R.Checkouts, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionPoint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadCollectionPoint(e boil.Executor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.CollectionPointID) {
			args[object.CollectionPointID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			if !queries.IsNil(obj.CollectionPointID) {
				args[obj.CollectionPointID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Warehouse")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Warehouse")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionPoint = foreign
		if foreign.R == nil {
			foreign.R = &warehouseR{}
		}
		foreign.R.CollectionPointCheckouts = append(foreign.R.CollectionPointCheckouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CollectionPointID, foreign.ID) {
				local.R.CollectionPoint = foreign
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.CollectionPointCheckouts = append(foreign.R.CollectionPointCheckouts, local)
				break
			}
		}
	}

	return nil
}

// LoadCheckoutLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (checkoutL) LoadCheckoutLines(e boil.Executor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		args[object.Token] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}
			args[obj.Token] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`checkout_lines`),
		qm.WhereIn(`checkout_lines.checkout_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkout_lines")
	}

	var resultSlice []*CheckoutLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkout_lines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkout_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkout_lines")
	}

	if singular {
		object.R.CheckoutLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutLineR{}
			}
			foreign.R.Checkout = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Token == foreign.CheckoutID {
				local.R.CheckoutLines = append(local.R.CheckoutLines, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutLineR{}
				}
				foreign.R.Checkout = local
				break
			}
		}
	}

	return nil
}

// LoadGiftcardCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (checkoutL) LoadGiftcardCheckouts(e boil.Executor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		args[object.Token] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}
			args[obj.Token] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`giftcard_checkouts`),
		qm.WhereIn(`giftcard_checkouts.checkout_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load giftcard_checkouts")
	}

	var resultSlice []*GiftcardCheckout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice giftcard_checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on giftcard_checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for giftcard_checkouts")
	}

	if singular {
		object.R.GiftcardCheckouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &giftcardCheckoutR{}
			}
			foreign.R.Checkout = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Token == foreign.CheckoutID {
				local.R.GiftcardCheckouts = append(local.R.GiftcardCheckouts, foreign)
				if foreign.R == nil {
					foreign.R = &giftcardCheckoutR{}
				}
				foreign.R.Checkout = local
				break
			}
		}
	}

	return nil
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (checkoutL) LoadPayments(e boil.Executor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		args[object.Token] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}
			args[obj.Token] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.checkout_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payments")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if singular {
		object.R.Payments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.Checkout = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Token, foreign.CheckoutID) {
				local.R.Payments = append(local.R.Payments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.Checkout = local
				break
			}
		}
	}

	return nil
}

// SetBillingAddress of the checkout to the related item.
// Sets o.R.BillingAddress to related.
// Adds o to related.R.BillingAddressCheckouts.
func (o *Checkout) SetBillingAddress(exec boil.Executor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"billing_address_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillingAddressID, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			BillingAddress: related,
		}
	} else {
		o.R.BillingAddress = related
	}

	if related.R == nil {
		related.R = &addressR{
			BillingAddressCheckouts: CheckoutSlice{o},
		}
	} else {
		related.R.BillingAddressCheckouts = append(related.R.BillingAddressCheckouts, o)
	}

	return nil
}

// RemoveBillingAddress relationship.
// Sets o.R.BillingAddress to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Checkout) RemoveBillingAddress(exec boil.Executor, related *Address) error {
	var err error

	queries.SetScanner(&o.BillingAddressID, nil)
	if _, err = o.Update(exec, boil.Whitelist("billing_address_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillingAddress = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BillingAddressCheckouts {
		if queries.Equal(o.BillingAddressID, ri.BillingAddressID) {
			continue
		}

		ln := len(related.R.BillingAddressCheckouts)
		if ln > 1 && i < ln-1 {
			related.R.BillingAddressCheckouts[i] = related.R.BillingAddressCheckouts[ln-1]
		}
		related.R.BillingAddressCheckouts = related.R.BillingAddressCheckouts[:ln-1]
		break
	}
	return nil
}

// SetChannel of the checkout to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.Checkouts.
func (o *Checkout) SetChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &checkoutR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			Checkouts: CheckoutSlice{o},
		}
	} else {
		related.R.Checkouts = append(related.R.Checkouts, o)
	}

	return nil
}

// SetShippingMethod of the checkout to the related item.
// Sets o.R.ShippingMethod to related.
// Adds o to related.R.Checkouts.
func (o *Checkout) SetShippingMethod(exec boil.Executor, insert bool, related *ShippingMethod) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_method_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ShippingMethodID, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			ShippingMethod: related,
		}
	} else {
		o.R.ShippingMethod = related
	}

	if related.R == nil {
		related.R = &shippingMethodR{
			Checkouts: CheckoutSlice{o},
		}
	} else {
		related.R.Checkouts = append(related.R.Checkouts, o)
	}

	return nil
}

// RemoveShippingMethod relationship.
// Sets o.R.ShippingMethod to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Checkout) RemoveShippingMethod(exec boil.Executor, related *ShippingMethod) error {
	var err error

	queries.SetScanner(&o.ShippingMethodID, nil)
	if _, err = o.Update(exec, boil.Whitelist("shipping_method_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ShippingMethod = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Checkouts {
		if queries.Equal(o.ShippingMethodID, ri.ShippingMethodID) {
			continue
		}

		ln := len(related.R.Checkouts)
		if ln > 1 && i < ln-1 {
			related.R.Checkouts[i] = related.R.Checkouts[ln-1]
		}
		related.R.Checkouts = related.R.Checkouts[:ln-1]
		break
	}
	return nil
}

// SetUser of the checkout to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Checkouts.
func (o *Checkout) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Checkouts: CheckoutSlice{o},
		}
	} else {
		related.R.Checkouts = append(related.R.Checkouts, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Checkout) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Checkouts {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.Checkouts)
		if ln > 1 && i < ln-1 {
			related.R.Checkouts[i] = related.R.Checkouts[ln-1]
		}
		related.R.Checkouts = related.R.Checkouts[:ln-1]
		break
	}
	return nil
}

// SetCollectionPoint of the checkout to the related item.
// Sets o.R.CollectionPoint to related.
// Adds o to related.R.CollectionPointCheckouts.
func (o *Checkout) SetCollectionPoint(exec boil.Executor, insert bool, related *Warehouse) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_point_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CollectionPointID, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			CollectionPoint: related,
		}
	} else {
		o.R.CollectionPoint = related
	}

	if related.R == nil {
		related.R = &warehouseR{
			CollectionPointCheckouts: CheckoutSlice{o},
		}
	} else {
		related.R.CollectionPointCheckouts = append(related.R.CollectionPointCheckouts, o)
	}

	return nil
}

// RemoveCollectionPoint relationship.
// Sets o.R.CollectionPoint to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Checkout) RemoveCollectionPoint(exec boil.Executor, related *Warehouse) error {
	var err error

	queries.SetScanner(&o.CollectionPointID, nil)
	if _, err = o.Update(exec, boil.Whitelist("collection_point_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CollectionPoint = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CollectionPointCheckouts {
		if queries.Equal(o.CollectionPointID, ri.CollectionPointID) {
			continue
		}

		ln := len(related.R.CollectionPointCheckouts)
		if ln > 1 && i < ln-1 {
			related.R.CollectionPointCheckouts[i] = related.R.CollectionPointCheckouts[ln-1]
		}
		related.R.CollectionPointCheckouts = related.R.CollectionPointCheckouts[:ln-1]
		break
	}
	return nil
}

// AddCheckoutLines adds the given related objects to the existing relationships
// of the checkout, optionally inserting them as new records.
// Appends related to o.R.CheckoutLines.
// Sets related.R.Checkout appropriately.
func (o *Checkout) AddCheckoutLines(exec boil.Executor, insert bool, related ...*CheckoutLine) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CheckoutID = o.Token
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkout_lines\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"checkout_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutLinePrimaryKeyColumns),
			)
			values := []interface{}{o.Token, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CheckoutID = o.Token
		}
	}

	if o.R == nil {
		o.R = &checkoutR{
			CheckoutLines: related,
		}
	} else {
		o.R.CheckoutLines = append(o.R.CheckoutLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutLineR{
				Checkout: o,
			}
		} else {
			rel.R.Checkout = o
		}
	}
	return nil
}

// AddGiftcardCheckouts adds the given related objects to the existing relationships
// of the checkout, optionally inserting them as new records.
// Appends related to o.R.GiftcardCheckouts.
// Sets related.R.Checkout appropriately.
func (o *Checkout) AddGiftcardCheckouts(exec boil.Executor, insert bool, related ...*GiftcardCheckout) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CheckoutID = o.Token
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"giftcard_checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"checkout_id"}),
				strmangle.WhereClause("\"", "\"", 2, giftcardCheckoutPrimaryKeyColumns),
			)
			values := []interface{}{o.Token, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CheckoutID = o.Token
		}
	}

	if o.R == nil {
		o.R = &checkoutR{
			GiftcardCheckouts: related,
		}
	} else {
		o.R.GiftcardCheckouts = append(o.R.GiftcardCheckouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &giftcardCheckoutR{
				Checkout: o,
			}
		} else {
			rel.R.Checkout = o
		}
	}
	return nil
}

// AddPayments adds the given related objects to the existing relationships
// of the checkout, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Checkout appropriately.
func (o *Checkout) AddPayments(exec boil.Executor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CheckoutID, o.Token)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"checkout_id"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.Token, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CheckoutID, o.Token)
		}
	}

	if o.R == nil {
		o.R = &checkoutR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Checkout: o,
			}
		} else {
			rel.R.Checkout = o
		}
	}
	return nil
}

// SetPayments removes all previously related items of the
// checkout replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Checkout's Payments accordingly.
// Replaces o.R.Payments with related.
// Sets related.R.Checkout's Payments accordingly.
func (o *Checkout) SetPayments(exec boil.Executor, insert bool, related ...*Payment) error {
	query := "update \"payments\" set \"checkout_id\" = null where \"checkout_id\" = $1"
	values := []interface{}{o.Token}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Payments {
			queries.SetScanner(&rel.CheckoutID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Checkout = nil
		}
		o.R.Payments = nil
	}

	return o.AddPayments(exec, insert, related...)
}

// RemovePayments relationships from objects passed in.
// Removes related items from R.Payments (uses pointer comparison, removal does not keep order)
// Sets related.R.Checkout.
func (o *Checkout) RemovePayments(exec boil.Executor, related ...*Payment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CheckoutID, nil)
		if rel.R != nil {
			rel.R.Checkout = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("checkout_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Payments {
			if rel != ri {
				continue
			}

			ln := len(o.R.Payments)
			if ln > 1 && i < ln-1 {
				o.R.Payments[i] = o.R.Payments[ln-1]
			}
			o.R.Payments = o.R.Payments[:ln-1]
			break
		}
	}

	return nil
}

// Checkouts retrieves all the records using an executor.
func Checkouts(mods ...qm.QueryMod) checkoutQuery {
	mods = append(mods, qm.From("\"checkouts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"checkouts\".*"})
	}

	return checkoutQuery{q}
}

// FindCheckout retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCheckout(exec boil.Executor, token string, selectCols ...string) (*Checkout, error) {
	checkoutObj := &Checkout{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"checkouts\" where \"token\"=$1", sel,
	)

	q := queries.Raw(query, token)

	err := q.Bind(nil, exec, checkoutObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from checkouts")
	}

	return checkoutObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Checkout) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no checkouts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(checkoutColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checkoutInsertCacheMut.RLock()
	cache, cached := checkoutInsertCache[key]
	checkoutInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checkoutAllColumns,
			checkoutColumnsWithDefault,
			checkoutColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checkoutType, checkoutMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"checkouts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"checkouts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into checkouts")
	}

	if !cached {
		checkoutInsertCacheMut.Lock()
		checkoutInsertCache[key] = cache
		checkoutInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Checkout.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Checkout) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	checkoutUpdateCacheMut.RLock()
	cache, cached := checkoutUpdateCache[key]
	checkoutUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checkoutAllColumns,
			checkoutPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update checkouts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"checkouts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, checkoutPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, append(wl, checkoutPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update checkouts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for checkouts")
	}

	if !cached {
		checkoutUpdateCacheMut.Lock()
		checkoutUpdateCache[key] = cache
		checkoutUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q checkoutQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for checkouts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CheckoutSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, checkoutPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in checkout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all checkout")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Checkout) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no checkouts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checkoutUpsertCacheMut.RLock()
	cache, cached := checkoutUpsertCache[key]
	checkoutUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			checkoutAllColumns,
			checkoutColumnsWithDefault,
			checkoutColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			checkoutAllColumns,
			checkoutPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert checkouts, could not build update column list")
		}

		ret := strmangle.SetComplement(checkoutAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(checkoutPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert checkouts, could not build conflict column list")
			}

			conflict = make([]string, len(checkoutPrimaryKeyColumns))
			copy(conflict, checkoutPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"checkouts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checkoutType, checkoutMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert checkouts")
	}

	if !cached {
		checkoutUpsertCacheMut.Lock()
		checkoutUpsertCache[key] = cache
		checkoutUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Checkout record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Checkout) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Checkout provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checkoutPrimaryKeyMapping)
	sql := "DELETE FROM \"checkouts\" WHERE \"token\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for checkouts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q checkoutQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no checkoutQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for checkouts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CheckoutSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from checkout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for checkouts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Checkout) Reload(exec boil.Executor) error {
	ret, err := FindCheckout(exec, o.Token)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckoutSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CheckoutSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"checkouts\".* FROM \"checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in CheckoutSlice")
	}

	*o = slice

	return nil
}

// CheckoutExists checks if the Checkout row exists.
func CheckoutExists(exec boil.Executor, token string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"checkouts\" where \"token\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, token)
	}
	row := exec.QueryRow(sql, token)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if checkouts exists")
	}

	return exists, nil
}

// Exists checks if the Checkout row exists.
func (o *Checkout) Exists(exec boil.Executor) (bool, error) {
	return CheckoutExists(exec, o.Token)
}
