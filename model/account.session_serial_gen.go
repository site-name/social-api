package model

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Session) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			err = z.Id.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Token":
			z.Token, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Token")
				return
			}
		case "CreateAt":
			z.CreateAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CreateAt")
				return
			}
		case "ExpiresAt":
			z.ExpiresAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ExpiresAt")
				return
			}
		case "LastActivityAt":
			z.LastActivityAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "LastActivityAt")
				return
			}
		case "UserId":
			err = z.UserId.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "UserId")
				return
			}
		case "DeviceId":
			z.DeviceId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DeviceId")
				return
			}
		case "Roles":
			z.Roles, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Roles")
				return
			}
		case "IsOAuth":
			z.IsOAuth, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsOAuth")
				return
			}
		case "ExpiredNotify":
			z.ExpiredNotify, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "ExpiredNotify")
				return
			}
		case "Props":
			err = z.Props.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Props")
				return
			}
		case "Local":
			z.Local, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Local")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Session) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 12
	// write "Id"
	err = en.Append(0x8c, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = z.Id.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Token"
	err = en.Append(0xa5, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Token)
	if err != nil {
		err = msgp.WrapError(err, "Token")
		return
	}
	// write "CreateAt"
	err = en.Append(0xa8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CreateAt)
	if err != nil {
		err = msgp.WrapError(err, "CreateAt")
		return
	}
	// write "ExpiresAt"
	err = en.Append(0xa9, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ExpiresAt)
	if err != nil {
		err = msgp.WrapError(err, "ExpiresAt")
		return
	}
	// write "LastActivityAt"
	err = en.Append(0xae, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.LastActivityAt)
	if err != nil {
		err = msgp.WrapError(err, "LastActivityAt")
		return
	}
	// write "UserId"
	err = en.Append(0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64)
	if err != nil {
		return
	}
	err = z.UserId.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "UserId")
		return
	}
	// write "DeviceId"
	err = en.Append(0xa8, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.DeviceId)
	if err != nil {
		err = msgp.WrapError(err, "DeviceId")
		return
	}
	// write "Roles"
	err = en.Append(0xa5, 0x52, 0x6f, 0x6c, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Roles)
	if err != nil {
		err = msgp.WrapError(err, "Roles")
		return
	}
	// write "IsOAuth"
	err = en.Append(0xa7, 0x49, 0x73, 0x4f, 0x41, 0x75, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsOAuth)
	if err != nil {
		err = msgp.WrapError(err, "IsOAuth")
		return
	}
	// write "ExpiredNotify"
	err = en.Append(0xad, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.ExpiredNotify)
	if err != nil {
		err = msgp.WrapError(err, "ExpiredNotify")
		return
	}
	// write "Props"
	err = en.Append(0xa5, 0x50, 0x72, 0x6f, 0x70, 0x73)
	if err != nil {
		return
	}
	err = z.Props.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Props")
		return
	}
	// write "Local"
	err = en.Append(0xa5, 0x4c, 0x6f, 0x63, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Local)
	if err != nil {
		err = msgp.WrapError(err, "Local")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Session) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 12
	// string "Id"
	o = append(o, 0x8c, 0xa2, 0x49, 0x64)
	o, err = z.Id.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// string "Token"
	o = append(o, 0xa5, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	o = msgp.AppendString(o, z.Token)
	// string "CreateAt"
	o = append(o, 0xa8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.CreateAt)
	// string "ExpiresAt"
	o = append(o, 0xa9, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.ExpiresAt)
	// string "LastActivityAt"
	o = append(o, 0xae, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.LastActivityAt)
	// string "UserId"
	o = append(o, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64)
	o, err = z.UserId.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "UserId")
		return
	}
	// string "DeviceId"
	o = append(o, 0xa8, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.DeviceId)
	// string "Roles"
	o = append(o, 0xa5, 0x52, 0x6f, 0x6c, 0x65, 0x73)
	o = msgp.AppendString(o, z.Roles)
	// string "IsOAuth"
	o = append(o, 0xa7, 0x49, 0x73, 0x4f, 0x41, 0x75, 0x74, 0x68)
	o = msgp.AppendBool(o, z.IsOAuth)
	// string "ExpiredNotify"
	o = append(o, 0xad, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79)
	o = msgp.AppendBool(o, z.ExpiredNotify)
	// string "Props"
	o = append(o, 0xa5, 0x50, 0x72, 0x6f, 0x70, 0x73)
	o, err = z.Props.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Props")
		return
	}
	// string "Local"
	o = append(o, 0xa5, 0x4c, 0x6f, 0x63, 0x61, 0x6c)
	o = msgp.AppendBool(o, z.Local)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Session) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			bts, err = z.Id.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Token":
			z.Token, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Token")
				return
			}
		case "CreateAt":
			z.CreateAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateAt")
				return
			}
		case "ExpiresAt":
			z.ExpiresAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpiresAt")
				return
			}
		case "LastActivityAt":
			z.LastActivityAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastActivityAt")
				return
			}
		case "UserId":
			bts, err = z.UserId.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserId")
				return
			}
		case "DeviceId":
			z.DeviceId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DeviceId")
				return
			}
		case "Roles":
			z.Roles, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Roles")
				return
			}
		case "IsOAuth":
			z.IsOAuth, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsOAuth")
				return
			}
		case "ExpiredNotify":
			z.ExpiredNotify, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpiredNotify")
				return
			}
		case "Props":
			bts, err = z.Props.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Props")
				return
			}
		case "Local":
			z.Local, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Local")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Session) Msgsize() (s int) {
	s = 1 + 3 + z.Id.Msgsize() + 6 + msgp.StringPrefixSize + len(z.Token) + 9 + msgp.Int64Size + 10 + msgp.Int64Size + 15 + msgp.Int64Size + 7 + z.UserId.Msgsize() + 9 + msgp.StringPrefixSize + len(z.DeviceId) + 6 + msgp.StringPrefixSize + len(z.Roles) + 8 + msgp.BoolSize + 14 + msgp.BoolSize + 6 + z.Props.Msgsize() + 6 + msgp.BoolSize
	return
}
