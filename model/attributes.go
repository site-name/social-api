// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Attribute is an object representing the database table.
type Attribute struct {
	ID                       string                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Slug                     string                  `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Name                     string                  `boil:"name" json:"name" toml:"name" yaml:"name"`
	Type                     AttributeType           `boil:"type" json:"type" toml:"type" yaml:"type"`
	InputType                AttributeInputType      `boil:"input_type" json:"input_type" toml:"input_type" yaml:"input_type"`
	EntityType               NullAttributeEntityType `boil:"entity_type" json:"entity_type,omitempty" toml:"entity_type" yaml:"entity_type,omitempty"`
	Unit                     model_types.NullString  `boil:"unit" json:"unit,omitempty" toml:"unit" yaml:"unit,omitempty"`
	ValueRequired            bool                    `boil:"value_required" json:"value_required" toml:"value_required" yaml:"value_required"`
	IsVariantOnly            bool                    `boil:"is_variant_only" json:"is_variant_only" toml:"is_variant_only" yaml:"is_variant_only"`
	VisibleInStorefront      bool                    `boil:"visible_in_storefront" json:"visible_in_storefront" toml:"visible_in_storefront" yaml:"visible_in_storefront"`
	FilterableInStorefront   bool                    `boil:"filterable_in_storefront" json:"filterable_in_storefront" toml:"filterable_in_storefront" yaml:"filterable_in_storefront"`
	FilterableInDashboard    bool                    `boil:"filterable_in_dashboard" json:"filterable_in_dashboard" toml:"filterable_in_dashboard" yaml:"filterable_in_dashboard"`
	StorefrontSearchPosition int                     `boil:"storefront_search_position" json:"storefront_search_position" toml:"storefront_search_position" yaml:"storefront_search_position"`
	AvailableInGrid          bool                    `boil:"available_in_grid" json:"available_in_grid" toml:"available_in_grid" yaml:"available_in_grid"`
	Metadata                 model_types.JSONString  `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata          model_types.JSONString  `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *attributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributeColumns = struct {
	ID                       string
	Slug                     string
	Name                     string
	Type                     string
	InputType                string
	EntityType               string
	Unit                     string
	ValueRequired            string
	IsVariantOnly            string
	VisibleInStorefront      string
	FilterableInStorefront   string
	FilterableInDashboard    string
	StorefrontSearchPosition string
	AvailableInGrid          string
	Metadata                 string
	PrivateMetadata          string
}{
	ID:                       "id",
	Slug:                     "slug",
	Name:                     "name",
	Type:                     "type",
	InputType:                "input_type",
	EntityType:               "entity_type",
	Unit:                     "unit",
	ValueRequired:            "value_required",
	IsVariantOnly:            "is_variant_only",
	VisibleInStorefront:      "visible_in_storefront",
	FilterableInStorefront:   "filterable_in_storefront",
	FilterableInDashboard:    "filterable_in_dashboard",
	StorefrontSearchPosition: "storefront_search_position",
	AvailableInGrid:          "available_in_grid",
	Metadata:                 "metadata",
	PrivateMetadata:          "private_metadata",
}

var AttributeTableColumns = struct {
	ID                       string
	Slug                     string
	Name                     string
	Type                     string
	InputType                string
	EntityType               string
	Unit                     string
	ValueRequired            string
	IsVariantOnly            string
	VisibleInStorefront      string
	FilterableInStorefront   string
	FilterableInDashboard    string
	StorefrontSearchPosition string
	AvailableInGrid          string
	Metadata                 string
	PrivateMetadata          string
}{
	ID:                       "attributes.id",
	Slug:                     "attributes.slug",
	Name:                     "attributes.name",
	Type:                     "attributes.type",
	InputType:                "attributes.input_type",
	EntityType:               "attributes.entity_type",
	Unit:                     "attributes.unit",
	ValueRequired:            "attributes.value_required",
	IsVariantOnly:            "attributes.is_variant_only",
	VisibleInStorefront:      "attributes.visible_in_storefront",
	FilterableInStorefront:   "attributes.filterable_in_storefront",
	FilterableInDashboard:    "attributes.filterable_in_dashboard",
	StorefrontSearchPosition: "attributes.storefront_search_position",
	AvailableInGrid:          "attributes.available_in_grid",
	Metadata:                 "attributes.metadata",
	PrivateMetadata:          "attributes.private_metadata",
}

// Generated where

type whereHelperAttributeType struct{ field string }

func (w whereHelperAttributeType) EQ(x AttributeType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperAttributeType) NEQ(x AttributeType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperAttributeType) LT(x AttributeType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperAttributeType) LTE(x AttributeType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperAttributeType) GT(x AttributeType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperAttributeType) GTE(x AttributeType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperAttributeType) IN(slice []AttributeType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperAttributeType) NIN(slice []AttributeType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperAttributeInputType struct{ field string }

func (w whereHelperAttributeInputType) EQ(x AttributeInputType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperAttributeInputType) NEQ(x AttributeInputType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperAttributeInputType) LT(x AttributeInputType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperAttributeInputType) LTE(x AttributeInputType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperAttributeInputType) GT(x AttributeInputType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperAttributeInputType) GTE(x AttributeInputType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperAttributeInputType) IN(slice []AttributeInputType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperAttributeInputType) NIN(slice []AttributeInputType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperNullAttributeEntityType struct{ field string }

func (w whereHelperNullAttributeEntityType) EQ(x NullAttributeEntityType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullAttributeEntityType) NEQ(x NullAttributeEntityType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullAttributeEntityType) LT(x NullAttributeEntityType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullAttributeEntityType) LTE(x NullAttributeEntityType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullAttributeEntityType) GT(x NullAttributeEntityType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullAttributeEntityType) GTE(x NullAttributeEntityType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullAttributeEntityType) IN(slice []NullAttributeEntityType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullAttributeEntityType) NIN(slice []NullAttributeEntityType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullAttributeEntityType) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelperNullAttributeEntityType) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpermodel_types_JSONString struct{ field string }

func (w whereHelpermodel_types_JSONString) EQ(x model_types.JSONString) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpermodel_types_JSONString) NEQ(x model_types.JSONString) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpermodel_types_JSONString) LT(x model_types.JSONString) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpermodel_types_JSONString) LTE(x model_types.JSONString) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpermodel_types_JSONString) GT(x model_types.JSONString) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpermodel_types_JSONString) GTE(x model_types.JSONString) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpermodel_types_JSONString) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpermodel_types_JSONString) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var AttributeWhere = struct {
	ID                       whereHelperstring
	Slug                     whereHelperstring
	Name                     whereHelperstring
	Type                     whereHelperAttributeType
	InputType                whereHelperAttributeInputType
	EntityType               whereHelperNullAttributeEntityType
	Unit                     whereHelpermodel_types_NullString
	ValueRequired            whereHelperbool
	IsVariantOnly            whereHelperbool
	VisibleInStorefront      whereHelperbool
	FilterableInStorefront   whereHelperbool
	FilterableInDashboard    whereHelperbool
	StorefrontSearchPosition whereHelperint
	AvailableInGrid          whereHelperbool
	Metadata                 whereHelpermodel_types_JSONString
	PrivateMetadata          whereHelpermodel_types_JSONString
}{
	ID:                       whereHelperstring{field: "\"attributes\".\"id\""},
	Slug:                     whereHelperstring{field: "\"attributes\".\"slug\""},
	Name:                     whereHelperstring{field: "\"attributes\".\"name\""},
	Type:                     whereHelperAttributeType{field: "\"attributes\".\"type\""},
	InputType:                whereHelperAttributeInputType{field: "\"attributes\".\"input_type\""},
	EntityType:               whereHelperNullAttributeEntityType{field: "\"attributes\".\"entity_type\""},
	Unit:                     whereHelpermodel_types_NullString{field: "\"attributes\".\"unit\""},
	ValueRequired:            whereHelperbool{field: "\"attributes\".\"value_required\""},
	IsVariantOnly:            whereHelperbool{field: "\"attributes\".\"is_variant_only\""},
	VisibleInStorefront:      whereHelperbool{field: "\"attributes\".\"visible_in_storefront\""},
	FilterableInStorefront:   whereHelperbool{field: "\"attributes\".\"filterable_in_storefront\""},
	FilterableInDashboard:    whereHelperbool{field: "\"attributes\".\"filterable_in_dashboard\""},
	StorefrontSearchPosition: whereHelperint{field: "\"attributes\".\"storefront_search_position\""},
	AvailableInGrid:          whereHelperbool{field: "\"attributes\".\"available_in_grid\""},
	Metadata:                 whereHelpermodel_types_JSONString{field: "\"attributes\".\"metadata\""},
	PrivateMetadata:          whereHelpermodel_types_JSONString{field: "\"attributes\".\"private_metadata\""},
}

// AttributeRels is where relationship names are stored.
var AttributeRels = struct {
	AttributeValues    string
	CategoryAttributes string
}{
	AttributeValues:    "AttributeValues",
	CategoryAttributes: "CategoryAttributes",
}

// attributeR is where relationships are stored.
type attributeR struct {
	AttributeValues    AttributeValueSlice    `boil:"AttributeValues" json:"AttributeValues" toml:"AttributeValues" yaml:"AttributeValues"`
	CategoryAttributes CategoryAttributeSlice `boil:"CategoryAttributes" json:"CategoryAttributes" toml:"CategoryAttributes" yaml:"CategoryAttributes"`
}

// NewStruct creates a new relationship struct
func (*attributeR) NewStruct() *attributeR {
	return &attributeR{}
}

func (r *attributeR) GetAttributeValues() AttributeValueSlice {
	if r == nil {
		return nil
	}
	return r.AttributeValues
}

func (r *attributeR) GetCategoryAttributes() CategoryAttributeSlice {
	if r == nil {
		return nil
	}
	return r.CategoryAttributes
}

// attributeL is where Load methods for each relationship are stored.
type attributeL struct{}

var (
	attributeAllColumns            = []string{"id", "slug", "name", "type", "input_type", "entity_type", "unit", "value_required", "is_variant_only", "visible_in_storefront", "filterable_in_storefront", "filterable_in_dashboard", "storefront_search_position", "available_in_grid", "metadata", "private_metadata"}
	attributeColumnsWithoutDefault = []string{"id", "slug", "name", "type", "input_type", "value_required", "is_variant_only", "visible_in_storefront", "filterable_in_storefront", "filterable_in_dashboard", "storefront_search_position", "available_in_grid"}
	attributeColumnsWithDefault    = []string{"entity_type", "unit", "metadata", "private_metadata"}
	attributePrimaryKeyColumns     = []string{"id"}
	attributeGeneratedColumns      = []string{}
)

type (
	// AttributeSlice is an alias for a slice of pointers to Attribute.
	// This should almost always be used instead of []Attribute.
	AttributeSlice []*Attribute

	attributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributeType                 = reflect.TypeOf(&Attribute{})
	attributeMapping              = queries.MakeStructMapping(attributeType)
	attributePrimaryKeyMapping, _ = queries.BindMapping(attributeType, attributeMapping, attributePrimaryKeyColumns)
	attributeInsertCacheMut       sync.RWMutex
	attributeInsertCache          = make(map[string]insertCache)
	attributeUpdateCacheMut       sync.RWMutex
	attributeUpdateCache          = make(map[string]updateCache)
	attributeUpsertCacheMut       sync.RWMutex
	attributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single attribute record from the query.
func (q attributeQuery) One(exec boil.Executor) (*Attribute, error) {
	o := &Attribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for attributes")
	}

	return o, nil
}

// All returns all Attribute records from the query.
func (q attributeQuery) All(exec boil.Executor) (AttributeSlice, error) {
	var o []*Attribute

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Attribute slice")
	}

	return o, nil
}

// Count returns the count of all Attribute records in the query.
func (q attributeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count attributes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attributeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if attributes exists")
	}

	return count > 0, nil
}

// AttributeValues retrieves all the attribute_value's AttributeValues with an executor.
func (o *Attribute) AttributeValues(mods ...qm.QueryMod) attributeValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"attribute_values\".\"attribute_id\"=?", o.ID),
	)

	return AttributeValues(queryMods...)
}

// CategoryAttributes retrieves all the category_attribute's CategoryAttributes with an executor.
func (o *Attribute) CategoryAttributes(mods ...qm.QueryMod) categoryAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"category_attributes\".\"attribute_id\"=?", o.ID),
	)

	return CategoryAttributes(queryMods...)
}

// LoadAttributeValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeL) LoadAttributeValues(e boil.Executor, singular bool, maybeAttribute interface{}, mods queries.Applicator) error {
	var slice []*Attribute
	var object *Attribute

	if singular {
		var ok bool
		object, ok = maybeAttribute.(*Attribute)
		if !ok {
			object = new(Attribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttribute))
			}
		}
	} else {
		s, ok := maybeAttribute.(*[]*Attribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttribute))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &attributeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`attribute_values`),
		qm.WhereIn(`attribute_values.attribute_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load attribute_values")
	}

	var resultSlice []*AttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice attribute_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_values")
	}

	if singular {
		object.R.AttributeValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &attributeValueR{}
			}
			foreign.R.Attribute = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AttributeID {
				local.R.AttributeValues = append(local.R.AttributeValues, foreign)
				if foreign.R == nil {
					foreign.R = &attributeValueR{}
				}
				foreign.R.Attribute = local
				break
			}
		}
	}

	return nil
}

// LoadCategoryAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeL) LoadCategoryAttributes(e boil.Executor, singular bool, maybeAttribute interface{}, mods queries.Applicator) error {
	var slice []*Attribute
	var object *Attribute

	if singular {
		var ok bool
		object, ok = maybeAttribute.(*Attribute)
		if !ok {
			object = new(Attribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttribute))
			}
		}
	} else {
		s, ok := maybeAttribute.(*[]*Attribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttribute))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &attributeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`category_attributes`),
		qm.WhereIn(`category_attributes.attribute_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load category_attributes")
	}

	var resultSlice []*CategoryAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice category_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on category_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for category_attributes")
	}

	if singular {
		object.R.CategoryAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoryAttributeR{}
			}
			foreign.R.Attribute = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AttributeID {
				local.R.CategoryAttributes = append(local.R.CategoryAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &categoryAttributeR{}
				}
				foreign.R.Attribute = local
				break
			}
		}
	}

	return nil
}

// AddAttributeValues adds the given related objects to the existing relationships
// of the attribute, optionally inserting them as new records.
// Appends related to o.R.AttributeValues.
// Sets related.R.Attribute appropriately.
func (o *Attribute) AddAttributeValues(exec boil.Executor, insert bool, related ...*AttributeValue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AttributeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"attribute_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"attribute_id"}),
				strmangle.WhereClause("\"", "\"", 2, attributeValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AttributeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &attributeR{
			AttributeValues: related,
		}
	} else {
		o.R.AttributeValues = append(o.R.AttributeValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &attributeValueR{
				Attribute: o,
			}
		} else {
			rel.R.Attribute = o
		}
	}
	return nil
}

// AddCategoryAttributes adds the given related objects to the existing relationships
// of the attribute, optionally inserting them as new records.
// Appends related to o.R.CategoryAttributes.
// Sets related.R.Attribute appropriately.
func (o *Attribute) AddCategoryAttributes(exec boil.Executor, insert bool, related ...*CategoryAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AttributeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"category_attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"attribute_id"}),
				strmangle.WhereClause("\"", "\"", 2, categoryAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AttributeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &attributeR{
			CategoryAttributes: related,
		}
	} else {
		o.R.CategoryAttributes = append(o.R.CategoryAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoryAttributeR{
				Attribute: o,
			}
		} else {
			rel.R.Attribute = o
		}
	}
	return nil
}

// Attributes retrieves all the records using an executor.
func Attributes(mods ...qm.QueryMod) attributeQuery {
	mods = append(mods, qm.From("\"attributes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"attributes\".*"})
	}

	return attributeQuery{q}
}

// FindAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttribute(exec boil.Executor, iD string, selectCols ...string) (*Attribute, error) {
	attributeObj := &Attribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attributes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, attributeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from attributes")
	}

	return attributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Attribute) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no attributes provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(attributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributeInsertCacheMut.RLock()
	cache, cached := attributeInsertCache[key]
	attributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributeAllColumns,
			attributeColumnsWithDefault,
			attributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributeType, attributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributeType, attributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attributes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attributes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into attributes")
	}

	if !cached {
		attributeInsertCacheMut.Lock()
		attributeInsertCache[key] = cache
		attributeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Attribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Attribute) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	attributeUpdateCacheMut.RLock()
	cache, cached := attributeUpdateCache[key]
	attributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributeAllColumns,
			attributePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attributes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributeType, attributeMapping, append(wl, attributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for attributes")
	}

	if !cached {
		attributeUpdateCacheMut.Lock()
		attributeUpdateCache[key] = cache
		attributeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q attributeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for attributes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in attribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all attribute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Attribute) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no attributes provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributeUpsertCacheMut.RLock()
	cache, cached := attributeUpsertCache[key]
	attributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			attributeAllColumns,
			attributeColumnsWithDefault,
			attributeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			attributeAllColumns,
			attributePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert attributes, could not build update column list")
		}

		ret := strmangle.SetComplement(attributeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(attributePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert attributes, could not build conflict column list")
			}

			conflict = make([]string, len(attributePrimaryKeyColumns))
			copy(conflict, attributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"attributes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(attributeType, attributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributeType, attributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert attributes")
	}

	if !cached {
		attributeUpsertCacheMut.Lock()
		attributeUpsertCache[key] = cache
		attributeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Attribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Attribute) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Attribute provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributePrimaryKeyMapping)
	sql := "DELETE FROM \"attributes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attributeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no attributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from attribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for attributes")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Attribute) Reload(exec boil.Executor) error {
	ret, err := FindAttribute(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attributes\".* FROM \"attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in AttributeSlice")
	}

	*o = slice

	return nil
}

// AttributeExists checks if the Attribute row exists.
func AttributeExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attributes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if attributes exists")
	}

	return exists, nil
}

// Exists checks if the Attribute row exists.
func (o *Attribute) Exists(exec boil.Executor) (bool, error) {
	return AttributeExists(exec, o.ID)
}
