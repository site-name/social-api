// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderLineDiscount is an object representing the database table.
type OrderLineDiscount struct {
	ID              string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderLineID     model_types.NullString `boil:"order_line_id" json:"order_line_id,omitempty" toml:"order_line_id" yaml:"order_line_id,omitempty"`
	Type            OrderDiscountType      `boil:"type" json:"type" toml:"type" yaml:"type"`
	ValueType       DiscountValueType      `boil:"value_type" json:"value_type" toml:"value_type" yaml:"value_type"`
	Value           decimal.Decimal        `boil:"value" json:"value" toml:"value" yaml:"value"`
	AmountValue     decimal.Decimal        `boil:"amount_value" json:"amount_value" toml:"amount_value" yaml:"amount_value"`
	Currency        Currency               `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Name            model_types.NullString `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	TranslatedName  model_types.NullString `boil:"translated_name" json:"translated_name,omitempty" toml:"translated_name" yaml:"translated_name,omitempty"`
	Reason          model_types.NullString `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	PromotionRuleID model_types.NullString `boil:"promotion_rule_id" json:"promotion_rule_id,omitempty" toml:"promotion_rule_id" yaml:"promotion_rule_id,omitempty"`
	VoucherID       model_types.NullString `boil:"voucher_id" json:"voucher_id,omitempty" toml:"voucher_id" yaml:"voucher_id,omitempty"`
	VoucherCode     model_types.NullString `boil:"voucher_code" json:"voucher_code,omitempty" toml:"voucher_code" yaml:"voucher_code,omitempty"`
	CreatedAt       int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UniqueType      NullDiscountType       `boil:"unique_type" json:"unique_type,omitempty" toml:"unique_type" yaml:"unique_type,omitempty"`

	R *orderLineDiscountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderLineDiscountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderLineDiscountColumns = struct {
	ID              string
	OrderLineID     string
	Type            string
	ValueType       string
	Value           string
	AmountValue     string
	Currency        string
	Name            string
	TranslatedName  string
	Reason          string
	PromotionRuleID string
	VoucherID       string
	VoucherCode     string
	CreatedAt       string
	UniqueType      string
}{
	ID:              "id",
	OrderLineID:     "order_line_id",
	Type:            "type",
	ValueType:       "value_type",
	Value:           "value",
	AmountValue:     "amount_value",
	Currency:        "currency",
	Name:            "name",
	TranslatedName:  "translated_name",
	Reason:          "reason",
	PromotionRuleID: "promotion_rule_id",
	VoucherID:       "voucher_id",
	VoucherCode:     "voucher_code",
	CreatedAt:       "created_at",
	UniqueType:      "unique_type",
}

var OrderLineDiscountTableColumns = struct {
	ID              string
	OrderLineID     string
	Type            string
	ValueType       string
	Value           string
	AmountValue     string
	Currency        string
	Name            string
	TranslatedName  string
	Reason          string
	PromotionRuleID string
	VoucherID       string
	VoucherCode     string
	CreatedAt       string
	UniqueType      string
}{
	ID:              "order_line_discounts.id",
	OrderLineID:     "order_line_discounts.order_line_id",
	Type:            "order_line_discounts.type",
	ValueType:       "order_line_discounts.value_type",
	Value:           "order_line_discounts.value",
	AmountValue:     "order_line_discounts.amount_value",
	Currency:        "order_line_discounts.currency",
	Name:            "order_line_discounts.name",
	TranslatedName:  "order_line_discounts.translated_name",
	Reason:          "order_line_discounts.reason",
	PromotionRuleID: "order_line_discounts.promotion_rule_id",
	VoucherID:       "order_line_discounts.voucher_id",
	VoucherCode:     "order_line_discounts.voucher_code",
	CreatedAt:       "order_line_discounts.created_at",
	UniqueType:      "order_line_discounts.unique_type",
}

// Generated where

var OrderLineDiscountWhere = struct {
	ID              whereHelperstring
	OrderLineID     whereHelpermodel_types_NullString
	Type            whereHelperOrderDiscountType
	ValueType       whereHelperDiscountValueType
	Value           whereHelperdecimal_Decimal
	AmountValue     whereHelperdecimal_Decimal
	Currency        whereHelperCurrency
	Name            whereHelpermodel_types_NullString
	TranslatedName  whereHelpermodel_types_NullString
	Reason          whereHelpermodel_types_NullString
	PromotionRuleID whereHelpermodel_types_NullString
	VoucherID       whereHelpermodel_types_NullString
	VoucherCode     whereHelpermodel_types_NullString
	CreatedAt       whereHelperint64
	UniqueType      whereHelperNullDiscountType
}{
	ID:              whereHelperstring{field: "\"order_line_discounts\".\"id\""},
	OrderLineID:     whereHelpermodel_types_NullString{field: "\"order_line_discounts\".\"order_line_id\""},
	Type:            whereHelperOrderDiscountType{field: "\"order_line_discounts\".\"type\""},
	ValueType:       whereHelperDiscountValueType{field: "\"order_line_discounts\".\"value_type\""},
	Value:           whereHelperdecimal_Decimal{field: "\"order_line_discounts\".\"value\""},
	AmountValue:     whereHelperdecimal_Decimal{field: "\"order_line_discounts\".\"amount_value\""},
	Currency:        whereHelperCurrency{field: "\"order_line_discounts\".\"currency\""},
	Name:            whereHelpermodel_types_NullString{field: "\"order_line_discounts\".\"name\""},
	TranslatedName:  whereHelpermodel_types_NullString{field: "\"order_line_discounts\".\"translated_name\""},
	Reason:          whereHelpermodel_types_NullString{field: "\"order_line_discounts\".\"reason\""},
	PromotionRuleID: whereHelpermodel_types_NullString{field: "\"order_line_discounts\".\"promotion_rule_id\""},
	VoucherID:       whereHelpermodel_types_NullString{field: "\"order_line_discounts\".\"voucher_id\""},
	VoucherCode:     whereHelpermodel_types_NullString{field: "\"order_line_discounts\".\"voucher_code\""},
	CreatedAt:       whereHelperint64{field: "\"order_line_discounts\".\"created_at\""},
	UniqueType:      whereHelperNullDiscountType{field: "\"order_line_discounts\".\"unique_type\""},
}

// OrderLineDiscountRels is where relationship names are stored.
var OrderLineDiscountRels = struct {
	OrderLine     string
	PromotionRule string
	Voucher       string
}{
	OrderLine:     "OrderLine",
	PromotionRule: "PromotionRule",
	Voucher:       "Voucher",
}

// orderLineDiscountR is where relationships are stored.
type orderLineDiscountR struct {
	OrderLine     *OrderLine     `boil:"OrderLine" json:"OrderLine" toml:"OrderLine" yaml:"OrderLine"`
	PromotionRule *PromotionRule `boil:"PromotionRule" json:"PromotionRule" toml:"PromotionRule" yaml:"PromotionRule"`
	Voucher       *Voucher       `boil:"Voucher" json:"Voucher" toml:"Voucher" yaml:"Voucher"`
}

// NewStruct creates a new relationship struct
func (*orderLineDiscountR) NewStruct() *orderLineDiscountR {
	return &orderLineDiscountR{}
}

func (r *orderLineDiscountR) GetOrderLine() *OrderLine {
	if r == nil {
		return nil
	}
	return r.OrderLine
}

func (r *orderLineDiscountR) GetPromotionRule() *PromotionRule {
	if r == nil {
		return nil
	}
	return r.PromotionRule
}

func (r *orderLineDiscountR) GetVoucher() *Voucher {
	if r == nil {
		return nil
	}
	return r.Voucher
}

// orderLineDiscountL is where Load methods for each relationship are stored.
type orderLineDiscountL struct{}

var (
	orderLineDiscountAllColumns            = []string{"id", "order_line_id", "type", "value_type", "value", "amount_value", "currency", "name", "translated_name", "reason", "promotion_rule_id", "voucher_id", "voucher_code", "created_at", "unique_type"}
	orderLineDiscountColumnsWithoutDefault = []string{"id", "type", "value_type", "currency", "created_at"}
	orderLineDiscountColumnsWithDefault    = []string{"order_line_id", "value", "amount_value", "name", "translated_name", "reason", "promotion_rule_id", "voucher_id", "voucher_code", "unique_type"}
	orderLineDiscountPrimaryKeyColumns     = []string{"id"}
	orderLineDiscountGeneratedColumns      = []string{}
)

type (
	// OrderLineDiscountSlice is an alias for a slice of pointers to OrderLineDiscount.
	// This should almost always be used instead of []OrderLineDiscount.
	OrderLineDiscountSlice []*OrderLineDiscount

	orderLineDiscountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderLineDiscountType                 = reflect.TypeOf(&OrderLineDiscount{})
	orderLineDiscountMapping              = queries.MakeStructMapping(orderLineDiscountType)
	orderLineDiscountPrimaryKeyMapping, _ = queries.BindMapping(orderLineDiscountType, orderLineDiscountMapping, orderLineDiscountPrimaryKeyColumns)
	orderLineDiscountInsertCacheMut       sync.RWMutex
	orderLineDiscountInsertCache          = make(map[string]insertCache)
	orderLineDiscountUpdateCacheMut       sync.RWMutex
	orderLineDiscountUpdateCache          = make(map[string]updateCache)
	orderLineDiscountUpsertCacheMut       sync.RWMutex
	orderLineDiscountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single orderLineDiscount record from the query.
func (q orderLineDiscountQuery) One(exec boil.Executor) (*OrderLineDiscount, error) {
	o := &OrderLineDiscount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for order_line_discounts")
	}

	return o, nil
}

// All returns all OrderLineDiscount records from the query.
func (q orderLineDiscountQuery) All(exec boil.Executor) (OrderLineDiscountSlice, error) {
	var o []*OrderLineDiscount

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to OrderLineDiscount slice")
	}

	return o, nil
}

// Count returns the count of all OrderLineDiscount records in the query.
func (q orderLineDiscountQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count order_line_discounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderLineDiscountQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if order_line_discounts exists")
	}

	return count > 0, nil
}

// OrderLine pointed to by the foreign key.
func (o *OrderLineDiscount) OrderLine(mods ...qm.QueryMod) orderLineQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderLineID),
	}

	queryMods = append(queryMods, mods...)

	return OrderLines(queryMods...)
}

// PromotionRule pointed to by the foreign key.
func (o *OrderLineDiscount) PromotionRule(mods ...qm.QueryMod) promotionRuleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PromotionRuleID),
	}

	queryMods = append(queryMods, mods...)

	return PromotionRules(queryMods...)
}

// Voucher pointed to by the foreign key.
func (o *OrderLineDiscount) Voucher(mods ...qm.QueryMod) voucherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VoucherID),
	}

	queryMods = append(queryMods, mods...)

	return Vouchers(queryMods...)
}

// LoadOrderLine allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderLineDiscountL) LoadOrderLine(e boil.Executor, singular bool, maybeOrderLineDiscount interface{}, mods queries.Applicator) error {
	var slice []*OrderLineDiscount
	var object *OrderLineDiscount

	if singular {
		var ok bool
		object, ok = maybeOrderLineDiscount.(*OrderLineDiscount)
		if !ok {
			object = new(OrderLineDiscount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderLineDiscount))
			}
		}
	} else {
		s, ok := maybeOrderLineDiscount.(*[]*OrderLineDiscount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderLineDiscount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderLineDiscountR{}
		}
		if !queries.IsNil(object.OrderLineID) {
			args[object.OrderLineID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineDiscountR{}
			}

			if !queries.IsNil(obj.OrderLineID) {
				args[obj.OrderLineID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_lines`),
		qm.WhereIn(`order_lines.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderLine")
	}

	var resultSlice []*OrderLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderLine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_lines")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderLine = foreign
		if foreign.R == nil {
			foreign.R = &orderLineR{}
		}
		foreign.R.OrderLineDiscounts = append(foreign.R.OrderLineDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderLineID, foreign.ID) {
				local.R.OrderLine = foreign
				if foreign.R == nil {
					foreign.R = &orderLineR{}
				}
				foreign.R.OrderLineDiscounts = append(foreign.R.OrderLineDiscounts, local)
				break
			}
		}
	}

	return nil
}

// LoadPromotionRule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderLineDiscountL) LoadPromotionRule(e boil.Executor, singular bool, maybeOrderLineDiscount interface{}, mods queries.Applicator) error {
	var slice []*OrderLineDiscount
	var object *OrderLineDiscount

	if singular {
		var ok bool
		object, ok = maybeOrderLineDiscount.(*OrderLineDiscount)
		if !ok {
			object = new(OrderLineDiscount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderLineDiscount))
			}
		}
	} else {
		s, ok := maybeOrderLineDiscount.(*[]*OrderLineDiscount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderLineDiscount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderLineDiscountR{}
		}
		if !queries.IsNil(object.PromotionRuleID) {
			args[object.PromotionRuleID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineDiscountR{}
			}

			if !queries.IsNil(obj.PromotionRuleID) {
				args[obj.PromotionRuleID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`promotion_rules`),
		qm.WhereIn(`promotion_rules.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PromotionRule")
	}

	var resultSlice []*PromotionRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PromotionRule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for promotion_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for promotion_rules")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PromotionRule = foreign
		if foreign.R == nil {
			foreign.R = &promotionRuleR{}
		}
		foreign.R.OrderLineDiscounts = append(foreign.R.OrderLineDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PromotionRuleID, foreign.ID) {
				local.R.PromotionRule = foreign
				if foreign.R == nil {
					foreign.R = &promotionRuleR{}
				}
				foreign.R.OrderLineDiscounts = append(foreign.R.OrderLineDiscounts, local)
				break
			}
		}
	}

	return nil
}

// LoadVoucher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderLineDiscountL) LoadVoucher(e boil.Executor, singular bool, maybeOrderLineDiscount interface{}, mods queries.Applicator) error {
	var slice []*OrderLineDiscount
	var object *OrderLineDiscount

	if singular {
		var ok bool
		object, ok = maybeOrderLineDiscount.(*OrderLineDiscount)
		if !ok {
			object = new(OrderLineDiscount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderLineDiscount))
			}
		}
	} else {
		s, ok := maybeOrderLineDiscount.(*[]*OrderLineDiscount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderLineDiscount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderLineDiscountR{}
		}
		if !queries.IsNil(object.VoucherID) {
			args[object.VoucherID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineDiscountR{}
			}

			if !queries.IsNil(obj.VoucherID) {
				args[obj.VoucherID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`vouchers`),
		qm.WhereIn(`vouchers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Voucher")
	}

	var resultSlice []*Voucher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Voucher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vouchers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vouchers")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Voucher = foreign
		if foreign.R == nil {
			foreign.R = &voucherR{}
		}
		foreign.R.OrderLineDiscounts = append(foreign.R.OrderLineDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VoucherID, foreign.ID) {
				local.R.Voucher = foreign
				if foreign.R == nil {
					foreign.R = &voucherR{}
				}
				foreign.R.OrderLineDiscounts = append(foreign.R.OrderLineDiscounts, local)
				break
			}
		}
	}

	return nil
}

// SetOrderLine of the orderLineDiscount to the related item.
// Sets o.R.OrderLine to related.
// Adds o to related.R.OrderLineDiscounts.
func (o *OrderLineDiscount) SetOrderLine(exec boil.Executor, insert bool, related *OrderLine) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_line_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_line_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderLineDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderLineID, related.ID)
	if o.R == nil {
		o.R = &orderLineDiscountR{
			OrderLine: related,
		}
	} else {
		o.R.OrderLine = related
	}

	if related.R == nil {
		related.R = &orderLineR{
			OrderLineDiscounts: OrderLineDiscountSlice{o},
		}
	} else {
		related.R.OrderLineDiscounts = append(related.R.OrderLineDiscounts, o)
	}

	return nil
}

// RemoveOrderLine relationship.
// Sets o.R.OrderLine to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderLineDiscount) RemoveOrderLine(exec boil.Executor, related *OrderLine) error {
	var err error

	queries.SetScanner(&o.OrderLineID, nil)
	if _, err = o.Update(exec, boil.Whitelist("order_line_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderLine = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderLineDiscounts {
		if queries.Equal(o.OrderLineID, ri.OrderLineID) {
			continue
		}

		ln := len(related.R.OrderLineDiscounts)
		if ln > 1 && i < ln-1 {
			related.R.OrderLineDiscounts[i] = related.R.OrderLineDiscounts[ln-1]
		}
		related.R.OrderLineDiscounts = related.R.OrderLineDiscounts[:ln-1]
		break
	}
	return nil
}

// SetPromotionRule of the orderLineDiscount to the related item.
// Sets o.R.PromotionRule to related.
// Adds o to related.R.OrderLineDiscounts.
func (o *OrderLineDiscount) SetPromotionRule(exec boil.Executor, insert bool, related *PromotionRule) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_line_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderLineDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PromotionRuleID, related.ID)
	if o.R == nil {
		o.R = &orderLineDiscountR{
			PromotionRule: related,
		}
	} else {
		o.R.PromotionRule = related
	}

	if related.R == nil {
		related.R = &promotionRuleR{
			OrderLineDiscounts: OrderLineDiscountSlice{o},
		}
	} else {
		related.R.OrderLineDiscounts = append(related.R.OrderLineDiscounts, o)
	}

	return nil
}

// RemovePromotionRule relationship.
// Sets o.R.PromotionRule to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderLineDiscount) RemovePromotionRule(exec boil.Executor, related *PromotionRule) error {
	var err error

	queries.SetScanner(&o.PromotionRuleID, nil)
	if _, err = o.Update(exec, boil.Whitelist("promotion_rule_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PromotionRule = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderLineDiscounts {
		if queries.Equal(o.PromotionRuleID, ri.PromotionRuleID) {
			continue
		}

		ln := len(related.R.OrderLineDiscounts)
		if ln > 1 && i < ln-1 {
			related.R.OrderLineDiscounts[i] = related.R.OrderLineDiscounts[ln-1]
		}
		related.R.OrderLineDiscounts = related.R.OrderLineDiscounts[:ln-1]
		break
	}
	return nil
}

// SetVoucher of the orderLineDiscount to the related item.
// Sets o.R.Voucher to related.
// Adds o to related.R.OrderLineDiscounts.
func (o *OrderLineDiscount) SetVoucher(exec boil.Executor, insert bool, related *Voucher) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_line_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voucher_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderLineDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VoucherID, related.ID)
	if o.R == nil {
		o.R = &orderLineDiscountR{
			Voucher: related,
		}
	} else {
		o.R.Voucher = related
	}

	if related.R == nil {
		related.R = &voucherR{
			OrderLineDiscounts: OrderLineDiscountSlice{o},
		}
	} else {
		related.R.OrderLineDiscounts = append(related.R.OrderLineDiscounts, o)
	}

	return nil
}

// RemoveVoucher relationship.
// Sets o.R.Voucher to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderLineDiscount) RemoveVoucher(exec boil.Executor, related *Voucher) error {
	var err error

	queries.SetScanner(&o.VoucherID, nil)
	if _, err = o.Update(exec, boil.Whitelist("voucher_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Voucher = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderLineDiscounts {
		if queries.Equal(o.VoucherID, ri.VoucherID) {
			continue
		}

		ln := len(related.R.OrderLineDiscounts)
		if ln > 1 && i < ln-1 {
			related.R.OrderLineDiscounts[i] = related.R.OrderLineDiscounts[ln-1]
		}
		related.R.OrderLineDiscounts = related.R.OrderLineDiscounts[:ln-1]
		break
	}
	return nil
}

// OrderLineDiscounts retrieves all the records using an executor.
func OrderLineDiscounts(mods ...qm.QueryMod) orderLineDiscountQuery {
	mods = append(mods, qm.From("\"order_line_discounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_line_discounts\".*"})
	}

	return orderLineDiscountQuery{q}
}

// FindOrderLineDiscount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderLineDiscount(exec boil.Executor, iD string, selectCols ...string) (*OrderLineDiscount, error) {
	orderLineDiscountObj := &OrderLineDiscount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_line_discounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, orderLineDiscountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from order_line_discounts")
	}

	return orderLineDiscountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderLineDiscount) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no order_line_discounts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderLineDiscountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderLineDiscountInsertCacheMut.RLock()
	cache, cached := orderLineDiscountInsertCache[key]
	orderLineDiscountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderLineDiscountAllColumns,
			orderLineDiscountColumnsWithDefault,
			orderLineDiscountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderLineDiscountType, orderLineDiscountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderLineDiscountType, orderLineDiscountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_line_discounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_line_discounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into order_line_discounts")
	}

	if !cached {
		orderLineDiscountInsertCacheMut.Lock()
		orderLineDiscountInsertCache[key] = cache
		orderLineDiscountInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OrderLineDiscount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderLineDiscount) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	orderLineDiscountUpdateCacheMut.RLock()
	cache, cached := orderLineDiscountUpdateCache[key]
	orderLineDiscountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderLineDiscountAllColumns,
			orderLineDiscountPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update order_line_discounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_line_discounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderLineDiscountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderLineDiscountType, orderLineDiscountMapping, append(wl, orderLineDiscountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update order_line_discounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for order_line_discounts")
	}

	if !cached {
		orderLineDiscountUpdateCacheMut.Lock()
		orderLineDiscountUpdateCache[key] = cache
		orderLineDiscountUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q orderLineDiscountQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for order_line_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for order_line_discounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderLineDiscountSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderLineDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_line_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderLineDiscountPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in orderLineDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all orderLineDiscount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderLineDiscount) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no order_line_discounts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(orderLineDiscountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderLineDiscountUpsertCacheMut.RLock()
	cache, cached := orderLineDiscountUpsertCache[key]
	orderLineDiscountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderLineDiscountAllColumns,
			orderLineDiscountColumnsWithDefault,
			orderLineDiscountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderLineDiscountAllColumns,
			orderLineDiscountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert order_line_discounts, could not build update column list")
		}

		ret := strmangle.SetComplement(orderLineDiscountAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderLineDiscountPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert order_line_discounts, could not build conflict column list")
			}

			conflict = make([]string, len(orderLineDiscountPrimaryKeyColumns))
			copy(conflict, orderLineDiscountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_line_discounts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderLineDiscountType, orderLineDiscountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderLineDiscountType, orderLineDiscountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert order_line_discounts")
	}

	if !cached {
		orderLineDiscountUpsertCacheMut.Lock()
		orderLineDiscountUpsertCache[key] = cache
		orderLineDiscountUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single OrderLineDiscount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderLineDiscount) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no OrderLineDiscount provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderLineDiscountPrimaryKeyMapping)
	sql := "DELETE FROM \"order_line_discounts\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from order_line_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for order_line_discounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderLineDiscountQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no orderLineDiscountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from order_line_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for order_line_discounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderLineDiscountSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderLineDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_line_discounts\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, orderLineDiscountPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from orderLineDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for order_line_discounts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderLineDiscount) Reload(exec boil.Executor) error {
	ret, err := FindOrderLineDiscount(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderLineDiscountSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderLineDiscountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderLineDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_line_discounts\".* FROM \"order_line_discounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderLineDiscountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in OrderLineDiscountSlice")
	}

	*o = slice

	return nil
}

// OrderLineDiscountExists checks if the OrderLineDiscount row exists.
func OrderLineDiscountExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_line_discounts\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if order_line_discounts exists")
	}

	return exists, nil
}

// Exists checks if the OrderLineDiscount row exists.
func (o *OrderLineDiscount) Exists(exec boil.Executor) (bool, error) {
	return OrderLineDiscountExists(exec, o.ID)
}
