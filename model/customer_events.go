// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CustomerEvent is an object representing the database table.
type CustomerEvent struct {
	ID         string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Date       int64                  `boil:"date" json:"date" toml:"date" yaml:"date"`
	Type       CustomerEventType      `boil:"type" json:"type" toml:"type" yaml:"type"`
	OrderID    model_types.NullString `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	UserID     model_types.NullString `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Parameters model_types.JsonMap    `boil:"parameters" json:"parameters,omitempty" toml:"parameters" yaml:"parameters,omitempty"`

	R *customerEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customerEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomerEventColumns = struct {
	ID         string
	Date       string
	Type       string
	OrderID    string
	UserID     string
	Parameters string
}{
	ID:         "id",
	Date:       "date",
	Type:       "type",
	OrderID:    "order_id",
	UserID:     "user_id",
	Parameters: "parameters",
}

var CustomerEventTableColumns = struct {
	ID         string
	Date       string
	Type       string
	OrderID    string
	UserID     string
	Parameters string
}{
	ID:         "customer_events.id",
	Date:       "customer_events.date",
	Type:       "customer_events.type",
	OrderID:    "customer_events.order_id",
	UserID:     "customer_events.user_id",
	Parameters: "customer_events.parameters",
}

// Generated where

type whereHelperCustomerEventType struct{ field string }

func (w whereHelperCustomerEventType) EQ(x CustomerEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperCustomerEventType) NEQ(x CustomerEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperCustomerEventType) LT(x CustomerEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperCustomerEventType) LTE(x CustomerEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperCustomerEventType) GT(x CustomerEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperCustomerEventType) GTE(x CustomerEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperCustomerEventType) IN(slice []CustomerEventType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperCustomerEventType) NIN(slice []CustomerEventType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CustomerEventWhere = struct {
	ID         whereHelperstring
	Date       whereHelperint64
	Type       whereHelperCustomerEventType
	OrderID    whereHelpermodel_types_NullString
	UserID     whereHelpermodel_types_NullString
	Parameters whereHelpermodel_types_JsonMap
}{
	ID:         whereHelperstring{field: "\"customer_events\".\"id\""},
	Date:       whereHelperint64{field: "\"customer_events\".\"date\""},
	Type:       whereHelperCustomerEventType{field: "\"customer_events\".\"type\""},
	OrderID:    whereHelpermodel_types_NullString{field: "\"customer_events\".\"order_id\""},
	UserID:     whereHelpermodel_types_NullString{field: "\"customer_events\".\"user_id\""},
	Parameters: whereHelpermodel_types_JsonMap{field: "\"customer_events\".\"parameters\""},
}

// CustomerEventRels is where relationship names are stored.
var CustomerEventRels = struct {
	Order string
	User  string
}{
	Order: "Order",
	User:  "User",
}

// customerEventR is where relationships are stored.
type customerEventR struct {
	Order *Order `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	User  *User  `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*customerEventR) NewStruct() *customerEventR {
	return &customerEventR{}
}

func (r *customerEventR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *customerEventR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// customerEventL is where Load methods for each relationship are stored.
type customerEventL struct{}

var (
	customerEventAllColumns            = []string{"id", "date", "type", "order_id", "user_id", "parameters"}
	customerEventColumnsWithoutDefault = []string{"id", "date", "type"}
	customerEventColumnsWithDefault    = []string{"order_id", "user_id", "parameters"}
	customerEventPrimaryKeyColumns     = []string{"id"}
	customerEventGeneratedColumns      = []string{}
)

type (
	// CustomerEventSlice is an alias for a slice of pointers to CustomerEvent.
	// This should almost always be used instead of []CustomerEvent.
	CustomerEventSlice []*CustomerEvent

	customerEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerEventType                 = reflect.TypeOf(&CustomerEvent{})
	customerEventMapping              = queries.MakeStructMapping(customerEventType)
	customerEventPrimaryKeyMapping, _ = queries.BindMapping(customerEventType, customerEventMapping, customerEventPrimaryKeyColumns)
	customerEventInsertCacheMut       sync.RWMutex
	customerEventInsertCache          = make(map[string]insertCache)
	customerEventUpdateCacheMut       sync.RWMutex
	customerEventUpdateCache          = make(map[string]updateCache)
	customerEventUpsertCacheMut       sync.RWMutex
	customerEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single customerEvent record from the query.
func (q customerEventQuery) One(exec boil.Executor) (*CustomerEvent, error) {
	o := &CustomerEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for customer_events")
	}

	return o, nil
}

// All returns all CustomerEvent records from the query.
func (q customerEventQuery) All(exec boil.Executor) (CustomerEventSlice, error) {
	var o []*CustomerEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to CustomerEvent slice")
	}

	return o, nil
}

// Count returns the count of all CustomerEvent records in the query.
func (q customerEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count customer_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q customerEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if customer_events exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *CustomerEvent) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// User pointed to by the foreign key.
func (o *CustomerEvent) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (customerEventL) LoadOrder(e boil.Executor, singular bool, maybeCustomerEvent interface{}, mods queries.Applicator) error {
	var slice []*CustomerEvent
	var object *CustomerEvent

	if singular {
		var ok bool
		object, ok = maybeCustomerEvent.(*CustomerEvent)
		if !ok {
			object = new(CustomerEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCustomerEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCustomerEvent))
			}
		}
	} else {
		s, ok := maybeCustomerEvent.(*[]*CustomerEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCustomerEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCustomerEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &customerEventR{}
		}
		if !queries.IsNil(object.OrderID) {
			args[object.OrderID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerEventR{}
			}

			if !queries.IsNil(obj.OrderID) {
				args[obj.OrderID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.CustomerEvents = append(foreign.R.CustomerEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.CustomerEvents = append(foreign.R.CustomerEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (customerEventL) LoadUser(e boil.Executor, singular bool, maybeCustomerEvent interface{}, mods queries.Applicator) error {
	var slice []*CustomerEvent
	var object *CustomerEvent

	if singular {
		var ok bool
		object, ok = maybeCustomerEvent.(*CustomerEvent)
		if !ok {
			object = new(CustomerEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCustomerEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCustomerEvent))
			}
		}
	} else {
		s, ok := maybeCustomerEvent.(*[]*CustomerEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCustomerEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCustomerEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &customerEventR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerEventR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CustomerEvents = append(foreign.R.CustomerEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CustomerEvents = append(foreign.R.CustomerEvents, local)
				break
			}
		}
	}

	return nil
}

// SetOrder of the customerEvent to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.CustomerEvents.
func (o *CustomerEvent) SetOrder(exec boil.Executor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"customer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, customerEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &customerEventR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			CustomerEvents: CustomerEventSlice{o},
		}
	} else {
		related.R.CustomerEvents = append(related.R.CustomerEvents, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CustomerEvent) RemoveOrder(exec boil.Executor, related *Order) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Order = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CustomerEvents {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.CustomerEvents)
		if ln > 1 && i < ln-1 {
			related.R.CustomerEvents[i] = related.R.CustomerEvents[ln-1]
		}
		related.R.CustomerEvents = related.R.CustomerEvents[:ln-1]
		break
	}
	return nil
}

// SetUser of the customerEvent to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CustomerEvents.
func (o *CustomerEvent) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"customer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, customerEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &customerEventR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CustomerEvents: CustomerEventSlice{o},
		}
	} else {
		related.R.CustomerEvents = append(related.R.CustomerEvents, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CustomerEvent) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CustomerEvents {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.CustomerEvents)
		if ln > 1 && i < ln-1 {
			related.R.CustomerEvents[i] = related.R.CustomerEvents[ln-1]
		}
		related.R.CustomerEvents = related.R.CustomerEvents[:ln-1]
		break
	}
	return nil
}

// CustomerEvents retrieves all the records using an executor.
func CustomerEvents(mods ...qm.QueryMod) customerEventQuery {
	mods = append(mods, qm.From("\"customer_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"customer_events\".*"})
	}

	return customerEventQuery{q}
}

// FindCustomerEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomerEvent(exec boil.Executor, iD string, selectCols ...string) (*CustomerEvent, error) {
	customerEventObj := &CustomerEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"customer_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, customerEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from customer_events")
	}

	return customerEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CustomerEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no customer_events provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(customerEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	customerEventInsertCacheMut.RLock()
	cache, cached := customerEventInsertCache[key]
	customerEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			customerEventAllColumns,
			customerEventColumnsWithDefault,
			customerEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(customerEventType, customerEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customerEventType, customerEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"customer_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"customer_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into customer_events")
	}

	if !cached {
		customerEventInsertCacheMut.Lock()
		customerEventInsertCache[key] = cache
		customerEventInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CustomerEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CustomerEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	customerEventUpdateCacheMut.RLock()
	cache, cached := customerEventUpdateCache[key]
	customerEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			customerEventAllColumns,
			customerEventPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update customer_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"customer_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, customerEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customerEventType, customerEventMapping, append(wl, customerEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update customer_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for customer_events")
	}

	if !cached {
		customerEventUpdateCacheMut.Lock()
		customerEventUpdateCache[key] = cache
		customerEventUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q customerEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for customer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for customer_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomerEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"customer_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, customerEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in customerEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all customerEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CustomerEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no customer_events provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(customerEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customerEventUpsertCacheMut.RLock()
	cache, cached := customerEventUpsertCache[key]
	customerEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			customerEventAllColumns,
			customerEventColumnsWithDefault,
			customerEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			customerEventAllColumns,
			customerEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert customer_events, could not build update column list")
		}

		ret := strmangle.SetComplement(customerEventAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(customerEventPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert customer_events, could not build conflict column list")
			}

			conflict = make([]string, len(customerEventPrimaryKeyColumns))
			copy(conflict, customerEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"customer_events\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(customerEventType, customerEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customerEventType, customerEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert customer_events")
	}

	if !cached {
		customerEventUpsertCacheMut.Lock()
		customerEventUpsertCache[key] = cache
		customerEventUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CustomerEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CustomerEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no CustomerEvent provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customerEventPrimaryKeyMapping)
	sql := "DELETE FROM \"customer_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from customer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for customer_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q customerEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no customerEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from customer_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for customer_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomerEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"customer_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, customerEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from customerEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for customer_events")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CustomerEvent) Reload(exec boil.Executor) error {
	ret, err := FindCustomerEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CustomerEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"customer_events\".* FROM \"customer_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, customerEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in CustomerEventSlice")
	}

	*o = slice

	return nil
}

// CustomerEventExists checks if the CustomerEvent row exists.
func CustomerEventExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"customer_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if customer_events exists")
	}

	return exists, nil
}

// Exists checks if the CustomerEvent row exists.
func (o *CustomerEvent) Exists(exec boil.Executor) (bool, error) {
	return CustomerEventExists(exec, o.ID)
}
