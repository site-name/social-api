// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Order is an object representing the database table.
type Order struct {
	ID                           string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt                    int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Status                       OrderStatus            `boil:"status" json:"status" toml:"status" yaml:"status"`
	UserID                       model_types.NullString `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	LanguageCode                 LanguageCode           `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	TrackingClientID             string                 `boil:"tracking_client_id" json:"tracking_client_id" toml:"tracking_client_id" yaml:"tracking_client_id"`
	BillingAddressID             model_types.NullString `boil:"billing_address_id" json:"billing_address_id,omitempty" toml:"billing_address_id" yaml:"billing_address_id,omitempty"`
	ShippingAddressID            model_types.NullString `boil:"shipping_address_id" json:"shipping_address_id,omitempty" toml:"shipping_address_id" yaml:"shipping_address_id,omitempty"`
	UserEmail                    string                 `boil:"user_email" json:"user_email" toml:"user_email" yaml:"user_email"`
	OriginalID                   model_types.NullString `boil:"original_id" json:"original_id,omitempty" toml:"original_id" yaml:"original_id,omitempty"`
	Origin                       OrderOrigin            `boil:"origin" json:"origin" toml:"origin" yaml:"origin"`
	Currency                     string                 `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	ShippingMethodID             model_types.NullString `boil:"shipping_method_id" json:"shipping_method_id,omitempty" toml:"shipping_method_id" yaml:"shipping_method_id,omitempty"`
	CollectionPointID            model_types.NullString `boil:"collection_point_id" json:"collection_point_id,omitempty" toml:"collection_point_id" yaml:"collection_point_id,omitempty"`
	ShippingMethodName           model_types.NullString `boil:"shipping_method_name" json:"shipping_method_name,omitempty" toml:"shipping_method_name" yaml:"shipping_method_name,omitempty"`
	CollectionPointName          model_types.NullString `boil:"collection_point_name" json:"collection_point_name,omitempty" toml:"collection_point_name" yaml:"collection_point_name,omitempty"`
	ChannelID                    string                 `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	ShippingPriceNetAmount       decimal.Decimal        `boil:"shipping_price_net_amount" json:"shipping_price_net_amount" toml:"shipping_price_net_amount" yaml:"shipping_price_net_amount"`
	ShippingPriceGrossAmount     decimal.Decimal        `boil:"shipping_price_gross_amount" json:"shipping_price_gross_amount" toml:"shipping_price_gross_amount" yaml:"shipping_price_gross_amount"`
	ShippingTaxRate              decimal.Decimal        `boil:"shipping_tax_rate" json:"shipping_tax_rate" toml:"shipping_tax_rate" yaml:"shipping_tax_rate"`
	Token                        string                 `boil:"token" json:"token" toml:"token" yaml:"token"`
	CheckoutToken                string                 `boil:"checkout_token" json:"checkout_token" toml:"checkout_token" yaml:"checkout_token"`
	TotalNetAmount               decimal.Decimal        `boil:"total_net_amount" json:"total_net_amount" toml:"total_net_amount" yaml:"total_net_amount"`
	UndiscountedTotalNetAmount   decimal.Decimal        `boil:"undiscounted_total_net_amount" json:"undiscounted_total_net_amount" toml:"undiscounted_total_net_amount" yaml:"undiscounted_total_net_amount"`
	TotalGrossAmount             decimal.Decimal        `boil:"total_gross_amount" json:"total_gross_amount" toml:"total_gross_amount" yaml:"total_gross_amount"`
	UndiscountedTotalGrossAmount decimal.Decimal        `boil:"undiscounted_total_gross_amount" json:"undiscounted_total_gross_amount" toml:"undiscounted_total_gross_amount" yaml:"undiscounted_total_gross_amount"`
	TotalPaidAmount              decimal.Decimal        `boil:"total_paid_amount" json:"total_paid_amount" toml:"total_paid_amount" yaml:"total_paid_amount"`
	VoucherID                    model_types.NullString `boil:"voucher_id" json:"voucher_id,omitempty" toml:"voucher_id" yaml:"voucher_id,omitempty"`
	DisplayGrossPrices           model_types.NullBool   `boil:"display_gross_prices" json:"display_gross_prices,omitempty" toml:"display_gross_prices" yaml:"display_gross_prices,omitempty"`
	CustomerNote                 string                 `boil:"customer_note" json:"customer_note" toml:"customer_note" yaml:"customer_note"`
	WeightAmount                 float32                `boil:"weight_amount" json:"weight_amount" toml:"weight_amount" yaml:"weight_amount"`
	WeightUnit                   string                 `boil:"weight_unit" json:"weight_unit" toml:"weight_unit" yaml:"weight_unit"`
	RedirectURL                  model_types.NullString `boil:"redirect_url" json:"redirect_url,omitempty" toml:"redirect_url" yaml:"redirect_url,omitempty"`
	Metadata                     model_types.JsonMap    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata              model_types.JsonMap    `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *orderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderColumns = struct {
	ID                           string
	CreatedAt                    string
	Status                       string
	UserID                       string
	LanguageCode                 string
	TrackingClientID             string
	BillingAddressID             string
	ShippingAddressID            string
	UserEmail                    string
	OriginalID                   string
	Origin                       string
	Currency                     string
	ShippingMethodID             string
	CollectionPointID            string
	ShippingMethodName           string
	CollectionPointName          string
	ChannelID                    string
	ShippingPriceNetAmount       string
	ShippingPriceGrossAmount     string
	ShippingTaxRate              string
	Token                        string
	CheckoutToken                string
	TotalNetAmount               string
	UndiscountedTotalNetAmount   string
	TotalGrossAmount             string
	UndiscountedTotalGrossAmount string
	TotalPaidAmount              string
	VoucherID                    string
	DisplayGrossPrices           string
	CustomerNote                 string
	WeightAmount                 string
	WeightUnit                   string
	RedirectURL                  string
	Metadata                     string
	PrivateMetadata              string
}{
	ID:                           "id",
	CreatedAt:                    "created_at",
	Status:                       "status",
	UserID:                       "user_id",
	LanguageCode:                 "language_code",
	TrackingClientID:             "tracking_client_id",
	BillingAddressID:             "billing_address_id",
	ShippingAddressID:            "shipping_address_id",
	UserEmail:                    "user_email",
	OriginalID:                   "original_id",
	Origin:                       "origin",
	Currency:                     "currency",
	ShippingMethodID:             "shipping_method_id",
	CollectionPointID:            "collection_point_id",
	ShippingMethodName:           "shipping_method_name",
	CollectionPointName:          "collection_point_name",
	ChannelID:                    "channel_id",
	ShippingPriceNetAmount:       "shipping_price_net_amount",
	ShippingPriceGrossAmount:     "shipping_price_gross_amount",
	ShippingTaxRate:              "shipping_tax_rate",
	Token:                        "token",
	CheckoutToken:                "checkout_token",
	TotalNetAmount:               "total_net_amount",
	UndiscountedTotalNetAmount:   "undiscounted_total_net_amount",
	TotalGrossAmount:             "total_gross_amount",
	UndiscountedTotalGrossAmount: "undiscounted_total_gross_amount",
	TotalPaidAmount:              "total_paid_amount",
	VoucherID:                    "voucher_id",
	DisplayGrossPrices:           "display_gross_prices",
	CustomerNote:                 "customer_note",
	WeightAmount:                 "weight_amount",
	WeightUnit:                   "weight_unit",
	RedirectURL:                  "redirect_url",
	Metadata:                     "metadata",
	PrivateMetadata:              "private_metadata",
}

var OrderTableColumns = struct {
	ID                           string
	CreatedAt                    string
	Status                       string
	UserID                       string
	LanguageCode                 string
	TrackingClientID             string
	BillingAddressID             string
	ShippingAddressID            string
	UserEmail                    string
	OriginalID                   string
	Origin                       string
	Currency                     string
	ShippingMethodID             string
	CollectionPointID            string
	ShippingMethodName           string
	CollectionPointName          string
	ChannelID                    string
	ShippingPriceNetAmount       string
	ShippingPriceGrossAmount     string
	ShippingTaxRate              string
	Token                        string
	CheckoutToken                string
	TotalNetAmount               string
	UndiscountedTotalNetAmount   string
	TotalGrossAmount             string
	UndiscountedTotalGrossAmount string
	TotalPaidAmount              string
	VoucherID                    string
	DisplayGrossPrices           string
	CustomerNote                 string
	WeightAmount                 string
	WeightUnit                   string
	RedirectURL                  string
	Metadata                     string
	PrivateMetadata              string
}{
	ID:                           "orders.id",
	CreatedAt:                    "orders.created_at",
	Status:                       "orders.status",
	UserID:                       "orders.user_id",
	LanguageCode:                 "orders.language_code",
	TrackingClientID:             "orders.tracking_client_id",
	BillingAddressID:             "orders.billing_address_id",
	ShippingAddressID:            "orders.shipping_address_id",
	UserEmail:                    "orders.user_email",
	OriginalID:                   "orders.original_id",
	Origin:                       "orders.origin",
	Currency:                     "orders.currency",
	ShippingMethodID:             "orders.shipping_method_id",
	CollectionPointID:            "orders.collection_point_id",
	ShippingMethodName:           "orders.shipping_method_name",
	CollectionPointName:          "orders.collection_point_name",
	ChannelID:                    "orders.channel_id",
	ShippingPriceNetAmount:       "orders.shipping_price_net_amount",
	ShippingPriceGrossAmount:     "orders.shipping_price_gross_amount",
	ShippingTaxRate:              "orders.shipping_tax_rate",
	Token:                        "orders.token",
	CheckoutToken:                "orders.checkout_token",
	TotalNetAmount:               "orders.total_net_amount",
	UndiscountedTotalNetAmount:   "orders.undiscounted_total_net_amount",
	TotalGrossAmount:             "orders.total_gross_amount",
	UndiscountedTotalGrossAmount: "orders.undiscounted_total_gross_amount",
	TotalPaidAmount:              "orders.total_paid_amount",
	VoucherID:                    "orders.voucher_id",
	DisplayGrossPrices:           "orders.display_gross_prices",
	CustomerNote:                 "orders.customer_note",
	WeightAmount:                 "orders.weight_amount",
	WeightUnit:                   "orders.weight_unit",
	RedirectURL:                  "orders.redirect_url",
	Metadata:                     "orders.metadata",
	PrivateMetadata:              "orders.private_metadata",
}

// Generated where

type whereHelperOrderStatus struct{ field string }

func (w whereHelperOrderStatus) EQ(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperOrderStatus) NEQ(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperOrderStatus) LT(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperOrderStatus) LTE(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperOrderStatus) GT(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperOrderStatus) GTE(x OrderStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperOrderStatus) IN(slice []OrderStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperOrderStatus) NIN(slice []OrderStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperOrderOrigin struct{ field string }

func (w whereHelperOrderOrigin) EQ(x OrderOrigin) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperOrderOrigin) NEQ(x OrderOrigin) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperOrderOrigin) LT(x OrderOrigin) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperOrderOrigin) LTE(x OrderOrigin) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperOrderOrigin) GT(x OrderOrigin) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperOrderOrigin) GTE(x OrderOrigin) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperOrderOrigin) IN(slice []OrderOrigin) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperOrderOrigin) NIN(slice []OrderOrigin) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperfloat32 struct{ field string }

func (w whereHelperfloat32) EQ(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat32) NEQ(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat32) LT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat32) LTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat32) GT(x float32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat32) GTE(x float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var OrderWhere = struct {
	ID                           whereHelperstring
	CreatedAt                    whereHelperint64
	Status                       whereHelperOrderStatus
	UserID                       whereHelpermodel_types_NullString
	LanguageCode                 whereHelperLanguageCode
	TrackingClientID             whereHelperstring
	BillingAddressID             whereHelpermodel_types_NullString
	ShippingAddressID            whereHelpermodel_types_NullString
	UserEmail                    whereHelperstring
	OriginalID                   whereHelpermodel_types_NullString
	Origin                       whereHelperOrderOrigin
	Currency                     whereHelperstring
	ShippingMethodID             whereHelpermodel_types_NullString
	CollectionPointID            whereHelpermodel_types_NullString
	ShippingMethodName           whereHelpermodel_types_NullString
	CollectionPointName          whereHelpermodel_types_NullString
	ChannelID                    whereHelperstring
	ShippingPriceNetAmount       whereHelperdecimal_Decimal
	ShippingPriceGrossAmount     whereHelperdecimal_Decimal
	ShippingTaxRate              whereHelperdecimal_Decimal
	Token                        whereHelperstring
	CheckoutToken                whereHelperstring
	TotalNetAmount               whereHelperdecimal_Decimal
	UndiscountedTotalNetAmount   whereHelperdecimal_Decimal
	TotalGrossAmount             whereHelperdecimal_Decimal
	UndiscountedTotalGrossAmount whereHelperdecimal_Decimal
	TotalPaidAmount              whereHelperdecimal_Decimal
	VoucherID                    whereHelpermodel_types_NullString
	DisplayGrossPrices           whereHelpermodel_types_NullBool
	CustomerNote                 whereHelperstring
	WeightAmount                 whereHelperfloat32
	WeightUnit                   whereHelperstring
	RedirectURL                  whereHelpermodel_types_NullString
	Metadata                     whereHelpermodel_types_JsonMap
	PrivateMetadata              whereHelpermodel_types_JsonMap
}{
	ID:                           whereHelperstring{field: "\"orders\".\"id\""},
	CreatedAt:                    whereHelperint64{field: "\"orders\".\"created_at\""},
	Status:                       whereHelperOrderStatus{field: "\"orders\".\"status\""},
	UserID:                       whereHelpermodel_types_NullString{field: "\"orders\".\"user_id\""},
	LanguageCode:                 whereHelperLanguageCode{field: "\"orders\".\"language_code\""},
	TrackingClientID:             whereHelperstring{field: "\"orders\".\"tracking_client_id\""},
	BillingAddressID:             whereHelpermodel_types_NullString{field: "\"orders\".\"billing_address_id\""},
	ShippingAddressID:            whereHelpermodel_types_NullString{field: "\"orders\".\"shipping_address_id\""},
	UserEmail:                    whereHelperstring{field: "\"orders\".\"user_email\""},
	OriginalID:                   whereHelpermodel_types_NullString{field: "\"orders\".\"original_id\""},
	Origin:                       whereHelperOrderOrigin{field: "\"orders\".\"origin\""},
	Currency:                     whereHelperstring{field: "\"orders\".\"currency\""},
	ShippingMethodID:             whereHelpermodel_types_NullString{field: "\"orders\".\"shipping_method_id\""},
	CollectionPointID:            whereHelpermodel_types_NullString{field: "\"orders\".\"collection_point_id\""},
	ShippingMethodName:           whereHelpermodel_types_NullString{field: "\"orders\".\"shipping_method_name\""},
	CollectionPointName:          whereHelpermodel_types_NullString{field: "\"orders\".\"collection_point_name\""},
	ChannelID:                    whereHelperstring{field: "\"orders\".\"channel_id\""},
	ShippingPriceNetAmount:       whereHelperdecimal_Decimal{field: "\"orders\".\"shipping_price_net_amount\""},
	ShippingPriceGrossAmount:     whereHelperdecimal_Decimal{field: "\"orders\".\"shipping_price_gross_amount\""},
	ShippingTaxRate:              whereHelperdecimal_Decimal{field: "\"orders\".\"shipping_tax_rate\""},
	Token:                        whereHelperstring{field: "\"orders\".\"token\""},
	CheckoutToken:                whereHelperstring{field: "\"orders\".\"checkout_token\""},
	TotalNetAmount:               whereHelperdecimal_Decimal{field: "\"orders\".\"total_net_amount\""},
	UndiscountedTotalNetAmount:   whereHelperdecimal_Decimal{field: "\"orders\".\"undiscounted_total_net_amount\""},
	TotalGrossAmount:             whereHelperdecimal_Decimal{field: "\"orders\".\"total_gross_amount\""},
	UndiscountedTotalGrossAmount: whereHelperdecimal_Decimal{field: "\"orders\".\"undiscounted_total_gross_amount\""},
	TotalPaidAmount:              whereHelperdecimal_Decimal{field: "\"orders\".\"total_paid_amount\""},
	VoucherID:                    whereHelpermodel_types_NullString{field: "\"orders\".\"voucher_id\""},
	DisplayGrossPrices:           whereHelpermodel_types_NullBool{field: "\"orders\".\"display_gross_prices\""},
	CustomerNote:                 whereHelperstring{field: "\"orders\".\"customer_note\""},
	WeightAmount:                 whereHelperfloat32{field: "\"orders\".\"weight_amount\""},
	WeightUnit:                   whereHelperstring{field: "\"orders\".\"weight_unit\""},
	RedirectURL:                  whereHelpermodel_types_NullString{field: "\"orders\".\"redirect_url\""},
	Metadata:                     whereHelpermodel_types_JsonMap{field: "\"orders\".\"metadata\""},
	PrivateMetadata:              whereHelpermodel_types_JsonMap{field: "\"orders\".\"private_metadata\""},
}

// OrderRels is where relationship names are stored.
var OrderRels = struct {
}{}

// orderR is where relationships are stored.
type orderR struct {
}

// NewStruct creates a new relationship struct
func (*orderR) NewStruct() *orderR {
	return &orderR{}
}

// orderL is where Load methods for each relationship are stored.
type orderL struct{}

var (
	orderAllColumns            = []string{"id", "created_at", "status", "user_id", "language_code", "tracking_client_id", "billing_address_id", "shipping_address_id", "user_email", "original_id", "origin", "currency", "shipping_method_id", "collection_point_id", "shipping_method_name", "collection_point_name", "channel_id", "shipping_price_net_amount", "shipping_price_gross_amount", "shipping_tax_rate", "token", "checkout_token", "total_net_amount", "undiscounted_total_net_amount", "total_gross_amount", "undiscounted_total_gross_amount", "total_paid_amount", "voucher_id", "display_gross_prices", "customer_note", "weight_amount", "weight_unit", "redirect_url", "metadata", "private_metadata"}
	orderColumnsWithoutDefault = []string{"created_at", "status", "language_code", "tracking_client_id", "user_email", "origin", "currency", "channel_id", "token", "checkout_token", "customer_note", "weight_amount", "weight_unit"}
	orderColumnsWithDefault    = []string{"id", "user_id", "billing_address_id", "shipping_address_id", "original_id", "shipping_method_id", "collection_point_id", "shipping_method_name", "collection_point_name", "shipping_price_net_amount", "shipping_price_gross_amount", "shipping_tax_rate", "total_net_amount", "undiscounted_total_net_amount", "total_gross_amount", "undiscounted_total_gross_amount", "total_paid_amount", "voucher_id", "display_gross_prices", "redirect_url", "metadata", "private_metadata"}
	orderPrimaryKeyColumns     = []string{"id"}
	orderGeneratedColumns      = []string{}
)

type (
	// OrderSlice is an alias for a slice of pointers to Order.
	// This should almost always be used instead of []Order.
	OrderSlice []*Order

	orderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderType                 = reflect.TypeOf(&Order{})
	orderMapping              = queries.MakeStructMapping(orderType)
	orderPrimaryKeyMapping, _ = queries.BindMapping(orderType, orderMapping, orderPrimaryKeyColumns)
	orderInsertCacheMut       sync.RWMutex
	orderInsertCache          = make(map[string]insertCache)
	orderUpdateCacheMut       sync.RWMutex
	orderUpdateCache          = make(map[string]updateCache)
	orderUpsertCacheMut       sync.RWMutex
	orderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single order record from the query.
func (q orderQuery) One(exec boil.Executor) (*Order, error) {
	o := &Order{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for orders")
	}

	return o, nil
}

// All returns all Order records from the query.
func (q orderQuery) All(exec boil.Executor) (OrderSlice, error) {
	var o []*Order

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Order slice")
	}

	return o, nil
}

// Count returns the count of all Order records in the query.
func (q orderQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count orders rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if orders exists")
	}

	return count > 0, nil
}

// Orders retrieves all the records using an executor.
func Orders(mods ...qm.QueryMod) orderQuery {
	mods = append(mods, qm.From("\"orders\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"orders\".*"})
	}

	return orderQuery{q}
}

// FindOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrder(exec boil.Executor, iD string, selectCols ...string) (*Order, error) {
	orderObj := &Order{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"orders\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, orderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from orders")
	}

	return orderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Order) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no orders provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderInsertCacheMut.RLock()
	cache, cached := orderInsertCache[key]
	orderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderAllColumns,
			orderColumnsWithDefault,
			orderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderType, orderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"orders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"orders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into orders")
	}

	if !cached {
		orderInsertCacheMut.Lock()
		orderInsertCache[key] = cache
		orderInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Order.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Order) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	orderUpdateCacheMut.RLock()
	cache, cached := orderUpdateCache[key]
	orderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderAllColumns,
			orderPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update orders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"orders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, append(wl, orderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update orders row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for orders")
	}

	if !cached {
		orderUpdateCacheMut.Lock()
		orderUpdateCache[key] = cache
		orderUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q orderQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for orders")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in order slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all order")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Order) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no orders provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(orderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderUpsertCacheMut.RLock()
	cache, cached := orderUpsertCache[key]
	orderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderAllColumns,
			orderColumnsWithDefault,
			orderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderAllColumns,
			orderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert orders, could not build update column list")
		}

		ret := strmangle.SetComplement(orderAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert orders, could not build conflict column list")
			}

			conflict = make([]string, len(orderPrimaryKeyColumns))
			copy(conflict, orderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"orders\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderType, orderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert orders")
	}

	if !cached {
		orderUpsertCacheMut.Lock()
		orderUpsertCache[key] = cache
		orderUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Order record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Order) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Order provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderPrimaryKeyMapping)
	sql := "DELETE FROM \"orders\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for orders")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no orderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for orders")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"orders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from order slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for orders")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Order) Reload(exec boil.Executor) error {
	ret, err := FindOrder(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"orders\".* FROM \"orders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in OrderSlice")
	}

	*o = slice

	return nil
}

// OrderExists checks if the Order row exists.
func OrderExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"orders\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if orders exists")
	}

	return exists, nil
}

// Exists checks if the Order row exists.
func (o *Order) Exists(exec boil.Executor) (bool, error) {
	return OrderExists(exec, o.ID)
}
