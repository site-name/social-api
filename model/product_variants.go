// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductVariant is an object representing the database table.
type ProductVariant struct {
	ID                      string                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                    string                  `boil:"name" json:"name" toml:"name" yaml:"name"`
	ProductID               string                  `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	Sku                     string                  `boil:"sku" json:"sku" toml:"sku" yaml:"sku"`
	Weight                  model_types.NullFloat32 `boil:"weight" json:"weight,omitempty" toml:"weight" yaml:"weight,omitempty"`
	WeightUnit              string                  `boil:"weight_unit" json:"weight_unit" toml:"weight_unit" yaml:"weight_unit"`
	TrackInventory          model_types.NullBool    `boil:"track_inventory" json:"track_inventory,omitempty" toml:"track_inventory" yaml:"track_inventory,omitempty"`
	IsPreorder              bool                    `boil:"is_preorder" json:"is_preorder" toml:"is_preorder" yaml:"is_preorder"`
	PreorderEndDate         model_types.NullInt64   `boil:"preorder_end_date" json:"preorder_end_date,omitempty" toml:"preorder_end_date" yaml:"preorder_end_date,omitempty"`
	PreorderGlobalThreshold model_types.NullInt     `boil:"preorder_global_threshold" json:"preorder_global_threshold,omitempty" toml:"preorder_global_threshold" yaml:"preorder_global_threshold,omitempty"`
	SortOrder               model_types.NullInt     `boil:"sort_order" json:"sort_order,omitempty" toml:"sort_order" yaml:"sort_order,omitempty"`
	Metadata                model_types.JsonMap     `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata         model_types.JsonMap     `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *productVariantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productVariantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductVariantColumns = struct {
	ID                      string
	Name                    string
	ProductID               string
	Sku                     string
	Weight                  string
	WeightUnit              string
	TrackInventory          string
	IsPreorder              string
	PreorderEndDate         string
	PreorderGlobalThreshold string
	SortOrder               string
	Metadata                string
	PrivateMetadata         string
}{
	ID:                      "id",
	Name:                    "name",
	ProductID:               "product_id",
	Sku:                     "sku",
	Weight:                  "weight",
	WeightUnit:              "weight_unit",
	TrackInventory:          "track_inventory",
	IsPreorder:              "is_preorder",
	PreorderEndDate:         "preorder_end_date",
	PreorderGlobalThreshold: "preorder_global_threshold",
	SortOrder:               "sort_order",
	Metadata:                "metadata",
	PrivateMetadata:         "private_metadata",
}

var ProductVariantTableColumns = struct {
	ID                      string
	Name                    string
	ProductID               string
	Sku                     string
	Weight                  string
	WeightUnit              string
	TrackInventory          string
	IsPreorder              string
	PreorderEndDate         string
	PreorderGlobalThreshold string
	SortOrder               string
	Metadata                string
	PrivateMetadata         string
}{
	ID:                      "product_variants.id",
	Name:                    "product_variants.name",
	ProductID:               "product_variants.product_id",
	Sku:                     "product_variants.sku",
	Weight:                  "product_variants.weight",
	WeightUnit:              "product_variants.weight_unit",
	TrackInventory:          "product_variants.track_inventory",
	IsPreorder:              "product_variants.is_preorder",
	PreorderEndDate:         "product_variants.preorder_end_date",
	PreorderGlobalThreshold: "product_variants.preorder_global_threshold",
	SortOrder:               "product_variants.sort_order",
	Metadata:                "product_variants.metadata",
	PrivateMetadata:         "product_variants.private_metadata",
}

// Generated where

type whereHelpermodel_types_NullFloat32 struct{ field string }

func (w whereHelpermodel_types_NullFloat32) EQ(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpermodel_types_NullFloat32) NEQ(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpermodel_types_NullFloat32) LT(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpermodel_types_NullFloat32) LTE(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpermodel_types_NullFloat32) GT(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpermodel_types_NullFloat32) GTE(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpermodel_types_NullFloat32) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelpermodel_types_NullFloat32) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var ProductVariantWhere = struct {
	ID                      whereHelperstring
	Name                    whereHelperstring
	ProductID               whereHelperstring
	Sku                     whereHelperstring
	Weight                  whereHelpermodel_types_NullFloat32
	WeightUnit              whereHelperstring
	TrackInventory          whereHelpermodel_types_NullBool
	IsPreorder              whereHelperbool
	PreorderEndDate         whereHelpermodel_types_NullInt64
	PreorderGlobalThreshold whereHelpermodel_types_NullInt
	SortOrder               whereHelpermodel_types_NullInt
	Metadata                whereHelpermodel_types_JsonMap
	PrivateMetadata         whereHelpermodel_types_JsonMap
}{
	ID:                      whereHelperstring{field: "\"product_variants\".\"id\""},
	Name:                    whereHelperstring{field: "\"product_variants\".\"name\""},
	ProductID:               whereHelperstring{field: "\"product_variants\".\"product_id\""},
	Sku:                     whereHelperstring{field: "\"product_variants\".\"sku\""},
	Weight:                  whereHelpermodel_types_NullFloat32{field: "\"product_variants\".\"weight\""},
	WeightUnit:              whereHelperstring{field: "\"product_variants\".\"weight_unit\""},
	TrackInventory:          whereHelpermodel_types_NullBool{field: "\"product_variants\".\"track_inventory\""},
	IsPreorder:              whereHelperbool{field: "\"product_variants\".\"is_preorder\""},
	PreorderEndDate:         whereHelpermodel_types_NullInt64{field: "\"product_variants\".\"preorder_end_date\""},
	PreorderGlobalThreshold: whereHelpermodel_types_NullInt{field: "\"product_variants\".\"preorder_global_threshold\""},
	SortOrder:               whereHelpermodel_types_NullInt{field: "\"product_variants\".\"sort_order\""},
	Metadata:                whereHelpermodel_types_JsonMap{field: "\"product_variants\".\"metadata\""},
	PrivateMetadata:         whereHelpermodel_types_JsonMap{field: "\"product_variants\".\"private_metadata\""},
}

// ProductVariantRels is where relationship names are stored.
var ProductVariantRels = struct {
}{}

// productVariantR is where relationships are stored.
type productVariantR struct {
}

// NewStruct creates a new relationship struct
func (*productVariantR) NewStruct() *productVariantR {
	return &productVariantR{}
}

// productVariantL is where Load methods for each relationship are stored.
type productVariantL struct{}

var (
	productVariantAllColumns            = []string{"id", "name", "product_id", "sku", "weight", "weight_unit", "track_inventory", "is_preorder", "preorder_end_date", "preorder_global_threshold", "sort_order", "metadata", "private_metadata"}
	productVariantColumnsWithoutDefault = []string{"name", "product_id", "sku", "weight_unit", "is_preorder"}
	productVariantColumnsWithDefault    = []string{"id", "weight", "track_inventory", "preorder_end_date", "preorder_global_threshold", "sort_order", "metadata", "private_metadata"}
	productVariantPrimaryKeyColumns     = []string{"id"}
	productVariantGeneratedColumns      = []string{}
)

type (
	// ProductVariantSlice is an alias for a slice of pointers to ProductVariant.
	// This should almost always be used instead of []ProductVariant.
	ProductVariantSlice []*ProductVariant

	productVariantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productVariantType                 = reflect.TypeOf(&ProductVariant{})
	productVariantMapping              = queries.MakeStructMapping(productVariantType)
	productVariantPrimaryKeyMapping, _ = queries.BindMapping(productVariantType, productVariantMapping, productVariantPrimaryKeyColumns)
	productVariantInsertCacheMut       sync.RWMutex
	productVariantInsertCache          = make(map[string]insertCache)
	productVariantUpdateCacheMut       sync.RWMutex
	productVariantUpdateCache          = make(map[string]updateCache)
	productVariantUpsertCacheMut       sync.RWMutex
	productVariantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single productVariant record from the query.
func (q productVariantQuery) One(exec boil.Executor) (*ProductVariant, error) {
	o := &ProductVariant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for product_variants")
	}

	return o, nil
}

// All returns all ProductVariant records from the query.
func (q productVariantQuery) All(exec boil.Executor) (ProductVariantSlice, error) {
	var o []*ProductVariant

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ProductVariant slice")
	}

	return o, nil
}

// Count returns the count of all ProductVariant records in the query.
func (q productVariantQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count product_variants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productVariantQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if product_variants exists")
	}

	return count > 0, nil
}

// ProductVariants retrieves all the records using an executor.
func ProductVariants(mods ...qm.QueryMod) productVariantQuery {
	mods = append(mods, qm.From("\"product_variants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_variants\".*"})
	}

	return productVariantQuery{q}
}

// FindProductVariant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductVariant(exec boil.Executor, iD string, selectCols ...string) (*ProductVariant, error) {
	productVariantObj := &ProductVariant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_variants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, productVariantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from product_variants")
	}

	return productVariantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductVariant) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_variants provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(productVariantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productVariantInsertCacheMut.RLock()
	cache, cached := productVariantInsertCache[key]
	productVariantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productVariantAllColumns,
			productVariantColumnsWithDefault,
			productVariantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productVariantType, productVariantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productVariantType, productVariantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_variants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_variants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into product_variants")
	}

	if !cached {
		productVariantInsertCacheMut.Lock()
		productVariantInsertCache[key] = cache
		productVariantInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ProductVariant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductVariant) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	productVariantUpdateCacheMut.RLock()
	cache, cached := productVariantUpdateCache[key]
	productVariantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productVariantAllColumns,
			productVariantPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update product_variants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_variants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productVariantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productVariantType, productVariantMapping, append(wl, productVariantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update product_variants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for product_variants")
	}

	if !cached {
		productVariantUpdateCacheMut.Lock()
		productVariantUpdateCache[key] = cache
		productVariantUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q productVariantQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for product_variants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductVariantSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productVariantPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in productVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all productVariant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductVariant) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no product_variants provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(productVariantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productVariantUpsertCacheMut.RLock()
	cache, cached := productVariantUpsertCache[key]
	productVariantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productVariantAllColumns,
			productVariantColumnsWithDefault,
			productVariantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productVariantAllColumns,
			productVariantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert product_variants, could not build update column list")
		}

		ret := strmangle.SetComplement(productVariantAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(productVariantPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert product_variants, could not build conflict column list")
			}

			conflict = make([]string, len(productVariantPrimaryKeyColumns))
			copy(conflict, productVariantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_variants\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(productVariantType, productVariantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productVariantType, productVariantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert product_variants")
	}

	if !cached {
		productVariantUpsertCacheMut.Lock()
		productVariantUpsertCache[key] = cache
		productVariantUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ProductVariant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductVariant) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ProductVariant provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productVariantPrimaryKeyMapping)
	sql := "DELETE FROM \"product_variants\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for product_variants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productVariantQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no productVariantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_variants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductVariantSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productVariantPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from productVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_variants")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductVariant) Reload(exec boil.Executor) error {
	ret, err := FindProductVariant(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductVariantSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductVariantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_variants\".* FROM \"product_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productVariantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ProductVariantSlice")
	}

	*o = slice

	return nil
}

// ProductVariantExists checks if the ProductVariant row exists.
func ProductVariantExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_variants\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if product_variants exists")
	}

	return exists, nil
}

// Exists checks if the ProductVariant row exists.
func (o *ProductVariant) Exists(exec boil.Executor) (bool, error) {
	return ProductVariantExists(exec, o.ID)
}
