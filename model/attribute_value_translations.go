// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AttributeValueTranslation is an object representing the database table.
type AttributeValueTranslation struct {
	ID               string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageCode     Languagecode           `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	AttributeValueID string                 `boil:"attribute_value_id" json:"attribute_value_id" toml:"attribute_value_id" yaml:"attribute_value_id"`
	Name             string                 `boil:"name" json:"name" toml:"name" yaml:"name"`
	RichText         model_types.NullString `boil:"rich_text" json:"rich_text,omitempty" toml:"rich_text" yaml:"rich_text,omitempty"`

	R *attributeValueTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributeValueTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributeValueTranslationColumns = struct {
	ID               string
	LanguageCode     string
	AttributeValueID string
	Name             string
	RichText         string
}{
	ID:               "id",
	LanguageCode:     "language_code",
	AttributeValueID: "attribute_value_id",
	Name:             "name",
	RichText:         "rich_text",
}

var AttributeValueTranslationTableColumns = struct {
	ID               string
	LanguageCode     string
	AttributeValueID string
	Name             string
	RichText         string
}{
	ID:               "attribute_value_translations.id",
	LanguageCode:     "attribute_value_translations.language_code",
	AttributeValueID: "attribute_value_translations.attribute_value_id",
	Name:             "attribute_value_translations.name",
	RichText:         "attribute_value_translations.rich_text",
}

// Generated where

type whereHelpermodel_types_NullString struct{ field string }

func (w whereHelpermodel_types_NullString) EQ(x model_types.NullString) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpermodel_types_NullString) NEQ(x model_types.NullString) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpermodel_types_NullString) LT(x model_types.NullString) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpermodel_types_NullString) LTE(x model_types.NullString) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpermodel_types_NullString) GT(x model_types.NullString) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpermodel_types_NullString) GTE(x model_types.NullString) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpermodel_types_NullString) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpermodel_types_NullString) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var AttributeValueTranslationWhere = struct {
	ID               whereHelperstring
	LanguageCode     whereHelperLanguagecode
	AttributeValueID whereHelperstring
	Name             whereHelperstring
	RichText         whereHelpermodel_types_NullString
}{
	ID:               whereHelperstring{field: "\"attribute_value_translations\".\"id\""},
	LanguageCode:     whereHelperLanguagecode{field: "\"attribute_value_translations\".\"language_code\""},
	AttributeValueID: whereHelperstring{field: "\"attribute_value_translations\".\"attribute_value_id\""},
	Name:             whereHelperstring{field: "\"attribute_value_translations\".\"name\""},
	RichText:         whereHelpermodel_types_NullString{field: "\"attribute_value_translations\".\"rich_text\""},
}

// AttributeValueTranslationRels is where relationship names are stored.
var AttributeValueTranslationRels = struct {
}{}

// attributeValueTranslationR is where relationships are stored.
type attributeValueTranslationR struct {
}

// NewStruct creates a new relationship struct
func (*attributeValueTranslationR) NewStruct() *attributeValueTranslationR {
	return &attributeValueTranslationR{}
}

// attributeValueTranslationL is where Load methods for each relationship are stored.
type attributeValueTranslationL struct{}

var (
	attributeValueTranslationAllColumns            = []string{"id", "language_code", "attribute_value_id", "name", "rich_text"}
	attributeValueTranslationColumnsWithoutDefault = []string{"language_code", "attribute_value_id", "name"}
	attributeValueTranslationColumnsWithDefault    = []string{"id", "rich_text"}
	attributeValueTranslationPrimaryKeyColumns     = []string{"id"}
	attributeValueTranslationGeneratedColumns      = []string{}
)

type (
	// AttributeValueTranslationSlice is an alias for a slice of pointers to AttributeValueTranslation.
	// This should almost always be used instead of []AttributeValueTranslation.
	AttributeValueTranslationSlice []*AttributeValueTranslation

	attributeValueTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributeValueTranslationType                 = reflect.TypeOf(&AttributeValueTranslation{})
	attributeValueTranslationMapping              = queries.MakeStructMapping(attributeValueTranslationType)
	attributeValueTranslationPrimaryKeyMapping, _ = queries.BindMapping(attributeValueTranslationType, attributeValueTranslationMapping, attributeValueTranslationPrimaryKeyColumns)
	attributeValueTranslationInsertCacheMut       sync.RWMutex
	attributeValueTranslationInsertCache          = make(map[string]insertCache)
	attributeValueTranslationUpdateCacheMut       sync.RWMutex
	attributeValueTranslationUpdateCache          = make(map[string]updateCache)
	attributeValueTranslationUpsertCacheMut       sync.RWMutex
	attributeValueTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single attributeValueTranslation record from the query.
func (q attributeValueTranslationQuery) One(exec boil.Executor) (*AttributeValueTranslation, error) {
	o := &AttributeValueTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for attribute_value_translations")
	}

	return o, nil
}

// All returns all AttributeValueTranslation records from the query.
func (q attributeValueTranslationQuery) All(exec boil.Executor) (AttributeValueTranslationSlice, error) {
	var o []*AttributeValueTranslation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to AttributeValueTranslation slice")
	}

	return o, nil
}

// Count returns the count of all AttributeValueTranslation records in the query.
func (q attributeValueTranslationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count attribute_value_translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attributeValueTranslationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if attribute_value_translations exists")
	}

	return count > 0, nil
}

// AttributeValueTranslations retrieves all the records using an executor.
func AttributeValueTranslations(mods ...qm.QueryMod) attributeValueTranslationQuery {
	mods = append(mods, qm.From("\"attribute_value_translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"attribute_value_translations\".*"})
	}

	return attributeValueTranslationQuery{q}
}

// FindAttributeValueTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttributeValueTranslation(exec boil.Executor, iD string, selectCols ...string) (*AttributeValueTranslation, error) {
	attributeValueTranslationObj := &AttributeValueTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attribute_value_translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, attributeValueTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from attribute_value_translations")
	}

	return attributeValueTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AttributeValueTranslation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no attribute_value_translations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(attributeValueTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributeValueTranslationInsertCacheMut.RLock()
	cache, cached := attributeValueTranslationInsertCache[key]
	attributeValueTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributeValueTranslationAllColumns,
			attributeValueTranslationColumnsWithDefault,
			attributeValueTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributeValueTranslationType, attributeValueTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributeValueTranslationType, attributeValueTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attribute_value_translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attribute_value_translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into attribute_value_translations")
	}

	if !cached {
		attributeValueTranslationInsertCacheMut.Lock()
		attributeValueTranslationInsertCache[key] = cache
		attributeValueTranslationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AttributeValueTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AttributeValueTranslation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	attributeValueTranslationUpdateCacheMut.RLock()
	cache, cached := attributeValueTranslationUpdateCache[key]
	attributeValueTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributeValueTranslationAllColumns,
			attributeValueTranslationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update attribute_value_translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attribute_value_translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributeValueTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributeValueTranslationType, attributeValueTranslationMapping, append(wl, attributeValueTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update attribute_value_translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for attribute_value_translations")
	}

	if !cached {
		attributeValueTranslationUpdateCacheMut.Lock()
		attributeValueTranslationUpdateCache[key] = cache
		attributeValueTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q attributeValueTranslationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for attribute_value_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for attribute_value_translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributeValueTranslationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeValueTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attribute_value_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributeValueTranslationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in attributeValueTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all attributeValueTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AttributeValueTranslation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no attribute_value_translations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeValueTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributeValueTranslationUpsertCacheMut.RLock()
	cache, cached := attributeValueTranslationUpsertCache[key]
	attributeValueTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attributeValueTranslationAllColumns,
			attributeValueTranslationColumnsWithDefault,
			attributeValueTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			attributeValueTranslationAllColumns,
			attributeValueTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert attribute_value_translations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(attributeValueTranslationPrimaryKeyColumns))
			copy(conflict, attributeValueTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"attribute_value_translations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(attributeValueTranslationType, attributeValueTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributeValueTranslationType, attributeValueTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert attribute_value_translations")
	}

	if !cached {
		attributeValueTranslationUpsertCacheMut.Lock()
		attributeValueTranslationUpsertCache[key] = cache
		attributeValueTranslationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AttributeValueTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AttributeValueTranslation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no AttributeValueTranslation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributeValueTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"attribute_value_translations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from attribute_value_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for attribute_value_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attributeValueTranslationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no attributeValueTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from attribute_value_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for attribute_value_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributeValueTranslationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeValueTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attribute_value_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeValueTranslationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from attributeValueTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for attribute_value_translations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AttributeValueTranslation) Reload(exec boil.Executor) error {
	ret, err := FindAttributeValueTranslation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributeValueTranslationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributeValueTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeValueTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attribute_value_translations\".* FROM \"attribute_value_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeValueTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in AttributeValueTranslationSlice")
	}

	*o = slice

	return nil
}

// AttributeValueTranslationExists checks if the AttributeValueTranslation row exists.
func AttributeValueTranslationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attribute_value_translations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if attribute_value_translations exists")
	}

	return exists, nil
}

// Exists checks if the AttributeValueTranslation row exists.
func (o *AttributeValueTranslation) Exists(exec boil.Executor) (bool, error) {
	return AttributeValueTranslationExists(exec, o.ID)
}
