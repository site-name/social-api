// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TaxClassCountryRate is an object representing the database table.
type TaxClassCountryRate struct {
	ID         string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	TaxClassID model_types.NullString `boil:"tax_class_id" json:"tax_class_id,omitempty" toml:"tax_class_id" yaml:"tax_class_id,omitempty"`
	Country    CountryCode            `boil:"country" json:"country" toml:"country" yaml:"country"`
	Rate       decimal.Decimal        `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`

	R *taxClassCountryRateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taxClassCountryRateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaxClassCountryRateColumns = struct {
	ID         string
	TaxClassID string
	Country    string
	Rate       string
}{
	ID:         "id",
	TaxClassID: "tax_class_id",
	Country:    "country",
	Rate:       "rate",
}

var TaxClassCountryRateTableColumns = struct {
	ID         string
	TaxClassID string
	Country    string
	Rate       string
}{
	ID:         "tax_class_country_rates.id",
	TaxClassID: "tax_class_country_rates.tax_class_id",
	Country:    "tax_class_country_rates.country",
	Rate:       "tax_class_country_rates.rate",
}

// Generated where

var TaxClassCountryRateWhere = struct {
	ID         whereHelperstring
	TaxClassID whereHelpermodel_types_NullString
	Country    whereHelperCountryCode
	Rate       whereHelperdecimal_Decimal
}{
	ID:         whereHelperstring{field: "\"tax_class_country_rates\".\"id\""},
	TaxClassID: whereHelpermodel_types_NullString{field: "\"tax_class_country_rates\".\"tax_class_id\""},
	Country:    whereHelperCountryCode{field: "\"tax_class_country_rates\".\"country\""},
	Rate:       whereHelperdecimal_Decimal{field: "\"tax_class_country_rates\".\"rate\""},
}

// TaxClassCountryRateRels is where relationship names are stored.
var TaxClassCountryRateRels = struct {
	TaxClass string
}{
	TaxClass: "TaxClass",
}

// taxClassCountryRateR is where relationships are stored.
type taxClassCountryRateR struct {
	TaxClass *TaxClass `boil:"TaxClass" json:"TaxClass" toml:"TaxClass" yaml:"TaxClass"`
}

// NewStruct creates a new relationship struct
func (*taxClassCountryRateR) NewStruct() *taxClassCountryRateR {
	return &taxClassCountryRateR{}
}

func (r *taxClassCountryRateR) GetTaxClass() *TaxClass {
	if r == nil {
		return nil
	}
	return r.TaxClass
}

// taxClassCountryRateL is where Load methods for each relationship are stored.
type taxClassCountryRateL struct{}

var (
	taxClassCountryRateAllColumns            = []string{"id", "tax_class_id", "country", "rate"}
	taxClassCountryRateColumnsWithoutDefault = []string{"id", "country", "rate"}
	taxClassCountryRateColumnsWithDefault    = []string{"tax_class_id"}
	taxClassCountryRatePrimaryKeyColumns     = []string{"id"}
	taxClassCountryRateGeneratedColumns      = []string{}
)

type (
	// TaxClassCountryRateSlice is an alias for a slice of pointers to TaxClassCountryRate.
	// This should almost always be used instead of []TaxClassCountryRate.
	TaxClassCountryRateSlice []*TaxClassCountryRate

	taxClassCountryRateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taxClassCountryRateType                 = reflect.TypeOf(&TaxClassCountryRate{})
	taxClassCountryRateMapping              = queries.MakeStructMapping(taxClassCountryRateType)
	taxClassCountryRatePrimaryKeyMapping, _ = queries.BindMapping(taxClassCountryRateType, taxClassCountryRateMapping, taxClassCountryRatePrimaryKeyColumns)
	taxClassCountryRateInsertCacheMut       sync.RWMutex
	taxClassCountryRateInsertCache          = make(map[string]insertCache)
	taxClassCountryRateUpdateCacheMut       sync.RWMutex
	taxClassCountryRateUpdateCache          = make(map[string]updateCache)
	taxClassCountryRateUpsertCacheMut       sync.RWMutex
	taxClassCountryRateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single taxClassCountryRate record from the query.
func (q taxClassCountryRateQuery) One(exec boil.Executor) (*TaxClassCountryRate, error) {
	o := &TaxClassCountryRate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for tax_class_country_rates")
	}

	return o, nil
}

// All returns all TaxClassCountryRate records from the query.
func (q taxClassCountryRateQuery) All(exec boil.Executor) (TaxClassCountryRateSlice, error) {
	var o []*TaxClassCountryRate

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TaxClassCountryRate slice")
	}

	return o, nil
}

// Count returns the count of all TaxClassCountryRate records in the query.
func (q taxClassCountryRateQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count tax_class_country_rates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q taxClassCountryRateQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if tax_class_country_rates exists")
	}

	return count > 0, nil
}

// TaxClass pointed to by the foreign key.
func (o *TaxClassCountryRate) TaxClass(mods ...qm.QueryMod) taxClassQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TaxClassID),
	}

	queryMods = append(queryMods, mods...)

	return TaxClasses(queryMods...)
}

// LoadTaxClass allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxClassCountryRateL) LoadTaxClass(e boil.Executor, singular bool, maybeTaxClassCountryRate interface{}, mods queries.Applicator) error {
	var slice []*TaxClassCountryRate
	var object *TaxClassCountryRate

	if singular {
		var ok bool
		object, ok = maybeTaxClassCountryRate.(*TaxClassCountryRate)
		if !ok {
			object = new(TaxClassCountryRate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxClassCountryRate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxClassCountryRate))
			}
		}
	} else {
		s, ok := maybeTaxClassCountryRate.(*[]*TaxClassCountryRate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxClassCountryRate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxClassCountryRate))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &taxClassCountryRateR{}
		}
		if !queries.IsNil(object.TaxClassID) {
			args[object.TaxClassID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxClassCountryRateR{}
			}

			if !queries.IsNil(obj.TaxClassID) {
				args[obj.TaxClassID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tax_classes`),
		qm.WhereIn(`tax_classes.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TaxClass")
	}

	var resultSlice []*TaxClass
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TaxClass")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tax_classes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_classes")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TaxClass = foreign
		if foreign.R == nil {
			foreign.R = &taxClassR{}
		}
		foreign.R.TaxClassCountryRates = append(foreign.R.TaxClassCountryRates, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TaxClassID, foreign.ID) {
				local.R.TaxClass = foreign
				if foreign.R == nil {
					foreign.R = &taxClassR{}
				}
				foreign.R.TaxClassCountryRates = append(foreign.R.TaxClassCountryRates, local)
				break
			}
		}
	}

	return nil
}

// SetTaxClass of the taxClassCountryRate to the related item.
// Sets o.R.TaxClass to related.
// Adds o to related.R.TaxClassCountryRates.
func (o *TaxClassCountryRate) SetTaxClass(exec boil.Executor, insert bool, related *TaxClass) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tax_class_country_rates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tax_class_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxClassCountryRatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TaxClassID, related.ID)
	if o.R == nil {
		o.R = &taxClassCountryRateR{
			TaxClass: related,
		}
	} else {
		o.R.TaxClass = related
	}

	if related.R == nil {
		related.R = &taxClassR{
			TaxClassCountryRates: TaxClassCountryRateSlice{o},
		}
	} else {
		related.R.TaxClassCountryRates = append(related.R.TaxClassCountryRates, o)
	}

	return nil
}

// RemoveTaxClass relationship.
// Sets o.R.TaxClass to nil.
// Removes o from all passed in related items' relationships struct.
func (o *TaxClassCountryRate) RemoveTaxClass(exec boil.Executor, related *TaxClass) error {
	var err error

	queries.SetScanner(&o.TaxClassID, nil)
	if _, err = o.Update(exec, boil.Whitelist("tax_class_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TaxClass = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TaxClassCountryRates {
		if queries.Equal(o.TaxClassID, ri.TaxClassID) {
			continue
		}

		ln := len(related.R.TaxClassCountryRates)
		if ln > 1 && i < ln-1 {
			related.R.TaxClassCountryRates[i] = related.R.TaxClassCountryRates[ln-1]
		}
		related.R.TaxClassCountryRates = related.R.TaxClassCountryRates[:ln-1]
		break
	}
	return nil
}

// TaxClassCountryRates retrieves all the records using an executor.
func TaxClassCountryRates(mods ...qm.QueryMod) taxClassCountryRateQuery {
	mods = append(mods, qm.From("\"tax_class_country_rates\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tax_class_country_rates\".*"})
	}

	return taxClassCountryRateQuery{q}
}

// FindTaxClassCountryRate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaxClassCountryRate(exec boil.Executor, iD string, selectCols ...string) (*TaxClassCountryRate, error) {
	taxClassCountryRateObj := &TaxClassCountryRate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tax_class_country_rates\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, taxClassCountryRateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from tax_class_country_rates")
	}

	return taxClassCountryRateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaxClassCountryRate) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tax_class_country_rates provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(taxClassCountryRateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taxClassCountryRateInsertCacheMut.RLock()
	cache, cached := taxClassCountryRateInsertCache[key]
	taxClassCountryRateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taxClassCountryRateAllColumns,
			taxClassCountryRateColumnsWithDefault,
			taxClassCountryRateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taxClassCountryRateType, taxClassCountryRateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taxClassCountryRateType, taxClassCountryRateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tax_class_country_rates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tax_class_country_rates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into tax_class_country_rates")
	}

	if !cached {
		taxClassCountryRateInsertCacheMut.Lock()
		taxClassCountryRateInsertCache[key] = cache
		taxClassCountryRateInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TaxClassCountryRate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaxClassCountryRate) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	taxClassCountryRateUpdateCacheMut.RLock()
	cache, cached := taxClassCountryRateUpdateCache[key]
	taxClassCountryRateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taxClassCountryRateAllColumns,
			taxClassCountryRatePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update tax_class_country_rates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tax_class_country_rates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, taxClassCountryRatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taxClassCountryRateType, taxClassCountryRateMapping, append(wl, taxClassCountryRatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update tax_class_country_rates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for tax_class_country_rates")
	}

	if !cached {
		taxClassCountryRateUpdateCacheMut.Lock()
		taxClassCountryRateUpdateCache[key] = cache
		taxClassCountryRateUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q taxClassCountryRateQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for tax_class_country_rates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for tax_class_country_rates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaxClassCountryRateSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxClassCountryRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tax_class_country_rates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, taxClassCountryRatePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in taxClassCountryRate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all taxClassCountryRate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaxClassCountryRate) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no tax_class_country_rates provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(taxClassCountryRateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taxClassCountryRateUpsertCacheMut.RLock()
	cache, cached := taxClassCountryRateUpsertCache[key]
	taxClassCountryRateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			taxClassCountryRateAllColumns,
			taxClassCountryRateColumnsWithDefault,
			taxClassCountryRateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			taxClassCountryRateAllColumns,
			taxClassCountryRatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert tax_class_country_rates, could not build update column list")
		}

		ret := strmangle.SetComplement(taxClassCountryRateAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(taxClassCountryRatePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert tax_class_country_rates, could not build conflict column list")
			}

			conflict = make([]string, len(taxClassCountryRatePrimaryKeyColumns))
			copy(conflict, taxClassCountryRatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tax_class_country_rates\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(taxClassCountryRateType, taxClassCountryRateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taxClassCountryRateType, taxClassCountryRateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert tax_class_country_rates")
	}

	if !cached {
		taxClassCountryRateUpsertCacheMut.Lock()
		taxClassCountryRateUpsertCache[key] = cache
		taxClassCountryRateUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TaxClassCountryRate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaxClassCountryRate) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TaxClassCountryRate provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taxClassCountryRatePrimaryKeyMapping)
	sql := "DELETE FROM \"tax_class_country_rates\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from tax_class_country_rates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for tax_class_country_rates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taxClassCountryRateQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no taxClassCountryRateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from tax_class_country_rates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for tax_class_country_rates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaxClassCountryRateSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxClassCountryRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tax_class_country_rates\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, taxClassCountryRatePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from taxClassCountryRate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for tax_class_country_rates")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaxClassCountryRate) Reload(exec boil.Executor) error {
	ret, err := FindTaxClassCountryRate(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxClassCountryRateSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaxClassCountryRateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxClassCountryRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tax_class_country_rates\".* FROM \"tax_class_country_rates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taxClassCountryRatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TaxClassCountryRateSlice")
	}

	*o = slice

	return nil
}

// TaxClassCountryRateExists checks if the TaxClassCountryRate row exists.
func TaxClassCountryRateExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tax_class_country_rates\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if tax_class_country_rates exists")
	}

	return exists, nil
}

// Exists checks if the TaxClassCountryRate row exists.
func (o *TaxClassCountryRate) Exists(exec boil.Executor) (bool, error) {
	return TaxClassCountryRateExists(exec, o.ID)
}
