// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductVariantChannelListing is an object representing the database table.
type ProductVariantChannelListing struct {
	ID                        string                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	VariantID                 string                  `boil:"variant_id" json:"variant_id" toml:"variant_id" yaml:"variant_id"`
	ChannelID                 string                  `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	Currency                  NullCurrency            `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	PriceAmount               model_types.NullDecimal `boil:"price_amount" json:"price_amount,omitempty" toml:"price_amount" yaml:"price_amount,omitempty"`
	CostPriceAmount           model_types.NullDecimal `boil:"cost_price_amount" json:"cost_price_amount,omitempty" toml:"cost_price_amount" yaml:"cost_price_amount,omitempty"`
	PreorderQuantityThreshold model_types.NullInt     `boil:"preorder_quantity_threshold" json:"preorder_quantity_threshold,omitempty" toml:"preorder_quantity_threshold" yaml:"preorder_quantity_threshold,omitempty"`
	CreatedAt                 int64                   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Annotations               model_types.JSONString  `boil:"annotations" json:"-" toml:"-" yaml:"-"`

	R *productVariantChannelListingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productVariantChannelListingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductVariantChannelListingColumns = struct {
	ID                        string
	VariantID                 string
	ChannelID                 string
	Currency                  string
	PriceAmount               string
	CostPriceAmount           string
	PreorderQuantityThreshold string
	CreatedAt                 string
	Annotations               string
}{
	ID:                        "id",
	VariantID:                 "variant_id",
	ChannelID:                 "channel_id",
	Currency:                  "currency",
	PriceAmount:               "price_amount",
	CostPriceAmount:           "cost_price_amount",
	PreorderQuantityThreshold: "preorder_quantity_threshold",
	CreatedAt:                 "created_at",
	Annotations:               "annotations",
}

var ProductVariantChannelListingTableColumns = struct {
	ID                        string
	VariantID                 string
	ChannelID                 string
	Currency                  string
	PriceAmount               string
	CostPriceAmount           string
	PreorderQuantityThreshold string
	CreatedAt                 string
	Annotations               string
}{
	ID:                        "product_variant_channel_listings.id",
	VariantID:                 "product_variant_channel_listings.variant_id",
	ChannelID:                 "product_variant_channel_listings.channel_id",
	Currency:                  "product_variant_channel_listings.currency",
	PriceAmount:               "product_variant_channel_listings.price_amount",
	CostPriceAmount:           "product_variant_channel_listings.cost_price_amount",
	PreorderQuantityThreshold: "product_variant_channel_listings.preorder_quantity_threshold",
	CreatedAt:                 "product_variant_channel_listings.created_at",
	Annotations:               "product_variant_channel_listings.annotations",
}

// Generated where

type whereHelperNullCurrency struct{ field string }

func (w whereHelperNullCurrency) EQ(x NullCurrency) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullCurrency) NEQ(x NullCurrency) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullCurrency) LT(x NullCurrency) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullCurrency) LTE(x NullCurrency) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullCurrency) GT(x NullCurrency) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullCurrency) GTE(x NullCurrency) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullCurrency) IN(slice []NullCurrency) qm.QueryMod {
	values := make([]any, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullCurrency) NIN(slice []NullCurrency) qm.QueryMod {
	values := make([]any, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullCurrency) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperNullCurrency) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ProductVariantChannelListingWhere = struct {
	ID                        whereHelperstring
	VariantID                 whereHelperstring
	ChannelID                 whereHelperstring
	Currency                  whereHelperNullCurrency
	PriceAmount               whereHelpermodel_types_NullDecimal
	CostPriceAmount           whereHelpermodel_types_NullDecimal
	PreorderQuantityThreshold whereHelpermodel_types_NullInt
	CreatedAt                 whereHelperint64
	Annotations               whereHelpermodel_types_JSONString
}{
	ID:                        whereHelperstring{field: "\"product_variant_channel_listings\".\"id\""},
	VariantID:                 whereHelperstring{field: "\"product_variant_channel_listings\".\"variant_id\""},
	ChannelID:                 whereHelperstring{field: "\"product_variant_channel_listings\".\"channel_id\""},
	Currency:                  whereHelperNullCurrency{field: "\"product_variant_channel_listings\".\"currency\""},
	PriceAmount:               whereHelpermodel_types_NullDecimal{field: "\"product_variant_channel_listings\".\"price_amount\""},
	CostPriceAmount:           whereHelpermodel_types_NullDecimal{field: "\"product_variant_channel_listings\".\"cost_price_amount\""},
	PreorderQuantityThreshold: whereHelpermodel_types_NullInt{field: "\"product_variant_channel_listings\".\"preorder_quantity_threshold\""},
	CreatedAt:                 whereHelperint64{field: "\"product_variant_channel_listings\".\"created_at\""},
	Annotations:               whereHelpermodel_types_JSONString{field: "\"product_variant_channel_listings\".\"annotations\""},
}

// ProductVariantChannelListingRels is where relationship names are stored.
var ProductVariantChannelListingRels = struct {
	Channel string
	Variant string
}{
	Channel: "Channel",
	Variant: "Variant",
}

// productVariantChannelListingR is where relationships are stored.
type productVariantChannelListingR struct {
	Channel *Channel        `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
	Variant *ProductVariant `boil:"Variant" json:"Variant" toml:"Variant" yaml:"Variant"`
}

// NewStruct creates a new relationship struct
func (*productVariantChannelListingR) NewStruct() *productVariantChannelListingR {
	return &productVariantChannelListingR{}
}

func (r *productVariantChannelListingR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *productVariantChannelListingR) GetVariant() *ProductVariant {
	if r == nil {
		return nil
	}
	return r.Variant
}

// productVariantChannelListingL is where Load methods for each relationship are stored.
type productVariantChannelListingL struct{}

var (
	productVariantChannelListingAllColumns            = []string{"id", "variant_id", "channel_id", "currency", "price_amount", "cost_price_amount", "preorder_quantity_threshold", "created_at", "annotations"}
	productVariantChannelListingColumnsWithoutDefault = []string{"id", "variant_id", "channel_id", "created_at"}
	productVariantChannelListingColumnsWithDefault    = []string{"currency", "price_amount", "cost_price_amount", "preorder_quantity_threshold", "annotations"}
	productVariantChannelListingPrimaryKeyColumns     = []string{"id"}
	productVariantChannelListingGeneratedColumns      = []string{}
)

type (
	// ProductVariantChannelListingSlice is an alias for a slice of pointers to ProductVariantChannelListing.
	// This should almost always be used instead of []ProductVariantChannelListing.
	ProductVariantChannelListingSlice []*ProductVariantChannelListing

	productVariantChannelListingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productVariantChannelListingType                 = reflect.TypeOf(&ProductVariantChannelListing{})
	productVariantChannelListingMapping              = queries.MakeStructMapping(productVariantChannelListingType)
	productVariantChannelListingPrimaryKeyMapping, _ = queries.BindMapping(productVariantChannelListingType, productVariantChannelListingMapping, productVariantChannelListingPrimaryKeyColumns)
	productVariantChannelListingInsertCacheMut       sync.RWMutex
	productVariantChannelListingInsertCache          = make(map[string]insertCache)
	productVariantChannelListingUpdateCacheMut       sync.RWMutex
	productVariantChannelListingUpdateCache          = make(map[string]updateCache)
	productVariantChannelListingUpsertCacheMut       sync.RWMutex
	productVariantChannelListingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single productVariantChannelListing record from the query.
func (q productVariantChannelListingQuery) One(exec boil.Executor) (*ProductVariantChannelListing, error) {
	o := &ProductVariantChannelListing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for product_variant_channel_listings")
	}

	return o, nil
}

// All returns all ProductVariantChannelListing records from the query.
func (q productVariantChannelListingQuery) All(exec boil.Executor) (ProductVariantChannelListingSlice, error) {
	var o []*ProductVariantChannelListing

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ProductVariantChannelListing slice")
	}

	return o, nil
}

// Count returns the count of all ProductVariantChannelListing records in the query.
func (q productVariantChannelListingQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count product_variant_channel_listings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productVariantChannelListingQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if product_variant_channel_listings exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *ProductVariantChannelListing) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// Variant pointed to by the foreign key.
func (o *ProductVariantChannelListing) Variant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VariantID),
	}

	queryMods = append(queryMods, mods...)

	return ProductVariants(queryMods...)
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productVariantChannelListingL) LoadChannel(e boil.Executor, singular bool, maybeProductVariantChannelListing any, mods queries.Applicator) error {
	var slice []*ProductVariantChannelListing
	var object *ProductVariantChannelListing

	if singular {
		var ok bool
		object, ok = maybeProductVariantChannelListing.(*ProductVariantChannelListing)
		if !ok {
			object = new(ProductVariantChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariantChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariantChannelListing))
			}
		}
	} else {
		s, ok := maybeProductVariantChannelListing.(*[]*ProductVariantChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariantChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariantChannelListing))
			}
		}
	}

	args := make(map[any]struct{})
	if singular {
		if object.R == nil {
			object.R = &productVariantChannelListingR{}
		}
		args[object.ChannelID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantChannelListingR{}
			}

			args[obj.ChannelID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]any, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.ProductVariantChannelListings = append(foreign.R.ProductVariantChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.ProductVariantChannelListings = append(foreign.R.ProductVariantChannelListings, local)
				break
			}
		}
	}

	return nil
}

// LoadVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productVariantChannelListingL) LoadVariant(e boil.Executor, singular bool, maybeProductVariantChannelListing any, mods queries.Applicator) error {
	var slice []*ProductVariantChannelListing
	var object *ProductVariantChannelListing

	if singular {
		var ok bool
		object, ok = maybeProductVariantChannelListing.(*ProductVariantChannelListing)
		if !ok {
			object = new(ProductVariantChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariantChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariantChannelListing))
			}
		}
	} else {
		s, ok := maybeProductVariantChannelListing.(*[]*ProductVariantChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariantChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariantChannelListing))
			}
		}
	}

	args := make(map[any]struct{})
	if singular {
		if object.R == nil {
			object.R = &productVariantChannelListingR{}
		}
		args[object.VariantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantChannelListingR{}
			}

			args[obj.VariantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]any, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Variant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.VariantProductVariantChannelListings = append(foreign.R.VariantProductVariantChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariantID == foreign.ID {
				local.R.Variant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.VariantProductVariantChannelListings = append(foreign.R.VariantProductVariantChannelListings, local)
				break
			}
		}
	}

	return nil
}

// SetChannel of the productVariantChannelListing to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.ProductVariantChannelListings.
func (o *ProductVariantChannelListing) SetChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_variant_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, productVariantChannelListingPrimaryKeyColumns),
	)
	values := []any{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &productVariantChannelListingR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			ProductVariantChannelListings: ProductVariantChannelListingSlice{o},
		}
	} else {
		related.R.ProductVariantChannelListings = append(related.R.ProductVariantChannelListings, o)
	}

	return nil
}

// SetVariant of the productVariantChannelListing to the related item.
// Sets o.R.Variant to related.
// Adds o to related.R.VariantProductVariantChannelListings.
func (o *ProductVariantChannelListing) SetVariant(exec boil.Executor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_variant_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"variant_id"}),
		strmangle.WhereClause("\"", "\"", 2, productVariantChannelListingPrimaryKeyColumns),
	)
	values := []any{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariantID = related.ID
	if o.R == nil {
		o.R = &productVariantChannelListingR{
			Variant: related,
		}
	} else {
		o.R.Variant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			VariantProductVariantChannelListings: ProductVariantChannelListingSlice{o},
		}
	} else {
		related.R.VariantProductVariantChannelListings = append(related.R.VariantProductVariantChannelListings, o)
	}

	return nil
}

// ProductVariantChannelListings retrieves all the records using an executor.
func ProductVariantChannelListings(mods ...qm.QueryMod) productVariantChannelListingQuery {
	mods = append(mods, qm.From("\"product_variant_channel_listings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_variant_channel_listings\".*"})
	}

	return productVariantChannelListingQuery{q}
}

// FindProductVariantChannelListing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductVariantChannelListing(exec boil.Executor, iD string, selectCols ...string) (*ProductVariantChannelListing, error) {
	productVariantChannelListingObj := &ProductVariantChannelListing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_variant_channel_listings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, productVariantChannelListingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from product_variant_channel_listings")
	}

	return productVariantChannelListingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductVariantChannelListing) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_variant_channel_listings provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(productVariantChannelListingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productVariantChannelListingInsertCacheMut.RLock()
	cache, cached := productVariantChannelListingInsertCache[key]
	productVariantChannelListingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productVariantChannelListingAllColumns,
			productVariantChannelListingColumnsWithDefault,
			productVariantChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productVariantChannelListingType, productVariantChannelListingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productVariantChannelListingType, productVariantChannelListingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_variant_channel_listings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_variant_channel_listings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into product_variant_channel_listings")
	}

	if !cached {
		productVariantChannelListingInsertCacheMut.Lock()
		productVariantChannelListingInsertCache[key] = cache
		productVariantChannelListingInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ProductVariantChannelListing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductVariantChannelListing) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	productVariantChannelListingUpdateCacheMut.RLock()
	cache, cached := productVariantChannelListingUpdateCache[key]
	productVariantChannelListingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productVariantChannelListingAllColumns,
			productVariantChannelListingPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update product_variant_channel_listings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_variant_channel_listings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productVariantChannelListingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productVariantChannelListingType, productVariantChannelListingMapping, append(wl, productVariantChannelListingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update product_variant_channel_listings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for product_variant_channel_listings")
	}

	if !cached {
		productVariantChannelListingUpdateCacheMut.Lock()
		productVariantChannelListingUpdateCache[key] = cache
		productVariantChannelListingUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q productVariantChannelListingQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for product_variant_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for product_variant_channel_listings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductVariantChannelListingSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]any, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_variant_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productVariantChannelListingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in productVariantChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all productVariantChannelListing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductVariantChannelListing) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no product_variant_channel_listings provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(productVariantChannelListingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productVariantChannelListingUpsertCacheMut.RLock()
	cache, cached := productVariantChannelListingUpsertCache[key]
	productVariantChannelListingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productVariantChannelListingAllColumns,
			productVariantChannelListingColumnsWithDefault,
			productVariantChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productVariantChannelListingAllColumns,
			productVariantChannelListingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert product_variant_channel_listings, could not build update column list")
		}

		ret := strmangle.SetComplement(productVariantChannelListingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(productVariantChannelListingPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert product_variant_channel_listings, could not build conflict column list")
			}

			conflict = make([]string, len(productVariantChannelListingPrimaryKeyColumns))
			copy(conflict, productVariantChannelListingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_variant_channel_listings\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(productVariantChannelListingType, productVariantChannelListingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productVariantChannelListingType, productVariantChannelListingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []any
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert product_variant_channel_listings")
	}

	if !cached {
		productVariantChannelListingUpsertCacheMut.Lock()
		productVariantChannelListingUpsertCache[key] = cache
		productVariantChannelListingUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ProductVariantChannelListing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductVariantChannelListing) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ProductVariantChannelListing provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productVariantChannelListingPrimaryKeyMapping)
	sql := "DELETE FROM \"product_variant_channel_listings\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from product_variant_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for product_variant_channel_listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productVariantChannelListingQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no productVariantChannelListingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from product_variant_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_variant_channel_listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductVariantChannelListingSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []any
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_variant_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productVariantChannelListingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from productVariantChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_variant_channel_listings")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductVariantChannelListing) Reload(exec boil.Executor) error {
	ret, err := FindProductVariantChannelListing(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductVariantChannelListingSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductVariantChannelListingSlice{}
	var args []any
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_variant_channel_listings\".* FROM \"product_variant_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productVariantChannelListingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ProductVariantChannelListingSlice")
	}

	*o = slice

	return nil
}

// ProductVariantChannelListingExists checks if the ProductVariantChannelListing row exists.
func ProductVariantChannelListingExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_variant_channel_listings\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if product_variant_channel_listings exists")
	}

	return exists, nil
}

// Exists checks if the ProductVariantChannelListing row exists.
func (o *ProductVariantChannelListing) Exists(exec boil.Executor) (bool, error) {
	return ProductVariantChannelListingExists(exec, o.ID)
}
