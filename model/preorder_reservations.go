// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PreorderReservation is an object representing the database table.
type PreorderReservation struct {
	ID                             string                `boil:"id" json:"id" toml:"id" yaml:"id"`
	CheckoutLineID                 string                `boil:"checkout_line_id" json:"checkout_line_id" toml:"checkout_line_id" yaml:"checkout_line_id"`
	ProductVariantChannelListingID string                `boil:"product_variant_channel_listing_id" json:"product_variant_channel_listing_id" toml:"product_variant_channel_listing_id" yaml:"product_variant_channel_listing_id"`
	QuantityReserved               int                   `boil:"quantity_reserved" json:"quantity_reserved" toml:"quantity_reserved" yaml:"quantity_reserved"`
	ReservedUntil                  model_types.NullInt64 `boil:"reserved_until" json:"reserved_until,omitempty" toml:"reserved_until" yaml:"reserved_until,omitempty"`

	R *preorderReservationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L preorderReservationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PreorderReservationColumns = struct {
	ID                             string
	CheckoutLineID                 string
	ProductVariantChannelListingID string
	QuantityReserved               string
	ReservedUntil                  string
}{
	ID:                             "id",
	CheckoutLineID:                 "checkout_line_id",
	ProductVariantChannelListingID: "product_variant_channel_listing_id",
	QuantityReserved:               "quantity_reserved",
	ReservedUntil:                  "reserved_until",
}

var PreorderReservationTableColumns = struct {
	ID                             string
	CheckoutLineID                 string
	ProductVariantChannelListingID string
	QuantityReserved               string
	ReservedUntil                  string
}{
	ID:                             "preorder_reservations.id",
	CheckoutLineID:                 "preorder_reservations.checkout_line_id",
	ProductVariantChannelListingID: "preorder_reservations.product_variant_channel_listing_id",
	QuantityReserved:               "preorder_reservations.quantity_reserved",
	ReservedUntil:                  "preorder_reservations.reserved_until",
}

// Generated where

var PreorderReservationWhere = struct {
	ID                             whereHelperstring
	CheckoutLineID                 whereHelperstring
	ProductVariantChannelListingID whereHelperstring
	QuantityReserved               whereHelperint
	ReservedUntil                  whereHelpermodel_types_NullInt64
}{
	ID:                             whereHelperstring{field: "\"preorder_reservations\".\"id\""},
	CheckoutLineID:                 whereHelperstring{field: "\"preorder_reservations\".\"checkout_line_id\""},
	ProductVariantChannelListingID: whereHelperstring{field: "\"preorder_reservations\".\"product_variant_channel_listing_id\""},
	QuantityReserved:               whereHelperint{field: "\"preorder_reservations\".\"quantity_reserved\""},
	ReservedUntil:                  whereHelpermodel_types_NullInt64{field: "\"preorder_reservations\".\"reserved_until\""},
}

// PreorderReservationRels is where relationship names are stored.
var PreorderReservationRels = struct {
}{}

// preorderReservationR is where relationships are stored.
type preorderReservationR struct {
}

// NewStruct creates a new relationship struct
func (*preorderReservationR) NewStruct() *preorderReservationR {
	return &preorderReservationR{}
}

// preorderReservationL is where Load methods for each relationship are stored.
type preorderReservationL struct{}

var (
	preorderReservationAllColumns            = []string{"id", "checkout_line_id", "product_variant_channel_listing_id", "quantity_reserved", "reserved_until"}
	preorderReservationColumnsWithoutDefault = []string{"id", "checkout_line_id", "product_variant_channel_listing_id", "quantity_reserved"}
	preorderReservationColumnsWithDefault    = []string{"reserved_until"}
	preorderReservationPrimaryKeyColumns     = []string{"id"}
	preorderReservationGeneratedColumns      = []string{}
)

type (
	// PreorderReservationSlice is an alias for a slice of pointers to PreorderReservation.
	// This should almost always be used instead of []PreorderReservation.
	PreorderReservationSlice []*PreorderReservation

	preorderReservationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	preorderReservationType                 = reflect.TypeOf(&PreorderReservation{})
	preorderReservationMapping              = queries.MakeStructMapping(preorderReservationType)
	preorderReservationPrimaryKeyMapping, _ = queries.BindMapping(preorderReservationType, preorderReservationMapping, preorderReservationPrimaryKeyColumns)
	preorderReservationInsertCacheMut       sync.RWMutex
	preorderReservationInsertCache          = make(map[string]insertCache)
	preorderReservationUpdateCacheMut       sync.RWMutex
	preorderReservationUpdateCache          = make(map[string]updateCache)
	preorderReservationUpsertCacheMut       sync.RWMutex
	preorderReservationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single preorderReservation record from the query.
func (q preorderReservationQuery) One(exec boil.Executor) (*PreorderReservation, error) {
	o := &PreorderReservation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for preorder_reservations")
	}

	return o, nil
}

// All returns all PreorderReservation records from the query.
func (q preorderReservationQuery) All(exec boil.Executor) (PreorderReservationSlice, error) {
	var o []*PreorderReservation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to PreorderReservation slice")
	}

	return o, nil
}

// Count returns the count of all PreorderReservation records in the query.
func (q preorderReservationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count preorder_reservations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q preorderReservationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if preorder_reservations exists")
	}

	return count > 0, nil
}

// PreorderReservations retrieves all the records using an executor.
func PreorderReservations(mods ...qm.QueryMod) preorderReservationQuery {
	mods = append(mods, qm.From("\"preorder_reservations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"preorder_reservations\".*"})
	}

	return preorderReservationQuery{q}
}

// FindPreorderReservation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPreorderReservation(exec boil.Executor, iD string, selectCols ...string) (*PreorderReservation, error) {
	preorderReservationObj := &PreorderReservation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"preorder_reservations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, preorderReservationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from preorder_reservations")
	}

	return preorderReservationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PreorderReservation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no preorder_reservations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(preorderReservationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	preorderReservationInsertCacheMut.RLock()
	cache, cached := preorderReservationInsertCache[key]
	preorderReservationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			preorderReservationAllColumns,
			preorderReservationColumnsWithDefault,
			preorderReservationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(preorderReservationType, preorderReservationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(preorderReservationType, preorderReservationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"preorder_reservations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"preorder_reservations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into preorder_reservations")
	}

	if !cached {
		preorderReservationInsertCacheMut.Lock()
		preorderReservationInsertCache[key] = cache
		preorderReservationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PreorderReservation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PreorderReservation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	preorderReservationUpdateCacheMut.RLock()
	cache, cached := preorderReservationUpdateCache[key]
	preorderReservationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			preorderReservationAllColumns,
			preorderReservationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update preorder_reservations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"preorder_reservations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, preorderReservationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(preorderReservationType, preorderReservationMapping, append(wl, preorderReservationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update preorder_reservations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for preorder_reservations")
	}

	if !cached {
		preorderReservationUpdateCacheMut.Lock()
		preorderReservationUpdateCache[key] = cache
		preorderReservationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q preorderReservationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for preorder_reservations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for preorder_reservations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PreorderReservationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preorderReservationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"preorder_reservations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, preorderReservationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in preorderReservation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all preorderReservation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PreorderReservation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no preorder_reservations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(preorderReservationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	preorderReservationUpsertCacheMut.RLock()
	cache, cached := preorderReservationUpsertCache[key]
	preorderReservationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			preorderReservationAllColumns,
			preorderReservationColumnsWithDefault,
			preorderReservationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			preorderReservationAllColumns,
			preorderReservationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert preorder_reservations, could not build update column list")
		}

		ret := strmangle.SetComplement(preorderReservationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(preorderReservationPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert preorder_reservations, could not build conflict column list")
			}

			conflict = make([]string, len(preorderReservationPrimaryKeyColumns))
			copy(conflict, preorderReservationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"preorder_reservations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(preorderReservationType, preorderReservationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(preorderReservationType, preorderReservationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert preorder_reservations")
	}

	if !cached {
		preorderReservationUpsertCacheMut.Lock()
		preorderReservationUpsertCache[key] = cache
		preorderReservationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PreorderReservation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PreorderReservation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no PreorderReservation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), preorderReservationPrimaryKeyMapping)
	sql := "DELETE FROM \"preorder_reservations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from preorder_reservations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for preorder_reservations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q preorderReservationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no preorderReservationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from preorder_reservations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for preorder_reservations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PreorderReservationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preorderReservationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"preorder_reservations\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, preorderReservationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from preorderReservation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for preorder_reservations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PreorderReservation) Reload(exec boil.Executor) error {
	ret, err := FindPreorderReservation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PreorderReservationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PreorderReservationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preorderReservationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"preorder_reservations\".* FROM \"preorder_reservations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, preorderReservationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PreorderReservationSlice")
	}

	*o = slice

	return nil
}

// PreorderReservationExists checks if the PreorderReservation row exists.
func PreorderReservationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"preorder_reservations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if preorder_reservations exists")
	}

	return exists, nil
}

// Exists checks if the PreorderReservation row exists.
func (o *PreorderReservation) Exists(exec boil.Executor) (bool, error) {
	return PreorderReservationExists(exec, o.ID)
}
