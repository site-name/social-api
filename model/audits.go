// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Audit is an object representing the database table.
type Audit struct {
	ID        string `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt int64  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UserID    string `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Action    string `boil:"action" json:"action" toml:"action" yaml:"action"`
	ExtraInfo string `boil:"extra_info" json:"extra_info" toml:"extra_info" yaml:"extra_info"`
	IPAddress string `boil:"ip_address" json:"ip_address" toml:"ip_address" yaml:"ip_address"`
	SessionID string `boil:"session_id" json:"session_id" toml:"session_id" yaml:"session_id"`

	R *auditR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L auditL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuditColumns = struct {
	ID        string
	CreatedAt string
	UserID    string
	Action    string
	ExtraInfo string
	IPAddress string
	SessionID string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UserID:    "user_id",
	Action:    "action",
	ExtraInfo: "extra_info",
	IPAddress: "ip_address",
	SessionID: "session_id",
}

var AuditTableColumns = struct {
	ID        string
	CreatedAt string
	UserID    string
	Action    string
	ExtraInfo string
	IPAddress string
	SessionID string
}{
	ID:        "audits.id",
	CreatedAt: "audits.created_at",
	UserID:    "audits.user_id",
	Action:    "audits.action",
	ExtraInfo: "audits.extra_info",
	IPAddress: "audits.ip_address",
	SessionID: "audits.session_id",
}

// Generated where

var AuditWhere = struct {
	ID        whereHelperstring
	CreatedAt whereHelperint64
	UserID    whereHelperstring
	Action    whereHelperstring
	ExtraInfo whereHelperstring
	IPAddress whereHelperstring
	SessionID whereHelperstring
}{
	ID:        whereHelperstring{field: "\"audits\".\"id\""},
	CreatedAt: whereHelperint64{field: "\"audits\".\"created_at\""},
	UserID:    whereHelperstring{field: "\"audits\".\"user_id\""},
	Action:    whereHelperstring{field: "\"audits\".\"action\""},
	ExtraInfo: whereHelperstring{field: "\"audits\".\"extra_info\""},
	IPAddress: whereHelperstring{field: "\"audits\".\"ip_address\""},
	SessionID: whereHelperstring{field: "\"audits\".\"session_id\""},
}

// AuditRels is where relationship names are stored.
var AuditRels = struct {
}{}

// auditR is where relationships are stored.
type auditR struct {
}

// NewStruct creates a new relationship struct
func (*auditR) NewStruct() *auditR {
	return &auditR{}
}

// auditL is where Load methods for each relationship are stored.
type auditL struct{}

var (
	auditAllColumns            = []string{"id", "created_at", "user_id", "action", "extra_info", "ip_address", "session_id"}
	auditColumnsWithoutDefault = []string{"created_at", "user_id", "action", "extra_info", "ip_address", "session_id"}
	auditColumnsWithDefault    = []string{"id"}
	auditPrimaryKeyColumns     = []string{"id"}
	auditGeneratedColumns      = []string{}
)

type (
	// AuditSlice is an alias for a slice of pointers to Audit.
	// This should almost always be used instead of []Audit.
	AuditSlice []*Audit

	auditQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	auditType                 = reflect.TypeOf(&Audit{})
	auditMapping              = queries.MakeStructMapping(auditType)
	auditPrimaryKeyMapping, _ = queries.BindMapping(auditType, auditMapping, auditPrimaryKeyColumns)
	auditInsertCacheMut       sync.RWMutex
	auditInsertCache          = make(map[string]insertCache)
	auditUpdateCacheMut       sync.RWMutex
	auditUpdateCache          = make(map[string]updateCache)
	auditUpsertCacheMut       sync.RWMutex
	auditUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single audit record from the query.
func (q auditQuery) One(exec boil.Executor) (*Audit, error) {
	o := &Audit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for audits")
	}

	return o, nil
}

// All returns all Audit records from the query.
func (q auditQuery) All(exec boil.Executor) (AuditSlice, error) {
	var o []*Audit

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Audit slice")
	}

	return o, nil
}

// Count returns the count of all Audit records in the query.
func (q auditQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count audits rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q auditQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if audits exists")
	}

	return count > 0, nil
}

// Audits retrieves all the records using an executor.
func Audits(mods ...qm.QueryMod) auditQuery {
	mods = append(mods, qm.From("\"audits\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"audits\".*"})
	}

	return auditQuery{q}
}

// FindAudit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAudit(exec boil.Executor, iD string, selectCols ...string) (*Audit, error) {
	auditObj := &Audit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"audits\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, auditObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from audits")
	}

	return auditObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Audit) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no audits provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(auditColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	auditInsertCacheMut.RLock()
	cache, cached := auditInsertCache[key]
	auditInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			auditAllColumns,
			auditColumnsWithDefault,
			auditColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(auditType, auditMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(auditType, auditMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"audits\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"audits\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into audits")
	}

	if !cached {
		auditInsertCacheMut.Lock()
		auditInsertCache[key] = cache
		auditInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Audit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Audit) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	auditUpdateCacheMut.RLock()
	cache, cached := auditUpdateCache[key]
	auditUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			auditAllColumns,
			auditPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update audits, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"audits\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, auditPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(auditType, auditMapping, append(wl, auditPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update audits row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for audits")
	}

	if !cached {
		auditUpdateCacheMut.Lock()
		auditUpdateCache[key] = cache
		auditUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q auditQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for audits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for audits")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuditSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"audits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, auditPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in audit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all audit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Audit) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no audits provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(auditColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	auditUpsertCacheMut.RLock()
	cache, cached := auditUpsertCache[key]
	auditUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			auditAllColumns,
			auditColumnsWithDefault,
			auditColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			auditAllColumns,
			auditPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert audits, could not build update column list")
		}

		ret := strmangle.SetComplement(auditAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(auditPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert audits, could not build conflict column list")
			}

			conflict = make([]string, len(auditPrimaryKeyColumns))
			copy(conflict, auditPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"audits\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(auditType, auditMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(auditType, auditMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert audits")
	}

	if !cached {
		auditUpsertCacheMut.Lock()
		auditUpsertCache[key] = cache
		auditUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Audit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Audit) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Audit provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), auditPrimaryKeyMapping)
	sql := "DELETE FROM \"audits\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from audits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for audits")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q auditQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no auditQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from audits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for audits")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuditSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"audits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auditPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from audit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for audits")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Audit) Reload(exec boil.Executor) error {
	ret, err := FindAudit(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuditSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuditSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"audits\".* FROM \"audits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auditPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in AuditSlice")
	}

	*o = slice

	return nil
}

// AuditExists checks if the Audit row exists.
func AuditExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"audits\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if audits exists")
	}

	return exists, nil
}

// Exists checks if the Audit row exists.
func (o *Audit) Exists(exec boil.Executor) (bool, error) {
	return AuditExists(exec, o.ID)
}
