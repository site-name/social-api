// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Stock is an object representing the database table.
type Stock struct {
	ID               string `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt        int64  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	WarehouseID      string `boil:"warehouse_id" json:"warehouse_id" toml:"warehouse_id" yaml:"warehouse_id"`
	ProductVariantID string `boil:"product_variant_id" json:"product_variant_id" toml:"product_variant_id" yaml:"product_variant_id"`
	Quantity         int    `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`

	R *stockR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L stockL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StockColumns = struct {
	ID               string
	CreatedAt        string
	WarehouseID      string
	ProductVariantID string
	Quantity         string
}{
	ID:               "id",
	CreatedAt:        "created_at",
	WarehouseID:      "warehouse_id",
	ProductVariantID: "product_variant_id",
	Quantity:         "quantity",
}

var StockTableColumns = struct {
	ID               string
	CreatedAt        string
	WarehouseID      string
	ProductVariantID string
	Quantity         string
}{
	ID:               "stocks.id",
	CreatedAt:        "stocks.created_at",
	WarehouseID:      "stocks.warehouse_id",
	ProductVariantID: "stocks.product_variant_id",
	Quantity:         "stocks.quantity",
}

// Generated where

var StockWhere = struct {
	ID               whereHelperstring
	CreatedAt        whereHelperint64
	WarehouseID      whereHelperstring
	ProductVariantID whereHelperstring
	Quantity         whereHelperint
}{
	ID:               whereHelperstring{field: "\"stocks\".\"id\""},
	CreatedAt:        whereHelperint64{field: "\"stocks\".\"created_at\""},
	WarehouseID:      whereHelperstring{field: "\"stocks\".\"warehouse_id\""},
	ProductVariantID: whereHelperstring{field: "\"stocks\".\"product_variant_id\""},
	Quantity:         whereHelperint{field: "\"stocks\".\"quantity\""},
}

// StockRels is where relationship names are stored.
var StockRels = struct {
	Allocations string
}{
	Allocations: "Allocations",
}

// stockR is where relationships are stored.
type stockR struct {
	Allocations AllocationSlice `boil:"Allocations" json:"Allocations" toml:"Allocations" yaml:"Allocations"`
}

// NewStruct creates a new relationship struct
func (*stockR) NewStruct() *stockR {
	return &stockR{}
}

func (r *stockR) GetAllocations() AllocationSlice {
	if r == nil {
		return nil
	}
	return r.Allocations
}

// stockL is where Load methods for each relationship are stored.
type stockL struct{}

var (
	stockAllColumns            = []string{"id", "created_at", "warehouse_id", "product_variant_id", "quantity"}
	stockColumnsWithoutDefault = []string{"created_at", "warehouse_id", "product_variant_id", "quantity"}
	stockColumnsWithDefault    = []string{"id"}
	stockPrimaryKeyColumns     = []string{"id"}
	stockGeneratedColumns      = []string{}
)

type (
	// StockSlice is an alias for a slice of pointers to Stock.
	// This should almost always be used instead of []Stock.
	StockSlice []*Stock

	stockQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	stockType                 = reflect.TypeOf(&Stock{})
	stockMapping              = queries.MakeStructMapping(stockType)
	stockPrimaryKeyMapping, _ = queries.BindMapping(stockType, stockMapping, stockPrimaryKeyColumns)
	stockInsertCacheMut       sync.RWMutex
	stockInsertCache          = make(map[string]insertCache)
	stockUpdateCacheMut       sync.RWMutex
	stockUpdateCache          = make(map[string]updateCache)
	stockUpsertCacheMut       sync.RWMutex
	stockUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single stock record from the query.
func (q stockQuery) One(exec boil.Executor) (*Stock, error) {
	o := &Stock{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for stocks")
	}

	return o, nil
}

// All returns all Stock records from the query.
func (q stockQuery) All(exec boil.Executor) (StockSlice, error) {
	var o []*Stock

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Stock slice")
	}

	return o, nil
}

// Count returns the count of all Stock records in the query.
func (q stockQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count stocks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q stockQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if stocks exists")
	}

	return count > 0, nil
}

// Allocations retrieves all the allocation's Allocations with an executor.
func (o *Stock) Allocations(mods ...qm.QueryMod) allocationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"allocations\".\"stock_id\"=?", o.ID),
	)

	return Allocations(queryMods...)
}

// LoadAllocations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (stockL) LoadAllocations(e boil.Executor, singular bool, maybeStock interface{}, mods queries.Applicator) error {
	var slice []*Stock
	var object *Stock

	if singular {
		var ok bool
		object, ok = maybeStock.(*Stock)
		if !ok {
			object = new(Stock)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStock))
			}
		}
	} else {
		s, ok := maybeStock.(*[]*Stock)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStock)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStock))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &stockR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &stockR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`allocations`),
		qm.WhereIn(`allocations.stock_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load allocations")
	}

	var resultSlice []*Allocation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice allocations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on allocations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for allocations")
	}

	if singular {
		object.R.Allocations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &allocationR{}
			}
			foreign.R.Stock = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.StockID {
				local.R.Allocations = append(local.R.Allocations, foreign)
				if foreign.R == nil {
					foreign.R = &allocationR{}
				}
				foreign.R.Stock = local
				break
			}
		}
	}

	return nil
}

// AddAllocations adds the given related objects to the existing relationships
// of the stock, optionally inserting them as new records.
// Appends related to o.R.Allocations.
// Sets related.R.Stock appropriately.
func (o *Stock) AddAllocations(exec boil.Executor, insert bool, related ...*Allocation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.StockID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"allocations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"stock_id"}),
				strmangle.WhereClause("\"", "\"", 2, allocationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.StockID = o.ID
		}
	}

	if o.R == nil {
		o.R = &stockR{
			Allocations: related,
		}
	} else {
		o.R.Allocations = append(o.R.Allocations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &allocationR{
				Stock: o,
			}
		} else {
			rel.R.Stock = o
		}
	}
	return nil
}

// Stocks retrieves all the records using an executor.
func Stocks(mods ...qm.QueryMod) stockQuery {
	mods = append(mods, qm.From("\"stocks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"stocks\".*"})
	}

	return stockQuery{q}
}

// FindStock retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStock(exec boil.Executor, iD string, selectCols ...string) (*Stock, error) {
	stockObj := &Stock{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"stocks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, stockObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from stocks")
	}

	return stockObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Stock) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no stocks provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(stockColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	stockInsertCacheMut.RLock()
	cache, cached := stockInsertCache[key]
	stockInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			stockAllColumns,
			stockColumnsWithDefault,
			stockColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(stockType, stockMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(stockType, stockMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"stocks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"stocks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into stocks")
	}

	if !cached {
		stockInsertCacheMut.Lock()
		stockInsertCache[key] = cache
		stockInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Stock.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Stock) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	stockUpdateCacheMut.RLock()
	cache, cached := stockUpdateCache[key]
	stockUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			stockAllColumns,
			stockPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update stocks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"stocks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, stockPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(stockType, stockMapping, append(wl, stockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update stocks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for stocks")
	}

	if !cached {
		stockUpdateCacheMut.Lock()
		stockUpdateCache[key] = cache
		stockUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q stockQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for stocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for stocks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StockSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"stocks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, stockPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in stock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all stock")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Stock) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no stocks provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(stockColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	stockUpsertCacheMut.RLock()
	cache, cached := stockUpsertCache[key]
	stockUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			stockAllColumns,
			stockColumnsWithDefault,
			stockColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			stockAllColumns,
			stockPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert stocks, could not build update column list")
		}

		ret := strmangle.SetComplement(stockAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(stockPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert stocks, could not build conflict column list")
			}

			conflict = make([]string, len(stockPrimaryKeyColumns))
			copy(conflict, stockPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"stocks\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(stockType, stockMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(stockType, stockMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert stocks")
	}

	if !cached {
		stockUpsertCacheMut.Lock()
		stockUpsertCache[key] = cache
		stockUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Stock record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Stock) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Stock provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), stockPrimaryKeyMapping)
	sql := "DELETE FROM \"stocks\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from stocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for stocks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q stockQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no stockQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from stocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for stocks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StockSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"stocks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from stock slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for stocks")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Stock) Reload(exec boil.Executor) error {
	ret, err := FindStock(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StockSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StockSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), stockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"stocks\".* FROM \"stocks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, stockPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in StockSlice")
	}

	*o = slice

	return nil
}

// StockExists checks if the Stock row exists.
func StockExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"stocks\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if stocks exists")
	}

	return exists, nil
}

// Exists checks if the Stock row exists.
func (o *Stock) Exists(exec boil.Executor) (bool, error) {
	return StockExists(exec, o.ID)
}
