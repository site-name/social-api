// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TaxConfiguration is an object representing the database table.
type TaxConfiguration struct {
	ID                     string                     `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChannelID              string                     `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	ChargeTaxes            bool                       `boil:"charge_taxes" json:"charge_taxes" toml:"charge_taxes" yaml:"charge_taxes"`
	TaxCalculationStrategy NullTaxCalculationStrategy `boil:"tax_calculation_strategy" json:"tax_calculation_strategy,omitempty" toml:"tax_calculation_strategy" yaml:"tax_calculation_strategy,omitempty"`
	DisplayGrossPrice      bool                       `boil:"display_gross_price" json:"display_gross_price" toml:"display_gross_price" yaml:"display_gross_price"`
	PricesEnteredWithTax   bool                       `boil:"prices_entered_with_tax" json:"prices_entered_with_tax" toml:"prices_entered_with_tax" yaml:"prices_entered_with_tax"`
	TaxAppID               model_types.NullString     `boil:"tax_app_id" json:"tax_app_id,omitempty" toml:"tax_app_id" yaml:"tax_app_id,omitempty"`
	Metatata               model_types.JSONString     `boil:"metatata" json:"metatata,omitempty" toml:"metatata" yaml:"metatata,omitempty"`
	PrivateMetadata        model_types.JSONString     `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *taxConfigurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taxConfigurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TaxConfigurationColumns = struct {
	ID                     string
	ChannelID              string
	ChargeTaxes            string
	TaxCalculationStrategy string
	DisplayGrossPrice      string
	PricesEnteredWithTax   string
	TaxAppID               string
	Metatata               string
	PrivateMetadata        string
}{
	ID:                     "id",
	ChannelID:              "channel_id",
	ChargeTaxes:            "charge_taxes",
	TaxCalculationStrategy: "tax_calculation_strategy",
	DisplayGrossPrice:      "display_gross_price",
	PricesEnteredWithTax:   "prices_entered_with_tax",
	TaxAppID:               "tax_app_id",
	Metatata:               "metatata",
	PrivateMetadata:        "private_metadata",
}

var TaxConfigurationTableColumns = struct {
	ID                     string
	ChannelID              string
	ChargeTaxes            string
	TaxCalculationStrategy string
	DisplayGrossPrice      string
	PricesEnteredWithTax   string
	TaxAppID               string
	Metatata               string
	PrivateMetadata        string
}{
	ID:                     "tax_configurations.id",
	ChannelID:              "tax_configurations.channel_id",
	ChargeTaxes:            "tax_configurations.charge_taxes",
	TaxCalculationStrategy: "tax_configurations.tax_calculation_strategy",
	DisplayGrossPrice:      "tax_configurations.display_gross_price",
	PricesEnteredWithTax:   "tax_configurations.prices_entered_with_tax",
	TaxAppID:               "tax_configurations.tax_app_id",
	Metatata:               "tax_configurations.metatata",
	PrivateMetadata:        "tax_configurations.private_metadata",
}

// Generated where

type whereHelperNullTaxCalculationStrategy struct{ field string }

func (w whereHelperNullTaxCalculationStrategy) EQ(x NullTaxCalculationStrategy) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullTaxCalculationStrategy) NEQ(x NullTaxCalculationStrategy) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullTaxCalculationStrategy) LT(x NullTaxCalculationStrategy) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullTaxCalculationStrategy) LTE(x NullTaxCalculationStrategy) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullTaxCalculationStrategy) GT(x NullTaxCalculationStrategy) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullTaxCalculationStrategy) GTE(x NullTaxCalculationStrategy) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullTaxCalculationStrategy) IN(slice []NullTaxCalculationStrategy) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullTaxCalculationStrategy) NIN(slice []NullTaxCalculationStrategy) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullTaxCalculationStrategy) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelperNullTaxCalculationStrategy) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var TaxConfigurationWhere = struct {
	ID                     whereHelperstring
	ChannelID              whereHelperstring
	ChargeTaxes            whereHelperbool
	TaxCalculationStrategy whereHelperNullTaxCalculationStrategy
	DisplayGrossPrice      whereHelperbool
	PricesEnteredWithTax   whereHelperbool
	TaxAppID               whereHelpermodel_types_NullString
	Metatata               whereHelpermodel_types_JSONString
	PrivateMetadata        whereHelpermodel_types_JSONString
}{
	ID:                     whereHelperstring{field: "\"tax_configurations\".\"id\""},
	ChannelID:              whereHelperstring{field: "\"tax_configurations\".\"channel_id\""},
	ChargeTaxes:            whereHelperbool{field: "\"tax_configurations\".\"charge_taxes\""},
	TaxCalculationStrategy: whereHelperNullTaxCalculationStrategy{field: "\"tax_configurations\".\"tax_calculation_strategy\""},
	DisplayGrossPrice:      whereHelperbool{field: "\"tax_configurations\".\"display_gross_price\""},
	PricesEnteredWithTax:   whereHelperbool{field: "\"tax_configurations\".\"prices_entered_with_tax\""},
	TaxAppID:               whereHelpermodel_types_NullString{field: "\"tax_configurations\".\"tax_app_id\""},
	Metatata:               whereHelpermodel_types_JSONString{field: "\"tax_configurations\".\"metatata\""},
	PrivateMetadata:        whereHelpermodel_types_JSONString{field: "\"tax_configurations\".\"private_metadata\""},
}

// TaxConfigurationRels is where relationship names are stored.
var TaxConfigurationRels = struct {
	Channel                      string
	TaxConfigutationPerCountries string
}{
	Channel:                      "Channel",
	TaxConfigutationPerCountries: "TaxConfigutationPerCountries",
}

// taxConfigurationR is where relationships are stored.
type taxConfigurationR struct {
	Channel                      *Channel                        `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
	TaxConfigutationPerCountries TaxConfigutationPerCountrySlice `boil:"TaxConfigutationPerCountries" json:"TaxConfigutationPerCountries" toml:"TaxConfigutationPerCountries" yaml:"TaxConfigutationPerCountries"`
}

// NewStruct creates a new relationship struct
func (*taxConfigurationR) NewStruct() *taxConfigurationR {
	return &taxConfigurationR{}
}

func (r *taxConfigurationR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *taxConfigurationR) GetTaxConfigutationPerCountries() TaxConfigutationPerCountrySlice {
	if r == nil {
		return nil
	}
	return r.TaxConfigutationPerCountries
}

// taxConfigurationL is where Load methods for each relationship are stored.
type taxConfigurationL struct{}

var (
	taxConfigurationAllColumns            = []string{"id", "channel_id", "charge_taxes", "tax_calculation_strategy", "display_gross_price", "prices_entered_with_tax", "tax_app_id", "metatata", "private_metadata"}
	taxConfigurationColumnsWithoutDefault = []string{"id", "channel_id"}
	taxConfigurationColumnsWithDefault    = []string{"charge_taxes", "tax_calculation_strategy", "display_gross_price", "prices_entered_with_tax", "tax_app_id", "metatata", "private_metadata"}
	taxConfigurationPrimaryKeyColumns     = []string{"id"}
	taxConfigurationGeneratedColumns      = []string{}
)

type (
	// TaxConfigurationSlice is an alias for a slice of pointers to TaxConfiguration.
	// This should almost always be used instead of []TaxConfiguration.
	TaxConfigurationSlice []*TaxConfiguration

	taxConfigurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taxConfigurationType                 = reflect.TypeOf(&TaxConfiguration{})
	taxConfigurationMapping              = queries.MakeStructMapping(taxConfigurationType)
	taxConfigurationPrimaryKeyMapping, _ = queries.BindMapping(taxConfigurationType, taxConfigurationMapping, taxConfigurationPrimaryKeyColumns)
	taxConfigurationInsertCacheMut       sync.RWMutex
	taxConfigurationInsertCache          = make(map[string]insertCache)
	taxConfigurationUpdateCacheMut       sync.RWMutex
	taxConfigurationUpdateCache          = make(map[string]updateCache)
	taxConfigurationUpsertCacheMut       sync.RWMutex
	taxConfigurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single taxConfiguration record from the query.
func (q taxConfigurationQuery) One(exec boil.Executor) (*TaxConfiguration, error) {
	o := &TaxConfiguration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for tax_configurations")
	}

	return o, nil
}

// All returns all TaxConfiguration records from the query.
func (q taxConfigurationQuery) All(exec boil.Executor) (TaxConfigurationSlice, error) {
	var o []*TaxConfiguration

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to TaxConfiguration slice")
	}

	return o, nil
}

// Count returns the count of all TaxConfiguration records in the query.
func (q taxConfigurationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count tax_configurations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q taxConfigurationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if tax_configurations exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *TaxConfiguration) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// TaxConfigutationPerCountries retrieves all the tax_configutation_per_country's TaxConfigutationPerCountries with an executor.
func (o *TaxConfiguration) TaxConfigutationPerCountries(mods ...qm.QueryMod) taxConfigutationPerCountryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tax_configutation_per_countries\".\"tax_configuration_id\"=?", o.ID),
	)

	return TaxConfigutationPerCountries(queryMods...)
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (taxConfigurationL) LoadChannel(e boil.Executor, singular bool, maybeTaxConfiguration interface{}, mods queries.Applicator) error {
	var slice []*TaxConfiguration
	var object *TaxConfiguration

	if singular {
		var ok bool
		object, ok = maybeTaxConfiguration.(*TaxConfiguration)
		if !ok {
			object = new(TaxConfiguration)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxConfiguration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxConfiguration))
			}
		}
	} else {
		s, ok := maybeTaxConfiguration.(*[]*TaxConfiguration)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxConfiguration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxConfiguration))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &taxConfigurationR{}
		}
		args[object.ChannelID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxConfigurationR{}
			}

			args[obj.ChannelID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.TaxConfigurations = append(foreign.R.TaxConfigurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelID == foreign.ID {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.TaxConfigurations = append(foreign.R.TaxConfigurations, local)
				break
			}
		}
	}

	return nil
}

// LoadTaxConfigutationPerCountries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (taxConfigurationL) LoadTaxConfigutationPerCountries(e boil.Executor, singular bool, maybeTaxConfiguration interface{}, mods queries.Applicator) error {
	var slice []*TaxConfiguration
	var object *TaxConfiguration

	if singular {
		var ok bool
		object, ok = maybeTaxConfiguration.(*TaxConfiguration)
		if !ok {
			object = new(TaxConfiguration)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTaxConfiguration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTaxConfiguration))
			}
		}
	} else {
		s, ok := maybeTaxConfiguration.(*[]*TaxConfiguration)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTaxConfiguration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTaxConfiguration))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &taxConfigurationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &taxConfigurationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tax_configutation_per_countries`),
		qm.WhereIn(`tax_configutation_per_countries.tax_configuration_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_configutation_per_countries")
	}

	var resultSlice []*TaxConfigutationPerCountry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_configutation_per_countries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tax_configutation_per_countries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tax_configutation_per_countries")
	}

	if singular {
		object.R.TaxConfigutationPerCountries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &taxConfigutationPerCountryR{}
			}
			foreign.R.TaxConfiguration = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TaxConfigurationID {
				local.R.TaxConfigutationPerCountries = append(local.R.TaxConfigutationPerCountries, foreign)
				if foreign.R == nil {
					foreign.R = &taxConfigutationPerCountryR{}
				}
				foreign.R.TaxConfiguration = local
				break
			}
		}
	}

	return nil
}

// SetChannel of the taxConfiguration to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.TaxConfigurations.
func (o *TaxConfiguration) SetChannel(exec boil.Executor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tax_configurations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, taxConfigurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelID = related.ID
	if o.R == nil {
		o.R = &taxConfigurationR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			TaxConfigurations: TaxConfigurationSlice{o},
		}
	} else {
		related.R.TaxConfigurations = append(related.R.TaxConfigurations, o)
	}

	return nil
}

// AddTaxConfigutationPerCountries adds the given related objects to the existing relationships
// of the tax_configuration, optionally inserting them as new records.
// Appends related to o.R.TaxConfigutationPerCountries.
// Sets related.R.TaxConfiguration appropriately.
func (o *TaxConfiguration) AddTaxConfigutationPerCountries(exec boil.Executor, insert bool, related ...*TaxConfigutationPerCountry) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TaxConfigurationID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tax_configutation_per_countries\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tax_configuration_id"}),
				strmangle.WhereClause("\"", "\"", 2, taxConfigutationPerCountryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TaxConfigurationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &taxConfigurationR{
			TaxConfigutationPerCountries: related,
		}
	} else {
		o.R.TaxConfigutationPerCountries = append(o.R.TaxConfigutationPerCountries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxConfigutationPerCountryR{
				TaxConfiguration: o,
			}
		} else {
			rel.R.TaxConfiguration = o
		}
	}
	return nil
}

// TaxConfigurations retrieves all the records using an executor.
func TaxConfigurations(mods ...qm.QueryMod) taxConfigurationQuery {
	mods = append(mods, qm.From("\"tax_configurations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tax_configurations\".*"})
	}

	return taxConfigurationQuery{q}
}

// FindTaxConfiguration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaxConfiguration(exec boil.Executor, iD string, selectCols ...string) (*TaxConfiguration, error) {
	taxConfigurationObj := &TaxConfiguration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tax_configurations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, taxConfigurationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from tax_configurations")
	}

	return taxConfigurationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TaxConfiguration) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tax_configurations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(taxConfigurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	taxConfigurationInsertCacheMut.RLock()
	cache, cached := taxConfigurationInsertCache[key]
	taxConfigurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			taxConfigurationAllColumns,
			taxConfigurationColumnsWithDefault,
			taxConfigurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(taxConfigurationType, taxConfigurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taxConfigurationType, taxConfigurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tax_configurations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tax_configurations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into tax_configurations")
	}

	if !cached {
		taxConfigurationInsertCacheMut.Lock()
		taxConfigurationInsertCache[key] = cache
		taxConfigurationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the TaxConfiguration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TaxConfiguration) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	taxConfigurationUpdateCacheMut.RLock()
	cache, cached := taxConfigurationUpdateCache[key]
	taxConfigurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			taxConfigurationAllColumns,
			taxConfigurationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update tax_configurations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tax_configurations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, taxConfigurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taxConfigurationType, taxConfigurationMapping, append(wl, taxConfigurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update tax_configurations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for tax_configurations")
	}

	if !cached {
		taxConfigurationUpdateCacheMut.Lock()
		taxConfigurationUpdateCache[key] = cache
		taxConfigurationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q taxConfigurationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for tax_configurations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for tax_configurations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaxConfigurationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tax_configurations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, taxConfigurationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in taxConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all taxConfiguration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TaxConfiguration) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no tax_configurations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(taxConfigurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taxConfigurationUpsertCacheMut.RLock()
	cache, cached := taxConfigurationUpsertCache[key]
	taxConfigurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			taxConfigurationAllColumns,
			taxConfigurationColumnsWithDefault,
			taxConfigurationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			taxConfigurationAllColumns,
			taxConfigurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert tax_configurations, could not build update column list")
		}

		ret := strmangle.SetComplement(taxConfigurationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(taxConfigurationPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert tax_configurations, could not build conflict column list")
			}

			conflict = make([]string, len(taxConfigurationPrimaryKeyColumns))
			copy(conflict, taxConfigurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tax_configurations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(taxConfigurationType, taxConfigurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taxConfigurationType, taxConfigurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert tax_configurations")
	}

	if !cached {
		taxConfigurationUpsertCacheMut.Lock()
		taxConfigurationUpsertCache[key] = cache
		taxConfigurationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single TaxConfiguration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaxConfiguration) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no TaxConfiguration provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taxConfigurationPrimaryKeyMapping)
	sql := "DELETE FROM \"tax_configurations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from tax_configurations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for tax_configurations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q taxConfigurationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no taxConfigurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from tax_configurations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for tax_configurations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaxConfigurationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tax_configurations\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, taxConfigurationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from taxConfiguration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for tax_configurations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaxConfiguration) Reload(exec boil.Executor) error {
	ret, err := FindTaxConfiguration(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxConfigurationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TaxConfigurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxConfigurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tax_configurations\".* FROM \"tax_configurations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, taxConfigurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TaxConfigurationSlice")
	}

	*o = slice

	return nil
}

// TaxConfigurationExists checks if the TaxConfiguration row exists.
func TaxConfigurationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tax_configurations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if tax_configurations exists")
	}

	return exists, nil
}

// Exists checks if the TaxConfiguration row exists.
func (o *TaxConfiguration) Exists(exec boil.Executor) (bool, error) {
	return TaxConfigurationExists(exec, o.ID)
}
