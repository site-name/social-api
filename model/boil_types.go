// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql/driver"
	"encoding/json"
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/null/v8/convert"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("model: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type CountryCode string

// Enum values for CountryCode
const (
	CountryCodeID CountryCode = "ID"
	CountryCodeAX CountryCode = "AX"
	CountryCodeAL CountryCode = "AL"
	CountryCodeAF CountryCode = "AF"
	CountryCodeDZ CountryCode = "DZ"
	CountryCodeAS CountryCode = "AS"
	CountryCodeAD CountryCode = "AD"
	CountryCodeAO CountryCode = "AO"
	CountryCodeAI CountryCode = "AI"
	CountryCodeAQ CountryCode = "AQ"
	CountryCodeAG CountryCode = "AG"
	CountryCodeAR CountryCode = "AR"
	CountryCodeAM CountryCode = "AM"
	CountryCodeAW CountryCode = "AW"
	CountryCodeAU CountryCode = "AU"
	CountryCodeAT CountryCode = "AT"
	CountryCodeAZ CountryCode = "AZ"
	CountryCodeBS CountryCode = "BS"
	CountryCodeBH CountryCode = "BH"
	CountryCodeBD CountryCode = "BD"
	CountryCodeBB CountryCode = "BB"
	CountryCodeBY CountryCode = "BY"
	CountryCodeBE CountryCode = "BE"
	CountryCodeBZ CountryCode = "BZ"
	CountryCodeBJ CountryCode = "BJ"
	CountryCodeBM CountryCode = "BM"
	CountryCodeBT CountryCode = "BT"
	CountryCodeBO CountryCode = "BO"
	CountryCodeBQ CountryCode = "BQ"
	CountryCodeBA CountryCode = "BA"
	CountryCodeBW CountryCode = "BW"
	CountryCodeBV CountryCode = "BV"
	CountryCodeBR CountryCode = "BR"
	CountryCodeIO CountryCode = "IO"
	CountryCodeBN CountryCode = "BN"
	CountryCodeBG CountryCode = "BG"
	CountryCodeBF CountryCode = "BF"
	CountryCodeBI CountryCode = "BI"
	CountryCodeCV CountryCode = "CV"
	CountryCodeKH CountryCode = "KH"
	CountryCodeCM CountryCode = "CM"
	CountryCodeCA CountryCode = "CA"
	CountryCodeKY CountryCode = "KY"
	CountryCodeCF CountryCode = "CF"
	CountryCodeTD CountryCode = "TD"
	CountryCodeCL CountryCode = "CL"
	CountryCodeCN CountryCode = "CN"
	CountryCodeCX CountryCode = "CX"
	CountryCodeCC CountryCode = "CC"
	CountryCodeCO CountryCode = "CO"
	CountryCodeKM CountryCode = "KM"
	CountryCodeCG CountryCode = "CG"
	CountryCodeCD CountryCode = "CD"
	CountryCodeCK CountryCode = "CK"
	CountryCodeCR CountryCode = "CR"
	CountryCodeCI CountryCode = "CI"
	CountryCodeHR CountryCode = "HR"
	CountryCodeCU CountryCode = "CU"
	CountryCodeCW CountryCode = "CW"
	CountryCodeCY CountryCode = "CY"
	CountryCodeCZ CountryCode = "CZ"
	CountryCodeDK CountryCode = "DK"
	CountryCodeDJ CountryCode = "DJ"
	CountryCodeDM CountryCode = "DM"
	CountryCodeDO CountryCode = "DO"
	CountryCodeEC CountryCode = "EC"
	CountryCodeEG CountryCode = "EG"
	CountryCodeSV CountryCode = "SV"
	CountryCodeGQ CountryCode = "GQ"
	CountryCodeER CountryCode = "ER"
	CountryCodeEE CountryCode = "EE"
	CountryCodeSZ CountryCode = "SZ"
	CountryCodeET CountryCode = "ET"
	CountryCodeEU CountryCode = "EU"
	CountryCodeFK CountryCode = "FK"
	CountryCodeFO CountryCode = "FO"
	CountryCodeFJ CountryCode = "FJ"
	CountryCodeFI CountryCode = "FI"
	CountryCodeFR CountryCode = "FR"
	CountryCodeGF CountryCode = "GF"
	CountryCodePF CountryCode = "PF"
	CountryCodeTF CountryCode = "TF"
	CountryCodeGA CountryCode = "GA"
	CountryCodeGM CountryCode = "GM"
	CountryCodeGE CountryCode = "GE"
	CountryCodeDE CountryCode = "DE"
	CountryCodeGH CountryCode = "GH"
	CountryCodeGI CountryCode = "GI"
	CountryCodeGR CountryCode = "GR"
	CountryCodeGL CountryCode = "GL"
	CountryCodeGD CountryCode = "GD"
	CountryCodeGP CountryCode = "GP"
	CountryCodeGU CountryCode = "GU"
	CountryCodeGT CountryCode = "GT"
	CountryCodeGG CountryCode = "GG"
	CountryCodeGN CountryCode = "GN"
	CountryCodeGW CountryCode = "GW"
	CountryCodeGY CountryCode = "GY"
	CountryCodeHT CountryCode = "HT"
	CountryCodeHM CountryCode = "HM"
	CountryCodeVA CountryCode = "VA"
	CountryCodeHN CountryCode = "HN"
	CountryCodeHK CountryCode = "HK"
	CountryCodeHU CountryCode = "HU"
	CountryCodeIS CountryCode = "IS"
	CountryCodeIN CountryCode = "IN"
	CountryCodeIR CountryCode = "IR"
	CountryCodeIQ CountryCode = "IQ"
	CountryCodeIE CountryCode = "IE"
	CountryCodeIM CountryCode = "IM"
	CountryCodeIL CountryCode = "IL"
	CountryCodeIT CountryCode = "IT"
	CountryCodeJM CountryCode = "JM"
	CountryCodeJP CountryCode = "JP"
	CountryCodeJE CountryCode = "JE"
	CountryCodeJO CountryCode = "JO"
	CountryCodeKZ CountryCode = "KZ"
	CountryCodeKE CountryCode = "KE"
	CountryCodeKI CountryCode = "KI"
	CountryCodeKW CountryCode = "KW"
	CountryCodeKG CountryCode = "KG"
	CountryCodeLA CountryCode = "LA"
	CountryCodeLV CountryCode = "LV"
	CountryCodeLB CountryCode = "LB"
	CountryCodeLS CountryCode = "LS"
	CountryCodeLR CountryCode = "LR"
	CountryCodeLY CountryCode = "LY"
	CountryCodeLI CountryCode = "LI"
	CountryCodeLT CountryCode = "LT"
	CountryCodeLU CountryCode = "LU"
	CountryCodeMO CountryCode = "MO"
	CountryCodeMG CountryCode = "MG"
	CountryCodeMW CountryCode = "MW"
	CountryCodeMY CountryCode = "MY"
	CountryCodeMV CountryCode = "MV"
	CountryCodeML CountryCode = "ML"
	CountryCodeMT CountryCode = "MT"
	CountryCodeMH CountryCode = "MH"
	CountryCodeMQ CountryCode = "MQ"
	CountryCodeMR CountryCode = "MR"
	CountryCodeMU CountryCode = "MU"
	CountryCodeYT CountryCode = "YT"
	CountryCodeMX CountryCode = "MX"
	CountryCodeFM CountryCode = "FM"
	CountryCodeMD CountryCode = "MD"
	CountryCodeMC CountryCode = "MC"
	CountryCodeMN CountryCode = "MN"
	CountryCodeME CountryCode = "ME"
	CountryCodeMS CountryCode = "MS"
	CountryCodeMA CountryCode = "MA"
	CountryCodeMZ CountryCode = "MZ"
	CountryCodeMM CountryCode = "MM"
	CountryCodeNA CountryCode = "NA"
	CountryCodeNR CountryCode = "NR"
	CountryCodeNP CountryCode = "NP"
	CountryCodeNL CountryCode = "NL"
	CountryCodeNC CountryCode = "NC"
	CountryCodeNZ CountryCode = "NZ"
	CountryCodeNI CountryCode = "NI"
	CountryCodeNE CountryCode = "NE"
	CountryCodeNG CountryCode = "NG"
	CountryCodeNU CountryCode = "NU"
	CountryCodeNF CountryCode = "NF"
	CountryCodeKP CountryCode = "KP"
	CountryCodeMK CountryCode = "MK"
	CountryCodeMP CountryCode = "MP"
	CountryCodeNO CountryCode = "NO"
	CountryCodeOM CountryCode = "OM"
	CountryCodePK CountryCode = "PK"
	CountryCodePW CountryCode = "PW"
	CountryCodePS CountryCode = "PS"
	CountryCodePA CountryCode = "PA"
	CountryCodePG CountryCode = "PG"
	CountryCodePY CountryCode = "PY"
	CountryCodePE CountryCode = "PE"
	CountryCodePH CountryCode = "PH"
	CountryCodePN CountryCode = "PN"
	CountryCodePL CountryCode = "PL"
	CountryCodePT CountryCode = "PT"
	CountryCodePR CountryCode = "PR"
	CountryCodeQA CountryCode = "QA"
	CountryCodeRE CountryCode = "RE"
	CountryCodeRO CountryCode = "RO"
	CountryCodeRU CountryCode = "RU"
	CountryCodeRW CountryCode = "RW"
	CountryCodeBL CountryCode = "BL"
	CountryCodeSH CountryCode = "SH"
	CountryCodeKN CountryCode = "KN"
	CountryCodeLC CountryCode = "LC"
	CountryCodeMF CountryCode = "MF"
	CountryCodePM CountryCode = "PM"
	CountryCodeVC CountryCode = "VC"
	CountryCodeWS CountryCode = "WS"
	CountryCodeSM CountryCode = "SM"
	CountryCodeST CountryCode = "ST"
	CountryCodeSA CountryCode = "SA"
	CountryCodeSN CountryCode = "SN"
	CountryCodeRS CountryCode = "RS"
	CountryCodeSC CountryCode = "SC"
	CountryCodeSL CountryCode = "SL"
	CountryCodeSG CountryCode = "SG"
	CountryCodeSX CountryCode = "SX"
	CountryCodeSK CountryCode = "SK"
	CountryCodeSI CountryCode = "SI"
	CountryCodeSB CountryCode = "SB"
	CountryCodeSO CountryCode = "SO"
	CountryCodeZA CountryCode = "ZA"
	CountryCodeGS CountryCode = "GS"
	CountryCodeKR CountryCode = "KR"
	CountryCodeSS CountryCode = "SS"
	CountryCodeES CountryCode = "ES"
	CountryCodeLK CountryCode = "LK"
	CountryCodeSD CountryCode = "SD"
	CountryCodeSR CountryCode = "SR"
	CountryCodeSJ CountryCode = "SJ"
	CountryCodeSE CountryCode = "SE"
	CountryCodeCH CountryCode = "CH"
	CountryCodeSY CountryCode = "SY"
	CountryCodeTW CountryCode = "TW"
	CountryCodeTJ CountryCode = "TJ"
	CountryCodeTZ CountryCode = "TZ"
	CountryCodeTH CountryCode = "TH"
	CountryCodeTL CountryCode = "TL"
	CountryCodeTG CountryCode = "TG"
	CountryCodeTK CountryCode = "TK"
	CountryCodeTO CountryCode = "TO"
	CountryCodeTT CountryCode = "TT"
	CountryCodeTN CountryCode = "TN"
	CountryCodeTR CountryCode = "TR"
	CountryCodeTM CountryCode = "TM"
	CountryCodeTC CountryCode = "TC"
	CountryCodeTV CountryCode = "TV"
	CountryCodeUG CountryCode = "UG"
	CountryCodeUA CountryCode = "UA"
	CountryCodeAE CountryCode = "AE"
	CountryCodeGB CountryCode = "GB"
	CountryCodeUM CountryCode = "UM"
	CountryCodeUS CountryCode = "US"
	CountryCodeUY CountryCode = "UY"
	CountryCodeUZ CountryCode = "UZ"
	CountryCodeVU CountryCode = "VU"
	CountryCodeVE CountryCode = "VE"
	CountryCodeVN CountryCode = "VN"
	CountryCodeVG CountryCode = "VG"
	CountryCodeVI CountryCode = "VI"
	CountryCodeWF CountryCode = "WF"
	CountryCodeEH CountryCode = "EH"
	CountryCodeYE CountryCode = "YE"
	CountryCodeZM CountryCode = "ZM"
	CountryCodeZW CountryCode = "ZW"
)

func AllCountryCode() []CountryCode {
	return []CountryCode{
		CountryCodeID,
		CountryCodeAX,
		CountryCodeAL,
		CountryCodeAF,
		CountryCodeDZ,
		CountryCodeAS,
		CountryCodeAD,
		CountryCodeAO,
		CountryCodeAI,
		CountryCodeAQ,
		CountryCodeAG,
		CountryCodeAR,
		CountryCodeAM,
		CountryCodeAW,
		CountryCodeAU,
		CountryCodeAT,
		CountryCodeAZ,
		CountryCodeBS,
		CountryCodeBH,
		CountryCodeBD,
		CountryCodeBB,
		CountryCodeBY,
		CountryCodeBE,
		CountryCodeBZ,
		CountryCodeBJ,
		CountryCodeBM,
		CountryCodeBT,
		CountryCodeBO,
		CountryCodeBQ,
		CountryCodeBA,
		CountryCodeBW,
		CountryCodeBV,
		CountryCodeBR,
		CountryCodeIO,
		CountryCodeBN,
		CountryCodeBG,
		CountryCodeBF,
		CountryCodeBI,
		CountryCodeCV,
		CountryCodeKH,
		CountryCodeCM,
		CountryCodeCA,
		CountryCodeKY,
		CountryCodeCF,
		CountryCodeTD,
		CountryCodeCL,
		CountryCodeCN,
		CountryCodeCX,
		CountryCodeCC,
		CountryCodeCO,
		CountryCodeKM,
		CountryCodeCG,
		CountryCodeCD,
		CountryCodeCK,
		CountryCodeCR,
		CountryCodeCI,
		CountryCodeHR,
		CountryCodeCU,
		CountryCodeCW,
		CountryCodeCY,
		CountryCodeCZ,
		CountryCodeDK,
		CountryCodeDJ,
		CountryCodeDM,
		CountryCodeDO,
		CountryCodeEC,
		CountryCodeEG,
		CountryCodeSV,
		CountryCodeGQ,
		CountryCodeER,
		CountryCodeEE,
		CountryCodeSZ,
		CountryCodeET,
		CountryCodeEU,
		CountryCodeFK,
		CountryCodeFO,
		CountryCodeFJ,
		CountryCodeFI,
		CountryCodeFR,
		CountryCodeGF,
		CountryCodePF,
		CountryCodeTF,
		CountryCodeGA,
		CountryCodeGM,
		CountryCodeGE,
		CountryCodeDE,
		CountryCodeGH,
		CountryCodeGI,
		CountryCodeGR,
		CountryCodeGL,
		CountryCodeGD,
		CountryCodeGP,
		CountryCodeGU,
		CountryCodeGT,
		CountryCodeGG,
		CountryCodeGN,
		CountryCodeGW,
		CountryCodeGY,
		CountryCodeHT,
		CountryCodeHM,
		CountryCodeVA,
		CountryCodeHN,
		CountryCodeHK,
		CountryCodeHU,
		CountryCodeIS,
		CountryCodeIN,
		CountryCodeIR,
		CountryCodeIQ,
		CountryCodeIE,
		CountryCodeIM,
		CountryCodeIL,
		CountryCodeIT,
		CountryCodeJM,
		CountryCodeJP,
		CountryCodeJE,
		CountryCodeJO,
		CountryCodeKZ,
		CountryCodeKE,
		CountryCodeKI,
		CountryCodeKW,
		CountryCodeKG,
		CountryCodeLA,
		CountryCodeLV,
		CountryCodeLB,
		CountryCodeLS,
		CountryCodeLR,
		CountryCodeLY,
		CountryCodeLI,
		CountryCodeLT,
		CountryCodeLU,
		CountryCodeMO,
		CountryCodeMG,
		CountryCodeMW,
		CountryCodeMY,
		CountryCodeMV,
		CountryCodeML,
		CountryCodeMT,
		CountryCodeMH,
		CountryCodeMQ,
		CountryCodeMR,
		CountryCodeMU,
		CountryCodeYT,
		CountryCodeMX,
		CountryCodeFM,
		CountryCodeMD,
		CountryCodeMC,
		CountryCodeMN,
		CountryCodeME,
		CountryCodeMS,
		CountryCodeMA,
		CountryCodeMZ,
		CountryCodeMM,
		CountryCodeNA,
		CountryCodeNR,
		CountryCodeNP,
		CountryCodeNL,
		CountryCodeNC,
		CountryCodeNZ,
		CountryCodeNI,
		CountryCodeNE,
		CountryCodeNG,
		CountryCodeNU,
		CountryCodeNF,
		CountryCodeKP,
		CountryCodeMK,
		CountryCodeMP,
		CountryCodeNO,
		CountryCodeOM,
		CountryCodePK,
		CountryCodePW,
		CountryCodePS,
		CountryCodePA,
		CountryCodePG,
		CountryCodePY,
		CountryCodePE,
		CountryCodePH,
		CountryCodePN,
		CountryCodePL,
		CountryCodePT,
		CountryCodePR,
		CountryCodeQA,
		CountryCodeRE,
		CountryCodeRO,
		CountryCodeRU,
		CountryCodeRW,
		CountryCodeBL,
		CountryCodeSH,
		CountryCodeKN,
		CountryCodeLC,
		CountryCodeMF,
		CountryCodePM,
		CountryCodeVC,
		CountryCodeWS,
		CountryCodeSM,
		CountryCodeST,
		CountryCodeSA,
		CountryCodeSN,
		CountryCodeRS,
		CountryCodeSC,
		CountryCodeSL,
		CountryCodeSG,
		CountryCodeSX,
		CountryCodeSK,
		CountryCodeSI,
		CountryCodeSB,
		CountryCodeSO,
		CountryCodeZA,
		CountryCodeGS,
		CountryCodeKR,
		CountryCodeSS,
		CountryCodeES,
		CountryCodeLK,
		CountryCodeSD,
		CountryCodeSR,
		CountryCodeSJ,
		CountryCodeSE,
		CountryCodeCH,
		CountryCodeSY,
		CountryCodeTW,
		CountryCodeTJ,
		CountryCodeTZ,
		CountryCodeTH,
		CountryCodeTL,
		CountryCodeTG,
		CountryCodeTK,
		CountryCodeTO,
		CountryCodeTT,
		CountryCodeTN,
		CountryCodeTR,
		CountryCodeTM,
		CountryCodeTC,
		CountryCodeTV,
		CountryCodeUG,
		CountryCodeUA,
		CountryCodeAE,
		CountryCodeGB,
		CountryCodeUM,
		CountryCodeUS,
		CountryCodeUY,
		CountryCodeUZ,
		CountryCodeVU,
		CountryCodeVE,
		CountryCodeVN,
		CountryCodeVG,
		CountryCodeVI,
		CountryCodeWF,
		CountryCodeEH,
		CountryCodeYE,
		CountryCodeZM,
		CountryCodeZW,
	}
}

func (e CountryCode) IsValid() error {
	switch e {
	case CountryCodeID, CountryCodeAX, CountryCodeAL, CountryCodeAF, CountryCodeDZ, CountryCodeAS, CountryCodeAD, CountryCodeAO, CountryCodeAI, CountryCodeAQ, CountryCodeAG, CountryCodeAR, CountryCodeAM, CountryCodeAW, CountryCodeAU, CountryCodeAT, CountryCodeAZ, CountryCodeBS, CountryCodeBH, CountryCodeBD, CountryCodeBB, CountryCodeBY, CountryCodeBE, CountryCodeBZ, CountryCodeBJ, CountryCodeBM, CountryCodeBT, CountryCodeBO, CountryCodeBQ, CountryCodeBA, CountryCodeBW, CountryCodeBV, CountryCodeBR, CountryCodeIO, CountryCodeBN, CountryCodeBG, CountryCodeBF, CountryCodeBI, CountryCodeCV, CountryCodeKH, CountryCodeCM, CountryCodeCA, CountryCodeKY, CountryCodeCF, CountryCodeTD, CountryCodeCL, CountryCodeCN, CountryCodeCX, CountryCodeCC, CountryCodeCO, CountryCodeKM, CountryCodeCG, CountryCodeCD, CountryCodeCK, CountryCodeCR, CountryCodeCI, CountryCodeHR, CountryCodeCU, CountryCodeCW, CountryCodeCY, CountryCodeCZ, CountryCodeDK, CountryCodeDJ, CountryCodeDM, CountryCodeDO, CountryCodeEC, CountryCodeEG, CountryCodeSV, CountryCodeGQ, CountryCodeER, CountryCodeEE, CountryCodeSZ, CountryCodeET, CountryCodeEU, CountryCodeFK, CountryCodeFO, CountryCodeFJ, CountryCodeFI, CountryCodeFR, CountryCodeGF, CountryCodePF, CountryCodeTF, CountryCodeGA, CountryCodeGM, CountryCodeGE, CountryCodeDE, CountryCodeGH, CountryCodeGI, CountryCodeGR, CountryCodeGL, CountryCodeGD, CountryCodeGP, CountryCodeGU, CountryCodeGT, CountryCodeGG, CountryCodeGN, CountryCodeGW, CountryCodeGY, CountryCodeHT, CountryCodeHM, CountryCodeVA, CountryCodeHN, CountryCodeHK, CountryCodeHU, CountryCodeIS, CountryCodeIN, CountryCodeIR, CountryCodeIQ, CountryCodeIE, CountryCodeIM, CountryCodeIL, CountryCodeIT, CountryCodeJM, CountryCodeJP, CountryCodeJE, CountryCodeJO, CountryCodeKZ, CountryCodeKE, CountryCodeKI, CountryCodeKW, CountryCodeKG, CountryCodeLA, CountryCodeLV, CountryCodeLB, CountryCodeLS, CountryCodeLR, CountryCodeLY, CountryCodeLI, CountryCodeLT, CountryCodeLU, CountryCodeMO, CountryCodeMG, CountryCodeMW, CountryCodeMY, CountryCodeMV, CountryCodeML, CountryCodeMT, CountryCodeMH, CountryCodeMQ, CountryCodeMR, CountryCodeMU, CountryCodeYT, CountryCodeMX, CountryCodeFM, CountryCodeMD, CountryCodeMC, CountryCodeMN, CountryCodeME, CountryCodeMS, CountryCodeMA, CountryCodeMZ, CountryCodeMM, CountryCodeNA, CountryCodeNR, CountryCodeNP, CountryCodeNL, CountryCodeNC, CountryCodeNZ, CountryCodeNI, CountryCodeNE, CountryCodeNG, CountryCodeNU, CountryCodeNF, CountryCodeKP, CountryCodeMK, CountryCodeMP, CountryCodeNO, CountryCodeOM, CountryCodePK, CountryCodePW, CountryCodePS, CountryCodePA, CountryCodePG, CountryCodePY, CountryCodePE, CountryCodePH, CountryCodePN, CountryCodePL, CountryCodePT, CountryCodePR, CountryCodeQA, CountryCodeRE, CountryCodeRO, CountryCodeRU, CountryCodeRW, CountryCodeBL, CountryCodeSH, CountryCodeKN, CountryCodeLC, CountryCodeMF, CountryCodePM, CountryCodeVC, CountryCodeWS, CountryCodeSM, CountryCodeST, CountryCodeSA, CountryCodeSN, CountryCodeRS, CountryCodeSC, CountryCodeSL, CountryCodeSG, CountryCodeSX, CountryCodeSK, CountryCodeSI, CountryCodeSB, CountryCodeSO, CountryCodeZA, CountryCodeGS, CountryCodeKR, CountryCodeSS, CountryCodeES, CountryCodeLK, CountryCodeSD, CountryCodeSR, CountryCodeSJ, CountryCodeSE, CountryCodeCH, CountryCodeSY, CountryCodeTW, CountryCodeTJ, CountryCodeTZ, CountryCodeTH, CountryCodeTL, CountryCodeTG, CountryCodeTK, CountryCodeTO, CountryCodeTT, CountryCodeTN, CountryCodeTR, CountryCodeTM, CountryCodeTC, CountryCodeTV, CountryCodeUG, CountryCodeUA, CountryCodeAE, CountryCodeGB, CountryCodeUM, CountryCodeUS, CountryCodeUY, CountryCodeUZ, CountryCodeVU, CountryCodeVE, CountryCodeVN, CountryCodeVG, CountryCodeVI, CountryCodeWF, CountryCodeEH, CountryCodeYE, CountryCodeZM, CountryCodeZW:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e CountryCode) String() string {
	return string(e)
}

func (e CountryCode) Ordinal() int {
	switch e {
	case CountryCodeID:
		return 0
	case CountryCodeAX:
		return 1
	case CountryCodeAL:
		return 2
	case CountryCodeAF:
		return 3
	case CountryCodeDZ:
		return 4
	case CountryCodeAS:
		return 5
	case CountryCodeAD:
		return 6
	case CountryCodeAO:
		return 7
	case CountryCodeAI:
		return 8
	case CountryCodeAQ:
		return 9
	case CountryCodeAG:
		return 10
	case CountryCodeAR:
		return 11
	case CountryCodeAM:
		return 12
	case CountryCodeAW:
		return 13
	case CountryCodeAU:
		return 14
	case CountryCodeAT:
		return 15
	case CountryCodeAZ:
		return 16
	case CountryCodeBS:
		return 17
	case CountryCodeBH:
		return 18
	case CountryCodeBD:
		return 19
	case CountryCodeBB:
		return 20
	case CountryCodeBY:
		return 21
	case CountryCodeBE:
		return 22
	case CountryCodeBZ:
		return 23
	case CountryCodeBJ:
		return 24
	case CountryCodeBM:
		return 25
	case CountryCodeBT:
		return 26
	case CountryCodeBO:
		return 27
	case CountryCodeBQ:
		return 28
	case CountryCodeBA:
		return 29
	case CountryCodeBW:
		return 30
	case CountryCodeBV:
		return 31
	case CountryCodeBR:
		return 32
	case CountryCodeIO:
		return 33
	case CountryCodeBN:
		return 34
	case CountryCodeBG:
		return 35
	case CountryCodeBF:
		return 36
	case CountryCodeBI:
		return 37
	case CountryCodeCV:
		return 38
	case CountryCodeKH:
		return 39
	case CountryCodeCM:
		return 40
	case CountryCodeCA:
		return 41
	case CountryCodeKY:
		return 42
	case CountryCodeCF:
		return 43
	case CountryCodeTD:
		return 44
	case CountryCodeCL:
		return 45
	case CountryCodeCN:
		return 46
	case CountryCodeCX:
		return 47
	case CountryCodeCC:
		return 48
	case CountryCodeCO:
		return 49
	case CountryCodeKM:
		return 50
	case CountryCodeCG:
		return 51
	case CountryCodeCD:
		return 52
	case CountryCodeCK:
		return 53
	case CountryCodeCR:
		return 54
	case CountryCodeCI:
		return 55
	case CountryCodeHR:
		return 56
	case CountryCodeCU:
		return 57
	case CountryCodeCW:
		return 58
	case CountryCodeCY:
		return 59
	case CountryCodeCZ:
		return 60
	case CountryCodeDK:
		return 61
	case CountryCodeDJ:
		return 62
	case CountryCodeDM:
		return 63
	case CountryCodeDO:
		return 64
	case CountryCodeEC:
		return 65
	case CountryCodeEG:
		return 66
	case CountryCodeSV:
		return 67
	case CountryCodeGQ:
		return 68
	case CountryCodeER:
		return 69
	case CountryCodeEE:
		return 70
	case CountryCodeSZ:
		return 71
	case CountryCodeET:
		return 72
	case CountryCodeEU:
		return 73
	case CountryCodeFK:
		return 74
	case CountryCodeFO:
		return 75
	case CountryCodeFJ:
		return 76
	case CountryCodeFI:
		return 77
	case CountryCodeFR:
		return 78
	case CountryCodeGF:
		return 79
	case CountryCodePF:
		return 80
	case CountryCodeTF:
		return 81
	case CountryCodeGA:
		return 82
	case CountryCodeGM:
		return 83
	case CountryCodeGE:
		return 84
	case CountryCodeDE:
		return 85
	case CountryCodeGH:
		return 86
	case CountryCodeGI:
		return 87
	case CountryCodeGR:
		return 88
	case CountryCodeGL:
		return 89
	case CountryCodeGD:
		return 90
	case CountryCodeGP:
		return 91
	case CountryCodeGU:
		return 92
	case CountryCodeGT:
		return 93
	case CountryCodeGG:
		return 94
	case CountryCodeGN:
		return 95
	case CountryCodeGW:
		return 96
	case CountryCodeGY:
		return 97
	case CountryCodeHT:
		return 98
	case CountryCodeHM:
		return 99
	case CountryCodeVA:
		return 100
	case CountryCodeHN:
		return 101
	case CountryCodeHK:
		return 102
	case CountryCodeHU:
		return 103
	case CountryCodeIS:
		return 104
	case CountryCodeIN:
		return 105
	case CountryCodeIR:
		return 106
	case CountryCodeIQ:
		return 107
	case CountryCodeIE:
		return 108
	case CountryCodeIM:
		return 109
	case CountryCodeIL:
		return 110
	case CountryCodeIT:
		return 111
	case CountryCodeJM:
		return 112
	case CountryCodeJP:
		return 113
	case CountryCodeJE:
		return 114
	case CountryCodeJO:
		return 115
	case CountryCodeKZ:
		return 116
	case CountryCodeKE:
		return 117
	case CountryCodeKI:
		return 118
	case CountryCodeKW:
		return 119
	case CountryCodeKG:
		return 120
	case CountryCodeLA:
		return 121
	case CountryCodeLV:
		return 122
	case CountryCodeLB:
		return 123
	case CountryCodeLS:
		return 124
	case CountryCodeLR:
		return 125
	case CountryCodeLY:
		return 126
	case CountryCodeLI:
		return 127
	case CountryCodeLT:
		return 128
	case CountryCodeLU:
		return 129
	case CountryCodeMO:
		return 130
	case CountryCodeMG:
		return 131
	case CountryCodeMW:
		return 132
	case CountryCodeMY:
		return 133
	case CountryCodeMV:
		return 134
	case CountryCodeML:
		return 135
	case CountryCodeMT:
		return 136
	case CountryCodeMH:
		return 137
	case CountryCodeMQ:
		return 138
	case CountryCodeMR:
		return 139
	case CountryCodeMU:
		return 140
	case CountryCodeYT:
		return 141
	case CountryCodeMX:
		return 142
	case CountryCodeFM:
		return 143
	case CountryCodeMD:
		return 144
	case CountryCodeMC:
		return 145
	case CountryCodeMN:
		return 146
	case CountryCodeME:
		return 147
	case CountryCodeMS:
		return 148
	case CountryCodeMA:
		return 149
	case CountryCodeMZ:
		return 150
	case CountryCodeMM:
		return 151
	case CountryCodeNA:
		return 152
	case CountryCodeNR:
		return 153
	case CountryCodeNP:
		return 154
	case CountryCodeNL:
		return 155
	case CountryCodeNC:
		return 156
	case CountryCodeNZ:
		return 157
	case CountryCodeNI:
		return 158
	case CountryCodeNE:
		return 159
	case CountryCodeNG:
		return 160
	case CountryCodeNU:
		return 161
	case CountryCodeNF:
		return 162
	case CountryCodeKP:
		return 163
	case CountryCodeMK:
		return 164
	case CountryCodeMP:
		return 165
	case CountryCodeNO:
		return 166
	case CountryCodeOM:
		return 167
	case CountryCodePK:
		return 168
	case CountryCodePW:
		return 169
	case CountryCodePS:
		return 170
	case CountryCodePA:
		return 171
	case CountryCodePG:
		return 172
	case CountryCodePY:
		return 173
	case CountryCodePE:
		return 174
	case CountryCodePH:
		return 175
	case CountryCodePN:
		return 176
	case CountryCodePL:
		return 177
	case CountryCodePT:
		return 178
	case CountryCodePR:
		return 179
	case CountryCodeQA:
		return 180
	case CountryCodeRE:
		return 181
	case CountryCodeRO:
		return 182
	case CountryCodeRU:
		return 183
	case CountryCodeRW:
		return 184
	case CountryCodeBL:
		return 185
	case CountryCodeSH:
		return 186
	case CountryCodeKN:
		return 187
	case CountryCodeLC:
		return 188
	case CountryCodeMF:
		return 189
	case CountryCodePM:
		return 190
	case CountryCodeVC:
		return 191
	case CountryCodeWS:
		return 192
	case CountryCodeSM:
		return 193
	case CountryCodeST:
		return 194
	case CountryCodeSA:
		return 195
	case CountryCodeSN:
		return 196
	case CountryCodeRS:
		return 197
	case CountryCodeSC:
		return 198
	case CountryCodeSL:
		return 199
	case CountryCodeSG:
		return 200
	case CountryCodeSX:
		return 201
	case CountryCodeSK:
		return 202
	case CountryCodeSI:
		return 203
	case CountryCodeSB:
		return 204
	case CountryCodeSO:
		return 205
	case CountryCodeZA:
		return 206
	case CountryCodeGS:
		return 207
	case CountryCodeKR:
		return 208
	case CountryCodeSS:
		return 209
	case CountryCodeES:
		return 210
	case CountryCodeLK:
		return 211
	case CountryCodeSD:
		return 212
	case CountryCodeSR:
		return 213
	case CountryCodeSJ:
		return 214
	case CountryCodeSE:
		return 215
	case CountryCodeCH:
		return 216
	case CountryCodeSY:
		return 217
	case CountryCodeTW:
		return 218
	case CountryCodeTJ:
		return 219
	case CountryCodeTZ:
		return 220
	case CountryCodeTH:
		return 221
	case CountryCodeTL:
		return 222
	case CountryCodeTG:
		return 223
	case CountryCodeTK:
		return 224
	case CountryCodeTO:
		return 225
	case CountryCodeTT:
		return 226
	case CountryCodeTN:
		return 227
	case CountryCodeTR:
		return 228
	case CountryCodeTM:
		return 229
	case CountryCodeTC:
		return 230
	case CountryCodeTV:
		return 231
	case CountryCodeUG:
		return 232
	case CountryCodeUA:
		return 233
	case CountryCodeAE:
		return 234
	case CountryCodeGB:
		return 235
	case CountryCodeUM:
		return 236
	case CountryCodeUS:
		return 237
	case CountryCodeUY:
		return 238
	case CountryCodeUZ:
		return 239
	case CountryCodeVU:
		return 240
	case CountryCodeVE:
		return 241
	case CountryCodeVN:
		return 242
	case CountryCodeVG:
		return 243
	case CountryCodeVI:
		return 244
	case CountryCodeWF:
		return 245
	case CountryCodeEH:
		return 246
	case CountryCodeYE:
		return 247
	case CountryCodeZM:
		return 248
	case CountryCodeZW:
		return 249

	default:
		panic(errors.New("enum is not valid"))
	}
}

type LanguageCode string

// Enum values for LanguageCode
const (
	LanguageCodeAF             LanguageCode = "AF"
	LanguageCodeAF_NA          LanguageCode = "AF_NA"
	LanguageCodeID             LanguageCode = "ID"
	LanguageCodeAF_ZA          LanguageCode = "AF_ZA"
	LanguageCodeAGQ            LanguageCode = "AGQ"
	LanguageCodeAGQ_CM         LanguageCode = "AGQ_CM"
	LanguageCodeAK             LanguageCode = "AK"
	LanguageCodeAK_GH          LanguageCode = "AK_GH"
	LanguageCodeAM             LanguageCode = "AM"
	LanguageCodeAM_ET          LanguageCode = "AM_ET"
	LanguageCodeAR             LanguageCode = "AR"
	LanguageCodeAR_AE          LanguageCode = "AR_AE"
	LanguageCodeAR_BH          LanguageCode = "AR_BH"
	LanguageCodeAR_DJ          LanguageCode = "AR_DJ"
	LanguageCodeAR_DZ          LanguageCode = "AR_DZ"
	LanguageCodeAR_EG          LanguageCode = "AR_EG"
	LanguageCodeAR_EH          LanguageCode = "AR_EH"
	LanguageCodeAR_ER          LanguageCode = "AR_ER"
	LanguageCodeAR_IL          LanguageCode = "AR_IL"
	LanguageCodeAR_IQ          LanguageCode = "AR_IQ"
	LanguageCodeAR_JO          LanguageCode = "AR_JO"
	LanguageCodeAR_KM          LanguageCode = "AR_KM"
	LanguageCodeAR_KW          LanguageCode = "AR_KW"
	LanguageCodeAR_LB          LanguageCode = "AR_LB"
	LanguageCodeAR_LY          LanguageCode = "AR_LY"
	LanguageCodeAR_MA          LanguageCode = "AR_MA"
	LanguageCodeAR_MR          LanguageCode = "AR_MR"
	LanguageCodeAR_OM          LanguageCode = "AR_OM"
	LanguageCodeAR_PS          LanguageCode = "AR_PS"
	LanguageCodeAR_QA          LanguageCode = "AR_QA"
	LanguageCodeAR_SA          LanguageCode = "AR_SA"
	LanguageCodeAR_SD          LanguageCode = "AR_SD"
	LanguageCodeAR_SO          LanguageCode = "AR_SO"
	LanguageCodeAR_SS          LanguageCode = "AR_SS"
	LanguageCodeAR_SY          LanguageCode = "AR_SY"
	LanguageCodeAR_TD          LanguageCode = "AR_TD"
	LanguageCodeAR_TN          LanguageCode = "AR_TN"
	LanguageCodeAR_YE          LanguageCode = "AR_YE"
	LanguageCodeAS             LanguageCode = "AS"
	LanguageCodeAS_IN          LanguageCode = "AS_IN"
	LanguageCodeASA            LanguageCode = "ASA"
	LanguageCodeASA_TZ         LanguageCode = "ASA_TZ"
	LanguageCodeAST            LanguageCode = "AST"
	LanguageCodeAST_ES         LanguageCode = "AST_ES"
	LanguageCodeAZ             LanguageCode = "AZ"
	LanguageCodeAZ_CYRL        LanguageCode = "AZ_CYRL"
	LanguageCodeAZ_CYRL_AZ     LanguageCode = "AZ_CYRL_AZ"
	LanguageCodeAZ_LATN        LanguageCode = "AZ_LATN"
	LanguageCodeAZ_LATN_AZ     LanguageCode = "AZ_LATN_AZ"
	LanguageCodeBAS            LanguageCode = "BAS"
	LanguageCodeBAS_CM         LanguageCode = "BAS_CM"
	LanguageCodeBE             LanguageCode = "BE"
	LanguageCodeBE_BY          LanguageCode = "BE_BY"
	LanguageCodeBEM            LanguageCode = "BEM"
	LanguageCodeBEM_ZM         LanguageCode = "BEM_ZM"
	LanguageCodeBEZ            LanguageCode = "BEZ"
	LanguageCodeBEZ_TZ         LanguageCode = "BEZ_TZ"
	LanguageCodeBG             LanguageCode = "BG"
	LanguageCodeBG_BG          LanguageCode = "BG_BG"
	LanguageCodeBM             LanguageCode = "BM"
	LanguageCodeBM_ML          LanguageCode = "BM_ML"
	LanguageCodeBN             LanguageCode = "BN"
	LanguageCodeBN_BD          LanguageCode = "BN_BD"
	LanguageCodeBN_IN          LanguageCode = "BN_IN"
	LanguageCodeBO             LanguageCode = "BO"
	LanguageCodeBO_CN          LanguageCode = "BO_CN"
	LanguageCodeBO_IN          LanguageCode = "BO_IN"
	LanguageCodeBR             LanguageCode = "BR"
	LanguageCodeBR_FR          LanguageCode = "BR_FR"
	LanguageCodeBRX            LanguageCode = "BRX"
	LanguageCodeBRX_IN         LanguageCode = "BRX_IN"
	LanguageCodeBS             LanguageCode = "BS"
	LanguageCodeBS_CYRL        LanguageCode = "BS_CYRL"
	LanguageCodeBS_CYRL_BA     LanguageCode = "BS_CYRL_BA"
	LanguageCodeBS_LATN        LanguageCode = "BS_LATN"
	LanguageCodeBS_LATN_BA     LanguageCode = "BS_LATN_BA"
	LanguageCodeCA             LanguageCode = "CA"
	LanguageCodeCA_AD          LanguageCode = "CA_AD"
	LanguageCodeCA_ES          LanguageCode = "CA_ES"
	LanguageCodeCA_ES_VALENCIA LanguageCode = "CA_ES_VALENCIA"
	LanguageCodeCA_FR          LanguageCode = "CA_FR"
	LanguageCodeCA_IT          LanguageCode = "CA_IT"
	LanguageCodeCCP            LanguageCode = "CCP"
	LanguageCodeCCP_BD         LanguageCode = "CCP_BD"
	LanguageCodeCCP_IN         LanguageCode = "CCP_IN"
	LanguageCodeCE             LanguageCode = "CE"
	LanguageCodeCE_RU          LanguageCode = "CE_RU"
	LanguageCodeCEB            LanguageCode = "CEB"
	LanguageCodeCEB_PH         LanguageCode = "CEB_PH"
	LanguageCodeCGG            LanguageCode = "CGG"
	LanguageCodeCGG_UG         LanguageCode = "CGG_UG"
	LanguageCodeCHR            LanguageCode = "CHR"
	LanguageCodeCHR_US         LanguageCode = "CHR_US"
	LanguageCodeCKB            LanguageCode = "CKB"
	LanguageCodeCKB_IQ         LanguageCode = "CKB_IQ"
	LanguageCodeCKB_IR         LanguageCode = "CKB_IR"
	LanguageCodeCS             LanguageCode = "CS"
	LanguageCodeCS_CZ          LanguageCode = "CS_CZ"
	LanguageCodeCU             LanguageCode = "CU"
	LanguageCodeCU_RU          LanguageCode = "CU_RU"
	LanguageCodeCY             LanguageCode = "CY"
	LanguageCodeCY_GB          LanguageCode = "CY_GB"
	LanguageCodeDA             LanguageCode = "DA"
	LanguageCodeDA_DK          LanguageCode = "DA_DK"
	LanguageCodeDA_GL          LanguageCode = "DA_GL"
	LanguageCodeDAV            LanguageCode = "DAV"
	LanguageCodeDAV_KE         LanguageCode = "DAV_KE"
	LanguageCodeDE             LanguageCode = "DE"
	LanguageCodeDE_AT          LanguageCode = "DE_AT"
	LanguageCodeDE_BE          LanguageCode = "DE_BE"
	LanguageCodeDE_CH          LanguageCode = "DE_CH"
	LanguageCodeDE_DE          LanguageCode = "DE_DE"
	LanguageCodeDE_IT          LanguageCode = "DE_IT"
	LanguageCodeDE_LI          LanguageCode = "DE_LI"
	LanguageCodeDE_LU          LanguageCode = "DE_LU"
	LanguageCodeDJE            LanguageCode = "DJE"
	LanguageCodeDJE_NE         LanguageCode = "DJE_NE"
	LanguageCodeDSB            LanguageCode = "DSB"
	LanguageCodeDSB_DE         LanguageCode = "DSB_DE"
	LanguageCodeDUA            LanguageCode = "DUA"
	LanguageCodeDUA_CM         LanguageCode = "DUA_CM"
	LanguageCodeDYO            LanguageCode = "DYO"
	LanguageCodeDYO_SN         LanguageCode = "DYO_SN"
	LanguageCodeDZ             LanguageCode = "DZ"
	LanguageCodeDZ_BT          LanguageCode = "DZ_BT"
	LanguageCodeEBU            LanguageCode = "EBU"
	LanguageCodeEBU_KE         LanguageCode = "EBU_KE"
	LanguageCodeEE             LanguageCode = "EE"
	LanguageCodeEE_GH          LanguageCode = "EE_GH"
	LanguageCodeEE_TG          LanguageCode = "EE_TG"
	LanguageCodeEL             LanguageCode = "EL"
	LanguageCodeEL_CY          LanguageCode = "EL_CY"
	LanguageCodeEL_GR          LanguageCode = "EL_GR"
	LanguageCodeEN             LanguageCode = "EN"
	LanguageCodeEN_AE          LanguageCode = "EN_AE"
	LanguageCodeEN_AG          LanguageCode = "EN_AG"
	LanguageCodeEN_AI          LanguageCode = "EN_AI"
	LanguageCodeEN_AS          LanguageCode = "EN_AS"
	LanguageCodeEN_AT          LanguageCode = "EN_AT"
	LanguageCodeEN_AU          LanguageCode = "EN_AU"
	LanguageCodeEN_BB          LanguageCode = "EN_BB"
	LanguageCodeEN_BE          LanguageCode = "EN_BE"
	LanguageCodeEN_BI          LanguageCode = "EN_BI"
	LanguageCodeEN_BM          LanguageCode = "EN_BM"
	LanguageCodeEN_BS          LanguageCode = "EN_BS"
	LanguageCodeEN_BW          LanguageCode = "EN_BW"
	LanguageCodeEN_BZ          LanguageCode = "EN_BZ"
	LanguageCodeEN_CA          LanguageCode = "EN_CA"
	LanguageCodeEN_CC          LanguageCode = "EN_CC"
	LanguageCodeEN_CH          LanguageCode = "EN_CH"
	LanguageCodeEN_CK          LanguageCode = "EN_CK"
	LanguageCodeEN_CM          LanguageCode = "EN_CM"
	LanguageCodeEN_CX          LanguageCode = "EN_CX"
	LanguageCodeEN_CY          LanguageCode = "EN_CY"
	LanguageCodeEN_DE          LanguageCode = "EN_DE"
	LanguageCodeEN_DG          LanguageCode = "EN_DG"
	LanguageCodeEN_DK          LanguageCode = "EN_DK"
	LanguageCodeEN_DM          LanguageCode = "EN_DM"
	LanguageCodeEN_ER          LanguageCode = "EN_ER"
	LanguageCodeEN_FI          LanguageCode = "EN_FI"
	LanguageCodeEN_FJ          LanguageCode = "EN_FJ"
	LanguageCodeEN_FK          LanguageCode = "EN_FK"
	LanguageCodeEN_FM          LanguageCode = "EN_FM"
	LanguageCodeEN_GB          LanguageCode = "EN_GB"
	LanguageCodeEN_GD          LanguageCode = "EN_GD"
	LanguageCodeEN_GG          LanguageCode = "EN_GG"
	LanguageCodeEN_GH          LanguageCode = "EN_GH"
	LanguageCodeEN_GI          LanguageCode = "EN_GI"
	LanguageCodeEN_GM          LanguageCode = "EN_GM"
	LanguageCodeEN_GU          LanguageCode = "EN_GU"
	LanguageCodeEN_GY          LanguageCode = "EN_GY"
	LanguageCodeEN_HK          LanguageCode = "EN_HK"
	LanguageCodeEN_IE          LanguageCode = "EN_IE"
	LanguageCodeEN_IL          LanguageCode = "EN_IL"
	LanguageCodeEN_IM          LanguageCode = "EN_IM"
	LanguageCodeEN_IN          LanguageCode = "EN_IN"
	LanguageCodeEN_IO          LanguageCode = "EN_IO"
	LanguageCodeEN_JE          LanguageCode = "EN_JE"
	LanguageCodeEN_JM          LanguageCode = "EN_JM"
	LanguageCodeEN_KE          LanguageCode = "EN_KE"
	LanguageCodeEN_KI          LanguageCode = "EN_KI"
	LanguageCodeEN_KN          LanguageCode = "EN_KN"
	LanguageCodeEN_KY          LanguageCode = "EN_KY"
	LanguageCodeEN_LC          LanguageCode = "EN_LC"
	LanguageCodeEN_LR          LanguageCode = "EN_LR"
	LanguageCodeEN_LS          LanguageCode = "EN_LS"
	LanguageCodeEN_MG          LanguageCode = "EN_MG"
	LanguageCodeEN_MH          LanguageCode = "EN_MH"
	LanguageCodeEN_MO          LanguageCode = "EN_MO"
	LanguageCodeEN_MP          LanguageCode = "EN_MP"
	LanguageCodeEN_MS          LanguageCode = "EN_MS"
	LanguageCodeEN_MT          LanguageCode = "EN_MT"
	LanguageCodeEN_MU          LanguageCode = "EN_MU"
	LanguageCodeEN_MW          LanguageCode = "EN_MW"
	LanguageCodeEN_MY          LanguageCode = "EN_MY"
	LanguageCodeEN_NA          LanguageCode = "EN_NA"
	LanguageCodeEN_NF          LanguageCode = "EN_NF"
	LanguageCodeEN_NG          LanguageCode = "EN_NG"
	LanguageCodeEN_NL          LanguageCode = "EN_NL"
	LanguageCodeEN_NR          LanguageCode = "EN_NR"
	LanguageCodeEN_NU          LanguageCode = "EN_NU"
	LanguageCodeEN_NZ          LanguageCode = "EN_NZ"
	LanguageCodeEN_PG          LanguageCode = "EN_PG"
	LanguageCodeEN_PH          LanguageCode = "EN_PH"
	LanguageCodeEN_PK          LanguageCode = "EN_PK"
	LanguageCodeEN_PN          LanguageCode = "EN_PN"
	LanguageCodeEN_PR          LanguageCode = "EN_PR"
	LanguageCodeEN_PW          LanguageCode = "EN_PW"
	LanguageCodeEN_RW          LanguageCode = "EN_RW"
	LanguageCodeEN_SB          LanguageCode = "EN_SB"
	LanguageCodeEN_SC          LanguageCode = "EN_SC"
	LanguageCodeEN_SD          LanguageCode = "EN_SD"
	LanguageCodeEN_SE          LanguageCode = "EN_SE"
	LanguageCodeEN_SG          LanguageCode = "EN_SG"
	LanguageCodeEN_SH          LanguageCode = "EN_SH"
	LanguageCodeEN_SI          LanguageCode = "EN_SI"
	LanguageCodeEN_SL          LanguageCode = "EN_SL"
	LanguageCodeEN_SS          LanguageCode = "EN_SS"
	LanguageCodeEN_SX          LanguageCode = "EN_SX"
	LanguageCodeEN_SZ          LanguageCode = "EN_SZ"
	LanguageCodeEN_TC          LanguageCode = "EN_TC"
	LanguageCodeEN_TK          LanguageCode = "EN_TK"
	LanguageCodeEN_TO          LanguageCode = "EN_TO"
	LanguageCodeEN_TT          LanguageCode = "EN_TT"
	LanguageCodeEN_TV          LanguageCode = "EN_TV"
	LanguageCodeEN_TZ          LanguageCode = "EN_TZ"
	LanguageCodeEN_UG          LanguageCode = "EN_UG"
	LanguageCodeEN_UM          LanguageCode = "EN_UM"
	LanguageCodeEN_US          LanguageCode = "EN_US"
	LanguageCodeEN_VC          LanguageCode = "EN_VC"
	LanguageCodeEN_VG          LanguageCode = "EN_VG"
	LanguageCodeEN_VI          LanguageCode = "EN_VI"
	LanguageCodeEN_VU          LanguageCode = "EN_VU"
	LanguageCodeEN_WS          LanguageCode = "EN_WS"
	LanguageCodeEN_ZA          LanguageCode = "EN_ZA"
	LanguageCodeEN_ZM          LanguageCode = "EN_ZM"
	LanguageCodeEN_ZW          LanguageCode = "EN_ZW"
	LanguageCodeEO             LanguageCode = "EO"
	LanguageCodeES             LanguageCode = "ES"
	LanguageCodeES_AR          LanguageCode = "ES_AR"
	LanguageCodeES_BO          LanguageCode = "ES_BO"
	LanguageCodeES_BR          LanguageCode = "ES_BR"
	LanguageCodeES_BZ          LanguageCode = "ES_BZ"
	LanguageCodeES_CL          LanguageCode = "ES_CL"
	LanguageCodeES_CO          LanguageCode = "ES_CO"
	LanguageCodeES_CR          LanguageCode = "ES_CR"
	LanguageCodeES_CU          LanguageCode = "ES_CU"
	LanguageCodeES_DO          LanguageCode = "ES_DO"
	LanguageCodeES_EA          LanguageCode = "ES_EA"
	LanguageCodeES_EC          LanguageCode = "ES_EC"
	LanguageCodeES_ES          LanguageCode = "ES_ES"
	LanguageCodeES_GQ          LanguageCode = "ES_GQ"
	LanguageCodeES_GT          LanguageCode = "ES_GT"
	LanguageCodeES_HN          LanguageCode = "ES_HN"
	LanguageCodeES_IC          LanguageCode = "ES_IC"
	LanguageCodeES_MX          LanguageCode = "ES_MX"
	LanguageCodeES_NI          LanguageCode = "ES_NI"
	LanguageCodeES_PA          LanguageCode = "ES_PA"
	LanguageCodeES_PE          LanguageCode = "ES_PE"
	LanguageCodeES_PH          LanguageCode = "ES_PH"
	LanguageCodeES_PR          LanguageCode = "ES_PR"
	LanguageCodeES_PY          LanguageCode = "ES_PY"
	LanguageCodeES_SV          LanguageCode = "ES_SV"
	LanguageCodeES_US          LanguageCode = "ES_US"
	LanguageCodeES_UY          LanguageCode = "ES_UY"
	LanguageCodeES_VE          LanguageCode = "ES_VE"
	LanguageCodeET             LanguageCode = "ET"
	LanguageCodeET_EE          LanguageCode = "ET_EE"
	LanguageCodeEU             LanguageCode = "EU"
	LanguageCodeEU_ES          LanguageCode = "EU_ES"
	LanguageCodeEWO            LanguageCode = "EWO"
	LanguageCodeEWO_CM         LanguageCode = "EWO_CM"
	LanguageCodeFA             LanguageCode = "FA"
	LanguageCodeFA_AF          LanguageCode = "FA_AF"
	LanguageCodeFA_IR          LanguageCode = "FA_IR"
	LanguageCodeFF             LanguageCode = "FF"
	LanguageCodeFF_ADLM        LanguageCode = "FF_ADLM"
	LanguageCodeFF_ADLM_BF     LanguageCode = "FF_ADLM_BF"
	LanguageCodeFF_ADLM_CM     LanguageCode = "FF_ADLM_CM"
	LanguageCodeFF_ADLM_GH     LanguageCode = "FF_ADLM_GH"
	LanguageCodeFF_ADLM_GM     LanguageCode = "FF_ADLM_GM"
	LanguageCodeFF_ADLM_GN     LanguageCode = "FF_ADLM_GN"
	LanguageCodeFF_ADLM_GW     LanguageCode = "FF_ADLM_GW"
	LanguageCodeFF_ADLM_LR     LanguageCode = "FF_ADLM_LR"
	LanguageCodeFF_ADLM_MR     LanguageCode = "FF_ADLM_MR"
	LanguageCodeFF_ADLM_NE     LanguageCode = "FF_ADLM_NE"
	LanguageCodeFF_ADLM_NG     LanguageCode = "FF_ADLM_NG"
	LanguageCodeFF_ADLM_SL     LanguageCode = "FF_ADLM_SL"
	LanguageCodeFF_ADLM_SN     LanguageCode = "FF_ADLM_SN"
	LanguageCodeFF_LATN        LanguageCode = "FF_LATN"
	LanguageCodeFF_LATN_BF     LanguageCode = "FF_LATN_BF"
	LanguageCodeFF_LATN_CM     LanguageCode = "FF_LATN_CM"
	LanguageCodeFF_LATN_GH     LanguageCode = "FF_LATN_GH"
	LanguageCodeFF_LATN_GM     LanguageCode = "FF_LATN_GM"
	LanguageCodeFF_LATN_GN     LanguageCode = "FF_LATN_GN"
	LanguageCodeFF_LATN_GW     LanguageCode = "FF_LATN_GW"
	LanguageCodeFF_LATN_LR     LanguageCode = "FF_LATN_LR"
	LanguageCodeFF_LATN_MR     LanguageCode = "FF_LATN_MR"
	LanguageCodeFF_LATN_NE     LanguageCode = "FF_LATN_NE"
	LanguageCodeFF_LATN_NG     LanguageCode = "FF_LATN_NG"
	LanguageCodeFF_LATN_SL     LanguageCode = "FF_LATN_SL"
	LanguageCodeFF_LATN_SN     LanguageCode = "FF_LATN_SN"
	LanguageCodeFI             LanguageCode = "FI"
	LanguageCodeFI_FI          LanguageCode = "FI_FI"
	LanguageCodeFIL            LanguageCode = "FIL"
	LanguageCodeFIL_PH         LanguageCode = "FIL_PH"
	LanguageCodeFO             LanguageCode = "FO"
	LanguageCodeFO_DK          LanguageCode = "FO_DK"
	LanguageCodeFO_FO          LanguageCode = "FO_FO"
	LanguageCodeFR             LanguageCode = "FR"
	LanguageCodeFR_BE          LanguageCode = "FR_BE"
	LanguageCodeFR_BF          LanguageCode = "FR_BF"
	LanguageCodeFR_BI          LanguageCode = "FR_BI"
	LanguageCodeFR_BJ          LanguageCode = "FR_BJ"
	LanguageCodeFR_BL          LanguageCode = "FR_BL"
	LanguageCodeFR_CA          LanguageCode = "FR_CA"
	LanguageCodeFR_CD          LanguageCode = "FR_CD"
	LanguageCodeFR_CF          LanguageCode = "FR_CF"
	LanguageCodeFR_CG          LanguageCode = "FR_CG"
	LanguageCodeFR_CH          LanguageCode = "FR_CH"
	LanguageCodeFR_CI          LanguageCode = "FR_CI"
	LanguageCodeFR_CM          LanguageCode = "FR_CM"
	LanguageCodeFR_DJ          LanguageCode = "FR_DJ"
	LanguageCodeFR_DZ          LanguageCode = "FR_DZ"
	LanguageCodeFR_FR          LanguageCode = "FR_FR"
	LanguageCodeFR_GA          LanguageCode = "FR_GA"
	LanguageCodeFR_GF          LanguageCode = "FR_GF"
	LanguageCodeFR_GN          LanguageCode = "FR_GN"
	LanguageCodeFR_GP          LanguageCode = "FR_GP"
	LanguageCodeFR_GQ          LanguageCode = "FR_GQ"
	LanguageCodeFR_HT          LanguageCode = "FR_HT"
	LanguageCodeFR_KM          LanguageCode = "FR_KM"
	LanguageCodeFR_LU          LanguageCode = "FR_LU"
	LanguageCodeFR_MA          LanguageCode = "FR_MA"
	LanguageCodeFR_MC          LanguageCode = "FR_MC"
	LanguageCodeFR_MF          LanguageCode = "FR_MF"
	LanguageCodeFR_MG          LanguageCode = "FR_MG"
	LanguageCodeFR_ML          LanguageCode = "FR_ML"
	LanguageCodeFR_MQ          LanguageCode = "FR_MQ"
	LanguageCodeFR_MR          LanguageCode = "FR_MR"
	LanguageCodeFR_MU          LanguageCode = "FR_MU"
	LanguageCodeFR_NC          LanguageCode = "FR_NC"
	LanguageCodeFR_NE          LanguageCode = "FR_NE"
	LanguageCodeFR_PF          LanguageCode = "FR_PF"
	LanguageCodeFR_PM          LanguageCode = "FR_PM"
	LanguageCodeFR_RE          LanguageCode = "FR_RE"
	LanguageCodeFR_RW          LanguageCode = "FR_RW"
	LanguageCodeFR_SC          LanguageCode = "FR_SC"
	LanguageCodeFR_SN          LanguageCode = "FR_SN"
	LanguageCodeFR_SY          LanguageCode = "FR_SY"
	LanguageCodeFR_TD          LanguageCode = "FR_TD"
	LanguageCodeFR_TG          LanguageCode = "FR_TG"
	LanguageCodeFR_TN          LanguageCode = "FR_TN"
	LanguageCodeFR_VU          LanguageCode = "FR_VU"
	LanguageCodeFR_WF          LanguageCode = "FR_WF"
	LanguageCodeFR_YT          LanguageCode = "FR_YT"
	LanguageCodeFUR            LanguageCode = "FUR"
	LanguageCodeFUR_IT         LanguageCode = "FUR_IT"
	LanguageCodeFY             LanguageCode = "FY"
	LanguageCodeFY_NL          LanguageCode = "FY_NL"
	LanguageCodeGA             LanguageCode = "GA"
	LanguageCodeGA_GB          LanguageCode = "GA_GB"
	LanguageCodeGA_IE          LanguageCode = "GA_IE"
	LanguageCodeGD             LanguageCode = "GD"
	LanguageCodeGD_GB          LanguageCode = "GD_GB"
	LanguageCodeGL             LanguageCode = "GL"
	LanguageCodeGL_ES          LanguageCode = "GL_ES"
	LanguageCodeGSW            LanguageCode = "GSW"
	LanguageCodeGSW_CH         LanguageCode = "GSW_CH"
	LanguageCodeGSW_FR         LanguageCode = "GSW_FR"
	LanguageCodeGSW_LI         LanguageCode = "GSW_LI"
	LanguageCodeGU             LanguageCode = "GU"
	LanguageCodeGU_IN          LanguageCode = "GU_IN"
	LanguageCodeGUZ            LanguageCode = "GUZ"
	LanguageCodeGUZ_KE         LanguageCode = "GUZ_KE"
	LanguageCodeGV             LanguageCode = "GV"
	LanguageCodeGV_IM          LanguageCode = "GV_IM"
	LanguageCodeHA             LanguageCode = "HA"
	LanguageCodeHA_GH          LanguageCode = "HA_GH"
	LanguageCodeHA_NE          LanguageCode = "HA_NE"
	LanguageCodeHA_NG          LanguageCode = "HA_NG"
	LanguageCodeHAW            LanguageCode = "HAW"
	LanguageCodeHAW_US         LanguageCode = "HAW_US"
	LanguageCodeHE             LanguageCode = "HE"
	LanguageCodeHE_IL          LanguageCode = "HE_IL"
	LanguageCodeHI             LanguageCode = "HI"
	LanguageCodeHI_IN          LanguageCode = "HI_IN"
	LanguageCodeHR             LanguageCode = "HR"
	LanguageCodeHR_BA          LanguageCode = "HR_BA"
	LanguageCodeHR_HR          LanguageCode = "HR_HR"
	LanguageCodeHSB            LanguageCode = "HSB"
	LanguageCodeHSB_DE         LanguageCode = "HSB_DE"
	LanguageCodeHU             LanguageCode = "HU"
	LanguageCodeHU_HU          LanguageCode = "HU_HU"
	LanguageCodeHY             LanguageCode = "HY"
	LanguageCodeHY_AM          LanguageCode = "HY_AM"
	LanguageCodeIA             LanguageCode = "IA"
	LanguageCodeSTRING         LanguageCode = "STRING"
	LanguageCodeID_ID          LanguageCode = "ID_ID"
	LanguageCodeIG             LanguageCode = "IG"
	LanguageCodeIG_NG          LanguageCode = "IG_NG"
	LanguageCodeII             LanguageCode = "II"
	LanguageCodeII_CN          LanguageCode = "II_CN"
	LanguageCodeIS             LanguageCode = "IS"
	LanguageCodeIS_IS          LanguageCode = "IS_IS"
	LanguageCodeIT             LanguageCode = "IT"
	LanguageCodeIT_CH          LanguageCode = "IT_CH"
	LanguageCodeIT_IT          LanguageCode = "IT_IT"
	LanguageCodeIT_SM          LanguageCode = "IT_SM"
	LanguageCodeIT_VA          LanguageCode = "IT_VA"
	LanguageCodeJA             LanguageCode = "JA"
	LanguageCodeJA_JP          LanguageCode = "JA_JP"
	LanguageCodeJGO            LanguageCode = "JGO"
	LanguageCodeJGO_CM         LanguageCode = "JGO_CM"
	LanguageCodeJMC            LanguageCode = "JMC"
	LanguageCodeJMC_TZ         LanguageCode = "JMC_TZ"
	LanguageCodeJV             LanguageCode = "JV"
	LanguageCodeJV_ID          LanguageCode = "JV_ID"
	LanguageCodeKA             LanguageCode = "KA"
	LanguageCodeKA_GE          LanguageCode = "KA_GE"
	LanguageCodeKAB            LanguageCode = "KAB"
	LanguageCodeKAB_DZ         LanguageCode = "KAB_DZ"
	LanguageCodeKAM            LanguageCode = "KAM"
	LanguageCodeKAM_KE         LanguageCode = "KAM_KE"
	LanguageCodeKDE            LanguageCode = "KDE"
	LanguageCodeKDE_TZ         LanguageCode = "KDE_TZ"
	LanguageCodeKEA            LanguageCode = "KEA"
	LanguageCodeKEA_CV         LanguageCode = "KEA_CV"
	LanguageCodeKHQ            LanguageCode = "KHQ"
	LanguageCodeKHQ_ML         LanguageCode = "KHQ_ML"
	LanguageCodeKI             LanguageCode = "KI"
	LanguageCodeKI_KE          LanguageCode = "KI_KE"
	LanguageCodeKK             LanguageCode = "KK"
	LanguageCodeKK_KZ          LanguageCode = "KK_KZ"
	LanguageCodeKKJ            LanguageCode = "KKJ"
	LanguageCodeKKJ_CM         LanguageCode = "KKJ_CM"
	LanguageCodeKL             LanguageCode = "KL"
	LanguageCodeKL_GL          LanguageCode = "KL_GL"
	LanguageCodeKLN            LanguageCode = "KLN"
	LanguageCodeKLN_KE         LanguageCode = "KLN_KE"
	LanguageCodeKM             LanguageCode = "KM"
	LanguageCodeKM_KH          LanguageCode = "KM_KH"
	LanguageCodeKN             LanguageCode = "KN"
	LanguageCodeKN_IN          LanguageCode = "KN_IN"
	LanguageCodeKO             LanguageCode = "KO"
	LanguageCodeKO_KP          LanguageCode = "KO_KP"
	LanguageCodeKO_KR          LanguageCode = "KO_KR"
	LanguageCodeKOK            LanguageCode = "KOK"
	LanguageCodeKOK_IN         LanguageCode = "KOK_IN"
	LanguageCodeKS             LanguageCode = "KS"
	LanguageCodeKS_ARAB        LanguageCode = "KS_ARAB"
	LanguageCodeKS_ARAB_IN     LanguageCode = "KS_ARAB_IN"
	LanguageCodeKSB            LanguageCode = "KSB"
	LanguageCodeKSB_TZ         LanguageCode = "KSB_TZ"
	LanguageCodeKSF            LanguageCode = "KSF"
	LanguageCodeKSF_CM         LanguageCode = "KSF_CM"
	LanguageCodeKSH            LanguageCode = "KSH"
	LanguageCodeKSH_DE         LanguageCode = "KSH_DE"
	LanguageCodeKU             LanguageCode = "KU"
	LanguageCodeKU_TR          LanguageCode = "KU_TR"
	LanguageCodeKW             LanguageCode = "KW"
	LanguageCodeKW_GB          LanguageCode = "KW_GB"
	LanguageCodeKY             LanguageCode = "KY"
	LanguageCodeKY_KG          LanguageCode = "KY_KG"
	LanguageCodeLAG            LanguageCode = "LAG"
	LanguageCodeLAG_TZ         LanguageCode = "LAG_TZ"
	LanguageCodeLB             LanguageCode = "LB"
	LanguageCodeLB_LU          LanguageCode = "LB_LU"
	LanguageCodeLG             LanguageCode = "LG"
	LanguageCodeLG_UG          LanguageCode = "LG_UG"
	LanguageCodeLKT            LanguageCode = "LKT"
	LanguageCodeLKT_US         LanguageCode = "LKT_US"
	LanguageCodeLN             LanguageCode = "LN"
	LanguageCodeLN_AO          LanguageCode = "LN_AO"
	LanguageCodeLN_CD          LanguageCode = "LN_CD"
	LanguageCodeLN_CF          LanguageCode = "LN_CF"
	LanguageCodeLN_CG          LanguageCode = "LN_CG"
	LanguageCodeLO             LanguageCode = "LO"
	LanguageCodeLO_LA          LanguageCode = "LO_LA"
	LanguageCodeLRC            LanguageCode = "LRC"
	LanguageCodeLRC_IQ         LanguageCode = "LRC_IQ"
	LanguageCodeLRC_IR         LanguageCode = "LRC_IR"
	LanguageCodeLT             LanguageCode = "LT"
	LanguageCodeLT_LT          LanguageCode = "LT_LT"
	LanguageCodeLU             LanguageCode = "LU"
	LanguageCodeLU_CD          LanguageCode = "LU_CD"
	LanguageCodeLUO            LanguageCode = "LUO"
	LanguageCodeLUO_KE         LanguageCode = "LUO_KE"
	LanguageCodeLUY            LanguageCode = "LUY"
	LanguageCodeLUY_KE         LanguageCode = "LUY_KE"
	LanguageCodeLV             LanguageCode = "LV"
	LanguageCodeLV_LV          LanguageCode = "LV_LV"
	LanguageCodeMAI            LanguageCode = "MAI"
	LanguageCodeMAI_IN         LanguageCode = "MAI_IN"
	LanguageCodeMAS            LanguageCode = "MAS"
	LanguageCodeMAS_KE         LanguageCode = "MAS_KE"
	LanguageCodeMAS_TZ         LanguageCode = "MAS_TZ"
	LanguageCodeMER            LanguageCode = "MER"
	LanguageCodeMER_KE         LanguageCode = "MER_KE"
	LanguageCodeMFE            LanguageCode = "MFE"
	LanguageCodeMFE_MU         LanguageCode = "MFE_MU"
	LanguageCodeMG             LanguageCode = "MG"
	LanguageCodeMG_MG          LanguageCode = "MG_MG"
	LanguageCodeMGH            LanguageCode = "MGH"
	LanguageCodeMGH_MZ         LanguageCode = "MGH_MZ"
	LanguageCodeMGO            LanguageCode = "MGO"
	LanguageCodeMGO_CM         LanguageCode = "MGO_CM"
	LanguageCodeMI             LanguageCode = "MI"
	LanguageCodeMI_NZ          LanguageCode = "MI_NZ"
	LanguageCodeMK             LanguageCode = "MK"
	LanguageCodeMK_MK          LanguageCode = "MK_MK"
	LanguageCodeML             LanguageCode = "ML"
	LanguageCodeML_IN          LanguageCode = "ML_IN"
	LanguageCodeMN             LanguageCode = "MN"
	LanguageCodeMN_MN          LanguageCode = "MN_MN"
	LanguageCodeMNI            LanguageCode = "MNI"
	LanguageCodeMNI_BENG       LanguageCode = "MNI_BENG"
	LanguageCodeMNI_BENG_IN    LanguageCode = "MNI_BENG_IN"
	LanguageCodeMR             LanguageCode = "MR"
	LanguageCodeMR_IN          LanguageCode = "MR_IN"
	LanguageCodeMS             LanguageCode = "MS"
	LanguageCodeMS_BN          LanguageCode = "MS_BN"
	LanguageCodeMS_ID          LanguageCode = "MS_ID"
	LanguageCodeMS_MY          LanguageCode = "MS_MY"
	LanguageCodeMS_SG          LanguageCode = "MS_SG"
	LanguageCodeMT             LanguageCode = "MT"
	LanguageCodeMT_MT          LanguageCode = "MT_MT"
	LanguageCodeMUA            LanguageCode = "MUA"
	LanguageCodeMUA_CM         LanguageCode = "MUA_CM"
	LanguageCodeMY             LanguageCode = "MY"
	LanguageCodeMY_MM          LanguageCode = "MY_MM"
	LanguageCodeMZN            LanguageCode = "MZN"
	LanguageCodeMZN_IR         LanguageCode = "MZN_IR"
	LanguageCodeNAQ            LanguageCode = "NAQ"
	LanguageCodeNAQ_NA         LanguageCode = "NAQ_NA"
	LanguageCodeNB             LanguageCode = "NB"
	LanguageCodeNB_NO          LanguageCode = "NB_NO"
	LanguageCodeNB_SJ          LanguageCode = "NB_SJ"
	LanguageCodeND             LanguageCode = "ND"
	LanguageCodeND_ZW          LanguageCode = "ND_ZW"
	LanguageCodeNDS            LanguageCode = "NDS"
	LanguageCodeNDS_DE         LanguageCode = "NDS_DE"
	LanguageCodeNDS_NL         LanguageCode = "NDS_NL"
	LanguageCodeNE             LanguageCode = "NE"
	LanguageCodeNE_IN          LanguageCode = "NE_IN"
	LanguageCodeNE_NP          LanguageCode = "NE_NP"
	LanguageCodeNL             LanguageCode = "NL"
	LanguageCodeNL_AW          LanguageCode = "NL_AW"
	LanguageCodeNL_BE          LanguageCode = "NL_BE"
	LanguageCodeNL_BQ          LanguageCode = "NL_BQ"
	LanguageCodeNL_CW          LanguageCode = "NL_CW"
	LanguageCodeNL_NL          LanguageCode = "NL_NL"
	LanguageCodeNL_SR          LanguageCode = "NL_SR"
	LanguageCodeNL_SX          LanguageCode = "NL_SX"
	LanguageCodeNMG            LanguageCode = "NMG"
	LanguageCodeNMG_CM         LanguageCode = "NMG_CM"
	LanguageCodeNN             LanguageCode = "NN"
	LanguageCodeNN_NO          LanguageCode = "NN_NO"
	LanguageCodeNNH            LanguageCode = "NNH"
	LanguageCodeNNH_CM         LanguageCode = "NNH_CM"
	LanguageCodeNUS            LanguageCode = "NUS"
	LanguageCodeNUS_SS         LanguageCode = "NUS_SS"
	LanguageCodeNYN            LanguageCode = "NYN"
	LanguageCodeNYN_UG         LanguageCode = "NYN_UG"
	LanguageCodeOM             LanguageCode = "OM"
	LanguageCodeOM_ET          LanguageCode = "OM_ET"
	LanguageCodeOM_KE          LanguageCode = "OM_KE"
	LanguageCodeOR             LanguageCode = "OR"
	LanguageCodeOR_IN          LanguageCode = "OR_IN"
	LanguageCodeOS             LanguageCode = "OS"
	LanguageCodeOS_GE          LanguageCode = "OS_GE"
	LanguageCodeOS_RU          LanguageCode = "OS_RU"
	LanguageCodePA             LanguageCode = "PA"
	LanguageCodePA_ARAB        LanguageCode = "PA_ARAB"
	LanguageCodePA_ARAB_PK     LanguageCode = "PA_ARAB_PK"
	LanguageCodePA_GURU        LanguageCode = "PA_GURU"
	LanguageCodePA_GURU_IN     LanguageCode = "PA_GURU_IN"
	LanguageCodePCM            LanguageCode = "PCM"
	LanguageCodePCM_NG         LanguageCode = "PCM_NG"
	LanguageCodePL             LanguageCode = "PL"
	LanguageCodePL_PL          LanguageCode = "PL_PL"
	LanguageCodePRG            LanguageCode = "PRG"
	LanguageCodePS             LanguageCode = "PS"
	LanguageCodePS_AF          LanguageCode = "PS_AF"
	LanguageCodePS_PK          LanguageCode = "PS_PK"
	LanguageCodePT             LanguageCode = "PT"
	LanguageCodePT_AO          LanguageCode = "PT_AO"
	LanguageCodePT_BR          LanguageCode = "PT_BR"
	LanguageCodePT_CH          LanguageCode = "PT_CH"
	LanguageCodePT_CV          LanguageCode = "PT_CV"
	LanguageCodePT_GQ          LanguageCode = "PT_GQ"
	LanguageCodePT_GW          LanguageCode = "PT_GW"
	LanguageCodePT_LU          LanguageCode = "PT_LU"
	LanguageCodePT_MO          LanguageCode = "PT_MO"
	LanguageCodePT_MZ          LanguageCode = "PT_MZ"
	LanguageCodePT_PT          LanguageCode = "PT_PT"
	LanguageCodePT_ST          LanguageCode = "PT_ST"
	LanguageCodePT_TL          LanguageCode = "PT_TL"
	LanguageCodeQU             LanguageCode = "QU"
	LanguageCodeQU_BO          LanguageCode = "QU_BO"
	LanguageCodeQU_EC          LanguageCode = "QU_EC"
	LanguageCodeQU_PE          LanguageCode = "QU_PE"
	LanguageCodeRM             LanguageCode = "RM"
	LanguageCodeRM_CH          LanguageCode = "RM_CH"
	LanguageCodeRN             LanguageCode = "RN"
	LanguageCodeRN_BI          LanguageCode = "RN_BI"
	LanguageCodeRO             LanguageCode = "RO"
	LanguageCodeRO_MD          LanguageCode = "RO_MD"
	LanguageCodeRO_RO          LanguageCode = "RO_RO"
	LanguageCodeROF            LanguageCode = "ROF"
	LanguageCodeROF_TZ         LanguageCode = "ROF_TZ"
	LanguageCodeRU             LanguageCode = "RU"
	LanguageCodeRU_BY          LanguageCode = "RU_BY"
	LanguageCodeRU_KG          LanguageCode = "RU_KG"
	LanguageCodeRU_KZ          LanguageCode = "RU_KZ"
	LanguageCodeRU_MD          LanguageCode = "RU_MD"
	LanguageCodeRU_RU          LanguageCode = "RU_RU"
	LanguageCodeRU_UA          LanguageCode = "RU_UA"
	LanguageCodeRW             LanguageCode = "RW"
	LanguageCodeRW_RW          LanguageCode = "RW_RW"
	LanguageCodeRWK            LanguageCode = "RWK"
	LanguageCodeRWK_TZ         LanguageCode = "RWK_TZ"
	LanguageCodeSAH            LanguageCode = "SAH"
	LanguageCodeSAH_RU         LanguageCode = "SAH_RU"
	LanguageCodeSAQ            LanguageCode = "SAQ"
	LanguageCodeSAQ_KE         LanguageCode = "SAQ_KE"
	LanguageCodeSAT            LanguageCode = "SAT"
	LanguageCodeSAT_OLCK       LanguageCode = "SAT_OLCK"
	LanguageCodeSAT_OLCK_IN    LanguageCode = "SAT_OLCK_IN"
	LanguageCodeSBP            LanguageCode = "SBP"
	LanguageCodeSBP_TZ         LanguageCode = "SBP_TZ"
	LanguageCodeSD             LanguageCode = "SD"
	LanguageCodeSD_ARAB        LanguageCode = "SD_ARAB"
	LanguageCodeSD_ARAB_PK     LanguageCode = "SD_ARAB_PK"
	LanguageCodeSD_DEVA        LanguageCode = "SD_DEVA"
	LanguageCodeSD_DEVA_IN     LanguageCode = "SD_DEVA_IN"
	LanguageCodeSE             LanguageCode = "SE"
	LanguageCodeSE_FI          LanguageCode = "SE_FI"
	LanguageCodeSE_NO          LanguageCode = "SE_NO"
	LanguageCodeSE_SE          LanguageCode = "SE_SE"
	LanguageCodeSEH            LanguageCode = "SEH"
	LanguageCodeSEH_MZ         LanguageCode = "SEH_MZ"
	LanguageCodeSES            LanguageCode = "SES"
	LanguageCodeSES_ML         LanguageCode = "SES_ML"
	LanguageCodeSG             LanguageCode = "SG"
	LanguageCodeSG_CF          LanguageCode = "SG_CF"
	LanguageCodeSHI            LanguageCode = "SHI"
	LanguageCodeSHI_LATN       LanguageCode = "SHI_LATN"
	LanguageCodeSHI_LATN_MA    LanguageCode = "SHI_LATN_MA"
	LanguageCodeSHI_TFNG       LanguageCode = "SHI_TFNG"
	LanguageCodeSHI_TFNG_MA    LanguageCode = "SHI_TFNG_MA"
	LanguageCodeSI             LanguageCode = "SI"
	LanguageCodeSI_LK          LanguageCode = "SI_LK"
	LanguageCodeSK             LanguageCode = "SK"
	LanguageCodeSK_SK          LanguageCode = "SK_SK"
	LanguageCodeSL             LanguageCode = "SL"
	LanguageCodeSL_SI          LanguageCode = "SL_SI"
	LanguageCodeSMN            LanguageCode = "SMN"
	LanguageCodeSMN_FI         LanguageCode = "SMN_FI"
	LanguageCodeSN             LanguageCode = "SN"
	LanguageCodeSN_ZW          LanguageCode = "SN_ZW"
	LanguageCodeSO             LanguageCode = "SO"
	LanguageCodeSO_DJ          LanguageCode = "SO_DJ"
	LanguageCodeSO_ET          LanguageCode = "SO_ET"
	LanguageCodeSO_KE          LanguageCode = "SO_KE"
	LanguageCodeSO_SO          LanguageCode = "SO_SO"
	LanguageCodeSQ             LanguageCode = "SQ"
	LanguageCodeSQ_AL          LanguageCode = "SQ_AL"
	LanguageCodeSQ_MK          LanguageCode = "SQ_MK"
	LanguageCodeSQ_XK          LanguageCode = "SQ_XK"
	LanguageCodeSR             LanguageCode = "SR"
	LanguageCodeSR_CYRL        LanguageCode = "SR_CYRL"
	LanguageCodeSR_CYRL_BA     LanguageCode = "SR_CYRL_BA"
	LanguageCodeSR_CYRL_ME     LanguageCode = "SR_CYRL_ME"
	LanguageCodeSR_CYRL_RS     LanguageCode = "SR_CYRL_RS"
	LanguageCodeSR_CYRL_XK     LanguageCode = "SR_CYRL_XK"
	LanguageCodeSR_LATN        LanguageCode = "SR_LATN"
	LanguageCodeSR_LATN_BA     LanguageCode = "SR_LATN_BA"
	LanguageCodeSR_LATN_ME     LanguageCode = "SR_LATN_ME"
	LanguageCodeSR_LATN_RS     LanguageCode = "SR_LATN_RS"
	LanguageCodeSR_LATN_XK     LanguageCode = "SR_LATN_XK"
	LanguageCodeSU             LanguageCode = "SU"
	LanguageCodeSU_LATN        LanguageCode = "SU_LATN"
	LanguageCodeSU_LATN_ID     LanguageCode = "SU_LATN_ID"
	LanguageCodeSV             LanguageCode = "SV"
	LanguageCodeSV_AX          LanguageCode = "SV_AX"
	LanguageCodeSV_FI          LanguageCode = "SV_FI"
	LanguageCodeSV_SE          LanguageCode = "SV_SE"
	LanguageCodeSW             LanguageCode = "SW"
	LanguageCodeSW_CD          LanguageCode = "SW_CD"
	LanguageCodeSW_KE          LanguageCode = "SW_KE"
	LanguageCodeSW_TZ          LanguageCode = "SW_TZ"
	LanguageCodeSW_UG          LanguageCode = "SW_UG"
	LanguageCodeTA             LanguageCode = "TA"
	LanguageCodeTA_IN          LanguageCode = "TA_IN"
	LanguageCodeTA_LK          LanguageCode = "TA_LK"
	LanguageCodeTA_MY          LanguageCode = "TA_MY"
	LanguageCodeTA_SG          LanguageCode = "TA_SG"
	LanguageCodeTE             LanguageCode = "TE"
	LanguageCodeTE_IN          LanguageCode = "TE_IN"
	LanguageCodeTEO            LanguageCode = "TEO"
	LanguageCodeTEO_KE         LanguageCode = "TEO_KE"
	LanguageCodeTEO_UG         LanguageCode = "TEO_UG"
	LanguageCodeTG             LanguageCode = "TG"
	LanguageCodeTG_TJ          LanguageCode = "TG_TJ"
	LanguageCodeTH             LanguageCode = "TH"
	LanguageCodeTH_TH          LanguageCode = "TH_TH"
	LanguageCodeTI             LanguageCode = "TI"
	LanguageCodeTI_ER          LanguageCode = "TI_ER"
	LanguageCodeTI_ET          LanguageCode = "TI_ET"
	LanguageCodeTK             LanguageCode = "TK"
	LanguageCodeTK_TM          LanguageCode = "TK_TM"
	LanguageCodeTO             LanguageCode = "TO"
	LanguageCodeTO_TO          LanguageCode = "TO_TO"
	LanguageCodeTR             LanguageCode = "TR"
	LanguageCodeTR_CY          LanguageCode = "TR_CY"
	LanguageCodeTR_TR          LanguageCode = "TR_TR"
	LanguageCodeTT             LanguageCode = "TT"
	LanguageCodeTT_RU          LanguageCode = "TT_RU"
	LanguageCodeTWQ            LanguageCode = "TWQ"
	LanguageCodeTWQ_NE         LanguageCode = "TWQ_NE"
	LanguageCodeTZM            LanguageCode = "TZM"
	LanguageCodeTZM_MA         LanguageCode = "TZM_MA"
	LanguageCodeUG             LanguageCode = "UG"
	LanguageCodeUG_CN          LanguageCode = "UG_CN"
	LanguageCodeUK             LanguageCode = "UK"
	LanguageCodeUK_UA          LanguageCode = "UK_UA"
	LanguageCodeUR             LanguageCode = "UR"
	LanguageCodeUR_IN          LanguageCode = "UR_IN"
	LanguageCodeUR_PK          LanguageCode = "UR_PK"
	LanguageCodeUZ             LanguageCode = "UZ"
	LanguageCodeUZ_ARAB        LanguageCode = "UZ_ARAB"
	LanguageCodeUZ_ARAB_AF     LanguageCode = "UZ_ARAB_AF"
	LanguageCodeUZ_CYRL        LanguageCode = "UZ_CYRL"
	LanguageCodeUZ_CYRL_UZ     LanguageCode = "UZ_CYRL_UZ"
	LanguageCodeUZ_LATN        LanguageCode = "UZ_LATN"
	LanguageCodeUZ_LATN_UZ     LanguageCode = "UZ_LATN_UZ"
	LanguageCodeVAI            LanguageCode = "VAI"
	LanguageCodeVAI_LATN       LanguageCode = "VAI_LATN"
	LanguageCodeVAI_LATN_LR    LanguageCode = "VAI_LATN_LR"
	LanguageCodeVAI_VAII       LanguageCode = "VAI_VAII"
	LanguageCodeVAI_VAII_LR    LanguageCode = "VAI_VAII_LR"
	LanguageCodeVI             LanguageCode = "VI"
	LanguageCodeVI_VN          LanguageCode = "VI_VN"
	LanguageCodeVO             LanguageCode = "VO"
	LanguageCodeVUN            LanguageCode = "VUN"
	LanguageCodeVUN_TZ         LanguageCode = "VUN_TZ"
	LanguageCodeWAE            LanguageCode = "WAE"
	LanguageCodeWAE_CH         LanguageCode = "WAE_CH"
	LanguageCodeWO             LanguageCode = "WO"
	LanguageCodeWO_SN          LanguageCode = "WO_SN"
	LanguageCodeXH             LanguageCode = "XH"
	LanguageCodeXH_ZA          LanguageCode = "XH_ZA"
	LanguageCodeXOG            LanguageCode = "XOG"
	LanguageCodeXOG_UG         LanguageCode = "XOG_UG"
	LanguageCodeYAV            LanguageCode = "YAV"
	LanguageCodeYAV_CM         LanguageCode = "YAV_CM"
	LanguageCodeYI             LanguageCode = "YI"
	LanguageCodeYO             LanguageCode = "YO"
	LanguageCodeYO_BJ          LanguageCode = "YO_BJ"
	LanguageCodeYO_NG          LanguageCode = "YO_NG"
	LanguageCodeYUE            LanguageCode = "YUE"
	LanguageCodeYUE_HANS       LanguageCode = "YUE_HANS"
	LanguageCodeYUE_HANS_CN    LanguageCode = "YUE_HANS_CN"
	LanguageCodeYUE_HANT       LanguageCode = "YUE_HANT"
	LanguageCodeYUE_HANT_HK    LanguageCode = "YUE_HANT_HK"
	LanguageCodeZGH            LanguageCode = "ZGH"
	LanguageCodeZGH_MA         LanguageCode = "ZGH_MA"
	LanguageCodeZH             LanguageCode = "ZH"
	LanguageCodeZH_HANS        LanguageCode = "ZH_HANS"
	LanguageCodeZH_HANS_CN     LanguageCode = "ZH_HANS_CN"
	LanguageCodeZH_HANS_HK     LanguageCode = "ZH_HANS_HK"
	LanguageCodeZH_HANS_MO     LanguageCode = "ZH_HANS_MO"
	LanguageCodeZH_HANS_SG     LanguageCode = "ZH_HANS_SG"
	LanguageCodeZH_HANT        LanguageCode = "ZH_HANT"
	LanguageCodeZH_HANT_HK     LanguageCode = "ZH_HANT_HK"
	LanguageCodeZH_HANT_MO     LanguageCode = "ZH_HANT_MO"
	LanguageCodeZH_HANT_TW     LanguageCode = "ZH_HANT_TW"
	LanguageCodeZU             LanguageCode = "ZU"
	LanguageCodeZU_ZA          LanguageCode = "ZU_ZA"
)

func AllLanguageCode() []LanguageCode {
	return []LanguageCode{
		LanguageCodeAF,
		LanguageCodeAF_NA,
		LanguageCodeID,
		LanguageCodeAF_ZA,
		LanguageCodeAGQ,
		LanguageCodeAGQ_CM,
		LanguageCodeAK,
		LanguageCodeAK_GH,
		LanguageCodeAM,
		LanguageCodeAM_ET,
		LanguageCodeAR,
		LanguageCodeAR_AE,
		LanguageCodeAR_BH,
		LanguageCodeAR_DJ,
		LanguageCodeAR_DZ,
		LanguageCodeAR_EG,
		LanguageCodeAR_EH,
		LanguageCodeAR_ER,
		LanguageCodeAR_IL,
		LanguageCodeAR_IQ,
		LanguageCodeAR_JO,
		LanguageCodeAR_KM,
		LanguageCodeAR_KW,
		LanguageCodeAR_LB,
		LanguageCodeAR_LY,
		LanguageCodeAR_MA,
		LanguageCodeAR_MR,
		LanguageCodeAR_OM,
		LanguageCodeAR_PS,
		LanguageCodeAR_QA,
		LanguageCodeAR_SA,
		LanguageCodeAR_SD,
		LanguageCodeAR_SO,
		LanguageCodeAR_SS,
		LanguageCodeAR_SY,
		LanguageCodeAR_TD,
		LanguageCodeAR_TN,
		LanguageCodeAR_YE,
		LanguageCodeAS,
		LanguageCodeAS_IN,
		LanguageCodeASA,
		LanguageCodeASA_TZ,
		LanguageCodeAST,
		LanguageCodeAST_ES,
		LanguageCodeAZ,
		LanguageCodeAZ_CYRL,
		LanguageCodeAZ_CYRL_AZ,
		LanguageCodeAZ_LATN,
		LanguageCodeAZ_LATN_AZ,
		LanguageCodeBAS,
		LanguageCodeBAS_CM,
		LanguageCodeBE,
		LanguageCodeBE_BY,
		LanguageCodeBEM,
		LanguageCodeBEM_ZM,
		LanguageCodeBEZ,
		LanguageCodeBEZ_TZ,
		LanguageCodeBG,
		LanguageCodeBG_BG,
		LanguageCodeBM,
		LanguageCodeBM_ML,
		LanguageCodeBN,
		LanguageCodeBN_BD,
		LanguageCodeBN_IN,
		LanguageCodeBO,
		LanguageCodeBO_CN,
		LanguageCodeBO_IN,
		LanguageCodeBR,
		LanguageCodeBR_FR,
		LanguageCodeBRX,
		LanguageCodeBRX_IN,
		LanguageCodeBS,
		LanguageCodeBS_CYRL,
		LanguageCodeBS_CYRL_BA,
		LanguageCodeBS_LATN,
		LanguageCodeBS_LATN_BA,
		LanguageCodeCA,
		LanguageCodeCA_AD,
		LanguageCodeCA_ES,
		LanguageCodeCA_ES_VALENCIA,
		LanguageCodeCA_FR,
		LanguageCodeCA_IT,
		LanguageCodeCCP,
		LanguageCodeCCP_BD,
		LanguageCodeCCP_IN,
		LanguageCodeCE,
		LanguageCodeCE_RU,
		LanguageCodeCEB,
		LanguageCodeCEB_PH,
		LanguageCodeCGG,
		LanguageCodeCGG_UG,
		LanguageCodeCHR,
		LanguageCodeCHR_US,
		LanguageCodeCKB,
		LanguageCodeCKB_IQ,
		LanguageCodeCKB_IR,
		LanguageCodeCS,
		LanguageCodeCS_CZ,
		LanguageCodeCU,
		LanguageCodeCU_RU,
		LanguageCodeCY,
		LanguageCodeCY_GB,
		LanguageCodeDA,
		LanguageCodeDA_DK,
		LanguageCodeDA_GL,
		LanguageCodeDAV,
		LanguageCodeDAV_KE,
		LanguageCodeDE,
		LanguageCodeDE_AT,
		LanguageCodeDE_BE,
		LanguageCodeDE_CH,
		LanguageCodeDE_DE,
		LanguageCodeDE_IT,
		LanguageCodeDE_LI,
		LanguageCodeDE_LU,
		LanguageCodeDJE,
		LanguageCodeDJE_NE,
		LanguageCodeDSB,
		LanguageCodeDSB_DE,
		LanguageCodeDUA,
		LanguageCodeDUA_CM,
		LanguageCodeDYO,
		LanguageCodeDYO_SN,
		LanguageCodeDZ,
		LanguageCodeDZ_BT,
		LanguageCodeEBU,
		LanguageCodeEBU_KE,
		LanguageCodeEE,
		LanguageCodeEE_GH,
		LanguageCodeEE_TG,
		LanguageCodeEL,
		LanguageCodeEL_CY,
		LanguageCodeEL_GR,
		LanguageCodeEN,
		LanguageCodeEN_AE,
		LanguageCodeEN_AG,
		LanguageCodeEN_AI,
		LanguageCodeEN_AS,
		LanguageCodeEN_AT,
		LanguageCodeEN_AU,
		LanguageCodeEN_BB,
		LanguageCodeEN_BE,
		LanguageCodeEN_BI,
		LanguageCodeEN_BM,
		LanguageCodeEN_BS,
		LanguageCodeEN_BW,
		LanguageCodeEN_BZ,
		LanguageCodeEN_CA,
		LanguageCodeEN_CC,
		LanguageCodeEN_CH,
		LanguageCodeEN_CK,
		LanguageCodeEN_CM,
		LanguageCodeEN_CX,
		LanguageCodeEN_CY,
		LanguageCodeEN_DE,
		LanguageCodeEN_DG,
		LanguageCodeEN_DK,
		LanguageCodeEN_DM,
		LanguageCodeEN_ER,
		LanguageCodeEN_FI,
		LanguageCodeEN_FJ,
		LanguageCodeEN_FK,
		LanguageCodeEN_FM,
		LanguageCodeEN_GB,
		LanguageCodeEN_GD,
		LanguageCodeEN_GG,
		LanguageCodeEN_GH,
		LanguageCodeEN_GI,
		LanguageCodeEN_GM,
		LanguageCodeEN_GU,
		LanguageCodeEN_GY,
		LanguageCodeEN_HK,
		LanguageCodeEN_IE,
		LanguageCodeEN_IL,
		LanguageCodeEN_IM,
		LanguageCodeEN_IN,
		LanguageCodeEN_IO,
		LanguageCodeEN_JE,
		LanguageCodeEN_JM,
		LanguageCodeEN_KE,
		LanguageCodeEN_KI,
		LanguageCodeEN_KN,
		LanguageCodeEN_KY,
		LanguageCodeEN_LC,
		LanguageCodeEN_LR,
		LanguageCodeEN_LS,
		LanguageCodeEN_MG,
		LanguageCodeEN_MH,
		LanguageCodeEN_MO,
		LanguageCodeEN_MP,
		LanguageCodeEN_MS,
		LanguageCodeEN_MT,
		LanguageCodeEN_MU,
		LanguageCodeEN_MW,
		LanguageCodeEN_MY,
		LanguageCodeEN_NA,
		LanguageCodeEN_NF,
		LanguageCodeEN_NG,
		LanguageCodeEN_NL,
		LanguageCodeEN_NR,
		LanguageCodeEN_NU,
		LanguageCodeEN_NZ,
		LanguageCodeEN_PG,
		LanguageCodeEN_PH,
		LanguageCodeEN_PK,
		LanguageCodeEN_PN,
		LanguageCodeEN_PR,
		LanguageCodeEN_PW,
		LanguageCodeEN_RW,
		LanguageCodeEN_SB,
		LanguageCodeEN_SC,
		LanguageCodeEN_SD,
		LanguageCodeEN_SE,
		LanguageCodeEN_SG,
		LanguageCodeEN_SH,
		LanguageCodeEN_SI,
		LanguageCodeEN_SL,
		LanguageCodeEN_SS,
		LanguageCodeEN_SX,
		LanguageCodeEN_SZ,
		LanguageCodeEN_TC,
		LanguageCodeEN_TK,
		LanguageCodeEN_TO,
		LanguageCodeEN_TT,
		LanguageCodeEN_TV,
		LanguageCodeEN_TZ,
		LanguageCodeEN_UG,
		LanguageCodeEN_UM,
		LanguageCodeEN_US,
		LanguageCodeEN_VC,
		LanguageCodeEN_VG,
		LanguageCodeEN_VI,
		LanguageCodeEN_VU,
		LanguageCodeEN_WS,
		LanguageCodeEN_ZA,
		LanguageCodeEN_ZM,
		LanguageCodeEN_ZW,
		LanguageCodeEO,
		LanguageCodeES,
		LanguageCodeES_AR,
		LanguageCodeES_BO,
		LanguageCodeES_BR,
		LanguageCodeES_BZ,
		LanguageCodeES_CL,
		LanguageCodeES_CO,
		LanguageCodeES_CR,
		LanguageCodeES_CU,
		LanguageCodeES_DO,
		LanguageCodeES_EA,
		LanguageCodeES_EC,
		LanguageCodeES_ES,
		LanguageCodeES_GQ,
		LanguageCodeES_GT,
		LanguageCodeES_HN,
		LanguageCodeES_IC,
		LanguageCodeES_MX,
		LanguageCodeES_NI,
		LanguageCodeES_PA,
		LanguageCodeES_PE,
		LanguageCodeES_PH,
		LanguageCodeES_PR,
		LanguageCodeES_PY,
		LanguageCodeES_SV,
		LanguageCodeES_US,
		LanguageCodeES_UY,
		LanguageCodeES_VE,
		LanguageCodeET,
		LanguageCodeET_EE,
		LanguageCodeEU,
		LanguageCodeEU_ES,
		LanguageCodeEWO,
		LanguageCodeEWO_CM,
		LanguageCodeFA,
		LanguageCodeFA_AF,
		LanguageCodeFA_IR,
		LanguageCodeFF,
		LanguageCodeFF_ADLM,
		LanguageCodeFF_ADLM_BF,
		LanguageCodeFF_ADLM_CM,
		LanguageCodeFF_ADLM_GH,
		LanguageCodeFF_ADLM_GM,
		LanguageCodeFF_ADLM_GN,
		LanguageCodeFF_ADLM_GW,
		LanguageCodeFF_ADLM_LR,
		LanguageCodeFF_ADLM_MR,
		LanguageCodeFF_ADLM_NE,
		LanguageCodeFF_ADLM_NG,
		LanguageCodeFF_ADLM_SL,
		LanguageCodeFF_ADLM_SN,
		LanguageCodeFF_LATN,
		LanguageCodeFF_LATN_BF,
		LanguageCodeFF_LATN_CM,
		LanguageCodeFF_LATN_GH,
		LanguageCodeFF_LATN_GM,
		LanguageCodeFF_LATN_GN,
		LanguageCodeFF_LATN_GW,
		LanguageCodeFF_LATN_LR,
		LanguageCodeFF_LATN_MR,
		LanguageCodeFF_LATN_NE,
		LanguageCodeFF_LATN_NG,
		LanguageCodeFF_LATN_SL,
		LanguageCodeFF_LATN_SN,
		LanguageCodeFI,
		LanguageCodeFI_FI,
		LanguageCodeFIL,
		LanguageCodeFIL_PH,
		LanguageCodeFO,
		LanguageCodeFO_DK,
		LanguageCodeFO_FO,
		LanguageCodeFR,
		LanguageCodeFR_BE,
		LanguageCodeFR_BF,
		LanguageCodeFR_BI,
		LanguageCodeFR_BJ,
		LanguageCodeFR_BL,
		LanguageCodeFR_CA,
		LanguageCodeFR_CD,
		LanguageCodeFR_CF,
		LanguageCodeFR_CG,
		LanguageCodeFR_CH,
		LanguageCodeFR_CI,
		LanguageCodeFR_CM,
		LanguageCodeFR_DJ,
		LanguageCodeFR_DZ,
		LanguageCodeFR_FR,
		LanguageCodeFR_GA,
		LanguageCodeFR_GF,
		LanguageCodeFR_GN,
		LanguageCodeFR_GP,
		LanguageCodeFR_GQ,
		LanguageCodeFR_HT,
		LanguageCodeFR_KM,
		LanguageCodeFR_LU,
		LanguageCodeFR_MA,
		LanguageCodeFR_MC,
		LanguageCodeFR_MF,
		LanguageCodeFR_MG,
		LanguageCodeFR_ML,
		LanguageCodeFR_MQ,
		LanguageCodeFR_MR,
		LanguageCodeFR_MU,
		LanguageCodeFR_NC,
		LanguageCodeFR_NE,
		LanguageCodeFR_PF,
		LanguageCodeFR_PM,
		LanguageCodeFR_RE,
		LanguageCodeFR_RW,
		LanguageCodeFR_SC,
		LanguageCodeFR_SN,
		LanguageCodeFR_SY,
		LanguageCodeFR_TD,
		LanguageCodeFR_TG,
		LanguageCodeFR_TN,
		LanguageCodeFR_VU,
		LanguageCodeFR_WF,
		LanguageCodeFR_YT,
		LanguageCodeFUR,
		LanguageCodeFUR_IT,
		LanguageCodeFY,
		LanguageCodeFY_NL,
		LanguageCodeGA,
		LanguageCodeGA_GB,
		LanguageCodeGA_IE,
		LanguageCodeGD,
		LanguageCodeGD_GB,
		LanguageCodeGL,
		LanguageCodeGL_ES,
		LanguageCodeGSW,
		LanguageCodeGSW_CH,
		LanguageCodeGSW_FR,
		LanguageCodeGSW_LI,
		LanguageCodeGU,
		LanguageCodeGU_IN,
		LanguageCodeGUZ,
		LanguageCodeGUZ_KE,
		LanguageCodeGV,
		LanguageCodeGV_IM,
		LanguageCodeHA,
		LanguageCodeHA_GH,
		LanguageCodeHA_NE,
		LanguageCodeHA_NG,
		LanguageCodeHAW,
		LanguageCodeHAW_US,
		LanguageCodeHE,
		LanguageCodeHE_IL,
		LanguageCodeHI,
		LanguageCodeHI_IN,
		LanguageCodeHR,
		LanguageCodeHR_BA,
		LanguageCodeHR_HR,
		LanguageCodeHSB,
		LanguageCodeHSB_DE,
		LanguageCodeHU,
		LanguageCodeHU_HU,
		LanguageCodeHY,
		LanguageCodeHY_AM,
		LanguageCodeIA,
		LanguageCodeSTRING,
		LanguageCodeID_ID,
		LanguageCodeIG,
		LanguageCodeIG_NG,
		LanguageCodeII,
		LanguageCodeII_CN,
		LanguageCodeIS,
		LanguageCodeIS_IS,
		LanguageCodeIT,
		LanguageCodeIT_CH,
		LanguageCodeIT_IT,
		LanguageCodeIT_SM,
		LanguageCodeIT_VA,
		LanguageCodeJA,
		LanguageCodeJA_JP,
		LanguageCodeJGO,
		LanguageCodeJGO_CM,
		LanguageCodeJMC,
		LanguageCodeJMC_TZ,
		LanguageCodeJV,
		LanguageCodeJV_ID,
		LanguageCodeKA,
		LanguageCodeKA_GE,
		LanguageCodeKAB,
		LanguageCodeKAB_DZ,
		LanguageCodeKAM,
		LanguageCodeKAM_KE,
		LanguageCodeKDE,
		LanguageCodeKDE_TZ,
		LanguageCodeKEA,
		LanguageCodeKEA_CV,
		LanguageCodeKHQ,
		LanguageCodeKHQ_ML,
		LanguageCodeKI,
		LanguageCodeKI_KE,
		LanguageCodeKK,
		LanguageCodeKK_KZ,
		LanguageCodeKKJ,
		LanguageCodeKKJ_CM,
		LanguageCodeKL,
		LanguageCodeKL_GL,
		LanguageCodeKLN,
		LanguageCodeKLN_KE,
		LanguageCodeKM,
		LanguageCodeKM_KH,
		LanguageCodeKN,
		LanguageCodeKN_IN,
		LanguageCodeKO,
		LanguageCodeKO_KP,
		LanguageCodeKO_KR,
		LanguageCodeKOK,
		LanguageCodeKOK_IN,
		LanguageCodeKS,
		LanguageCodeKS_ARAB,
		LanguageCodeKS_ARAB_IN,
		LanguageCodeKSB,
		LanguageCodeKSB_TZ,
		LanguageCodeKSF,
		LanguageCodeKSF_CM,
		LanguageCodeKSH,
		LanguageCodeKSH_DE,
		LanguageCodeKU,
		LanguageCodeKU_TR,
		LanguageCodeKW,
		LanguageCodeKW_GB,
		LanguageCodeKY,
		LanguageCodeKY_KG,
		LanguageCodeLAG,
		LanguageCodeLAG_TZ,
		LanguageCodeLB,
		LanguageCodeLB_LU,
		LanguageCodeLG,
		LanguageCodeLG_UG,
		LanguageCodeLKT,
		LanguageCodeLKT_US,
		LanguageCodeLN,
		LanguageCodeLN_AO,
		LanguageCodeLN_CD,
		LanguageCodeLN_CF,
		LanguageCodeLN_CG,
		LanguageCodeLO,
		LanguageCodeLO_LA,
		LanguageCodeLRC,
		LanguageCodeLRC_IQ,
		LanguageCodeLRC_IR,
		LanguageCodeLT,
		LanguageCodeLT_LT,
		LanguageCodeLU,
		LanguageCodeLU_CD,
		LanguageCodeLUO,
		LanguageCodeLUO_KE,
		LanguageCodeLUY,
		LanguageCodeLUY_KE,
		LanguageCodeLV,
		LanguageCodeLV_LV,
		LanguageCodeMAI,
		LanguageCodeMAI_IN,
		LanguageCodeMAS,
		LanguageCodeMAS_KE,
		LanguageCodeMAS_TZ,
		LanguageCodeMER,
		LanguageCodeMER_KE,
		LanguageCodeMFE,
		LanguageCodeMFE_MU,
		LanguageCodeMG,
		LanguageCodeMG_MG,
		LanguageCodeMGH,
		LanguageCodeMGH_MZ,
		LanguageCodeMGO,
		LanguageCodeMGO_CM,
		LanguageCodeMI,
		LanguageCodeMI_NZ,
		LanguageCodeMK,
		LanguageCodeMK_MK,
		LanguageCodeML,
		LanguageCodeML_IN,
		LanguageCodeMN,
		LanguageCodeMN_MN,
		LanguageCodeMNI,
		LanguageCodeMNI_BENG,
		LanguageCodeMNI_BENG_IN,
		LanguageCodeMR,
		LanguageCodeMR_IN,
		LanguageCodeMS,
		LanguageCodeMS_BN,
		LanguageCodeMS_ID,
		LanguageCodeMS_MY,
		LanguageCodeMS_SG,
		LanguageCodeMT,
		LanguageCodeMT_MT,
		LanguageCodeMUA,
		LanguageCodeMUA_CM,
		LanguageCodeMY,
		LanguageCodeMY_MM,
		LanguageCodeMZN,
		LanguageCodeMZN_IR,
		LanguageCodeNAQ,
		LanguageCodeNAQ_NA,
		LanguageCodeNB,
		LanguageCodeNB_NO,
		LanguageCodeNB_SJ,
		LanguageCodeND,
		LanguageCodeND_ZW,
		LanguageCodeNDS,
		LanguageCodeNDS_DE,
		LanguageCodeNDS_NL,
		LanguageCodeNE,
		LanguageCodeNE_IN,
		LanguageCodeNE_NP,
		LanguageCodeNL,
		LanguageCodeNL_AW,
		LanguageCodeNL_BE,
		LanguageCodeNL_BQ,
		LanguageCodeNL_CW,
		LanguageCodeNL_NL,
		LanguageCodeNL_SR,
		LanguageCodeNL_SX,
		LanguageCodeNMG,
		LanguageCodeNMG_CM,
		LanguageCodeNN,
		LanguageCodeNN_NO,
		LanguageCodeNNH,
		LanguageCodeNNH_CM,
		LanguageCodeNUS,
		LanguageCodeNUS_SS,
		LanguageCodeNYN,
		LanguageCodeNYN_UG,
		LanguageCodeOM,
		LanguageCodeOM_ET,
		LanguageCodeOM_KE,
		LanguageCodeOR,
		LanguageCodeOR_IN,
		LanguageCodeOS,
		LanguageCodeOS_GE,
		LanguageCodeOS_RU,
		LanguageCodePA,
		LanguageCodePA_ARAB,
		LanguageCodePA_ARAB_PK,
		LanguageCodePA_GURU,
		LanguageCodePA_GURU_IN,
		LanguageCodePCM,
		LanguageCodePCM_NG,
		LanguageCodePL,
		LanguageCodePL_PL,
		LanguageCodePRG,
		LanguageCodePS,
		LanguageCodePS_AF,
		LanguageCodePS_PK,
		LanguageCodePT,
		LanguageCodePT_AO,
		LanguageCodePT_BR,
		LanguageCodePT_CH,
		LanguageCodePT_CV,
		LanguageCodePT_GQ,
		LanguageCodePT_GW,
		LanguageCodePT_LU,
		LanguageCodePT_MO,
		LanguageCodePT_MZ,
		LanguageCodePT_PT,
		LanguageCodePT_ST,
		LanguageCodePT_TL,
		LanguageCodeQU,
		LanguageCodeQU_BO,
		LanguageCodeQU_EC,
		LanguageCodeQU_PE,
		LanguageCodeRM,
		LanguageCodeRM_CH,
		LanguageCodeRN,
		LanguageCodeRN_BI,
		LanguageCodeRO,
		LanguageCodeRO_MD,
		LanguageCodeRO_RO,
		LanguageCodeROF,
		LanguageCodeROF_TZ,
		LanguageCodeRU,
		LanguageCodeRU_BY,
		LanguageCodeRU_KG,
		LanguageCodeRU_KZ,
		LanguageCodeRU_MD,
		LanguageCodeRU_RU,
		LanguageCodeRU_UA,
		LanguageCodeRW,
		LanguageCodeRW_RW,
		LanguageCodeRWK,
		LanguageCodeRWK_TZ,
		LanguageCodeSAH,
		LanguageCodeSAH_RU,
		LanguageCodeSAQ,
		LanguageCodeSAQ_KE,
		LanguageCodeSAT,
		LanguageCodeSAT_OLCK,
		LanguageCodeSAT_OLCK_IN,
		LanguageCodeSBP,
		LanguageCodeSBP_TZ,
		LanguageCodeSD,
		LanguageCodeSD_ARAB,
		LanguageCodeSD_ARAB_PK,
		LanguageCodeSD_DEVA,
		LanguageCodeSD_DEVA_IN,
		LanguageCodeSE,
		LanguageCodeSE_FI,
		LanguageCodeSE_NO,
		LanguageCodeSE_SE,
		LanguageCodeSEH,
		LanguageCodeSEH_MZ,
		LanguageCodeSES,
		LanguageCodeSES_ML,
		LanguageCodeSG,
		LanguageCodeSG_CF,
		LanguageCodeSHI,
		LanguageCodeSHI_LATN,
		LanguageCodeSHI_LATN_MA,
		LanguageCodeSHI_TFNG,
		LanguageCodeSHI_TFNG_MA,
		LanguageCodeSI,
		LanguageCodeSI_LK,
		LanguageCodeSK,
		LanguageCodeSK_SK,
		LanguageCodeSL,
		LanguageCodeSL_SI,
		LanguageCodeSMN,
		LanguageCodeSMN_FI,
		LanguageCodeSN,
		LanguageCodeSN_ZW,
		LanguageCodeSO,
		LanguageCodeSO_DJ,
		LanguageCodeSO_ET,
		LanguageCodeSO_KE,
		LanguageCodeSO_SO,
		LanguageCodeSQ,
		LanguageCodeSQ_AL,
		LanguageCodeSQ_MK,
		LanguageCodeSQ_XK,
		LanguageCodeSR,
		LanguageCodeSR_CYRL,
		LanguageCodeSR_CYRL_BA,
		LanguageCodeSR_CYRL_ME,
		LanguageCodeSR_CYRL_RS,
		LanguageCodeSR_CYRL_XK,
		LanguageCodeSR_LATN,
		LanguageCodeSR_LATN_BA,
		LanguageCodeSR_LATN_ME,
		LanguageCodeSR_LATN_RS,
		LanguageCodeSR_LATN_XK,
		LanguageCodeSU,
		LanguageCodeSU_LATN,
		LanguageCodeSU_LATN_ID,
		LanguageCodeSV,
		LanguageCodeSV_AX,
		LanguageCodeSV_FI,
		LanguageCodeSV_SE,
		LanguageCodeSW,
		LanguageCodeSW_CD,
		LanguageCodeSW_KE,
		LanguageCodeSW_TZ,
		LanguageCodeSW_UG,
		LanguageCodeTA,
		LanguageCodeTA_IN,
		LanguageCodeTA_LK,
		LanguageCodeTA_MY,
		LanguageCodeTA_SG,
		LanguageCodeTE,
		LanguageCodeTE_IN,
		LanguageCodeTEO,
		LanguageCodeTEO_KE,
		LanguageCodeTEO_UG,
		LanguageCodeTG,
		LanguageCodeTG_TJ,
		LanguageCodeTH,
		LanguageCodeTH_TH,
		LanguageCodeTI,
		LanguageCodeTI_ER,
		LanguageCodeTI_ET,
		LanguageCodeTK,
		LanguageCodeTK_TM,
		LanguageCodeTO,
		LanguageCodeTO_TO,
		LanguageCodeTR,
		LanguageCodeTR_CY,
		LanguageCodeTR_TR,
		LanguageCodeTT,
		LanguageCodeTT_RU,
		LanguageCodeTWQ,
		LanguageCodeTWQ_NE,
		LanguageCodeTZM,
		LanguageCodeTZM_MA,
		LanguageCodeUG,
		LanguageCodeUG_CN,
		LanguageCodeUK,
		LanguageCodeUK_UA,
		LanguageCodeUR,
		LanguageCodeUR_IN,
		LanguageCodeUR_PK,
		LanguageCodeUZ,
		LanguageCodeUZ_ARAB,
		LanguageCodeUZ_ARAB_AF,
		LanguageCodeUZ_CYRL,
		LanguageCodeUZ_CYRL_UZ,
		LanguageCodeUZ_LATN,
		LanguageCodeUZ_LATN_UZ,
		LanguageCodeVAI,
		LanguageCodeVAI_LATN,
		LanguageCodeVAI_LATN_LR,
		LanguageCodeVAI_VAII,
		LanguageCodeVAI_VAII_LR,
		LanguageCodeVI,
		LanguageCodeVI_VN,
		LanguageCodeVO,
		LanguageCodeVUN,
		LanguageCodeVUN_TZ,
		LanguageCodeWAE,
		LanguageCodeWAE_CH,
		LanguageCodeWO,
		LanguageCodeWO_SN,
		LanguageCodeXH,
		LanguageCodeXH_ZA,
		LanguageCodeXOG,
		LanguageCodeXOG_UG,
		LanguageCodeYAV,
		LanguageCodeYAV_CM,
		LanguageCodeYI,
		LanguageCodeYO,
		LanguageCodeYO_BJ,
		LanguageCodeYO_NG,
		LanguageCodeYUE,
		LanguageCodeYUE_HANS,
		LanguageCodeYUE_HANS_CN,
		LanguageCodeYUE_HANT,
		LanguageCodeYUE_HANT_HK,
		LanguageCodeZGH,
		LanguageCodeZGH_MA,
		LanguageCodeZH,
		LanguageCodeZH_HANS,
		LanguageCodeZH_HANS_CN,
		LanguageCodeZH_HANS_HK,
		LanguageCodeZH_HANS_MO,
		LanguageCodeZH_HANS_SG,
		LanguageCodeZH_HANT,
		LanguageCodeZH_HANT_HK,
		LanguageCodeZH_HANT_MO,
		LanguageCodeZH_HANT_TW,
		LanguageCodeZU,
		LanguageCodeZU_ZA,
	}
}

func (e LanguageCode) IsValid() error {
	switch e {
	case LanguageCodeAF, LanguageCodeAF_NA, LanguageCodeID, LanguageCodeAF_ZA, LanguageCodeAGQ, LanguageCodeAGQ_CM, LanguageCodeAK, LanguageCodeAK_GH, LanguageCodeAM, LanguageCodeAM_ET, LanguageCodeAR, LanguageCodeAR_AE, LanguageCodeAR_BH, LanguageCodeAR_DJ, LanguageCodeAR_DZ, LanguageCodeAR_EG, LanguageCodeAR_EH, LanguageCodeAR_ER, LanguageCodeAR_IL, LanguageCodeAR_IQ, LanguageCodeAR_JO, LanguageCodeAR_KM, LanguageCodeAR_KW, LanguageCodeAR_LB, LanguageCodeAR_LY, LanguageCodeAR_MA, LanguageCodeAR_MR, LanguageCodeAR_OM, LanguageCodeAR_PS, LanguageCodeAR_QA, LanguageCodeAR_SA, LanguageCodeAR_SD, LanguageCodeAR_SO, LanguageCodeAR_SS, LanguageCodeAR_SY, LanguageCodeAR_TD, LanguageCodeAR_TN, LanguageCodeAR_YE, LanguageCodeAS, LanguageCodeAS_IN, LanguageCodeASA, LanguageCodeASA_TZ, LanguageCodeAST, LanguageCodeAST_ES, LanguageCodeAZ, LanguageCodeAZ_CYRL, LanguageCodeAZ_CYRL_AZ, LanguageCodeAZ_LATN, LanguageCodeAZ_LATN_AZ, LanguageCodeBAS, LanguageCodeBAS_CM, LanguageCodeBE, LanguageCodeBE_BY, LanguageCodeBEM, LanguageCodeBEM_ZM, LanguageCodeBEZ, LanguageCodeBEZ_TZ, LanguageCodeBG, LanguageCodeBG_BG, LanguageCodeBM, LanguageCodeBM_ML, LanguageCodeBN, LanguageCodeBN_BD, LanguageCodeBN_IN, LanguageCodeBO, LanguageCodeBO_CN, LanguageCodeBO_IN, LanguageCodeBR, LanguageCodeBR_FR, LanguageCodeBRX, LanguageCodeBRX_IN, LanguageCodeBS, LanguageCodeBS_CYRL, LanguageCodeBS_CYRL_BA, LanguageCodeBS_LATN, LanguageCodeBS_LATN_BA, LanguageCodeCA, LanguageCodeCA_AD, LanguageCodeCA_ES, LanguageCodeCA_ES_VALENCIA, LanguageCodeCA_FR, LanguageCodeCA_IT, LanguageCodeCCP, LanguageCodeCCP_BD, LanguageCodeCCP_IN, LanguageCodeCE, LanguageCodeCE_RU, LanguageCodeCEB, LanguageCodeCEB_PH, LanguageCodeCGG, LanguageCodeCGG_UG, LanguageCodeCHR, LanguageCodeCHR_US, LanguageCodeCKB, LanguageCodeCKB_IQ, LanguageCodeCKB_IR, LanguageCodeCS, LanguageCodeCS_CZ, LanguageCodeCU, LanguageCodeCU_RU, LanguageCodeCY, LanguageCodeCY_GB, LanguageCodeDA, LanguageCodeDA_DK, LanguageCodeDA_GL, LanguageCodeDAV, LanguageCodeDAV_KE, LanguageCodeDE, LanguageCodeDE_AT, LanguageCodeDE_BE, LanguageCodeDE_CH, LanguageCodeDE_DE, LanguageCodeDE_IT, LanguageCodeDE_LI, LanguageCodeDE_LU, LanguageCodeDJE, LanguageCodeDJE_NE, LanguageCodeDSB, LanguageCodeDSB_DE, LanguageCodeDUA, LanguageCodeDUA_CM, LanguageCodeDYO, LanguageCodeDYO_SN, LanguageCodeDZ, LanguageCodeDZ_BT, LanguageCodeEBU, LanguageCodeEBU_KE, LanguageCodeEE, LanguageCodeEE_GH, LanguageCodeEE_TG, LanguageCodeEL, LanguageCodeEL_CY, LanguageCodeEL_GR, LanguageCodeEN, LanguageCodeEN_AE, LanguageCodeEN_AG, LanguageCodeEN_AI, LanguageCodeEN_AS, LanguageCodeEN_AT, LanguageCodeEN_AU, LanguageCodeEN_BB, LanguageCodeEN_BE, LanguageCodeEN_BI, LanguageCodeEN_BM, LanguageCodeEN_BS, LanguageCodeEN_BW, LanguageCodeEN_BZ, LanguageCodeEN_CA, LanguageCodeEN_CC, LanguageCodeEN_CH, LanguageCodeEN_CK, LanguageCodeEN_CM, LanguageCodeEN_CX, LanguageCodeEN_CY, LanguageCodeEN_DE, LanguageCodeEN_DG, LanguageCodeEN_DK, LanguageCodeEN_DM, LanguageCodeEN_ER, LanguageCodeEN_FI, LanguageCodeEN_FJ, LanguageCodeEN_FK, LanguageCodeEN_FM, LanguageCodeEN_GB, LanguageCodeEN_GD, LanguageCodeEN_GG, LanguageCodeEN_GH, LanguageCodeEN_GI, LanguageCodeEN_GM, LanguageCodeEN_GU, LanguageCodeEN_GY, LanguageCodeEN_HK, LanguageCodeEN_IE, LanguageCodeEN_IL, LanguageCodeEN_IM, LanguageCodeEN_IN, LanguageCodeEN_IO, LanguageCodeEN_JE, LanguageCodeEN_JM, LanguageCodeEN_KE, LanguageCodeEN_KI, LanguageCodeEN_KN, LanguageCodeEN_KY, LanguageCodeEN_LC, LanguageCodeEN_LR, LanguageCodeEN_LS, LanguageCodeEN_MG, LanguageCodeEN_MH, LanguageCodeEN_MO, LanguageCodeEN_MP, LanguageCodeEN_MS, LanguageCodeEN_MT, LanguageCodeEN_MU, LanguageCodeEN_MW, LanguageCodeEN_MY, LanguageCodeEN_NA, LanguageCodeEN_NF, LanguageCodeEN_NG, LanguageCodeEN_NL, LanguageCodeEN_NR, LanguageCodeEN_NU, LanguageCodeEN_NZ, LanguageCodeEN_PG, LanguageCodeEN_PH, LanguageCodeEN_PK, LanguageCodeEN_PN, LanguageCodeEN_PR, LanguageCodeEN_PW, LanguageCodeEN_RW, LanguageCodeEN_SB, LanguageCodeEN_SC, LanguageCodeEN_SD, LanguageCodeEN_SE, LanguageCodeEN_SG, LanguageCodeEN_SH, LanguageCodeEN_SI, LanguageCodeEN_SL, LanguageCodeEN_SS, LanguageCodeEN_SX, LanguageCodeEN_SZ, LanguageCodeEN_TC, LanguageCodeEN_TK, LanguageCodeEN_TO, LanguageCodeEN_TT, LanguageCodeEN_TV, LanguageCodeEN_TZ, LanguageCodeEN_UG, LanguageCodeEN_UM, LanguageCodeEN_US, LanguageCodeEN_VC, LanguageCodeEN_VG, LanguageCodeEN_VI, LanguageCodeEN_VU, LanguageCodeEN_WS, LanguageCodeEN_ZA, LanguageCodeEN_ZM, LanguageCodeEN_ZW, LanguageCodeEO, LanguageCodeES, LanguageCodeES_AR, LanguageCodeES_BO, LanguageCodeES_BR, LanguageCodeES_BZ, LanguageCodeES_CL, LanguageCodeES_CO, LanguageCodeES_CR, LanguageCodeES_CU, LanguageCodeES_DO, LanguageCodeES_EA, LanguageCodeES_EC, LanguageCodeES_ES, LanguageCodeES_GQ, LanguageCodeES_GT, LanguageCodeES_HN, LanguageCodeES_IC, LanguageCodeES_MX, LanguageCodeES_NI, LanguageCodeES_PA, LanguageCodeES_PE, LanguageCodeES_PH, LanguageCodeES_PR, LanguageCodeES_PY, LanguageCodeES_SV, LanguageCodeES_US, LanguageCodeES_UY, LanguageCodeES_VE, LanguageCodeET, LanguageCodeET_EE, LanguageCodeEU, LanguageCodeEU_ES, LanguageCodeEWO, LanguageCodeEWO_CM, LanguageCodeFA, LanguageCodeFA_AF, LanguageCodeFA_IR, LanguageCodeFF, LanguageCodeFF_ADLM, LanguageCodeFF_ADLM_BF, LanguageCodeFF_ADLM_CM, LanguageCodeFF_ADLM_GH, LanguageCodeFF_ADLM_GM, LanguageCodeFF_ADLM_GN, LanguageCodeFF_ADLM_GW, LanguageCodeFF_ADLM_LR, LanguageCodeFF_ADLM_MR, LanguageCodeFF_ADLM_NE, LanguageCodeFF_ADLM_NG, LanguageCodeFF_ADLM_SL, LanguageCodeFF_ADLM_SN, LanguageCodeFF_LATN, LanguageCodeFF_LATN_BF, LanguageCodeFF_LATN_CM, LanguageCodeFF_LATN_GH, LanguageCodeFF_LATN_GM, LanguageCodeFF_LATN_GN, LanguageCodeFF_LATN_GW, LanguageCodeFF_LATN_LR, LanguageCodeFF_LATN_MR, LanguageCodeFF_LATN_NE, LanguageCodeFF_LATN_NG, LanguageCodeFF_LATN_SL, LanguageCodeFF_LATN_SN, LanguageCodeFI, LanguageCodeFI_FI, LanguageCodeFIL, LanguageCodeFIL_PH, LanguageCodeFO, LanguageCodeFO_DK, LanguageCodeFO_FO, LanguageCodeFR, LanguageCodeFR_BE, LanguageCodeFR_BF, LanguageCodeFR_BI, LanguageCodeFR_BJ, LanguageCodeFR_BL, LanguageCodeFR_CA, LanguageCodeFR_CD, LanguageCodeFR_CF, LanguageCodeFR_CG, LanguageCodeFR_CH, LanguageCodeFR_CI, LanguageCodeFR_CM, LanguageCodeFR_DJ, LanguageCodeFR_DZ, LanguageCodeFR_FR, LanguageCodeFR_GA, LanguageCodeFR_GF, LanguageCodeFR_GN, LanguageCodeFR_GP, LanguageCodeFR_GQ, LanguageCodeFR_HT, LanguageCodeFR_KM, LanguageCodeFR_LU, LanguageCodeFR_MA, LanguageCodeFR_MC, LanguageCodeFR_MF, LanguageCodeFR_MG, LanguageCodeFR_ML, LanguageCodeFR_MQ, LanguageCodeFR_MR, LanguageCodeFR_MU, LanguageCodeFR_NC, LanguageCodeFR_NE, LanguageCodeFR_PF, LanguageCodeFR_PM, LanguageCodeFR_RE, LanguageCodeFR_RW, LanguageCodeFR_SC, LanguageCodeFR_SN, LanguageCodeFR_SY, LanguageCodeFR_TD, LanguageCodeFR_TG, LanguageCodeFR_TN, LanguageCodeFR_VU, LanguageCodeFR_WF, LanguageCodeFR_YT, LanguageCodeFUR, LanguageCodeFUR_IT, LanguageCodeFY, LanguageCodeFY_NL, LanguageCodeGA, LanguageCodeGA_GB, LanguageCodeGA_IE, LanguageCodeGD, LanguageCodeGD_GB, LanguageCodeGL, LanguageCodeGL_ES, LanguageCodeGSW, LanguageCodeGSW_CH, LanguageCodeGSW_FR, LanguageCodeGSW_LI, LanguageCodeGU, LanguageCodeGU_IN, LanguageCodeGUZ, LanguageCodeGUZ_KE, LanguageCodeGV, LanguageCodeGV_IM, LanguageCodeHA, LanguageCodeHA_GH, LanguageCodeHA_NE, LanguageCodeHA_NG, LanguageCodeHAW, LanguageCodeHAW_US, LanguageCodeHE, LanguageCodeHE_IL, LanguageCodeHI, LanguageCodeHI_IN, LanguageCodeHR, LanguageCodeHR_BA, LanguageCodeHR_HR, LanguageCodeHSB, LanguageCodeHSB_DE, LanguageCodeHU, LanguageCodeHU_HU, LanguageCodeHY, LanguageCodeHY_AM, LanguageCodeIA, LanguageCodeSTRING, LanguageCodeID_ID, LanguageCodeIG, LanguageCodeIG_NG, LanguageCodeII, LanguageCodeII_CN, LanguageCodeIS, LanguageCodeIS_IS, LanguageCodeIT, LanguageCodeIT_CH, LanguageCodeIT_IT, LanguageCodeIT_SM, LanguageCodeIT_VA, LanguageCodeJA, LanguageCodeJA_JP, LanguageCodeJGO, LanguageCodeJGO_CM, LanguageCodeJMC, LanguageCodeJMC_TZ, LanguageCodeJV, LanguageCodeJV_ID, LanguageCodeKA, LanguageCodeKA_GE, LanguageCodeKAB, LanguageCodeKAB_DZ, LanguageCodeKAM, LanguageCodeKAM_KE, LanguageCodeKDE, LanguageCodeKDE_TZ, LanguageCodeKEA, LanguageCodeKEA_CV, LanguageCodeKHQ, LanguageCodeKHQ_ML, LanguageCodeKI, LanguageCodeKI_KE, LanguageCodeKK, LanguageCodeKK_KZ, LanguageCodeKKJ, LanguageCodeKKJ_CM, LanguageCodeKL, LanguageCodeKL_GL, LanguageCodeKLN, LanguageCodeKLN_KE, LanguageCodeKM, LanguageCodeKM_KH, LanguageCodeKN, LanguageCodeKN_IN, LanguageCodeKO, LanguageCodeKO_KP, LanguageCodeKO_KR, LanguageCodeKOK, LanguageCodeKOK_IN, LanguageCodeKS, LanguageCodeKS_ARAB, LanguageCodeKS_ARAB_IN, LanguageCodeKSB, LanguageCodeKSB_TZ, LanguageCodeKSF, LanguageCodeKSF_CM, LanguageCodeKSH, LanguageCodeKSH_DE, LanguageCodeKU, LanguageCodeKU_TR, LanguageCodeKW, LanguageCodeKW_GB, LanguageCodeKY, LanguageCodeKY_KG, LanguageCodeLAG, LanguageCodeLAG_TZ, LanguageCodeLB, LanguageCodeLB_LU, LanguageCodeLG, LanguageCodeLG_UG, LanguageCodeLKT, LanguageCodeLKT_US, LanguageCodeLN, LanguageCodeLN_AO, LanguageCodeLN_CD, LanguageCodeLN_CF, LanguageCodeLN_CG, LanguageCodeLO, LanguageCodeLO_LA, LanguageCodeLRC, LanguageCodeLRC_IQ, LanguageCodeLRC_IR, LanguageCodeLT, LanguageCodeLT_LT, LanguageCodeLU, LanguageCodeLU_CD, LanguageCodeLUO, LanguageCodeLUO_KE, LanguageCodeLUY, LanguageCodeLUY_KE, LanguageCodeLV, LanguageCodeLV_LV, LanguageCodeMAI, LanguageCodeMAI_IN, LanguageCodeMAS, LanguageCodeMAS_KE, LanguageCodeMAS_TZ, LanguageCodeMER, LanguageCodeMER_KE, LanguageCodeMFE, LanguageCodeMFE_MU, LanguageCodeMG, LanguageCodeMG_MG, LanguageCodeMGH, LanguageCodeMGH_MZ, LanguageCodeMGO, LanguageCodeMGO_CM, LanguageCodeMI, LanguageCodeMI_NZ, LanguageCodeMK, LanguageCodeMK_MK, LanguageCodeML, LanguageCodeML_IN, LanguageCodeMN, LanguageCodeMN_MN, LanguageCodeMNI, LanguageCodeMNI_BENG, LanguageCodeMNI_BENG_IN, LanguageCodeMR, LanguageCodeMR_IN, LanguageCodeMS, LanguageCodeMS_BN, LanguageCodeMS_ID, LanguageCodeMS_MY, LanguageCodeMS_SG, LanguageCodeMT, LanguageCodeMT_MT, LanguageCodeMUA, LanguageCodeMUA_CM, LanguageCodeMY, LanguageCodeMY_MM, LanguageCodeMZN, LanguageCodeMZN_IR, LanguageCodeNAQ, LanguageCodeNAQ_NA, LanguageCodeNB, LanguageCodeNB_NO, LanguageCodeNB_SJ, LanguageCodeND, LanguageCodeND_ZW, LanguageCodeNDS, LanguageCodeNDS_DE, LanguageCodeNDS_NL, LanguageCodeNE, LanguageCodeNE_IN, LanguageCodeNE_NP, LanguageCodeNL, LanguageCodeNL_AW, LanguageCodeNL_BE, LanguageCodeNL_BQ, LanguageCodeNL_CW, LanguageCodeNL_NL, LanguageCodeNL_SR, LanguageCodeNL_SX, LanguageCodeNMG, LanguageCodeNMG_CM, LanguageCodeNN, LanguageCodeNN_NO, LanguageCodeNNH, LanguageCodeNNH_CM, LanguageCodeNUS, LanguageCodeNUS_SS, LanguageCodeNYN, LanguageCodeNYN_UG, LanguageCodeOM, LanguageCodeOM_ET, LanguageCodeOM_KE, LanguageCodeOR, LanguageCodeOR_IN, LanguageCodeOS, LanguageCodeOS_GE, LanguageCodeOS_RU, LanguageCodePA, LanguageCodePA_ARAB, LanguageCodePA_ARAB_PK, LanguageCodePA_GURU, LanguageCodePA_GURU_IN, LanguageCodePCM, LanguageCodePCM_NG, LanguageCodePL, LanguageCodePL_PL, LanguageCodePRG, LanguageCodePS, LanguageCodePS_AF, LanguageCodePS_PK, LanguageCodePT, LanguageCodePT_AO, LanguageCodePT_BR, LanguageCodePT_CH, LanguageCodePT_CV, LanguageCodePT_GQ, LanguageCodePT_GW, LanguageCodePT_LU, LanguageCodePT_MO, LanguageCodePT_MZ, LanguageCodePT_PT, LanguageCodePT_ST, LanguageCodePT_TL, LanguageCodeQU, LanguageCodeQU_BO, LanguageCodeQU_EC, LanguageCodeQU_PE, LanguageCodeRM, LanguageCodeRM_CH, LanguageCodeRN, LanguageCodeRN_BI, LanguageCodeRO, LanguageCodeRO_MD, LanguageCodeRO_RO, LanguageCodeROF, LanguageCodeROF_TZ, LanguageCodeRU, LanguageCodeRU_BY, LanguageCodeRU_KG, LanguageCodeRU_KZ, LanguageCodeRU_MD, LanguageCodeRU_RU, LanguageCodeRU_UA, LanguageCodeRW, LanguageCodeRW_RW, LanguageCodeRWK, LanguageCodeRWK_TZ, LanguageCodeSAH, LanguageCodeSAH_RU, LanguageCodeSAQ, LanguageCodeSAQ_KE, LanguageCodeSAT, LanguageCodeSAT_OLCK, LanguageCodeSAT_OLCK_IN, LanguageCodeSBP, LanguageCodeSBP_TZ, LanguageCodeSD, LanguageCodeSD_ARAB, LanguageCodeSD_ARAB_PK, LanguageCodeSD_DEVA, LanguageCodeSD_DEVA_IN, LanguageCodeSE, LanguageCodeSE_FI, LanguageCodeSE_NO, LanguageCodeSE_SE, LanguageCodeSEH, LanguageCodeSEH_MZ, LanguageCodeSES, LanguageCodeSES_ML, LanguageCodeSG, LanguageCodeSG_CF, LanguageCodeSHI, LanguageCodeSHI_LATN, LanguageCodeSHI_LATN_MA, LanguageCodeSHI_TFNG, LanguageCodeSHI_TFNG_MA, LanguageCodeSI, LanguageCodeSI_LK, LanguageCodeSK, LanguageCodeSK_SK, LanguageCodeSL, LanguageCodeSL_SI, LanguageCodeSMN, LanguageCodeSMN_FI, LanguageCodeSN, LanguageCodeSN_ZW, LanguageCodeSO, LanguageCodeSO_DJ, LanguageCodeSO_ET, LanguageCodeSO_KE, LanguageCodeSO_SO, LanguageCodeSQ, LanguageCodeSQ_AL, LanguageCodeSQ_MK, LanguageCodeSQ_XK, LanguageCodeSR, LanguageCodeSR_CYRL, LanguageCodeSR_CYRL_BA, LanguageCodeSR_CYRL_ME, LanguageCodeSR_CYRL_RS, LanguageCodeSR_CYRL_XK, LanguageCodeSR_LATN, LanguageCodeSR_LATN_BA, LanguageCodeSR_LATN_ME, LanguageCodeSR_LATN_RS, LanguageCodeSR_LATN_XK, LanguageCodeSU, LanguageCodeSU_LATN, LanguageCodeSU_LATN_ID, LanguageCodeSV, LanguageCodeSV_AX, LanguageCodeSV_FI, LanguageCodeSV_SE, LanguageCodeSW, LanguageCodeSW_CD, LanguageCodeSW_KE, LanguageCodeSW_TZ, LanguageCodeSW_UG, LanguageCodeTA, LanguageCodeTA_IN, LanguageCodeTA_LK, LanguageCodeTA_MY, LanguageCodeTA_SG, LanguageCodeTE, LanguageCodeTE_IN, LanguageCodeTEO, LanguageCodeTEO_KE, LanguageCodeTEO_UG, LanguageCodeTG, LanguageCodeTG_TJ, LanguageCodeTH, LanguageCodeTH_TH, LanguageCodeTI, LanguageCodeTI_ER, LanguageCodeTI_ET, LanguageCodeTK, LanguageCodeTK_TM, LanguageCodeTO, LanguageCodeTO_TO, LanguageCodeTR, LanguageCodeTR_CY, LanguageCodeTR_TR, LanguageCodeTT, LanguageCodeTT_RU, LanguageCodeTWQ, LanguageCodeTWQ_NE, LanguageCodeTZM, LanguageCodeTZM_MA, LanguageCodeUG, LanguageCodeUG_CN, LanguageCodeUK, LanguageCodeUK_UA, LanguageCodeUR, LanguageCodeUR_IN, LanguageCodeUR_PK, LanguageCodeUZ, LanguageCodeUZ_ARAB, LanguageCodeUZ_ARAB_AF, LanguageCodeUZ_CYRL, LanguageCodeUZ_CYRL_UZ, LanguageCodeUZ_LATN, LanguageCodeUZ_LATN_UZ, LanguageCodeVAI, LanguageCodeVAI_LATN, LanguageCodeVAI_LATN_LR, LanguageCodeVAI_VAII, LanguageCodeVAI_VAII_LR, LanguageCodeVI, LanguageCodeVI_VN, LanguageCodeVO, LanguageCodeVUN, LanguageCodeVUN_TZ, LanguageCodeWAE, LanguageCodeWAE_CH, LanguageCodeWO, LanguageCodeWO_SN, LanguageCodeXH, LanguageCodeXH_ZA, LanguageCodeXOG, LanguageCodeXOG_UG, LanguageCodeYAV, LanguageCodeYAV_CM, LanguageCodeYI, LanguageCodeYO, LanguageCodeYO_BJ, LanguageCodeYO_NG, LanguageCodeYUE, LanguageCodeYUE_HANS, LanguageCodeYUE_HANS_CN, LanguageCodeYUE_HANT, LanguageCodeYUE_HANT_HK, LanguageCodeZGH, LanguageCodeZGH_MA, LanguageCodeZH, LanguageCodeZH_HANS, LanguageCodeZH_HANS_CN, LanguageCodeZH_HANS_HK, LanguageCodeZH_HANS_MO, LanguageCodeZH_HANS_SG, LanguageCodeZH_HANT, LanguageCodeZH_HANT_HK, LanguageCodeZH_HANT_MO, LanguageCodeZH_HANT_TW, LanguageCodeZU, LanguageCodeZU_ZA:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e LanguageCode) String() string {
	return string(e)
}

func (e LanguageCode) Ordinal() int {
	switch e {
	case LanguageCodeAF:
		return 0
	case LanguageCodeAF_NA:
		return 1
	case LanguageCodeID:
		return 2
	case LanguageCodeAF_ZA:
		return 3
	case LanguageCodeAGQ:
		return 4
	case LanguageCodeAGQ_CM:
		return 5
	case LanguageCodeAK:
		return 6
	case LanguageCodeAK_GH:
		return 7
	case LanguageCodeAM:
		return 8
	case LanguageCodeAM_ET:
		return 9
	case LanguageCodeAR:
		return 10
	case LanguageCodeAR_AE:
		return 11
	case LanguageCodeAR_BH:
		return 12
	case LanguageCodeAR_DJ:
		return 13
	case LanguageCodeAR_DZ:
		return 14
	case LanguageCodeAR_EG:
		return 15
	case LanguageCodeAR_EH:
		return 16
	case LanguageCodeAR_ER:
		return 17
	case LanguageCodeAR_IL:
		return 18
	case LanguageCodeAR_IQ:
		return 19
	case LanguageCodeAR_JO:
		return 20
	case LanguageCodeAR_KM:
		return 21
	case LanguageCodeAR_KW:
		return 22
	case LanguageCodeAR_LB:
		return 23
	case LanguageCodeAR_LY:
		return 24
	case LanguageCodeAR_MA:
		return 25
	case LanguageCodeAR_MR:
		return 26
	case LanguageCodeAR_OM:
		return 27
	case LanguageCodeAR_PS:
		return 28
	case LanguageCodeAR_QA:
		return 29
	case LanguageCodeAR_SA:
		return 30
	case LanguageCodeAR_SD:
		return 31
	case LanguageCodeAR_SO:
		return 32
	case LanguageCodeAR_SS:
		return 33
	case LanguageCodeAR_SY:
		return 34
	case LanguageCodeAR_TD:
		return 35
	case LanguageCodeAR_TN:
		return 36
	case LanguageCodeAR_YE:
		return 37
	case LanguageCodeAS:
		return 38
	case LanguageCodeAS_IN:
		return 39
	case LanguageCodeASA:
		return 40
	case LanguageCodeASA_TZ:
		return 41
	case LanguageCodeAST:
		return 42
	case LanguageCodeAST_ES:
		return 43
	case LanguageCodeAZ:
		return 44
	case LanguageCodeAZ_CYRL:
		return 45
	case LanguageCodeAZ_CYRL_AZ:
		return 46
	case LanguageCodeAZ_LATN:
		return 47
	case LanguageCodeAZ_LATN_AZ:
		return 48
	case LanguageCodeBAS:
		return 49
	case LanguageCodeBAS_CM:
		return 50
	case LanguageCodeBE:
		return 51
	case LanguageCodeBE_BY:
		return 52
	case LanguageCodeBEM:
		return 53
	case LanguageCodeBEM_ZM:
		return 54
	case LanguageCodeBEZ:
		return 55
	case LanguageCodeBEZ_TZ:
		return 56
	case LanguageCodeBG:
		return 57
	case LanguageCodeBG_BG:
		return 58
	case LanguageCodeBM:
		return 59
	case LanguageCodeBM_ML:
		return 60
	case LanguageCodeBN:
		return 61
	case LanguageCodeBN_BD:
		return 62
	case LanguageCodeBN_IN:
		return 63
	case LanguageCodeBO:
		return 64
	case LanguageCodeBO_CN:
		return 65
	case LanguageCodeBO_IN:
		return 66
	case LanguageCodeBR:
		return 67
	case LanguageCodeBR_FR:
		return 68
	case LanguageCodeBRX:
		return 69
	case LanguageCodeBRX_IN:
		return 70
	case LanguageCodeBS:
		return 71
	case LanguageCodeBS_CYRL:
		return 72
	case LanguageCodeBS_CYRL_BA:
		return 73
	case LanguageCodeBS_LATN:
		return 74
	case LanguageCodeBS_LATN_BA:
		return 75
	case LanguageCodeCA:
		return 76
	case LanguageCodeCA_AD:
		return 77
	case LanguageCodeCA_ES:
		return 78
	case LanguageCodeCA_ES_VALENCIA:
		return 79
	case LanguageCodeCA_FR:
		return 80
	case LanguageCodeCA_IT:
		return 81
	case LanguageCodeCCP:
		return 82
	case LanguageCodeCCP_BD:
		return 83
	case LanguageCodeCCP_IN:
		return 84
	case LanguageCodeCE:
		return 85
	case LanguageCodeCE_RU:
		return 86
	case LanguageCodeCEB:
		return 87
	case LanguageCodeCEB_PH:
		return 88
	case LanguageCodeCGG:
		return 89
	case LanguageCodeCGG_UG:
		return 90
	case LanguageCodeCHR:
		return 91
	case LanguageCodeCHR_US:
		return 92
	case LanguageCodeCKB:
		return 93
	case LanguageCodeCKB_IQ:
		return 94
	case LanguageCodeCKB_IR:
		return 95
	case LanguageCodeCS:
		return 96
	case LanguageCodeCS_CZ:
		return 97
	case LanguageCodeCU:
		return 98
	case LanguageCodeCU_RU:
		return 99
	case LanguageCodeCY:
		return 100
	case LanguageCodeCY_GB:
		return 101
	case LanguageCodeDA:
		return 102
	case LanguageCodeDA_DK:
		return 103
	case LanguageCodeDA_GL:
		return 104
	case LanguageCodeDAV:
		return 105
	case LanguageCodeDAV_KE:
		return 106
	case LanguageCodeDE:
		return 107
	case LanguageCodeDE_AT:
		return 108
	case LanguageCodeDE_BE:
		return 109
	case LanguageCodeDE_CH:
		return 110
	case LanguageCodeDE_DE:
		return 111
	case LanguageCodeDE_IT:
		return 112
	case LanguageCodeDE_LI:
		return 113
	case LanguageCodeDE_LU:
		return 114
	case LanguageCodeDJE:
		return 115
	case LanguageCodeDJE_NE:
		return 116
	case LanguageCodeDSB:
		return 117
	case LanguageCodeDSB_DE:
		return 118
	case LanguageCodeDUA:
		return 119
	case LanguageCodeDUA_CM:
		return 120
	case LanguageCodeDYO:
		return 121
	case LanguageCodeDYO_SN:
		return 122
	case LanguageCodeDZ:
		return 123
	case LanguageCodeDZ_BT:
		return 124
	case LanguageCodeEBU:
		return 125
	case LanguageCodeEBU_KE:
		return 126
	case LanguageCodeEE:
		return 127
	case LanguageCodeEE_GH:
		return 128
	case LanguageCodeEE_TG:
		return 129
	case LanguageCodeEL:
		return 130
	case LanguageCodeEL_CY:
		return 131
	case LanguageCodeEL_GR:
		return 132
	case LanguageCodeEN:
		return 133
	case LanguageCodeEN_AE:
		return 134
	case LanguageCodeEN_AG:
		return 135
	case LanguageCodeEN_AI:
		return 136
	case LanguageCodeEN_AS:
		return 137
	case LanguageCodeEN_AT:
		return 138
	case LanguageCodeEN_AU:
		return 139
	case LanguageCodeEN_BB:
		return 140
	case LanguageCodeEN_BE:
		return 141
	case LanguageCodeEN_BI:
		return 142
	case LanguageCodeEN_BM:
		return 143
	case LanguageCodeEN_BS:
		return 144
	case LanguageCodeEN_BW:
		return 145
	case LanguageCodeEN_BZ:
		return 146
	case LanguageCodeEN_CA:
		return 147
	case LanguageCodeEN_CC:
		return 148
	case LanguageCodeEN_CH:
		return 149
	case LanguageCodeEN_CK:
		return 150
	case LanguageCodeEN_CM:
		return 151
	case LanguageCodeEN_CX:
		return 152
	case LanguageCodeEN_CY:
		return 153
	case LanguageCodeEN_DE:
		return 154
	case LanguageCodeEN_DG:
		return 155
	case LanguageCodeEN_DK:
		return 156
	case LanguageCodeEN_DM:
		return 157
	case LanguageCodeEN_ER:
		return 158
	case LanguageCodeEN_FI:
		return 159
	case LanguageCodeEN_FJ:
		return 160
	case LanguageCodeEN_FK:
		return 161
	case LanguageCodeEN_FM:
		return 162
	case LanguageCodeEN_GB:
		return 163
	case LanguageCodeEN_GD:
		return 164
	case LanguageCodeEN_GG:
		return 165
	case LanguageCodeEN_GH:
		return 166
	case LanguageCodeEN_GI:
		return 167
	case LanguageCodeEN_GM:
		return 168
	case LanguageCodeEN_GU:
		return 169
	case LanguageCodeEN_GY:
		return 170
	case LanguageCodeEN_HK:
		return 171
	case LanguageCodeEN_IE:
		return 172
	case LanguageCodeEN_IL:
		return 173
	case LanguageCodeEN_IM:
		return 174
	case LanguageCodeEN_IN:
		return 175
	case LanguageCodeEN_IO:
		return 176
	case LanguageCodeEN_JE:
		return 177
	case LanguageCodeEN_JM:
		return 178
	case LanguageCodeEN_KE:
		return 179
	case LanguageCodeEN_KI:
		return 180
	case LanguageCodeEN_KN:
		return 181
	case LanguageCodeEN_KY:
		return 182
	case LanguageCodeEN_LC:
		return 183
	case LanguageCodeEN_LR:
		return 184
	case LanguageCodeEN_LS:
		return 185
	case LanguageCodeEN_MG:
		return 186
	case LanguageCodeEN_MH:
		return 187
	case LanguageCodeEN_MO:
		return 188
	case LanguageCodeEN_MP:
		return 189
	case LanguageCodeEN_MS:
		return 190
	case LanguageCodeEN_MT:
		return 191
	case LanguageCodeEN_MU:
		return 192
	case LanguageCodeEN_MW:
		return 193
	case LanguageCodeEN_MY:
		return 194
	case LanguageCodeEN_NA:
		return 195
	case LanguageCodeEN_NF:
		return 196
	case LanguageCodeEN_NG:
		return 197
	case LanguageCodeEN_NL:
		return 198
	case LanguageCodeEN_NR:
		return 199
	case LanguageCodeEN_NU:
		return 200
	case LanguageCodeEN_NZ:
		return 201
	case LanguageCodeEN_PG:
		return 202
	case LanguageCodeEN_PH:
		return 203
	case LanguageCodeEN_PK:
		return 204
	case LanguageCodeEN_PN:
		return 205
	case LanguageCodeEN_PR:
		return 206
	case LanguageCodeEN_PW:
		return 207
	case LanguageCodeEN_RW:
		return 208
	case LanguageCodeEN_SB:
		return 209
	case LanguageCodeEN_SC:
		return 210
	case LanguageCodeEN_SD:
		return 211
	case LanguageCodeEN_SE:
		return 212
	case LanguageCodeEN_SG:
		return 213
	case LanguageCodeEN_SH:
		return 214
	case LanguageCodeEN_SI:
		return 215
	case LanguageCodeEN_SL:
		return 216
	case LanguageCodeEN_SS:
		return 217
	case LanguageCodeEN_SX:
		return 218
	case LanguageCodeEN_SZ:
		return 219
	case LanguageCodeEN_TC:
		return 220
	case LanguageCodeEN_TK:
		return 221
	case LanguageCodeEN_TO:
		return 222
	case LanguageCodeEN_TT:
		return 223
	case LanguageCodeEN_TV:
		return 224
	case LanguageCodeEN_TZ:
		return 225
	case LanguageCodeEN_UG:
		return 226
	case LanguageCodeEN_UM:
		return 227
	case LanguageCodeEN_US:
		return 228
	case LanguageCodeEN_VC:
		return 229
	case LanguageCodeEN_VG:
		return 230
	case LanguageCodeEN_VI:
		return 231
	case LanguageCodeEN_VU:
		return 232
	case LanguageCodeEN_WS:
		return 233
	case LanguageCodeEN_ZA:
		return 234
	case LanguageCodeEN_ZM:
		return 235
	case LanguageCodeEN_ZW:
		return 236
	case LanguageCodeEO:
		return 237
	case LanguageCodeES:
		return 238
	case LanguageCodeES_AR:
		return 239
	case LanguageCodeES_BO:
		return 240
	case LanguageCodeES_BR:
		return 241
	case LanguageCodeES_BZ:
		return 242
	case LanguageCodeES_CL:
		return 243
	case LanguageCodeES_CO:
		return 244
	case LanguageCodeES_CR:
		return 245
	case LanguageCodeES_CU:
		return 246
	case LanguageCodeES_DO:
		return 247
	case LanguageCodeES_EA:
		return 248
	case LanguageCodeES_EC:
		return 249
	case LanguageCodeES_ES:
		return 250
	case LanguageCodeES_GQ:
		return 251
	case LanguageCodeES_GT:
		return 252
	case LanguageCodeES_HN:
		return 253
	case LanguageCodeES_IC:
		return 254
	case LanguageCodeES_MX:
		return 255
	case LanguageCodeES_NI:
		return 256
	case LanguageCodeES_PA:
		return 257
	case LanguageCodeES_PE:
		return 258
	case LanguageCodeES_PH:
		return 259
	case LanguageCodeES_PR:
		return 260
	case LanguageCodeES_PY:
		return 261
	case LanguageCodeES_SV:
		return 262
	case LanguageCodeES_US:
		return 263
	case LanguageCodeES_UY:
		return 264
	case LanguageCodeES_VE:
		return 265
	case LanguageCodeET:
		return 266
	case LanguageCodeET_EE:
		return 267
	case LanguageCodeEU:
		return 268
	case LanguageCodeEU_ES:
		return 269
	case LanguageCodeEWO:
		return 270
	case LanguageCodeEWO_CM:
		return 271
	case LanguageCodeFA:
		return 272
	case LanguageCodeFA_AF:
		return 273
	case LanguageCodeFA_IR:
		return 274
	case LanguageCodeFF:
		return 275
	case LanguageCodeFF_ADLM:
		return 276
	case LanguageCodeFF_ADLM_BF:
		return 277
	case LanguageCodeFF_ADLM_CM:
		return 278
	case LanguageCodeFF_ADLM_GH:
		return 279
	case LanguageCodeFF_ADLM_GM:
		return 280
	case LanguageCodeFF_ADLM_GN:
		return 281
	case LanguageCodeFF_ADLM_GW:
		return 282
	case LanguageCodeFF_ADLM_LR:
		return 283
	case LanguageCodeFF_ADLM_MR:
		return 284
	case LanguageCodeFF_ADLM_NE:
		return 285
	case LanguageCodeFF_ADLM_NG:
		return 286
	case LanguageCodeFF_ADLM_SL:
		return 287
	case LanguageCodeFF_ADLM_SN:
		return 288
	case LanguageCodeFF_LATN:
		return 289
	case LanguageCodeFF_LATN_BF:
		return 290
	case LanguageCodeFF_LATN_CM:
		return 291
	case LanguageCodeFF_LATN_GH:
		return 292
	case LanguageCodeFF_LATN_GM:
		return 293
	case LanguageCodeFF_LATN_GN:
		return 294
	case LanguageCodeFF_LATN_GW:
		return 295
	case LanguageCodeFF_LATN_LR:
		return 296
	case LanguageCodeFF_LATN_MR:
		return 297
	case LanguageCodeFF_LATN_NE:
		return 298
	case LanguageCodeFF_LATN_NG:
		return 299
	case LanguageCodeFF_LATN_SL:
		return 300
	case LanguageCodeFF_LATN_SN:
		return 301
	case LanguageCodeFI:
		return 302
	case LanguageCodeFI_FI:
		return 303
	case LanguageCodeFIL:
		return 304
	case LanguageCodeFIL_PH:
		return 305
	case LanguageCodeFO:
		return 306
	case LanguageCodeFO_DK:
		return 307
	case LanguageCodeFO_FO:
		return 308
	case LanguageCodeFR:
		return 309
	case LanguageCodeFR_BE:
		return 310
	case LanguageCodeFR_BF:
		return 311
	case LanguageCodeFR_BI:
		return 312
	case LanguageCodeFR_BJ:
		return 313
	case LanguageCodeFR_BL:
		return 314
	case LanguageCodeFR_CA:
		return 315
	case LanguageCodeFR_CD:
		return 316
	case LanguageCodeFR_CF:
		return 317
	case LanguageCodeFR_CG:
		return 318
	case LanguageCodeFR_CH:
		return 319
	case LanguageCodeFR_CI:
		return 320
	case LanguageCodeFR_CM:
		return 321
	case LanguageCodeFR_DJ:
		return 322
	case LanguageCodeFR_DZ:
		return 323
	case LanguageCodeFR_FR:
		return 324
	case LanguageCodeFR_GA:
		return 325
	case LanguageCodeFR_GF:
		return 326
	case LanguageCodeFR_GN:
		return 327
	case LanguageCodeFR_GP:
		return 328
	case LanguageCodeFR_GQ:
		return 329
	case LanguageCodeFR_HT:
		return 330
	case LanguageCodeFR_KM:
		return 331
	case LanguageCodeFR_LU:
		return 332
	case LanguageCodeFR_MA:
		return 333
	case LanguageCodeFR_MC:
		return 334
	case LanguageCodeFR_MF:
		return 335
	case LanguageCodeFR_MG:
		return 336
	case LanguageCodeFR_ML:
		return 337
	case LanguageCodeFR_MQ:
		return 338
	case LanguageCodeFR_MR:
		return 339
	case LanguageCodeFR_MU:
		return 340
	case LanguageCodeFR_NC:
		return 341
	case LanguageCodeFR_NE:
		return 342
	case LanguageCodeFR_PF:
		return 343
	case LanguageCodeFR_PM:
		return 344
	case LanguageCodeFR_RE:
		return 345
	case LanguageCodeFR_RW:
		return 346
	case LanguageCodeFR_SC:
		return 347
	case LanguageCodeFR_SN:
		return 348
	case LanguageCodeFR_SY:
		return 349
	case LanguageCodeFR_TD:
		return 350
	case LanguageCodeFR_TG:
		return 351
	case LanguageCodeFR_TN:
		return 352
	case LanguageCodeFR_VU:
		return 353
	case LanguageCodeFR_WF:
		return 354
	case LanguageCodeFR_YT:
		return 355
	case LanguageCodeFUR:
		return 356
	case LanguageCodeFUR_IT:
		return 357
	case LanguageCodeFY:
		return 358
	case LanguageCodeFY_NL:
		return 359
	case LanguageCodeGA:
		return 360
	case LanguageCodeGA_GB:
		return 361
	case LanguageCodeGA_IE:
		return 362
	case LanguageCodeGD:
		return 363
	case LanguageCodeGD_GB:
		return 364
	case LanguageCodeGL:
		return 365
	case LanguageCodeGL_ES:
		return 366
	case LanguageCodeGSW:
		return 367
	case LanguageCodeGSW_CH:
		return 368
	case LanguageCodeGSW_FR:
		return 369
	case LanguageCodeGSW_LI:
		return 370
	case LanguageCodeGU:
		return 371
	case LanguageCodeGU_IN:
		return 372
	case LanguageCodeGUZ:
		return 373
	case LanguageCodeGUZ_KE:
		return 374
	case LanguageCodeGV:
		return 375
	case LanguageCodeGV_IM:
		return 376
	case LanguageCodeHA:
		return 377
	case LanguageCodeHA_GH:
		return 378
	case LanguageCodeHA_NE:
		return 379
	case LanguageCodeHA_NG:
		return 380
	case LanguageCodeHAW:
		return 381
	case LanguageCodeHAW_US:
		return 382
	case LanguageCodeHE:
		return 383
	case LanguageCodeHE_IL:
		return 384
	case LanguageCodeHI:
		return 385
	case LanguageCodeHI_IN:
		return 386
	case LanguageCodeHR:
		return 387
	case LanguageCodeHR_BA:
		return 388
	case LanguageCodeHR_HR:
		return 389
	case LanguageCodeHSB:
		return 390
	case LanguageCodeHSB_DE:
		return 391
	case LanguageCodeHU:
		return 392
	case LanguageCodeHU_HU:
		return 393
	case LanguageCodeHY:
		return 394
	case LanguageCodeHY_AM:
		return 395
	case LanguageCodeIA:
		return 396
	case LanguageCodeSTRING:
		return 397
	case LanguageCodeID_ID:
		return 398
	case LanguageCodeIG:
		return 399
	case LanguageCodeIG_NG:
		return 400
	case LanguageCodeII:
		return 401
	case LanguageCodeII_CN:
		return 402
	case LanguageCodeIS:
		return 403
	case LanguageCodeIS_IS:
		return 404
	case LanguageCodeIT:
		return 405
	case LanguageCodeIT_CH:
		return 406
	case LanguageCodeIT_IT:
		return 407
	case LanguageCodeIT_SM:
		return 408
	case LanguageCodeIT_VA:
		return 409
	case LanguageCodeJA:
		return 410
	case LanguageCodeJA_JP:
		return 411
	case LanguageCodeJGO:
		return 412
	case LanguageCodeJGO_CM:
		return 413
	case LanguageCodeJMC:
		return 414
	case LanguageCodeJMC_TZ:
		return 415
	case LanguageCodeJV:
		return 416
	case LanguageCodeJV_ID:
		return 417
	case LanguageCodeKA:
		return 418
	case LanguageCodeKA_GE:
		return 419
	case LanguageCodeKAB:
		return 420
	case LanguageCodeKAB_DZ:
		return 421
	case LanguageCodeKAM:
		return 422
	case LanguageCodeKAM_KE:
		return 423
	case LanguageCodeKDE:
		return 424
	case LanguageCodeKDE_TZ:
		return 425
	case LanguageCodeKEA:
		return 426
	case LanguageCodeKEA_CV:
		return 427
	case LanguageCodeKHQ:
		return 428
	case LanguageCodeKHQ_ML:
		return 429
	case LanguageCodeKI:
		return 430
	case LanguageCodeKI_KE:
		return 431
	case LanguageCodeKK:
		return 432
	case LanguageCodeKK_KZ:
		return 433
	case LanguageCodeKKJ:
		return 434
	case LanguageCodeKKJ_CM:
		return 435
	case LanguageCodeKL:
		return 436
	case LanguageCodeKL_GL:
		return 437
	case LanguageCodeKLN:
		return 438
	case LanguageCodeKLN_KE:
		return 439
	case LanguageCodeKM:
		return 440
	case LanguageCodeKM_KH:
		return 441
	case LanguageCodeKN:
		return 442
	case LanguageCodeKN_IN:
		return 443
	case LanguageCodeKO:
		return 444
	case LanguageCodeKO_KP:
		return 445
	case LanguageCodeKO_KR:
		return 446
	case LanguageCodeKOK:
		return 447
	case LanguageCodeKOK_IN:
		return 448
	case LanguageCodeKS:
		return 449
	case LanguageCodeKS_ARAB:
		return 450
	case LanguageCodeKS_ARAB_IN:
		return 451
	case LanguageCodeKSB:
		return 452
	case LanguageCodeKSB_TZ:
		return 453
	case LanguageCodeKSF:
		return 454
	case LanguageCodeKSF_CM:
		return 455
	case LanguageCodeKSH:
		return 456
	case LanguageCodeKSH_DE:
		return 457
	case LanguageCodeKU:
		return 458
	case LanguageCodeKU_TR:
		return 459
	case LanguageCodeKW:
		return 460
	case LanguageCodeKW_GB:
		return 461
	case LanguageCodeKY:
		return 462
	case LanguageCodeKY_KG:
		return 463
	case LanguageCodeLAG:
		return 464
	case LanguageCodeLAG_TZ:
		return 465
	case LanguageCodeLB:
		return 466
	case LanguageCodeLB_LU:
		return 467
	case LanguageCodeLG:
		return 468
	case LanguageCodeLG_UG:
		return 469
	case LanguageCodeLKT:
		return 470
	case LanguageCodeLKT_US:
		return 471
	case LanguageCodeLN:
		return 472
	case LanguageCodeLN_AO:
		return 473
	case LanguageCodeLN_CD:
		return 474
	case LanguageCodeLN_CF:
		return 475
	case LanguageCodeLN_CG:
		return 476
	case LanguageCodeLO:
		return 477
	case LanguageCodeLO_LA:
		return 478
	case LanguageCodeLRC:
		return 479
	case LanguageCodeLRC_IQ:
		return 480
	case LanguageCodeLRC_IR:
		return 481
	case LanguageCodeLT:
		return 482
	case LanguageCodeLT_LT:
		return 483
	case LanguageCodeLU:
		return 484
	case LanguageCodeLU_CD:
		return 485
	case LanguageCodeLUO:
		return 486
	case LanguageCodeLUO_KE:
		return 487
	case LanguageCodeLUY:
		return 488
	case LanguageCodeLUY_KE:
		return 489
	case LanguageCodeLV:
		return 490
	case LanguageCodeLV_LV:
		return 491
	case LanguageCodeMAI:
		return 492
	case LanguageCodeMAI_IN:
		return 493
	case LanguageCodeMAS:
		return 494
	case LanguageCodeMAS_KE:
		return 495
	case LanguageCodeMAS_TZ:
		return 496
	case LanguageCodeMER:
		return 497
	case LanguageCodeMER_KE:
		return 498
	case LanguageCodeMFE:
		return 499
	case LanguageCodeMFE_MU:
		return 500
	case LanguageCodeMG:
		return 501
	case LanguageCodeMG_MG:
		return 502
	case LanguageCodeMGH:
		return 503
	case LanguageCodeMGH_MZ:
		return 504
	case LanguageCodeMGO:
		return 505
	case LanguageCodeMGO_CM:
		return 506
	case LanguageCodeMI:
		return 507
	case LanguageCodeMI_NZ:
		return 508
	case LanguageCodeMK:
		return 509
	case LanguageCodeMK_MK:
		return 510
	case LanguageCodeML:
		return 511
	case LanguageCodeML_IN:
		return 512
	case LanguageCodeMN:
		return 513
	case LanguageCodeMN_MN:
		return 514
	case LanguageCodeMNI:
		return 515
	case LanguageCodeMNI_BENG:
		return 516
	case LanguageCodeMNI_BENG_IN:
		return 517
	case LanguageCodeMR:
		return 518
	case LanguageCodeMR_IN:
		return 519
	case LanguageCodeMS:
		return 520
	case LanguageCodeMS_BN:
		return 521
	case LanguageCodeMS_ID:
		return 522
	case LanguageCodeMS_MY:
		return 523
	case LanguageCodeMS_SG:
		return 524
	case LanguageCodeMT:
		return 525
	case LanguageCodeMT_MT:
		return 526
	case LanguageCodeMUA:
		return 527
	case LanguageCodeMUA_CM:
		return 528
	case LanguageCodeMY:
		return 529
	case LanguageCodeMY_MM:
		return 530
	case LanguageCodeMZN:
		return 531
	case LanguageCodeMZN_IR:
		return 532
	case LanguageCodeNAQ:
		return 533
	case LanguageCodeNAQ_NA:
		return 534
	case LanguageCodeNB:
		return 535
	case LanguageCodeNB_NO:
		return 536
	case LanguageCodeNB_SJ:
		return 537
	case LanguageCodeND:
		return 538
	case LanguageCodeND_ZW:
		return 539
	case LanguageCodeNDS:
		return 540
	case LanguageCodeNDS_DE:
		return 541
	case LanguageCodeNDS_NL:
		return 542
	case LanguageCodeNE:
		return 543
	case LanguageCodeNE_IN:
		return 544
	case LanguageCodeNE_NP:
		return 545
	case LanguageCodeNL:
		return 546
	case LanguageCodeNL_AW:
		return 547
	case LanguageCodeNL_BE:
		return 548
	case LanguageCodeNL_BQ:
		return 549
	case LanguageCodeNL_CW:
		return 550
	case LanguageCodeNL_NL:
		return 551
	case LanguageCodeNL_SR:
		return 552
	case LanguageCodeNL_SX:
		return 553
	case LanguageCodeNMG:
		return 554
	case LanguageCodeNMG_CM:
		return 555
	case LanguageCodeNN:
		return 556
	case LanguageCodeNN_NO:
		return 557
	case LanguageCodeNNH:
		return 558
	case LanguageCodeNNH_CM:
		return 559
	case LanguageCodeNUS:
		return 560
	case LanguageCodeNUS_SS:
		return 561
	case LanguageCodeNYN:
		return 562
	case LanguageCodeNYN_UG:
		return 563
	case LanguageCodeOM:
		return 564
	case LanguageCodeOM_ET:
		return 565
	case LanguageCodeOM_KE:
		return 566
	case LanguageCodeOR:
		return 567
	case LanguageCodeOR_IN:
		return 568
	case LanguageCodeOS:
		return 569
	case LanguageCodeOS_GE:
		return 570
	case LanguageCodeOS_RU:
		return 571
	case LanguageCodePA:
		return 572
	case LanguageCodePA_ARAB:
		return 573
	case LanguageCodePA_ARAB_PK:
		return 574
	case LanguageCodePA_GURU:
		return 575
	case LanguageCodePA_GURU_IN:
		return 576
	case LanguageCodePCM:
		return 577
	case LanguageCodePCM_NG:
		return 578
	case LanguageCodePL:
		return 579
	case LanguageCodePL_PL:
		return 580
	case LanguageCodePRG:
		return 581
	case LanguageCodePS:
		return 582
	case LanguageCodePS_AF:
		return 583
	case LanguageCodePS_PK:
		return 584
	case LanguageCodePT:
		return 585
	case LanguageCodePT_AO:
		return 586
	case LanguageCodePT_BR:
		return 587
	case LanguageCodePT_CH:
		return 588
	case LanguageCodePT_CV:
		return 589
	case LanguageCodePT_GQ:
		return 590
	case LanguageCodePT_GW:
		return 591
	case LanguageCodePT_LU:
		return 592
	case LanguageCodePT_MO:
		return 593
	case LanguageCodePT_MZ:
		return 594
	case LanguageCodePT_PT:
		return 595
	case LanguageCodePT_ST:
		return 596
	case LanguageCodePT_TL:
		return 597
	case LanguageCodeQU:
		return 598
	case LanguageCodeQU_BO:
		return 599
	case LanguageCodeQU_EC:
		return 600
	case LanguageCodeQU_PE:
		return 601
	case LanguageCodeRM:
		return 602
	case LanguageCodeRM_CH:
		return 603
	case LanguageCodeRN:
		return 604
	case LanguageCodeRN_BI:
		return 605
	case LanguageCodeRO:
		return 606
	case LanguageCodeRO_MD:
		return 607
	case LanguageCodeRO_RO:
		return 608
	case LanguageCodeROF:
		return 609
	case LanguageCodeROF_TZ:
		return 610
	case LanguageCodeRU:
		return 611
	case LanguageCodeRU_BY:
		return 612
	case LanguageCodeRU_KG:
		return 613
	case LanguageCodeRU_KZ:
		return 614
	case LanguageCodeRU_MD:
		return 615
	case LanguageCodeRU_RU:
		return 616
	case LanguageCodeRU_UA:
		return 617
	case LanguageCodeRW:
		return 618
	case LanguageCodeRW_RW:
		return 619
	case LanguageCodeRWK:
		return 620
	case LanguageCodeRWK_TZ:
		return 621
	case LanguageCodeSAH:
		return 622
	case LanguageCodeSAH_RU:
		return 623
	case LanguageCodeSAQ:
		return 624
	case LanguageCodeSAQ_KE:
		return 625
	case LanguageCodeSAT:
		return 626
	case LanguageCodeSAT_OLCK:
		return 627
	case LanguageCodeSAT_OLCK_IN:
		return 628
	case LanguageCodeSBP:
		return 629
	case LanguageCodeSBP_TZ:
		return 630
	case LanguageCodeSD:
		return 631
	case LanguageCodeSD_ARAB:
		return 632
	case LanguageCodeSD_ARAB_PK:
		return 633
	case LanguageCodeSD_DEVA:
		return 634
	case LanguageCodeSD_DEVA_IN:
		return 635
	case LanguageCodeSE:
		return 636
	case LanguageCodeSE_FI:
		return 637
	case LanguageCodeSE_NO:
		return 638
	case LanguageCodeSE_SE:
		return 639
	case LanguageCodeSEH:
		return 640
	case LanguageCodeSEH_MZ:
		return 641
	case LanguageCodeSES:
		return 642
	case LanguageCodeSES_ML:
		return 643
	case LanguageCodeSG:
		return 644
	case LanguageCodeSG_CF:
		return 645
	case LanguageCodeSHI:
		return 646
	case LanguageCodeSHI_LATN:
		return 647
	case LanguageCodeSHI_LATN_MA:
		return 648
	case LanguageCodeSHI_TFNG:
		return 649
	case LanguageCodeSHI_TFNG_MA:
		return 650
	case LanguageCodeSI:
		return 651
	case LanguageCodeSI_LK:
		return 652
	case LanguageCodeSK:
		return 653
	case LanguageCodeSK_SK:
		return 654
	case LanguageCodeSL:
		return 655
	case LanguageCodeSL_SI:
		return 656
	case LanguageCodeSMN:
		return 657
	case LanguageCodeSMN_FI:
		return 658
	case LanguageCodeSN:
		return 659
	case LanguageCodeSN_ZW:
		return 660
	case LanguageCodeSO:
		return 661
	case LanguageCodeSO_DJ:
		return 662
	case LanguageCodeSO_ET:
		return 663
	case LanguageCodeSO_KE:
		return 664
	case LanguageCodeSO_SO:
		return 665
	case LanguageCodeSQ:
		return 666
	case LanguageCodeSQ_AL:
		return 667
	case LanguageCodeSQ_MK:
		return 668
	case LanguageCodeSQ_XK:
		return 669
	case LanguageCodeSR:
		return 670
	case LanguageCodeSR_CYRL:
		return 671
	case LanguageCodeSR_CYRL_BA:
		return 672
	case LanguageCodeSR_CYRL_ME:
		return 673
	case LanguageCodeSR_CYRL_RS:
		return 674
	case LanguageCodeSR_CYRL_XK:
		return 675
	case LanguageCodeSR_LATN:
		return 676
	case LanguageCodeSR_LATN_BA:
		return 677
	case LanguageCodeSR_LATN_ME:
		return 678
	case LanguageCodeSR_LATN_RS:
		return 679
	case LanguageCodeSR_LATN_XK:
		return 680
	case LanguageCodeSU:
		return 681
	case LanguageCodeSU_LATN:
		return 682
	case LanguageCodeSU_LATN_ID:
		return 683
	case LanguageCodeSV:
		return 684
	case LanguageCodeSV_AX:
		return 685
	case LanguageCodeSV_FI:
		return 686
	case LanguageCodeSV_SE:
		return 687
	case LanguageCodeSW:
		return 688
	case LanguageCodeSW_CD:
		return 689
	case LanguageCodeSW_KE:
		return 690
	case LanguageCodeSW_TZ:
		return 691
	case LanguageCodeSW_UG:
		return 692
	case LanguageCodeTA:
		return 693
	case LanguageCodeTA_IN:
		return 694
	case LanguageCodeTA_LK:
		return 695
	case LanguageCodeTA_MY:
		return 696
	case LanguageCodeTA_SG:
		return 697
	case LanguageCodeTE:
		return 698
	case LanguageCodeTE_IN:
		return 699
	case LanguageCodeTEO:
		return 700
	case LanguageCodeTEO_KE:
		return 701
	case LanguageCodeTEO_UG:
		return 702
	case LanguageCodeTG:
		return 703
	case LanguageCodeTG_TJ:
		return 704
	case LanguageCodeTH:
		return 705
	case LanguageCodeTH_TH:
		return 706
	case LanguageCodeTI:
		return 707
	case LanguageCodeTI_ER:
		return 708
	case LanguageCodeTI_ET:
		return 709
	case LanguageCodeTK:
		return 710
	case LanguageCodeTK_TM:
		return 711
	case LanguageCodeTO:
		return 712
	case LanguageCodeTO_TO:
		return 713
	case LanguageCodeTR:
		return 714
	case LanguageCodeTR_CY:
		return 715
	case LanguageCodeTR_TR:
		return 716
	case LanguageCodeTT:
		return 717
	case LanguageCodeTT_RU:
		return 718
	case LanguageCodeTWQ:
		return 719
	case LanguageCodeTWQ_NE:
		return 720
	case LanguageCodeTZM:
		return 721
	case LanguageCodeTZM_MA:
		return 722
	case LanguageCodeUG:
		return 723
	case LanguageCodeUG_CN:
		return 724
	case LanguageCodeUK:
		return 725
	case LanguageCodeUK_UA:
		return 726
	case LanguageCodeUR:
		return 727
	case LanguageCodeUR_IN:
		return 728
	case LanguageCodeUR_PK:
		return 729
	case LanguageCodeUZ:
		return 730
	case LanguageCodeUZ_ARAB:
		return 731
	case LanguageCodeUZ_ARAB_AF:
		return 732
	case LanguageCodeUZ_CYRL:
		return 733
	case LanguageCodeUZ_CYRL_UZ:
		return 734
	case LanguageCodeUZ_LATN:
		return 735
	case LanguageCodeUZ_LATN_UZ:
		return 736
	case LanguageCodeVAI:
		return 737
	case LanguageCodeVAI_LATN:
		return 738
	case LanguageCodeVAI_LATN_LR:
		return 739
	case LanguageCodeVAI_VAII:
		return 740
	case LanguageCodeVAI_VAII_LR:
		return 741
	case LanguageCodeVI:
		return 742
	case LanguageCodeVI_VN:
		return 743
	case LanguageCodeVO:
		return 744
	case LanguageCodeVUN:
		return 745
	case LanguageCodeVUN_TZ:
		return 746
	case LanguageCodeWAE:
		return 747
	case LanguageCodeWAE_CH:
		return 748
	case LanguageCodeWO:
		return 749
	case LanguageCodeWO_SN:
		return 750
	case LanguageCodeXH:
		return 751
	case LanguageCodeXH_ZA:
		return 752
	case LanguageCodeXOG:
		return 753
	case LanguageCodeXOG_UG:
		return 754
	case LanguageCodeYAV:
		return 755
	case LanguageCodeYAV_CM:
		return 756
	case LanguageCodeYI:
		return 757
	case LanguageCodeYO:
		return 758
	case LanguageCodeYO_BJ:
		return 759
	case LanguageCodeYO_NG:
		return 760
	case LanguageCodeYUE:
		return 761
	case LanguageCodeYUE_HANS:
		return 762
	case LanguageCodeYUE_HANS_CN:
		return 763
	case LanguageCodeYUE_HANT:
		return 764
	case LanguageCodeYUE_HANT_HK:
		return 765
	case LanguageCodeZGH:
		return 766
	case LanguageCodeZGH_MA:
		return 767
	case LanguageCodeZH:
		return 768
	case LanguageCodeZH_HANS:
		return 769
	case LanguageCodeZH_HANS_CN:
		return 770
	case LanguageCodeZH_HANS_HK:
		return 771
	case LanguageCodeZH_HANS_MO:
		return 772
	case LanguageCodeZH_HANS_SG:
		return 773
	case LanguageCodeZH_HANT:
		return 774
	case LanguageCodeZH_HANT_HK:
		return 775
	case LanguageCodeZH_HANT_MO:
		return 776
	case LanguageCodeZH_HANT_TW:
		return 777
	case LanguageCodeZU:
		return 778
	case LanguageCodeZU_ZA:
		return 779

	default:
		panic(errors.New("enum is not valid"))
	}
}

type AttributeType string

// Enum values for AttributeType
const (
	AttributeTypeProductType AttributeType = "product_type"
	AttributeTypePageType    AttributeType = "page_type"
)

func AllAttributeType() []AttributeType {
	return []AttributeType{
		AttributeTypeProductType,
		AttributeTypePageType,
	}
}

func (e AttributeType) IsValid() error {
	switch e {
	case AttributeTypeProductType, AttributeTypePageType:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e AttributeType) String() string {
	return string(e)
}

func (e AttributeType) Ordinal() int {
	switch e {
	case AttributeTypeProductType:
		return 0
	case AttributeTypePageType:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type AttributeInputType string

// Enum values for AttributeInputType
const (
	AttributeInputTypeDropdown    AttributeInputType = "dropdown"
	AttributeInputTypeMultiselect AttributeInputType = "multiselect"
	AttributeInputTypeFile        AttributeInputType = "file"
	AttributeInputTypeReference   AttributeInputType = "reference"
	AttributeInputTypeNumeric     AttributeInputType = "numeric"
	AttributeInputTypeRichText    AttributeInputType = "rich_text"
	AttributeInputTypeSwatch      AttributeInputType = "swatch"
	AttributeInputTypeBoolean     AttributeInputType = "boolean"
	AttributeInputTypeDate        AttributeInputType = "date"
	AttributeInputTypeDateTime    AttributeInputType = "date_time"
	AttributeInputTypePlainText   AttributeInputType = "plain_text"
)

func AllAttributeInputType() []AttributeInputType {
	return []AttributeInputType{
		AttributeInputTypeDropdown,
		AttributeInputTypeMultiselect,
		AttributeInputTypeFile,
		AttributeInputTypeReference,
		AttributeInputTypeNumeric,
		AttributeInputTypeRichText,
		AttributeInputTypeSwatch,
		AttributeInputTypeBoolean,
		AttributeInputTypeDate,
		AttributeInputTypeDateTime,
		AttributeInputTypePlainText,
	}
}

func (e AttributeInputType) IsValid() error {
	switch e {
	case AttributeInputTypeDropdown, AttributeInputTypeMultiselect, AttributeInputTypeFile, AttributeInputTypeReference, AttributeInputTypeNumeric, AttributeInputTypeRichText, AttributeInputTypeSwatch, AttributeInputTypeBoolean, AttributeInputTypeDate, AttributeInputTypeDateTime, AttributeInputTypePlainText:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e AttributeInputType) String() string {
	return string(e)
}

func (e AttributeInputType) Ordinal() int {
	switch e {
	case AttributeInputTypeDropdown:
		return 0
	case AttributeInputTypeMultiselect:
		return 1
	case AttributeInputTypeFile:
		return 2
	case AttributeInputTypeReference:
		return 3
	case AttributeInputTypeNumeric:
		return 4
	case AttributeInputTypeRichText:
		return 5
	case AttributeInputTypeSwatch:
		return 6
	case AttributeInputTypeBoolean:
		return 7
	case AttributeInputTypeDate:
		return 8
	case AttributeInputTypeDateTime:
		return 9
	case AttributeInputTypePlainText:
		return 10

	default:
		panic(errors.New("enum is not valid"))
	}
}

type AttributeEntityType string

// Enum values for AttributeEntityType
const (
	AttributeEntityTypePage           AttributeEntityType = "page"
	AttributeEntityTypeProduct        AttributeEntityType = "product"
	AttributeEntityTypeProductVariant AttributeEntityType = "product_variant"
)

func AllAttributeEntityType() []AttributeEntityType {
	return []AttributeEntityType{
		AttributeEntityTypePage,
		AttributeEntityTypeProduct,
		AttributeEntityTypeProductVariant,
	}
}

func (e AttributeEntityType) IsValid() error {
	switch e {
	case AttributeEntityTypePage, AttributeEntityTypeProduct, AttributeEntityTypeProductVariant:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e AttributeEntityType) String() string {
	return string(e)
}

func (e AttributeEntityType) Ordinal() int {
	switch e {
	case AttributeEntityTypePage:
		return 0
	case AttributeEntityTypeProduct:
		return 1
	case AttributeEntityTypeProductVariant:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

// NullAttributeEntityType is a nullable AttributeEntityType enum type. It supports SQL and JSON serialization.
type NullAttributeEntityType struct {
	Val   AttributeEntityType
	Valid bool
}

// NullAttributeEntityTypeFrom creates a new AttributeEntityType that will never be blank.
func NullAttributeEntityTypeFrom(v AttributeEntityType) NullAttributeEntityType {
	return NewNullAttributeEntityType(v, true)
}

// NullAttributeEntityTypeFromPtr creates a new NullAttributeEntityType that be null if s is nil.
func NullAttributeEntityTypeFromPtr(v *AttributeEntityType) NullAttributeEntityType {
	if v == nil {
		return NewNullAttributeEntityType("", false)
	}
	return NewNullAttributeEntityType(*v, true)
}

// NewNullAttributeEntityType creates a new NullAttributeEntityType
func NewNullAttributeEntityType(v AttributeEntityType, valid bool) NullAttributeEntityType {
	return NullAttributeEntityType{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullAttributeEntityType) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullAttributeEntityType) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullAttributeEntityType) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullAttributeEntityType) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = AttributeEntityType(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullAttributeEntityType value and also sets it to be non-null.
func (e *NullAttributeEntityType) SetValid(v AttributeEntityType) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullAttributeEntityType value, or a nil pointer if this NullAttributeEntityType is null.
func (e NullAttributeEntityType) Ptr() *AttributeEntityType {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullAttributeEntityType) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullAttributeEntityType) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullAttributeEntityType) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type Currency string

// Enum values for Currency
const (
	CurrencyAED Currency = "AED"
	CurrencyAFN Currency = "AFN"
	CurrencyALL Currency = "ALL"
	CurrencyAMD Currency = "AMD"
	CurrencyANG Currency = "ANG"
	CurrencyAOA Currency = "AOA"
	CurrencyARS Currency = "ARS"
	CurrencyAUD Currency = "AUD"
	CurrencyAWG Currency = "AWG"
	CurrencyAZN Currency = "AZN"
	CurrencyBAM Currency = "BAM"
	CurrencyBBD Currency = "BBD"
	CurrencyBDT Currency = "BDT"
	CurrencyBGN Currency = "BGN"
	CurrencyBHD Currency = "BHD"
	CurrencyBIF Currency = "BIF"
	CurrencyBMD Currency = "BMD"
	CurrencyBND Currency = "BND"
	CurrencyBOB Currency = "BOB"
	CurrencyBRL Currency = "BRL"
	CurrencyBSD Currency = "BSD"
	CurrencyBTN Currency = "BTN"
	CurrencyBWP Currency = "BWP"
	CurrencyBYN Currency = "BYN"
	CurrencyBYR Currency = "BYR"
	CurrencyBZD Currency = "BZD"
	CurrencyCAD Currency = "CAD"
	CurrencyCDF Currency = "CDF"
	CurrencyCHF Currency = "CHF"
	CurrencyCLF Currency = "CLF"
	CurrencyCLP Currency = "CLP"
	CurrencyCNY Currency = "CNY"
	CurrencyCOP Currency = "COP"
	CurrencyCRC Currency = "CRC"
	CurrencyCUC Currency = "CUC"
	CurrencyCUP Currency = "CUP"
	CurrencyCVE Currency = "CVE"
	CurrencyCZK Currency = "CZK"
	CurrencyDJF Currency = "DJF"
	CurrencyDKK Currency = "DKK"
	CurrencyDOP Currency = "DOP"
	CurrencyDZD Currency = "DZD"
	CurrencyEEK Currency = "EEK"
	CurrencyEGP Currency = "EGP"
	CurrencyERN Currency = "ERN"
	CurrencyETB Currency = "ETB"
	CurrencyEUR Currency = "EUR"
	CurrencyFJD Currency = "FJD"
	CurrencyFKP Currency = "FKP"
	CurrencyGBP Currency = "GBP"
	CurrencyGEL Currency = "GEL"
	CurrencyGGP Currency = "GGP"
	CurrencyGHC Currency = "GHC"
	CurrencyGHS Currency = "GHS"
	CurrencyGIP Currency = "GIP"
	CurrencyGMD Currency = "GMD"
	CurrencyGNF Currency = "GNF"
	CurrencyGTQ Currency = "GTQ"
	CurrencyGYD Currency = "GYD"
	CurrencyHKD Currency = "HKD"
	CurrencyHNL Currency = "HNL"
	CurrencyHRK Currency = "HRK"
	CurrencyHTG Currency = "HTG"
	CurrencyHUF Currency = "HUF"
	CurrencyIDR Currency = "IDR"
	CurrencyILS Currency = "ILS"
	CurrencyIMP Currency = "IMP"
	CurrencyINR Currency = "INR"
	CurrencyIQD Currency = "IQD"
	CurrencyIRR Currency = "IRR"
	CurrencyISK Currency = "ISK"
	CurrencyJEP Currency = "JEP"
	CurrencyJMD Currency = "JMD"
	CurrencyJOD Currency = "JOD"
	CurrencyJPY Currency = "JPY"
	CurrencyKES Currency = "KES"
	CurrencyKGS Currency = "KGS"
	CurrencyKHR Currency = "KHR"
	CurrencyKMF Currency = "KMF"
	CurrencyKPW Currency = "KPW"
	CurrencyKRW Currency = "KRW"
	CurrencyKWD Currency = "KWD"
	CurrencyKYD Currency = "KYD"
	CurrencyKZT Currency = "KZT"
	CurrencyLAK Currency = "LAK"
	CurrencyLBP Currency = "LBP"
	CurrencyLKR Currency = "LKR"
	CurrencyLRD Currency = "LRD"
	CurrencyLSL Currency = "LSL"
	CurrencyLTL Currency = "LTL"
	CurrencyLVL Currency = "LVL"
	CurrencyLYD Currency = "LYD"
	CurrencyMAD Currency = "MAD"
	CurrencyMDL Currency = "MDL"
	CurrencyMGA Currency = "MGA"
	CurrencyMKD Currency = "MKD"
	CurrencyMMK Currency = "MMK"
	CurrencyMNT Currency = "MNT"
	CurrencyMOP Currency = "MOP"
	CurrencyMUR Currency = "MUR"
	CurrencyMVR Currency = "MVR"
	CurrencyMWK Currency = "MWK"
	CurrencyMXN Currency = "MXN"
	CurrencyMYR Currency = "MYR"
	CurrencyMZN Currency = "MZN"
	CurrencyNAD Currency = "NAD"
	CurrencyNGN Currency = "NGN"
	CurrencyNIO Currency = "NIO"
	CurrencyNOK Currency = "NOK"
	CurrencyNPR Currency = "NPR"
	CurrencyNZD Currency = "NZD"
	CurrencyOMR Currency = "OMR"
	CurrencyPAB Currency = "PAB"
	CurrencyPEN Currency = "PEN"
	CurrencyPGK Currency = "PGK"
	CurrencyPHP Currency = "PHP"
	CurrencyPKR Currency = "PKR"
	CurrencyPLN Currency = "PLN"
	CurrencyPYG Currency = "PYG"
	CurrencyQAR Currency = "QAR"
	CurrencyRON Currency = "RON"
	CurrencyRSD Currency = "RSD"
	CurrencyRUB Currency = "RUB"
	CurrencyRUR Currency = "RUR"
	CurrencyRWF Currency = "RWF"
	CurrencySAR Currency = "SAR"
	CurrencySBD Currency = "SBD"
	CurrencySCR Currency = "SCR"
	CurrencySDG Currency = "SDG"
	CurrencySEK Currency = "SEK"
	CurrencySGD Currency = "SGD"
	CurrencySHP Currency = "SHP"
	CurrencySKK Currency = "SKK"
	CurrencySLL Currency = "SLL"
	CurrencySOS Currency = "SOS"
	CurrencySRD Currency = "SRD"
	CurrencySSP Currency = "SSP"
	CurrencySTD Currency = "STD"
	CurrencySVC Currency = "SVC"
	CurrencySYP Currency = "SYP"
	CurrencySZL Currency = "SZL"
	CurrencyTHB Currency = "THB"
	CurrencyTJS Currency = "TJS"
	CurrencyTMT Currency = "TMT"
	CurrencyTND Currency = "TND"
	CurrencyTOP Currency = "TOP"
	CurrencyTRL Currency = "TRL"
	CurrencyTRY Currency = "TRY"
	CurrencyTTD Currency = "TTD"
	CurrencyTWD Currency = "TWD"
	CurrencyTZS Currency = "TZS"
	CurrencyUAH Currency = "UAH"
	CurrencyUGX Currency = "UGX"
	CurrencyUSD Currency = "USD"
	CurrencyUYU Currency = "UYU"
	CurrencyUZS Currency = "UZS"
	CurrencyVEF Currency = "VEF"
	CurrencyVES Currency = "VES"
	CurrencyVND Currency = "VND"
	CurrencyVUV Currency = "VUV"
	CurrencyWST Currency = "WST"
	CurrencyXAF Currency = "XAF"
	CurrencyXAG Currency = "XAG"
	CurrencyXAU Currency = "XAU"
	CurrencyXCD Currency = "XCD"
	CurrencyXDR Currency = "XDR"
	CurrencyXOF Currency = "XOF"
	CurrencyXPF Currency = "XPF"
	CurrencyYER Currency = "YER"
	CurrencyZAR Currency = "ZAR"
	CurrencyZMW Currency = "ZMW"
	CurrencyZWD Currency = "ZWD"
	CurrencyZWL Currency = "ZWL"
)

func AllCurrency() []Currency {
	return []Currency{
		CurrencyAED,
		CurrencyAFN,
		CurrencyALL,
		CurrencyAMD,
		CurrencyANG,
		CurrencyAOA,
		CurrencyARS,
		CurrencyAUD,
		CurrencyAWG,
		CurrencyAZN,
		CurrencyBAM,
		CurrencyBBD,
		CurrencyBDT,
		CurrencyBGN,
		CurrencyBHD,
		CurrencyBIF,
		CurrencyBMD,
		CurrencyBND,
		CurrencyBOB,
		CurrencyBRL,
		CurrencyBSD,
		CurrencyBTN,
		CurrencyBWP,
		CurrencyBYN,
		CurrencyBYR,
		CurrencyBZD,
		CurrencyCAD,
		CurrencyCDF,
		CurrencyCHF,
		CurrencyCLF,
		CurrencyCLP,
		CurrencyCNY,
		CurrencyCOP,
		CurrencyCRC,
		CurrencyCUC,
		CurrencyCUP,
		CurrencyCVE,
		CurrencyCZK,
		CurrencyDJF,
		CurrencyDKK,
		CurrencyDOP,
		CurrencyDZD,
		CurrencyEEK,
		CurrencyEGP,
		CurrencyERN,
		CurrencyETB,
		CurrencyEUR,
		CurrencyFJD,
		CurrencyFKP,
		CurrencyGBP,
		CurrencyGEL,
		CurrencyGGP,
		CurrencyGHC,
		CurrencyGHS,
		CurrencyGIP,
		CurrencyGMD,
		CurrencyGNF,
		CurrencyGTQ,
		CurrencyGYD,
		CurrencyHKD,
		CurrencyHNL,
		CurrencyHRK,
		CurrencyHTG,
		CurrencyHUF,
		CurrencyIDR,
		CurrencyILS,
		CurrencyIMP,
		CurrencyINR,
		CurrencyIQD,
		CurrencyIRR,
		CurrencyISK,
		CurrencyJEP,
		CurrencyJMD,
		CurrencyJOD,
		CurrencyJPY,
		CurrencyKES,
		CurrencyKGS,
		CurrencyKHR,
		CurrencyKMF,
		CurrencyKPW,
		CurrencyKRW,
		CurrencyKWD,
		CurrencyKYD,
		CurrencyKZT,
		CurrencyLAK,
		CurrencyLBP,
		CurrencyLKR,
		CurrencyLRD,
		CurrencyLSL,
		CurrencyLTL,
		CurrencyLVL,
		CurrencyLYD,
		CurrencyMAD,
		CurrencyMDL,
		CurrencyMGA,
		CurrencyMKD,
		CurrencyMMK,
		CurrencyMNT,
		CurrencyMOP,
		CurrencyMUR,
		CurrencyMVR,
		CurrencyMWK,
		CurrencyMXN,
		CurrencyMYR,
		CurrencyMZN,
		CurrencyNAD,
		CurrencyNGN,
		CurrencyNIO,
		CurrencyNOK,
		CurrencyNPR,
		CurrencyNZD,
		CurrencyOMR,
		CurrencyPAB,
		CurrencyPEN,
		CurrencyPGK,
		CurrencyPHP,
		CurrencyPKR,
		CurrencyPLN,
		CurrencyPYG,
		CurrencyQAR,
		CurrencyRON,
		CurrencyRSD,
		CurrencyRUB,
		CurrencyRUR,
		CurrencyRWF,
		CurrencySAR,
		CurrencySBD,
		CurrencySCR,
		CurrencySDG,
		CurrencySEK,
		CurrencySGD,
		CurrencySHP,
		CurrencySKK,
		CurrencySLL,
		CurrencySOS,
		CurrencySRD,
		CurrencySSP,
		CurrencySTD,
		CurrencySVC,
		CurrencySYP,
		CurrencySZL,
		CurrencyTHB,
		CurrencyTJS,
		CurrencyTMT,
		CurrencyTND,
		CurrencyTOP,
		CurrencyTRL,
		CurrencyTRY,
		CurrencyTTD,
		CurrencyTWD,
		CurrencyTZS,
		CurrencyUAH,
		CurrencyUGX,
		CurrencyUSD,
		CurrencyUYU,
		CurrencyUZS,
		CurrencyVEF,
		CurrencyVES,
		CurrencyVND,
		CurrencyVUV,
		CurrencyWST,
		CurrencyXAF,
		CurrencyXAG,
		CurrencyXAU,
		CurrencyXCD,
		CurrencyXDR,
		CurrencyXOF,
		CurrencyXPF,
		CurrencyYER,
		CurrencyZAR,
		CurrencyZMW,
		CurrencyZWD,
		CurrencyZWL,
	}
}

func (e Currency) IsValid() error {
	switch e {
	case CurrencyAED, CurrencyAFN, CurrencyALL, CurrencyAMD, CurrencyANG, CurrencyAOA, CurrencyARS, CurrencyAUD, CurrencyAWG, CurrencyAZN, CurrencyBAM, CurrencyBBD, CurrencyBDT, CurrencyBGN, CurrencyBHD, CurrencyBIF, CurrencyBMD, CurrencyBND, CurrencyBOB, CurrencyBRL, CurrencyBSD, CurrencyBTN, CurrencyBWP, CurrencyBYN, CurrencyBYR, CurrencyBZD, CurrencyCAD, CurrencyCDF, CurrencyCHF, CurrencyCLF, CurrencyCLP, CurrencyCNY, CurrencyCOP, CurrencyCRC, CurrencyCUC, CurrencyCUP, CurrencyCVE, CurrencyCZK, CurrencyDJF, CurrencyDKK, CurrencyDOP, CurrencyDZD, CurrencyEEK, CurrencyEGP, CurrencyERN, CurrencyETB, CurrencyEUR, CurrencyFJD, CurrencyFKP, CurrencyGBP, CurrencyGEL, CurrencyGGP, CurrencyGHC, CurrencyGHS, CurrencyGIP, CurrencyGMD, CurrencyGNF, CurrencyGTQ, CurrencyGYD, CurrencyHKD, CurrencyHNL, CurrencyHRK, CurrencyHTG, CurrencyHUF, CurrencyIDR, CurrencyILS, CurrencyIMP, CurrencyINR, CurrencyIQD, CurrencyIRR, CurrencyISK, CurrencyJEP, CurrencyJMD, CurrencyJOD, CurrencyJPY, CurrencyKES, CurrencyKGS, CurrencyKHR, CurrencyKMF, CurrencyKPW, CurrencyKRW, CurrencyKWD, CurrencyKYD, CurrencyKZT, CurrencyLAK, CurrencyLBP, CurrencyLKR, CurrencyLRD, CurrencyLSL, CurrencyLTL, CurrencyLVL, CurrencyLYD, CurrencyMAD, CurrencyMDL, CurrencyMGA, CurrencyMKD, CurrencyMMK, CurrencyMNT, CurrencyMOP, CurrencyMUR, CurrencyMVR, CurrencyMWK, CurrencyMXN, CurrencyMYR, CurrencyMZN, CurrencyNAD, CurrencyNGN, CurrencyNIO, CurrencyNOK, CurrencyNPR, CurrencyNZD, CurrencyOMR, CurrencyPAB, CurrencyPEN, CurrencyPGK, CurrencyPHP, CurrencyPKR, CurrencyPLN, CurrencyPYG, CurrencyQAR, CurrencyRON, CurrencyRSD, CurrencyRUB, CurrencyRUR, CurrencyRWF, CurrencySAR, CurrencySBD, CurrencySCR, CurrencySDG, CurrencySEK, CurrencySGD, CurrencySHP, CurrencySKK, CurrencySLL, CurrencySOS, CurrencySRD, CurrencySSP, CurrencySTD, CurrencySVC, CurrencySYP, CurrencySZL, CurrencyTHB, CurrencyTJS, CurrencyTMT, CurrencyTND, CurrencyTOP, CurrencyTRL, CurrencyTRY, CurrencyTTD, CurrencyTWD, CurrencyTZS, CurrencyUAH, CurrencyUGX, CurrencyUSD, CurrencyUYU, CurrencyUZS, CurrencyVEF, CurrencyVES, CurrencyVND, CurrencyVUV, CurrencyWST, CurrencyXAF, CurrencyXAG, CurrencyXAU, CurrencyXCD, CurrencyXDR, CurrencyXOF, CurrencyXPF, CurrencyYER, CurrencyZAR, CurrencyZMW, CurrencyZWD, CurrencyZWL:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e Currency) String() string {
	return string(e)
}

func (e Currency) Ordinal() int {
	switch e {
	case CurrencyAED:
		return 0
	case CurrencyAFN:
		return 1
	case CurrencyALL:
		return 2
	case CurrencyAMD:
		return 3
	case CurrencyANG:
		return 4
	case CurrencyAOA:
		return 5
	case CurrencyARS:
		return 6
	case CurrencyAUD:
		return 7
	case CurrencyAWG:
		return 8
	case CurrencyAZN:
		return 9
	case CurrencyBAM:
		return 10
	case CurrencyBBD:
		return 11
	case CurrencyBDT:
		return 12
	case CurrencyBGN:
		return 13
	case CurrencyBHD:
		return 14
	case CurrencyBIF:
		return 15
	case CurrencyBMD:
		return 16
	case CurrencyBND:
		return 17
	case CurrencyBOB:
		return 18
	case CurrencyBRL:
		return 19
	case CurrencyBSD:
		return 20
	case CurrencyBTN:
		return 21
	case CurrencyBWP:
		return 22
	case CurrencyBYN:
		return 23
	case CurrencyBYR:
		return 24
	case CurrencyBZD:
		return 25
	case CurrencyCAD:
		return 26
	case CurrencyCDF:
		return 27
	case CurrencyCHF:
		return 28
	case CurrencyCLF:
		return 29
	case CurrencyCLP:
		return 30
	case CurrencyCNY:
		return 31
	case CurrencyCOP:
		return 32
	case CurrencyCRC:
		return 33
	case CurrencyCUC:
		return 34
	case CurrencyCUP:
		return 35
	case CurrencyCVE:
		return 36
	case CurrencyCZK:
		return 37
	case CurrencyDJF:
		return 38
	case CurrencyDKK:
		return 39
	case CurrencyDOP:
		return 40
	case CurrencyDZD:
		return 41
	case CurrencyEEK:
		return 42
	case CurrencyEGP:
		return 43
	case CurrencyERN:
		return 44
	case CurrencyETB:
		return 45
	case CurrencyEUR:
		return 46
	case CurrencyFJD:
		return 47
	case CurrencyFKP:
		return 48
	case CurrencyGBP:
		return 49
	case CurrencyGEL:
		return 50
	case CurrencyGGP:
		return 51
	case CurrencyGHC:
		return 52
	case CurrencyGHS:
		return 53
	case CurrencyGIP:
		return 54
	case CurrencyGMD:
		return 55
	case CurrencyGNF:
		return 56
	case CurrencyGTQ:
		return 57
	case CurrencyGYD:
		return 58
	case CurrencyHKD:
		return 59
	case CurrencyHNL:
		return 60
	case CurrencyHRK:
		return 61
	case CurrencyHTG:
		return 62
	case CurrencyHUF:
		return 63
	case CurrencyIDR:
		return 64
	case CurrencyILS:
		return 65
	case CurrencyIMP:
		return 66
	case CurrencyINR:
		return 67
	case CurrencyIQD:
		return 68
	case CurrencyIRR:
		return 69
	case CurrencyISK:
		return 70
	case CurrencyJEP:
		return 71
	case CurrencyJMD:
		return 72
	case CurrencyJOD:
		return 73
	case CurrencyJPY:
		return 74
	case CurrencyKES:
		return 75
	case CurrencyKGS:
		return 76
	case CurrencyKHR:
		return 77
	case CurrencyKMF:
		return 78
	case CurrencyKPW:
		return 79
	case CurrencyKRW:
		return 80
	case CurrencyKWD:
		return 81
	case CurrencyKYD:
		return 82
	case CurrencyKZT:
		return 83
	case CurrencyLAK:
		return 84
	case CurrencyLBP:
		return 85
	case CurrencyLKR:
		return 86
	case CurrencyLRD:
		return 87
	case CurrencyLSL:
		return 88
	case CurrencyLTL:
		return 89
	case CurrencyLVL:
		return 90
	case CurrencyLYD:
		return 91
	case CurrencyMAD:
		return 92
	case CurrencyMDL:
		return 93
	case CurrencyMGA:
		return 94
	case CurrencyMKD:
		return 95
	case CurrencyMMK:
		return 96
	case CurrencyMNT:
		return 97
	case CurrencyMOP:
		return 98
	case CurrencyMUR:
		return 99
	case CurrencyMVR:
		return 100
	case CurrencyMWK:
		return 101
	case CurrencyMXN:
		return 102
	case CurrencyMYR:
		return 103
	case CurrencyMZN:
		return 104
	case CurrencyNAD:
		return 105
	case CurrencyNGN:
		return 106
	case CurrencyNIO:
		return 107
	case CurrencyNOK:
		return 108
	case CurrencyNPR:
		return 109
	case CurrencyNZD:
		return 110
	case CurrencyOMR:
		return 111
	case CurrencyPAB:
		return 112
	case CurrencyPEN:
		return 113
	case CurrencyPGK:
		return 114
	case CurrencyPHP:
		return 115
	case CurrencyPKR:
		return 116
	case CurrencyPLN:
		return 117
	case CurrencyPYG:
		return 118
	case CurrencyQAR:
		return 119
	case CurrencyRON:
		return 120
	case CurrencyRSD:
		return 121
	case CurrencyRUB:
		return 122
	case CurrencyRUR:
		return 123
	case CurrencyRWF:
		return 124
	case CurrencySAR:
		return 125
	case CurrencySBD:
		return 126
	case CurrencySCR:
		return 127
	case CurrencySDG:
		return 128
	case CurrencySEK:
		return 129
	case CurrencySGD:
		return 130
	case CurrencySHP:
		return 131
	case CurrencySKK:
		return 132
	case CurrencySLL:
		return 133
	case CurrencySOS:
		return 134
	case CurrencySRD:
		return 135
	case CurrencySSP:
		return 136
	case CurrencySTD:
		return 137
	case CurrencySVC:
		return 138
	case CurrencySYP:
		return 139
	case CurrencySZL:
		return 140
	case CurrencyTHB:
		return 141
	case CurrencyTJS:
		return 142
	case CurrencyTMT:
		return 143
	case CurrencyTND:
		return 144
	case CurrencyTOP:
		return 145
	case CurrencyTRL:
		return 146
	case CurrencyTRY:
		return 147
	case CurrencyTTD:
		return 148
	case CurrencyTWD:
		return 149
	case CurrencyTZS:
		return 150
	case CurrencyUAH:
		return 151
	case CurrencyUGX:
		return 152
	case CurrencyUSD:
		return 153
	case CurrencyUYU:
		return 154
	case CurrencyUZS:
		return 155
	case CurrencyVEF:
		return 156
	case CurrencyVES:
		return 157
	case CurrencyVND:
		return 158
	case CurrencyVUV:
		return 159
	case CurrencyWST:
		return 160
	case CurrencyXAF:
		return 161
	case CurrencyXAG:
		return 162
	case CurrencyXAU:
		return 163
	case CurrencyXCD:
		return 164
	case CurrencyXDR:
		return 165
	case CurrencyXOF:
		return 166
	case CurrencyXPF:
		return 167
	case CurrencyYER:
		return 168
	case CurrencyZAR:
		return 169
	case CurrencyZMW:
		return 170
	case CurrencyZWD:
		return 171
	case CurrencyZWL:
		return 172

	default:
		panic(errors.New("enum is not valid"))
	}
}

type ComplianceStatus string

// Enum values for ComplianceStatus
const (
	ComplianceStatusCreated  ComplianceStatus = "created"
	ComplianceStatusRunning  ComplianceStatus = "running"
	ComplianceStatusFinished ComplianceStatus = "finished"
	ComplianceStatusFailed   ComplianceStatus = "failed"
	ComplianceStatusRemoved  ComplianceStatus = "removed"
)

func AllComplianceStatus() []ComplianceStatus {
	return []ComplianceStatus{
		ComplianceStatusCreated,
		ComplianceStatusRunning,
		ComplianceStatusFinished,
		ComplianceStatusFailed,
		ComplianceStatusRemoved,
	}
}

func (e ComplianceStatus) IsValid() error {
	switch e {
	case ComplianceStatusCreated, ComplianceStatusRunning, ComplianceStatusFinished, ComplianceStatusFailed, ComplianceStatusRemoved:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ComplianceStatus) String() string {
	return string(e)
}

func (e ComplianceStatus) Ordinal() int {
	switch e {
	case ComplianceStatusCreated:
		return 0
	case ComplianceStatusRunning:
		return 1
	case ComplianceStatusFinished:
		return 2
	case ComplianceStatusFailed:
		return 3
	case ComplianceStatusRemoved:
		return 4

	default:
		panic(errors.New("enum is not valid"))
	}
}

type ComplianceType string

// Enum values for ComplianceType
const (
	ComplianceTypeDaily ComplianceType = "daily"
	ComplianceTypeAdhoc ComplianceType = "adhoc"
)

func AllComplianceType() []ComplianceType {
	return []ComplianceType{
		ComplianceTypeDaily,
		ComplianceTypeAdhoc,
	}
}

func (e ComplianceType) IsValid() error {
	switch e {
	case ComplianceTypeDaily, ComplianceTypeAdhoc:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ComplianceType) String() string {
	return string(e)
}

func (e ComplianceType) Ordinal() int {
	switch e {
	case ComplianceTypeDaily:
		return 0
	case ComplianceTypeAdhoc:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type CustomerEventType string

// Enum values for CustomerEventType
const (
	CustomerEventTypeACCOUNT_CREATED          CustomerEventType = "ACCOUNT_CREATED"
	CustomerEventTypePASSWORD_RESET_LINK_SENT CustomerEventType = "PASSWORD_RESET_LINK_SENT"
	CustomerEventTypePASSWORD_RESET           CustomerEventType = "PASSWORD_RESET"
	CustomerEventTypePASSWORD_CHANGED         CustomerEventType = "PASSWORD_CHANGED"
	CustomerEventTypeEMAIL_CHANGED_REQUEST    CustomerEventType = "EMAIL_CHANGED_REQUEST"
	CustomerEventTypeEMAIL_CHANGED            CustomerEventType = "EMAIL_CHANGED"
	CustomerEventTypePLACED_ORDER             CustomerEventType = "PLACED_ORDER"
	CustomerEventTypeNOTE_ADDED_TO_ORDER      CustomerEventType = "NOTE_ADDED_TO_ORDER"
	CustomerEventTypeDIGITAL_LINK_DOWNLOADED  CustomerEventType = "DIGITAL_LINK_DOWNLOADED"
	CustomerEventTypeCUSTOMER_DELETED         CustomerEventType = "CUSTOMER_DELETED"
	CustomerEventTypeEMAIL_ASSIGNED           CustomerEventType = "EMAIL_ASSIGNED"
	CustomerEventTypeNAME_ASSIGNED            CustomerEventType = "NAME_ASSIGNED"
	CustomerEventTypeNOTE_ADDED               CustomerEventType = "NOTE_ADDED"
	CustomerEventTypeACCOUNT_ACTIVATED        CustomerEventType = "ACCOUNT_ACTIVATED"
	CustomerEventTypeACCOUNT_DEACTIVATED      CustomerEventType = "ACCOUNT_DEACTIVATED"
)

func AllCustomerEventType() []CustomerEventType {
	return []CustomerEventType{
		CustomerEventTypeACCOUNT_CREATED,
		CustomerEventTypePASSWORD_RESET_LINK_SENT,
		CustomerEventTypePASSWORD_RESET,
		CustomerEventTypePASSWORD_CHANGED,
		CustomerEventTypeEMAIL_CHANGED_REQUEST,
		CustomerEventTypeEMAIL_CHANGED,
		CustomerEventTypePLACED_ORDER,
		CustomerEventTypeNOTE_ADDED_TO_ORDER,
		CustomerEventTypeDIGITAL_LINK_DOWNLOADED,
		CustomerEventTypeCUSTOMER_DELETED,
		CustomerEventTypeEMAIL_ASSIGNED,
		CustomerEventTypeNAME_ASSIGNED,
		CustomerEventTypeNOTE_ADDED,
		CustomerEventTypeACCOUNT_ACTIVATED,
		CustomerEventTypeACCOUNT_DEACTIVATED,
	}
}

func (e CustomerEventType) IsValid() error {
	switch e {
	case CustomerEventTypeACCOUNT_CREATED, CustomerEventTypePASSWORD_RESET_LINK_SENT, CustomerEventTypePASSWORD_RESET, CustomerEventTypePASSWORD_CHANGED, CustomerEventTypeEMAIL_CHANGED_REQUEST, CustomerEventTypeEMAIL_CHANGED, CustomerEventTypePLACED_ORDER, CustomerEventTypeNOTE_ADDED_TO_ORDER, CustomerEventTypeDIGITAL_LINK_DOWNLOADED, CustomerEventTypeCUSTOMER_DELETED, CustomerEventTypeEMAIL_ASSIGNED, CustomerEventTypeNAME_ASSIGNED, CustomerEventTypeNOTE_ADDED, CustomerEventTypeACCOUNT_ACTIVATED, CustomerEventTypeACCOUNT_DEACTIVATED:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e CustomerEventType) String() string {
	return string(e)
}

func (e CustomerEventType) Ordinal() int {
	switch e {
	case CustomerEventTypeACCOUNT_CREATED:
		return 0
	case CustomerEventTypePASSWORD_RESET_LINK_SENT:
		return 1
	case CustomerEventTypePASSWORD_RESET:
		return 2
	case CustomerEventTypePASSWORD_CHANGED:
		return 3
	case CustomerEventTypeEMAIL_CHANGED_REQUEST:
		return 4
	case CustomerEventTypeEMAIL_CHANGED:
		return 5
	case CustomerEventTypePLACED_ORDER:
		return 6
	case CustomerEventTypeNOTE_ADDED_TO_ORDER:
		return 7
	case CustomerEventTypeDIGITAL_LINK_DOWNLOADED:
		return 8
	case CustomerEventTypeCUSTOMER_DELETED:
		return 9
	case CustomerEventTypeEMAIL_ASSIGNED:
		return 10
	case CustomerEventTypeNAME_ASSIGNED:
		return 11
	case CustomerEventTypeNOTE_ADDED:
		return 12
	case CustomerEventTypeACCOUNT_ACTIVATED:
		return 13
	case CustomerEventTypeACCOUNT_DEACTIVATED:
		return 14

	default:
		panic(errors.New("enum is not valid"))
	}
}

type ContentType string

// Enum values for ContentType
const (
	ContentTypeFile ContentType = "file"
)

func AllContentType() []ContentType {
	return []ContentType{
		ContentTypeFile,
	}
}

func (e ContentType) IsValid() error {
	switch e {
	case ContentTypeFile:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ContentType) String() string {
	return string(e)
}

func (e ContentType) Ordinal() int {
	switch e {
	case ContentTypeFile:
		return 0

	default:
		panic(errors.New("enum is not valid"))
	}
}

type ExportEventType string

// Enum values for ExportEventType
const (
	ExportEventTypeExportPending        ExportEventType = "export_pending"
	ExportEventTypeExportSuccess        ExportEventType = "export_success"
	ExportEventTypeExportFailed         ExportEventType = "export_failed"
	ExportEventTypeExportDeleted        ExportEventType = "export_deleted"
	ExportEventTypeExportedFileSent     ExportEventType = "exported_file_sent"
	ExportEventTypeExportFailedInfoSent ExportEventType = "export_failed_info_sent"
)

func AllExportEventType() []ExportEventType {
	return []ExportEventType{
		ExportEventTypeExportPending,
		ExportEventTypeExportSuccess,
		ExportEventTypeExportFailed,
		ExportEventTypeExportDeleted,
		ExportEventTypeExportedFileSent,
		ExportEventTypeExportFailedInfoSent,
	}
}

func (e ExportEventType) IsValid() error {
	switch e {
	case ExportEventTypeExportPending, ExportEventTypeExportSuccess, ExportEventTypeExportFailed, ExportEventTypeExportDeleted, ExportEventTypeExportedFileSent, ExportEventTypeExportFailedInfoSent:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ExportEventType) String() string {
	return string(e)
}

func (e ExportEventType) Ordinal() int {
	switch e {
	case ExportEventTypeExportPending:
		return 0
	case ExportEventTypeExportSuccess:
		return 1
	case ExportEventTypeExportFailed:
		return 2
	case ExportEventTypeExportDeleted:
		return 3
	case ExportEventTypeExportedFileSent:
		return 4
	case ExportEventTypeExportFailedInfoSent:
		return 5

	default:
		panic(errors.New("enum is not valid"))
	}
}

type FulfillmentStatus string

// Enum values for FulfillmentStatus
const (
	FulfillmentStatusFulfilled           FulfillmentStatus = "fulfilled"
	FulfillmentStatusRefunded            FulfillmentStatus = "refunded"
	FulfillmentStatusReturned            FulfillmentStatus = "returned"
	FulfillmentStatusRefundedAndReturned FulfillmentStatus = "refunded_and_returned"
	FulfillmentStatusReplaced            FulfillmentStatus = "replaced"
	FulfillmentStatusCanceled            FulfillmentStatus = "canceled"
	FulfillmentStatusWaitingForApproval  FulfillmentStatus = "waiting_for_approval"
)

func AllFulfillmentStatus() []FulfillmentStatus {
	return []FulfillmentStatus{
		FulfillmentStatusFulfilled,
		FulfillmentStatusRefunded,
		FulfillmentStatusReturned,
		FulfillmentStatusRefundedAndReturned,
		FulfillmentStatusReplaced,
		FulfillmentStatusCanceled,
		FulfillmentStatusWaitingForApproval,
	}
}

func (e FulfillmentStatus) IsValid() error {
	switch e {
	case FulfillmentStatusFulfilled, FulfillmentStatusRefunded, FulfillmentStatusReturned, FulfillmentStatusRefundedAndReturned, FulfillmentStatusReplaced, FulfillmentStatusCanceled, FulfillmentStatusWaitingForApproval:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e FulfillmentStatus) String() string {
	return string(e)
}

func (e FulfillmentStatus) Ordinal() int {
	switch e {
	case FulfillmentStatusFulfilled:
		return 0
	case FulfillmentStatusRefunded:
		return 1
	case FulfillmentStatusReturned:
		return 2
	case FulfillmentStatusRefundedAndReturned:
		return 3
	case FulfillmentStatusReplaced:
		return 4
	case FulfillmentStatusCanceled:
		return 5
	case FulfillmentStatusWaitingForApproval:
		return 6

	default:
		panic(errors.New("enum is not valid"))
	}
}

type GiftcardEventType string

// Enum values for GiftcardEventType
const (
	GiftcardEventTypeIssued            GiftcardEventType = "issued"
	GiftcardEventTypeBought            GiftcardEventType = "bought"
	GiftcardEventTypeUpdated           GiftcardEventType = "updated"
	GiftcardEventTypeActivated         GiftcardEventType = "activated"
	GiftcardEventTypeDeactivated       GiftcardEventType = "deactivated"
	GiftcardEventTypeBalanceReset      GiftcardEventType = "balance_reset"
	GiftcardEventTypeExpiryDateUpdated GiftcardEventType = "expiry_date_updated"
	GiftcardEventTypeTagUpdated        GiftcardEventType = "tag_updated"
	GiftcardEventTypeSentToCustomer    GiftcardEventType = "sent_to_customer"
	GiftcardEventTypeResent            GiftcardEventType = "resent"
	GiftcardEventTypeNoteAdded         GiftcardEventType = "note_added"
	GiftcardEventTypeUsedInOrder       GiftcardEventType = "used_in_order"
)

func AllGiftcardEventType() []GiftcardEventType {
	return []GiftcardEventType{
		GiftcardEventTypeIssued,
		GiftcardEventTypeBought,
		GiftcardEventTypeUpdated,
		GiftcardEventTypeActivated,
		GiftcardEventTypeDeactivated,
		GiftcardEventTypeBalanceReset,
		GiftcardEventTypeExpiryDateUpdated,
		GiftcardEventTypeTagUpdated,
		GiftcardEventTypeSentToCustomer,
		GiftcardEventTypeResent,
		GiftcardEventTypeNoteAdded,
		GiftcardEventTypeUsedInOrder,
	}
}

func (e GiftcardEventType) IsValid() error {
	switch e {
	case GiftcardEventTypeIssued, GiftcardEventTypeBought, GiftcardEventTypeUpdated, GiftcardEventTypeActivated, GiftcardEventTypeDeactivated, GiftcardEventTypeBalanceReset, GiftcardEventTypeExpiryDateUpdated, GiftcardEventTypeTagUpdated, GiftcardEventTypeSentToCustomer, GiftcardEventTypeResent, GiftcardEventTypeNoteAdded, GiftcardEventTypeUsedInOrder:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e GiftcardEventType) String() string {
	return string(e)
}

func (e GiftcardEventType) Ordinal() int {
	switch e {
	case GiftcardEventTypeIssued:
		return 0
	case GiftcardEventTypeBought:
		return 1
	case GiftcardEventTypeUpdated:
		return 2
	case GiftcardEventTypeActivated:
		return 3
	case GiftcardEventTypeDeactivated:
		return 4
	case GiftcardEventTypeBalanceReset:
		return 5
	case GiftcardEventTypeExpiryDateUpdated:
		return 6
	case GiftcardEventTypeTagUpdated:
		return 7
	case GiftcardEventTypeSentToCustomer:
		return 8
	case GiftcardEventTypeResent:
		return 9
	case GiftcardEventTypeNoteAdded:
		return 10
	case GiftcardEventTypeUsedInOrder:
		return 11

	default:
		panic(errors.New("enum is not valid"))
	}
}

type InvoiceEventType string

// Enum values for InvoiceEventType
const (
	InvoiceEventTypeRequested         InvoiceEventType = "requested"
	InvoiceEventTypeRequestedDeletion InvoiceEventType = "requested_deletion"
	InvoiceEventTypeCreated           InvoiceEventType = "created"
	InvoiceEventTypeDeleted           InvoiceEventType = "deleted"
	InvoiceEventTypeSent              InvoiceEventType = "sent"
)

func AllInvoiceEventType() []InvoiceEventType {
	return []InvoiceEventType{
		InvoiceEventTypeRequested,
		InvoiceEventTypeRequestedDeletion,
		InvoiceEventTypeCreated,
		InvoiceEventTypeDeleted,
		InvoiceEventTypeSent,
	}
}

func (e InvoiceEventType) IsValid() error {
	switch e {
	case InvoiceEventTypeRequested, InvoiceEventTypeRequestedDeletion, InvoiceEventTypeCreated, InvoiceEventTypeDeleted, InvoiceEventTypeSent:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e InvoiceEventType) String() string {
	return string(e)
}

func (e InvoiceEventType) Ordinal() int {
	switch e {
	case InvoiceEventTypeRequested:
		return 0
	case InvoiceEventTypeRequestedDeletion:
		return 1
	case InvoiceEventTypeCreated:
		return 2
	case InvoiceEventTypeDeleted:
		return 3
	case InvoiceEventTypeSent:
		return 4

	default:
		panic(errors.New("enum is not valid"))
	}
}

type JobType string

// Enum values for JobType
const (
	JobTypeDataRetention                JobType = "data_retention"
	JobTypeMessageExport                JobType = "message_export"
	JobTypeElasticsearchPostIndexing    JobType = "elasticsearch_post_indexing"
	JobTypeElasticsearchPostAggregation JobType = "elasticsearch_post_aggregation"
	JobTypeBlevePostIndexing            JobType = "bleve_post_indexing"
	JobTypeLdapSync                     JobType = "ldap_sync"
	JobTypeMigrations                   JobType = "migrations"
	JobTypePlugins                      JobType = "plugins"
	JobTypeExpiryNotify                 JobType = "expiry_notify"
	JobTypeProductNotices               JobType = "product_notices"
	JobTypeActiveUsers                  JobType = "active_users"
	JobTypeImportProcess                JobType = "import_process"
	JobTypeImportDelete                 JobType = "import_delete"
	JobTypeExportProcess                JobType = "export_process"
	JobTypeExportDelete                 JobType = "export_delete"
	JobTypeCloud                        JobType = "cloud"
	JobTypeResendInvitationEmail        JobType = "resend_invitation_email"
)

func AllJobType() []JobType {
	return []JobType{
		JobTypeDataRetention,
		JobTypeMessageExport,
		JobTypeElasticsearchPostIndexing,
		JobTypeElasticsearchPostAggregation,
		JobTypeBlevePostIndexing,
		JobTypeLdapSync,
		JobTypeMigrations,
		JobTypePlugins,
		JobTypeExpiryNotify,
		JobTypeProductNotices,
		JobTypeActiveUsers,
		JobTypeImportProcess,
		JobTypeImportDelete,
		JobTypeExportProcess,
		JobTypeExportDelete,
		JobTypeCloud,
		JobTypeResendInvitationEmail,
	}
}

func (e JobType) IsValid() error {
	switch e {
	case JobTypeDataRetention, JobTypeMessageExport, JobTypeElasticsearchPostIndexing, JobTypeElasticsearchPostAggregation, JobTypeBlevePostIndexing, JobTypeLdapSync, JobTypeMigrations, JobTypePlugins, JobTypeExpiryNotify, JobTypeProductNotices, JobTypeActiveUsers, JobTypeImportProcess, JobTypeImportDelete, JobTypeExportProcess, JobTypeExportDelete, JobTypeCloud, JobTypeResendInvitationEmail:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e JobType) String() string {
	return string(e)
}

func (e JobType) Ordinal() int {
	switch e {
	case JobTypeDataRetention:
		return 0
	case JobTypeMessageExport:
		return 1
	case JobTypeElasticsearchPostIndexing:
		return 2
	case JobTypeElasticsearchPostAggregation:
		return 3
	case JobTypeBlevePostIndexing:
		return 4
	case JobTypeLdapSync:
		return 5
	case JobTypeMigrations:
		return 6
	case JobTypePlugins:
		return 7
	case JobTypeExpiryNotify:
		return 8
	case JobTypeProductNotices:
		return 9
	case JobTypeActiveUsers:
		return 10
	case JobTypeImportProcess:
		return 11
	case JobTypeImportDelete:
		return 12
	case JobTypeExportProcess:
		return 13
	case JobTypeExportDelete:
		return 14
	case JobTypeCloud:
		return 15
	case JobTypeResendInvitationEmail:
		return 16

	default:
		panic(errors.New("enum is not valid"))
	}
}

type JobStatus string

// Enum values for JobStatus
const (
	JobStatusPending         JobStatus = "pending"
	JobStatusInProgress      JobStatus = "in_progress"
	JobStatusSuccess         JobStatus = "success"
	JobStatusError           JobStatus = "error"
	JobStatusCancelRequested JobStatus = "cancel_requested"
	JobStatusCanceled        JobStatus = "canceled"
	JobStatusWarning         JobStatus = "warning"
)

func AllJobStatus() []JobStatus {
	return []JobStatus{
		JobStatusPending,
		JobStatusInProgress,
		JobStatusSuccess,
		JobStatusError,
		JobStatusCancelRequested,
		JobStatusCanceled,
		JobStatusWarning,
	}
}

func (e JobStatus) IsValid() error {
	switch e {
	case JobStatusPending, JobStatusInProgress, JobStatusSuccess, JobStatusError, JobStatusCancelRequested, JobStatusCanceled, JobStatusWarning:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e JobStatus) String() string {
	return string(e)
}

func (e JobStatus) Ordinal() int {
	switch e {
	case JobStatusPending:
		return 0
	case JobStatusInProgress:
		return 1
	case JobStatusSuccess:
		return 2
	case JobStatusError:
		return 3
	case JobStatusCancelRequested:
		return 4
	case JobStatusCanceled:
		return 5
	case JobStatusWarning:
		return 6

	default:
		panic(errors.New("enum is not valid"))
	}
}

type OrderDiscountType string

// Enum values for OrderDiscountType
const (
	OrderDiscountTypeVoucher OrderDiscountType = "voucher"
	OrderDiscountTypeManual  OrderDiscountType = "manual"
)

func AllOrderDiscountType() []OrderDiscountType {
	return []OrderDiscountType{
		OrderDiscountTypeVoucher,
		OrderDiscountTypeManual,
	}
}

func (e OrderDiscountType) IsValid() error {
	switch e {
	case OrderDiscountTypeVoucher, OrderDiscountTypeManual:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e OrderDiscountType) String() string {
	return string(e)
}

func (e OrderDiscountType) Ordinal() int {
	switch e {
	case OrderDiscountTypeVoucher:
		return 0
	case OrderDiscountTypeManual:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type DiscountValueType string

// Enum values for DiscountValueType
const (
	DiscountValueTypeFixed      DiscountValueType = "fixed"
	DiscountValueTypePercentage DiscountValueType = "percentage"
)

func AllDiscountValueType() []DiscountValueType {
	return []DiscountValueType{
		DiscountValueTypeFixed,
		DiscountValueTypePercentage,
	}
}

func (e DiscountValueType) IsValid() error {
	switch e {
	case DiscountValueTypeFixed, DiscountValueTypePercentage:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e DiscountValueType) String() string {
	return string(e)
}

func (e DiscountValueType) Ordinal() int {
	switch e {
	case DiscountValueTypeFixed:
		return 0
	case DiscountValueTypePercentage:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type OrderEventType string

// Enum values for OrderEventType
const (
	OrderEventTypeConfirmed                         OrderEventType = "confirmed"
	OrderEventTypeDraftCreated                      OrderEventType = "draft_created"
	OrderEventTypeDraftCreatedFromReplace           OrderEventType = "draft_created_from_replace"
	OrderEventTypeAddedProducts                     OrderEventType = "added_products"
	OrderEventTypeRemovedProducts                   OrderEventType = "removed_products"
	OrderEventTypePlaced                            OrderEventType = "placed"
	OrderEventTypePlacedFromDraft                   OrderEventType = "placed_from_draft"
	OrderEventTypeOversoldItems                     OrderEventType = "oversold_items"
	OrderEventTypeCanceled                          OrderEventType = "canceled"
	OrderEventTypeOrderMarkedAsPaid                 OrderEventType = "order_marked_as_paid"
	OrderEventTypeOrderFullyPaid                    OrderEventType = "order_fully_paid"
	OrderEventTypeOrderReplacementCreated           OrderEventType = "order_replacement_created"
	OrderEventTypeOrderDiscountAdded                OrderEventType = "order_discount_added"
	OrderEventTypeOrderDiscountAutomaticallyUpdated OrderEventType = "order_discount_automatically_updated"
	OrderEventTypeOrderDiscountUpdated              OrderEventType = "order_discount_updated"
	OrderEventTypeOrderDiscountDeleted              OrderEventType = "order_discount_deleted"
	OrderEventTypeOrderLineDiscountUpdated          OrderEventType = "order_line_discount_updated"
	OrderEventTypeOrderLineDiscountRemoved          OrderEventType = "order_line_discount_removed"
	OrderEventTypeOrderLineProductDeleted           OrderEventType = "order_line_product_deleted"
	OrderEventTypeOrderLineVariantDeleted           OrderEventType = "order_line_variant_deleted"
	OrderEventTypeUpdatedAddress                    OrderEventType = "updated_address"
	OrderEventTypeEmailSent                         OrderEventType = "email_sent"
	OrderEventTypePaymentAuthorized                 OrderEventType = "payment_authorized"
	OrderEventTypePaymentCaptured                   OrderEventType = "payment_captured"
	OrderEventTypePaymentRefunded                   OrderEventType = "payment_refunded"
	OrderEventTypePaymentVoided                     OrderEventType = "payment_voided"
	OrderEventTypePaymentFailed                     OrderEventType = "payment_failed"
	OrderEventTypeExternalServiceNotification       OrderEventType = "external_service_notification"
	OrderEventTypeInvoiceRequested                  OrderEventType = "invoice_requested"
	OrderEventTypeInvoiceGenerated                  OrderEventType = "invoice_generated"
	OrderEventTypeInvoiceUpdated                    OrderEventType = "invoice_updated"
	OrderEventTypeInvoiceSent                       OrderEventType = "invoice_sent"
	OrderEventTypeFulfillmentCanceled               OrderEventType = "fulfillment_canceled"
	OrderEventTypeFulfillmentRestockedItems         OrderEventType = "fulfillment_restocked_items"
	OrderEventTypeFulfillmentFulfilledItems         OrderEventType = "fulfillment_fulfilled_items"
	OrderEventTypeFulfillmentRefunded               OrderEventType = "fulfillment_refunded"
	OrderEventTypeFulfillmentReturned               OrderEventType = "fulfillment_returned"
	OrderEventTypeFulfillmentReplaced               OrderEventType = "fulfillment_replaced"
	OrderEventTypeFulfillmentAwaitsApproval         OrderEventType = "fulfillment_awaits_approval"
	OrderEventTypeTrackingUpdated                   OrderEventType = "tracking_updated"
	OrderEventTypeNoteAdded                         OrderEventType = "note_added"
	OrderEventTypeOther                             OrderEventType = "other"
)

func AllOrderEventType() []OrderEventType {
	return []OrderEventType{
		OrderEventTypeConfirmed,
		OrderEventTypeDraftCreated,
		OrderEventTypeDraftCreatedFromReplace,
		OrderEventTypeAddedProducts,
		OrderEventTypeRemovedProducts,
		OrderEventTypePlaced,
		OrderEventTypePlacedFromDraft,
		OrderEventTypeOversoldItems,
		OrderEventTypeCanceled,
		OrderEventTypeOrderMarkedAsPaid,
		OrderEventTypeOrderFullyPaid,
		OrderEventTypeOrderReplacementCreated,
		OrderEventTypeOrderDiscountAdded,
		OrderEventTypeOrderDiscountAutomaticallyUpdated,
		OrderEventTypeOrderDiscountUpdated,
		OrderEventTypeOrderDiscountDeleted,
		OrderEventTypeOrderLineDiscountUpdated,
		OrderEventTypeOrderLineDiscountRemoved,
		OrderEventTypeOrderLineProductDeleted,
		OrderEventTypeOrderLineVariantDeleted,
		OrderEventTypeUpdatedAddress,
		OrderEventTypeEmailSent,
		OrderEventTypePaymentAuthorized,
		OrderEventTypePaymentCaptured,
		OrderEventTypePaymentRefunded,
		OrderEventTypePaymentVoided,
		OrderEventTypePaymentFailed,
		OrderEventTypeExternalServiceNotification,
		OrderEventTypeInvoiceRequested,
		OrderEventTypeInvoiceGenerated,
		OrderEventTypeInvoiceUpdated,
		OrderEventTypeInvoiceSent,
		OrderEventTypeFulfillmentCanceled,
		OrderEventTypeFulfillmentRestockedItems,
		OrderEventTypeFulfillmentFulfilledItems,
		OrderEventTypeFulfillmentRefunded,
		OrderEventTypeFulfillmentReturned,
		OrderEventTypeFulfillmentReplaced,
		OrderEventTypeFulfillmentAwaitsApproval,
		OrderEventTypeTrackingUpdated,
		OrderEventTypeNoteAdded,
		OrderEventTypeOther,
	}
}

func (e OrderEventType) IsValid() error {
	switch e {
	case OrderEventTypeConfirmed, OrderEventTypeDraftCreated, OrderEventTypeDraftCreatedFromReplace, OrderEventTypeAddedProducts, OrderEventTypeRemovedProducts, OrderEventTypePlaced, OrderEventTypePlacedFromDraft, OrderEventTypeOversoldItems, OrderEventTypeCanceled, OrderEventTypeOrderMarkedAsPaid, OrderEventTypeOrderFullyPaid, OrderEventTypeOrderReplacementCreated, OrderEventTypeOrderDiscountAdded, OrderEventTypeOrderDiscountAutomaticallyUpdated, OrderEventTypeOrderDiscountUpdated, OrderEventTypeOrderDiscountDeleted, OrderEventTypeOrderLineDiscountUpdated, OrderEventTypeOrderLineDiscountRemoved, OrderEventTypeOrderLineProductDeleted, OrderEventTypeOrderLineVariantDeleted, OrderEventTypeUpdatedAddress, OrderEventTypeEmailSent, OrderEventTypePaymentAuthorized, OrderEventTypePaymentCaptured, OrderEventTypePaymentRefunded, OrderEventTypePaymentVoided, OrderEventTypePaymentFailed, OrderEventTypeExternalServiceNotification, OrderEventTypeInvoiceRequested, OrderEventTypeInvoiceGenerated, OrderEventTypeInvoiceUpdated, OrderEventTypeInvoiceSent, OrderEventTypeFulfillmentCanceled, OrderEventTypeFulfillmentRestockedItems, OrderEventTypeFulfillmentFulfilledItems, OrderEventTypeFulfillmentRefunded, OrderEventTypeFulfillmentReturned, OrderEventTypeFulfillmentReplaced, OrderEventTypeFulfillmentAwaitsApproval, OrderEventTypeTrackingUpdated, OrderEventTypeNoteAdded, OrderEventTypeOther:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e OrderEventType) String() string {
	return string(e)
}

func (e OrderEventType) Ordinal() int {
	switch e {
	case OrderEventTypeConfirmed:
		return 0
	case OrderEventTypeDraftCreated:
		return 1
	case OrderEventTypeDraftCreatedFromReplace:
		return 2
	case OrderEventTypeAddedProducts:
		return 3
	case OrderEventTypeRemovedProducts:
		return 4
	case OrderEventTypePlaced:
		return 5
	case OrderEventTypePlacedFromDraft:
		return 6
	case OrderEventTypeOversoldItems:
		return 7
	case OrderEventTypeCanceled:
		return 8
	case OrderEventTypeOrderMarkedAsPaid:
		return 9
	case OrderEventTypeOrderFullyPaid:
		return 10
	case OrderEventTypeOrderReplacementCreated:
		return 11
	case OrderEventTypeOrderDiscountAdded:
		return 12
	case OrderEventTypeOrderDiscountAutomaticallyUpdated:
		return 13
	case OrderEventTypeOrderDiscountUpdated:
		return 14
	case OrderEventTypeOrderDiscountDeleted:
		return 15
	case OrderEventTypeOrderLineDiscountUpdated:
		return 16
	case OrderEventTypeOrderLineDiscountRemoved:
		return 17
	case OrderEventTypeOrderLineProductDeleted:
		return 18
	case OrderEventTypeOrderLineVariantDeleted:
		return 19
	case OrderEventTypeUpdatedAddress:
		return 20
	case OrderEventTypeEmailSent:
		return 21
	case OrderEventTypePaymentAuthorized:
		return 22
	case OrderEventTypePaymentCaptured:
		return 23
	case OrderEventTypePaymentRefunded:
		return 24
	case OrderEventTypePaymentVoided:
		return 25
	case OrderEventTypePaymentFailed:
		return 26
	case OrderEventTypeExternalServiceNotification:
		return 27
	case OrderEventTypeInvoiceRequested:
		return 28
	case OrderEventTypeInvoiceGenerated:
		return 29
	case OrderEventTypeInvoiceUpdated:
		return 30
	case OrderEventTypeInvoiceSent:
		return 31
	case OrderEventTypeFulfillmentCanceled:
		return 32
	case OrderEventTypeFulfillmentRestockedItems:
		return 33
	case OrderEventTypeFulfillmentFulfilledItems:
		return 34
	case OrderEventTypeFulfillmentRefunded:
		return 35
	case OrderEventTypeFulfillmentReturned:
		return 36
	case OrderEventTypeFulfillmentReplaced:
		return 37
	case OrderEventTypeFulfillmentAwaitsApproval:
		return 38
	case OrderEventTypeTrackingUpdated:
		return 39
	case OrderEventTypeNoteAdded:
		return 40
	case OrderEventTypeOther:
		return 41

	default:
		panic(errors.New("enum is not valid"))
	}
}

type OrderStatus string

// Enum values for OrderStatus
const (
	OrderStatusDraft              OrderStatus = "draft"
	OrderStatusUnconfirmed        OrderStatus = "unconfirmed"
	OrderStatusUnfulfilled        OrderStatus = "unfulfilled"
	OrderStatusPartiallyFulfilled OrderStatus = "partially_fulfilled"
	OrderStatusFulfilled          OrderStatus = "fulfilled"
	OrderStatusPartiallyReturned  OrderStatus = "partially_returned"
	OrderStatusReturned           OrderStatus = "returned"
	OrderStatusCanceled           OrderStatus = "canceled"
)

func AllOrderStatus() []OrderStatus {
	return []OrderStatus{
		OrderStatusDraft,
		OrderStatusUnconfirmed,
		OrderStatusUnfulfilled,
		OrderStatusPartiallyFulfilled,
		OrderStatusFulfilled,
		OrderStatusPartiallyReturned,
		OrderStatusReturned,
		OrderStatusCanceled,
	}
}

func (e OrderStatus) IsValid() error {
	switch e {
	case OrderStatusDraft, OrderStatusUnconfirmed, OrderStatusUnfulfilled, OrderStatusPartiallyFulfilled, OrderStatusFulfilled, OrderStatusPartiallyReturned, OrderStatusReturned, OrderStatusCanceled:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e OrderStatus) Ordinal() int {
	switch e {
	case OrderStatusDraft:
		return 0
	case OrderStatusUnconfirmed:
		return 1
	case OrderStatusUnfulfilled:
		return 2
	case OrderStatusPartiallyFulfilled:
		return 3
	case OrderStatusFulfilled:
		return 4
	case OrderStatusPartiallyReturned:
		return 5
	case OrderStatusReturned:
		return 6
	case OrderStatusCanceled:
		return 7

	default:
		panic(errors.New("enum is not valid"))
	}
}

type OrderOrigin string

// Enum values for OrderOrigin
const (
	OrderOriginCheckout OrderOrigin = "checkout"
	OrderOriginDraft    OrderOrigin = "draft"
	OrderOriginReissue  OrderOrigin = "reissue"
)

func AllOrderOrigin() []OrderOrigin {
	return []OrderOrigin{
		OrderOriginCheckout,
		OrderOriginDraft,
		OrderOriginReissue,
	}
}

func (e OrderOrigin) IsValid() error {
	switch e {
	case OrderOriginCheckout, OrderOriginDraft, OrderOriginReissue:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e OrderOrigin) String() string {
	return string(e)
}

func (e OrderOrigin) Ordinal() int {
	switch e {
	case OrderOriginCheckout:
		return 0
	case OrderOriginDraft:
		return 1
	case OrderOriginReissue:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

// NullOrderOrigin is a nullable OrderOrigin enum type. It supports SQL and JSON serialization.
type NullOrderOrigin struct {
	Val   OrderOrigin
	Valid bool
}

// NullOrderOriginFrom creates a new OrderOrigin that will never be blank.
func NullOrderOriginFrom(v OrderOrigin) NullOrderOrigin {
	return NewNullOrderOrigin(v, true)
}

// NullOrderOriginFromPtr creates a new NullOrderOrigin that be null if s is nil.
func NullOrderOriginFromPtr(v *OrderOrigin) NullOrderOrigin {
	if v == nil {
		return NewNullOrderOrigin("", false)
	}
	return NewNullOrderOrigin(*v, true)
}

// NewNullOrderOrigin creates a new NullOrderOrigin
func NewNullOrderOrigin(v OrderOrigin, valid bool) NullOrderOrigin {
	return NullOrderOrigin{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullOrderOrigin) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullOrderOrigin) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullOrderOrigin) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullOrderOrigin) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = OrderOrigin(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullOrderOrigin value and also sets it to be non-null.
func (e *NullOrderOrigin) SetValid(v OrderOrigin) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullOrderOrigin value, or a nil pointer if this NullOrderOrigin is null.
func (e NullOrderOrigin) Ptr() *OrderOrigin {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullOrderOrigin) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullOrderOrigin) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullOrderOrigin) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type TransactionKind string

// Enum values for TransactionKind
const (
	TransactionKindExternal        TransactionKind = "external"
	TransactionKindAuth            TransactionKind = "auth"
	TransactionKindCapture         TransactionKind = "capture"
	TransactionKindCaptureFailed   TransactionKind = "capture_failed"
	TransactionKindActionToConfirm TransactionKind = "action_to_confirm"
	TransactionKindVoid            TransactionKind = "void"
	TransactionKindRefund          TransactionKind = "refund"
	TransactionKindRefundOngoing   TransactionKind = "refund_ongoing"
	TransactionKindRefundFailed    TransactionKind = "refund_failed"
	TransactionKindRefundReversed  TransactionKind = "refund_reversed"
	TransactionKindConfirm         TransactionKind = "confirm"
	TransactionKindCancel          TransactionKind = "cancel"
	TransactionKindPending         TransactionKind = "pending"
)

func AllTransactionKind() []TransactionKind {
	return []TransactionKind{
		TransactionKindExternal,
		TransactionKindAuth,
		TransactionKindCapture,
		TransactionKindCaptureFailed,
		TransactionKindActionToConfirm,
		TransactionKindVoid,
		TransactionKindRefund,
		TransactionKindRefundOngoing,
		TransactionKindRefundFailed,
		TransactionKindRefundReversed,
		TransactionKindConfirm,
		TransactionKindCancel,
		TransactionKindPending,
	}
}

func (e TransactionKind) IsValid() error {
	switch e {
	case TransactionKindExternal, TransactionKindAuth, TransactionKindCapture, TransactionKindCaptureFailed, TransactionKindActionToConfirm, TransactionKindVoid, TransactionKindRefund, TransactionKindRefundOngoing, TransactionKindRefundFailed, TransactionKindRefundReversed, TransactionKindConfirm, TransactionKindCancel, TransactionKindPending:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e TransactionKind) String() string {
	return string(e)
}

func (e TransactionKind) Ordinal() int {
	switch e {
	case TransactionKindExternal:
		return 0
	case TransactionKindAuth:
		return 1
	case TransactionKindCapture:
		return 2
	case TransactionKindCaptureFailed:
		return 3
	case TransactionKindActionToConfirm:
		return 4
	case TransactionKindVoid:
		return 5
	case TransactionKindRefund:
		return 6
	case TransactionKindRefundOngoing:
		return 7
	case TransactionKindRefundFailed:
		return 8
	case TransactionKindRefundReversed:
		return 9
	case TransactionKindConfirm:
		return 10
	case TransactionKindCancel:
		return 11
	case TransactionKindPending:
		return 12

	default:
		panic(errors.New("enum is not valid"))
	}
}

type PaymentChargeStatus string

// Enum values for PaymentChargeStatus
const (
	PaymentChargeStatusNotCharged        PaymentChargeStatus = "not_charged"
	PaymentChargeStatusPending           PaymentChargeStatus = "pending"
	PaymentChargeStatusPartiallyCharged  PaymentChargeStatus = "partially_charged"
	PaymentChargeStatusFullyCharged      PaymentChargeStatus = "fully_charged"
	PaymentChargeStatusPartiallyRefunded PaymentChargeStatus = "partially_refunded"
	PaymentChargeStatusFullyRefunded     PaymentChargeStatus = "fully_refunded"
	PaymentChargeStatusRefused           PaymentChargeStatus = "refused"
	PaymentChargeStatusCancelled         PaymentChargeStatus = "cancelled"
)

func AllPaymentChargeStatus() []PaymentChargeStatus {
	return []PaymentChargeStatus{
		PaymentChargeStatusNotCharged,
		PaymentChargeStatusPending,
		PaymentChargeStatusPartiallyCharged,
		PaymentChargeStatusFullyCharged,
		PaymentChargeStatusPartiallyRefunded,
		PaymentChargeStatusFullyRefunded,
		PaymentChargeStatusRefused,
		PaymentChargeStatusCancelled,
	}
}

func (e PaymentChargeStatus) IsValid() error {
	switch e {
	case PaymentChargeStatusNotCharged, PaymentChargeStatusPending, PaymentChargeStatusPartiallyCharged, PaymentChargeStatusFullyCharged, PaymentChargeStatusPartiallyRefunded, PaymentChargeStatusFullyRefunded, PaymentChargeStatusRefused, PaymentChargeStatusCancelled:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e PaymentChargeStatus) String() string {
	return string(e)
}

func (e PaymentChargeStatus) Ordinal() int {
	switch e {
	case PaymentChargeStatusNotCharged:
		return 0
	case PaymentChargeStatusPending:
		return 1
	case PaymentChargeStatusPartiallyCharged:
		return 2
	case PaymentChargeStatusFullyCharged:
		return 3
	case PaymentChargeStatusPartiallyRefunded:
		return 4
	case PaymentChargeStatusFullyRefunded:
		return 5
	case PaymentChargeStatusRefused:
		return 6
	case PaymentChargeStatusCancelled:
		return 7

	default:
		panic(errors.New("enum is not valid"))
	}
}

type StorePaymentMethod string

// Enum values for StorePaymentMethod
const (
	StorePaymentMethodOnSession  StorePaymentMethod = "on_session"
	StorePaymentMethodOffSession StorePaymentMethod = "off_session"
	StorePaymentMethodNone       StorePaymentMethod = "none"
)

func AllStorePaymentMethod() []StorePaymentMethod {
	return []StorePaymentMethod{
		StorePaymentMethodOnSession,
		StorePaymentMethodOffSession,
		StorePaymentMethodNone,
	}
}

func (e StorePaymentMethod) IsValid() error {
	switch e {
	case StorePaymentMethodOnSession, StorePaymentMethodOffSession, StorePaymentMethodNone:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e StorePaymentMethod) String() string {
	return string(e)
}

func (e StorePaymentMethod) Ordinal() int {
	switch e {
	case StorePaymentMethodOnSession:
		return 0
	case StorePaymentMethodOffSession:
		return 1
	case StorePaymentMethodNone:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

type ProductMediaType string

// Enum values for ProductMediaType
const (
	ProductMediaTypeVIDEO ProductMediaType = "VIDEO"
	ProductMediaTypeIMAGE ProductMediaType = "IMAGE"
)

func AllProductMediaType() []ProductMediaType {
	return []ProductMediaType{
		ProductMediaTypeVIDEO,
		ProductMediaTypeIMAGE,
	}
}

func (e ProductMediaType) IsValid() error {
	switch e {
	case ProductMediaTypeVIDEO, ProductMediaTypeIMAGE:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ProductMediaType) String() string {
	return string(e)
}

func (e ProductMediaType) Ordinal() int {
	switch e {
	case ProductMediaTypeVIDEO:
		return 0
	case ProductMediaTypeIMAGE:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

// NullCurrency is a nullable Currency enum type. It supports SQL and JSON serialization.
type NullCurrency struct {
	Val   Currency
	Valid bool
}

// NullCurrencyFrom creates a new Currency that will never be blank.
func NullCurrencyFrom(v Currency) NullCurrency {
	return NewNullCurrency(v, true)
}

// NullCurrencyFromPtr creates a new NullCurrency that be null if s is nil.
func NullCurrencyFromPtr(v *Currency) NullCurrency {
	if v == nil {
		return NewNullCurrency("", false)
	}
	return NewNullCurrency(*v, true)
}

// NewNullCurrency creates a new NullCurrency
func NewNullCurrency(v Currency, valid bool) NullCurrency {
	return NullCurrency{
		Val:   v,
		Valid: valid,
	}
}

// UnmarshalJSON implements json.Unmarshaler.
func (e *NullCurrency) UnmarshalJSON(data []byte) error {
	if bytes.Equal(data, null.NullBytes) {
		e.Val = ""
		e.Valid = false
		return nil
	}

	if err := json.Unmarshal(data, &e.Val); err != nil {
		return err
	}

	e.Valid = true
	return nil
}

// MarshalJSON implements json.Marshaler.
func (e NullCurrency) MarshalJSON() ([]byte, error) {
	if !e.Valid {
		return null.NullBytes, nil
	}
	return json.Marshal(e.Val)
}

// MarshalText implements encoding.TextMarshaler.
func (e NullCurrency) MarshalText() ([]byte, error) {
	if !e.Valid {
		return []byte{}, nil
	}
	return []byte(e.Val), nil
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (e *NullCurrency) UnmarshalText(text []byte) error {
	if text == nil || len(text) == 0 {
		e.Valid = false
		return nil
	}

	e.Val = Currency(text)
	e.Valid = true
	return nil
}

// SetValid changes this NullCurrency value and also sets it to be non-null.
func (e *NullCurrency) SetValid(v Currency) {
	e.Val = v
	e.Valid = true
}

// Ptr returns a pointer to this NullCurrency value, or a nil pointer if this NullCurrency is null.
func (e NullCurrency) Ptr() *Currency {
	if !e.Valid {
		return nil
	}
	return &e.Val
}

// IsZero returns true for null types.
func (e NullCurrency) IsZero() bool {
	return !e.Valid
}

// Scan implements the Scanner interface.
func (e *NullCurrency) Scan(value interface{}) error {
	if value == nil {
		e.Val, e.Valid = "", false
		return nil
	}
	e.Valid = true
	return convert.ConvertAssign((*string)(&e.Val), value)
}

// Value implements the driver Valuer interface.
func (e NullCurrency) Value() (driver.Value, error) {
	if !e.Valid {
		return nil, nil
	}
	return string(e.Val), nil
}

type InclusionType string

// Enum values for InclusionType
const (
	InclusionTypeInclude InclusionType = "include"
	InclusionTypeExclude InclusionType = "exclude"
)

func AllInclusionType() []InclusionType {
	return []InclusionType{
		InclusionTypeInclude,
		InclusionTypeExclude,
	}
}

func (e InclusionType) IsValid() error {
	switch e {
	case InclusionTypeInclude, InclusionTypeExclude:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e InclusionType) String() string {
	return string(e)
}

func (e InclusionType) Ordinal() int {
	switch e {
	case InclusionTypeInclude:
		return 0
	case InclusionTypeExclude:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type ShippingMethodType string

// Enum values for ShippingMethodType
const (
	ShippingMethodTypePrice  ShippingMethodType = "price"
	ShippingMethodTypeWeight ShippingMethodType = "weight"
)

func AllShippingMethodType() []ShippingMethodType {
	return []ShippingMethodType{
		ShippingMethodTypePrice,
		ShippingMethodTypeWeight,
	}
}

func (e ShippingMethodType) IsValid() error {
	switch e {
	case ShippingMethodTypePrice, ShippingMethodTypeWeight:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ShippingMethodType) String() string {
	return string(e)
}

func (e ShippingMethodType) Ordinal() int {
	switch e {
	case ShippingMethodTypePrice:
		return 0
	case ShippingMethodTypeWeight:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type StaffSalaryPeriod string

// Enum values for StaffSalaryPeriod
const (
	StaffSalaryPeriodHourly  StaffSalaryPeriod = "hourly"
	StaffSalaryPeriodDaily   StaffSalaryPeriod = "daily"
	StaffSalaryPeriodMonthly StaffSalaryPeriod = "monthly"
)

func AllStaffSalaryPeriod() []StaffSalaryPeriod {
	return []StaffSalaryPeriod{
		StaffSalaryPeriodHourly,
		StaffSalaryPeriodDaily,
		StaffSalaryPeriodMonthly,
	}
}

func (e StaffSalaryPeriod) IsValid() error {
	switch e {
	case StaffSalaryPeriodHourly, StaffSalaryPeriodDaily, StaffSalaryPeriodMonthly:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e StaffSalaryPeriod) String() string {
	return string(e)
}

func (e StaffSalaryPeriod) Ordinal() int {
	switch e {
	case StaffSalaryPeriodHourly:
		return 0
	case StaffSalaryPeriodDaily:
		return 1
	case StaffSalaryPeriodMonthly:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

type UploadType string

// Enum values for UploadType
const (
	UploadTypeAttachment UploadType = "attachment"
	UploadTypeImport     UploadType = "import"
)

func AllUploadType() []UploadType {
	return []UploadType{
		UploadTypeAttachment,
		UploadTypeImport,
	}
}

func (e UploadType) IsValid() error {
	switch e {
	case UploadTypeAttachment, UploadTypeImport:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e UploadType) String() string {
	return string(e)
}

func (e UploadType) Ordinal() int {
	switch e {
	case UploadTypeAttachment:
		return 0
	case UploadTypeImport:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type VoucherType string

// Enum values for VoucherType
const (
	VoucherTypeShipping        VoucherType = "shipping"
	VoucherTypeEntireOrder     VoucherType = "entire_order"
	VoucherTypeSpecificProduct VoucherType = "specific_product"
)

func AllVoucherType() []VoucherType {
	return []VoucherType{
		VoucherTypeShipping,
		VoucherTypeEntireOrder,
		VoucherTypeSpecificProduct,
	}
}

func (e VoucherType) IsValid() error {
	switch e {
	case VoucherTypeShipping, VoucherTypeEntireOrder, VoucherTypeSpecificProduct:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e VoucherType) String() string {
	return string(e)
}

func (e VoucherType) Ordinal() int {
	switch e {
	case VoucherTypeShipping:
		return 0
	case VoucherTypeEntireOrder:
		return 1
	case VoucherTypeSpecificProduct:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

type WarehouseClickAndCollectOption string

// Enum values for WarehouseClickAndCollectOption
const (
	WarehouseClickAndCollectOptionDisabled WarehouseClickAndCollectOption = "disabled"
	WarehouseClickAndCollectOptionLocal    WarehouseClickAndCollectOption = "local"
	WarehouseClickAndCollectOptionAll      WarehouseClickAndCollectOption = "all"
)

func AllWarehouseClickAndCollectOption() []WarehouseClickAndCollectOption {
	return []WarehouseClickAndCollectOption{
		WarehouseClickAndCollectOptionDisabled,
		WarehouseClickAndCollectOptionLocal,
		WarehouseClickAndCollectOptionAll,
	}
}

func (e WarehouseClickAndCollectOption) IsValid() error {
	switch e {
	case WarehouseClickAndCollectOptionDisabled, WarehouseClickAndCollectOptionLocal, WarehouseClickAndCollectOptionAll:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e WarehouseClickAndCollectOption) String() string {
	return string(e)
}

func (e WarehouseClickAndCollectOption) Ordinal() int {
	switch e {
	case WarehouseClickAndCollectOptionDisabled:
		return 0
	case WarehouseClickAndCollectOptionLocal:
		return 1
	case WarehouseClickAndCollectOptionAll:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}
