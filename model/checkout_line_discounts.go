// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CheckoutLineDiscount is an object representing the database table.
type CheckoutLineDiscount struct {
	ID              string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	CheckoutLineID  model_types.NullString `boil:"checkout_line_id" json:"checkout_line_id,omitempty" toml:"checkout_line_id" yaml:"checkout_line_id,omitempty"`
	Type            DiscountType           `boil:"type" json:"type" toml:"type" yaml:"type"`
	ValueType       DiscountValueType      `boil:"value_type" json:"value_type" toml:"value_type" yaml:"value_type"`
	Value           decimal.Decimal        `boil:"value" json:"value" toml:"value" yaml:"value"`
	AmountValue     decimal.Decimal        `boil:"amount_value" json:"amount_value" toml:"amount_value" yaml:"amount_value"`
	Currency        Currency               `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Name            model_types.NullString `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	TranslatedName  model_types.NullString `boil:"translated_name" json:"translated_name,omitempty" toml:"translated_name" yaml:"translated_name,omitempty"`
	Reason          model_types.NullString `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	PromotionRuleID model_types.NullString `boil:"promotion_rule_id" json:"promotion_rule_id,omitempty" toml:"promotion_rule_id" yaml:"promotion_rule_id,omitempty"`
	VoucherID       model_types.NullString `boil:"voucher_id" json:"voucher_id,omitempty" toml:"voucher_id" yaml:"voucher_id,omitempty"`
	VoucherCode     model_types.NullString `boil:"voucher_code" json:"voucher_code,omitempty" toml:"voucher_code" yaml:"voucher_code,omitempty"`
	CreatedAt       int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UniqueType      NullDiscountType       `boil:"unique_type" json:"unique_type,omitempty" toml:"unique_type" yaml:"unique_type,omitempty"`

	R *checkoutLineDiscountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checkoutLineDiscountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CheckoutLineDiscountColumns = struct {
	ID              string
	CheckoutLineID  string
	Type            string
	ValueType       string
	Value           string
	AmountValue     string
	Currency        string
	Name            string
	TranslatedName  string
	Reason          string
	PromotionRuleID string
	VoucherID       string
	VoucherCode     string
	CreatedAt       string
	UniqueType      string
}{
	ID:              "id",
	CheckoutLineID:  "checkout_line_id",
	Type:            "type",
	ValueType:       "value_type",
	Value:           "value",
	AmountValue:     "amount_value",
	Currency:        "currency",
	Name:            "name",
	TranslatedName:  "translated_name",
	Reason:          "reason",
	PromotionRuleID: "promotion_rule_id",
	VoucherID:       "voucher_id",
	VoucherCode:     "voucher_code",
	CreatedAt:       "created_at",
	UniqueType:      "unique_type",
}

var CheckoutLineDiscountTableColumns = struct {
	ID              string
	CheckoutLineID  string
	Type            string
	ValueType       string
	Value           string
	AmountValue     string
	Currency        string
	Name            string
	TranslatedName  string
	Reason          string
	PromotionRuleID string
	VoucherID       string
	VoucherCode     string
	CreatedAt       string
	UniqueType      string
}{
	ID:              "checkout_line_discounts.id",
	CheckoutLineID:  "checkout_line_discounts.checkout_line_id",
	Type:            "checkout_line_discounts.type",
	ValueType:       "checkout_line_discounts.value_type",
	Value:           "checkout_line_discounts.value",
	AmountValue:     "checkout_line_discounts.amount_value",
	Currency:        "checkout_line_discounts.currency",
	Name:            "checkout_line_discounts.name",
	TranslatedName:  "checkout_line_discounts.translated_name",
	Reason:          "checkout_line_discounts.reason",
	PromotionRuleID: "checkout_line_discounts.promotion_rule_id",
	VoucherID:       "checkout_line_discounts.voucher_id",
	VoucherCode:     "checkout_line_discounts.voucher_code",
	CreatedAt:       "checkout_line_discounts.created_at",
	UniqueType:      "checkout_line_discounts.unique_type",
}

// Generated where

type whereHelperNullDiscountType struct{ field string }

func (w whereHelperNullDiscountType) EQ(x NullDiscountType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullDiscountType) NEQ(x NullDiscountType) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullDiscountType) LT(x NullDiscountType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullDiscountType) LTE(x NullDiscountType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullDiscountType) GT(x NullDiscountType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullDiscountType) GTE(x NullDiscountType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullDiscountType) IN(slice []NullDiscountType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullDiscountType) NIN(slice []NullDiscountType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullDiscountType) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelperNullDiscountType) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CheckoutLineDiscountWhere = struct {
	ID              whereHelperstring
	CheckoutLineID  whereHelpermodel_types_NullString
	Type            whereHelperDiscountType
	ValueType       whereHelperDiscountValueType
	Value           whereHelperdecimal_Decimal
	AmountValue     whereHelperdecimal_Decimal
	Currency        whereHelperCurrency
	Name            whereHelpermodel_types_NullString
	TranslatedName  whereHelpermodel_types_NullString
	Reason          whereHelpermodel_types_NullString
	PromotionRuleID whereHelpermodel_types_NullString
	VoucherID       whereHelpermodel_types_NullString
	VoucherCode     whereHelpermodel_types_NullString
	CreatedAt       whereHelperint64
	UniqueType      whereHelperNullDiscountType
}{
	ID:              whereHelperstring{field: "\"checkout_line_discounts\".\"id\""},
	CheckoutLineID:  whereHelpermodel_types_NullString{field: "\"checkout_line_discounts\".\"checkout_line_id\""},
	Type:            whereHelperDiscountType{field: "\"checkout_line_discounts\".\"type\""},
	ValueType:       whereHelperDiscountValueType{field: "\"checkout_line_discounts\".\"value_type\""},
	Value:           whereHelperdecimal_Decimal{field: "\"checkout_line_discounts\".\"value\""},
	AmountValue:     whereHelperdecimal_Decimal{field: "\"checkout_line_discounts\".\"amount_value\""},
	Currency:        whereHelperCurrency{field: "\"checkout_line_discounts\".\"currency\""},
	Name:            whereHelpermodel_types_NullString{field: "\"checkout_line_discounts\".\"name\""},
	TranslatedName:  whereHelpermodel_types_NullString{field: "\"checkout_line_discounts\".\"translated_name\""},
	Reason:          whereHelpermodel_types_NullString{field: "\"checkout_line_discounts\".\"reason\""},
	PromotionRuleID: whereHelpermodel_types_NullString{field: "\"checkout_line_discounts\".\"promotion_rule_id\""},
	VoucherID:       whereHelpermodel_types_NullString{field: "\"checkout_line_discounts\".\"voucher_id\""},
	VoucherCode:     whereHelpermodel_types_NullString{field: "\"checkout_line_discounts\".\"voucher_code\""},
	CreatedAt:       whereHelperint64{field: "\"checkout_line_discounts\".\"created_at\""},
	UniqueType:      whereHelperNullDiscountType{field: "\"checkout_line_discounts\".\"unique_type\""},
}

// CheckoutLineDiscountRels is where relationship names are stored.
var CheckoutLineDiscountRels = struct {
	CheckoutLine  string
	PromotionRule string
	Voucher       string
}{
	CheckoutLine:  "CheckoutLine",
	PromotionRule: "PromotionRule",
	Voucher:       "Voucher",
}

// checkoutLineDiscountR is where relationships are stored.
type checkoutLineDiscountR struct {
	CheckoutLine  *CheckoutLine  `boil:"CheckoutLine" json:"CheckoutLine" toml:"CheckoutLine" yaml:"CheckoutLine"`
	PromotionRule *PromotionRule `boil:"PromotionRule" json:"PromotionRule" toml:"PromotionRule" yaml:"PromotionRule"`
	Voucher       *Voucher       `boil:"Voucher" json:"Voucher" toml:"Voucher" yaml:"Voucher"`
}

// NewStruct creates a new relationship struct
func (*checkoutLineDiscountR) NewStruct() *checkoutLineDiscountR {
	return &checkoutLineDiscountR{}
}

func (r *checkoutLineDiscountR) GetCheckoutLine() *CheckoutLine {
	if r == nil {
		return nil
	}
	return r.CheckoutLine
}

func (r *checkoutLineDiscountR) GetPromotionRule() *PromotionRule {
	if r == nil {
		return nil
	}
	return r.PromotionRule
}

func (r *checkoutLineDiscountR) GetVoucher() *Voucher {
	if r == nil {
		return nil
	}
	return r.Voucher
}

// checkoutLineDiscountL is where Load methods for each relationship are stored.
type checkoutLineDiscountL struct{}

var (
	checkoutLineDiscountAllColumns            = []string{"id", "checkout_line_id", "type", "value_type", "value", "amount_value", "currency", "name", "translated_name", "reason", "promotion_rule_id", "voucher_id", "voucher_code", "created_at", "unique_type"}
	checkoutLineDiscountColumnsWithoutDefault = []string{"id", "type", "value_type", "currency", "created_at"}
	checkoutLineDiscountColumnsWithDefault    = []string{"checkout_line_id", "value", "amount_value", "name", "translated_name", "reason", "promotion_rule_id", "voucher_id", "voucher_code", "unique_type"}
	checkoutLineDiscountPrimaryKeyColumns     = []string{"id"}
	checkoutLineDiscountGeneratedColumns      = []string{}
)

type (
	// CheckoutLineDiscountSlice is an alias for a slice of pointers to CheckoutLineDiscount.
	// This should almost always be used instead of []CheckoutLineDiscount.
	CheckoutLineDiscountSlice []*CheckoutLineDiscount

	checkoutLineDiscountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checkoutLineDiscountType                 = reflect.TypeOf(&CheckoutLineDiscount{})
	checkoutLineDiscountMapping              = queries.MakeStructMapping(checkoutLineDiscountType)
	checkoutLineDiscountPrimaryKeyMapping, _ = queries.BindMapping(checkoutLineDiscountType, checkoutLineDiscountMapping, checkoutLineDiscountPrimaryKeyColumns)
	checkoutLineDiscountInsertCacheMut       sync.RWMutex
	checkoutLineDiscountInsertCache          = make(map[string]insertCache)
	checkoutLineDiscountUpdateCacheMut       sync.RWMutex
	checkoutLineDiscountUpdateCache          = make(map[string]updateCache)
	checkoutLineDiscountUpsertCacheMut       sync.RWMutex
	checkoutLineDiscountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single checkoutLineDiscount record from the query.
func (q checkoutLineDiscountQuery) One(exec boil.Executor) (*CheckoutLineDiscount, error) {
	o := &CheckoutLineDiscount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for checkout_line_discounts")
	}

	return o, nil
}

// All returns all CheckoutLineDiscount records from the query.
func (q checkoutLineDiscountQuery) All(exec boil.Executor) (CheckoutLineDiscountSlice, error) {
	var o []*CheckoutLineDiscount

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to CheckoutLineDiscount slice")
	}

	return o, nil
}

// Count returns the count of all CheckoutLineDiscount records in the query.
func (q checkoutLineDiscountQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count checkout_line_discounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q checkoutLineDiscountQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if checkout_line_discounts exists")
	}

	return count > 0, nil
}

// CheckoutLine pointed to by the foreign key.
func (o *CheckoutLineDiscount) CheckoutLine(mods ...qm.QueryMod) checkoutLineQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CheckoutLineID),
	}

	queryMods = append(queryMods, mods...)

	return CheckoutLines(queryMods...)
}

// PromotionRule pointed to by the foreign key.
func (o *CheckoutLineDiscount) PromotionRule(mods ...qm.QueryMod) promotionRuleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PromotionRuleID),
	}

	queryMods = append(queryMods, mods...)

	return PromotionRules(queryMods...)
}

// Voucher pointed to by the foreign key.
func (o *CheckoutLineDiscount) Voucher(mods ...qm.QueryMod) voucherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VoucherID),
	}

	queryMods = append(queryMods, mods...)

	return Vouchers(queryMods...)
}

// LoadCheckoutLine allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutLineDiscountL) LoadCheckoutLine(e boil.Executor, singular bool, maybeCheckoutLineDiscount interface{}, mods queries.Applicator) error {
	var slice []*CheckoutLineDiscount
	var object *CheckoutLineDiscount

	if singular {
		var ok bool
		object, ok = maybeCheckoutLineDiscount.(*CheckoutLineDiscount)
		if !ok {
			object = new(CheckoutLineDiscount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckoutLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckoutLineDiscount))
			}
		}
	} else {
		s, ok := maybeCheckoutLineDiscount.(*[]*CheckoutLineDiscount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckoutLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckoutLineDiscount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutLineDiscountR{}
		}
		if !queries.IsNil(object.CheckoutLineID) {
			args[object.CheckoutLineID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutLineDiscountR{}
			}

			if !queries.IsNil(obj.CheckoutLineID) {
				args[obj.CheckoutLineID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`checkout_lines`),
		qm.WhereIn(`checkout_lines.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CheckoutLine")
	}

	var resultSlice []*CheckoutLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CheckoutLine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for checkout_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkout_lines")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CheckoutLine = foreign
		if foreign.R == nil {
			foreign.R = &checkoutLineR{}
		}
		foreign.R.CheckoutLineDiscounts = append(foreign.R.CheckoutLineDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CheckoutLineID, foreign.ID) {
				local.R.CheckoutLine = foreign
				if foreign.R == nil {
					foreign.R = &checkoutLineR{}
				}
				foreign.R.CheckoutLineDiscounts = append(foreign.R.CheckoutLineDiscounts, local)
				break
			}
		}
	}

	return nil
}

// LoadPromotionRule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutLineDiscountL) LoadPromotionRule(e boil.Executor, singular bool, maybeCheckoutLineDiscount interface{}, mods queries.Applicator) error {
	var slice []*CheckoutLineDiscount
	var object *CheckoutLineDiscount

	if singular {
		var ok bool
		object, ok = maybeCheckoutLineDiscount.(*CheckoutLineDiscount)
		if !ok {
			object = new(CheckoutLineDiscount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckoutLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckoutLineDiscount))
			}
		}
	} else {
		s, ok := maybeCheckoutLineDiscount.(*[]*CheckoutLineDiscount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckoutLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckoutLineDiscount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutLineDiscountR{}
		}
		if !queries.IsNil(object.PromotionRuleID) {
			args[object.PromotionRuleID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutLineDiscountR{}
			}

			if !queries.IsNil(obj.PromotionRuleID) {
				args[obj.PromotionRuleID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`promotion_rules`),
		qm.WhereIn(`promotion_rules.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PromotionRule")
	}

	var resultSlice []*PromotionRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PromotionRule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for promotion_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for promotion_rules")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PromotionRule = foreign
		if foreign.R == nil {
			foreign.R = &promotionRuleR{}
		}
		foreign.R.CheckoutLineDiscounts = append(foreign.R.CheckoutLineDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PromotionRuleID, foreign.ID) {
				local.R.PromotionRule = foreign
				if foreign.R == nil {
					foreign.R = &promotionRuleR{}
				}
				foreign.R.CheckoutLineDiscounts = append(foreign.R.CheckoutLineDiscounts, local)
				break
			}
		}
	}

	return nil
}

// LoadVoucher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutLineDiscountL) LoadVoucher(e boil.Executor, singular bool, maybeCheckoutLineDiscount interface{}, mods queries.Applicator) error {
	var slice []*CheckoutLineDiscount
	var object *CheckoutLineDiscount

	if singular {
		var ok bool
		object, ok = maybeCheckoutLineDiscount.(*CheckoutLineDiscount)
		if !ok {
			object = new(CheckoutLineDiscount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckoutLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckoutLineDiscount))
			}
		}
	} else {
		s, ok := maybeCheckoutLineDiscount.(*[]*CheckoutLineDiscount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckoutLineDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckoutLineDiscount))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &checkoutLineDiscountR{}
		}
		if !queries.IsNil(object.VoucherID) {
			args[object.VoucherID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutLineDiscountR{}
			}

			if !queries.IsNil(obj.VoucherID) {
				args[obj.VoucherID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`vouchers`),
		qm.WhereIn(`vouchers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Voucher")
	}

	var resultSlice []*Voucher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Voucher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vouchers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vouchers")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Voucher = foreign
		if foreign.R == nil {
			foreign.R = &voucherR{}
		}
		foreign.R.CheckoutLineDiscounts = append(foreign.R.CheckoutLineDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VoucherID, foreign.ID) {
				local.R.Voucher = foreign
				if foreign.R == nil {
					foreign.R = &voucherR{}
				}
				foreign.R.CheckoutLineDiscounts = append(foreign.R.CheckoutLineDiscounts, local)
				break
			}
		}
	}

	return nil
}

// SetCheckoutLine of the checkoutLineDiscount to the related item.
// Sets o.R.CheckoutLine to related.
// Adds o to related.R.CheckoutLineDiscounts.
func (o *CheckoutLineDiscount) SetCheckoutLine(exec boil.Executor, insert bool, related *CheckoutLine) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkout_line_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"checkout_line_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutLineDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CheckoutLineID, related.ID)
	if o.R == nil {
		o.R = &checkoutLineDiscountR{
			CheckoutLine: related,
		}
	} else {
		o.R.CheckoutLine = related
	}

	if related.R == nil {
		related.R = &checkoutLineR{
			CheckoutLineDiscounts: CheckoutLineDiscountSlice{o},
		}
	} else {
		related.R.CheckoutLineDiscounts = append(related.R.CheckoutLineDiscounts, o)
	}

	return nil
}

// RemoveCheckoutLine relationship.
// Sets o.R.CheckoutLine to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CheckoutLineDiscount) RemoveCheckoutLine(exec boil.Executor, related *CheckoutLine) error {
	var err error

	queries.SetScanner(&o.CheckoutLineID, nil)
	if _, err = o.Update(exec, boil.Whitelist("checkout_line_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CheckoutLine = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CheckoutLineDiscounts {
		if queries.Equal(o.CheckoutLineID, ri.CheckoutLineID) {
			continue
		}

		ln := len(related.R.CheckoutLineDiscounts)
		if ln > 1 && i < ln-1 {
			related.R.CheckoutLineDiscounts[i] = related.R.CheckoutLineDiscounts[ln-1]
		}
		related.R.CheckoutLineDiscounts = related.R.CheckoutLineDiscounts[:ln-1]
		break
	}
	return nil
}

// SetPromotionRule of the checkoutLineDiscount to the related item.
// Sets o.R.PromotionRule to related.
// Adds o to related.R.CheckoutLineDiscounts.
func (o *CheckoutLineDiscount) SetPromotionRule(exec boil.Executor, insert bool, related *PromotionRule) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkout_line_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_rule_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutLineDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PromotionRuleID, related.ID)
	if o.R == nil {
		o.R = &checkoutLineDiscountR{
			PromotionRule: related,
		}
	} else {
		o.R.PromotionRule = related
	}

	if related.R == nil {
		related.R = &promotionRuleR{
			CheckoutLineDiscounts: CheckoutLineDiscountSlice{o},
		}
	} else {
		related.R.CheckoutLineDiscounts = append(related.R.CheckoutLineDiscounts, o)
	}

	return nil
}

// RemovePromotionRule relationship.
// Sets o.R.PromotionRule to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CheckoutLineDiscount) RemovePromotionRule(exec boil.Executor, related *PromotionRule) error {
	var err error

	queries.SetScanner(&o.PromotionRuleID, nil)
	if _, err = o.Update(exec, boil.Whitelist("promotion_rule_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PromotionRule = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CheckoutLineDiscounts {
		if queries.Equal(o.PromotionRuleID, ri.PromotionRuleID) {
			continue
		}

		ln := len(related.R.CheckoutLineDiscounts)
		if ln > 1 && i < ln-1 {
			related.R.CheckoutLineDiscounts[i] = related.R.CheckoutLineDiscounts[ln-1]
		}
		related.R.CheckoutLineDiscounts = related.R.CheckoutLineDiscounts[:ln-1]
		break
	}
	return nil
}

// SetVoucher of the checkoutLineDiscount to the related item.
// Sets o.R.Voucher to related.
// Adds o to related.R.CheckoutLineDiscounts.
func (o *CheckoutLineDiscount) SetVoucher(exec boil.Executor, insert bool, related *Voucher) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkout_line_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voucher_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutLineDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VoucherID, related.ID)
	if o.R == nil {
		o.R = &checkoutLineDiscountR{
			Voucher: related,
		}
	} else {
		o.R.Voucher = related
	}

	if related.R == nil {
		related.R = &voucherR{
			CheckoutLineDiscounts: CheckoutLineDiscountSlice{o},
		}
	} else {
		related.R.CheckoutLineDiscounts = append(related.R.CheckoutLineDiscounts, o)
	}

	return nil
}

// RemoveVoucher relationship.
// Sets o.R.Voucher to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CheckoutLineDiscount) RemoveVoucher(exec boil.Executor, related *Voucher) error {
	var err error

	queries.SetScanner(&o.VoucherID, nil)
	if _, err = o.Update(exec, boil.Whitelist("voucher_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Voucher = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CheckoutLineDiscounts {
		if queries.Equal(o.VoucherID, ri.VoucherID) {
			continue
		}

		ln := len(related.R.CheckoutLineDiscounts)
		if ln > 1 && i < ln-1 {
			related.R.CheckoutLineDiscounts[i] = related.R.CheckoutLineDiscounts[ln-1]
		}
		related.R.CheckoutLineDiscounts = related.R.CheckoutLineDiscounts[:ln-1]
		break
	}
	return nil
}

// CheckoutLineDiscounts retrieves all the records using an executor.
func CheckoutLineDiscounts(mods ...qm.QueryMod) checkoutLineDiscountQuery {
	mods = append(mods, qm.From("\"checkout_line_discounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"checkout_line_discounts\".*"})
	}

	return checkoutLineDiscountQuery{q}
}

// FindCheckoutLineDiscount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCheckoutLineDiscount(exec boil.Executor, iD string, selectCols ...string) (*CheckoutLineDiscount, error) {
	checkoutLineDiscountObj := &CheckoutLineDiscount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"checkout_line_discounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, checkoutLineDiscountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from checkout_line_discounts")
	}

	return checkoutLineDiscountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CheckoutLineDiscount) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no checkout_line_discounts provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(checkoutLineDiscountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checkoutLineDiscountInsertCacheMut.RLock()
	cache, cached := checkoutLineDiscountInsertCache[key]
	checkoutLineDiscountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checkoutLineDiscountAllColumns,
			checkoutLineDiscountColumnsWithDefault,
			checkoutLineDiscountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checkoutLineDiscountType, checkoutLineDiscountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checkoutLineDiscountType, checkoutLineDiscountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"checkout_line_discounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"checkout_line_discounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into checkout_line_discounts")
	}

	if !cached {
		checkoutLineDiscountInsertCacheMut.Lock()
		checkoutLineDiscountInsertCache[key] = cache
		checkoutLineDiscountInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CheckoutLineDiscount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CheckoutLineDiscount) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	checkoutLineDiscountUpdateCacheMut.RLock()
	cache, cached := checkoutLineDiscountUpdateCache[key]
	checkoutLineDiscountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checkoutLineDiscountAllColumns,
			checkoutLineDiscountPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update checkout_line_discounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"checkout_line_discounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, checkoutLineDiscountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checkoutLineDiscountType, checkoutLineDiscountMapping, append(wl, checkoutLineDiscountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update checkout_line_discounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for checkout_line_discounts")
	}

	if !cached {
		checkoutLineDiscountUpdateCacheMut.Lock()
		checkoutLineDiscountUpdateCache[key] = cache
		checkoutLineDiscountUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q checkoutLineDiscountQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for checkout_line_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for checkout_line_discounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CheckoutLineDiscountSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutLineDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"checkout_line_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, checkoutLineDiscountPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in checkoutLineDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all checkoutLineDiscount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CheckoutLineDiscount) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no checkout_line_discounts provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutLineDiscountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checkoutLineDiscountUpsertCacheMut.RLock()
	cache, cached := checkoutLineDiscountUpsertCache[key]
	checkoutLineDiscountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			checkoutLineDiscountAllColumns,
			checkoutLineDiscountColumnsWithDefault,
			checkoutLineDiscountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			checkoutLineDiscountAllColumns,
			checkoutLineDiscountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert checkout_line_discounts, could not build update column list")
		}

		ret := strmangle.SetComplement(checkoutLineDiscountAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(checkoutLineDiscountPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert checkout_line_discounts, could not build conflict column list")
			}

			conflict = make([]string, len(checkoutLineDiscountPrimaryKeyColumns))
			copy(conflict, checkoutLineDiscountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"checkout_line_discounts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(checkoutLineDiscountType, checkoutLineDiscountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checkoutLineDiscountType, checkoutLineDiscountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert checkout_line_discounts")
	}

	if !cached {
		checkoutLineDiscountUpsertCacheMut.Lock()
		checkoutLineDiscountUpsertCache[key] = cache
		checkoutLineDiscountUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CheckoutLineDiscount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CheckoutLineDiscount) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no CheckoutLineDiscount provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checkoutLineDiscountPrimaryKeyMapping)
	sql := "DELETE FROM \"checkout_line_discounts\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from checkout_line_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for checkout_line_discounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q checkoutLineDiscountQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no checkoutLineDiscountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from checkout_line_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for checkout_line_discounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CheckoutLineDiscountSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutLineDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"checkout_line_discounts\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, checkoutLineDiscountPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from checkoutLineDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for checkout_line_discounts")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CheckoutLineDiscount) Reload(exec boil.Executor) error {
	ret, err := FindCheckoutLineDiscount(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckoutLineDiscountSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CheckoutLineDiscountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutLineDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"checkout_line_discounts\".* FROM \"checkout_line_discounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutLineDiscountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in CheckoutLineDiscountSlice")
	}

	*o = slice

	return nil
}

// CheckoutLineDiscountExists checks if the CheckoutLineDiscount row exists.
func CheckoutLineDiscountExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"checkout_line_discounts\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if checkout_line_discounts exists")
	}

	return exists, nil
}

// Exists checks if the CheckoutLineDiscount row exists.
func (o *CheckoutLineDiscount) Exists(exec boil.Executor) (bool, error) {
	return CheckoutLineDiscountExists(exec, o.ID)
}
