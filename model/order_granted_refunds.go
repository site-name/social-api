// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderGrantedRefund is an object representing the database table.
type OrderGrantedRefund struct {
	ID                    string                       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt             int64                        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             int64                        `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	AmountValue           decimal.Decimal              `boil:"amount_value" json:"amount_value" toml:"amount_value" yaml:"amount_value"`
	Currency              Currency                     `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Reason                model_types.NullString       `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`
	UserID                model_types.NullString       `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	AppID                 model_types.NullString       `boil:"app_id" json:"app_id,omitempty" toml:"app_id" yaml:"app_id,omitempty"`
	OrderID               model_types.NullString       `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	ShippingCostsIncluded bool                         `boil:"shipping_costs_included" json:"shipping_costs_included" toml:"shipping_costs_included" yaml:"shipping_costs_included"`
	TransactionItemID     model_types.NullString       `boil:"transaction_item_id" json:"transaction_item_id,omitempty" toml:"transaction_item_id" yaml:"transaction_item_id,omitempty"`
	Status                NullOrderGrantedRefundStatus `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`

	R *orderGrantedRefundR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderGrantedRefundL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderGrantedRefundColumns = struct {
	ID                    string
	CreatedAt             string
	UpdatedAt             string
	AmountValue           string
	Currency              string
	Reason                string
	UserID                string
	AppID                 string
	OrderID               string
	ShippingCostsIncluded string
	TransactionItemID     string
	Status                string
}{
	ID:                    "id",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
	AmountValue:           "amount_value",
	Currency:              "currency",
	Reason:                "reason",
	UserID:                "user_id",
	AppID:                 "app_id",
	OrderID:               "order_id",
	ShippingCostsIncluded: "shipping_costs_included",
	TransactionItemID:     "transaction_item_id",
	Status:                "status",
}

var OrderGrantedRefundTableColumns = struct {
	ID                    string
	CreatedAt             string
	UpdatedAt             string
	AmountValue           string
	Currency              string
	Reason                string
	UserID                string
	AppID                 string
	OrderID               string
	ShippingCostsIncluded string
	TransactionItemID     string
	Status                string
}{
	ID:                    "order_granted_refunds.id",
	CreatedAt:             "order_granted_refunds.created_at",
	UpdatedAt:             "order_granted_refunds.updated_at",
	AmountValue:           "order_granted_refunds.amount_value",
	Currency:              "order_granted_refunds.currency",
	Reason:                "order_granted_refunds.reason",
	UserID:                "order_granted_refunds.user_id",
	AppID:                 "order_granted_refunds.app_id",
	OrderID:               "order_granted_refunds.order_id",
	ShippingCostsIncluded: "order_granted_refunds.shipping_costs_included",
	TransactionItemID:     "order_granted_refunds.transaction_item_id",
	Status:                "order_granted_refunds.status",
}

// Generated where

type whereHelperNullOrderGrantedRefundStatus struct{ field string }

func (w whereHelperNullOrderGrantedRefundStatus) EQ(x NullOrderGrantedRefundStatus) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelperNullOrderGrantedRefundStatus) NEQ(x NullOrderGrantedRefundStatus) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelperNullOrderGrantedRefundStatus) LT(x NullOrderGrantedRefundStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperNullOrderGrantedRefundStatus) LTE(x NullOrderGrantedRefundStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperNullOrderGrantedRefundStatus) GT(x NullOrderGrantedRefundStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperNullOrderGrantedRefundStatus) GTE(x NullOrderGrantedRefundStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperNullOrderGrantedRefundStatus) IN(slice []NullOrderGrantedRefundStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperNullOrderGrantedRefundStatus) NIN(slice []NullOrderGrantedRefundStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelperNullOrderGrantedRefundStatus) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelperNullOrderGrantedRefundStatus) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var OrderGrantedRefundWhere = struct {
	ID                    whereHelperstring
	CreatedAt             whereHelperint64
	UpdatedAt             whereHelperint64
	AmountValue           whereHelperdecimal_Decimal
	Currency              whereHelperCurrency
	Reason                whereHelpermodel_types_NullString
	UserID                whereHelpermodel_types_NullString
	AppID                 whereHelpermodel_types_NullString
	OrderID               whereHelpermodel_types_NullString
	ShippingCostsIncluded whereHelperbool
	TransactionItemID     whereHelpermodel_types_NullString
	Status                whereHelperNullOrderGrantedRefundStatus
}{
	ID:                    whereHelperstring{field: "\"order_granted_refunds\".\"id\""},
	CreatedAt:             whereHelperint64{field: "\"order_granted_refunds\".\"created_at\""},
	UpdatedAt:             whereHelperint64{field: "\"order_granted_refunds\".\"updated_at\""},
	AmountValue:           whereHelperdecimal_Decimal{field: "\"order_granted_refunds\".\"amount_value\""},
	Currency:              whereHelperCurrency{field: "\"order_granted_refunds\".\"currency\""},
	Reason:                whereHelpermodel_types_NullString{field: "\"order_granted_refunds\".\"reason\""},
	UserID:                whereHelpermodel_types_NullString{field: "\"order_granted_refunds\".\"user_id\""},
	AppID:                 whereHelpermodel_types_NullString{field: "\"order_granted_refunds\".\"app_id\""},
	OrderID:               whereHelpermodel_types_NullString{field: "\"order_granted_refunds\".\"order_id\""},
	ShippingCostsIncluded: whereHelperbool{field: "\"order_granted_refunds\".\"shipping_costs_included\""},
	TransactionItemID:     whereHelpermodel_types_NullString{field: "\"order_granted_refunds\".\"transaction_item_id\""},
	Status:                whereHelperNullOrderGrantedRefundStatus{field: "\"order_granted_refunds\".\"status\""},
}

// OrderGrantedRefundRels is where relationship names are stored.
var OrderGrantedRefundRels = struct {
	Order                                 string
	User                                  string
	GrantedRefundOrderGrantedRefundLines  string
	RelatedGrantedRefundTransactionEvents string
}{
	Order:                                 "Order",
	User:                                  "User",
	GrantedRefundOrderGrantedRefundLines:  "GrantedRefundOrderGrantedRefundLines",
	RelatedGrantedRefundTransactionEvents: "RelatedGrantedRefundTransactionEvents",
}

// orderGrantedRefundR is where relationships are stored.
type orderGrantedRefundR struct {
	Order                                 *Order                      `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	User                                  *User                       `boil:"User" json:"User" toml:"User" yaml:"User"`
	GrantedRefundOrderGrantedRefundLines  OrderGrantedRefundLineSlice `boil:"GrantedRefundOrderGrantedRefundLines" json:"GrantedRefundOrderGrantedRefundLines" toml:"GrantedRefundOrderGrantedRefundLines" yaml:"GrantedRefundOrderGrantedRefundLines"`
	RelatedGrantedRefundTransactionEvents TransactionEventSlice       `boil:"RelatedGrantedRefundTransactionEvents" json:"RelatedGrantedRefundTransactionEvents" toml:"RelatedGrantedRefundTransactionEvents" yaml:"RelatedGrantedRefundTransactionEvents"`
}

// NewStruct creates a new relationship struct
func (*orderGrantedRefundR) NewStruct() *orderGrantedRefundR {
	return &orderGrantedRefundR{}
}

func (r *orderGrantedRefundR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *orderGrantedRefundR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *orderGrantedRefundR) GetGrantedRefundOrderGrantedRefundLines() OrderGrantedRefundLineSlice {
	if r == nil {
		return nil
	}
	return r.GrantedRefundOrderGrantedRefundLines
}

func (r *orderGrantedRefundR) GetRelatedGrantedRefundTransactionEvents() TransactionEventSlice {
	if r == nil {
		return nil
	}
	return r.RelatedGrantedRefundTransactionEvents
}

// orderGrantedRefundL is where Load methods for each relationship are stored.
type orderGrantedRefundL struct{}

var (
	orderGrantedRefundAllColumns            = []string{"id", "created_at", "updated_at", "amount_value", "currency", "reason", "user_id", "app_id", "order_id", "shipping_costs_included", "transaction_item_id", "status"}
	orderGrantedRefundColumnsWithoutDefault = []string{"id", "created_at", "updated_at", "currency"}
	orderGrantedRefundColumnsWithDefault    = []string{"amount_value", "reason", "user_id", "app_id", "order_id", "shipping_costs_included", "transaction_item_id", "status"}
	orderGrantedRefundPrimaryKeyColumns     = []string{"id"}
	orderGrantedRefundGeneratedColumns      = []string{}
)

type (
	// OrderGrantedRefundSlice is an alias for a slice of pointers to OrderGrantedRefund.
	// This should almost always be used instead of []OrderGrantedRefund.
	OrderGrantedRefundSlice []*OrderGrantedRefund

	orderGrantedRefundQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderGrantedRefundType                 = reflect.TypeOf(&OrderGrantedRefund{})
	orderGrantedRefundMapping              = queries.MakeStructMapping(orderGrantedRefundType)
	orderGrantedRefundPrimaryKeyMapping, _ = queries.BindMapping(orderGrantedRefundType, orderGrantedRefundMapping, orderGrantedRefundPrimaryKeyColumns)
	orderGrantedRefundInsertCacheMut       sync.RWMutex
	orderGrantedRefundInsertCache          = make(map[string]insertCache)
	orderGrantedRefundUpdateCacheMut       sync.RWMutex
	orderGrantedRefundUpdateCache          = make(map[string]updateCache)
	orderGrantedRefundUpsertCacheMut       sync.RWMutex
	orderGrantedRefundUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single orderGrantedRefund record from the query.
func (q orderGrantedRefundQuery) One(exec boil.Executor) (*OrderGrantedRefund, error) {
	o := &OrderGrantedRefund{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for order_granted_refunds")
	}

	return o, nil
}

// All returns all OrderGrantedRefund records from the query.
func (q orderGrantedRefundQuery) All(exec boil.Executor) (OrderGrantedRefundSlice, error) {
	var o []*OrderGrantedRefund

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to OrderGrantedRefund slice")
	}

	return o, nil
}

// Count returns the count of all OrderGrantedRefund records in the query.
func (q orderGrantedRefundQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count order_granted_refunds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderGrantedRefundQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if order_granted_refunds exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *OrderGrantedRefund) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// User pointed to by the foreign key.
func (o *OrderGrantedRefund) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// GrantedRefundOrderGrantedRefundLines retrieves all the order_granted_refund_line's OrderGrantedRefundLines with an executor via granted_refund_id column.
func (o *OrderGrantedRefund) GrantedRefundOrderGrantedRefundLines(mods ...qm.QueryMod) orderGrantedRefundLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_granted_refund_lines\".\"granted_refund_id\"=?", o.ID),
	)

	return OrderGrantedRefundLines(queryMods...)
}

// RelatedGrantedRefundTransactionEvents retrieves all the transaction_event's TransactionEvents with an executor via related_granted_refund_id column.
func (o *OrderGrantedRefund) RelatedGrantedRefundTransactionEvents(mods ...qm.QueryMod) transactionEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transaction_events\".\"related_granted_refund_id\"=?", o.ID),
	)

	return TransactionEvents(queryMods...)
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderGrantedRefundL) LoadOrder(e boil.Executor, singular bool, maybeOrderGrantedRefund interface{}, mods queries.Applicator) error {
	var slice []*OrderGrantedRefund
	var object *OrderGrantedRefund

	if singular {
		var ok bool
		object, ok = maybeOrderGrantedRefund.(*OrderGrantedRefund)
		if !ok {
			object = new(OrderGrantedRefund)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderGrantedRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderGrantedRefund))
			}
		}
	} else {
		s, ok := maybeOrderGrantedRefund.(*[]*OrderGrantedRefund)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderGrantedRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderGrantedRefund))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderGrantedRefundR{}
		}
		if !queries.IsNil(object.OrderID) {
			args[object.OrderID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderGrantedRefundR{}
			}

			if !queries.IsNil(obj.OrderID) {
				args[obj.OrderID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderGrantedRefunds = append(foreign.R.OrderGrantedRefunds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderGrantedRefunds = append(foreign.R.OrderGrantedRefunds, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderGrantedRefundL) LoadUser(e boil.Executor, singular bool, maybeOrderGrantedRefund interface{}, mods queries.Applicator) error {
	var slice []*OrderGrantedRefund
	var object *OrderGrantedRefund

	if singular {
		var ok bool
		object, ok = maybeOrderGrantedRefund.(*OrderGrantedRefund)
		if !ok {
			object = new(OrderGrantedRefund)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderGrantedRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderGrantedRefund))
			}
		}
	} else {
		s, ok := maybeOrderGrantedRefund.(*[]*OrderGrantedRefund)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderGrantedRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderGrantedRefund))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderGrantedRefundR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderGrantedRefundR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OrderGrantedRefunds = append(foreign.R.OrderGrantedRefunds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OrderGrantedRefunds = append(foreign.R.OrderGrantedRefunds, local)
				break
			}
		}
	}

	return nil
}

// LoadGrantedRefundOrderGrantedRefundLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderGrantedRefundL) LoadGrantedRefundOrderGrantedRefundLines(e boil.Executor, singular bool, maybeOrderGrantedRefund interface{}, mods queries.Applicator) error {
	var slice []*OrderGrantedRefund
	var object *OrderGrantedRefund

	if singular {
		var ok bool
		object, ok = maybeOrderGrantedRefund.(*OrderGrantedRefund)
		if !ok {
			object = new(OrderGrantedRefund)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderGrantedRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderGrantedRefund))
			}
		}
	} else {
		s, ok := maybeOrderGrantedRefund.(*[]*OrderGrantedRefund)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderGrantedRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderGrantedRefund))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderGrantedRefundR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderGrantedRefundR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`order_granted_refund_lines`),
		qm.WhereIn(`order_granted_refund_lines.granted_refund_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_granted_refund_lines")
	}

	var resultSlice []*OrderGrantedRefundLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_granted_refund_lines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_granted_refund_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_granted_refund_lines")
	}

	if singular {
		object.R.GrantedRefundOrderGrantedRefundLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderGrantedRefundLineR{}
			}
			foreign.R.GrantedRefund = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.GrantedRefundID) {
				local.R.GrantedRefundOrderGrantedRefundLines = append(local.R.GrantedRefundOrderGrantedRefundLines, foreign)
				if foreign.R == nil {
					foreign.R = &orderGrantedRefundLineR{}
				}
				foreign.R.GrantedRefund = local
				break
			}
		}
	}

	return nil
}

// LoadRelatedGrantedRefundTransactionEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderGrantedRefundL) LoadRelatedGrantedRefundTransactionEvents(e boil.Executor, singular bool, maybeOrderGrantedRefund interface{}, mods queries.Applicator) error {
	var slice []*OrderGrantedRefund
	var object *OrderGrantedRefund

	if singular {
		var ok bool
		object, ok = maybeOrderGrantedRefund.(*OrderGrantedRefund)
		if !ok {
			object = new(OrderGrantedRefund)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderGrantedRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderGrantedRefund))
			}
		}
	} else {
		s, ok := maybeOrderGrantedRefund.(*[]*OrderGrantedRefund)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderGrantedRefund)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderGrantedRefund))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &orderGrantedRefundR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderGrantedRefundR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transaction_events`),
		qm.WhereIn(`transaction_events.related_granted_refund_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transaction_events")
	}

	var resultSlice []*TransactionEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transaction_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transaction_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction_events")
	}

	if singular {
		object.R.RelatedGrantedRefundTransactionEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionEventR{}
			}
			foreign.R.RelatedGrantedRefund = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RelatedGrantedRefundID) {
				local.R.RelatedGrantedRefundTransactionEvents = append(local.R.RelatedGrantedRefundTransactionEvents, foreign)
				if foreign.R == nil {
					foreign.R = &transactionEventR{}
				}
				foreign.R.RelatedGrantedRefund = local
				break
			}
		}
	}

	return nil
}

// SetOrder of the orderGrantedRefund to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderGrantedRefunds.
func (o *OrderGrantedRefund) SetOrder(exec boil.Executor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_granted_refunds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderGrantedRefundPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &orderGrantedRefundR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderGrantedRefunds: OrderGrantedRefundSlice{o},
		}
	} else {
		related.R.OrderGrantedRefunds = append(related.R.OrderGrantedRefunds, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderGrantedRefund) RemoveOrder(exec boil.Executor, related *Order) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Order = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderGrantedRefunds {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.OrderGrantedRefunds)
		if ln > 1 && i < ln-1 {
			related.R.OrderGrantedRefunds[i] = related.R.OrderGrantedRefunds[ln-1]
		}
		related.R.OrderGrantedRefunds = related.R.OrderGrantedRefunds[:ln-1]
		break
	}
	return nil
}

// SetUser of the orderGrantedRefund to the related item.
// Sets o.R.User to related.
// Adds o to related.R.OrderGrantedRefunds.
func (o *OrderGrantedRefund) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_granted_refunds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderGrantedRefundPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &orderGrantedRefundR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			OrderGrantedRefunds: OrderGrantedRefundSlice{o},
		}
	} else {
		related.R.OrderGrantedRefunds = append(related.R.OrderGrantedRefunds, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderGrantedRefund) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderGrantedRefunds {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.OrderGrantedRefunds)
		if ln > 1 && i < ln-1 {
			related.R.OrderGrantedRefunds[i] = related.R.OrderGrantedRefunds[ln-1]
		}
		related.R.OrderGrantedRefunds = related.R.OrderGrantedRefunds[:ln-1]
		break
	}
	return nil
}

// AddGrantedRefundOrderGrantedRefundLines adds the given related objects to the existing relationships
// of the order_granted_refund, optionally inserting them as new records.
// Appends related to o.R.GrantedRefundOrderGrantedRefundLines.
// Sets related.R.GrantedRefund appropriately.
func (o *OrderGrantedRefund) AddGrantedRefundOrderGrantedRefundLines(exec boil.Executor, insert bool, related ...*OrderGrantedRefundLine) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.GrantedRefundID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_granted_refund_lines\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"granted_refund_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderGrantedRefundLinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.GrantedRefundID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderGrantedRefundR{
			GrantedRefundOrderGrantedRefundLines: related,
		}
	} else {
		o.R.GrantedRefundOrderGrantedRefundLines = append(o.R.GrantedRefundOrderGrantedRefundLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderGrantedRefundLineR{
				GrantedRefund: o,
			}
		} else {
			rel.R.GrantedRefund = o
		}
	}
	return nil
}

// SetGrantedRefundOrderGrantedRefundLines removes all previously related items of the
// order_granted_refund replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GrantedRefund's GrantedRefundOrderGrantedRefundLines accordingly.
// Replaces o.R.GrantedRefundOrderGrantedRefundLines with related.
// Sets related.R.GrantedRefund's GrantedRefundOrderGrantedRefundLines accordingly.
func (o *OrderGrantedRefund) SetGrantedRefundOrderGrantedRefundLines(exec boil.Executor, insert bool, related ...*OrderGrantedRefundLine) error {
	query := "update \"order_granted_refund_lines\" set \"granted_refund_id\" = null where \"granted_refund_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GrantedRefundOrderGrantedRefundLines {
			queries.SetScanner(&rel.GrantedRefundID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.GrantedRefund = nil
		}
		o.R.GrantedRefundOrderGrantedRefundLines = nil
	}

	return o.AddGrantedRefundOrderGrantedRefundLines(exec, insert, related...)
}

// RemoveGrantedRefundOrderGrantedRefundLines relationships from objects passed in.
// Removes related items from R.GrantedRefundOrderGrantedRefundLines (uses pointer comparison, removal does not keep order)
// Sets related.R.GrantedRefund.
func (o *OrderGrantedRefund) RemoveGrantedRefundOrderGrantedRefundLines(exec boil.Executor, related ...*OrderGrantedRefundLine) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.GrantedRefundID, nil)
		if rel.R != nil {
			rel.R.GrantedRefund = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("granted_refund_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GrantedRefundOrderGrantedRefundLines {
			if rel != ri {
				continue
			}

			ln := len(o.R.GrantedRefundOrderGrantedRefundLines)
			if ln > 1 && i < ln-1 {
				o.R.GrantedRefundOrderGrantedRefundLines[i] = o.R.GrantedRefundOrderGrantedRefundLines[ln-1]
			}
			o.R.GrantedRefundOrderGrantedRefundLines = o.R.GrantedRefundOrderGrantedRefundLines[:ln-1]
			break
		}
	}

	return nil
}

// AddRelatedGrantedRefundTransactionEvents adds the given related objects to the existing relationships
// of the order_granted_refund, optionally inserting them as new records.
// Appends related to o.R.RelatedGrantedRefundTransactionEvents.
// Sets related.R.RelatedGrantedRefund appropriately.
func (o *OrderGrantedRefund) AddRelatedGrantedRefundTransactionEvents(exec boil.Executor, insert bool, related ...*TransactionEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RelatedGrantedRefundID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transaction_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"related_granted_refund_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RelatedGrantedRefundID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderGrantedRefundR{
			RelatedGrantedRefundTransactionEvents: related,
		}
	} else {
		o.R.RelatedGrantedRefundTransactionEvents = append(o.R.RelatedGrantedRefundTransactionEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionEventR{
				RelatedGrantedRefund: o,
			}
		} else {
			rel.R.RelatedGrantedRefund = o
		}
	}
	return nil
}

// SetRelatedGrantedRefundTransactionEvents removes all previously related items of the
// order_granted_refund replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RelatedGrantedRefund's RelatedGrantedRefundTransactionEvents accordingly.
// Replaces o.R.RelatedGrantedRefundTransactionEvents with related.
// Sets related.R.RelatedGrantedRefund's RelatedGrantedRefundTransactionEvents accordingly.
func (o *OrderGrantedRefund) SetRelatedGrantedRefundTransactionEvents(exec boil.Executor, insert bool, related ...*TransactionEvent) error {
	query := "update \"transaction_events\" set \"related_granted_refund_id\" = null where \"related_granted_refund_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RelatedGrantedRefundTransactionEvents {
			queries.SetScanner(&rel.RelatedGrantedRefundID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RelatedGrantedRefund = nil
		}
		o.R.RelatedGrantedRefundTransactionEvents = nil
	}

	return o.AddRelatedGrantedRefundTransactionEvents(exec, insert, related...)
}

// RemoveRelatedGrantedRefundTransactionEvents relationships from objects passed in.
// Removes related items from R.RelatedGrantedRefundTransactionEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.RelatedGrantedRefund.
func (o *OrderGrantedRefund) RemoveRelatedGrantedRefundTransactionEvents(exec boil.Executor, related ...*TransactionEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RelatedGrantedRefundID, nil)
		if rel.R != nil {
			rel.R.RelatedGrantedRefund = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("related_granted_refund_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RelatedGrantedRefundTransactionEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.RelatedGrantedRefundTransactionEvents)
			if ln > 1 && i < ln-1 {
				o.R.RelatedGrantedRefundTransactionEvents[i] = o.R.RelatedGrantedRefundTransactionEvents[ln-1]
			}
			o.R.RelatedGrantedRefundTransactionEvents = o.R.RelatedGrantedRefundTransactionEvents[:ln-1]
			break
		}
	}

	return nil
}

// OrderGrantedRefunds retrieves all the records using an executor.
func OrderGrantedRefunds(mods ...qm.QueryMod) orderGrantedRefundQuery {
	mods = append(mods, qm.From("\"order_granted_refunds\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_granted_refunds\".*"})
	}

	return orderGrantedRefundQuery{q}
}

// FindOrderGrantedRefund retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderGrantedRefund(exec boil.Executor, iD string, selectCols ...string) (*OrderGrantedRefund, error) {
	orderGrantedRefundObj := &OrderGrantedRefund{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_granted_refunds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, orderGrantedRefundObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from order_granted_refunds")
	}

	return orderGrantedRefundObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderGrantedRefund) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no order_granted_refunds provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderGrantedRefundColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderGrantedRefundInsertCacheMut.RLock()
	cache, cached := orderGrantedRefundInsertCache[key]
	orderGrantedRefundInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderGrantedRefundAllColumns,
			orderGrantedRefundColumnsWithDefault,
			orderGrantedRefundColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderGrantedRefundType, orderGrantedRefundMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderGrantedRefundType, orderGrantedRefundMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_granted_refunds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_granted_refunds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into order_granted_refunds")
	}

	if !cached {
		orderGrantedRefundInsertCacheMut.Lock()
		orderGrantedRefundInsertCache[key] = cache
		orderGrantedRefundInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OrderGrantedRefund.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderGrantedRefund) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	orderGrantedRefundUpdateCacheMut.RLock()
	cache, cached := orderGrantedRefundUpdateCache[key]
	orderGrantedRefundUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderGrantedRefundAllColumns,
			orderGrantedRefundPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update order_granted_refunds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_granted_refunds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderGrantedRefundPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderGrantedRefundType, orderGrantedRefundMapping, append(wl, orderGrantedRefundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update order_granted_refunds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for order_granted_refunds")
	}

	if !cached {
		orderGrantedRefundUpdateCacheMut.Lock()
		orderGrantedRefundUpdateCache[key] = cache
		orderGrantedRefundUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q orderGrantedRefundQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for order_granted_refunds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for order_granted_refunds")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderGrantedRefundSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderGrantedRefundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_granted_refunds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderGrantedRefundPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in orderGrantedRefund slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all orderGrantedRefund")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderGrantedRefund) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no order_granted_refunds provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(orderGrantedRefundColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderGrantedRefundUpsertCacheMut.RLock()
	cache, cached := orderGrantedRefundUpsertCache[key]
	orderGrantedRefundUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderGrantedRefundAllColumns,
			orderGrantedRefundColumnsWithDefault,
			orderGrantedRefundColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderGrantedRefundAllColumns,
			orderGrantedRefundPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert order_granted_refunds, could not build update column list")
		}

		ret := strmangle.SetComplement(orderGrantedRefundAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderGrantedRefundPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert order_granted_refunds, could not build conflict column list")
			}

			conflict = make([]string, len(orderGrantedRefundPrimaryKeyColumns))
			copy(conflict, orderGrantedRefundPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_granted_refunds\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderGrantedRefundType, orderGrantedRefundMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderGrantedRefundType, orderGrantedRefundMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert order_granted_refunds")
	}

	if !cached {
		orderGrantedRefundUpsertCacheMut.Lock()
		orderGrantedRefundUpsertCache[key] = cache
		orderGrantedRefundUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single OrderGrantedRefund record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderGrantedRefund) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no OrderGrantedRefund provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderGrantedRefundPrimaryKeyMapping)
	sql := "DELETE FROM \"order_granted_refunds\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from order_granted_refunds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for order_granted_refunds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderGrantedRefundQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no orderGrantedRefundQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from order_granted_refunds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for order_granted_refunds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderGrantedRefundSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderGrantedRefundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_granted_refunds\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, orderGrantedRefundPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from orderGrantedRefund slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for order_granted_refunds")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderGrantedRefund) Reload(exec boil.Executor) error {
	ret, err := FindOrderGrantedRefund(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderGrantedRefundSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderGrantedRefundSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderGrantedRefundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_granted_refunds\".* FROM \"order_granted_refunds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderGrantedRefundPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in OrderGrantedRefundSlice")
	}

	*o = slice

	return nil
}

// OrderGrantedRefundExists checks if the OrderGrantedRefund row exists.
func OrderGrantedRefundExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_granted_refunds\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if order_granted_refunds exists")
	}

	return exists, nil
}

// Exists checks if the OrderGrantedRefund row exists.
func (o *OrderGrantedRefund) Exists(exec boil.Executor) (bool, error) {
	return OrderGrantedRefundExists(exec, o.ID)
}
