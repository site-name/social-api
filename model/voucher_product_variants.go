// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VoucherProductVariant is an object representing the database table.
type VoucherProductVariant struct {
	ID               string `boil:"id" json:"id" toml:"id" yaml:"id"`
	VoucherID        string `boil:"voucher_id" json:"voucher_id" toml:"voucher_id" yaml:"voucher_id"`
	ProductVariantID string `boil:"product_variant_id" json:"product_variant_id" toml:"product_variant_id" yaml:"product_variant_id"`
	CreatedAt        int64  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *voucherProductVariantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voucherProductVariantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoucherProductVariantColumns = struct {
	ID               string
	VoucherID        string
	ProductVariantID string
	CreatedAt        string
}{
	ID:               "id",
	VoucherID:        "voucher_id",
	ProductVariantID: "product_variant_id",
	CreatedAt:        "created_at",
}

var VoucherProductVariantTableColumns = struct {
	ID               string
	VoucherID        string
	ProductVariantID string
	CreatedAt        string
}{
	ID:               "voucher_product_variants.id",
	VoucherID:        "voucher_product_variants.voucher_id",
	ProductVariantID: "voucher_product_variants.product_variant_id",
	CreatedAt:        "voucher_product_variants.created_at",
}

// Generated where

var VoucherProductVariantWhere = struct {
	ID               whereHelperstring
	VoucherID        whereHelperstring
	ProductVariantID whereHelperstring
	CreatedAt        whereHelperint64
}{
	ID:               whereHelperstring{field: "\"voucher_product_variants\".\"id\""},
	VoucherID:        whereHelperstring{field: "\"voucher_product_variants\".\"voucher_id\""},
	ProductVariantID: whereHelperstring{field: "\"voucher_product_variants\".\"product_variant_id\""},
	CreatedAt:        whereHelperint64{field: "\"voucher_product_variants\".\"created_at\""},
}

// VoucherProductVariantRels is where relationship names are stored.
var VoucherProductVariantRels = struct {
}{}

// voucherProductVariantR is where relationships are stored.
type voucherProductVariantR struct {
}

// NewStruct creates a new relationship struct
func (*voucherProductVariantR) NewStruct() *voucherProductVariantR {
	return &voucherProductVariantR{}
}

// voucherProductVariantL is where Load methods for each relationship are stored.
type voucherProductVariantL struct{}

var (
	voucherProductVariantAllColumns            = []string{"id", "voucher_id", "product_variant_id", "created_at"}
	voucherProductVariantColumnsWithoutDefault = []string{"id", "voucher_id", "product_variant_id", "created_at"}
	voucherProductVariantColumnsWithDefault    = []string{}
	voucherProductVariantPrimaryKeyColumns     = []string{"id"}
	voucherProductVariantGeneratedColumns      = []string{}
)

type (
	// VoucherProductVariantSlice is an alias for a slice of pointers to VoucherProductVariant.
	// This should almost always be used instead of []VoucherProductVariant.
	VoucherProductVariantSlice []*VoucherProductVariant

	voucherProductVariantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voucherProductVariantType                 = reflect.TypeOf(&VoucherProductVariant{})
	voucherProductVariantMapping              = queries.MakeStructMapping(voucherProductVariantType)
	voucherProductVariantPrimaryKeyMapping, _ = queries.BindMapping(voucherProductVariantType, voucherProductVariantMapping, voucherProductVariantPrimaryKeyColumns)
	voucherProductVariantInsertCacheMut       sync.RWMutex
	voucherProductVariantInsertCache          = make(map[string]insertCache)
	voucherProductVariantUpdateCacheMut       sync.RWMutex
	voucherProductVariantUpdateCache          = make(map[string]updateCache)
	voucherProductVariantUpsertCacheMut       sync.RWMutex
	voucherProductVariantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single voucherProductVariant record from the query.
func (q voucherProductVariantQuery) One(exec boil.Executor) (*VoucherProductVariant, error) {
	o := &VoucherProductVariant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for voucher_product_variants")
	}

	return o, nil
}

// All returns all VoucherProductVariant records from the query.
func (q voucherProductVariantQuery) All(exec boil.Executor) (VoucherProductVariantSlice, error) {
	var o []*VoucherProductVariant

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to VoucherProductVariant slice")
	}

	return o, nil
}

// Count returns the count of all VoucherProductVariant records in the query.
func (q voucherProductVariantQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count voucher_product_variants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voucherProductVariantQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if voucher_product_variants exists")
	}

	return count > 0, nil
}

// VoucherProductVariants retrieves all the records using an executor.
func VoucherProductVariants(mods ...qm.QueryMod) voucherProductVariantQuery {
	mods = append(mods, qm.From("\"voucher_product_variants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"voucher_product_variants\".*"})
	}

	return voucherProductVariantQuery{q}
}

// FindVoucherProductVariant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoucherProductVariant(exec boil.Executor, iD string, selectCols ...string) (*VoucherProductVariant, error) {
	voucherProductVariantObj := &VoucherProductVariant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"voucher_product_variants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, voucherProductVariantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from voucher_product_variants")
	}

	return voucherProductVariantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VoucherProductVariant) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no voucher_product_variants provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(voucherProductVariantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voucherProductVariantInsertCacheMut.RLock()
	cache, cached := voucherProductVariantInsertCache[key]
	voucherProductVariantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voucherProductVariantAllColumns,
			voucherProductVariantColumnsWithDefault,
			voucherProductVariantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voucherProductVariantType, voucherProductVariantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voucherProductVariantType, voucherProductVariantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"voucher_product_variants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"voucher_product_variants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into voucher_product_variants")
	}

	if !cached {
		voucherProductVariantInsertCacheMut.Lock()
		voucherProductVariantInsertCache[key] = cache
		voucherProductVariantInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the VoucherProductVariant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VoucherProductVariant) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	voucherProductVariantUpdateCacheMut.RLock()
	cache, cached := voucherProductVariantUpdateCache[key]
	voucherProductVariantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voucherProductVariantAllColumns,
			voucherProductVariantPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update voucher_product_variants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"voucher_product_variants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, voucherProductVariantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voucherProductVariantType, voucherProductVariantMapping, append(wl, voucherProductVariantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update voucher_product_variants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for voucher_product_variants")
	}

	if !cached {
		voucherProductVariantUpdateCacheMut.Lock()
		voucherProductVariantUpdateCache[key] = cache
		voucherProductVariantUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q voucherProductVariantQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for voucher_product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for voucher_product_variants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoucherProductVariantSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]any, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherProductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"voucher_product_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, voucherProductVariantPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in voucherProductVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all voucherProductVariant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VoucherProductVariant) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no voucher_product_variants provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherProductVariantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voucherProductVariantUpsertCacheMut.RLock()
	cache, cached := voucherProductVariantUpsertCache[key]
	voucherProductVariantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			voucherProductVariantAllColumns,
			voucherProductVariantColumnsWithDefault,
			voucherProductVariantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voucherProductVariantAllColumns,
			voucherProductVariantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert voucher_product_variants, could not build update column list")
		}

		ret := strmangle.SetComplement(voucherProductVariantAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(voucherProductVariantPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert voucher_product_variants, could not build conflict column list")
			}

			conflict = make([]string, len(voucherProductVariantPrimaryKeyColumns))
			copy(conflict, voucherProductVariantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"voucher_product_variants\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(voucherProductVariantType, voucherProductVariantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voucherProductVariantType, voucherProductVariantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []any
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert voucher_product_variants")
	}

	if !cached {
		voucherProductVariantUpsertCacheMut.Lock()
		voucherProductVariantUpsertCache[key] = cache
		voucherProductVariantUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single VoucherProductVariant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VoucherProductVariant) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no VoucherProductVariant provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voucherProductVariantPrimaryKeyMapping)
	sql := "DELETE FROM \"voucher_product_variants\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from voucher_product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for voucher_product_variants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voucherProductVariantQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no voucherProductVariantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from voucher_product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for voucher_product_variants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoucherProductVariantSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []any
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherProductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"voucher_product_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherProductVariantPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from voucherProductVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for voucher_product_variants")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VoucherProductVariant) Reload(exec boil.Executor) error {
	ret, err := FindVoucherProductVariant(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoucherProductVariantSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoucherProductVariantSlice{}
	var args []any
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherProductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"voucher_product_variants\".* FROM \"voucher_product_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherProductVariantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in VoucherProductVariantSlice")
	}

	*o = slice

	return nil
}

// VoucherProductVariantExists checks if the VoucherProductVariant row exists.
func VoucherProductVariantExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"voucher_product_variants\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if voucher_product_variants exists")
	}

	return exists, nil
}

// Exists checks if the VoucherProductVariant row exists.
func (o *VoucherProductVariant) Exists(exec boil.Executor) (bool, error) {
	return VoucherProductVariantExists(exec, o.ID)
}
