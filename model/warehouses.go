// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Warehouse is an object representing the database table.
type Warehouse struct {
	ID                    string                         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                  string                         `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug                  string                         `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	AddressID             model_types.NullString         `boil:"address_id" json:"address_id,omitempty" toml:"address_id" yaml:"address_id,omitempty"`
	Email                 string                         `boil:"email" json:"email" toml:"email" yaml:"email"`
	ClickAndCollectOption WarehouseClickAndCollectOption `boil:"click_and_collect_option" json:"click_and_collect_option" toml:"click_and_collect_option" yaml:"click_and_collect_option"`
	IsPrivate             model_types.NullBool           `boil:"is_private" json:"is_private,omitempty" toml:"is_private" yaml:"is_private,omitempty"`
	CreatedAt             int64                          `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Metadata              model_types.JSONString         `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata       model_types.JSONString         `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *warehouseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L warehouseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WarehouseColumns = struct {
	ID                    string
	Name                  string
	Slug                  string
	AddressID             string
	Email                 string
	ClickAndCollectOption string
	IsPrivate             string
	CreatedAt             string
	Metadata              string
	PrivateMetadata       string
}{
	ID:                    "id",
	Name:                  "name",
	Slug:                  "slug",
	AddressID:             "address_id",
	Email:                 "email",
	ClickAndCollectOption: "click_and_collect_option",
	IsPrivate:             "is_private",
	CreatedAt:             "created_at",
	Metadata:              "metadata",
	PrivateMetadata:       "private_metadata",
}

var WarehouseTableColumns = struct {
	ID                    string
	Name                  string
	Slug                  string
	AddressID             string
	Email                 string
	ClickAndCollectOption string
	IsPrivate             string
	CreatedAt             string
	Metadata              string
	PrivateMetadata       string
}{
	ID:                    "warehouses.id",
	Name:                  "warehouses.name",
	Slug:                  "warehouses.slug",
	AddressID:             "warehouses.address_id",
	Email:                 "warehouses.email",
	ClickAndCollectOption: "warehouses.click_and_collect_option",
	IsPrivate:             "warehouses.is_private",
	CreatedAt:             "warehouses.created_at",
	Metadata:              "warehouses.metadata",
	PrivateMetadata:       "warehouses.private_metadata",
}

// Generated where

type whereHelperWarehouseClickAndCollectOption struct{ field string }

func (w whereHelperWarehouseClickAndCollectOption) EQ(x WarehouseClickAndCollectOption) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperWarehouseClickAndCollectOption) NEQ(x WarehouseClickAndCollectOption) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperWarehouseClickAndCollectOption) LT(x WarehouseClickAndCollectOption) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperWarehouseClickAndCollectOption) LTE(x WarehouseClickAndCollectOption) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperWarehouseClickAndCollectOption) GT(x WarehouseClickAndCollectOption) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperWarehouseClickAndCollectOption) GTE(x WarehouseClickAndCollectOption) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperWarehouseClickAndCollectOption) IN(slice []WarehouseClickAndCollectOption) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperWarehouseClickAndCollectOption) NIN(slice []WarehouseClickAndCollectOption) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var WarehouseWhere = struct {
	ID                    whereHelperstring
	Name                  whereHelperstring
	Slug                  whereHelperstring
	AddressID             whereHelpermodel_types_NullString
	Email                 whereHelperstring
	ClickAndCollectOption whereHelperWarehouseClickAndCollectOption
	IsPrivate             whereHelpermodel_types_NullBool
	CreatedAt             whereHelperint64
	Metadata              whereHelpermodel_types_JSONString
	PrivateMetadata       whereHelpermodel_types_JSONString
}{
	ID:                    whereHelperstring{field: "\"warehouses\".\"id\""},
	Name:                  whereHelperstring{field: "\"warehouses\".\"name\""},
	Slug:                  whereHelperstring{field: "\"warehouses\".\"slug\""},
	AddressID:             whereHelpermodel_types_NullString{field: "\"warehouses\".\"address_id\""},
	Email:                 whereHelperstring{field: "\"warehouses\".\"email\""},
	ClickAndCollectOption: whereHelperWarehouseClickAndCollectOption{field: "\"warehouses\".\"click_and_collect_option\""},
	IsPrivate:             whereHelpermodel_types_NullBool{field: "\"warehouses\".\"is_private\""},
	CreatedAt:             whereHelperint64{field: "\"warehouses\".\"created_at\""},
	Metadata:              whereHelpermodel_types_JSONString{field: "\"warehouses\".\"metadata\""},
	PrivateMetadata:       whereHelpermodel_types_JSONString{field: "\"warehouses\".\"private_metadata\""},
}

// WarehouseRels is where relationship names are stored.
var WarehouseRels = struct {
	Address                  string
	CollectionPointCheckouts string
	CollectionPointOrders    string
	Stocks                   string
	WarehouseShippingZones   string
}{
	Address:                  "Address",
	CollectionPointCheckouts: "CollectionPointCheckouts",
	CollectionPointOrders:    "CollectionPointOrders",
	Stocks:                   "Stocks",
	WarehouseShippingZones:   "WarehouseShippingZones",
}

// warehouseR is where relationships are stored.
type warehouseR struct {
	Address                  *Address                   `boil:"Address" json:"Address" toml:"Address" yaml:"Address"`
	CollectionPointCheckouts CheckoutSlice              `boil:"CollectionPointCheckouts" json:"CollectionPointCheckouts" toml:"CollectionPointCheckouts" yaml:"CollectionPointCheckouts"`
	CollectionPointOrders    OrderSlice                 `boil:"CollectionPointOrders" json:"CollectionPointOrders" toml:"CollectionPointOrders" yaml:"CollectionPointOrders"`
	Stocks                   StockSlice                 `boil:"Stocks" json:"Stocks" toml:"Stocks" yaml:"Stocks"`
	WarehouseShippingZones   WarehouseShippingZoneSlice `boil:"WarehouseShippingZones" json:"WarehouseShippingZones" toml:"WarehouseShippingZones" yaml:"WarehouseShippingZones"`
}

// NewStruct creates a new relationship struct
func (*warehouseR) NewStruct() *warehouseR {
	return &warehouseR{}
}

func (r *warehouseR) GetAddress() *Address {
	if r == nil {
		return nil
	}
	return r.Address
}

func (r *warehouseR) GetCollectionPointCheckouts() CheckoutSlice {
	if r == nil {
		return nil
	}
	return r.CollectionPointCheckouts
}

func (r *warehouseR) GetCollectionPointOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.CollectionPointOrders
}

func (r *warehouseR) GetStocks() StockSlice {
	if r == nil {
		return nil
	}
	return r.Stocks
}

func (r *warehouseR) GetWarehouseShippingZones() WarehouseShippingZoneSlice {
	if r == nil {
		return nil
	}
	return r.WarehouseShippingZones
}

// warehouseL is where Load methods for each relationship are stored.
type warehouseL struct{}

var (
	warehouseAllColumns            = []string{"id", "name", "slug", "address_id", "email", "click_and_collect_option", "is_private", "created_at", "metadata", "private_metadata"}
	warehouseColumnsWithoutDefault = []string{"id", "name", "slug", "email", "click_and_collect_option", "created_at"}
	warehouseColumnsWithDefault    = []string{"address_id", "is_private", "metadata", "private_metadata"}
	warehousePrimaryKeyColumns     = []string{"id"}
	warehouseGeneratedColumns      = []string{}
)

type (
	// WarehouseSlice is an alias for a slice of pointers to Warehouse.
	// This should almost always be used instead of []Warehouse.
	WarehouseSlice []*Warehouse

	warehouseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	warehouseType                 = reflect.TypeOf(&Warehouse{})
	warehouseMapping              = queries.MakeStructMapping(warehouseType)
	warehousePrimaryKeyMapping, _ = queries.BindMapping(warehouseType, warehouseMapping, warehousePrimaryKeyColumns)
	warehouseInsertCacheMut       sync.RWMutex
	warehouseInsertCache          = make(map[string]insertCache)
	warehouseUpdateCacheMut       sync.RWMutex
	warehouseUpdateCache          = make(map[string]updateCache)
	warehouseUpsertCacheMut       sync.RWMutex
	warehouseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single warehouse record from the query.
func (q warehouseQuery) One(exec boil.Executor) (*Warehouse, error) {
	o := &Warehouse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for warehouses")
	}

	return o, nil
}

// All returns all Warehouse records from the query.
func (q warehouseQuery) All(exec boil.Executor) (WarehouseSlice, error) {
	var o []*Warehouse

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Warehouse slice")
	}

	return o, nil
}

// Count returns the count of all Warehouse records in the query.
func (q warehouseQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count warehouses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q warehouseQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if warehouses exists")
	}

	return count > 0, nil
}

// Address pointed to by the foreign key.
func (o *Warehouse) Address(mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	return Addresses(queryMods...)
}

// CollectionPointCheckouts retrieves all the checkout's Checkouts with an executor via collection_point_id column.
func (o *Warehouse) CollectionPointCheckouts(mods ...qm.QueryMod) checkoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkouts\".\"collection_point_id\"=?", o.ID),
	)

	return Checkouts(queryMods...)
}

// CollectionPointOrders retrieves all the order's Orders with an executor via collection_point_id column.
func (o *Warehouse) CollectionPointOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"collection_point_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// Stocks retrieves all the stock's Stocks with an executor.
func (o *Warehouse) Stocks(mods ...qm.QueryMod) stockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stocks\".\"warehouse_id\"=?", o.ID),
	)

	return Stocks(queryMods...)
}

// WarehouseShippingZones retrieves all the warehouse_shipping_zone's WarehouseShippingZones with an executor.
func (o *Warehouse) WarehouseShippingZones(mods ...qm.QueryMod) warehouseShippingZoneQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"warehouse_shipping_zones\".\"warehouse_id\"=?", o.ID),
	)

	return WarehouseShippingZones(queryMods...)
}

// LoadAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (warehouseL) LoadAddress(e boil.Executor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		if !queries.IsNil(object.AddressID) {
			args[object.AddressID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}

			if !queries.IsNil(obj.AddressID) {
				args[obj.AddressID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`addresses`),
		qm.WhereIn(`addresses.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for addresses")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Address = foreign
		if foreign.R == nil {
			foreign.R = &addressR{}
		}
		foreign.R.Warehouses = append(foreign.R.Warehouses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AddressID, foreign.ID) {
				local.R.Address = foreign
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.Warehouses = append(foreign.R.Warehouses, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionPointCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadCollectionPointCheckouts(e boil.Executor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.collection_point_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkouts")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if singular {
		object.R.CollectionPointCheckouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutR{}
			}
			foreign.R.CollectionPoint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CollectionPointID) {
				local.R.CollectionPointCheckouts = append(local.R.CollectionPointCheckouts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.CollectionPoint = local
				break
			}
		}
	}

	return nil
}

// LoadCollectionPointOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadCollectionPointOrders(e boil.Executor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.collection_point_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if singular {
		object.R.CollectionPointOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.CollectionPoint = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CollectionPointID) {
				local.R.CollectionPointOrders = append(local.R.CollectionPointOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.CollectionPoint = local
				break
			}
		}
	}

	return nil
}

// LoadStocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadStocks(e boil.Executor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`stocks`),
		qm.WhereIn(`stocks.warehouse_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stocks")
	}

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stocks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stocks")
	}

	if singular {
		object.R.Stocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockR{}
			}
			foreign.R.Warehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WarehouseID {
				local.R.Stocks = append(local.R.Stocks, foreign)
				if foreign.R == nil {
					foreign.R = &stockR{}
				}
				foreign.R.Warehouse = local
				break
			}
		}
	}

	return nil
}

// LoadWarehouseShippingZones allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadWarehouseShippingZones(e boil.Executor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`warehouse_shipping_zones`),
		qm.WhereIn(`warehouse_shipping_zones.warehouse_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load warehouse_shipping_zones")
	}

	var resultSlice []*WarehouseShippingZone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice warehouse_shipping_zones")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on warehouse_shipping_zones")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouse_shipping_zones")
	}

	if singular {
		object.R.WarehouseShippingZones = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &warehouseShippingZoneR{}
			}
			foreign.R.Warehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WarehouseID {
				local.R.WarehouseShippingZones = append(local.R.WarehouseShippingZones, foreign)
				if foreign.R == nil {
					foreign.R = &warehouseShippingZoneR{}
				}
				foreign.R.Warehouse = local
				break
			}
		}
	}

	return nil
}

// SetAddress of the warehouse to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Warehouses.
func (o *Warehouse) SetAddress(exec boil.Executor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"warehouses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"address_id"}),
		strmangle.WhereClause("\"", "\"", 2, warehousePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AddressID, related.ID)
	if o.R == nil {
		o.R = &warehouseR{
			Address: related,
		}
	} else {
		o.R.Address = related
	}

	if related.R == nil {
		related.R = &addressR{
			Warehouses: WarehouseSlice{o},
		}
	} else {
		related.R.Warehouses = append(related.R.Warehouses, o)
	}

	return nil
}

// RemoveAddress relationship.
// Sets o.R.Address to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Warehouse) RemoveAddress(exec boil.Executor, related *Address) error {
	var err error

	queries.SetScanner(&o.AddressID, nil)
	if _, err = o.Update(exec, boil.Whitelist("address_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Address = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Warehouses {
		if queries.Equal(o.AddressID, ri.AddressID) {
			continue
		}

		ln := len(related.R.Warehouses)
		if ln > 1 && i < ln-1 {
			related.R.Warehouses[i] = related.R.Warehouses[ln-1]
		}
		related.R.Warehouses = related.R.Warehouses[:ln-1]
		break
	}
	return nil
}

// AddCollectionPointCheckouts adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.CollectionPointCheckouts.
// Sets related.R.CollectionPoint appropriately.
func (o *Warehouse) AddCollectionPointCheckouts(exec boil.Executor, insert bool, related ...*Checkout) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CollectionPointID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collection_point_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CollectionPointID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			CollectionPointCheckouts: related,
		}
	} else {
		o.R.CollectionPointCheckouts = append(o.R.CollectionPointCheckouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutR{
				CollectionPoint: o,
			}
		} else {
			rel.R.CollectionPoint = o
		}
	}
	return nil
}

// SetCollectionPointCheckouts removes all previously related items of the
// warehouse replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CollectionPoint's CollectionPointCheckouts accordingly.
// Replaces o.R.CollectionPointCheckouts with related.
// Sets related.R.CollectionPoint's CollectionPointCheckouts accordingly.
func (o *Warehouse) SetCollectionPointCheckouts(exec boil.Executor, insert bool, related ...*Checkout) error {
	query := "update \"checkouts\" set \"collection_point_id\" = null where \"collection_point_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CollectionPointCheckouts {
			queries.SetScanner(&rel.CollectionPointID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CollectionPoint = nil
		}
		o.R.CollectionPointCheckouts = nil
	}

	return o.AddCollectionPointCheckouts(exec, insert, related...)
}

// RemoveCollectionPointCheckouts relationships from objects passed in.
// Removes related items from R.CollectionPointCheckouts (uses pointer comparison, removal does not keep order)
// Sets related.R.CollectionPoint.
func (o *Warehouse) RemoveCollectionPointCheckouts(exec boil.Executor, related ...*Checkout) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CollectionPointID, nil)
		if rel.R != nil {
			rel.R.CollectionPoint = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("collection_point_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CollectionPointCheckouts {
			if rel != ri {
				continue
			}

			ln := len(o.R.CollectionPointCheckouts)
			if ln > 1 && i < ln-1 {
				o.R.CollectionPointCheckouts[i] = o.R.CollectionPointCheckouts[ln-1]
			}
			o.R.CollectionPointCheckouts = o.R.CollectionPointCheckouts[:ln-1]
			break
		}
	}

	return nil
}

// AddCollectionPointOrders adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.CollectionPointOrders.
// Sets related.R.CollectionPoint appropriately.
func (o *Warehouse) AddCollectionPointOrders(exec boil.Executor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CollectionPointID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collection_point_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CollectionPointID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			CollectionPointOrders: related,
		}
	} else {
		o.R.CollectionPointOrders = append(o.R.CollectionPointOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				CollectionPoint: o,
			}
		} else {
			rel.R.CollectionPoint = o
		}
	}
	return nil
}

// SetCollectionPointOrders removes all previously related items of the
// warehouse replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CollectionPoint's CollectionPointOrders accordingly.
// Replaces o.R.CollectionPointOrders with related.
// Sets related.R.CollectionPoint's CollectionPointOrders accordingly.
func (o *Warehouse) SetCollectionPointOrders(exec boil.Executor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"collection_point_id\" = null where \"collection_point_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CollectionPointOrders {
			queries.SetScanner(&rel.CollectionPointID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CollectionPoint = nil
		}
		o.R.CollectionPointOrders = nil
	}

	return o.AddCollectionPointOrders(exec, insert, related...)
}

// RemoveCollectionPointOrders relationships from objects passed in.
// Removes related items from R.CollectionPointOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.CollectionPoint.
func (o *Warehouse) RemoveCollectionPointOrders(exec boil.Executor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CollectionPointID, nil)
		if rel.R != nil {
			rel.R.CollectionPoint = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("collection_point_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CollectionPointOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.CollectionPointOrders)
			if ln > 1 && i < ln-1 {
				o.R.CollectionPointOrders[i] = o.R.CollectionPointOrders[ln-1]
			}
			o.R.CollectionPointOrders = o.R.CollectionPointOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddStocks adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.Stocks.
// Sets related.R.Warehouse appropriately.
func (o *Warehouse) AddStocks(exec boil.Executor, insert bool, related ...*Stock) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WarehouseID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stocks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"warehouse_id"}),
				strmangle.WhereClause("\"", "\"", 2, stockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WarehouseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			Stocks: related,
		}
	} else {
		o.R.Stocks = append(o.R.Stocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockR{
				Warehouse: o,
			}
		} else {
			rel.R.Warehouse = o
		}
	}
	return nil
}

// AddWarehouseShippingZones adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.WarehouseShippingZones.
// Sets related.R.Warehouse appropriately.
func (o *Warehouse) AddWarehouseShippingZones(exec boil.Executor, insert bool, related ...*WarehouseShippingZone) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WarehouseID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"warehouse_shipping_zones\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"warehouse_id"}),
				strmangle.WhereClause("\"", "\"", 2, warehouseShippingZonePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WarehouseID = o.ID
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			WarehouseShippingZones: related,
		}
	} else {
		o.R.WarehouseShippingZones = append(o.R.WarehouseShippingZones, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &warehouseShippingZoneR{
				Warehouse: o,
			}
		} else {
			rel.R.Warehouse = o
		}
	}
	return nil
}

// Warehouses retrieves all the records using an executor.
func Warehouses(mods ...qm.QueryMod) warehouseQuery {
	mods = append(mods, qm.From("\"warehouses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"warehouses\".*"})
	}

	return warehouseQuery{q}
}

// FindWarehouse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWarehouse(exec boil.Executor, iD string, selectCols ...string) (*Warehouse, error) {
	warehouseObj := &Warehouse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"warehouses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, warehouseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from warehouses")
	}

	return warehouseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Warehouse) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no warehouses provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(warehouseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	warehouseInsertCacheMut.RLock()
	cache, cached := warehouseInsertCache[key]
	warehouseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			warehouseAllColumns,
			warehouseColumnsWithDefault,
			warehouseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(warehouseType, warehouseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"warehouses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"warehouses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into warehouses")
	}

	if !cached {
		warehouseInsertCacheMut.Lock()
		warehouseInsertCache[key] = cache
		warehouseInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Warehouse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Warehouse) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	warehouseUpdateCacheMut.RLock()
	cache, cached := warehouseUpdateCache[key]
	warehouseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update warehouses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"warehouses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, warehousePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, append(wl, warehousePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update warehouses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for warehouses")
	}

	if !cached {
		warehouseUpdateCacheMut.Lock()
		warehouseUpdateCache[key] = cache
		warehouseUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q warehouseQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for warehouses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WarehouseSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"warehouses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, warehousePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in warehouse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all warehouse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Warehouse) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no warehouses provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	warehouseUpsertCacheMut.RLock()
	cache, cached := warehouseUpsertCache[key]
	warehouseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			warehouseAllColumns,
			warehouseColumnsWithDefault,
			warehouseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert warehouses, could not build update column list")
		}

		ret := strmangle.SetComplement(warehouseAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(warehousePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert warehouses, could not build conflict column list")
			}

			conflict = make([]string, len(warehousePrimaryKeyColumns))
			copy(conflict, warehousePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"warehouses\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(warehouseType, warehouseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert warehouses")
	}

	if !cached {
		warehouseUpsertCacheMut.Lock()
		warehouseUpsertCache[key] = cache
		warehouseUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Warehouse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Warehouse) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Warehouse provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), warehousePrimaryKeyMapping)
	sql := "DELETE FROM \"warehouses\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for warehouses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q warehouseQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no warehouseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for warehouses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WarehouseSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"warehouses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehousePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from warehouse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for warehouses")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Warehouse) Reload(exec boil.Executor) error {
	ret, err := FindWarehouse(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WarehouseSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WarehouseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"warehouses\".* FROM \"warehouses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehousePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in WarehouseSlice")
	}

	*o = slice

	return nil
}

// WarehouseExists checks if the Warehouse row exists.
func WarehouseExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"warehouses\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if warehouses exists")
	}

	return exists, nil
}

// Exists checks if the Warehouse row exists.
func (o *Warehouse) Exists(exec boil.Executor) (bool, error) {
	return WarehouseExists(exec, o.ID)
}
