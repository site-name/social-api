// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Warehouse is an object representing the database table.
type Warehouse struct {
	ID                    string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                  string                 `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug                  string                 `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	AddressID             model_types.NullString `boil:"address_id" json:"address_id,omitempty" toml:"address_id" yaml:"address_id,omitempty"`
	Email                 string                 `boil:"email" json:"email" toml:"email" yaml:"email"`
	ClickAndCollectOption string                 `boil:"click_and_collect_option" json:"click_and_collect_option" toml:"click_and_collect_option" yaml:"click_and_collect_option"`
	IsPrivate             model_types.NullBool   `boil:"is_private" json:"is_private,omitempty" toml:"is_private" yaml:"is_private,omitempty"`
	CreatedAt             int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Metadata              model_types.JsonMap    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata       model_types.JsonMap    `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *warehouseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L warehouseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WarehouseColumns = struct {
	ID                    string
	Name                  string
	Slug                  string
	AddressID             string
	Email                 string
	ClickAndCollectOption string
	IsPrivate             string
	CreatedAt             string
	Metadata              string
	PrivateMetadata       string
}{
	ID:                    "id",
	Name:                  "name",
	Slug:                  "slug",
	AddressID:             "address_id",
	Email:                 "email",
	ClickAndCollectOption: "click_and_collect_option",
	IsPrivate:             "is_private",
	CreatedAt:             "created_at",
	Metadata:              "metadata",
	PrivateMetadata:       "private_metadata",
}

var WarehouseTableColumns = struct {
	ID                    string
	Name                  string
	Slug                  string
	AddressID             string
	Email                 string
	ClickAndCollectOption string
	IsPrivate             string
	CreatedAt             string
	Metadata              string
	PrivateMetadata       string
}{
	ID:                    "warehouses.id",
	Name:                  "warehouses.name",
	Slug:                  "warehouses.slug",
	AddressID:             "warehouses.address_id",
	Email:                 "warehouses.email",
	ClickAndCollectOption: "warehouses.click_and_collect_option",
	IsPrivate:             "warehouses.is_private",
	CreatedAt:             "warehouses.created_at",
	Metadata:              "warehouses.metadata",
	PrivateMetadata:       "warehouses.private_metadata",
}

// Generated where

var WarehouseWhere = struct {
	ID                    whereHelperstring
	Name                  whereHelperstring
	Slug                  whereHelperstring
	AddressID             whereHelpermodel_types_NullString
	Email                 whereHelperstring
	ClickAndCollectOption whereHelperstring
	IsPrivate             whereHelpermodel_types_NullBool
	CreatedAt             whereHelperint64
	Metadata              whereHelpermodel_types_JsonMap
	PrivateMetadata       whereHelpermodel_types_JsonMap
}{
	ID:                    whereHelperstring{field: "\"warehouses\".\"id\""},
	Name:                  whereHelperstring{field: "\"warehouses\".\"name\""},
	Slug:                  whereHelperstring{field: "\"warehouses\".\"slug\""},
	AddressID:             whereHelpermodel_types_NullString{field: "\"warehouses\".\"address_id\""},
	Email:                 whereHelperstring{field: "\"warehouses\".\"email\""},
	ClickAndCollectOption: whereHelperstring{field: "\"warehouses\".\"click_and_collect_option\""},
	IsPrivate:             whereHelpermodel_types_NullBool{field: "\"warehouses\".\"is_private\""},
	CreatedAt:             whereHelperint64{field: "\"warehouses\".\"created_at\""},
	Metadata:              whereHelpermodel_types_JsonMap{field: "\"warehouses\".\"metadata\""},
	PrivateMetadata:       whereHelpermodel_types_JsonMap{field: "\"warehouses\".\"private_metadata\""},
}

// WarehouseRels is where relationship names are stored.
var WarehouseRels = struct {
}{}

// warehouseR is where relationships are stored.
type warehouseR struct {
}

// NewStruct creates a new relationship struct
func (*warehouseR) NewStruct() *warehouseR {
	return &warehouseR{}
}

// warehouseL is where Load methods for each relationship are stored.
type warehouseL struct{}

var (
	warehouseAllColumns            = []string{"id", "name", "slug", "address_id", "email", "click_and_collect_option", "is_private", "created_at", "metadata", "private_metadata"}
	warehouseColumnsWithoutDefault = []string{"name", "slug", "email", "click_and_collect_option", "created_at"}
	warehouseColumnsWithDefault    = []string{"id", "address_id", "is_private", "metadata", "private_metadata"}
	warehousePrimaryKeyColumns     = []string{"id"}
	warehouseGeneratedColumns      = []string{}
)

type (
	// WarehouseSlice is an alias for a slice of pointers to Warehouse.
	// This should almost always be used instead of []Warehouse.
	WarehouseSlice []*Warehouse

	warehouseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	warehouseType                 = reflect.TypeOf(&Warehouse{})
	warehouseMapping              = queries.MakeStructMapping(warehouseType)
	warehousePrimaryKeyMapping, _ = queries.BindMapping(warehouseType, warehouseMapping, warehousePrimaryKeyColumns)
	warehouseInsertCacheMut       sync.RWMutex
	warehouseInsertCache          = make(map[string]insertCache)
	warehouseUpdateCacheMut       sync.RWMutex
	warehouseUpdateCache          = make(map[string]updateCache)
	warehouseUpsertCacheMut       sync.RWMutex
	warehouseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single warehouse record from the query.
func (q warehouseQuery) One(exec boil.Executor) (*Warehouse, error) {
	o := &Warehouse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for warehouses")
	}

	return o, nil
}

// All returns all Warehouse records from the query.
func (q warehouseQuery) All(exec boil.Executor) (WarehouseSlice, error) {
	var o []*Warehouse

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Warehouse slice")
	}

	return o, nil
}

// Count returns the count of all Warehouse records in the query.
func (q warehouseQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count warehouses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q warehouseQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if warehouses exists")
	}

	return count > 0, nil
}

// Warehouses retrieves all the records using an executor.
func Warehouses(mods ...qm.QueryMod) warehouseQuery {
	mods = append(mods, qm.From("\"warehouses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"warehouses\".*"})
	}

	return warehouseQuery{q}
}

// FindWarehouse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWarehouse(exec boil.Executor, iD string, selectCols ...string) (*Warehouse, error) {
	warehouseObj := &Warehouse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"warehouses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, warehouseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from warehouses")
	}

	return warehouseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Warehouse) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no warehouses provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(warehouseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	warehouseInsertCacheMut.RLock()
	cache, cached := warehouseInsertCache[key]
	warehouseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			warehouseAllColumns,
			warehouseColumnsWithDefault,
			warehouseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(warehouseType, warehouseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"warehouses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"warehouses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into warehouses")
	}

	if !cached {
		warehouseInsertCacheMut.Lock()
		warehouseInsertCache[key] = cache
		warehouseInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Warehouse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Warehouse) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	warehouseUpdateCacheMut.RLock()
	cache, cached := warehouseUpdateCache[key]
	warehouseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update warehouses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"warehouses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, warehousePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, append(wl, warehousePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update warehouses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for warehouses")
	}

	if !cached {
		warehouseUpdateCacheMut.Lock()
		warehouseUpdateCache[key] = cache
		warehouseUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q warehouseQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for warehouses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WarehouseSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"warehouses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, warehousePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in warehouse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all warehouse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Warehouse) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no warehouses provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	warehouseUpsertCacheMut.RLock()
	cache, cached := warehouseUpsertCache[key]
	warehouseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			warehouseAllColumns,
			warehouseColumnsWithDefault,
			warehouseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert warehouses, could not build update column list")
		}

		ret := strmangle.SetComplement(warehouseAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(warehousePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert warehouses, could not build conflict column list")
			}

			conflict = make([]string, len(warehousePrimaryKeyColumns))
			copy(conflict, warehousePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"warehouses\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(warehouseType, warehouseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert warehouses")
	}

	if !cached {
		warehouseUpsertCacheMut.Lock()
		warehouseUpsertCache[key] = cache
		warehouseUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Warehouse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Warehouse) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Warehouse provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), warehousePrimaryKeyMapping)
	sql := "DELETE FROM \"warehouses\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for warehouses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q warehouseQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no warehouseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for warehouses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WarehouseSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"warehouses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehousePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from warehouse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for warehouses")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Warehouse) Reload(exec boil.Executor) error {
	ret, err := FindWarehouse(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WarehouseSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WarehouseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"warehouses\".* FROM \"warehouses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehousePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in WarehouseSlice")
	}

	*o = slice

	return nil
}

// WarehouseExists checks if the Warehouse row exists.
func WarehouseExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"warehouses\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if warehouses exists")
	}

	return exists, nil
}

// Exists checks if the Warehouse row exists.
func (o *Warehouse) Exists(exec boil.Executor) (bool, error) {
	return WarehouseExists(exec, o.ID)
}
