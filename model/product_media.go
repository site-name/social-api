// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductMedium is an object representing the database table.
type ProductMedium struct {
	ID          string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ProductID   string                 `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	Ppoi        string                 `boil:"ppoi" json:"ppoi" toml:"ppoi" yaml:"ppoi"`
	Image       string                 `boil:"image" json:"image" toml:"image" yaml:"image"`
	Alt         string                 `boil:"alt" json:"alt" toml:"alt" yaml:"alt"`
	Type        string                 `boil:"type" json:"type" toml:"type" yaml:"type"`
	ExternalURL model_types.NullString `boil:"external_url" json:"external_url,omitempty" toml:"external_url" yaml:"external_url,omitempty"`
	OembedData  model_types.JsonMap    `boil:"oembed_data" json:"oembed_data,omitempty" toml:"oembed_data" yaml:"oembed_data,omitempty"`
	SortOrder   model_types.NullInt    `boil:"sort_order" json:"sort_order,omitempty" toml:"sort_order" yaml:"sort_order,omitempty"`

	R *productMediumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productMediumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductMediumColumns = struct {
	ID          string
	CreatedAt   string
	ProductID   string
	Ppoi        string
	Image       string
	Alt         string
	Type        string
	ExternalURL string
	OembedData  string
	SortOrder   string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	ProductID:   "product_id",
	Ppoi:        "ppoi",
	Image:       "image",
	Alt:         "alt",
	Type:        "type",
	ExternalURL: "external_url",
	OembedData:  "oembed_data",
	SortOrder:   "sort_order",
}

var ProductMediumTableColumns = struct {
	ID          string
	CreatedAt   string
	ProductID   string
	Ppoi        string
	Image       string
	Alt         string
	Type        string
	ExternalURL string
	OembedData  string
	SortOrder   string
}{
	ID:          "product_media.id",
	CreatedAt:   "product_media.created_at",
	ProductID:   "product_media.product_id",
	Ppoi:        "product_media.ppoi",
	Image:       "product_media.image",
	Alt:         "product_media.alt",
	Type:        "product_media.type",
	ExternalURL: "product_media.external_url",
	OembedData:  "product_media.oembed_data",
	SortOrder:   "product_media.sort_order",
}

// Generated where

var ProductMediumWhere = struct {
	ID          whereHelperstring
	CreatedAt   whereHelperint64
	ProductID   whereHelperstring
	Ppoi        whereHelperstring
	Image       whereHelperstring
	Alt         whereHelperstring
	Type        whereHelperstring
	ExternalURL whereHelpermodel_types_NullString
	OembedData  whereHelpermodel_types_JsonMap
	SortOrder   whereHelpermodel_types_NullInt
}{
	ID:          whereHelperstring{field: "\"product_media\".\"id\""},
	CreatedAt:   whereHelperint64{field: "\"product_media\".\"created_at\""},
	ProductID:   whereHelperstring{field: "\"product_media\".\"product_id\""},
	Ppoi:        whereHelperstring{field: "\"product_media\".\"ppoi\""},
	Image:       whereHelperstring{field: "\"product_media\".\"image\""},
	Alt:         whereHelperstring{field: "\"product_media\".\"alt\""},
	Type:        whereHelperstring{field: "\"product_media\".\"type\""},
	ExternalURL: whereHelpermodel_types_NullString{field: "\"product_media\".\"external_url\""},
	OembedData:  whereHelpermodel_types_JsonMap{field: "\"product_media\".\"oembed_data\""},
	SortOrder:   whereHelpermodel_types_NullInt{field: "\"product_media\".\"sort_order\""},
}

// ProductMediumRels is where relationship names are stored.
var ProductMediumRels = struct {
	Product            string
	MediumVariantMedia string
}{
	Product:            "Product",
	MediumVariantMedia: "MediumVariantMedia",
}

// productMediumR is where relationships are stored.
type productMediumR struct {
	Product            *Product           `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	MediumVariantMedia VariantMediumSlice `boil:"MediumVariantMedia" json:"MediumVariantMedia" toml:"MediumVariantMedia" yaml:"MediumVariantMedia"`
}

// NewStruct creates a new relationship struct
func (*productMediumR) NewStruct() *productMediumR {
	return &productMediumR{}
}

func (r *productMediumR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *productMediumR) GetMediumVariantMedia() VariantMediumSlice {
	if r == nil {
		return nil
	}
	return r.MediumVariantMedia
}

// productMediumL is where Load methods for each relationship are stored.
type productMediumL struct{}

var (
	productMediumAllColumns            = []string{"id", "created_at", "product_id", "ppoi", "image", "alt", "type", "external_url", "oembed_data", "sort_order"}
	productMediumColumnsWithoutDefault = []string{"created_at", "product_id", "ppoi", "image", "alt", "type"}
	productMediumColumnsWithDefault    = []string{"id", "external_url", "oembed_data", "sort_order"}
	productMediumPrimaryKeyColumns     = []string{"id"}
	productMediumGeneratedColumns      = []string{}
)

type (
	// ProductMediumSlice is an alias for a slice of pointers to ProductMedium.
	// This should almost always be used instead of []ProductMedium.
	ProductMediumSlice []*ProductMedium

	productMediumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productMediumType                 = reflect.TypeOf(&ProductMedium{})
	productMediumMapping              = queries.MakeStructMapping(productMediumType)
	productMediumPrimaryKeyMapping, _ = queries.BindMapping(productMediumType, productMediumMapping, productMediumPrimaryKeyColumns)
	productMediumInsertCacheMut       sync.RWMutex
	productMediumInsertCache          = make(map[string]insertCache)
	productMediumUpdateCacheMut       sync.RWMutex
	productMediumUpdateCache          = make(map[string]updateCache)
	productMediumUpsertCacheMut       sync.RWMutex
	productMediumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single productMedium record from the query.
func (q productMediumQuery) One(exec boil.Executor) (*ProductMedium, error) {
	o := &ProductMedium{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for product_media")
	}

	return o, nil
}

// All returns all ProductMedium records from the query.
func (q productMediumQuery) All(exec boil.Executor) (ProductMediumSlice, error) {
	var o []*ProductMedium

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ProductMedium slice")
	}

	return o, nil
}

// Count returns the count of all ProductMedium records in the query.
func (q productMediumQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count product_media rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productMediumQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if product_media exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *ProductMedium) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// MediumVariantMedia retrieves all the variant_medium's VariantMedia with an executor via media_id column.
func (o *ProductMedium) MediumVariantMedia(mods ...qm.QueryMod) variantMediumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"variant_media\".\"media_id\"=?", o.ID),
	)

	return VariantMedia(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productMediumL) LoadProduct(e boil.Executor, singular bool, maybeProductMedium interface{}, mods queries.Applicator) error {
	var slice []*ProductMedium
	var object *ProductMedium

	if singular {
		var ok bool
		object, ok = maybeProductMedium.(*ProductMedium)
		if !ok {
			object = new(ProductMedium)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductMedium))
			}
		}
	} else {
		s, ok := maybeProductMedium.(*[]*ProductMedium)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductMedium))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productMediumR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productMediumR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductMedia = append(foreign.R.ProductMedia, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductMedia = append(foreign.R.ProductMedia, local)
				break
			}
		}
	}

	return nil
}

// LoadMediumVariantMedia allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productMediumL) LoadMediumVariantMedia(e boil.Executor, singular bool, maybeProductMedium interface{}, mods queries.Applicator) error {
	var slice []*ProductMedium
	var object *ProductMedium

	if singular {
		var ok bool
		object, ok = maybeProductMedium.(*ProductMedium)
		if !ok {
			object = new(ProductMedium)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductMedium))
			}
		}
	} else {
		s, ok := maybeProductMedium.(*[]*ProductMedium)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductMedium))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productMediumR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productMediumR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`variant_media`),
		qm.WhereIn(`variant_media.media_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load variant_media")
	}

	var resultSlice []*VariantMedium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice variant_media")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on variant_media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for variant_media")
	}

	if singular {
		object.R.MediumVariantMedia = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &variantMediumR{}
			}
			foreign.R.Medium = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MediaID {
				local.R.MediumVariantMedia = append(local.R.MediumVariantMedia, foreign)
				if foreign.R == nil {
					foreign.R = &variantMediumR{}
				}
				foreign.R.Medium = local
				break
			}
		}
	}

	return nil
}

// SetProduct of the productMedium to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductMedia.
func (o *ProductMedium) SetProduct(exec boil.Executor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_media\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productMediumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &productMediumR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductMedia: ProductMediumSlice{o},
		}
	} else {
		related.R.ProductMedia = append(related.R.ProductMedia, o)
	}

	return nil
}

// AddMediumVariantMedia adds the given related objects to the existing relationships
// of the product_medium, optionally inserting them as new records.
// Appends related to o.R.MediumVariantMedia.
// Sets related.R.Medium appropriately.
func (o *ProductMedium) AddMediumVariantMedia(exec boil.Executor, insert bool, related ...*VariantMedium) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MediaID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"variant_media\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"media_id"}),
				strmangle.WhereClause("\"", "\"", 2, variantMediumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MediaID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productMediumR{
			MediumVariantMedia: related,
		}
	} else {
		o.R.MediumVariantMedia = append(o.R.MediumVariantMedia, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &variantMediumR{
				Medium: o,
			}
		} else {
			rel.R.Medium = o
		}
	}
	return nil
}

// ProductMedia retrieves all the records using an executor.
func ProductMedia(mods ...qm.QueryMod) productMediumQuery {
	mods = append(mods, qm.From("\"product_media\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_media\".*"})
	}

	return productMediumQuery{q}
}

// FindProductMedium retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductMedium(exec boil.Executor, iD string, selectCols ...string) (*ProductMedium, error) {
	productMediumObj := &ProductMedium{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_media\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, productMediumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from product_media")
	}

	return productMediumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductMedium) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_media provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(productMediumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productMediumInsertCacheMut.RLock()
	cache, cached := productMediumInsertCache[key]
	productMediumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productMediumAllColumns,
			productMediumColumnsWithDefault,
			productMediumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productMediumType, productMediumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productMediumType, productMediumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_media\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_media\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into product_media")
	}

	if !cached {
		productMediumInsertCacheMut.Lock()
		productMediumInsertCache[key] = cache
		productMediumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ProductMedium.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductMedium) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	productMediumUpdateCacheMut.RLock()
	cache, cached := productMediumUpdateCache[key]
	productMediumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productMediumAllColumns,
			productMediumPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update product_media, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_media\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productMediumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productMediumType, productMediumMapping, append(wl, productMediumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update product_media row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for product_media")
	}

	if !cached {
		productMediumUpdateCacheMut.Lock()
		productMediumUpdateCache[key] = cache
		productMediumUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q productMediumQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for product_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for product_media")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductMediumSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_media\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productMediumPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in productMedium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all productMedium")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductMedium) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_media provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(productMediumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productMediumUpsertCacheMut.RLock()
	cache, cached := productMediumUpsertCache[key]
	productMediumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productMediumAllColumns,
			productMediumColumnsWithDefault,
			productMediumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productMediumAllColumns,
			productMediumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert product_media, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productMediumPrimaryKeyColumns))
			copy(conflict, productMediumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_media\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productMediumType, productMediumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productMediumType, productMediumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert product_media")
	}

	if !cached {
		productMediumUpsertCacheMut.Lock()
		productMediumUpsertCache[key] = cache
		productMediumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ProductMedium record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductMedium) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ProductMedium provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productMediumPrimaryKeyMapping)
	sql := "DELETE FROM \"product_media\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from product_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for product_media")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productMediumQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no productMediumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from product_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_media")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductMediumSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_media\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productMediumPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from productMedium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_media")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductMedium) Reload(exec boil.Executor) error {
	ret, err := FindProductMedium(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductMediumSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductMediumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_media\".* FROM \"product_media\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productMediumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ProductMediumSlice")
	}

	*o = slice

	return nil
}

// ProductMediumExists checks if the ProductMedium row exists.
func ProductMediumExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_media\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if product_media exists")
	}

	return exists, nil
}

// Exists checks if the ProductMedium row exists.
func (o *ProductMedium) Exists(exec boil.Executor) (bool, error) {
	return ProductMediumExists(exec, o.ID)
}
