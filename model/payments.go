// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/site-name/decimal"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Payment is an object representing the database table.
type Payment struct {
	ID                 string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Gateway            string                 `boil:"gateway" json:"gateway" toml:"gateway" yaml:"gateway"`
	IsActive           model_types.NullBool   `boil:"is_active" json:"is_active,omitempty" toml:"is_active" yaml:"is_active,omitempty"`
	ToConfirm          bool                   `boil:"to_confirm" json:"to_confirm" toml:"to_confirm" yaml:"to_confirm"`
	CreatedAt          int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          int64                  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ChargeStatus       Paymentchargestatus    `boil:"charge_status" json:"charge_status" toml:"charge_status" yaml:"charge_status"`
	Token              string                 `boil:"token" json:"token" toml:"token" yaml:"token"`
	Total              decimal.Decimal        `boil:"total" json:"total" toml:"total" yaml:"total"`
	CapturedAmount     decimal.Decimal        `boil:"captured_amount" json:"captured_amount" toml:"captured_amount" yaml:"captured_amount"`
	Currency           Currency               `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	CheckoutID         model_types.NullString `boil:"checkout_id" json:"checkout_id,omitempty" toml:"checkout_id" yaml:"checkout_id,omitempty"`
	OrderID            model_types.NullString `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	BillingEmail       string                 `boil:"billing_email" json:"billing_email" toml:"billing_email" yaml:"billing_email"`
	BillingFirstName   string                 `boil:"billing_first_name" json:"billing_first_name" toml:"billing_first_name" yaml:"billing_first_name"`
	BillingLastName    string                 `boil:"billing_last_name" json:"billing_last_name" toml:"billing_last_name" yaml:"billing_last_name"`
	BillingCompanyName string                 `boil:"billing_company_name" json:"billing_company_name" toml:"billing_company_name" yaml:"billing_company_name"`
	BillingAddress1    string                 `boil:"billing_address1" json:"billing_address1" toml:"billing_address1" yaml:"billing_address1"`
	BillingAddress2    string                 `boil:"billing_address2" json:"billing_address2" toml:"billing_address2" yaml:"billing_address2"`
	BillingCity        string                 `boil:"billing_city" json:"billing_city" toml:"billing_city" yaml:"billing_city"`
	BillingCityArea    string                 `boil:"billing_city_area" json:"billing_city_area" toml:"billing_city_area" yaml:"billing_city_area"`
	BillingPostalCode  string                 `boil:"billing_postal_code" json:"billing_postal_code" toml:"billing_postal_code" yaml:"billing_postal_code"`
	BillingCountryCode Countrycode            `boil:"billing_country_code" json:"billing_country_code" toml:"billing_country_code" yaml:"billing_country_code"`
	BillingCountryArea string                 `boil:"billing_country_area" json:"billing_country_area" toml:"billing_country_area" yaml:"billing_country_area"`
	CCFirstDigits      string                 `boil:"cc_first_digits" json:"cc_first_digits" toml:"cc_first_digits" yaml:"cc_first_digits"`
	CCLastDigits       string                 `boil:"cc_last_digits" json:"cc_last_digits" toml:"cc_last_digits" yaml:"cc_last_digits"`
	CCBrand            string                 `boil:"cc_brand" json:"cc_brand" toml:"cc_brand" yaml:"cc_brand"`
	CCExpMonth         model_types.NullInt    `boil:"cc_exp_month" json:"cc_exp_month,omitempty" toml:"cc_exp_month" yaml:"cc_exp_month,omitempty"`
	CCExpYear          model_types.NullInt    `boil:"cc_exp_year" json:"cc_exp_year,omitempty" toml:"cc_exp_year" yaml:"cc_exp_year,omitempty"`
	PaymentMethodType  string                 `boil:"payment_method_type" json:"payment_method_type" toml:"payment_method_type" yaml:"payment_method_type"`
	CustomerIPAddress  model_types.NullString `boil:"customer_ip_address" json:"customer_ip_address,omitempty" toml:"customer_ip_address" yaml:"customer_ip_address,omitempty"`
	ExtraData          string                 `boil:"extra_data" json:"extra_data" toml:"extra_data" yaml:"extra_data"`
	ReturnURL          model_types.NullString `boil:"return_url" json:"return_url,omitempty" toml:"return_url" yaml:"return_url,omitempty"`
	PSPReference       model_types.NullString `boil:"psp_reference" json:"psp_reference,omitempty" toml:"psp_reference" yaml:"psp_reference,omitempty"`
	StorePaymentMethod Storepaymentmethod     `boil:"store_payment_method" json:"store_payment_method" toml:"store_payment_method" yaml:"store_payment_method"`
	Metadata           model_types.JsonMap    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata    model_types.JsonMap    `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *paymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentColumns = struct {
	ID                 string
	Gateway            string
	IsActive           string
	ToConfirm          string
	CreatedAt          string
	UpdatedAt          string
	ChargeStatus       string
	Token              string
	Total              string
	CapturedAmount     string
	Currency           string
	CheckoutID         string
	OrderID            string
	BillingEmail       string
	BillingFirstName   string
	BillingLastName    string
	BillingCompanyName string
	BillingAddress1    string
	BillingAddress2    string
	BillingCity        string
	BillingCityArea    string
	BillingPostalCode  string
	BillingCountryCode string
	BillingCountryArea string
	CCFirstDigits      string
	CCLastDigits       string
	CCBrand            string
	CCExpMonth         string
	CCExpYear          string
	PaymentMethodType  string
	CustomerIPAddress  string
	ExtraData          string
	ReturnURL          string
	PSPReference       string
	StorePaymentMethod string
	Metadata           string
	PrivateMetadata    string
}{
	ID:                 "id",
	Gateway:            "gateway",
	IsActive:           "is_active",
	ToConfirm:          "to_confirm",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	ChargeStatus:       "charge_status",
	Token:              "token",
	Total:              "total",
	CapturedAmount:     "captured_amount",
	Currency:           "currency",
	CheckoutID:         "checkout_id",
	OrderID:            "order_id",
	BillingEmail:       "billing_email",
	BillingFirstName:   "billing_first_name",
	BillingLastName:    "billing_last_name",
	BillingCompanyName: "billing_company_name",
	BillingAddress1:    "billing_address1",
	BillingAddress2:    "billing_address2",
	BillingCity:        "billing_city",
	BillingCityArea:    "billing_city_area",
	BillingPostalCode:  "billing_postal_code",
	BillingCountryCode: "billing_country_code",
	BillingCountryArea: "billing_country_area",
	CCFirstDigits:      "cc_first_digits",
	CCLastDigits:       "cc_last_digits",
	CCBrand:            "cc_brand",
	CCExpMonth:         "cc_exp_month",
	CCExpYear:          "cc_exp_year",
	PaymentMethodType:  "payment_method_type",
	CustomerIPAddress:  "customer_ip_address",
	ExtraData:          "extra_data",
	ReturnURL:          "return_url",
	PSPReference:       "psp_reference",
	StorePaymentMethod: "store_payment_method",
	Metadata:           "metadata",
	PrivateMetadata:    "private_metadata",
}

var PaymentTableColumns = struct {
	ID                 string
	Gateway            string
	IsActive           string
	ToConfirm          string
	CreatedAt          string
	UpdatedAt          string
	ChargeStatus       string
	Token              string
	Total              string
	CapturedAmount     string
	Currency           string
	CheckoutID         string
	OrderID            string
	BillingEmail       string
	BillingFirstName   string
	BillingLastName    string
	BillingCompanyName string
	BillingAddress1    string
	BillingAddress2    string
	BillingCity        string
	BillingCityArea    string
	BillingPostalCode  string
	BillingCountryCode string
	BillingCountryArea string
	CCFirstDigits      string
	CCLastDigits       string
	CCBrand            string
	CCExpMonth         string
	CCExpYear          string
	PaymentMethodType  string
	CustomerIPAddress  string
	ExtraData          string
	ReturnURL          string
	PSPReference       string
	StorePaymentMethod string
	Metadata           string
	PrivateMetadata    string
}{
	ID:                 "payments.id",
	Gateway:            "payments.gateway",
	IsActive:           "payments.is_active",
	ToConfirm:          "payments.to_confirm",
	CreatedAt:          "payments.created_at",
	UpdatedAt:          "payments.updated_at",
	ChargeStatus:       "payments.charge_status",
	Token:              "payments.token",
	Total:              "payments.total",
	CapturedAmount:     "payments.captured_amount",
	Currency:           "payments.currency",
	CheckoutID:         "payments.checkout_id",
	OrderID:            "payments.order_id",
	BillingEmail:       "payments.billing_email",
	BillingFirstName:   "payments.billing_first_name",
	BillingLastName:    "payments.billing_last_name",
	BillingCompanyName: "payments.billing_company_name",
	BillingAddress1:    "payments.billing_address1",
	BillingAddress2:    "payments.billing_address2",
	BillingCity:        "payments.billing_city",
	BillingCityArea:    "payments.billing_city_area",
	BillingPostalCode:  "payments.billing_postal_code",
	BillingCountryCode: "payments.billing_country_code",
	BillingCountryArea: "payments.billing_country_area",
	CCFirstDigits:      "payments.cc_first_digits",
	CCLastDigits:       "payments.cc_last_digits",
	CCBrand:            "payments.cc_brand",
	CCExpMonth:         "payments.cc_exp_month",
	CCExpYear:          "payments.cc_exp_year",
	PaymentMethodType:  "payments.payment_method_type",
	CustomerIPAddress:  "payments.customer_ip_address",
	ExtraData:          "payments.extra_data",
	ReturnURL:          "payments.return_url",
	PSPReference:       "payments.psp_reference",
	StorePaymentMethod: "payments.store_payment_method",
	Metadata:           "payments.metadata",
	PrivateMetadata:    "payments.private_metadata",
}

// Generated where

type whereHelperPaymentchargestatus struct{ field string }

func (w whereHelperPaymentchargestatus) EQ(x Paymentchargestatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperPaymentchargestatus) NEQ(x Paymentchargestatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperPaymentchargestatus) LT(x Paymentchargestatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperPaymentchargestatus) LTE(x Paymentchargestatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperPaymentchargestatus) GT(x Paymentchargestatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperPaymentchargestatus) GTE(x Paymentchargestatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperPaymentchargestatus) IN(slice []Paymentchargestatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperPaymentchargestatus) NIN(slice []Paymentchargestatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperStorepaymentmethod struct{ field string }

func (w whereHelperStorepaymentmethod) EQ(x Storepaymentmethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperStorepaymentmethod) NEQ(x Storepaymentmethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperStorepaymentmethod) LT(x Storepaymentmethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperStorepaymentmethod) LTE(x Storepaymentmethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperStorepaymentmethod) GT(x Storepaymentmethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperStorepaymentmethod) GTE(x Storepaymentmethod) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperStorepaymentmethod) IN(slice []Storepaymentmethod) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperStorepaymentmethod) NIN(slice []Storepaymentmethod) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PaymentWhere = struct {
	ID                 whereHelperstring
	Gateway            whereHelperstring
	IsActive           whereHelpermodel_types_NullBool
	ToConfirm          whereHelperbool
	CreatedAt          whereHelperint64
	UpdatedAt          whereHelperint64
	ChargeStatus       whereHelperPaymentchargestatus
	Token              whereHelperstring
	Total              whereHelperdecimal_Decimal
	CapturedAmount     whereHelperdecimal_Decimal
	Currency           whereHelperCurrency
	CheckoutID         whereHelpermodel_types_NullString
	OrderID            whereHelpermodel_types_NullString
	BillingEmail       whereHelperstring
	BillingFirstName   whereHelperstring
	BillingLastName    whereHelperstring
	BillingCompanyName whereHelperstring
	BillingAddress1    whereHelperstring
	BillingAddress2    whereHelperstring
	BillingCity        whereHelperstring
	BillingCityArea    whereHelperstring
	BillingPostalCode  whereHelperstring
	BillingCountryCode whereHelperCountrycode
	BillingCountryArea whereHelperstring
	CCFirstDigits      whereHelperstring
	CCLastDigits       whereHelperstring
	CCBrand            whereHelperstring
	CCExpMonth         whereHelpermodel_types_NullInt
	CCExpYear          whereHelpermodel_types_NullInt
	PaymentMethodType  whereHelperstring
	CustomerIPAddress  whereHelpermodel_types_NullString
	ExtraData          whereHelperstring
	ReturnURL          whereHelpermodel_types_NullString
	PSPReference       whereHelpermodel_types_NullString
	StorePaymentMethod whereHelperStorepaymentmethod
	Metadata           whereHelpermodel_types_JsonMap
	PrivateMetadata    whereHelpermodel_types_JsonMap
}{
	ID:                 whereHelperstring{field: "\"payments\".\"id\""},
	Gateway:            whereHelperstring{field: "\"payments\".\"gateway\""},
	IsActive:           whereHelpermodel_types_NullBool{field: "\"payments\".\"is_active\""},
	ToConfirm:          whereHelperbool{field: "\"payments\".\"to_confirm\""},
	CreatedAt:          whereHelperint64{field: "\"payments\".\"created_at\""},
	UpdatedAt:          whereHelperint64{field: "\"payments\".\"updated_at\""},
	ChargeStatus:       whereHelperPaymentchargestatus{field: "\"payments\".\"charge_status\""},
	Token:              whereHelperstring{field: "\"payments\".\"token\""},
	Total:              whereHelperdecimal_Decimal{field: "\"payments\".\"total\""},
	CapturedAmount:     whereHelperdecimal_Decimal{field: "\"payments\".\"captured_amount\""},
	Currency:           whereHelperCurrency{field: "\"payments\".\"currency\""},
	CheckoutID:         whereHelpermodel_types_NullString{field: "\"payments\".\"checkout_id\""},
	OrderID:            whereHelpermodel_types_NullString{field: "\"payments\".\"order_id\""},
	BillingEmail:       whereHelperstring{field: "\"payments\".\"billing_email\""},
	BillingFirstName:   whereHelperstring{field: "\"payments\".\"billing_first_name\""},
	BillingLastName:    whereHelperstring{field: "\"payments\".\"billing_last_name\""},
	BillingCompanyName: whereHelperstring{field: "\"payments\".\"billing_company_name\""},
	BillingAddress1:    whereHelperstring{field: "\"payments\".\"billing_address1\""},
	BillingAddress2:    whereHelperstring{field: "\"payments\".\"billing_address2\""},
	BillingCity:        whereHelperstring{field: "\"payments\".\"billing_city\""},
	BillingCityArea:    whereHelperstring{field: "\"payments\".\"billing_city_area\""},
	BillingPostalCode:  whereHelperstring{field: "\"payments\".\"billing_postal_code\""},
	BillingCountryCode: whereHelperCountrycode{field: "\"payments\".\"billing_country_code\""},
	BillingCountryArea: whereHelperstring{field: "\"payments\".\"billing_country_area\""},
	CCFirstDigits:      whereHelperstring{field: "\"payments\".\"cc_first_digits\""},
	CCLastDigits:       whereHelperstring{field: "\"payments\".\"cc_last_digits\""},
	CCBrand:            whereHelperstring{field: "\"payments\".\"cc_brand\""},
	CCExpMonth:         whereHelpermodel_types_NullInt{field: "\"payments\".\"cc_exp_month\""},
	CCExpYear:          whereHelpermodel_types_NullInt{field: "\"payments\".\"cc_exp_year\""},
	PaymentMethodType:  whereHelperstring{field: "\"payments\".\"payment_method_type\""},
	CustomerIPAddress:  whereHelpermodel_types_NullString{field: "\"payments\".\"customer_ip_address\""},
	ExtraData:          whereHelperstring{field: "\"payments\".\"extra_data\""},
	ReturnURL:          whereHelpermodel_types_NullString{field: "\"payments\".\"return_url\""},
	PSPReference:       whereHelpermodel_types_NullString{field: "\"payments\".\"psp_reference\""},
	StorePaymentMethod: whereHelperStorepaymentmethod{field: "\"payments\".\"store_payment_method\""},
	Metadata:           whereHelpermodel_types_JsonMap{field: "\"payments\".\"metadata\""},
	PrivateMetadata:    whereHelpermodel_types_JsonMap{field: "\"payments\".\"private_metadata\""},
}

// PaymentRels is where relationship names are stored.
var PaymentRels = struct {
	Checkout     string
	Order        string
	Transactions string
}{
	Checkout:     "Checkout",
	Order:        "Order",
	Transactions: "Transactions",
}

// paymentR is where relationships are stored.
type paymentR struct {
	Checkout     *Checkout        `boil:"Checkout" json:"Checkout" toml:"Checkout" yaml:"Checkout"`
	Order        *Order           `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
	Transactions TransactionSlice `boil:"Transactions" json:"Transactions" toml:"Transactions" yaml:"Transactions"`
}

// NewStruct creates a new relationship struct
func (*paymentR) NewStruct() *paymentR {
	return &paymentR{}
}

func (r *paymentR) GetCheckout() *Checkout {
	if r == nil {
		return nil
	}
	return r.Checkout
}

func (r *paymentR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

func (r *paymentR) GetTransactions() TransactionSlice {
	if r == nil {
		return nil
	}
	return r.Transactions
}

// paymentL is where Load methods for each relationship are stored.
type paymentL struct{}

var (
	paymentAllColumns            = []string{"id", "gateway", "is_active", "to_confirm", "created_at", "updated_at", "charge_status", "token", "total", "captured_amount", "currency", "checkout_id", "order_id", "billing_email", "billing_first_name", "billing_last_name", "billing_company_name", "billing_address1", "billing_address2", "billing_city", "billing_city_area", "billing_postal_code", "billing_country_code", "billing_country_area", "cc_first_digits", "cc_last_digits", "cc_brand", "cc_exp_month", "cc_exp_year", "payment_method_type", "customer_ip_address", "extra_data", "return_url", "psp_reference", "store_payment_method", "metadata", "private_metadata"}
	paymentColumnsWithoutDefault = []string{"gateway", "to_confirm", "created_at", "updated_at", "charge_status", "token", "currency", "billing_email", "billing_first_name", "billing_last_name", "billing_company_name", "billing_address1", "billing_address2", "billing_city", "billing_city_area", "billing_postal_code", "billing_country_code", "billing_country_area", "cc_first_digits", "cc_last_digits", "cc_brand", "payment_method_type", "extra_data", "store_payment_method"}
	paymentColumnsWithDefault    = []string{"id", "is_active", "total", "captured_amount", "checkout_id", "order_id", "cc_exp_month", "cc_exp_year", "customer_ip_address", "return_url", "psp_reference", "metadata", "private_metadata"}
	paymentPrimaryKeyColumns     = []string{"id"}
	paymentGeneratedColumns      = []string{}
)

type (
	// PaymentSlice is an alias for a slice of pointers to Payment.
	// This should almost always be used instead of []Payment.
	PaymentSlice []*Payment

	paymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentType                 = reflect.TypeOf(&Payment{})
	paymentMapping              = queries.MakeStructMapping(paymentType)
	paymentPrimaryKeyMapping, _ = queries.BindMapping(paymentType, paymentMapping, paymentPrimaryKeyColumns)
	paymentInsertCacheMut       sync.RWMutex
	paymentInsertCache          = make(map[string]insertCache)
	paymentUpdateCacheMut       sync.RWMutex
	paymentUpdateCache          = make(map[string]updateCache)
	paymentUpsertCacheMut       sync.RWMutex
	paymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single payment record from the query.
func (q paymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Payment, error) {
	o := &Payment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for payments")
	}

	return o, nil
}

// All returns all Payment records from the query.
func (q paymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentSlice, error) {
	var o []*Payment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Payment slice")
	}

	return o, nil
}

// Count returns the count of all Payment records in the query.
func (q paymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count payments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if payments exists")
	}

	return count > 0, nil
}

// Checkout pointed to by the foreign key.
func (o *Payment) Checkout(mods ...qm.QueryMod) checkoutQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"token\" = ?", o.CheckoutID),
	}

	queryMods = append(queryMods, mods...)

	return Checkouts(queryMods...)
}

// Order pointed to by the foreign key.
func (o *Payment) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// Transactions retrieves all the transaction's Transactions with an executor.
func (o *Payment) Transactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"payment_id\"=?", o.ID),
	)

	return Transactions(queryMods...)
}

// LoadCheckout allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentL) LoadCheckout(ctx context.Context, e boil.ContextExecutor, singular bool, maybePayment interface{}, mods queries.Applicator) error {
	var slice []*Payment
	var object *Payment

	if singular {
		var ok bool
		object, ok = maybePayment.(*Payment)
		if !ok {
			object = new(Payment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePayment))
			}
		}
	} else {
		s, ok := maybePayment.(*[]*Payment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentR{}
		}
		if !queries.IsNil(object.CheckoutID) {
			args = append(args, object.CheckoutID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CheckoutID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CheckoutID) {
				args = append(args, obj.CheckoutID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.token in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Checkout")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Checkout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Checkout = foreign
		if foreign.R == nil {
			foreign.R = &checkoutR{}
		}
		foreign.R.Payments = append(foreign.R.Payments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CheckoutID, foreign.Token) {
				local.R.Checkout = foreign
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.Payments = append(foreign.R.Payments, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybePayment interface{}, mods queries.Applicator) error {
	var slice []*Payment
	var object *Payment

	if singular {
		var ok bool
		object, ok = maybePayment.(*Payment)
		if !ok {
			object = new(Payment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePayment))
			}
		}
	} else {
		s, ok := maybePayment.(*[]*Payment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.Payments = append(foreign.R.Payments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Payments = append(foreign.R.Payments, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (paymentL) LoadTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybePayment interface{}, mods queries.Applicator) error {
	var slice []*Payment
	var object *Payment

	if singular {
		var ok bool
		object, ok = maybePayment.(*Payment)
		if !ok {
			object = new(Payment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePayment))
			}
		}
	} else {
		s, ok := maybePayment.(*[]*Payment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.payment_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if singular {
		object.R.Transactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.Payment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PaymentID {
				local.R.Transactions = append(local.R.Transactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.Payment = local
				break
			}
		}
	}

	return nil
}

// SetCheckout of the payment to the related item.
// Sets o.R.Checkout to related.
// Adds o to related.R.Payments.
func (o *Payment) SetCheckout(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Checkout) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"checkout_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
	)
	values := []interface{}{related.Token, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CheckoutID, related.Token)
	if o.R == nil {
		o.R = &paymentR{
			Checkout: related,
		}
	} else {
		o.R.Checkout = related
	}

	if related.R == nil {
		related.R = &checkoutR{
			Payments: PaymentSlice{o},
		}
	} else {
		related.R.Payments = append(related.R.Payments, o)
	}

	return nil
}

// RemoveCheckout relationship.
// Sets o.R.Checkout to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Payment) RemoveCheckout(ctx context.Context, exec boil.ContextExecutor, related *Checkout) error {
	var err error

	queries.SetScanner(&o.CheckoutID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("checkout_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Checkout = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Payments {
		if queries.Equal(o.CheckoutID, ri.CheckoutID) {
			continue
		}

		ln := len(related.R.Payments)
		if ln > 1 && i < ln-1 {
			related.R.Payments[i] = related.R.Payments[ln-1]
		}
		related.R.Payments = related.R.Payments[:ln-1]
		break
	}
	return nil
}

// SetOrder of the payment to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.Payments.
func (o *Payment) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &paymentR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			Payments: PaymentSlice{o},
		}
	} else {
		related.R.Payments = append(related.R.Payments, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Payment) RemoveOrder(ctx context.Context, exec boil.ContextExecutor, related *Order) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Order = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Payments {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.Payments)
		if ln > 1 && i < ln-1 {
			related.R.Payments[i] = related.R.Payments[ln-1]
		}
		related.R.Payments = related.R.Payments[:ln-1]
		break
	}
	return nil
}

// AddTransactions adds the given related objects to the existing relationships
// of the payment, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Payment appropriately.
func (o *Payment) AddTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"payment_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &paymentR{
			Transactions: related,
		}
	} else {
		o.R.Transactions = append(o.R.Transactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				Payment: o,
			}
		} else {
			rel.R.Payment = o
		}
	}
	return nil
}

// Payments retrieves all the records using an executor.
func Payments(mods ...qm.QueryMod) paymentQuery {
	mods = append(mods, qm.From("\"payments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"payments\".*"})
	}

	return paymentQuery{q}
}

// FindPayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPayment(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Payment, error) {
	paymentObj := &Payment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"payments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paymentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from payments")
	}

	return paymentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Payment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no payments provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(paymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentInsertCacheMut.RLock()
	cache, cached := paymentInsertCache[key]
	paymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentAllColumns,
			paymentColumnsWithDefault,
			paymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentType, paymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentType, paymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"payments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"payments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into payments")
	}

	if !cached {
		paymentInsertCacheMut.Lock()
		paymentInsertCache[key] = cache
		paymentInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Payment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Payment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	paymentUpdateCacheMut.RLock()
	cache, cached := paymentUpdateCache[key]
	paymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentAllColumns,
			paymentPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update payments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"payments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentType, paymentMapping, append(wl, paymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update payments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for payments")
	}

	if !cached {
		paymentUpdateCacheMut.Lock()
		paymentUpdateCache[key] = cache
		paymentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q paymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for payments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"payments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paymentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in payment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all payment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Payment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no payments provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentUpsertCacheMut.RLock()
	cache, cached := paymentUpsertCache[key]
	paymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentAllColumns,
			paymentColumnsWithDefault,
			paymentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paymentAllColumns,
			paymentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert payments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(paymentPrimaryKeyColumns))
			copy(conflict, paymentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"payments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(paymentType, paymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentType, paymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert payments")
	}

	if !cached {
		paymentUpsertCacheMut.Lock()
		paymentUpsertCache[key] = cache
		paymentUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Payment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Payment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Payment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentPrimaryKeyMapping)
	sql := "DELETE FROM \"payments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for payments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no paymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for payments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"payments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from payment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for payments")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Payment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPayment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"payments\".* FROM \"payments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PaymentSlice")
	}

	*o = slice

	return nil
}

// PaymentExists checks if the Payment row exists.
func PaymentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"payments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if payments exists")
	}

	return exists, nil
}

// Exists checks if the Payment row exists.
func (o *Payment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PaymentExists(ctx, exec, o.ID)
}
