// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingZone is an object representing the database table.
type ShippingZone struct {
	ID              string               `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name            string               `boil:"name" json:"name" toml:"name" yaml:"name"`
	Countries       string               `boil:"countries" json:"countries" toml:"countries" yaml:"countries"`
	DefaultFlag     model_types.NullBool `boil:"default_flag" json:"default_flag,omitempty" toml:"default_flag" yaml:"default_flag,omitempty"`
	Description     string               `boil:"description" json:"description" toml:"description" yaml:"description"`
	CreatedAt       int64                `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Metadata        model_types.JsonMap  `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata model_types.JsonMap  `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *shippingZoneR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingZoneL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingZoneColumns = struct {
	ID              string
	Name            string
	Countries       string
	DefaultFlag     string
	Description     string
	CreatedAt       string
	Metadata        string
	PrivateMetadata string
}{
	ID:              "id",
	Name:            "name",
	Countries:       "countries",
	DefaultFlag:     "default_flag",
	Description:     "description",
	CreatedAt:       "created_at",
	Metadata:        "metadata",
	PrivateMetadata: "private_metadata",
}

var ShippingZoneTableColumns = struct {
	ID              string
	Name            string
	Countries       string
	DefaultFlag     string
	Description     string
	CreatedAt       string
	Metadata        string
	PrivateMetadata string
}{
	ID:              "shipping_zones.id",
	Name:            "shipping_zones.name",
	Countries:       "shipping_zones.countries",
	DefaultFlag:     "shipping_zones.default_flag",
	Description:     "shipping_zones.description",
	CreatedAt:       "shipping_zones.created_at",
	Metadata:        "shipping_zones.metadata",
	PrivateMetadata: "shipping_zones.private_metadata",
}

// Generated where

var ShippingZoneWhere = struct {
	ID              whereHelperstring
	Name            whereHelperstring
	Countries       whereHelperstring
	DefaultFlag     whereHelpermodel_types_NullBool
	Description     whereHelperstring
	CreatedAt       whereHelperint64
	Metadata        whereHelpermodel_types_JsonMap
	PrivateMetadata whereHelpermodel_types_JsonMap
}{
	ID:              whereHelperstring{field: "\"shipping_zones\".\"id\""},
	Name:            whereHelperstring{field: "\"shipping_zones\".\"name\""},
	Countries:       whereHelperstring{field: "\"shipping_zones\".\"countries\""},
	DefaultFlag:     whereHelpermodel_types_NullBool{field: "\"shipping_zones\".\"default_flag\""},
	Description:     whereHelperstring{field: "\"shipping_zones\".\"description\""},
	CreatedAt:       whereHelperint64{field: "\"shipping_zones\".\"created_at\""},
	Metadata:        whereHelpermodel_types_JsonMap{field: "\"shipping_zones\".\"metadata\""},
	PrivateMetadata: whereHelpermodel_types_JsonMap{field: "\"shipping_zones\".\"private_metadata\""},
}

// ShippingZoneRels is where relationship names are stored.
var ShippingZoneRels = struct {
	ShippingMethods        string
	ShippingZoneChannels   string
	WarehouseShippingZones string
}{
	ShippingMethods:        "ShippingMethods",
	ShippingZoneChannels:   "ShippingZoneChannels",
	WarehouseShippingZones: "WarehouseShippingZones",
}

// shippingZoneR is where relationships are stored.
type shippingZoneR struct {
	ShippingMethods        ShippingMethodSlice        `boil:"ShippingMethods" json:"ShippingMethods" toml:"ShippingMethods" yaml:"ShippingMethods"`
	ShippingZoneChannels   ShippingZoneChannelSlice   `boil:"ShippingZoneChannels" json:"ShippingZoneChannels" toml:"ShippingZoneChannels" yaml:"ShippingZoneChannels"`
	WarehouseShippingZones WarehouseShippingZoneSlice `boil:"WarehouseShippingZones" json:"WarehouseShippingZones" toml:"WarehouseShippingZones" yaml:"WarehouseShippingZones"`
}

// NewStruct creates a new relationship struct
func (*shippingZoneR) NewStruct() *shippingZoneR {
	return &shippingZoneR{}
}

func (r *shippingZoneR) GetShippingMethods() ShippingMethodSlice {
	if r == nil {
		return nil
	}
	return r.ShippingMethods
}

func (r *shippingZoneR) GetShippingZoneChannels() ShippingZoneChannelSlice {
	if r == nil {
		return nil
	}
	return r.ShippingZoneChannels
}

func (r *shippingZoneR) GetWarehouseShippingZones() WarehouseShippingZoneSlice {
	if r == nil {
		return nil
	}
	return r.WarehouseShippingZones
}

// shippingZoneL is where Load methods for each relationship are stored.
type shippingZoneL struct{}

var (
	shippingZoneAllColumns            = []string{"id", "name", "countries", "default_flag", "description", "created_at", "metadata", "private_metadata"}
	shippingZoneColumnsWithoutDefault = []string{"name", "countries", "description", "created_at"}
	shippingZoneColumnsWithDefault    = []string{"id", "default_flag", "metadata", "private_metadata"}
	shippingZonePrimaryKeyColumns     = []string{"id"}
	shippingZoneGeneratedColumns      = []string{}
)

type (
	// ShippingZoneSlice is an alias for a slice of pointers to ShippingZone.
	// This should almost always be used instead of []ShippingZone.
	ShippingZoneSlice []*ShippingZone

	shippingZoneQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingZoneType                 = reflect.TypeOf(&ShippingZone{})
	shippingZoneMapping              = queries.MakeStructMapping(shippingZoneType)
	shippingZonePrimaryKeyMapping, _ = queries.BindMapping(shippingZoneType, shippingZoneMapping, shippingZonePrimaryKeyColumns)
	shippingZoneInsertCacheMut       sync.RWMutex
	shippingZoneInsertCache          = make(map[string]insertCache)
	shippingZoneUpdateCacheMut       sync.RWMutex
	shippingZoneUpdateCache          = make(map[string]updateCache)
	shippingZoneUpsertCacheMut       sync.RWMutex
	shippingZoneUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single shippingZone record from the query.
func (q shippingZoneQuery) One(exec boil.Executor) (*ShippingZone, error) {
	o := &ShippingZone{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for shipping_zones")
	}

	return o, nil
}

// All returns all ShippingZone records from the query.
func (q shippingZoneQuery) All(exec boil.Executor) (ShippingZoneSlice, error) {
	var o []*ShippingZone

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ShippingZone slice")
	}

	return o, nil
}

// Count returns the count of all ShippingZone records in the query.
func (q shippingZoneQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count shipping_zones rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingZoneQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if shipping_zones exists")
	}

	return count > 0, nil
}

// ShippingMethods retrieves all the shipping_method's ShippingMethods with an executor.
func (o *ShippingZone) ShippingMethods(mods ...qm.QueryMod) shippingMethodQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_methods\".\"shipping_zone_id\"=?", o.ID),
	)

	return ShippingMethods(queryMods...)
}

// ShippingZoneChannels retrieves all the shipping_zone_channel's ShippingZoneChannels with an executor.
func (o *ShippingZone) ShippingZoneChannels(mods ...qm.QueryMod) shippingZoneChannelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_zone_channels\".\"shipping_zone_id\"=?", o.ID),
	)

	return ShippingZoneChannels(queryMods...)
}

// WarehouseShippingZones retrieves all the warehouse_shipping_zone's WarehouseShippingZones with an executor.
func (o *ShippingZone) WarehouseShippingZones(mods ...qm.QueryMod) warehouseShippingZoneQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"warehouse_shipping_zones\".\"shipping_zone_id\"=?", o.ID),
	)

	return WarehouseShippingZones(queryMods...)
}

// LoadShippingMethods allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingZoneL) LoadShippingMethods(e boil.Executor, singular bool, maybeShippingZone interface{}, mods queries.Applicator) error {
	var slice []*ShippingZone
	var object *ShippingZone

	if singular {
		var ok bool
		object, ok = maybeShippingZone.(*ShippingZone)
		if !ok {
			object = new(ShippingZone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingZone))
			}
		}
	} else {
		s, ok := maybeShippingZone.(*[]*ShippingZone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingZone))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shippingZoneR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingZoneR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shipping_methods`),
		qm.WhereIn(`shipping_methods.shipping_zone_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_methods")
	}

	var resultSlice []*ShippingMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_methods")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_methods")
	}

	if singular {
		object.R.ShippingMethods = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodR{}
			}
			foreign.R.ShippingZone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShippingZoneID {
				local.R.ShippingMethods = append(local.R.ShippingMethods, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodR{}
				}
				foreign.R.ShippingZone = local
				break
			}
		}
	}

	return nil
}

// LoadShippingZoneChannels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingZoneL) LoadShippingZoneChannels(e boil.Executor, singular bool, maybeShippingZone interface{}, mods queries.Applicator) error {
	var slice []*ShippingZone
	var object *ShippingZone

	if singular {
		var ok bool
		object, ok = maybeShippingZone.(*ShippingZone)
		if !ok {
			object = new(ShippingZone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingZone))
			}
		}
	} else {
		s, ok := maybeShippingZone.(*[]*ShippingZone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingZone))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shippingZoneR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingZoneR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`shipping_zone_channels`),
		qm.WhereIn(`shipping_zone_channels.shipping_zone_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_zone_channels")
	}

	var resultSlice []*ShippingZoneChannel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_zone_channels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_zone_channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_zone_channels")
	}

	if singular {
		object.R.ShippingZoneChannels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingZoneChannelR{}
			}
			foreign.R.ShippingZone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShippingZoneID {
				local.R.ShippingZoneChannels = append(local.R.ShippingZoneChannels, foreign)
				if foreign.R == nil {
					foreign.R = &shippingZoneChannelR{}
				}
				foreign.R.ShippingZone = local
				break
			}
		}
	}

	return nil
}

// LoadWarehouseShippingZones allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingZoneL) LoadWarehouseShippingZones(e boil.Executor, singular bool, maybeShippingZone interface{}, mods queries.Applicator) error {
	var slice []*ShippingZone
	var object *ShippingZone

	if singular {
		var ok bool
		object, ok = maybeShippingZone.(*ShippingZone)
		if !ok {
			object = new(ShippingZone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingZone))
			}
		}
	} else {
		s, ok := maybeShippingZone.(*[]*ShippingZone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingZone))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &shippingZoneR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingZoneR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`warehouse_shipping_zones`),
		qm.WhereIn(`warehouse_shipping_zones.shipping_zone_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load warehouse_shipping_zones")
	}

	var resultSlice []*WarehouseShippingZone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice warehouse_shipping_zones")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on warehouse_shipping_zones")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouse_shipping_zones")
	}

	if singular {
		object.R.WarehouseShippingZones = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &warehouseShippingZoneR{}
			}
			foreign.R.ShippingZone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShippingZoneID {
				local.R.WarehouseShippingZones = append(local.R.WarehouseShippingZones, foreign)
				if foreign.R == nil {
					foreign.R = &warehouseShippingZoneR{}
				}
				foreign.R.ShippingZone = local
				break
			}
		}
	}

	return nil
}

// AddShippingMethods adds the given related objects to the existing relationships
// of the shipping_zone, optionally inserting them as new records.
// Appends related to o.R.ShippingMethods.
// Sets related.R.ShippingZone appropriately.
func (o *ShippingZone) AddShippingMethods(exec boil.Executor, insert bool, related ...*ShippingMethod) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShippingZoneID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_methods\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_zone_id"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShippingZoneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shippingZoneR{
			ShippingMethods: related,
		}
	} else {
		o.R.ShippingMethods = append(o.R.ShippingMethods, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodR{
				ShippingZone: o,
			}
		} else {
			rel.R.ShippingZone = o
		}
	}
	return nil
}

// AddShippingZoneChannels adds the given related objects to the existing relationships
// of the shipping_zone, optionally inserting them as new records.
// Appends related to o.R.ShippingZoneChannels.
// Sets related.R.ShippingZone appropriately.
func (o *ShippingZone) AddShippingZoneChannels(exec boil.Executor, insert bool, related ...*ShippingZoneChannel) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShippingZoneID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_zone_channels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_zone_id"}),
				strmangle.WhereClause("\"", "\"", 2, shippingZoneChannelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShippingZoneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shippingZoneR{
			ShippingZoneChannels: related,
		}
	} else {
		o.R.ShippingZoneChannels = append(o.R.ShippingZoneChannels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingZoneChannelR{
				ShippingZone: o,
			}
		} else {
			rel.R.ShippingZone = o
		}
	}
	return nil
}

// AddWarehouseShippingZones adds the given related objects to the existing relationships
// of the shipping_zone, optionally inserting them as new records.
// Appends related to o.R.WarehouseShippingZones.
// Sets related.R.ShippingZone appropriately.
func (o *ShippingZone) AddWarehouseShippingZones(exec boil.Executor, insert bool, related ...*WarehouseShippingZone) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShippingZoneID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"warehouse_shipping_zones\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_zone_id"}),
				strmangle.WhereClause("\"", "\"", 2, warehouseShippingZonePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShippingZoneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shippingZoneR{
			WarehouseShippingZones: related,
		}
	} else {
		o.R.WarehouseShippingZones = append(o.R.WarehouseShippingZones, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &warehouseShippingZoneR{
				ShippingZone: o,
			}
		} else {
			rel.R.ShippingZone = o
		}
	}
	return nil
}

// ShippingZones retrieves all the records using an executor.
func ShippingZones(mods ...qm.QueryMod) shippingZoneQuery {
	mods = append(mods, qm.From("\"shipping_zones\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_zones\".*"})
	}

	return shippingZoneQuery{q}
}

// FindShippingZone retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingZone(exec boil.Executor, iD string, selectCols ...string) (*ShippingZone, error) {
	shippingZoneObj := &ShippingZone{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_zones\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, shippingZoneObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from shipping_zones")
	}

	return shippingZoneObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingZone) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shipping_zones provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(shippingZoneColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingZoneInsertCacheMut.RLock()
	cache, cached := shippingZoneInsertCache[key]
	shippingZoneInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingZoneAllColumns,
			shippingZoneColumnsWithDefault,
			shippingZoneColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingZoneType, shippingZoneMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingZoneType, shippingZoneMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_zones\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_zones\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into shipping_zones")
	}

	if !cached {
		shippingZoneInsertCacheMut.Lock()
		shippingZoneInsertCache[key] = cache
		shippingZoneInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ShippingZone.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingZone) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	shippingZoneUpdateCacheMut.RLock()
	cache, cached := shippingZoneUpdateCache[key]
	shippingZoneUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingZoneAllColumns,
			shippingZonePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update shipping_zones, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_zones\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingZonePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingZoneType, shippingZoneMapping, append(wl, shippingZonePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update shipping_zones row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for shipping_zones")
	}

	if !cached {
		shippingZoneUpdateCacheMut.Lock()
		shippingZoneUpdateCache[key] = cache
		shippingZoneUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q shippingZoneQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for shipping_zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for shipping_zones")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingZoneSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_zones\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingZonePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in shippingZone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all shippingZone")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingZone) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no shipping_zones provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingZoneColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingZoneUpsertCacheMut.RLock()
	cache, cached := shippingZoneUpsertCache[key]
	shippingZoneUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shippingZoneAllColumns,
			shippingZoneColumnsWithDefault,
			shippingZoneColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingZoneAllColumns,
			shippingZonePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert shipping_zones, could not build update column list")
		}

		ret := strmangle.SetComplement(shippingZoneAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(shippingZonePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert shipping_zones, could not build conflict column list")
			}

			conflict = make([]string, len(shippingZonePrimaryKeyColumns))
			copy(conflict, shippingZonePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_zones\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shippingZoneType, shippingZoneMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingZoneType, shippingZoneMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert shipping_zones")
	}

	if !cached {
		shippingZoneUpsertCacheMut.Lock()
		shippingZoneUpsertCache[key] = cache
		shippingZoneUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ShippingZone record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingZone) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ShippingZone provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingZonePrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_zones\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from shipping_zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for shipping_zones")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingZoneQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no shippingZoneQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shipping_zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_zones")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingZoneSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_zones\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingZonePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shippingZone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_zones")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingZone) Reload(exec boil.Executor) error {
	ret, err := FindShippingZone(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingZoneSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingZoneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_zones\".* FROM \"shipping_zones\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingZonePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ShippingZoneSlice")
	}

	*o = slice

	return nil
}

// ShippingZoneExists checks if the ShippingZone row exists.
func ShippingZoneExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_zones\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if shipping_zones exists")
	}

	return exists, nil
}

// Exists checks if the ShippingZone row exists.
func (o *ShippingZone) Exists(exec boil.Executor) (bool, error) {
	return ShippingZoneExists(exec, o.ID)
}
