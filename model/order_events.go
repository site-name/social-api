// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderEvent is an object representing the database table.
type OrderEvent struct {
	ID         string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt  int64                  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Type       OrderEventType         `boil:"type" json:"type" toml:"type" yaml:"type"`
	OrderID    string                 `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	Parameters model_types.NullString `boil:"parameters" json:"parameters,omitempty" toml:"parameters" yaml:"parameters,omitempty"`
	UserID     model_types.NullString `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`

	R *orderEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderEventColumns = struct {
	ID         string
	CreatedAt  string
	Type       string
	OrderID    string
	Parameters string
	UserID     string
}{
	ID:         "id",
	CreatedAt:  "created_at",
	Type:       "type",
	OrderID:    "order_id",
	Parameters: "parameters",
	UserID:     "user_id",
}

var OrderEventTableColumns = struct {
	ID         string
	CreatedAt  string
	Type       string
	OrderID    string
	Parameters string
	UserID     string
}{
	ID:         "order_events.id",
	CreatedAt:  "order_events.created_at",
	Type:       "order_events.type",
	OrderID:    "order_events.order_id",
	Parameters: "order_events.parameters",
	UserID:     "order_events.user_id",
}

// Generated where

type whereHelperOrderEventType struct{ field string }

func (w whereHelperOrderEventType) EQ(x OrderEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperOrderEventType) NEQ(x OrderEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperOrderEventType) LT(x OrderEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperOrderEventType) LTE(x OrderEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperOrderEventType) GT(x OrderEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperOrderEventType) GTE(x OrderEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperOrderEventType) IN(slice []OrderEventType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperOrderEventType) NIN(slice []OrderEventType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var OrderEventWhere = struct {
	ID         whereHelperstring
	CreatedAt  whereHelperint64
	Type       whereHelperOrderEventType
	OrderID    whereHelperstring
	Parameters whereHelpermodel_types_NullString
	UserID     whereHelpermodel_types_NullString
}{
	ID:         whereHelperstring{field: "\"order_events\".\"id\""},
	CreatedAt:  whereHelperint64{field: "\"order_events\".\"created_at\""},
	Type:       whereHelperOrderEventType{field: "\"order_events\".\"type\""},
	OrderID:    whereHelperstring{field: "\"order_events\".\"order_id\""},
	Parameters: whereHelpermodel_types_NullString{field: "\"order_events\".\"parameters\""},
	UserID:     whereHelpermodel_types_NullString{field: "\"order_events\".\"user_id\""},
}

// OrderEventRels is where relationship names are stored.
var OrderEventRels = struct {
}{}

// orderEventR is where relationships are stored.
type orderEventR struct {
}

// NewStruct creates a new relationship struct
func (*orderEventR) NewStruct() *orderEventR {
	return &orderEventR{}
}

// orderEventL is where Load methods for each relationship are stored.
type orderEventL struct{}

var (
	orderEventAllColumns            = []string{"id", "created_at", "type", "order_id", "parameters", "user_id"}
	orderEventColumnsWithoutDefault = []string{"created_at", "type", "order_id"}
	orderEventColumnsWithDefault    = []string{"id", "parameters", "user_id"}
	orderEventPrimaryKeyColumns     = []string{"id"}
	orderEventGeneratedColumns      = []string{}
)

type (
	// OrderEventSlice is an alias for a slice of pointers to OrderEvent.
	// This should almost always be used instead of []OrderEvent.
	OrderEventSlice []*OrderEvent

	orderEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderEventType                 = reflect.TypeOf(&OrderEvent{})
	orderEventMapping              = queries.MakeStructMapping(orderEventType)
	orderEventPrimaryKeyMapping, _ = queries.BindMapping(orderEventType, orderEventMapping, orderEventPrimaryKeyColumns)
	orderEventInsertCacheMut       sync.RWMutex
	orderEventInsertCache          = make(map[string]insertCache)
	orderEventUpdateCacheMut       sync.RWMutex
	orderEventUpdateCache          = make(map[string]updateCache)
	orderEventUpsertCacheMut       sync.RWMutex
	orderEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single orderEvent record from the query.
func (q orderEventQuery) One(exec boil.Executor) (*OrderEvent, error) {
	o := &OrderEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for order_events")
	}

	return o, nil
}

// All returns all OrderEvent records from the query.
func (q orderEventQuery) All(exec boil.Executor) (OrderEventSlice, error) {
	var o []*OrderEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to OrderEvent slice")
	}

	return o, nil
}

// Count returns the count of all OrderEvent records in the query.
func (q orderEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count order_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if order_events exists")
	}

	return count > 0, nil
}

// OrderEvents retrieves all the records using an executor.
func OrderEvents(mods ...qm.QueryMod) orderEventQuery {
	mods = append(mods, qm.From("\"order_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_events\".*"})
	}

	return orderEventQuery{q}
}

// FindOrderEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderEvent(exec boil.Executor, iD string, selectCols ...string) (*OrderEvent, error) {
	orderEventObj := &OrderEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, orderEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from order_events")
	}

	return orderEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no order_events provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderEventInsertCacheMut.RLock()
	cache, cached := orderEventInsertCache[key]
	orderEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderEventAllColumns,
			orderEventColumnsWithDefault,
			orderEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderEventType, orderEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderEventType, orderEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into order_events")
	}

	if !cached {
		orderEventInsertCacheMut.Lock()
		orderEventInsertCache[key] = cache
		orderEventInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OrderEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	orderEventUpdateCacheMut.RLock()
	cache, cached := orderEventUpdateCache[key]
	orderEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderEventAllColumns,
			orderEventPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update order_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderEventType, orderEventMapping, append(wl, orderEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update order_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for order_events")
	}

	if !cached {
		orderEventUpdateCacheMut.Lock()
		orderEventUpdateCache[key] = cache
		orderEventUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q orderEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for order_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for order_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in orderEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all orderEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no order_events provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(orderEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderEventUpsertCacheMut.RLock()
	cache, cached := orderEventUpsertCache[key]
	orderEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			orderEventAllColumns,
			orderEventColumnsWithDefault,
			orderEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderEventAllColumns,
			orderEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert order_events, could not build update column list")
		}

		ret := strmangle.SetComplement(orderEventAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(orderEventPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert order_events, could not build conflict column list")
			}

			conflict = make([]string, len(orderEventPrimaryKeyColumns))
			copy(conflict, orderEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_events\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(orderEventType, orderEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderEventType, orderEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert order_events")
	}

	if !cached {
		orderEventUpsertCacheMut.Lock()
		orderEventUpsertCache[key] = cache
		orderEventUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single OrderEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no OrderEvent provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderEventPrimaryKeyMapping)
	sql := "DELETE FROM \"order_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from order_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for order_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no orderEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from order_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for order_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from orderEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for order_events")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderEvent) Reload(exec boil.Executor) error {
	ret, err := FindOrderEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_events\".* FROM \"order_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in OrderEventSlice")
	}

	*o = slice

	return nil
}

// OrderEventExists checks if the OrderEvent row exists.
func OrderEventExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if order_events exists")
	}

	return exists, nil
}

// Exists checks if the OrderEvent row exists.
func (o *OrderEvent) Exists(exec boil.Executor) (bool, error) {
	return OrderEventExists(exec, o.ID)
}
