// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// System is an object representing the database table.
type System struct {
	Name  string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Value string `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *systemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L systemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SystemColumns = struct {
	Name  string
	Value string
}{
	Name:  "name",
	Value: "value",
}

var SystemTableColumns = struct {
	Name  string
	Value string
}{
	Name:  "systems.name",
	Value: "systems.value",
}

// Generated where

var SystemWhere = struct {
	Name  whereHelperstring
	Value whereHelperstring
}{
	Name:  whereHelperstring{field: "\"systems\".\"name\""},
	Value: whereHelperstring{field: "\"systems\".\"value\""},
}

// SystemRels is where relationship names are stored.
var SystemRels = struct {
}{}

// systemR is where relationships are stored.
type systemR struct {
}

// NewStruct creates a new relationship struct
func (*systemR) NewStruct() *systemR {
	return &systemR{}
}

// systemL is where Load methods for each relationship are stored.
type systemL struct{}

var (
	systemAllColumns            = []string{"name", "value"}
	systemColumnsWithoutDefault = []string{"name", "value"}
	systemColumnsWithDefault    = []string{}
	systemPrimaryKeyColumns     = []string{"name"}
	systemGeneratedColumns      = []string{}
)

type (
	// SystemSlice is an alias for a slice of pointers to System.
	// This should almost always be used instead of []System.
	SystemSlice []*System

	systemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	systemType                 = reflect.TypeOf(&System{})
	systemMapping              = queries.MakeStructMapping(systemType)
	systemPrimaryKeyMapping, _ = queries.BindMapping(systemType, systemMapping, systemPrimaryKeyColumns)
	systemInsertCacheMut       sync.RWMutex
	systemInsertCache          = make(map[string]insertCache)
	systemUpdateCacheMut       sync.RWMutex
	systemUpdateCache          = make(map[string]updateCache)
	systemUpsertCacheMut       sync.RWMutex
	systemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single system record from the query.
func (q systemQuery) One(exec boil.Executor) (*System, error) {
	o := &System{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for systems")
	}

	return o, nil
}

// All returns all System records from the query.
func (q systemQuery) All(exec boil.Executor) (SystemSlice, error) {
	var o []*System

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to System slice")
	}

	return o, nil
}

// Count returns the count of all System records in the query.
func (q systemQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count systems rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q systemQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if systems exists")
	}

	return count > 0, nil
}

// Systems retrieves all the records using an executor.
func Systems(mods ...qm.QueryMod) systemQuery {
	mods = append(mods, qm.From("\"systems\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"systems\".*"})
	}

	return systemQuery{q}
}

// FindSystem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSystem(exec boil.Executor, name string, selectCols ...string) (*System, error) {
	systemObj := &System{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"systems\" where \"name\"=$1", sel,
	)

	q := queries.Raw(query, name)

	err := q.Bind(nil, exec, systemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from systems")
	}

	return systemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *System) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no systems provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(systemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	systemInsertCacheMut.RLock()
	cache, cached := systemInsertCache[key]
	systemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			systemAllColumns,
			systemColumnsWithDefault,
			systemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(systemType, systemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(systemType, systemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"systems\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"systems\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into systems")
	}

	if !cached {
		systemInsertCacheMut.Lock()
		systemInsertCache[key] = cache
		systemInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the System.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *System) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	systemUpdateCacheMut.RLock()
	cache, cached := systemUpdateCache[key]
	systemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			systemAllColumns,
			systemPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update systems, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"systems\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, systemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(systemType, systemMapping, append(wl, systemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update systems row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for systems")
	}

	if !cached {
		systemUpdateCacheMut.Lock()
		systemUpdateCache[key] = cache
		systemUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q systemQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for systems")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for systems")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SystemSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"systems\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, systemPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in system slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all system")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *System) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no systems provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(systemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	systemUpsertCacheMut.RLock()
	cache, cached := systemUpsertCache[key]
	systemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			systemAllColumns,
			systemColumnsWithDefault,
			systemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			systemAllColumns,
			systemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert systems, could not build update column list")
		}

		ret := strmangle.SetComplement(systemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(systemPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert systems, could not build conflict column list")
			}

			conflict = make([]string, len(systemPrimaryKeyColumns))
			copy(conflict, systemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"systems\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(systemType, systemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(systemType, systemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert systems")
	}

	if !cached {
		systemUpsertCacheMut.Lock()
		systemUpsertCache[key] = cache
		systemUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single System record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *System) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no System provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), systemPrimaryKeyMapping)
	sql := "DELETE FROM \"systems\" WHERE \"name\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from systems")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for systems")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q systemQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no systemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from systems")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for systems")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SystemSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"systems\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, systemPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from system slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for systems")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *System) Reload(exec boil.Executor) error {
	ret, err := FindSystem(exec, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SystemSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SystemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"systems\".* FROM \"systems\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, systemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in SystemSlice")
	}

	*o = slice

	return nil
}

// SystemExists checks if the System row exists.
func SystemExists(exec boil.Executor, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"systems\" where \"name\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, name)
	}
	row := exec.QueryRow(sql, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if systems exists")
	}

	return exists, nil
}

// Exists checks if the System row exists.
func (o *System) Exists(exec boil.Executor) (bool, error) {
	return SystemExists(exec, o.Name)
}
