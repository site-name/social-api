// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PluginKeyValue is an object representing the database table.
type PluginKeyValue struct {
	PluginID string                `boil:"plugin_id" json:"plugin_id" toml:"plugin_id" yaml:"plugin_id"`
	Pkey     string                `boil:"pkey" json:"pkey" toml:"pkey" yaml:"pkey"`
	Pvalue   null.Bytes            `boil:"pvalue" json:"pvalue,omitempty" toml:"pvalue" yaml:"pvalue,omitempty"`
	ExpireAt model_types.NullInt64 `boil:"expire_at" json:"expire_at,omitempty" toml:"expire_at" yaml:"expire_at,omitempty"`

	R *pluginKeyValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pluginKeyValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PluginKeyValueColumns = struct {
	PluginID string
	Pkey     string
	Pvalue   string
	ExpireAt string
}{
	PluginID: "plugin_id",
	Pkey:     "pkey",
	Pvalue:   "pvalue",
	ExpireAt: "expire_at",
}

var PluginKeyValueTableColumns = struct {
	PluginID string
	Pkey     string
	Pvalue   string
	ExpireAt string
}{
	PluginID: "plugin_key_values.plugin_id",
	Pkey:     "plugin_key_values.pkey",
	Pvalue:   "plugin_key_values.pvalue",
	ExpireAt: "plugin_key_values.expire_at",
}

// Generated where

var PluginKeyValueWhere = struct {
	PluginID whereHelperstring
	Pkey     whereHelperstring
	Pvalue   whereHelpernull_Bytes
	ExpireAt whereHelpermodel_types_NullInt64
}{
	PluginID: whereHelperstring{field: "\"plugin_key_values\".\"plugin_id\""},
	Pkey:     whereHelperstring{field: "\"plugin_key_values\".\"pkey\""},
	Pvalue:   whereHelpernull_Bytes{field: "\"plugin_key_values\".\"pvalue\""},
	ExpireAt: whereHelpermodel_types_NullInt64{field: "\"plugin_key_values\".\"expire_at\""},
}

// PluginKeyValueRels is where relationship names are stored.
var PluginKeyValueRels = struct {
}{}

// pluginKeyValueR is where relationships are stored.
type pluginKeyValueR struct {
}

// NewStruct creates a new relationship struct
func (*pluginKeyValueR) NewStruct() *pluginKeyValueR {
	return &pluginKeyValueR{}
}

// pluginKeyValueL is where Load methods for each relationship are stored.
type pluginKeyValueL struct{}

var (
	pluginKeyValueAllColumns            = []string{"plugin_id", "pkey", "pvalue", "expire_at"}
	pluginKeyValueColumnsWithoutDefault = []string{"plugin_id", "pkey"}
	pluginKeyValueColumnsWithDefault    = []string{"pvalue", "expire_at"}
	pluginKeyValuePrimaryKeyColumns     = []string{"plugin_id", "pkey"}
	pluginKeyValueGeneratedColumns      = []string{}
)

type (
	// PluginKeyValueSlice is an alias for a slice of pointers to PluginKeyValue.
	// This should almost always be used instead of []PluginKeyValue.
	PluginKeyValueSlice []*PluginKeyValue

	pluginKeyValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pluginKeyValueType                 = reflect.TypeOf(&PluginKeyValue{})
	pluginKeyValueMapping              = queries.MakeStructMapping(pluginKeyValueType)
	pluginKeyValuePrimaryKeyMapping, _ = queries.BindMapping(pluginKeyValueType, pluginKeyValueMapping, pluginKeyValuePrimaryKeyColumns)
	pluginKeyValueInsertCacheMut       sync.RWMutex
	pluginKeyValueInsertCache          = make(map[string]insertCache)
	pluginKeyValueUpdateCacheMut       sync.RWMutex
	pluginKeyValueUpdateCache          = make(map[string]updateCache)
	pluginKeyValueUpsertCacheMut       sync.RWMutex
	pluginKeyValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single pluginKeyValue record from the query.
func (q pluginKeyValueQuery) One(exec boil.Executor) (*PluginKeyValue, error) {
	o := &PluginKeyValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for plugin_key_values")
	}

	return o, nil
}

// All returns all PluginKeyValue records from the query.
func (q pluginKeyValueQuery) All(exec boil.Executor) (PluginKeyValueSlice, error) {
	var o []*PluginKeyValue

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to PluginKeyValue slice")
	}

	return o, nil
}

// Count returns the count of all PluginKeyValue records in the query.
func (q pluginKeyValueQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count plugin_key_values rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pluginKeyValueQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if plugin_key_values exists")
	}

	return count > 0, nil
}

// PluginKeyValues retrieves all the records using an executor.
func PluginKeyValues(mods ...qm.QueryMod) pluginKeyValueQuery {
	mods = append(mods, qm.From("\"plugin_key_values\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"plugin_key_values\".*"})
	}

	return pluginKeyValueQuery{q}
}

// FindPluginKeyValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPluginKeyValue(exec boil.Executor, pluginID string, pkey string, selectCols ...string) (*PluginKeyValue, error) {
	pluginKeyValueObj := &PluginKeyValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"plugin_key_values\" where \"plugin_id\"=$1 AND \"pkey\"=$2", sel,
	)

	q := queries.Raw(query, pluginID, pkey)

	err := q.Bind(nil, exec, pluginKeyValueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from plugin_key_values")
	}

	return pluginKeyValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PluginKeyValue) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no plugin_key_values provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(pluginKeyValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pluginKeyValueInsertCacheMut.RLock()
	cache, cached := pluginKeyValueInsertCache[key]
	pluginKeyValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pluginKeyValueAllColumns,
			pluginKeyValueColumnsWithDefault,
			pluginKeyValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pluginKeyValueType, pluginKeyValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pluginKeyValueType, pluginKeyValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"plugin_key_values\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"plugin_key_values\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into plugin_key_values")
	}

	if !cached {
		pluginKeyValueInsertCacheMut.Lock()
		pluginKeyValueInsertCache[key] = cache
		pluginKeyValueInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PluginKeyValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PluginKeyValue) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	pluginKeyValueUpdateCacheMut.RLock()
	cache, cached := pluginKeyValueUpdateCache[key]
	pluginKeyValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pluginKeyValueAllColumns,
			pluginKeyValuePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update plugin_key_values, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"plugin_key_values\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pluginKeyValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pluginKeyValueType, pluginKeyValueMapping, append(wl, pluginKeyValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update plugin_key_values row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for plugin_key_values")
	}

	if !cached {
		pluginKeyValueUpdateCacheMut.Lock()
		pluginKeyValueUpdateCache[key] = cache
		pluginKeyValueUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q pluginKeyValueQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for plugin_key_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for plugin_key_values")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PluginKeyValueSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]any, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pluginKeyValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"plugin_key_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pluginKeyValuePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in pluginKeyValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all pluginKeyValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PluginKeyValue) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no plugin_key_values provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(pluginKeyValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pluginKeyValueUpsertCacheMut.RLock()
	cache, cached := pluginKeyValueUpsertCache[key]
	pluginKeyValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			pluginKeyValueAllColumns,
			pluginKeyValueColumnsWithDefault,
			pluginKeyValueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pluginKeyValueAllColumns,
			pluginKeyValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert plugin_key_values, could not build update column list")
		}

		ret := strmangle.SetComplement(pluginKeyValueAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(pluginKeyValuePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert plugin_key_values, could not build conflict column list")
			}

			conflict = make([]string, len(pluginKeyValuePrimaryKeyColumns))
			copy(conflict, pluginKeyValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"plugin_key_values\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(pluginKeyValueType, pluginKeyValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pluginKeyValueType, pluginKeyValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []any
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert plugin_key_values")
	}

	if !cached {
		pluginKeyValueUpsertCacheMut.Lock()
		pluginKeyValueUpsertCache[key] = cache
		pluginKeyValueUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PluginKeyValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PluginKeyValue) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no PluginKeyValue provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pluginKeyValuePrimaryKeyMapping)
	sql := "DELETE FROM \"plugin_key_values\" WHERE \"plugin_id\"=$1 AND \"pkey\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from plugin_key_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for plugin_key_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pluginKeyValueQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no pluginKeyValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from plugin_key_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for plugin_key_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PluginKeyValueSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []any
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pluginKeyValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"plugin_key_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pluginKeyValuePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from pluginKeyValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for plugin_key_values")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PluginKeyValue) Reload(exec boil.Executor) error {
	ret, err := FindPluginKeyValue(exec, o.PluginID, o.Pkey)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PluginKeyValueSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PluginKeyValueSlice{}
	var args []any
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pluginKeyValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"plugin_key_values\".* FROM \"plugin_key_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pluginKeyValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PluginKeyValueSlice")
	}

	*o = slice

	return nil
}

// PluginKeyValueExists checks if the PluginKeyValue row exists.
func PluginKeyValueExists(exec boil.Executor, pluginID string, pkey string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"plugin_key_values\" where \"plugin_id\"=$1 AND \"pkey\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, pluginID, pkey)
	}
	row := exec.QueryRow(sql, pluginID, pkey)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if plugin_key_values exists")
	}

	return exists, nil
}

// Exists checks if the PluginKeyValue row exists.
func (o *PluginKeyValue) Exists(exec boil.Executor) (bool, error) {
	return PluginKeyValueExists(exec, o.PluginID, o.Pkey)
}
