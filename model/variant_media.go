// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VariantMedium is an object representing the database table.
type VariantMedium struct {
	ID        string `boil:"id" json:"id" toml:"id" yaml:"id"`
	VariantID string `boil:"variant_id" json:"variant_id" toml:"variant_id" yaml:"variant_id"`
	MediaID   string `boil:"media_id" json:"media_id" toml:"media_id" yaml:"media_id"`

	R *variantMediumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L variantMediumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VariantMediumColumns = struct {
	ID        string
	VariantID string
	MediaID   string
}{
	ID:        "id",
	VariantID: "variant_id",
	MediaID:   "media_id",
}

var VariantMediumTableColumns = struct {
	ID        string
	VariantID string
	MediaID   string
}{
	ID:        "variant_media.id",
	VariantID: "variant_media.variant_id",
	MediaID:   "variant_media.media_id",
}

// Generated where

var VariantMediumWhere = struct {
	ID        whereHelperstring
	VariantID whereHelperstring
	MediaID   whereHelperstring
}{
	ID:        whereHelperstring{field: "\"variant_media\".\"id\""},
	VariantID: whereHelperstring{field: "\"variant_media\".\"variant_id\""},
	MediaID:   whereHelperstring{field: "\"variant_media\".\"media_id\""},
}

// VariantMediumRels is where relationship names are stored.
var VariantMediumRels = struct {
	Medium  string
	Variant string
}{
	Medium:  "Medium",
	Variant: "Variant",
}

// variantMediumR is where relationships are stored.
type variantMediumR struct {
	Medium  *ProductMedium  `boil:"Medium" json:"Medium" toml:"Medium" yaml:"Medium"`
	Variant *ProductVariant `boil:"Variant" json:"Variant" toml:"Variant" yaml:"Variant"`
}

// NewStruct creates a new relationship struct
func (*variantMediumR) NewStruct() *variantMediumR {
	return &variantMediumR{}
}

func (r *variantMediumR) GetMedium() *ProductMedium {
	if r == nil {
		return nil
	}
	return r.Medium
}

func (r *variantMediumR) GetVariant() *ProductVariant {
	if r == nil {
		return nil
	}
	return r.Variant
}

// variantMediumL is where Load methods for each relationship are stored.
type variantMediumL struct{}

var (
	variantMediumAllColumns            = []string{"id", "variant_id", "media_id"}
	variantMediumColumnsWithoutDefault = []string{"variant_id", "media_id"}
	variantMediumColumnsWithDefault    = []string{"id"}
	variantMediumPrimaryKeyColumns     = []string{"id"}
	variantMediumGeneratedColumns      = []string{}
)

type (
	// VariantMediumSlice is an alias for a slice of pointers to VariantMedium.
	// This should almost always be used instead of []VariantMedium.
	VariantMediumSlice []*VariantMedium

	variantMediumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	variantMediumType                 = reflect.TypeOf(&VariantMedium{})
	variantMediumMapping              = queries.MakeStructMapping(variantMediumType)
	variantMediumPrimaryKeyMapping, _ = queries.BindMapping(variantMediumType, variantMediumMapping, variantMediumPrimaryKeyColumns)
	variantMediumInsertCacheMut       sync.RWMutex
	variantMediumInsertCache          = make(map[string]insertCache)
	variantMediumUpdateCacheMut       sync.RWMutex
	variantMediumUpdateCache          = make(map[string]updateCache)
	variantMediumUpsertCacheMut       sync.RWMutex
	variantMediumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single variantMedium record from the query.
func (q variantMediumQuery) One(exec boil.Executor) (*VariantMedium, error) {
	o := &VariantMedium{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for variant_media")
	}

	return o, nil
}

// All returns all VariantMedium records from the query.
func (q variantMediumQuery) All(exec boil.Executor) (VariantMediumSlice, error) {
	var o []*VariantMedium

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to VariantMedium slice")
	}

	return o, nil
}

// Count returns the count of all VariantMedium records in the query.
func (q variantMediumQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count variant_media rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q variantMediumQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if variant_media exists")
	}

	return count > 0, nil
}

// Medium pointed to by the foreign key.
func (o *VariantMedium) Medium(mods ...qm.QueryMod) productMediumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MediaID),
	}

	queryMods = append(queryMods, mods...)

	return ProductMedia(queryMods...)
}

// Variant pointed to by the foreign key.
func (o *VariantMedium) Variant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VariantID),
	}

	queryMods = append(queryMods, mods...)

	return ProductVariants(queryMods...)
}

// LoadMedium allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (variantMediumL) LoadMedium(e boil.Executor, singular bool, maybeVariantMedium interface{}, mods queries.Applicator) error {
	var slice []*VariantMedium
	var object *VariantMedium

	if singular {
		var ok bool
		object, ok = maybeVariantMedium.(*VariantMedium)
		if !ok {
			object = new(VariantMedium)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVariantMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVariantMedium))
			}
		}
	} else {
		s, ok := maybeVariantMedium.(*[]*VariantMedium)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVariantMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVariantMedium))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &variantMediumR{}
		}
		args[object.MediaID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &variantMediumR{}
			}

			args[obj.MediaID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product_media`),
		qm.WhereIn(`product_media.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductMedium")
	}

	var resultSlice []*ProductMedium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductMedium")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_media")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Medium = foreign
		if foreign.R == nil {
			foreign.R = &productMediumR{}
		}
		foreign.R.MediumVariantMedia = append(foreign.R.MediumVariantMedia, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MediaID == foreign.ID {
				local.R.Medium = foreign
				if foreign.R == nil {
					foreign.R = &productMediumR{}
				}
				foreign.R.MediumVariantMedia = append(foreign.R.MediumVariantMedia, local)
				break
			}
		}
	}

	return nil
}

// LoadVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (variantMediumL) LoadVariant(e boil.Executor, singular bool, maybeVariantMedium interface{}, mods queries.Applicator) error {
	var slice []*VariantMedium
	var object *VariantMedium

	if singular {
		var ok bool
		object, ok = maybeVariantMedium.(*VariantMedium)
		if !ok {
			object = new(VariantMedium)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVariantMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVariantMedium))
			}
		}
	} else {
		s, ok := maybeVariantMedium.(*[]*VariantMedium)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVariantMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVariantMedium))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &variantMediumR{}
		}
		args[object.VariantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &variantMediumR{}
			}

			args[obj.VariantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Variant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.VariantVariantMedia = append(foreign.R.VariantVariantMedia, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VariantID == foreign.ID {
				local.R.Variant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.VariantVariantMedia = append(foreign.R.VariantVariantMedia, local)
				break
			}
		}
	}

	return nil
}

// SetMedium of the variantMedium to the related item.
// Sets o.R.Medium to related.
// Adds o to related.R.MediumVariantMedia.
func (o *VariantMedium) SetMedium(exec boil.Executor, insert bool, related *ProductMedium) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"variant_media\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"media_id"}),
		strmangle.WhereClause("\"", "\"", 2, variantMediumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MediaID = related.ID
	if o.R == nil {
		o.R = &variantMediumR{
			Medium: related,
		}
	} else {
		o.R.Medium = related
	}

	if related.R == nil {
		related.R = &productMediumR{
			MediumVariantMedia: VariantMediumSlice{o},
		}
	} else {
		related.R.MediumVariantMedia = append(related.R.MediumVariantMedia, o)
	}

	return nil
}

// SetVariant of the variantMedium to the related item.
// Sets o.R.Variant to related.
// Adds o to related.R.VariantVariantMedia.
func (o *VariantMedium) SetVariant(exec boil.Executor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"variant_media\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"variant_id"}),
		strmangle.WhereClause("\"", "\"", 2, variantMediumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VariantID = related.ID
	if o.R == nil {
		o.R = &variantMediumR{
			Variant: related,
		}
	} else {
		o.R.Variant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			VariantVariantMedia: VariantMediumSlice{o},
		}
	} else {
		related.R.VariantVariantMedia = append(related.R.VariantVariantMedia, o)
	}

	return nil
}

// VariantMedia retrieves all the records using an executor.
func VariantMedia(mods ...qm.QueryMod) variantMediumQuery {
	mods = append(mods, qm.From("\"variant_media\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"variant_media\".*"})
	}

	return variantMediumQuery{q}
}

// FindVariantMedium retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVariantMedium(exec boil.Executor, iD string, selectCols ...string) (*VariantMedium, error) {
	variantMediumObj := &VariantMedium{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"variant_media\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, variantMediumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from variant_media")
	}

	return variantMediumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VariantMedium) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no variant_media provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(variantMediumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	variantMediumInsertCacheMut.RLock()
	cache, cached := variantMediumInsertCache[key]
	variantMediumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			variantMediumAllColumns,
			variantMediumColumnsWithDefault,
			variantMediumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(variantMediumType, variantMediumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(variantMediumType, variantMediumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"variant_media\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"variant_media\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into variant_media")
	}

	if !cached {
		variantMediumInsertCacheMut.Lock()
		variantMediumInsertCache[key] = cache
		variantMediumInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the VariantMedium.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VariantMedium) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	variantMediumUpdateCacheMut.RLock()
	cache, cached := variantMediumUpdateCache[key]
	variantMediumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			variantMediumAllColumns,
			variantMediumPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update variant_media, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"variant_media\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, variantMediumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(variantMediumType, variantMediumMapping, append(wl, variantMediumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update variant_media row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for variant_media")
	}

	if !cached {
		variantMediumUpdateCacheMut.Lock()
		variantMediumUpdateCache[key] = cache
		variantMediumUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q variantMediumQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for variant_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for variant_media")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VariantMediumSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variantMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"variant_media\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, variantMediumPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in variantMedium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all variantMedium")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VariantMedium) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no variant_media provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(variantMediumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	variantMediumUpsertCacheMut.RLock()
	cache, cached := variantMediumUpsertCache[key]
	variantMediumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			variantMediumAllColumns,
			variantMediumColumnsWithDefault,
			variantMediumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			variantMediumAllColumns,
			variantMediumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert variant_media, could not build update column list")
		}

		ret := strmangle.SetComplement(variantMediumAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(variantMediumPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert variant_media, could not build conflict column list")
			}

			conflict = make([]string, len(variantMediumPrimaryKeyColumns))
			copy(conflict, variantMediumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"variant_media\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(variantMediumType, variantMediumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(variantMediumType, variantMediumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert variant_media")
	}

	if !cached {
		variantMediumUpsertCacheMut.Lock()
		variantMediumUpsertCache[key] = cache
		variantMediumUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single VariantMedium record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VariantMedium) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no VariantMedium provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), variantMediumPrimaryKeyMapping)
	sql := "DELETE FROM \"variant_media\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from variant_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for variant_media")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q variantMediumQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no variantMediumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from variant_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for variant_media")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VariantMediumSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variantMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"variant_media\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, variantMediumPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from variantMedium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for variant_media")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VariantMedium) Reload(exec boil.Executor) error {
	ret, err := FindVariantMedium(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VariantMediumSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VariantMediumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), variantMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"variant_media\".* FROM \"variant_media\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, variantMediumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in VariantMediumSlice")
	}

	*o = slice

	return nil
}

// VariantMediumExists checks if the VariantMedium row exists.
func VariantMediumExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"variant_media\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if variant_media exists")
	}

	return exists, nil
}

// Exists checks if the VariantMedium row exists.
func (o *VariantMedium) Exists(exec boil.Executor) (bool, error) {
	return VariantMediumExists(exec, o.ID)
}
