// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductType is an object representing the database table.
type ProductType struct {
	ID                 string                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name               string                  `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug               string                  `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	Kind               Producttypekind         `boil:"kind" json:"kind" toml:"kind" yaml:"kind"`
	HasVariants        model_types.NullBool    `boil:"has_variants" json:"has_variants,omitempty" toml:"has_variants" yaml:"has_variants,omitempty"`
	IsShippingRequired model_types.NullBool    `boil:"is_shipping_required" json:"is_shipping_required,omitempty" toml:"is_shipping_required" yaml:"is_shipping_required,omitempty"`
	IsDigital          model_types.NullBool    `boil:"is_digital" json:"is_digital,omitempty" toml:"is_digital" yaml:"is_digital,omitempty"`
	Weight             model_types.NullFloat32 `boil:"weight" json:"weight,omitempty" toml:"weight" yaml:"weight,omitempty"`
	WeightUnit         string                  `boil:"weight_unit" json:"weight_unit" toml:"weight_unit" yaml:"weight_unit"`
	Metadata           model_types.JsonMap     `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata    model_types.JsonMap     `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *productTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductTypeColumns = struct {
	ID                 string
	Name               string
	Slug               string
	Kind               string
	HasVariants        string
	IsShippingRequired string
	IsDigital          string
	Weight             string
	WeightUnit         string
	Metadata           string
	PrivateMetadata    string
}{
	ID:                 "id",
	Name:               "name",
	Slug:               "slug",
	Kind:               "kind",
	HasVariants:        "has_variants",
	IsShippingRequired: "is_shipping_required",
	IsDigital:          "is_digital",
	Weight:             "weight",
	WeightUnit:         "weight_unit",
	Metadata:           "metadata",
	PrivateMetadata:    "private_metadata",
}

var ProductTypeTableColumns = struct {
	ID                 string
	Name               string
	Slug               string
	Kind               string
	HasVariants        string
	IsShippingRequired string
	IsDigital          string
	Weight             string
	WeightUnit         string
	Metadata           string
	PrivateMetadata    string
}{
	ID:                 "product_types.id",
	Name:               "product_types.name",
	Slug:               "product_types.slug",
	Kind:               "product_types.kind",
	HasVariants:        "product_types.has_variants",
	IsShippingRequired: "product_types.is_shipping_required",
	IsDigital:          "product_types.is_digital",
	Weight:             "product_types.weight",
	WeightUnit:         "product_types.weight_unit",
	Metadata:           "product_types.metadata",
	PrivateMetadata:    "product_types.private_metadata",
}

// Generated where

type whereHelperProducttypekind struct{ field string }

func (w whereHelperProducttypekind) EQ(x Producttypekind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperProducttypekind) NEQ(x Producttypekind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperProducttypekind) LT(x Producttypekind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperProducttypekind) LTE(x Producttypekind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperProducttypekind) GT(x Producttypekind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperProducttypekind) GTE(x Producttypekind) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperProducttypekind) IN(slice []Producttypekind) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperProducttypekind) NIN(slice []Producttypekind) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpermodel_types_NullFloat32 struct{ field string }

func (w whereHelpermodel_types_NullFloat32) EQ(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpermodel_types_NullFloat32) NEQ(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpermodel_types_NullFloat32) LT(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpermodel_types_NullFloat32) LTE(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpermodel_types_NullFloat32) GT(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpermodel_types_NullFloat32) GTE(x model_types.NullFloat32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpermodel_types_NullFloat32) IsNull() qm.QueryMod {
	return qmhelper.WhereIsNull(w.field)
}
func (w whereHelpermodel_types_NullFloat32) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var ProductTypeWhere = struct {
	ID                 whereHelperstring
	Name               whereHelperstring
	Slug               whereHelperstring
	Kind               whereHelperProducttypekind
	HasVariants        whereHelpermodel_types_NullBool
	IsShippingRequired whereHelpermodel_types_NullBool
	IsDigital          whereHelpermodel_types_NullBool
	Weight             whereHelpermodel_types_NullFloat32
	WeightUnit         whereHelperstring
	Metadata           whereHelpermodel_types_JsonMap
	PrivateMetadata    whereHelpermodel_types_JsonMap
}{
	ID:                 whereHelperstring{field: "\"product_types\".\"id\""},
	Name:               whereHelperstring{field: "\"product_types\".\"name\""},
	Slug:               whereHelperstring{field: "\"product_types\".\"slug\""},
	Kind:               whereHelperProducttypekind{field: "\"product_types\".\"kind\""},
	HasVariants:        whereHelpermodel_types_NullBool{field: "\"product_types\".\"has_variants\""},
	IsShippingRequired: whereHelpermodel_types_NullBool{field: "\"product_types\".\"is_shipping_required\""},
	IsDigital:          whereHelpermodel_types_NullBool{field: "\"product_types\".\"is_digital\""},
	Weight:             whereHelpermodel_types_NullFloat32{field: "\"product_types\".\"weight\""},
	WeightUnit:         whereHelperstring{field: "\"product_types\".\"weight_unit\""},
	Metadata:           whereHelpermodel_types_JsonMap{field: "\"product_types\".\"metadata\""},
	PrivateMetadata:    whereHelpermodel_types_JsonMap{field: "\"product_types\".\"private_metadata\""},
}

// ProductTypeRels is where relationship names are stored.
var ProductTypeRels = struct {
	AttributeProducts string
	AttributeVariants string
}{
	AttributeProducts: "AttributeProducts",
	AttributeVariants: "AttributeVariants",
}

// productTypeR is where relationships are stored.
type productTypeR struct {
	AttributeProducts AttributeProductSlice `boil:"AttributeProducts" json:"AttributeProducts" toml:"AttributeProducts" yaml:"AttributeProducts"`
	AttributeVariants AttributeVariantSlice `boil:"AttributeVariants" json:"AttributeVariants" toml:"AttributeVariants" yaml:"AttributeVariants"`
}

// NewStruct creates a new relationship struct
func (*productTypeR) NewStruct() *productTypeR {
	return &productTypeR{}
}

func (r *productTypeR) GetAttributeProducts() AttributeProductSlice {
	if r == nil {
		return nil
	}
	return r.AttributeProducts
}

func (r *productTypeR) GetAttributeVariants() AttributeVariantSlice {
	if r == nil {
		return nil
	}
	return r.AttributeVariants
}

// productTypeL is where Load methods for each relationship are stored.
type productTypeL struct{}

var (
	productTypeAllColumns            = []string{"id", "name", "slug", "kind", "has_variants", "is_shipping_required", "is_digital", "weight", "weight_unit", "metadata", "private_metadata"}
	productTypeColumnsWithoutDefault = []string{"name", "slug", "kind", "weight_unit"}
	productTypeColumnsWithDefault    = []string{"id", "has_variants", "is_shipping_required", "is_digital", "weight", "metadata", "private_metadata"}
	productTypePrimaryKeyColumns     = []string{"id"}
	productTypeGeneratedColumns      = []string{}
)

type (
	// ProductTypeSlice is an alias for a slice of pointers to ProductType.
	// This should almost always be used instead of []ProductType.
	ProductTypeSlice []*ProductType

	productTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productTypeType                 = reflect.TypeOf(&ProductType{})
	productTypeMapping              = queries.MakeStructMapping(productTypeType)
	productTypePrimaryKeyMapping, _ = queries.BindMapping(productTypeType, productTypeMapping, productTypePrimaryKeyColumns)
	productTypeInsertCacheMut       sync.RWMutex
	productTypeInsertCache          = make(map[string]insertCache)
	productTypeUpdateCacheMut       sync.RWMutex
	productTypeUpdateCache          = make(map[string]updateCache)
	productTypeUpsertCacheMut       sync.RWMutex
	productTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single productType record from the query.
func (q productTypeQuery) One(exec boil.Executor) (*ProductType, error) {
	o := &ProductType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for product_types")
	}

	return o, nil
}

// All returns all ProductType records from the query.
func (q productTypeQuery) All(exec boil.Executor) (ProductTypeSlice, error) {
	var o []*ProductType

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ProductType slice")
	}

	return o, nil
}

// Count returns the count of all ProductType records in the query.
func (q productTypeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count product_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productTypeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if product_types exists")
	}

	return count > 0, nil
}

// AttributeProducts retrieves all the attribute_product's AttributeProducts with an executor.
func (o *ProductType) AttributeProducts(mods ...qm.QueryMod) attributeProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"attribute_products\".\"product_type_id\"=?", o.ID),
	)

	return AttributeProducts(queryMods...)
}

// AttributeVariants retrieves all the attribute_variant's AttributeVariants with an executor.
func (o *ProductType) AttributeVariants(mods ...qm.QueryMod) attributeVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"attribute_variants\".\"product_type_id\"=?", o.ID),
	)

	return AttributeVariants(queryMods...)
}

// LoadAttributeProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productTypeL) LoadAttributeProducts(e boil.Executor, singular bool, maybeProductType interface{}, mods queries.Applicator) error {
	var slice []*ProductType
	var object *ProductType

	if singular {
		var ok bool
		object, ok = maybeProductType.(*ProductType)
		if !ok {
			object = new(ProductType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductType))
			}
		}
	} else {
		s, ok := maybeProductType.(*[]*ProductType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attribute_products`),
		qm.WhereIn(`attribute_products.product_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load attribute_products")
	}

	var resultSlice []*AttributeProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice attribute_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on attribute_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_products")
	}

	if singular {
		object.R.AttributeProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &attributeProductR{}
			}
			foreign.R.ProductType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductTypeID {
				local.R.AttributeProducts = append(local.R.AttributeProducts, foreign)
				if foreign.R == nil {
					foreign.R = &attributeProductR{}
				}
				foreign.R.ProductType = local
				break
			}
		}
	}

	return nil
}

// LoadAttributeVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productTypeL) LoadAttributeVariants(e boil.Executor, singular bool, maybeProductType interface{}, mods queries.Applicator) error {
	var slice []*ProductType
	var object *ProductType

	if singular {
		var ok bool
		object, ok = maybeProductType.(*ProductType)
		if !ok {
			object = new(ProductType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductType))
			}
		}
	} else {
		s, ok := maybeProductType.(*[]*ProductType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attribute_variants`),
		qm.WhereIn(`attribute_variants.product_type_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load attribute_variants")
	}

	var resultSlice []*AttributeVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice attribute_variants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on attribute_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_variants")
	}

	if singular {
		object.R.AttributeVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &attributeVariantR{}
			}
			foreign.R.ProductType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ProductTypeID {
				local.R.AttributeVariants = append(local.R.AttributeVariants, foreign)
				if foreign.R == nil {
					foreign.R = &attributeVariantR{}
				}
				foreign.R.ProductType = local
				break
			}
		}
	}

	return nil
}

// AddAttributeProducts adds the given related objects to the existing relationships
// of the product_type, optionally inserting them as new records.
// Appends related to o.R.AttributeProducts.
// Sets related.R.ProductType appropriately.
func (o *ProductType) AddAttributeProducts(exec boil.Executor, insert bool, related ...*AttributeProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductTypeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"attribute_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, attributeProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productTypeR{
			AttributeProducts: related,
		}
	} else {
		o.R.AttributeProducts = append(o.R.AttributeProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &attributeProductR{
				ProductType: o,
			}
		} else {
			rel.R.ProductType = o
		}
	}
	return nil
}

// AddAttributeVariants adds the given related objects to the existing relationships
// of the product_type, optionally inserting them as new records.
// Appends related to o.R.AttributeVariants.
// Sets related.R.ProductType appropriately.
func (o *ProductType) AddAttributeVariants(exec boil.Executor, insert bool, related ...*AttributeVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ProductTypeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"attribute_variants\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"product_type_id"}),
				strmangle.WhereClause("\"", "\"", 2, attributeVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ProductTypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &productTypeR{
			AttributeVariants: related,
		}
	} else {
		o.R.AttributeVariants = append(o.R.AttributeVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &attributeVariantR{
				ProductType: o,
			}
		} else {
			rel.R.ProductType = o
		}
	}
	return nil
}

// ProductTypes retrieves all the records using an executor.
func ProductTypes(mods ...qm.QueryMod) productTypeQuery {
	mods = append(mods, qm.From("\"product_types\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_types\".*"})
	}

	return productTypeQuery{q}
}

// FindProductType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductType(exec boil.Executor, iD string, selectCols ...string) (*ProductType, error) {
	productTypeObj := &ProductType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, productTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from product_types")
	}

	return productTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductType) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_types provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(productTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productTypeInsertCacheMut.RLock()
	cache, cached := productTypeInsertCache[key]
	productTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productTypeAllColumns,
			productTypeColumnsWithDefault,
			productTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productTypeType, productTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productTypeType, productTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into product_types")
	}

	if !cached {
		productTypeInsertCacheMut.Lock()
		productTypeInsertCache[key] = cache
		productTypeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ProductType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductType) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	productTypeUpdateCacheMut.RLock()
	cache, cached := productTypeUpdateCache[key]
	productTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productTypeAllColumns,
			productTypePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update product_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productTypeType, productTypeMapping, append(wl, productTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update product_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for product_types")
	}

	if !cached {
		productTypeUpdateCacheMut.Lock()
		productTypeUpdateCache[key] = cache
		productTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q productTypeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for product_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for product_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductTypeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productTypePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in productType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all productType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductType) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_types provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(productTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productTypeUpsertCacheMut.RLock()
	cache, cached := productTypeUpsertCache[key]
	productTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productTypeAllColumns,
			productTypeColumnsWithDefault,
			productTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productTypeAllColumns,
			productTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert product_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productTypePrimaryKeyColumns))
			copy(conflict, productTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productTypeType, productTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productTypeType, productTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert product_types")
	}

	if !cached {
		productTypeUpsertCacheMut.Lock()
		productTypeUpsertCache[key] = cache
		productTypeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ProductType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductType) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ProductType provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productTypePrimaryKeyMapping)
	sql := "DELETE FROM \"product_types\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from product_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for product_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productTypeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no productTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from product_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductTypeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productTypePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from productType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_types")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductType) Reload(exec boil.Executor) error {
	ret, err := FindProductType(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductTypeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_types\".* FROM \"product_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ProductTypeSlice")
	}

	*o = slice

	return nil
}

// ProductTypeExists checks if the ProductType row exists.
func ProductTypeExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_types\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if product_types exists")
	}

	return exists, nil
}

// Exists checks if the ProductType row exists.
func (o *ProductType) Exists(exec boil.Executor) (bool, error) {
	return ProductTypeExists(exec, o.ID)
}
