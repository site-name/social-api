// Code generated by SQLBoiler 4.17.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PromotionEvent is an object representing the database table.
type PromotionEvent struct {
	ID          string                 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Date        int64                  `boil:"date" json:"date" toml:"date" yaml:"date"`
	Type        PromotionEventType     `boil:"type" json:"type" toml:"type" yaml:"type"`
	Parameters  model_types.JSONString `boil:"parameters" json:"parameters,omitempty" toml:"parameters" yaml:"parameters,omitempty"`
	UserID      model_types.NullString `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	AppID       model_types.NullString `boil:"app_id" json:"app_id,omitempty" toml:"app_id" yaml:"app_id,omitempty"`
	PromotionID model_types.NullString `boil:"promotion_id" json:"promotion_id,omitempty" toml:"promotion_id" yaml:"promotion_id,omitempty"`

	R *promotionEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L promotionEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PromotionEventColumns = struct {
	ID          string
	Date        string
	Type        string
	Parameters  string
	UserID      string
	AppID       string
	PromotionID string
}{
	ID:          "id",
	Date:        "date",
	Type:        "type",
	Parameters:  "parameters",
	UserID:      "user_id",
	AppID:       "app_id",
	PromotionID: "promotion_id",
}

var PromotionEventTableColumns = struct {
	ID          string
	Date        string
	Type        string
	Parameters  string
	UserID      string
	AppID       string
	PromotionID string
}{
	ID:          "promotion_events.id",
	Date:        "promotion_events.date",
	Type:        "promotion_events.type",
	Parameters:  "promotion_events.parameters",
	UserID:      "promotion_events.user_id",
	AppID:       "promotion_events.app_id",
	PromotionID: "promotion_events.promotion_id",
}

// Generated where

type whereHelperPromotionEventType struct{ field string }

func (w whereHelperPromotionEventType) EQ(x PromotionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperPromotionEventType) NEQ(x PromotionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperPromotionEventType) LT(x PromotionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperPromotionEventType) LTE(x PromotionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperPromotionEventType) GT(x PromotionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperPromotionEventType) GTE(x PromotionEventType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperPromotionEventType) IN(slice []PromotionEventType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperPromotionEventType) NIN(slice []PromotionEventType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var PromotionEventWhere = struct {
	ID          whereHelperstring
	Date        whereHelperint64
	Type        whereHelperPromotionEventType
	Parameters  whereHelpermodel_types_JSONString
	UserID      whereHelpermodel_types_NullString
	AppID       whereHelpermodel_types_NullString
	PromotionID whereHelpermodel_types_NullString
}{
	ID:          whereHelperstring{field: "\"promotion_events\".\"id\""},
	Date:        whereHelperint64{field: "\"promotion_events\".\"date\""},
	Type:        whereHelperPromotionEventType{field: "\"promotion_events\".\"type\""},
	Parameters:  whereHelpermodel_types_JSONString{field: "\"promotion_events\".\"parameters\""},
	UserID:      whereHelpermodel_types_NullString{field: "\"promotion_events\".\"user_id\""},
	AppID:       whereHelpermodel_types_NullString{field: "\"promotion_events\".\"app_id\""},
	PromotionID: whereHelpermodel_types_NullString{field: "\"promotion_events\".\"promotion_id\""},
}

// PromotionEventRels is where relationship names are stored.
var PromotionEventRels = struct {
	Promotion string
	User      string
}{
	Promotion: "Promotion",
	User:      "User",
}

// promotionEventR is where relationships are stored.
type promotionEventR struct {
	Promotion *Promotion `boil:"Promotion" json:"Promotion" toml:"Promotion" yaml:"Promotion"`
	User      *User      `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*promotionEventR) NewStruct() *promotionEventR {
	return &promotionEventR{}
}

func (r *promotionEventR) GetPromotion() *Promotion {
	if r == nil {
		return nil
	}
	return r.Promotion
}

func (r *promotionEventR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// promotionEventL is where Load methods for each relationship are stored.
type promotionEventL struct{}

var (
	promotionEventAllColumns            = []string{"id", "date", "type", "parameters", "user_id", "app_id", "promotion_id"}
	promotionEventColumnsWithoutDefault = []string{"id", "date", "type"}
	promotionEventColumnsWithDefault    = []string{"parameters", "user_id", "app_id", "promotion_id"}
	promotionEventPrimaryKeyColumns     = []string{"id"}
	promotionEventGeneratedColumns      = []string{}
)

type (
	// PromotionEventSlice is an alias for a slice of pointers to PromotionEvent.
	// This should almost always be used instead of []PromotionEvent.
	PromotionEventSlice []*PromotionEvent

	promotionEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	promotionEventType                 = reflect.TypeOf(&PromotionEvent{})
	promotionEventMapping              = queries.MakeStructMapping(promotionEventType)
	promotionEventPrimaryKeyMapping, _ = queries.BindMapping(promotionEventType, promotionEventMapping, promotionEventPrimaryKeyColumns)
	promotionEventInsertCacheMut       sync.RWMutex
	promotionEventInsertCache          = make(map[string]insertCache)
	promotionEventUpdateCacheMut       sync.RWMutex
	promotionEventUpdateCache          = make(map[string]updateCache)
	promotionEventUpsertCacheMut       sync.RWMutex
	promotionEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single promotionEvent record from the query.
func (q promotionEventQuery) One(exec boil.Executor) (*PromotionEvent, error) {
	o := &PromotionEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for promotion_events")
	}

	return o, nil
}

// All returns all PromotionEvent records from the query.
func (q promotionEventQuery) All(exec boil.Executor) (PromotionEventSlice, error) {
	var o []*PromotionEvent

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to PromotionEvent slice")
	}

	return o, nil
}

// Count returns the count of all PromotionEvent records in the query.
func (q promotionEventQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count promotion_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q promotionEventQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if promotion_events exists")
	}

	return count > 0, nil
}

// Promotion pointed to by the foreign key.
func (o *PromotionEvent) Promotion(mods ...qm.QueryMod) promotionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PromotionID),
	}

	queryMods = append(queryMods, mods...)

	return Promotions(queryMods...)
}

// User pointed to by the foreign key.
func (o *PromotionEvent) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadPromotion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (promotionEventL) LoadPromotion(e boil.Executor, singular bool, maybePromotionEvent interface{}, mods queries.Applicator) error {
	var slice []*PromotionEvent
	var object *PromotionEvent

	if singular {
		var ok bool
		object, ok = maybePromotionEvent.(*PromotionEvent)
		if !ok {
			object = new(PromotionEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionEvent))
			}
		}
	} else {
		s, ok := maybePromotionEvent.(*[]*PromotionEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionEventR{}
		}
		if !queries.IsNil(object.PromotionID) {
			args[object.PromotionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionEventR{}
			}

			if !queries.IsNil(obj.PromotionID) {
				args[obj.PromotionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`promotions`),
		qm.WhereIn(`promotions.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Promotion")
	}

	var resultSlice []*Promotion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Promotion")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for promotions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for promotions")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Promotion = foreign
		if foreign.R == nil {
			foreign.R = &promotionR{}
		}
		foreign.R.PromotionEvents = append(foreign.R.PromotionEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PromotionID, foreign.ID) {
				local.R.Promotion = foreign
				if foreign.R == nil {
					foreign.R = &promotionR{}
				}
				foreign.R.PromotionEvents = append(foreign.R.PromotionEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (promotionEventL) LoadUser(e boil.Executor, singular bool, maybePromotionEvent interface{}, mods queries.Applicator) error {
	var slice []*PromotionEvent
	var object *PromotionEvent

	if singular {
		var ok bool
		object, ok = maybePromotionEvent.(*PromotionEvent)
		if !ok {
			object = new(PromotionEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePromotionEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePromotionEvent))
			}
		}
	} else {
		s, ok := maybePromotionEvent.(*[]*PromotionEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePromotionEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePromotionEvent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &promotionEventR{}
		}
		if !queries.IsNil(object.UserID) {
			args[object.UserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &promotionEventR{}
			}

			if !queries.IsNil(obj.UserID) {
				args[obj.UserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.PromotionEvents = append(foreign.R.PromotionEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.PromotionEvents = append(foreign.R.PromotionEvents, local)
				break
			}
		}
	}

	return nil
}

// SetPromotion of the promotionEvent to the related item.
// Sets o.R.Promotion to related.
// Adds o to related.R.PromotionEvents.
func (o *PromotionEvent) SetPromotion(exec boil.Executor, insert bool, related *Promotion) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"promotion_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"promotion_id"}),
		strmangle.WhereClause("\"", "\"", 2, promotionEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PromotionID, related.ID)
	if o.R == nil {
		o.R = &promotionEventR{
			Promotion: related,
		}
	} else {
		o.R.Promotion = related
	}

	if related.R == nil {
		related.R = &promotionR{
			PromotionEvents: PromotionEventSlice{o},
		}
	} else {
		related.R.PromotionEvents = append(related.R.PromotionEvents, o)
	}

	return nil
}

// RemovePromotion relationship.
// Sets o.R.Promotion to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PromotionEvent) RemovePromotion(exec boil.Executor, related *Promotion) error {
	var err error

	queries.SetScanner(&o.PromotionID, nil)
	if _, err = o.Update(exec, boil.Whitelist("promotion_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Promotion = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PromotionEvents {
		if queries.Equal(o.PromotionID, ri.PromotionID) {
			continue
		}

		ln := len(related.R.PromotionEvents)
		if ln > 1 && i < ln-1 {
			related.R.PromotionEvents[i] = related.R.PromotionEvents[ln-1]
		}
		related.R.PromotionEvents = related.R.PromotionEvents[:ln-1]
		break
	}
	return nil
}

// SetUser of the promotionEvent to the related item.
// Sets o.R.User to related.
// Adds o to related.R.PromotionEvents.
func (o *PromotionEvent) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"promotion_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, promotionEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &promotionEventR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			PromotionEvents: PromotionEventSlice{o},
		}
	} else {
		related.R.PromotionEvents = append(related.R.PromotionEvents, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PromotionEvent) RemoveUser(exec boil.Executor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PromotionEvents {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.PromotionEvents)
		if ln > 1 && i < ln-1 {
			related.R.PromotionEvents[i] = related.R.PromotionEvents[ln-1]
		}
		related.R.PromotionEvents = related.R.PromotionEvents[:ln-1]
		break
	}
	return nil
}

// PromotionEvents retrieves all the records using an executor.
func PromotionEvents(mods ...qm.QueryMod) promotionEventQuery {
	mods = append(mods, qm.From("\"promotion_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"promotion_events\".*"})
	}

	return promotionEventQuery{q}
}

// FindPromotionEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPromotionEvent(exec boil.Executor, iD string, selectCols ...string) (*PromotionEvent, error) {
	promotionEventObj := &PromotionEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"promotion_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, promotionEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from promotion_events")
	}

	return promotionEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PromotionEvent) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no promotion_events provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(promotionEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	promotionEventInsertCacheMut.RLock()
	cache, cached := promotionEventInsertCache[key]
	promotionEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			promotionEventAllColumns,
			promotionEventColumnsWithDefault,
			promotionEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(promotionEventType, promotionEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(promotionEventType, promotionEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"promotion_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"promotion_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into promotion_events")
	}

	if !cached {
		promotionEventInsertCacheMut.Lock()
		promotionEventInsertCache[key] = cache
		promotionEventInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the PromotionEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PromotionEvent) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	promotionEventUpdateCacheMut.RLock()
	cache, cached := promotionEventUpdateCache[key]
	promotionEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			promotionEventAllColumns,
			promotionEventPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update promotion_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"promotion_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, promotionEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(promotionEventType, promotionEventMapping, append(wl, promotionEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update promotion_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for promotion_events")
	}

	if !cached {
		promotionEventUpdateCacheMut.Lock()
		promotionEventUpdateCache[key] = cache
		promotionEventUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q promotionEventQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for promotion_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for promotion_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PromotionEventSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"promotion_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, promotionEventPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in promotionEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all promotionEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PromotionEvent) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no promotion_events provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(promotionEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	promotionEventUpsertCacheMut.RLock()
	cache, cached := promotionEventUpsertCache[key]
	promotionEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			promotionEventAllColumns,
			promotionEventColumnsWithDefault,
			promotionEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			promotionEventAllColumns,
			promotionEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert promotion_events, could not build update column list")
		}

		ret := strmangle.SetComplement(promotionEventAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(promotionEventPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert promotion_events, could not build conflict column list")
			}

			conflict = make([]string, len(promotionEventPrimaryKeyColumns))
			copy(conflict, promotionEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"promotion_events\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(promotionEventType, promotionEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(promotionEventType, promotionEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert promotion_events")
	}

	if !cached {
		promotionEventUpsertCacheMut.Lock()
		promotionEventUpsertCache[key] = cache
		promotionEventUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single PromotionEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PromotionEvent) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no PromotionEvent provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), promotionEventPrimaryKeyMapping)
	sql := "DELETE FROM \"promotion_events\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from promotion_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for promotion_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q promotionEventQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no promotionEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from promotion_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for promotion_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PromotionEventSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"promotion_events\" WHERE " +
		strmangle.WhereInClause(string(dialect.LQ), string(dialect.RQ), 1, promotionEventPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from promotionEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for promotion_events")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PromotionEvent) Reload(exec boil.Executor) error {
	ret, err := FindPromotionEvent(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PromotionEventSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PromotionEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), promotionEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"promotion_events\".* FROM \"promotion_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, promotionEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PromotionEventSlice")
	}

	*o = slice

	return nil
}

// PromotionEventExists checks if the PromotionEvent row exists.
func PromotionEventExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"promotion_events\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if promotion_events exists")
	}

	return exists, nil
}

// Exists checks if the PromotionEvent row exists.
func (o *PromotionEvent) Exists(exec boil.Executor) (bool, error) {
	return PromotionEventExists(exec, o.ID)
}
