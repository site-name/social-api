// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingMethodExcludedProduct is an object representing the database table.
type ShippingMethodExcludedProduct struct {
	ID               string `boil:"id" json:"id" toml:"id" yaml:"id"`
	ShippingMethodID string `boil:"shipping_method_id" json:"shipping_method_id" toml:"shipping_method_id" yaml:"shipping_method_id"`
	ProductID        string `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`

	R *shippingMethodExcludedProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingMethodExcludedProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingMethodExcludedProductColumns = struct {
	ID               string
	ShippingMethodID string
	ProductID        string
}{
	ID:               "id",
	ShippingMethodID: "shipping_method_id",
	ProductID:        "product_id",
}

var ShippingMethodExcludedProductTableColumns = struct {
	ID               string
	ShippingMethodID string
	ProductID        string
}{
	ID:               "shipping_method_excluded_products.id",
	ShippingMethodID: "shipping_method_excluded_products.shipping_method_id",
	ProductID:        "shipping_method_excluded_products.product_id",
}

// Generated where

var ShippingMethodExcludedProductWhere = struct {
	ID               whereHelperstring
	ShippingMethodID whereHelperstring
	ProductID        whereHelperstring
}{
	ID:               whereHelperstring{field: "\"shipping_method_excluded_products\".\"id\""},
	ShippingMethodID: whereHelperstring{field: "\"shipping_method_excluded_products\".\"shipping_method_id\""},
	ProductID:        whereHelperstring{field: "\"shipping_method_excluded_products\".\"product_id\""},
}

// ShippingMethodExcludedProductRels is where relationship names are stored.
var ShippingMethodExcludedProductRels = struct {
	Product        string
	ShippingMethod string
}{
	Product:        "Product",
	ShippingMethod: "ShippingMethod",
}

// shippingMethodExcludedProductR is where relationships are stored.
type shippingMethodExcludedProductR struct {
	Product        *Product        `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	ShippingMethod *ShippingMethod `boil:"ShippingMethod" json:"ShippingMethod" toml:"ShippingMethod" yaml:"ShippingMethod"`
}

// NewStruct creates a new relationship struct
func (*shippingMethodExcludedProductR) NewStruct() *shippingMethodExcludedProductR {
	return &shippingMethodExcludedProductR{}
}

func (r *shippingMethodExcludedProductR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *shippingMethodExcludedProductR) GetShippingMethod() *ShippingMethod {
	if r == nil {
		return nil
	}
	return r.ShippingMethod
}

// shippingMethodExcludedProductL is where Load methods for each relationship are stored.
type shippingMethodExcludedProductL struct{}

var (
	shippingMethodExcludedProductAllColumns            = []string{"id", "shipping_method_id", "product_id"}
	shippingMethodExcludedProductColumnsWithoutDefault = []string{"shipping_method_id", "product_id"}
	shippingMethodExcludedProductColumnsWithDefault    = []string{"id"}
	shippingMethodExcludedProductPrimaryKeyColumns     = []string{"id"}
	shippingMethodExcludedProductGeneratedColumns      = []string{}
)

type (
	// ShippingMethodExcludedProductSlice is an alias for a slice of pointers to ShippingMethodExcludedProduct.
	// This should almost always be used instead of []ShippingMethodExcludedProduct.
	ShippingMethodExcludedProductSlice []*ShippingMethodExcludedProduct

	shippingMethodExcludedProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingMethodExcludedProductType                 = reflect.TypeOf(&ShippingMethodExcludedProduct{})
	shippingMethodExcludedProductMapping              = queries.MakeStructMapping(shippingMethodExcludedProductType)
	shippingMethodExcludedProductPrimaryKeyMapping, _ = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, shippingMethodExcludedProductPrimaryKeyColumns)
	shippingMethodExcludedProductInsertCacheMut       sync.RWMutex
	shippingMethodExcludedProductInsertCache          = make(map[string]insertCache)
	shippingMethodExcludedProductUpdateCacheMut       sync.RWMutex
	shippingMethodExcludedProductUpdateCache          = make(map[string]updateCache)
	shippingMethodExcludedProductUpsertCacheMut       sync.RWMutex
	shippingMethodExcludedProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single shippingMethodExcludedProduct record from the query.
func (q shippingMethodExcludedProductQuery) One(exec boil.Executor) (*ShippingMethodExcludedProduct, error) {
	o := &ShippingMethodExcludedProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for shipping_method_excluded_products")
	}

	return o, nil
}

// All returns all ShippingMethodExcludedProduct records from the query.
func (q shippingMethodExcludedProductQuery) All(exec boil.Executor) (ShippingMethodExcludedProductSlice, error) {
	var o []*ShippingMethodExcludedProduct

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ShippingMethodExcludedProduct slice")
	}

	return o, nil
}

// Count returns the count of all ShippingMethodExcludedProduct records in the query.
func (q shippingMethodExcludedProductQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count shipping_method_excluded_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingMethodExcludedProductQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if shipping_method_excluded_products exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *ShippingMethodExcludedProduct) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// ShippingMethod pointed to by the foreign key.
func (o *ShippingMethodExcludedProduct) ShippingMethod(mods ...qm.QueryMod) shippingMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShippingMethodID),
	}

	queryMods = append(queryMods, mods...)

	return ShippingMethods(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shippingMethodExcludedProductL) LoadProduct(e boil.Executor, singular bool, maybeShippingMethodExcludedProduct interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethodExcludedProduct
	var object *ShippingMethodExcludedProduct

	if singular {
		var ok bool
		object, ok = maybeShippingMethodExcludedProduct.(*ShippingMethodExcludedProduct)
		if !ok {
			object = new(ShippingMethodExcludedProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethodExcludedProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethodExcludedProduct))
			}
		}
	} else {
		s, ok := maybeShippingMethodExcludedProduct.(*[]*ShippingMethodExcludedProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethodExcludedProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethodExcludedProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodExcludedProductR{}
		}
		args = append(args, object.ProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodExcludedProductR{}
			}

			for _, a := range args {
				if a == obj.ProductID {
					continue Outer
				}
			}

			args = append(args, obj.ProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ShippingMethodExcludedProducts = append(foreign.R.ShippingMethodExcludedProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ShippingMethodExcludedProducts = append(foreign.R.ShippingMethodExcludedProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadShippingMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shippingMethodExcludedProductL) LoadShippingMethod(e boil.Executor, singular bool, maybeShippingMethodExcludedProduct interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethodExcludedProduct
	var object *ShippingMethodExcludedProduct

	if singular {
		var ok bool
		object, ok = maybeShippingMethodExcludedProduct.(*ShippingMethodExcludedProduct)
		if !ok {
			object = new(ShippingMethodExcludedProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethodExcludedProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethodExcludedProduct))
			}
		}
	} else {
		s, ok := maybeShippingMethodExcludedProduct.(*[]*ShippingMethodExcludedProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethodExcludedProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethodExcludedProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodExcludedProductR{}
		}
		args = append(args, object.ShippingMethodID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodExcludedProductR{}
			}

			for _, a := range args {
				if a == obj.ShippingMethodID {
					continue Outer
				}
			}

			args = append(args, obj.ShippingMethodID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_methods`),
		qm.WhereIn(`shipping_methods.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingMethod")
	}

	var resultSlice []*ShippingMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_methods")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingMethod = foreign
		if foreign.R == nil {
			foreign.R = &shippingMethodR{}
		}
		foreign.R.ShippingMethodExcludedProducts = append(foreign.R.ShippingMethodExcludedProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShippingMethodID == foreign.ID {
				local.R.ShippingMethod = foreign
				if foreign.R == nil {
					foreign.R = &shippingMethodR{}
				}
				foreign.R.ShippingMethodExcludedProducts = append(foreign.R.ShippingMethodExcludedProducts, local)
				break
			}
		}
	}

	return nil
}

// SetProduct of the shippingMethodExcludedProduct to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ShippingMethodExcludedProducts.
func (o *ShippingMethodExcludedProduct) SetProduct(exec boil.Executor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, shippingMethodExcludedProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &shippingMethodExcludedProductR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ShippingMethodExcludedProducts: ShippingMethodExcludedProductSlice{o},
		}
	} else {
		related.R.ShippingMethodExcludedProducts = append(related.R.ShippingMethodExcludedProducts, o)
	}

	return nil
}

// SetShippingMethod of the shippingMethodExcludedProduct to the related item.
// Sets o.R.ShippingMethod to related.
// Adds o to related.R.ShippingMethodExcludedProducts.
func (o *ShippingMethodExcludedProduct) SetShippingMethod(exec boil.Executor, insert bool, related *ShippingMethod) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_method_id"}),
		strmangle.WhereClause("\"", "\"", 2, shippingMethodExcludedProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShippingMethodID = related.ID
	if o.R == nil {
		o.R = &shippingMethodExcludedProductR{
			ShippingMethod: related,
		}
	} else {
		o.R.ShippingMethod = related
	}

	if related.R == nil {
		related.R = &shippingMethodR{
			ShippingMethodExcludedProducts: ShippingMethodExcludedProductSlice{o},
		}
	} else {
		related.R.ShippingMethodExcludedProducts = append(related.R.ShippingMethodExcludedProducts, o)
	}

	return nil
}

// ShippingMethodExcludedProducts retrieves all the records using an executor.
func ShippingMethodExcludedProducts(mods ...qm.QueryMod) shippingMethodExcludedProductQuery {
	mods = append(mods, qm.From("\"shipping_method_excluded_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_method_excluded_products\".*"})
	}

	return shippingMethodExcludedProductQuery{q}
}

// FindShippingMethodExcludedProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingMethodExcludedProduct(exec boil.Executor, iD string, selectCols ...string) (*ShippingMethodExcludedProduct, error) {
	shippingMethodExcludedProductObj := &ShippingMethodExcludedProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_method_excluded_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, shippingMethodExcludedProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from shipping_method_excluded_products")
	}

	return shippingMethodExcludedProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingMethodExcludedProduct) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shipping_method_excluded_products provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodExcludedProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingMethodExcludedProductInsertCacheMut.RLock()
	cache, cached := shippingMethodExcludedProductInsertCache[key]
	shippingMethodExcludedProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingMethodExcludedProductAllColumns,
			shippingMethodExcludedProductColumnsWithDefault,
			shippingMethodExcludedProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_method_excluded_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_method_excluded_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into shipping_method_excluded_products")
	}

	if !cached {
		shippingMethodExcludedProductInsertCacheMut.Lock()
		shippingMethodExcludedProductInsertCache[key] = cache
		shippingMethodExcludedProductInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ShippingMethodExcludedProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingMethodExcludedProduct) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	shippingMethodExcludedProductUpdateCacheMut.RLock()
	cache, cached := shippingMethodExcludedProductUpdateCache[key]
	shippingMethodExcludedProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingMethodExcludedProductAllColumns,
			shippingMethodExcludedProductPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update shipping_method_excluded_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingMethodExcludedProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, append(wl, shippingMethodExcludedProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update shipping_method_excluded_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for shipping_method_excluded_products")
	}

	if !cached {
		shippingMethodExcludedProductUpdateCacheMut.Lock()
		shippingMethodExcludedProductUpdateCache[key] = cache
		shippingMethodExcludedProductUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q shippingMethodExcludedProductQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for shipping_method_excluded_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for shipping_method_excluded_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingMethodExcludedProductSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodExcludedProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingMethodExcludedProductPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in shippingMethodExcludedProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all shippingMethodExcludedProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingMethodExcludedProduct) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shipping_method_excluded_products provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodExcludedProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingMethodExcludedProductUpsertCacheMut.RLock()
	cache, cached := shippingMethodExcludedProductUpsertCache[key]
	shippingMethodExcludedProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shippingMethodExcludedProductAllColumns,
			shippingMethodExcludedProductColumnsWithDefault,
			shippingMethodExcludedProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingMethodExcludedProductAllColumns,
			shippingMethodExcludedProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert shipping_method_excluded_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shippingMethodExcludedProductPrimaryKeyColumns))
			copy(conflict, shippingMethodExcludedProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_method_excluded_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert shipping_method_excluded_products")
	}

	if !cached {
		shippingMethodExcludedProductUpsertCacheMut.Lock()
		shippingMethodExcludedProductUpsertCache[key] = cache
		shippingMethodExcludedProductUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ShippingMethodExcludedProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingMethodExcludedProduct) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ShippingMethodExcludedProduct provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingMethodExcludedProductPrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_method_excluded_products\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from shipping_method_excluded_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for shipping_method_excluded_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingMethodExcludedProductQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no shippingMethodExcludedProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shipping_method_excluded_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_method_excluded_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingMethodExcludedProductSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodExcludedProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_method_excluded_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodExcludedProductPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shippingMethodExcludedProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_method_excluded_products")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingMethodExcludedProduct) Reload(exec boil.Executor) error {
	ret, err := FindShippingMethodExcludedProduct(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingMethodExcludedProductSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingMethodExcludedProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodExcludedProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_method_excluded_products\".* FROM \"shipping_method_excluded_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodExcludedProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ShippingMethodExcludedProductSlice")
	}

	*o = slice

	return nil
}

// ShippingMethodExcludedProductExists checks if the ShippingMethodExcludedProduct row exists.
func ShippingMethodExcludedProductExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_method_excluded_products\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if shipping_method_excluded_products exists")
	}

	return exists, nil
}

// Exists checks if the ShippingMethodExcludedProduct row exists.
func (o *ShippingMethodExcludedProduct) Exists(exec boil.Executor) (bool, error) {
	return ShippingMethodExcludedProductExists(exec, o.ID)
}
