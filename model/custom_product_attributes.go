// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CustomProductAttribute is an object representing the database table.
type CustomProductAttribute struct {
	ID        string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Slug      string `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	ProductID string `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`

	R *customProductAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customProductAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomProductAttributeColumns = struct {
	ID        string
	Name      string
	Slug      string
	ProductID string
}{
	ID:        "id",
	Name:      "name",
	Slug:      "slug",
	ProductID: "product_id",
}

var CustomProductAttributeTableColumns = struct {
	ID        string
	Name      string
	Slug      string
	ProductID string
}{
	ID:        "custom_product_attributes.id",
	Name:      "custom_product_attributes.name",
	Slug:      "custom_product_attributes.slug",
	ProductID: "custom_product_attributes.product_id",
}

// Generated where

var CustomProductAttributeWhere = struct {
	ID        whereHelperstring
	Name      whereHelperstring
	Slug      whereHelperstring
	ProductID whereHelperstring
}{
	ID:        whereHelperstring{field: "\"custom_product_attributes\".\"id\""},
	Name:      whereHelperstring{field: "\"custom_product_attributes\".\"name\""},
	Slug:      whereHelperstring{field: "\"custom_product_attributes\".\"slug\""},
	ProductID: whereHelperstring{field: "\"custom_product_attributes\".\"product_id\""},
}

// CustomProductAttributeRels is where relationship names are stored.
var CustomProductAttributeRels = struct {
	Product                               string
	AttributeCustomProductAttributeValues string
}{
	Product:                               "Product",
	AttributeCustomProductAttributeValues: "AttributeCustomProductAttributeValues",
}

// customProductAttributeR is where relationships are stored.
type customProductAttributeR struct {
	Product                               *Product                         `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	AttributeCustomProductAttributeValues CustomProductAttributeValueSlice `boil:"AttributeCustomProductAttributeValues" json:"AttributeCustomProductAttributeValues" toml:"AttributeCustomProductAttributeValues" yaml:"AttributeCustomProductAttributeValues"`
}

// NewStruct creates a new relationship struct
func (*customProductAttributeR) NewStruct() *customProductAttributeR {
	return &customProductAttributeR{}
}

func (r *customProductAttributeR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *customProductAttributeR) GetAttributeCustomProductAttributeValues() CustomProductAttributeValueSlice {
	if r == nil {
		return nil
	}
	return r.AttributeCustomProductAttributeValues
}

// customProductAttributeL is where Load methods for each relationship are stored.
type customProductAttributeL struct{}

var (
	customProductAttributeAllColumns            = []string{"id", "name", "slug", "product_id"}
	customProductAttributeColumnsWithoutDefault = []string{"name", "slug", "product_id"}
	customProductAttributeColumnsWithDefault    = []string{"id"}
	customProductAttributePrimaryKeyColumns     = []string{"id"}
	customProductAttributeGeneratedColumns      = []string{}
)

type (
	// CustomProductAttributeSlice is an alias for a slice of pointers to CustomProductAttribute.
	// This should almost always be used instead of []CustomProductAttribute.
	CustomProductAttributeSlice []*CustomProductAttribute

	customProductAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customProductAttributeType                 = reflect.TypeOf(&CustomProductAttribute{})
	customProductAttributeMapping              = queries.MakeStructMapping(customProductAttributeType)
	customProductAttributePrimaryKeyMapping, _ = queries.BindMapping(customProductAttributeType, customProductAttributeMapping, customProductAttributePrimaryKeyColumns)
	customProductAttributeInsertCacheMut       sync.RWMutex
	customProductAttributeInsertCache          = make(map[string]insertCache)
	customProductAttributeUpdateCacheMut       sync.RWMutex
	customProductAttributeUpdateCache          = make(map[string]updateCache)
	customProductAttributeUpsertCacheMut       sync.RWMutex
	customProductAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single customProductAttribute record from the query.
func (q customProductAttributeQuery) One(exec boil.Executor) (*CustomProductAttribute, error) {
	o := &CustomProductAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for custom_product_attributes")
	}

	return o, nil
}

// All returns all CustomProductAttribute records from the query.
func (q customProductAttributeQuery) All(exec boil.Executor) (CustomProductAttributeSlice, error) {
	var o []*CustomProductAttribute

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to CustomProductAttribute slice")
	}

	return o, nil
}

// Count returns the count of all CustomProductAttribute records in the query.
func (q customProductAttributeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count custom_product_attributes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q customProductAttributeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if custom_product_attributes exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *CustomProductAttribute) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// AttributeCustomProductAttributeValues retrieves all the custom_product_attribute_value's CustomProductAttributeValues with an executor via attribute_id column.
func (o *CustomProductAttribute) AttributeCustomProductAttributeValues(mods ...qm.QueryMod) customProductAttributeValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"custom_product_attribute_values\".\"attribute_id\"=?", o.ID),
	)

	return CustomProductAttributeValues(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (customProductAttributeL) LoadProduct(e boil.Executor, singular bool, maybeCustomProductAttribute interface{}, mods queries.Applicator) error {
	var slice []*CustomProductAttribute
	var object *CustomProductAttribute

	if singular {
		var ok bool
		object, ok = maybeCustomProductAttribute.(*CustomProductAttribute)
		if !ok {
			object = new(CustomProductAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCustomProductAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCustomProductAttribute))
			}
		}
	} else {
		s, ok := maybeCustomProductAttribute.(*[]*CustomProductAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCustomProductAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCustomProductAttribute))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &customProductAttributeR{}
		}
		args[object.ProductID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customProductAttributeR{}
			}

			args[obj.ProductID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.CustomProductAttributes = append(foreign.R.CustomProductAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductID == foreign.ID {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.CustomProductAttributes = append(foreign.R.CustomProductAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadAttributeCustomProductAttributeValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (customProductAttributeL) LoadAttributeCustomProductAttributeValues(e boil.Executor, singular bool, maybeCustomProductAttribute interface{}, mods queries.Applicator) error {
	var slice []*CustomProductAttribute
	var object *CustomProductAttribute

	if singular {
		var ok bool
		object, ok = maybeCustomProductAttribute.(*CustomProductAttribute)
		if !ok {
			object = new(CustomProductAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCustomProductAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCustomProductAttribute))
			}
		}
	} else {
		s, ok := maybeCustomProductAttribute.(*[]*CustomProductAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCustomProductAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCustomProductAttribute))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &customProductAttributeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customProductAttributeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`custom_product_attribute_values`),
		qm.WhereIn(`custom_product_attribute_values.attribute_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load custom_product_attribute_values")
	}

	var resultSlice []*CustomProductAttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice custom_product_attribute_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on custom_product_attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for custom_product_attribute_values")
	}

	if singular {
		object.R.AttributeCustomProductAttributeValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &customProductAttributeValueR{}
			}
			foreign.R.Attribute = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AttributeID {
				local.R.AttributeCustomProductAttributeValues = append(local.R.AttributeCustomProductAttributeValues, foreign)
				if foreign.R == nil {
					foreign.R = &customProductAttributeValueR{}
				}
				foreign.R.Attribute = local
				break
			}
		}
	}

	return nil
}

// SetProduct of the customProductAttribute to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.CustomProductAttributes.
func (o *CustomProductAttribute) SetProduct(exec boil.Executor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"custom_product_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, customProductAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductID = related.ID
	if o.R == nil {
		o.R = &customProductAttributeR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			CustomProductAttributes: CustomProductAttributeSlice{o},
		}
	} else {
		related.R.CustomProductAttributes = append(related.R.CustomProductAttributes, o)
	}

	return nil
}

// AddAttributeCustomProductAttributeValues adds the given related objects to the existing relationships
// of the custom_product_attribute, optionally inserting them as new records.
// Appends related to o.R.AttributeCustomProductAttributeValues.
// Sets related.R.Attribute appropriately.
func (o *CustomProductAttribute) AddAttributeCustomProductAttributeValues(exec boil.Executor, insert bool, related ...*CustomProductAttributeValue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AttributeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"custom_product_attribute_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"attribute_id"}),
				strmangle.WhereClause("\"", "\"", 2, customProductAttributeValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AttributeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &customProductAttributeR{
			AttributeCustomProductAttributeValues: related,
		}
	} else {
		o.R.AttributeCustomProductAttributeValues = append(o.R.AttributeCustomProductAttributeValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &customProductAttributeValueR{
				Attribute: o,
			}
		} else {
			rel.R.Attribute = o
		}
	}
	return nil
}

// CustomProductAttributes retrieves all the records using an executor.
func CustomProductAttributes(mods ...qm.QueryMod) customProductAttributeQuery {
	mods = append(mods, qm.From("\"custom_product_attributes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"custom_product_attributes\".*"})
	}

	return customProductAttributeQuery{q}
}

// FindCustomProductAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomProductAttribute(exec boil.Executor, iD string, selectCols ...string) (*CustomProductAttribute, error) {
	customProductAttributeObj := &CustomProductAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"custom_product_attributes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, customProductAttributeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from custom_product_attributes")
	}

	return customProductAttributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CustomProductAttribute) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no custom_product_attributes provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(customProductAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	customProductAttributeInsertCacheMut.RLock()
	cache, cached := customProductAttributeInsertCache[key]
	customProductAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			customProductAttributeAllColumns,
			customProductAttributeColumnsWithDefault,
			customProductAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(customProductAttributeType, customProductAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customProductAttributeType, customProductAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"custom_product_attributes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"custom_product_attributes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into custom_product_attributes")
	}

	if !cached {
		customProductAttributeInsertCacheMut.Lock()
		customProductAttributeInsertCache[key] = cache
		customProductAttributeInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CustomProductAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CustomProductAttribute) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	customProductAttributeUpdateCacheMut.RLock()
	cache, cached := customProductAttributeUpdateCache[key]
	customProductAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			customProductAttributeAllColumns,
			customProductAttributePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update custom_product_attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"custom_product_attributes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, customProductAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customProductAttributeType, customProductAttributeMapping, append(wl, customProductAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update custom_product_attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for custom_product_attributes")
	}

	if !cached {
		customProductAttributeUpdateCacheMut.Lock()
		customProductAttributeUpdateCache[key] = cache
		customProductAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q customProductAttributeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for custom_product_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for custom_product_attributes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomProductAttributeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customProductAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"custom_product_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, customProductAttributePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in customProductAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all customProductAttribute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CustomProductAttribute) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no custom_product_attributes provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(customProductAttributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customProductAttributeUpsertCacheMut.RLock()
	cache, cached := customProductAttributeUpsertCache[key]
	customProductAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			customProductAttributeAllColumns,
			customProductAttributeColumnsWithDefault,
			customProductAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			customProductAttributeAllColumns,
			customProductAttributePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert custom_product_attributes, could not build update column list")
		}

		ret := strmangle.SetComplement(customProductAttributeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(customProductAttributePrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert custom_product_attributes, could not build conflict column list")
			}

			conflict = make([]string, len(customProductAttributePrimaryKeyColumns))
			copy(conflict, customProductAttributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"custom_product_attributes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(customProductAttributeType, customProductAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customProductAttributeType, customProductAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert custom_product_attributes")
	}

	if !cached {
		customProductAttributeUpsertCacheMut.Lock()
		customProductAttributeUpsertCache[key] = cache
		customProductAttributeUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CustomProductAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CustomProductAttribute) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no CustomProductAttribute provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customProductAttributePrimaryKeyMapping)
	sql := "DELETE FROM \"custom_product_attributes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from custom_product_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for custom_product_attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q customProductAttributeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no customProductAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from custom_product_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for custom_product_attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomProductAttributeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customProductAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"custom_product_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, customProductAttributePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from customProductAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for custom_product_attributes")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CustomProductAttribute) Reload(exec boil.Executor) error {
	ret, err := FindCustomProductAttribute(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomProductAttributeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CustomProductAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customProductAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"custom_product_attributes\".* FROM \"custom_product_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, customProductAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in CustomProductAttributeSlice")
	}

	*o = slice

	return nil
}

// CustomProductAttributeExists checks if the CustomProductAttribute row exists.
func CustomProductAttributeExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"custom_product_attributes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if custom_product_attributes exists")
	}

	return exists, nil
}

// Exists checks if the CustomProductAttribute row exists.
func (o *CustomProductAttribute) Exists(exec boil.Executor) (bool, error) {
	return CustomProductAttributeExists(exec, o.ID)
}
