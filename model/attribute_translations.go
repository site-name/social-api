// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AttributeTranslation is an object representing the database table.
type AttributeTranslation struct {
	ID           string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	AttributeID  string       `boil:"attribute_id" json:"attribute_id" toml:"attribute_id" yaml:"attribute_id"`
	LanguageCode Languagecode `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	Name         string       `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *attributeTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributeTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributeTranslationColumns = struct {
	ID           string
	AttributeID  string
	LanguageCode string
	Name         string
}{
	ID:           "id",
	AttributeID:  "attribute_id",
	LanguageCode: "language_code",
	Name:         "name",
}

var AttributeTranslationTableColumns = struct {
	ID           string
	AttributeID  string
	LanguageCode string
	Name         string
}{
	ID:           "attribute_translations.id",
	AttributeID:  "attribute_translations.attribute_id",
	LanguageCode: "attribute_translations.language_code",
	Name:         "attribute_translations.name",
}

// Generated where

type whereHelperLanguagecode struct{ field string }

func (w whereHelperLanguagecode) EQ(x Languagecode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperLanguagecode) NEQ(x Languagecode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperLanguagecode) LT(x Languagecode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperLanguagecode) LTE(x Languagecode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperLanguagecode) GT(x Languagecode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperLanguagecode) GTE(x Languagecode) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperLanguagecode) IN(slice []Languagecode) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperLanguagecode) NIN(slice []Languagecode) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AttributeTranslationWhere = struct {
	ID           whereHelperstring
	AttributeID  whereHelperstring
	LanguageCode whereHelperLanguagecode
	Name         whereHelperstring
}{
	ID:           whereHelperstring{field: "\"attribute_translations\".\"id\""},
	AttributeID:  whereHelperstring{field: "\"attribute_translations\".\"attribute_id\""},
	LanguageCode: whereHelperLanguagecode{field: "\"attribute_translations\".\"language_code\""},
	Name:         whereHelperstring{field: "\"attribute_translations\".\"name\""},
}

// AttributeTranslationRels is where relationship names are stored.
var AttributeTranslationRels = struct {
}{}

// attributeTranslationR is where relationships are stored.
type attributeTranslationR struct {
}

// NewStruct creates a new relationship struct
func (*attributeTranslationR) NewStruct() *attributeTranslationR {
	return &attributeTranslationR{}
}

// attributeTranslationL is where Load methods for each relationship are stored.
type attributeTranslationL struct{}

var (
	attributeTranslationAllColumns            = []string{"id", "attribute_id", "language_code", "name"}
	attributeTranslationColumnsWithoutDefault = []string{"attribute_id", "language_code", "name"}
	attributeTranslationColumnsWithDefault    = []string{"id"}
	attributeTranslationPrimaryKeyColumns     = []string{"id"}
	attributeTranslationGeneratedColumns      = []string{}
)

type (
	// AttributeTranslationSlice is an alias for a slice of pointers to AttributeTranslation.
	// This should almost always be used instead of []AttributeTranslation.
	AttributeTranslationSlice []*AttributeTranslation

	attributeTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributeTranslationType                 = reflect.TypeOf(&AttributeTranslation{})
	attributeTranslationMapping              = queries.MakeStructMapping(attributeTranslationType)
	attributeTranslationPrimaryKeyMapping, _ = queries.BindMapping(attributeTranslationType, attributeTranslationMapping, attributeTranslationPrimaryKeyColumns)
	attributeTranslationInsertCacheMut       sync.RWMutex
	attributeTranslationInsertCache          = make(map[string]insertCache)
	attributeTranslationUpdateCacheMut       sync.RWMutex
	attributeTranslationUpdateCache          = make(map[string]updateCache)
	attributeTranslationUpsertCacheMut       sync.RWMutex
	attributeTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single attributeTranslation record from the query.
func (q attributeTranslationQuery) One(exec boil.Executor) (*AttributeTranslation, error) {
	o := &AttributeTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for attribute_translations")
	}

	return o, nil
}

// All returns all AttributeTranslation records from the query.
func (q attributeTranslationQuery) All(exec boil.Executor) (AttributeTranslationSlice, error) {
	var o []*AttributeTranslation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to AttributeTranslation slice")
	}

	return o, nil
}

// Count returns the count of all AttributeTranslation records in the query.
func (q attributeTranslationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count attribute_translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attributeTranslationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if attribute_translations exists")
	}

	return count > 0, nil
}

// AttributeTranslations retrieves all the records using an executor.
func AttributeTranslations(mods ...qm.QueryMod) attributeTranslationQuery {
	mods = append(mods, qm.From("\"attribute_translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"attribute_translations\".*"})
	}

	return attributeTranslationQuery{q}
}

// FindAttributeTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttributeTranslation(exec boil.Executor, iD string, selectCols ...string) (*AttributeTranslation, error) {
	attributeTranslationObj := &AttributeTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attribute_translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, attributeTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from attribute_translations")
	}

	return attributeTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AttributeTranslation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no attribute_translations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(attributeTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributeTranslationInsertCacheMut.RLock()
	cache, cached := attributeTranslationInsertCache[key]
	attributeTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributeTranslationAllColumns,
			attributeTranslationColumnsWithDefault,
			attributeTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributeTranslationType, attributeTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributeTranslationType, attributeTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attribute_translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attribute_translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into attribute_translations")
	}

	if !cached {
		attributeTranslationInsertCacheMut.Lock()
		attributeTranslationInsertCache[key] = cache
		attributeTranslationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AttributeTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AttributeTranslation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	attributeTranslationUpdateCacheMut.RLock()
	cache, cached := attributeTranslationUpdateCache[key]
	attributeTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributeTranslationAllColumns,
			attributeTranslationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update attribute_translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attribute_translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributeTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributeTranslationType, attributeTranslationMapping, append(wl, attributeTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update attribute_translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for attribute_translations")
	}

	if !cached {
		attributeTranslationUpdateCacheMut.Lock()
		attributeTranslationUpdateCache[key] = cache
		attributeTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q attributeTranslationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for attribute_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for attribute_translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributeTranslationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attribute_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributeTranslationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in attributeTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all attributeTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AttributeTranslation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no attribute_translations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributeTranslationUpsertCacheMut.RLock()
	cache, cached := attributeTranslationUpsertCache[key]
	attributeTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attributeTranslationAllColumns,
			attributeTranslationColumnsWithDefault,
			attributeTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			attributeTranslationAllColumns,
			attributeTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert attribute_translations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(attributeTranslationPrimaryKeyColumns))
			copy(conflict, attributeTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"attribute_translations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(attributeTranslationType, attributeTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributeTranslationType, attributeTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert attribute_translations")
	}

	if !cached {
		attributeTranslationUpsertCacheMut.Lock()
		attributeTranslationUpsertCache[key] = cache
		attributeTranslationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AttributeTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AttributeTranslation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no AttributeTranslation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributeTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"attribute_translations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from attribute_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for attribute_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attributeTranslationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no attributeTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from attribute_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for attribute_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributeTranslationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attribute_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeTranslationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from attributeTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for attribute_translations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AttributeTranslation) Reload(exec boil.Executor) error {
	ret, err := FindAttributeTranslation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributeTranslationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributeTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attribute_translations\".* FROM \"attribute_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in AttributeTranslationSlice")
	}

	*o = slice

	return nil
}

// AttributeTranslationExists checks if the AttributeTranslation row exists.
func AttributeTranslationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attribute_translations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if attribute_translations exists")
	}

	return exists, nil
}

// Exists checks if the AttributeTranslation row exists.
func (o *AttributeTranslation) Exists(exec boil.Executor) (bool, error) {
	return AttributeTranslationExists(exec, o.ID)
}
