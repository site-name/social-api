// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductChannelListing is an object representing the database table.
type ProductChannelListing struct {
	ID                    string                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID             string                  `boil:"product_id" json:"product_id" toml:"product_id" yaml:"product_id"`
	ChannelID             string                  `boil:"channel_id" json:"channel_id" toml:"channel_id" yaml:"channel_id"`
	VisibleInListings     bool                    `boil:"visible_in_listings" json:"visible_in_listings" toml:"visible_in_listings" yaml:"visible_in_listings"`
	AvailableForPurchase  model_types.NullInt64   `boil:"available_for_purchase" json:"available_for_purchase,omitempty" toml:"available_for_purchase" yaml:"available_for_purchase,omitempty"`
	Currency              Currency                `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	DiscountedPriceAmount model_types.NullDecimal `boil:"discounted_price_amount" json:"discounted_price_amount,omitempty" toml:"discounted_price_amount" yaml:"discounted_price_amount,omitempty"`
	CreatedAt             int64                   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	PublicationDate       model_types.NullInt64   `boil:"publication_date" json:"publication_date,omitempty" toml:"publication_date" yaml:"publication_date,omitempty"`
	IsPublished           bool                    `boil:"is_published" json:"is_published" toml:"is_published" yaml:"is_published"`

	R *productChannelListingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productChannelListingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductChannelListingColumns = struct {
	ID                    string
	ProductID             string
	ChannelID             string
	VisibleInListings     string
	AvailableForPurchase  string
	Currency              string
	DiscountedPriceAmount string
	CreatedAt             string
	PublicationDate       string
	IsPublished           string
}{
	ID:                    "id",
	ProductID:             "product_id",
	ChannelID:             "channel_id",
	VisibleInListings:     "visible_in_listings",
	AvailableForPurchase:  "available_for_purchase",
	Currency:              "currency",
	DiscountedPriceAmount: "discounted_price_amount",
	CreatedAt:             "created_at",
	PublicationDate:       "publication_date",
	IsPublished:           "is_published",
}

var ProductChannelListingTableColumns = struct {
	ID                    string
	ProductID             string
	ChannelID             string
	VisibleInListings     string
	AvailableForPurchase  string
	Currency              string
	DiscountedPriceAmount string
	CreatedAt             string
	PublicationDate       string
	IsPublished           string
}{
	ID:                    "product_channel_listings.id",
	ProductID:             "product_channel_listings.product_id",
	ChannelID:             "product_channel_listings.channel_id",
	VisibleInListings:     "product_channel_listings.visible_in_listings",
	AvailableForPurchase:  "product_channel_listings.available_for_purchase",
	Currency:              "product_channel_listings.currency",
	DiscountedPriceAmount: "product_channel_listings.discounted_price_amount",
	CreatedAt:             "product_channel_listings.created_at",
	PublicationDate:       "product_channel_listings.publication_date",
	IsPublished:           "product_channel_listings.is_published",
}

// Generated where

var ProductChannelListingWhere = struct {
	ID                    whereHelperstring
	ProductID             whereHelperstring
	ChannelID             whereHelperstring
	VisibleInListings     whereHelperbool
	AvailableForPurchase  whereHelpermodel_types_NullInt64
	Currency              whereHelperCurrency
	DiscountedPriceAmount whereHelpermodel_types_NullDecimal
	CreatedAt             whereHelperint64
	PublicationDate       whereHelpermodel_types_NullInt64
	IsPublished           whereHelperbool
}{
	ID:                    whereHelperstring{field: "\"product_channel_listings\".\"id\""},
	ProductID:             whereHelperstring{field: "\"product_channel_listings\".\"product_id\""},
	ChannelID:             whereHelperstring{field: "\"product_channel_listings\".\"channel_id\""},
	VisibleInListings:     whereHelperbool{field: "\"product_channel_listings\".\"visible_in_listings\""},
	AvailableForPurchase:  whereHelpermodel_types_NullInt64{field: "\"product_channel_listings\".\"available_for_purchase\""},
	Currency:              whereHelperCurrency{field: "\"product_channel_listings\".\"currency\""},
	DiscountedPriceAmount: whereHelpermodel_types_NullDecimal{field: "\"product_channel_listings\".\"discounted_price_amount\""},
	CreatedAt:             whereHelperint64{field: "\"product_channel_listings\".\"created_at\""},
	PublicationDate:       whereHelpermodel_types_NullInt64{field: "\"product_channel_listings\".\"publication_date\""},
	IsPublished:           whereHelperbool{field: "\"product_channel_listings\".\"is_published\""},
}

// ProductChannelListingRels is where relationship names are stored.
var ProductChannelListingRels = struct {
}{}

// productChannelListingR is where relationships are stored.
type productChannelListingR struct {
}

// NewStruct creates a new relationship struct
func (*productChannelListingR) NewStruct() *productChannelListingR {
	return &productChannelListingR{}
}

// productChannelListingL is where Load methods for each relationship are stored.
type productChannelListingL struct{}

var (
	productChannelListingAllColumns            = []string{"id", "product_id", "channel_id", "visible_in_listings", "available_for_purchase", "currency", "discounted_price_amount", "created_at", "publication_date", "is_published"}
	productChannelListingColumnsWithoutDefault = []string{"product_id", "channel_id", "visible_in_listings", "currency", "created_at", "is_published"}
	productChannelListingColumnsWithDefault    = []string{"id", "available_for_purchase", "discounted_price_amount", "publication_date"}
	productChannelListingPrimaryKeyColumns     = []string{"id"}
	productChannelListingGeneratedColumns      = []string{}
)

type (
	// ProductChannelListingSlice is an alias for a slice of pointers to ProductChannelListing.
	// This should almost always be used instead of []ProductChannelListing.
	ProductChannelListingSlice []*ProductChannelListing

	productChannelListingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productChannelListingType                 = reflect.TypeOf(&ProductChannelListing{})
	productChannelListingMapping              = queries.MakeStructMapping(productChannelListingType)
	productChannelListingPrimaryKeyMapping, _ = queries.BindMapping(productChannelListingType, productChannelListingMapping, productChannelListingPrimaryKeyColumns)
	productChannelListingInsertCacheMut       sync.RWMutex
	productChannelListingInsertCache          = make(map[string]insertCache)
	productChannelListingUpdateCacheMut       sync.RWMutex
	productChannelListingUpdateCache          = make(map[string]updateCache)
	productChannelListingUpsertCacheMut       sync.RWMutex
	productChannelListingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single productChannelListing record from the query.
func (q productChannelListingQuery) One(exec boil.Executor) (*ProductChannelListing, error) {
	o := &ProductChannelListing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for product_channel_listings")
	}

	return o, nil
}

// All returns all ProductChannelListing records from the query.
func (q productChannelListingQuery) All(exec boil.Executor) (ProductChannelListingSlice, error) {
	var o []*ProductChannelListing

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ProductChannelListing slice")
	}

	return o, nil
}

// Count returns the count of all ProductChannelListing records in the query.
func (q productChannelListingQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count product_channel_listings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productChannelListingQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if product_channel_listings exists")
	}

	return count > 0, nil
}

// ProductChannelListings retrieves all the records using an executor.
func ProductChannelListings(mods ...qm.QueryMod) productChannelListingQuery {
	mods = append(mods, qm.From("\"product_channel_listings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_channel_listings\".*"})
	}

	return productChannelListingQuery{q}
}

// FindProductChannelListing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductChannelListing(exec boil.Executor, iD string, selectCols ...string) (*ProductChannelListing, error) {
	productChannelListingObj := &ProductChannelListing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_channel_listings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, productChannelListingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from product_channel_listings")
	}

	return productChannelListingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductChannelListing) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no product_channel_listings provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(productChannelListingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productChannelListingInsertCacheMut.RLock()
	cache, cached := productChannelListingInsertCache[key]
	productChannelListingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productChannelListingAllColumns,
			productChannelListingColumnsWithDefault,
			productChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productChannelListingType, productChannelListingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productChannelListingType, productChannelListingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_channel_listings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_channel_listings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into product_channel_listings")
	}

	if !cached {
		productChannelListingInsertCacheMut.Lock()
		productChannelListingInsertCache[key] = cache
		productChannelListingInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ProductChannelListing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductChannelListing) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	productChannelListingUpdateCacheMut.RLock()
	cache, cached := productChannelListingUpdateCache[key]
	productChannelListingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productChannelListingAllColumns,
			productChannelListingPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update product_channel_listings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_channel_listings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productChannelListingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productChannelListingType, productChannelListingMapping, append(wl, productChannelListingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update product_channel_listings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for product_channel_listings")
	}

	if !cached {
		productChannelListingUpdateCacheMut.Lock()
		productChannelListingUpdateCache[key] = cache
		productChannelListingUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q productChannelListingQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for product_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for product_channel_listings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductChannelListingSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productChannelListingPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in productChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all productChannelListing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductChannelListing) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no product_channel_listings provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(productChannelListingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productChannelListingUpsertCacheMut.RLock()
	cache, cached := productChannelListingUpsertCache[key]
	productChannelListingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			productChannelListingAllColumns,
			productChannelListingColumnsWithDefault,
			productChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productChannelListingAllColumns,
			productChannelListingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert product_channel_listings, could not build update column list")
		}

		ret := strmangle.SetComplement(productChannelListingAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(productChannelListingPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert product_channel_listings, could not build conflict column list")
			}

			conflict = make([]string, len(productChannelListingPrimaryKeyColumns))
			copy(conflict, productChannelListingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_channel_listings\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(productChannelListingType, productChannelListingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productChannelListingType, productChannelListingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert product_channel_listings")
	}

	if !cached {
		productChannelListingUpsertCacheMut.Lock()
		productChannelListingUpsertCache[key] = cache
		productChannelListingUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ProductChannelListing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductChannelListing) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ProductChannelListing provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productChannelListingPrimaryKeyMapping)
	sql := "DELETE FROM \"product_channel_listings\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from product_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for product_channel_listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productChannelListingQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no productChannelListingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from product_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_channel_listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductChannelListingSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productChannelListingPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from productChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for product_channel_listings")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductChannelListing) Reload(exec boil.Executor) error {
	ret, err := FindProductChannelListing(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductChannelListingSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductChannelListingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_channel_listings\".* FROM \"product_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productChannelListingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ProductChannelListingSlice")
	}

	*o = slice

	return nil
}

// ProductChannelListingExists checks if the ProductChannelListing row exists.
func ProductChannelListingExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_channel_listings\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if product_channel_listings exists")
	}

	return exists, nil
}

// Exists checks if the ProductChannelListing row exists.
func (o *ProductChannelListing) Exists(exec boil.Executor) (bool, error) {
	return ProductChannelListingExists(exec, o.ID)
}
