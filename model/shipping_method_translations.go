// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingMethodTranslation is an object representing the database table.
type ShippingMethodTranslation struct {
	ID               string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ShippingMethodID string       `boil:"shipping_method_id" json:"shipping_method_id" toml:"shipping_method_id" yaml:"shipping_method_id"`
	LanguageCode     LanguageCode `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	Name             string       `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description      string       `boil:"description" json:"description" toml:"description" yaml:"description"`

	R *shippingMethodTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingMethodTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingMethodTranslationColumns = struct {
	ID               string
	ShippingMethodID string
	LanguageCode     string
	Name             string
	Description      string
}{
	ID:               "id",
	ShippingMethodID: "shipping_method_id",
	LanguageCode:     "language_code",
	Name:             "name",
	Description:      "description",
}

var ShippingMethodTranslationTableColumns = struct {
	ID               string
	ShippingMethodID string
	LanguageCode     string
	Name             string
	Description      string
}{
	ID:               "shipping_method_translations.id",
	ShippingMethodID: "shipping_method_translations.shipping_method_id",
	LanguageCode:     "shipping_method_translations.language_code",
	Name:             "shipping_method_translations.name",
	Description:      "shipping_method_translations.description",
}

// Generated where

var ShippingMethodTranslationWhere = struct {
	ID               whereHelperstring
	ShippingMethodID whereHelperstring
	LanguageCode     whereHelperLanguageCode
	Name             whereHelperstring
	Description      whereHelperstring
}{
	ID:               whereHelperstring{field: "\"shipping_method_translations\".\"id\""},
	ShippingMethodID: whereHelperstring{field: "\"shipping_method_translations\".\"shipping_method_id\""},
	LanguageCode:     whereHelperLanguageCode{field: "\"shipping_method_translations\".\"language_code\""},
	Name:             whereHelperstring{field: "\"shipping_method_translations\".\"name\""},
	Description:      whereHelperstring{field: "\"shipping_method_translations\".\"description\""},
}

// ShippingMethodTranslationRels is where relationship names are stored.
var ShippingMethodTranslationRels = struct {
}{}

// shippingMethodTranslationR is where relationships are stored.
type shippingMethodTranslationR struct {
}

// NewStruct creates a new relationship struct
func (*shippingMethodTranslationR) NewStruct() *shippingMethodTranslationR {
	return &shippingMethodTranslationR{}
}

// shippingMethodTranslationL is where Load methods for each relationship are stored.
type shippingMethodTranslationL struct{}

var (
	shippingMethodTranslationAllColumns            = []string{"id", "shipping_method_id", "language_code", "name", "description"}
	shippingMethodTranslationColumnsWithoutDefault = []string{"id", "shipping_method_id", "language_code", "name", "description"}
	shippingMethodTranslationColumnsWithDefault    = []string{}
	shippingMethodTranslationPrimaryKeyColumns     = []string{"id"}
	shippingMethodTranslationGeneratedColumns      = []string{}
)

type (
	// ShippingMethodTranslationSlice is an alias for a slice of pointers to ShippingMethodTranslation.
	// This should almost always be used instead of []ShippingMethodTranslation.
	ShippingMethodTranslationSlice []*ShippingMethodTranslation

	shippingMethodTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingMethodTranslationType                 = reflect.TypeOf(&ShippingMethodTranslation{})
	shippingMethodTranslationMapping              = queries.MakeStructMapping(shippingMethodTranslationType)
	shippingMethodTranslationPrimaryKeyMapping, _ = queries.BindMapping(shippingMethodTranslationType, shippingMethodTranslationMapping, shippingMethodTranslationPrimaryKeyColumns)
	shippingMethodTranslationInsertCacheMut       sync.RWMutex
	shippingMethodTranslationInsertCache          = make(map[string]insertCache)
	shippingMethodTranslationUpdateCacheMut       sync.RWMutex
	shippingMethodTranslationUpdateCache          = make(map[string]updateCache)
	shippingMethodTranslationUpsertCacheMut       sync.RWMutex
	shippingMethodTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single shippingMethodTranslation record from the query.
func (q shippingMethodTranslationQuery) One(exec boil.Executor) (*ShippingMethodTranslation, error) {
	o := &ShippingMethodTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for shipping_method_translations")
	}

	return o, nil
}

// All returns all ShippingMethodTranslation records from the query.
func (q shippingMethodTranslationQuery) All(exec boil.Executor) (ShippingMethodTranslationSlice, error) {
	var o []*ShippingMethodTranslation

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ShippingMethodTranslation slice")
	}

	return o, nil
}

// Count returns the count of all ShippingMethodTranslation records in the query.
func (q shippingMethodTranslationQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count shipping_method_translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingMethodTranslationQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if shipping_method_translations exists")
	}

	return count > 0, nil
}

// ShippingMethodTranslations retrieves all the records using an executor.
func ShippingMethodTranslations(mods ...qm.QueryMod) shippingMethodTranslationQuery {
	mods = append(mods, qm.From("\"shipping_method_translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_method_translations\".*"})
	}

	return shippingMethodTranslationQuery{q}
}

// FindShippingMethodTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingMethodTranslation(exec boil.Executor, iD string, selectCols ...string) (*ShippingMethodTranslation, error) {
	shippingMethodTranslationObj := &ShippingMethodTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_method_translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, shippingMethodTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from shipping_method_translations")
	}

	return shippingMethodTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingMethodTranslation) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shipping_method_translations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingMethodTranslationInsertCacheMut.RLock()
	cache, cached := shippingMethodTranslationInsertCache[key]
	shippingMethodTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingMethodTranslationAllColumns,
			shippingMethodTranslationColumnsWithDefault,
			shippingMethodTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingMethodTranslationType, shippingMethodTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingMethodTranslationType, shippingMethodTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_method_translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_method_translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into shipping_method_translations")
	}

	if !cached {
		shippingMethodTranslationInsertCacheMut.Lock()
		shippingMethodTranslationInsertCache[key] = cache
		shippingMethodTranslationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ShippingMethodTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingMethodTranslation) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	shippingMethodTranslationUpdateCacheMut.RLock()
	cache, cached := shippingMethodTranslationUpdateCache[key]
	shippingMethodTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingMethodTranslationAllColumns,
			shippingMethodTranslationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update shipping_method_translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_method_translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingMethodTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingMethodTranslationType, shippingMethodTranslationMapping, append(wl, shippingMethodTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update shipping_method_translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for shipping_method_translations")
	}

	if !cached {
		shippingMethodTranslationUpdateCacheMut.Lock()
		shippingMethodTranslationUpdateCache[key] = cache
		shippingMethodTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q shippingMethodTranslationQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for shipping_method_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for shipping_method_translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingMethodTranslationSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_method_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingMethodTranslationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in shippingMethodTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all shippingMethodTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingMethodTranslation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no shipping_method_translations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingMethodTranslationUpsertCacheMut.RLock()
	cache, cached := shippingMethodTranslationUpsertCache[key]
	shippingMethodTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shippingMethodTranslationAllColumns,
			shippingMethodTranslationColumnsWithDefault,
			shippingMethodTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingMethodTranslationAllColumns,
			shippingMethodTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert shipping_method_translations, could not build update column list")
		}

		ret := strmangle.SetComplement(shippingMethodTranslationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(shippingMethodTranslationPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert shipping_method_translations, could not build conflict column list")
			}

			conflict = make([]string, len(shippingMethodTranslationPrimaryKeyColumns))
			copy(conflict, shippingMethodTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_method_translations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shippingMethodTranslationType, shippingMethodTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingMethodTranslationType, shippingMethodTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert shipping_method_translations")
	}

	if !cached {
		shippingMethodTranslationUpsertCacheMut.Lock()
		shippingMethodTranslationUpsertCache[key] = cache
		shippingMethodTranslationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ShippingMethodTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingMethodTranslation) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ShippingMethodTranslation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingMethodTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_method_translations\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from shipping_method_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for shipping_method_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingMethodTranslationQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no shippingMethodTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shipping_method_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_method_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingMethodTranslationSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_method_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodTranslationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shippingMethodTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_method_translations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingMethodTranslation) Reload(exec boil.Executor) error {
	ret, err := FindShippingMethodTranslation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingMethodTranslationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingMethodTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_method_translations\".* FROM \"shipping_method_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ShippingMethodTranslationSlice")
	}

	*o = slice

	return nil
}

// ShippingMethodTranslationExists checks if the ShippingMethodTranslation row exists.
func ShippingMethodTranslationExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_method_translations\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if shipping_method_translations exists")
	}

	return exists, nil
}

// Exists checks if the ShippingMethodTranslation row exists.
func (o *ShippingMethodTranslation) Exists(exec boil.Executor) (bool, error) {
	return ShippingMethodTranslationExists(exec, o.ID)
}
