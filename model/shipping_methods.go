// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/sitename/sitename/modules/model_types"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingMethod is an object representing the database table.
type ShippingMethod struct {
	ID                  string                  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                string                  `boil:"name" json:"name" toml:"name" yaml:"name"`
	Type                string                  `boil:"type" json:"type" toml:"type" yaml:"type"`
	ShippingZoneID      string                  `boil:"shipping_zone_id" json:"shipping_zone_id" toml:"shipping_zone_id" yaml:"shipping_zone_id"`
	MinimumOrderWeight  model_types.NullFloat32 `boil:"minimum_order_weight" json:"minimum_order_weight,omitempty" toml:"minimum_order_weight" yaml:"minimum_order_weight,omitempty"`
	MaximumOrderWeight  model_types.NullFloat32 `boil:"maximum_order_weight" json:"maximum_order_weight,omitempty" toml:"maximum_order_weight" yaml:"maximum_order_weight,omitempty"`
	WeightUnit          string                  `boil:"weight_unit" json:"weight_unit" toml:"weight_unit" yaml:"weight_unit"`
	MaximumDeliveryDays model_types.NullInt     `boil:"maximum_delivery_days" json:"maximum_delivery_days,omitempty" toml:"maximum_delivery_days" yaml:"maximum_delivery_days,omitempty"`
	MinimumDeliveryDays model_types.NullInt     `boil:"minimum_delivery_days" json:"minimum_delivery_days,omitempty" toml:"minimum_delivery_days" yaml:"minimum_delivery_days,omitempty"`
	Description         model_types.JsonMap     `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Metadata            model_types.JsonMap     `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata     model_types.JsonMap     `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *shippingMethodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingMethodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingMethodColumns = struct {
	ID                  string
	Name                string
	Type                string
	ShippingZoneID      string
	MinimumOrderWeight  string
	MaximumOrderWeight  string
	WeightUnit          string
	MaximumDeliveryDays string
	MinimumDeliveryDays string
	Description         string
	Metadata            string
	PrivateMetadata     string
}{
	ID:                  "id",
	Name:                "name",
	Type:                "type",
	ShippingZoneID:      "shipping_zone_id",
	MinimumOrderWeight:  "minimum_order_weight",
	MaximumOrderWeight:  "maximum_order_weight",
	WeightUnit:          "weight_unit",
	MaximumDeliveryDays: "maximum_delivery_days",
	MinimumDeliveryDays: "minimum_delivery_days",
	Description:         "description",
	Metadata:            "metadata",
	PrivateMetadata:     "private_metadata",
}

var ShippingMethodTableColumns = struct {
	ID                  string
	Name                string
	Type                string
	ShippingZoneID      string
	MinimumOrderWeight  string
	MaximumOrderWeight  string
	WeightUnit          string
	MaximumDeliveryDays string
	MinimumDeliveryDays string
	Description         string
	Metadata            string
	PrivateMetadata     string
}{
	ID:                  "shipping_methods.id",
	Name:                "shipping_methods.name",
	Type:                "shipping_methods.type",
	ShippingZoneID:      "shipping_methods.shipping_zone_id",
	MinimumOrderWeight:  "shipping_methods.minimum_order_weight",
	MaximumOrderWeight:  "shipping_methods.maximum_order_weight",
	WeightUnit:          "shipping_methods.weight_unit",
	MaximumDeliveryDays: "shipping_methods.maximum_delivery_days",
	MinimumDeliveryDays: "shipping_methods.minimum_delivery_days",
	Description:         "shipping_methods.description",
	Metadata:            "shipping_methods.metadata",
	PrivateMetadata:     "shipping_methods.private_metadata",
}

// Generated where

var ShippingMethodWhere = struct {
	ID                  whereHelperstring
	Name                whereHelperstring
	Type                whereHelperstring
	ShippingZoneID      whereHelperstring
	MinimumOrderWeight  whereHelpermodel_types_NullFloat32
	MaximumOrderWeight  whereHelpermodel_types_NullFloat32
	WeightUnit          whereHelperstring
	MaximumDeliveryDays whereHelpermodel_types_NullInt
	MinimumDeliveryDays whereHelpermodel_types_NullInt
	Description         whereHelpermodel_types_JsonMap
	Metadata            whereHelpermodel_types_JsonMap
	PrivateMetadata     whereHelpermodel_types_JsonMap
}{
	ID:                  whereHelperstring{field: "\"shipping_methods\".\"id\""},
	Name:                whereHelperstring{field: "\"shipping_methods\".\"name\""},
	Type:                whereHelperstring{field: "\"shipping_methods\".\"type\""},
	ShippingZoneID:      whereHelperstring{field: "\"shipping_methods\".\"shipping_zone_id\""},
	MinimumOrderWeight:  whereHelpermodel_types_NullFloat32{field: "\"shipping_methods\".\"minimum_order_weight\""},
	MaximumOrderWeight:  whereHelpermodel_types_NullFloat32{field: "\"shipping_methods\".\"maximum_order_weight\""},
	WeightUnit:          whereHelperstring{field: "\"shipping_methods\".\"weight_unit\""},
	MaximumDeliveryDays: whereHelpermodel_types_NullInt{field: "\"shipping_methods\".\"maximum_delivery_days\""},
	MinimumDeliveryDays: whereHelpermodel_types_NullInt{field: "\"shipping_methods\".\"minimum_delivery_days\""},
	Description:         whereHelpermodel_types_JsonMap{field: "\"shipping_methods\".\"description\""},
	Metadata:            whereHelpermodel_types_JsonMap{field: "\"shipping_methods\".\"metadata\""},
	PrivateMetadata:     whereHelpermodel_types_JsonMap{field: "\"shipping_methods\".\"private_metadata\""},
}

// ShippingMethodRels is where relationship names are stored.
var ShippingMethodRels = struct {
}{}

// shippingMethodR is where relationships are stored.
type shippingMethodR struct {
}

// NewStruct creates a new relationship struct
func (*shippingMethodR) NewStruct() *shippingMethodR {
	return &shippingMethodR{}
}

// shippingMethodL is where Load methods for each relationship are stored.
type shippingMethodL struct{}

var (
	shippingMethodAllColumns            = []string{"id", "name", "type", "shipping_zone_id", "minimum_order_weight", "maximum_order_weight", "weight_unit", "maximum_delivery_days", "minimum_delivery_days", "description", "metadata", "private_metadata"}
	shippingMethodColumnsWithoutDefault = []string{"name", "type", "shipping_zone_id", "weight_unit"}
	shippingMethodColumnsWithDefault    = []string{"id", "minimum_order_weight", "maximum_order_weight", "maximum_delivery_days", "minimum_delivery_days", "description", "metadata", "private_metadata"}
	shippingMethodPrimaryKeyColumns     = []string{"id"}
	shippingMethodGeneratedColumns      = []string{}
)

type (
	// ShippingMethodSlice is an alias for a slice of pointers to ShippingMethod.
	// This should almost always be used instead of []ShippingMethod.
	ShippingMethodSlice []*ShippingMethod

	shippingMethodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingMethodType                 = reflect.TypeOf(&ShippingMethod{})
	shippingMethodMapping              = queries.MakeStructMapping(shippingMethodType)
	shippingMethodPrimaryKeyMapping, _ = queries.BindMapping(shippingMethodType, shippingMethodMapping, shippingMethodPrimaryKeyColumns)
	shippingMethodInsertCacheMut       sync.RWMutex
	shippingMethodInsertCache          = make(map[string]insertCache)
	shippingMethodUpdateCacheMut       sync.RWMutex
	shippingMethodUpdateCache          = make(map[string]updateCache)
	shippingMethodUpsertCacheMut       sync.RWMutex
	shippingMethodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single shippingMethod record from the query.
func (q shippingMethodQuery) One(exec boil.Executor) (*ShippingMethod, error) {
	o := &ShippingMethod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for shipping_methods")
	}

	return o, nil
}

// All returns all ShippingMethod records from the query.
func (q shippingMethodQuery) All(exec boil.Executor) (ShippingMethodSlice, error) {
	var o []*ShippingMethod

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ShippingMethod slice")
	}

	return o, nil
}

// Count returns the count of all ShippingMethod records in the query.
func (q shippingMethodQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count shipping_methods rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingMethodQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if shipping_methods exists")
	}

	return count > 0, nil
}

// ShippingMethods retrieves all the records using an executor.
func ShippingMethods(mods ...qm.QueryMod) shippingMethodQuery {
	mods = append(mods, qm.From("\"shipping_methods\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_methods\".*"})
	}

	return shippingMethodQuery{q}
}

// FindShippingMethod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingMethod(exec boil.Executor, iD string, selectCols ...string) (*ShippingMethod, error) {
	shippingMethodObj := &ShippingMethod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_methods\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, shippingMethodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from shipping_methods")
	}

	return shippingMethodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingMethod) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shipping_methods provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingMethodInsertCacheMut.RLock()
	cache, cached := shippingMethodInsertCache[key]
	shippingMethodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingMethodAllColumns,
			shippingMethodColumnsWithDefault,
			shippingMethodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_methods\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_methods\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into shipping_methods")
	}

	if !cached {
		shippingMethodInsertCacheMut.Lock()
		shippingMethodInsertCache[key] = cache
		shippingMethodInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ShippingMethod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingMethod) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	shippingMethodUpdateCacheMut.RLock()
	cache, cached := shippingMethodUpdateCache[key]
	shippingMethodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingMethodAllColumns,
			shippingMethodPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update shipping_methods, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_methods\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingMethodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, append(wl, shippingMethodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update shipping_methods row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for shipping_methods")
	}

	if !cached {
		shippingMethodUpdateCacheMut.Lock()
		shippingMethodUpdateCache[key] = cache
		shippingMethodUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q shippingMethodQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for shipping_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for shipping_methods")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingMethodSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_methods\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingMethodPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in shippingMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all shippingMethod")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingMethod) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no shipping_methods provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingMethodUpsertCacheMut.RLock()
	cache, cached := shippingMethodUpsertCache[key]
	shippingMethodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			shippingMethodAllColumns,
			shippingMethodColumnsWithDefault,
			shippingMethodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingMethodAllColumns,
			shippingMethodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert shipping_methods, could not build update column list")
		}

		ret := strmangle.SetComplement(shippingMethodAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(shippingMethodPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert shipping_methods, could not build conflict column list")
			}

			conflict = make([]string, len(shippingMethodPrimaryKeyColumns))
			copy(conflict, shippingMethodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_methods\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert shipping_methods")
	}

	if !cached {
		shippingMethodUpsertCacheMut.Lock()
		shippingMethodUpsertCache[key] = cache
		shippingMethodUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ShippingMethod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingMethod) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ShippingMethod provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingMethodPrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_methods\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from shipping_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for shipping_methods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingMethodQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no shippingMethodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shipping_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_methods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingMethodSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_methods\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shippingMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_methods")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingMethod) Reload(exec boil.Executor) error {
	ret, err := FindShippingMethod(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingMethodSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingMethodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_methods\".* FROM \"shipping_methods\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ShippingMethodSlice")
	}

	*o = slice

	return nil
}

// ShippingMethodExists checks if the ShippingMethod row exists.
func ShippingMethodExists(exec boil.Executor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_methods\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if shipping_methods exists")
	}

	return exists, nil
}

// Exists checks if the ShippingMethod row exists.
func (o *ShippingMethod) Exists(exec boil.Executor) (bool, error) {
	return ShippingMethodExists(exec, o.ID)
}
