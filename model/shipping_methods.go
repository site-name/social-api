// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingMethod is an object representing the database table.
type ShippingMethod struct {
	ID                  string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                string       `boil:"name" json:"name" toml:"name" yaml:"name"`
	Type                string       `boil:"type" json:"type" toml:"type" yaml:"type"`
	ShippingZoneID      string       `boil:"shipping_zone_id" json:"shipping_zone_id" toml:"shipping_zone_id" yaml:"shipping_zone_id"`
	MinimumOrderWeight  null.Float32 `boil:"minimum_order_weight" json:"minimum_order_weight,omitempty" toml:"minimum_order_weight" yaml:"minimum_order_weight,omitempty"`
	MaximumOrderWeight  null.Float32 `boil:"maximum_order_weight" json:"maximum_order_weight,omitempty" toml:"maximum_order_weight" yaml:"maximum_order_weight,omitempty"`
	WeightUnit          string       `boil:"weight_unit" json:"weight_unit" toml:"weight_unit" yaml:"weight_unit"`
	MaximumDeliveryDays null.Int     `boil:"maximum_delivery_days" json:"maximum_delivery_days,omitempty" toml:"maximum_delivery_days" yaml:"maximum_delivery_days,omitempty"`
	MinimumDeliveryDays null.Int     `boil:"minimum_delivery_days" json:"minimum_delivery_days,omitempty" toml:"minimum_delivery_days" yaml:"minimum_delivery_days,omitempty"`
	Description         null.JSON    `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Metadata            null.JSON    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata     null.JSON    `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *shippingMethodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingMethodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingMethodColumns = struct {
	ID                  string
	Name                string
	Type                string
	ShippingZoneID      string
	MinimumOrderWeight  string
	MaximumOrderWeight  string
	WeightUnit          string
	MaximumDeliveryDays string
	MinimumDeliveryDays string
	Description         string
	Metadata            string
	PrivateMetadata     string
}{
	ID:                  "id",
	Name:                "name",
	Type:                "type",
	ShippingZoneID:      "shipping_zone_id",
	MinimumOrderWeight:  "minimum_order_weight",
	MaximumOrderWeight:  "maximum_order_weight",
	WeightUnit:          "weight_unit",
	MaximumDeliveryDays: "maximum_delivery_days",
	MinimumDeliveryDays: "minimum_delivery_days",
	Description:         "description",
	Metadata:            "metadata",
	PrivateMetadata:     "private_metadata",
}

var ShippingMethodTableColumns = struct {
	ID                  string
	Name                string
	Type                string
	ShippingZoneID      string
	MinimumOrderWeight  string
	MaximumOrderWeight  string
	WeightUnit          string
	MaximumDeliveryDays string
	MinimumDeliveryDays string
	Description         string
	Metadata            string
	PrivateMetadata     string
}{
	ID:                  "shipping_methods.id",
	Name:                "shipping_methods.name",
	Type:                "shipping_methods.type",
	ShippingZoneID:      "shipping_methods.shipping_zone_id",
	MinimumOrderWeight:  "shipping_methods.minimum_order_weight",
	MaximumOrderWeight:  "shipping_methods.maximum_order_weight",
	WeightUnit:          "shipping_methods.weight_unit",
	MaximumDeliveryDays: "shipping_methods.maximum_delivery_days",
	MinimumDeliveryDays: "shipping_methods.minimum_delivery_days",
	Description:         "shipping_methods.description",
	Metadata:            "shipping_methods.metadata",
	PrivateMetadata:     "shipping_methods.private_metadata",
}

// Generated where

var ShippingMethodWhere = struct {
	ID                  whereHelperstring
	Name                whereHelperstring
	Type                whereHelperstring
	ShippingZoneID      whereHelperstring
	MinimumOrderWeight  whereHelpernull_Float32
	MaximumOrderWeight  whereHelpernull_Float32
	WeightUnit          whereHelperstring
	MaximumDeliveryDays whereHelpernull_Int
	MinimumDeliveryDays whereHelpernull_Int
	Description         whereHelpernull_JSON
	Metadata            whereHelpernull_JSON
	PrivateMetadata     whereHelpernull_JSON
}{
	ID:                  whereHelperstring{field: "\"shipping_methods\".\"id\""},
	Name:                whereHelperstring{field: "\"shipping_methods\".\"name\""},
	Type:                whereHelperstring{field: "\"shipping_methods\".\"type\""},
	ShippingZoneID:      whereHelperstring{field: "\"shipping_methods\".\"shipping_zone_id\""},
	MinimumOrderWeight:  whereHelpernull_Float32{field: "\"shipping_methods\".\"minimum_order_weight\""},
	MaximumOrderWeight:  whereHelpernull_Float32{field: "\"shipping_methods\".\"maximum_order_weight\""},
	WeightUnit:          whereHelperstring{field: "\"shipping_methods\".\"weight_unit\""},
	MaximumDeliveryDays: whereHelpernull_Int{field: "\"shipping_methods\".\"maximum_delivery_days\""},
	MinimumDeliveryDays: whereHelpernull_Int{field: "\"shipping_methods\".\"minimum_delivery_days\""},
	Description:         whereHelpernull_JSON{field: "\"shipping_methods\".\"description\""},
	Metadata:            whereHelpernull_JSON{field: "\"shipping_methods\".\"metadata\""},
	PrivateMetadata:     whereHelpernull_JSON{field: "\"shipping_methods\".\"private_metadata\""},
}

// ShippingMethodRels is where relationship names are stored.
var ShippingMethodRels = struct {
	ShippingZone                   string
	Checkouts                      string
	Orders                         string
	ShippingMethodChannelListings  string
	ShippingMethodExcludedProducts string
	ShippingMethodPostalCodeRules  string
}{
	ShippingZone:                   "ShippingZone",
	Checkouts:                      "Checkouts",
	Orders:                         "Orders",
	ShippingMethodChannelListings:  "ShippingMethodChannelListings",
	ShippingMethodExcludedProducts: "ShippingMethodExcludedProducts",
	ShippingMethodPostalCodeRules:  "ShippingMethodPostalCodeRules",
}

// shippingMethodR is where relationships are stored.
type shippingMethodR struct {
	ShippingZone                   *ShippingZone                      `boil:"ShippingZone" json:"ShippingZone" toml:"ShippingZone" yaml:"ShippingZone"`
	Checkouts                      CheckoutSlice                      `boil:"Checkouts" json:"Checkouts" toml:"Checkouts" yaml:"Checkouts"`
	Orders                         OrderSlice                         `boil:"Orders" json:"Orders" toml:"Orders" yaml:"Orders"`
	ShippingMethodChannelListings  ShippingMethodChannelListingSlice  `boil:"ShippingMethodChannelListings" json:"ShippingMethodChannelListings" toml:"ShippingMethodChannelListings" yaml:"ShippingMethodChannelListings"`
	ShippingMethodExcludedProducts ShippingMethodExcludedProductSlice `boil:"ShippingMethodExcludedProducts" json:"ShippingMethodExcludedProducts" toml:"ShippingMethodExcludedProducts" yaml:"ShippingMethodExcludedProducts"`
	ShippingMethodPostalCodeRules  ShippingMethodPostalCodeRuleSlice  `boil:"ShippingMethodPostalCodeRules" json:"ShippingMethodPostalCodeRules" toml:"ShippingMethodPostalCodeRules" yaml:"ShippingMethodPostalCodeRules"`
}

// NewStruct creates a new relationship struct
func (*shippingMethodR) NewStruct() *shippingMethodR {
	return &shippingMethodR{}
}

func (r *shippingMethodR) GetShippingZone() *ShippingZone {
	if r == nil {
		return nil
	}
	return r.ShippingZone
}

func (r *shippingMethodR) GetCheckouts() CheckoutSlice {
	if r == nil {
		return nil
	}
	return r.Checkouts
}

func (r *shippingMethodR) GetOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.Orders
}

func (r *shippingMethodR) GetShippingMethodChannelListings() ShippingMethodChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.ShippingMethodChannelListings
}

func (r *shippingMethodR) GetShippingMethodExcludedProducts() ShippingMethodExcludedProductSlice {
	if r == nil {
		return nil
	}
	return r.ShippingMethodExcludedProducts
}

func (r *shippingMethodR) GetShippingMethodPostalCodeRules() ShippingMethodPostalCodeRuleSlice {
	if r == nil {
		return nil
	}
	return r.ShippingMethodPostalCodeRules
}

// shippingMethodL is where Load methods for each relationship are stored.
type shippingMethodL struct{}

var (
	shippingMethodAllColumns            = []string{"id", "name", "type", "shipping_zone_id", "minimum_order_weight", "maximum_order_weight", "weight_unit", "maximum_delivery_days", "minimum_delivery_days", "description", "metadata", "private_metadata"}
	shippingMethodColumnsWithoutDefault = []string{"name", "type", "shipping_zone_id", "weight_unit"}
	shippingMethodColumnsWithDefault    = []string{"id", "minimum_order_weight", "maximum_order_weight", "maximum_delivery_days", "minimum_delivery_days", "description", "metadata", "private_metadata"}
	shippingMethodPrimaryKeyColumns     = []string{"id"}
	shippingMethodGeneratedColumns      = []string{}
)

type (
	// ShippingMethodSlice is an alias for a slice of pointers to ShippingMethod.
	// This should almost always be used instead of []ShippingMethod.
	ShippingMethodSlice []*ShippingMethod

	shippingMethodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingMethodType                 = reflect.TypeOf(&ShippingMethod{})
	shippingMethodMapping              = queries.MakeStructMapping(shippingMethodType)
	shippingMethodPrimaryKeyMapping, _ = queries.BindMapping(shippingMethodType, shippingMethodMapping, shippingMethodPrimaryKeyColumns)
	shippingMethodInsertCacheMut       sync.RWMutex
	shippingMethodInsertCache          = make(map[string]insertCache)
	shippingMethodUpdateCacheMut       sync.RWMutex
	shippingMethodUpdateCache          = make(map[string]updateCache)
	shippingMethodUpsertCacheMut       sync.RWMutex
	shippingMethodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single shippingMethod record from the query.
func (q shippingMethodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShippingMethod, error) {
	o := &ShippingMethod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for shipping_methods")
	}

	return o, nil
}

// All returns all ShippingMethod records from the query.
func (q shippingMethodQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShippingMethodSlice, error) {
	var o []*ShippingMethod

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ShippingMethod slice")
	}

	return o, nil
}

// Count returns the count of all ShippingMethod records in the query.
func (q shippingMethodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count shipping_methods rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingMethodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if shipping_methods exists")
	}

	return count > 0, nil
}

// ShippingZone pointed to by the foreign key.
func (o *ShippingMethod) ShippingZone(mods ...qm.QueryMod) shippingZoneQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShippingZoneID),
	}

	queryMods = append(queryMods, mods...)

	return ShippingZones(queryMods...)
}

// Checkouts retrieves all the checkout's Checkouts with an executor.
func (o *ShippingMethod) Checkouts(mods ...qm.QueryMod) checkoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkouts\".\"shipping_method_id\"=?", o.ID),
	)

	return Checkouts(queryMods...)
}

// Orders retrieves all the order's Orders with an executor.
func (o *ShippingMethod) Orders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"shipping_method_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// ShippingMethodChannelListings retrieves all the shipping_method_channel_listing's ShippingMethodChannelListings with an executor.
func (o *ShippingMethod) ShippingMethodChannelListings(mods ...qm.QueryMod) shippingMethodChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_method_channel_listings\".\"shipping_method_id\"=?", o.ID),
	)

	return ShippingMethodChannelListings(queryMods...)
}

// ShippingMethodExcludedProducts retrieves all the shipping_method_excluded_product's ShippingMethodExcludedProducts with an executor.
func (o *ShippingMethod) ShippingMethodExcludedProducts(mods ...qm.QueryMod) shippingMethodExcludedProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_method_excluded_products\".\"shipping_method_id\"=?", o.ID),
	)

	return ShippingMethodExcludedProducts(queryMods...)
}

// ShippingMethodPostalCodeRules retrieves all the shipping_method_postal_code_rule's ShippingMethodPostalCodeRules with an executor.
func (o *ShippingMethod) ShippingMethodPostalCodeRules(mods ...qm.QueryMod) shippingMethodPostalCodeRuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_method_postal_code_rules\".\"shipping_method_id\"=?", o.ID),
	)

	return ShippingMethodPostalCodeRules(queryMods...)
}

// LoadShippingZone allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shippingMethodL) LoadShippingZone(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ShippingZoneID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if a == obj.ShippingZoneID {
					continue Outer
				}
			}

			args = append(args, obj.ShippingZoneID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_zones`),
		qm.WhereIn(`shipping_zones.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingZone")
	}

	var resultSlice []*ShippingZone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingZone")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_zones")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_zones")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingZone = foreign
		if foreign.R == nil {
			foreign.R = &shippingZoneR{}
		}
		foreign.R.ShippingMethods = append(foreign.R.ShippingMethods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ShippingZoneID == foreign.ID {
				local.R.ShippingZone = foreign
				if foreign.R == nil {
					foreign.R = &shippingZoneR{}
				}
				foreign.R.ShippingMethods = append(foreign.R.ShippingMethods, local)
				break
			}
		}
	}

	return nil
}

// LoadCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingMethodL) LoadCheckouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.shipping_method_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkouts")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if singular {
		object.R.Checkouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutR{}
			}
			foreign.R.ShippingMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ShippingMethodID) {
				local.R.Checkouts = append(local.R.Checkouts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.ShippingMethod = local
				break
			}
		}
	}

	return nil
}

// LoadOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingMethodL) LoadOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.shipping_method_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if singular {
		object.R.Orders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.ShippingMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ShippingMethodID) {
				local.R.Orders = append(local.R.Orders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.ShippingMethod = local
				break
			}
		}
	}

	return nil
}

// LoadShippingMethodChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingMethodL) LoadShippingMethodChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_method_channel_listings`),
		qm.WhereIn(`shipping_method_channel_listings.shipping_method_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_method_channel_listings")
	}

	var resultSlice []*ShippingMethodChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_method_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_method_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_method_channel_listings")
	}

	if singular {
		object.R.ShippingMethodChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodChannelListingR{}
			}
			foreign.R.ShippingMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShippingMethodID {
				local.R.ShippingMethodChannelListings = append(local.R.ShippingMethodChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodChannelListingR{}
				}
				foreign.R.ShippingMethod = local
				break
			}
		}
	}

	return nil
}

// LoadShippingMethodExcludedProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingMethodL) LoadShippingMethodExcludedProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_method_excluded_products`),
		qm.WhereIn(`shipping_method_excluded_products.shipping_method_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_method_excluded_products")
	}

	var resultSlice []*ShippingMethodExcludedProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_method_excluded_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_method_excluded_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_method_excluded_products")
	}

	if singular {
		object.R.ShippingMethodExcludedProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodExcludedProductR{}
			}
			foreign.R.ShippingMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShippingMethodID {
				local.R.ShippingMethodExcludedProducts = append(local.R.ShippingMethodExcludedProducts, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodExcludedProductR{}
				}
				foreign.R.ShippingMethod = local
				break
			}
		}
	}

	return nil
}

// LoadShippingMethodPostalCodeRules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingMethodL) LoadShippingMethodPostalCodeRules(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_method_postal_code_rules`),
		qm.WhereIn(`shipping_method_postal_code_rules.shipping_method_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_method_postal_code_rules")
	}

	var resultSlice []*ShippingMethodPostalCodeRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_method_postal_code_rules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_method_postal_code_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_method_postal_code_rules")
	}

	if singular {
		object.R.ShippingMethodPostalCodeRules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodPostalCodeRuleR{}
			}
			foreign.R.ShippingMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShippingMethodID {
				local.R.ShippingMethodPostalCodeRules = append(local.R.ShippingMethodPostalCodeRules, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodPostalCodeRuleR{}
				}
				foreign.R.ShippingMethod = local
				break
			}
		}
	}

	return nil
}

// SetShippingZone of the shippingMethod to the related item.
// Sets o.R.ShippingZone to related.
// Adds o to related.R.ShippingMethods.
func (o *ShippingMethod) SetShippingZone(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShippingZone) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shipping_methods\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_zone_id"}),
		strmangle.WhereClause("\"", "\"", 2, shippingMethodPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ShippingZoneID = related.ID
	if o.R == nil {
		o.R = &shippingMethodR{
			ShippingZone: related,
		}
	} else {
		o.R.ShippingZone = related
	}

	if related.R == nil {
		related.R = &shippingZoneR{
			ShippingMethods: ShippingMethodSlice{o},
		}
	} else {
		related.R.ShippingMethods = append(related.R.ShippingMethods, o)
	}

	return nil
}

// AddCheckouts adds the given related objects to the existing relationships
// of the shipping_method, optionally inserting them as new records.
// Appends related to o.R.Checkouts.
// Sets related.R.ShippingMethod appropriately.
func (o *ShippingMethod) AddCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ShippingMethodID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_method_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ShippingMethodID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shippingMethodR{
			Checkouts: related,
		}
	} else {
		o.R.Checkouts = append(o.R.Checkouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutR{
				ShippingMethod: o,
			}
		} else {
			rel.R.ShippingMethod = o
		}
	}
	return nil
}

// SetCheckouts removes all previously related items of the
// shipping_method replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShippingMethod's Checkouts accordingly.
// Replaces o.R.Checkouts with related.
// Sets related.R.ShippingMethod's Checkouts accordingly.
func (o *ShippingMethod) SetCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	query := "update \"checkouts\" set \"shipping_method_id\" = null where \"shipping_method_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Checkouts {
			queries.SetScanner(&rel.ShippingMethodID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShippingMethod = nil
		}
		o.R.Checkouts = nil
	}

	return o.AddCheckouts(ctx, exec, insert, related...)
}

// RemoveCheckouts relationships from objects passed in.
// Removes related items from R.Checkouts (uses pointer comparison, removal does not keep order)
// Sets related.R.ShippingMethod.
func (o *ShippingMethod) RemoveCheckouts(ctx context.Context, exec boil.ContextExecutor, related ...*Checkout) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ShippingMethodID, nil)
		if rel.R != nil {
			rel.R.ShippingMethod = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shipping_method_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Checkouts {
			if rel != ri {
				continue
			}

			ln := len(o.R.Checkouts)
			if ln > 1 && i < ln-1 {
				o.R.Checkouts[i] = o.R.Checkouts[ln-1]
			}
			o.R.Checkouts = o.R.Checkouts[:ln-1]
			break
		}
	}

	return nil
}

// AddOrders adds the given related objects to the existing relationships
// of the shipping_method, optionally inserting them as new records.
// Appends related to o.R.Orders.
// Sets related.R.ShippingMethod appropriately.
func (o *ShippingMethod) AddOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ShippingMethodID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_method_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ShippingMethodID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shippingMethodR{
			Orders: related,
		}
	} else {
		o.R.Orders = append(o.R.Orders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				ShippingMethod: o,
			}
		} else {
			rel.R.ShippingMethod = o
		}
	}
	return nil
}

// SetOrders removes all previously related items of the
// shipping_method replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShippingMethod's Orders accordingly.
// Replaces o.R.Orders with related.
// Sets related.R.ShippingMethod's Orders accordingly.
func (o *ShippingMethod) SetOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"shipping_method_id\" = null where \"shipping_method_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Orders {
			queries.SetScanner(&rel.ShippingMethodID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShippingMethod = nil
		}
		o.R.Orders = nil
	}

	return o.AddOrders(ctx, exec, insert, related...)
}

// RemoveOrders relationships from objects passed in.
// Removes related items from R.Orders (uses pointer comparison, removal does not keep order)
// Sets related.R.ShippingMethod.
func (o *ShippingMethod) RemoveOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ShippingMethodID, nil)
		if rel.R != nil {
			rel.R.ShippingMethod = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shipping_method_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Orders {
			if rel != ri {
				continue
			}

			ln := len(o.R.Orders)
			if ln > 1 && i < ln-1 {
				o.R.Orders[i] = o.R.Orders[ln-1]
			}
			o.R.Orders = o.R.Orders[:ln-1]
			break
		}
	}

	return nil
}

// AddShippingMethodChannelListings adds the given related objects to the existing relationships
// of the shipping_method, optionally inserting them as new records.
// Appends related to o.R.ShippingMethodChannelListings.
// Sets related.R.ShippingMethod appropriately.
func (o *ShippingMethod) AddShippingMethodChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShippingMethodID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_method_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_method_id"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShippingMethodID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shippingMethodR{
			ShippingMethodChannelListings: related,
		}
	} else {
		o.R.ShippingMethodChannelListings = append(o.R.ShippingMethodChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodChannelListingR{
				ShippingMethod: o,
			}
		} else {
			rel.R.ShippingMethod = o
		}
	}
	return nil
}

// AddShippingMethodExcludedProducts adds the given related objects to the existing relationships
// of the shipping_method, optionally inserting them as new records.
// Appends related to o.R.ShippingMethodExcludedProducts.
// Sets related.R.ShippingMethod appropriately.
func (o *ShippingMethod) AddShippingMethodExcludedProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodExcludedProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShippingMethodID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_method_id"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodExcludedProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShippingMethodID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shippingMethodR{
			ShippingMethodExcludedProducts: related,
		}
	} else {
		o.R.ShippingMethodExcludedProducts = append(o.R.ShippingMethodExcludedProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodExcludedProductR{
				ShippingMethod: o,
			}
		} else {
			rel.R.ShippingMethod = o
		}
	}
	return nil
}

// AddShippingMethodPostalCodeRules adds the given related objects to the existing relationships
// of the shipping_method, optionally inserting them as new records.
// Appends related to o.R.ShippingMethodPostalCodeRules.
// Sets related.R.ShippingMethod appropriately.
func (o *ShippingMethod) AddShippingMethodPostalCodeRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodPostalCodeRule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShippingMethodID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_method_postal_code_rules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_method_id"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodPostalCodeRulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShippingMethodID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shippingMethodR{
			ShippingMethodPostalCodeRules: related,
		}
	} else {
		o.R.ShippingMethodPostalCodeRules = append(o.R.ShippingMethodPostalCodeRules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodPostalCodeRuleR{
				ShippingMethod: o,
			}
		} else {
			rel.R.ShippingMethod = o
		}
	}
	return nil
}

// ShippingMethods retrieves all the records using an executor.
func ShippingMethods(mods ...qm.QueryMod) shippingMethodQuery {
	mods = append(mods, qm.From("\"shipping_methods\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_methods\".*"})
	}

	return shippingMethodQuery{q}
}

// FindShippingMethod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingMethod(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ShippingMethod, error) {
	shippingMethodObj := &ShippingMethod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_methods\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shippingMethodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from shipping_methods")
	}

	return shippingMethodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingMethod) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shipping_methods provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingMethodInsertCacheMut.RLock()
	cache, cached := shippingMethodInsertCache[key]
	shippingMethodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingMethodAllColumns,
			shippingMethodColumnsWithDefault,
			shippingMethodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_methods\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_methods\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into shipping_methods")
	}

	if !cached {
		shippingMethodInsertCacheMut.Lock()
		shippingMethodInsertCache[key] = cache
		shippingMethodInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ShippingMethod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingMethod) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	shippingMethodUpdateCacheMut.RLock()
	cache, cached := shippingMethodUpdateCache[key]
	shippingMethodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingMethodAllColumns,
			shippingMethodPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update shipping_methods, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_methods\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingMethodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, append(wl, shippingMethodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update shipping_methods row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for shipping_methods")
	}

	if !cached {
		shippingMethodUpdateCacheMut.Lock()
		shippingMethodUpdateCache[key] = cache
		shippingMethodUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q shippingMethodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for shipping_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for shipping_methods")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingMethodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_methods\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingMethodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in shippingMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all shippingMethod")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingMethod) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no shipping_methods provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingMethodUpsertCacheMut.RLock()
	cache, cached := shippingMethodUpsertCache[key]
	shippingMethodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shippingMethodAllColumns,
			shippingMethodColumnsWithDefault,
			shippingMethodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingMethodAllColumns,
			shippingMethodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert shipping_methods, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shippingMethodPrimaryKeyColumns))
			copy(conflict, shippingMethodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_methods\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert shipping_methods")
	}

	if !cached {
		shippingMethodUpsertCacheMut.Lock()
		shippingMethodUpsertCache[key] = cache
		shippingMethodUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ShippingMethod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingMethod) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no ShippingMethod provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingMethodPrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_methods\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from shipping_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for shipping_methods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingMethodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no shippingMethodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shipping_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_methods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingMethodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_methods\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from shippingMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for shipping_methods")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingMethod) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShippingMethod(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingMethodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingMethodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_methods\".* FROM \"shipping_methods\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ShippingMethodSlice")
	}

	*o = slice

	return nil
}

// ShippingMethodExists checks if the ShippingMethod row exists.
func ShippingMethodExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_methods\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if shipping_methods exists")
	}

	return exists, nil
}

// Exists checks if the ShippingMethod row exists.
func (o *ShippingMethod) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShippingMethodExists(ctx, exec, o.ID)
}
