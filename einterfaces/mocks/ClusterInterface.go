// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make einterfaces-mocks`.

package mocks

import (
	einterfaces "github.com/sitename/sitename/einterfaces"
	cluster "github.com/sitename/sitename/model/cluster"

	mock "github.com/stretchr/testify/mock"

	model "github.com/sitename/sitename/model"

	plugins "github.com/sitename/sitename/model/plugins"
)

// ClusterInterface is an autogenerated mock type for the ClusterInterface type
type ClusterInterface struct {
	mock.Mock
}

// ConfigChanged provides a mock function with given fields: previousConfig, newConfig, sendToOtherServer
func (_m *ClusterInterface) ConfigChanged(previousConfig *model.Config, newConfig *model.Config, sendToOtherServer bool) *model.AppError {
	ret := _m.Called(previousConfig, newConfig, sendToOtherServer)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.Config, *model.Config, bool) *model.AppError); ok {
		r0 = rf(previousConfig, newConfig, sendToOtherServer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// GetClusterId provides a mock function with given fields:
func (_m *ClusterInterface) GetClusterId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetClusterInfos provides a mock function with given fields:
func (_m *ClusterInterface) GetClusterInfos() []*cluster.ClusterInfo {
	ret := _m.Called()

	var r0 []*cluster.ClusterInfo
	if rf, ok := ret.Get(0).(func() []*cluster.ClusterInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*cluster.ClusterInfo)
		}
	}

	return r0
}

// GetClusterStats provides a mock function with given fields:
func (_m *ClusterInterface) GetClusterStats() ([]*cluster.ClusterStats, *model.AppError) {
	ret := _m.Called()

	var r0 []*cluster.ClusterStats
	if rf, ok := ret.Get(0).(func() []*cluster.ClusterStats); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*cluster.ClusterStats)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func() *model.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetLogs provides a mock function with given fields: page, perPage
func (_m *ClusterInterface) GetLogs(page int, perPage int) ([]string, *model.AppError) {
	ret := _m.Called(page, perPage)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int, int) []string); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func(int, int) *model.AppError); ok {
		r1 = rf(page, perPage)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// GetMyClusterInfo provides a mock function with given fields:
func (_m *ClusterInterface) GetMyClusterInfo() *cluster.ClusterInfo {
	ret := _m.Called()

	var r0 *cluster.ClusterInfo
	if rf, ok := ret.Get(0).(func() *cluster.ClusterInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ClusterInfo)
		}
	}

	return r0
}

// GetPluginStatuses provides a mock function with given fields:
func (_m *ClusterInterface) GetPluginStatuses() (plugins.PluginStatuses, *model.AppError) {
	ret := _m.Called()

	var r0 plugins.PluginStatuses
	if rf, ok := ret.Get(0).(func() plugins.PluginStatuses); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plugins.PluginStatuses)
		}
	}

	var r1 *model.AppError
	if rf, ok := ret.Get(1).(func() *model.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// HealthScore provides a mock function with given fields:
func (_m *ClusterInterface) HealthScore() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IsLeader provides a mock function with given fields:
func (_m *ClusterInterface) IsLeader() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NotifyMsg provides a mock function with given fields: buf
func (_m *ClusterInterface) NotifyMsg(buf []byte) {
	_m.Called(buf)
}

// RegisterClusterMessageHandler provides a mock function with given fields: event, crm
func (_m *ClusterInterface) RegisterClusterMessageHandler(event cluster.ClusterEvent, crm einterfaces.ClusterMessageHandler) {
	_m.Called(event, crm)
}

// SendClusterMessage provides a mock function with given fields: _a0
func (_m *ClusterInterface) SendClusterMessage(_a0 *cluster.ClusterMessage) {
	_m.Called(_a0)
}

// StartInterNodeCommunication provides a mock function with given fields:
func (_m *ClusterInterface) StartInterNodeCommunication() {
	_m.Called()
}

// StopInterNodeCommunication provides a mock function with given fields:
func (_m *ClusterInterface) StopInterNodeCommunication() {
	_m.Called()
}
