// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gorp "github.com/mattermost/gorp"
	mock "github.com/stretchr/testify/mock"

	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
)

// OrderDiscountStore is an autogenerated mock type for the OrderDiscountStore type
type OrderDiscountStore struct {
	mock.Mock
}

// BulkDelete provides a mock function with given fields: orderDiscountIDs
func (_m *OrderDiscountStore) BulkDelete(orderDiscountIDs []string) error {
	ret := _m.Called(orderDiscountIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(orderDiscountIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *OrderDiscountStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterbyOption provides a mock function with given fields: option
func (_m *OrderDiscountStore) FilterbyOption(option *product_and_discount.OrderDiscountFilterOption) ([]*product_and_discount.OrderDiscount, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.OrderDiscount
	if rf, ok := ret.Get(0).(func(*product_and_discount.OrderDiscountFilterOption) []*product_and_discount.OrderDiscount); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.OrderDiscount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.OrderDiscountFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: orderDiscountID
func (_m *OrderDiscountStore) Get(orderDiscountID string) (*product_and_discount.OrderDiscount, error) {
	ret := _m.Called(orderDiscountID)

	var r0 *product_and_discount.OrderDiscount
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.OrderDiscount); ok {
		r0 = rf(orderDiscountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.OrderDiscount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderDiscountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: transaction, orderDiscount
func (_m *OrderDiscountStore) Upsert(transaction store_iface.SqlxTxExecutor, orderDiscount *product_and_discount.OrderDiscount) (*product_and_discount.OrderDiscount, error) {
	ret := _m.Called(transaction, orderDiscount)

	var r0 *product_and_discount.OrderDiscount
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *product_and_discount.OrderDiscount) *product_and_discount.OrderDiscount); ok {
		r0 = rf(transaction, orderDiscount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.OrderDiscount)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *product_and_discount.OrderDiscount) error); ok {
		r1 = rf(transaction, orderDiscount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
