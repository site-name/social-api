// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// OrderDiscountStore is an autogenerated mock type for the OrderDiscountStore type
type OrderDiscountStore struct {
	mock.Mock
}

// BulkDelete provides a mock function with given fields: ids
func (_m *OrderDiscountStore) BulkDelete(ids []string) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterbyOption provides a mock function with given fields: option
func (_m *OrderDiscountStore) FilterbyOption(option model_helper.OrderDiscountFilterOption) (model.OrderDiscountSlice, error) {
	ret := _m.Called(option)

	var r0 model.OrderDiscountSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.OrderDiscountFilterOption) (model.OrderDiscountSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.OrderDiscountFilterOption) model.OrderDiscountSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.OrderDiscountSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.OrderDiscountFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: orderDiscountID
func (_m *OrderDiscountStore) Get(orderDiscountID string) (*model.OrderDiscount, error) {
	ret := _m.Called(orderDiscountID)

	var r0 *model.OrderDiscount
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.OrderDiscount, error)); ok {
		return rf(orderDiscountID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.OrderDiscount); ok {
		r0 = rf(orderDiscountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderDiscount)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderDiscountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, orderDiscount
func (_m *OrderDiscountStore) Upsert(tx boil.ContextTransactor, orderDiscount model.OrderDiscount) (*model.OrderDiscount, error) {
	ret := _m.Called(tx, orderDiscount)

	var r0 *model.OrderDiscount
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.OrderDiscount) (*model.OrderDiscount, error)); ok {
		return rf(tx, orderDiscount)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.OrderDiscount) *model.OrderDiscount); ok {
		r0 = rf(tx, orderDiscount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderDiscount)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.OrderDiscount) error); ok {
		r1 = rf(tx, orderDiscount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderDiscountStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderDiscountStore creates a new instance of OrderDiscountStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderDiscountStore(t mockConstructorTestingTNewOrderDiscountStore) *OrderDiscountStore {
	mock := &OrderDiscountStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
