// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	store_iface "github.com/sitename/sitename/store/store_iface"

	wishlist "github.com/sitename/sitename/model/wishlist"
)

// WishlistItemStore is an autogenerated mock type for the WishlistItemStore type
type WishlistItemStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, wishlistItems
func (_m *WishlistItemStore) BulkUpsert(transaction store_iface.SqlxTxExecutor, wishlistItems wishlist.WishlistItems) (wishlist.WishlistItems, error) {
	ret := _m.Called(transaction, wishlistItems)

	var r0 wishlist.WishlistItems
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, wishlist.WishlistItems) wishlist.WishlistItems); ok {
		r0 = rf(transaction, wishlistItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(wishlist.WishlistItems)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, wishlist.WishlistItems) error); ok {
		r1 = rf(transaction, wishlistItems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItemsByOption provides a mock function with given fields: transaction, option
func (_m *WishlistItemStore) DeleteItemsByOption(transaction store_iface.SqlxTxExecutor, option *wishlist.WishlistItemFilterOption) (int64, error) {
	ret := _m.Called(transaction, option)

	var r0 int64
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *wishlist.WishlistItemFilterOption) int64); ok {
		r0 = rf(transaction, option)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *wishlist.WishlistItemFilterOption) error); ok {
		r1 = rf(transaction, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *WishlistItemStore) FilterByOption(option *wishlist.WishlistItemFilterOption) ([]*wishlist.WishlistItem, error) {
	ret := _m.Called(option)

	var r0 []*wishlist.WishlistItem
	if rf, ok := ret.Get(0).(func(*wishlist.WishlistItemFilterOption) []*wishlist.WishlistItem); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*wishlist.WishlistItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wishlist.WishlistItemFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: selector, id
func (_m *WishlistItemStore) GetById(selector store_iface.SqlxTxExecutor, id string) (*wishlist.WishlistItem, error) {
	ret := _m.Called(selector, id)

	var r0 *wishlist.WishlistItem
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, string) *wishlist.WishlistItem); ok {
		r0 = rf(selector, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wishlist.WishlistItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, string) error); ok {
		r1 = rf(selector, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *WishlistItemStore) GetByOption(option *wishlist.WishlistItemFilterOption) (*wishlist.WishlistItem, error) {
	ret := _m.Called(option)

	var r0 *wishlist.WishlistItem
	if rf, ok := ret.Get(0).(func(*wishlist.WishlistItemFilterOption) *wishlist.WishlistItem); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wishlist.WishlistItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wishlist.WishlistItemFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
