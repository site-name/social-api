// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// WishlistItemStore is an autogenerated mock type for the WishlistItemStore type
type WishlistItemStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: tx, wishlistItems
func (_m *WishlistItemStore) BulkUpsert(tx boil.ContextTransactor, wishlistItems model.WishlistItemSlice) (model.WishlistItemSlice, error) {
	ret := _m.Called(tx, wishlistItems)

	var r0 model.WishlistItemSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.WishlistItemSlice) (model.WishlistItemSlice, error)); ok {
		return rf(tx, wishlistItems)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.WishlistItemSlice) model.WishlistItemSlice); ok {
		r0 = rf(tx, wishlistItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WishlistItemSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.WishlistItemSlice) error); ok {
		r1 = rf(tx, wishlistItems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, ids
func (_m *WishlistItemStore) Delete(tx boil.ContextTransactor, ids []string) (int64, error) {
	ret := _m.Called(tx, ids)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) (int64, error)); ok {
		return rf(tx, ids)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) int64); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, []string) error); ok {
		r1 = rf(tx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *WishlistItemStore) FilterByOption(option model_helper.WishlistItemFilterOption) (model.WishlistItemSlice, error) {
	ret := _m.Called(option)

	var r0 model.WishlistItemSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.WishlistItemFilterOption) (model.WishlistItemSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.WishlistItemFilterOption) model.WishlistItemSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WishlistItemSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.WishlistItemFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *WishlistItemStore) GetById(id string) (*model.WishlistItem, error) {
	ret := _m.Called(id)

	var r0 *model.WishlistItem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.WishlistItem, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.WishlistItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WishlistItem)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *WishlistItemStore) GetByOption(option model_helper.WishlistItemFilterOption) (*model.WishlistItem, error) {
	ret := _m.Called(option)

	var r0 *model.WishlistItem
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.WishlistItemFilterOption) (*model.WishlistItem, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.WishlistItemFilterOption) *model.WishlistItem); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WishlistItem)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.WishlistItemFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWishlistItemStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewWishlistItemStore creates a new instance of WishlistItemStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWishlistItemStore(t mockConstructorTestingTNewWishlistItemStore) *WishlistItemStore {
	mock := &WishlistItemStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
