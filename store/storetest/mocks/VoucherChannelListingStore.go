// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// VoucherChannelListingStore is an autogenerated mock type for the VoucherChannelListingStore type
type VoucherChannelListingStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: transaction, option
func (_m *VoucherChannelListingStore) Delete(transaction *gorm.DB, option *model.VoucherChannelListingFilterOption) error {
	ret := _m.Called(transaction, option)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.VoucherChannelListingFilterOption) error); ok {
		r0 = rf(transaction, option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterbyOption provides a mock function with given fields: option
func (_m *VoucherChannelListingStore) FilterbyOption(option *model.VoucherChannelListingFilterOption) ([]*model.VoucherChannelListing, error) {
	ret := _m.Called(option)

	var r0 []*model.VoucherChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.VoucherChannelListingFilterOption) ([]*model.VoucherChannelListing, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.VoucherChannelListingFilterOption) []*model.VoucherChannelListing); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.VoucherChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.VoucherChannelListingFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: voucherChannelListingID
func (_m *VoucherChannelListingStore) Get(voucherChannelListingID string) (*model.VoucherChannelListing, error) {
	ret := _m.Called(voucherChannelListingID)

	var r0 *model.VoucherChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.VoucherChannelListing, error)); ok {
		return rf(voucherChannelListingID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.VoucherChannelListing); ok {
		r0 = rf(voucherChannelListingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.VoucherChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(voucherChannelListingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: transaction, voucherChannelListings
func (_m *VoucherChannelListingStore) Upsert(transaction *gorm.DB, voucherChannelListings []*model.VoucherChannelListing) ([]*model.VoucherChannelListing, error) {
	ret := _m.Called(transaction, voucherChannelListings)

	var r0 []*model.VoucherChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.VoucherChannelListing) ([]*model.VoucherChannelListing, error)); ok {
		return rf(transaction, voucherChannelListings)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.VoucherChannelListing) []*model.VoucherChannelListing); ok {
		r0 = rf(transaction, voucherChannelListings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.VoucherChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.VoucherChannelListing) error); ok {
		r1 = rf(transaction, voucherChannelListings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewVoucherChannelListingStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewVoucherChannelListingStore creates a new instance of VoucherChannelListingStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVoucherChannelListingStore(t mockConstructorTestingTNewVoucherChannelListingStore) *VoucherChannelListingStore {
	mock := &VoucherChannelListingStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
