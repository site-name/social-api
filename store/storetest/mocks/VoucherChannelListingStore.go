// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// VoucherChannelListingStore is an autogenerated mock type for the VoucherChannelListingStore type
type VoucherChannelListingStore struct {
	mock.Mock
}

// FilterbyOption provides a mock function with given fields: option
func (_m *VoucherChannelListingStore) FilterbyOption(option *product_and_discount.VoucherChannelListingFilterOption) ([]*product_and_discount.VoucherChannelListing, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.VoucherChannelListing
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherChannelListingFilterOption) []*product_and_discount.VoucherChannelListing); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.VoucherChannelListing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherChannelListingFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: voucherChannelListingID
func (_m *VoucherChannelListingStore) Get(voucherChannelListingID string) (*product_and_discount.VoucherChannelListing, error) {
	ret := _m.Called(voucherChannelListingID)

	var r0 *product_and_discount.VoucherChannelListing
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.VoucherChannelListing); ok {
		r0 = rf(voucherChannelListingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.VoucherChannelListing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(voucherChannelListingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: voucherChannelListing
func (_m *VoucherChannelListingStore) Upsert(voucherChannelListing *product_and_discount.VoucherChannelListing) (*product_and_discount.VoucherChannelListing, error) {
	ret := _m.Called(voucherChannelListing)

	var r0 *product_and_discount.VoucherChannelListing
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherChannelListing) *product_and_discount.VoucherChannelListing); ok {
		r0 = rf(voucherChannelListing)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.VoucherChannelListing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherChannelListing) error); ok {
		r1 = rf(voucherChannelListing)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
