// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	menu "github.com/sitename/sitename/model/menu"
	mock "github.com/stretchr/testify/mock"
)

// MenuStore is an autogenerated mock type for the MenuStore type
type MenuStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *MenuStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// GetById provides a mock function with given fields: id
func (_m *MenuStore) GetById(id string) (*menu.Menu, error) {
	ret := _m.Called(id)

	var r0 *menu.Menu
	if rf, ok := ret.Get(0).(func(string) *menu.Menu); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*menu.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *MenuStore) GetByName(name string) (*menu.Menu, error) {
	ret := _m.Called(name)

	var r0 *menu.Menu
	if rf, ok := ret.Get(0).(func(string) *menu.Menu); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*menu.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySlug provides a mock function with given fields: slug
func (_m *MenuStore) GetBySlug(slug string) (*menu.Menu, error) {
	ret := _m.Called(slug)

	var r0 *menu.Menu
	if rf, ok := ret.Get(0).(func(string) *menu.Menu); ok {
		r0 = rf(slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*menu.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *MenuStore) Save(_a0 *menu.Menu) (*menu.Menu, error) {
	ret := _m.Called(_a0)

	var r0 *menu.Menu
	if rf, ok := ret.Get(0).(func(*menu.Menu) *menu.Menu); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*menu.Menu)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*menu.Menu) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
