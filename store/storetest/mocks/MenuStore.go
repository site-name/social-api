// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// MenuStore is an autogenerated mock type for the MenuStore type
type MenuStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ids
func (_m *MenuStore) Delete(ids []string) (int64, *model.AppError) {
	ret := _m.Called(ids)

	var r0 int64
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func([]string) (int64, *model.AppError)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) int64); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func([]string) *model.AppError); ok {
		r1 = rf(ids)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// FilterByOptions provides a mock function with given fields: options
func (_m *MenuStore) FilterByOptions(options *model.MenuFilterOptions) ([]*model.Menu, error) {
	ret := _m.Called(options)

	var r0 []*model.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.MenuFilterOptions) ([]*model.Menu, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.MenuFilterOptions) []*model.Menu); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Menu)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.MenuFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOptions provides a mock function with given fields: options
func (_m *MenuStore) GetByOptions(options *model.MenuFilterOptions) (*model.Menu, error) {
	ret := _m.Called(options)

	var r0 *model.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.MenuFilterOptions) (*model.Menu, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.MenuFilterOptions) *model.Menu); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Menu)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.MenuFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: menu
func (_m *MenuStore) Save(menu *model.Menu) (*model.Menu, error) {
	ret := _m.Called(menu)

	var r0 *model.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Menu) (*model.Menu, error)); ok {
		return rf(menu)
	}
	if rf, ok := ret.Get(0).(func(*model.Menu) *model.Menu); ok {
		r0 = rf(menu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Menu)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Menu) error); ok {
		r1 = rf(menu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMenuStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenuStore creates a new instance of MenuStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenuStore(t mockConstructorTestingTNewMenuStore) *MenuStore {
	mock := &MenuStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
