// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	model_helper "github.com/sitename/sitename/model_helper"
)

// ShopStaffStore is an autogenerated mock type for the ShopStaffStore type
type ShopStaffStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *ShopStaffStore) FilterByOptions(options model_helper.ShopStaffFilterOptions) (model.ShopStaffSlice, error) {
	ret := _m.Called(options)

	var r0 model.ShopStaffSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.ShopStaffFilterOptions) (model.ShopStaffSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.ShopStaffFilterOptions) model.ShopStaffSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ShopStaffSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.ShopStaffFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: shopStaffID
func (_m *ShopStaffStore) Get(shopStaffID string) (*model.ShopStaff, error) {
	ret := _m.Called(shopStaffID)

	var r0 *model.ShopStaff
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ShopStaff, error)); ok {
		return rf(shopStaffID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ShopStaff); ok {
		r0 = rf(shopStaffID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShopStaff)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shopStaffID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOptions provides a mock function with given fields: options
func (_m *ShopStaffStore) GetByOptions(options model_helper.ShopStaffFilterOptions) (*model.ShopStaff, error) {
	ret := _m.Called(options)

	var r0 *model.ShopStaff
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.ShopStaffFilterOptions) (*model.ShopStaff, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.ShopStaffFilterOptions) *model.ShopStaff); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShopStaff)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.ShopStaffFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: shopStaff
func (_m *ShopStaffStore) Upsert(shopStaff model.ShopStaff) (*model.ShopStaff, error) {
	ret := _m.Called(shopStaff)

	var r0 *model.ShopStaff
	var r1 error
	if rf, ok := ret.Get(0).(func(model.ShopStaff) (*model.ShopStaff, error)); ok {
		return rf(shopStaff)
	}
	if rf, ok := ret.Get(0).(func(model.ShopStaff) *model.ShopStaff); ok {
		r0 = rf(shopStaff)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShopStaff)
		}
	}

	if rf, ok := ret.Get(1).(func(model.ShopStaff) error); ok {
		r1 = rf(shopStaff)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewShopStaffStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewShopStaffStore creates a new instance of ShopStaffStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewShopStaffStore(t mockConstructorTestingTNewShopStaffStore) *ShopStaffStore {
	mock := &ShopStaffStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
