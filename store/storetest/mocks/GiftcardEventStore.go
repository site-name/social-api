// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// GiftcardEventStore is an autogenerated mock type for the GiftcardEventStore type
type GiftcardEventStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *GiftcardEventStore) FilterByOptions(options model_helper.GiftCardEventFilterOption) (model.GiftcardEventSlice, error) {
	ret := _m.Called(options)

	var r0 model.GiftcardEventSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.GiftCardEventFilterOption) (model.GiftcardEventSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.GiftCardEventFilterOption) model.GiftcardEventSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.GiftcardEventSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.GiftCardEventFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *GiftcardEventStore) Get(id string) (*model.GiftcardEvent, error) {
	ret := _m.Called(id)

	var r0 *model.GiftcardEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.GiftcardEvent, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.GiftcardEvent); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GiftcardEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, events
func (_m *GiftcardEventStore) Upsert(tx boil.ContextTransactor, events model.GiftcardEventSlice) (model.GiftcardEventSlice, error) {
	ret := _m.Called(tx, events)

	var r0 model.GiftcardEventSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.GiftcardEventSlice) (model.GiftcardEventSlice, error)); ok {
		return rf(tx, events)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.GiftcardEventSlice) model.GiftcardEventSlice); ok {
		r0 = rf(tx, events)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.GiftcardEventSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.GiftcardEventSlice) error); ok {
		r1 = rf(tx, events)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGiftcardEventStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewGiftcardEventStore creates a new instance of GiftcardEventStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGiftcardEventStore(t mockConstructorTestingTNewGiftcardEventStore) *GiftcardEventStore {
	mock := &GiftcardEventStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
