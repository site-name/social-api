// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gorp "github.com/mattermost/gorp"
	giftcard "github.com/sitename/sitename/model/giftcard"

	mock "github.com/stretchr/testify/mock"
)

// GiftcardEventStore is an autogenerated mock type for the GiftcardEventStore type
type GiftcardEventStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, events
func (_m *GiftcardEventStore) BulkUpsert(transaction store_iface.SqlxTxExecutor, events ...*giftcard.GiftCardEvent) ([]*giftcard.GiftCardEvent, error) {
	_va := make([]interface{}, len(events))
	for _i := range events {
		_va[_i] = events[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, transaction)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*giftcard.GiftCardEvent
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, ...*giftcard.GiftCardEvent) []*giftcard.GiftCardEvent); ok {
		r0 = rf(transaction, events...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*giftcard.GiftCardEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, ...*giftcard.GiftCardEvent) error); ok {
		r1 = rf(transaction, events...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *GiftcardEventStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOptions provides a mock function with given fields: options
func (_m *GiftcardEventStore) FilterByOptions(options *giftcard.GiftCardEventFilterOption) ([]*giftcard.GiftCardEvent, error) {
	ret := _m.Called(options)

	var r0 []*giftcard.GiftCardEvent
	if rf, ok := ret.Get(0).(func(*giftcard.GiftCardEventFilterOption) []*giftcard.GiftCardEvent); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*giftcard.GiftCardEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*giftcard.GiftCardEventFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *GiftcardEventStore) Get(id string) (*giftcard.GiftCardEvent, error) {
	ret := _m.Called(id)

	var r0 *giftcard.GiftCardEvent
	if rf, ok := ret.Get(0).(func(string) *giftcard.GiftCardEvent); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*giftcard.GiftCardEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ordering provides a mock function with given fields:
func (_m *GiftcardEventStore) Ordering() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Save provides a mock function with given fields: event
func (_m *GiftcardEventStore) Save(event *giftcard.GiftCardEvent) (*giftcard.GiftCardEvent, error) {
	ret := _m.Called(event)

	var r0 *giftcard.GiftCardEvent
	if rf, ok := ret.Get(0).(func(*giftcard.GiftCardEvent) *giftcard.GiftCardEvent); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*giftcard.GiftCardEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*giftcard.GiftCardEvent) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TableName provides a mock function with given fields: withField
func (_m *GiftcardEventStore) TableName(withField string) string {
	ret := _m.Called(withField)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(withField)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
