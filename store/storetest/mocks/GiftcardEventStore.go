// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// GiftcardEventStore is an autogenerated mock type for the GiftcardEventStore type
type GiftcardEventStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, events
func (_m *GiftcardEventStore) BulkUpsert(transaction *gorm.DB, events ...*model.GiftCardEvent) ([]*model.GiftCardEvent, error) {
	_va := make([]interface{}, len(events))
	for _i := range events {
		_va[_i] = events[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, transaction)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*model.GiftCardEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...*model.GiftCardEvent) ([]*model.GiftCardEvent, error)); ok {
		return rf(transaction, events...)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...*model.GiftCardEvent) []*model.GiftCardEvent); ok {
		r0 = rf(transaction, events...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GiftCardEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, ...*model.GiftCardEvent) error); ok {
		r1 = rf(transaction, events...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOptions provides a mock function with given fields: options
func (_m *GiftcardEventStore) FilterByOptions(options *model.GiftCardEventFilterOption) ([]*model.GiftCardEvent, error) {
	ret := _m.Called(options)

	var r0 []*model.GiftCardEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.GiftCardEventFilterOption) ([]*model.GiftCardEvent, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.GiftCardEventFilterOption) []*model.GiftCardEvent); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GiftCardEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.GiftCardEventFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *GiftcardEventStore) Get(id string) (*model.GiftCardEvent, error) {
	ret := _m.Called(id)

	var r0 *model.GiftCardEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.GiftCardEvent, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.GiftCardEvent); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GiftCardEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: event
func (_m *GiftcardEventStore) Save(event *model.GiftCardEvent) (*model.GiftCardEvent, error) {
	ret := _m.Called(event)

	var r0 *model.GiftCardEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.GiftCardEvent) (*model.GiftCardEvent, error)); ok {
		return rf(event)
	}
	if rf, ok := ret.Get(0).(func(*model.GiftCardEvent) *model.GiftCardEvent); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GiftCardEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.GiftCardEvent) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGiftcardEventStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewGiftcardEventStore creates a new instance of GiftcardEventStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGiftcardEventStore(t mockConstructorTestingTNewGiftcardEventStore) *GiftcardEventStore {
	mock := &GiftcardEventStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
