// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	goprices "github.com/site-name/go-prices"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	measurement "github.com/sitename/sitename/modules/measurement"

	mock "github.com/stretchr/testify/mock"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// ShippingMethodStore is an autogenerated mock type for the ShippingMethodStore type
type ShippingMethodStore struct {
	mock.Mock
}

// ApplicableShippingMethods provides a mock function with given fields: price, channelID, weight, countryCode, productIDs
func (_m *ShippingMethodStore) ApplicableShippingMethods(price goprices.Money, channelID string, weight measurement.Weight, countryCode model.CountryCode, productIDs []string) (model.ShippingMethodSlice, error) {
	ret := _m.Called(price, channelID, weight, countryCode, productIDs)

	var r0 model.ShippingMethodSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(goprices.Money, string, measurement.Weight, model.CountryCode, []string) (model.ShippingMethodSlice, error)); ok {
		return rf(price, channelID, weight, countryCode, productIDs)
	}
	if rf, ok := ret.Get(0).(func(goprices.Money, string, measurement.Weight, model.CountryCode, []string) model.ShippingMethodSlice); ok {
		r0 = rf(price, channelID, weight, countryCode, productIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ShippingMethodSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(goprices.Money, string, measurement.Weight, model.CountryCode, []string) error); ok {
		r1 = rf(price, channelID, weight, countryCode, productIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, ids
func (_m *ShippingMethodStore) Delete(tx boil.ContextTransactor, ids []string) error {
	ret := _m.Called(tx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOptions provides a mock function with given fields: options
func (_m *ShippingMethodStore) FilterByOptions(options model_helper.ShippingMethodFilterOption) (model.ShippingMethodSlice, error) {
	ret := _m.Called(options)

	var r0 model.ShippingMethodSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.ShippingMethodFilterOption) (model.ShippingMethodSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.ShippingMethodFilterOption) model.ShippingMethodSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ShippingMethodSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.ShippingMethodFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *ShippingMethodStore) Get(id string) (*model.ShippingMethod, error) {
	ret := _m.Called(id)

	var r0 *model.ShippingMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ShippingMethod, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ShippingMethod); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShippingMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, method
func (_m *ShippingMethodStore) Upsert(tx boil.ContextTransactor, method model.ShippingMethod) (*model.ShippingMethod, error) {
	ret := _m.Called(tx, method)

	var r0 *model.ShippingMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.ShippingMethod) (*model.ShippingMethod, error)); ok {
		return rf(tx, method)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.ShippingMethod) *model.ShippingMethod); ok {
		r0 = rf(tx, method)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShippingMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.ShippingMethod) error); ok {
		r1 = rf(tx, method)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewShippingMethodStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewShippingMethodStore creates a new instance of ShippingMethodStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewShippingMethodStore(t mockConstructorTestingTNewShippingMethodStore) *ShippingMethodStore {
	mock := &ShippingMethodStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
