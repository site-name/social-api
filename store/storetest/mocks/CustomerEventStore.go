// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	squirrel "github.com/Masterminds/squirrel"
)

// CustomerEventStore is an autogenerated mock type for the CustomerEventStore type
type CustomerEventStore struct {
	mock.Mock
}

// Count provides a mock function with given fields:
func (_m *CustomerEventStore) Count() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOptions provides a mock function with given fields: options
func (_m *CustomerEventStore) FilterByOptions(options squirrel.Sqlizer) ([]*model.CustomerEvent, error) {
	ret := _m.Called(options)

	var r0 []*model.CustomerEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(squirrel.Sqlizer) ([]*model.CustomerEvent, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(squirrel.Sqlizer) []*model.CustomerEvent); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CustomerEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(squirrel.Sqlizer) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *CustomerEventStore) Get(id string) (*model.CustomerEvent, error) {
	ret := _m.Called(id)

	var r0 *model.CustomerEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.CustomerEvent, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.CustomerEvent); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CustomerEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: customemrEvent
func (_m *CustomerEventStore) Save(customemrEvent *model.CustomerEvent) (*model.CustomerEvent, error) {
	ret := _m.Called(customemrEvent)

	var r0 *model.CustomerEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.CustomerEvent) (*model.CustomerEvent, error)); ok {
		return rf(customemrEvent)
	}
	if rf, ok := ret.Get(0).(func(*model.CustomerEvent) *model.CustomerEvent); ok {
		r0 = rf(customemrEvent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CustomerEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.CustomerEvent) error); ok {
		r1 = rf(customemrEvent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomerEventStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerEventStore creates a new instance of CustomerEventStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerEventStore(t mockConstructorTestingTNewCustomerEventStore) *CustomerEventStore {
	mock := &CustomerEventStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
