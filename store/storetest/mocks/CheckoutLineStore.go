// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gorp "github.com/mattermost/gorp"
	checkout "github.com/sitename/sitename/model/checkout"

	measurement "github.com/sitename/sitename/modules/measurement"

	mock "github.com/stretchr/testify/mock"

	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
)

// CheckoutLineStore is an autogenerated mock type for the CheckoutLineStore type
type CheckoutLineStore struct {
	mock.Mock
}

// BulkCreate provides a mock function with given fields: checkoutLines
func (_m *CheckoutLineStore) BulkCreate(checkoutLines []*checkout.CheckoutLine) ([]*checkout.CheckoutLine, error) {
	ret := _m.Called(checkoutLines)

	var r0 []*checkout.CheckoutLine
	if rf, ok := ret.Get(0).(func([]*checkout.CheckoutLine) []*checkout.CheckoutLine); ok {
		r0 = rf(checkoutLines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*checkout.CheckoutLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*checkout.CheckoutLine) error); ok {
		r1 = rf(checkoutLines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkUpdate provides a mock function with given fields: checkoutLines
func (_m *CheckoutLineStore) BulkUpdate(checkoutLines []*checkout.CheckoutLine) error {
	ret := _m.Called(checkoutLines)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*checkout.CheckoutLine) error); ok {
		r0 = rf(checkoutLines)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckoutLinesByCheckoutID provides a mock function with given fields: checkoutID
func (_m *CheckoutLineStore) CheckoutLinesByCheckoutID(checkoutID string) ([]*checkout.CheckoutLine, error) {
	ret := _m.Called(checkoutID)

	var r0 []*checkout.CheckoutLine
	if rf, ok := ret.Get(0).(func(string) []*checkout.CheckoutLine); ok {
		r0 = rf(checkoutID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*checkout.CheckoutLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(checkoutID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckoutLinesByCheckoutWithPrefetch provides a mock function with given fields: checkoutID
func (_m *CheckoutLineStore) CheckoutLinesByCheckoutWithPrefetch(checkoutID string) ([]*checkout.CheckoutLine, []*product_and_discount.ProductVariant, []*product_and_discount.Product, error) {
	ret := _m.Called(checkoutID)

	var r0 []*checkout.CheckoutLine
	if rf, ok := ret.Get(0).(func(string) []*checkout.CheckoutLine); ok {
		r0 = rf(checkoutID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*checkout.CheckoutLine)
		}
	}

	var r1 []*product_and_discount.ProductVariant
	if rf, ok := ret.Get(1).(func(string) []*product_and_discount.ProductVariant); ok {
		r1 = rf(checkoutID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*product_and_discount.ProductVariant)
		}
	}

	var r2 []*product_and_discount.Product
	if rf, ok := ret.Get(2).(func(string) []*product_and_discount.Product); ok {
		r2 = rf(checkoutID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*product_and_discount.Product)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(checkoutID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// CheckoutLinesByOption provides a mock function with given fields: option
func (_m *CheckoutLineStore) CheckoutLinesByOption(option *checkout.CheckoutLineFilterOption) ([]*checkout.CheckoutLine, error) {
	ret := _m.Called(option)

	var r0 []*checkout.CheckoutLine
	if rf, ok := ret.Get(0).(func(*checkout.CheckoutLineFilterOption) []*checkout.CheckoutLine); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*checkout.CheckoutLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*checkout.CheckoutLineFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *CheckoutLineStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// DeleteLines provides a mock function with given fields: transaction, checkoutLineIDs
func (_m *CheckoutLineStore) DeleteLines(transaction store_iface.SqlxTxExecutor, checkoutLineIDs []string) error {
	ret := _m.Called(transaction, checkoutLineIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, []string) error); ok {
		r0 = rf(transaction, checkoutLineIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *CheckoutLineStore) Get(id string) (*checkout.CheckoutLine, error) {
	ret := _m.Called(id)

	var r0 *checkout.CheckoutLine
	if rf, ok := ret.Get(0).(func(string) *checkout.CheckoutLine); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*checkout.CheckoutLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *CheckoutLineStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ScanFields provides a mock function with given fields: line
func (_m *CheckoutLineStore) ScanFields(line checkout.CheckoutLine) []interface{} {
	ret := _m.Called(line)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(checkout.CheckoutLine) []interface{}); ok {
		r0 = rf(line)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// TotalWeightForCheckoutLines provides a mock function with given fields: checkoutLineIDs
func (_m *CheckoutLineStore) TotalWeightForCheckoutLines(checkoutLineIDs []string) (*measurement.Weight, error) {
	ret := _m.Called(checkoutLineIDs)

	var r0 *measurement.Weight
	if rf, ok := ret.Get(0).(func([]string) *measurement.Weight); ok {
		r0 = rf(checkoutLineIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*measurement.Weight)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(checkoutLineIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: checkoutLine
func (_m *CheckoutLineStore) Upsert(checkoutLine *checkout.CheckoutLine) (*checkout.CheckoutLine, error) {
	ret := _m.Called(checkoutLine)

	var r0 *checkout.CheckoutLine
	if rf, ok := ret.Get(0).(func(*checkout.CheckoutLine) *checkout.CheckoutLine); ok {
		r0 = rf(checkoutLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*checkout.CheckoutLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*checkout.CheckoutLine) error); ok {
		r1 = rf(checkoutLine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
