// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	measurement "github.com/sitename/sitename/modules/measurement"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	model "github.com/sitename/sitename/model"
)

// CheckoutLineStore is an autogenerated mock type for the CheckoutLineStore type
type CheckoutLineStore struct {
	mock.Mock
}

// BulkCreate provides a mock function with given fields: checkoutLines
func (_m *CheckoutLineStore) BulkCreate(checkoutLines []*model.CheckoutLine) ([]*model.CheckoutLine, error) {
	ret := _m.Called(checkoutLines)

	var r0 []*model.CheckoutLine
	var r1 error
	if rf, ok := ret.Get(0).(func([]*model.CheckoutLine) ([]*model.CheckoutLine, error)); ok {
		return rf(checkoutLines)
	}
	if rf, ok := ret.Get(0).(func([]*model.CheckoutLine) []*model.CheckoutLine); ok {
		r0 = rf(checkoutLines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CheckoutLine)
		}
	}

	if rf, ok := ret.Get(1).(func([]*model.CheckoutLine) error); ok {
		r1 = rf(checkoutLines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkUpdate provides a mock function with given fields: checkoutLines
func (_m *CheckoutLineStore) BulkUpdate(checkoutLines []*model.CheckoutLine) error {
	ret := _m.Called(checkoutLines)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*model.CheckoutLine) error); ok {
		r0 = rf(checkoutLines)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckoutLinesByCheckoutWithPrefetch provides a mock function with given fields: checkoutID
func (_m *CheckoutLineStore) CheckoutLinesByCheckoutWithPrefetch(checkoutID string) ([]*model.CheckoutLine, []*model.ProductVariant, []*model.Product, error) {
	ret := _m.Called(checkoutID)

	var r0 []*model.CheckoutLine
	var r1 []*model.ProductVariant
	var r2 []*model.Product
	var r3 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.CheckoutLine, []*model.ProductVariant, []*model.Product, error)); ok {
		return rf(checkoutID)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.CheckoutLine); ok {
		r0 = rf(checkoutID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CheckoutLine)
		}
	}

	if rf, ok := ret.Get(1).(func(string) []*model.ProductVariant); ok {
		r1 = rf(checkoutID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.ProductVariant)
		}
	}

	if rf, ok := ret.Get(2).(func(string) []*model.Product); ok {
		r2 = rf(checkoutID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*model.Product)
		}
	}

	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(checkoutID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// CheckoutLinesByOption provides a mock function with given fields: option
func (_m *CheckoutLineStore) CheckoutLinesByOption(option *model.CheckoutLineFilterOption) ([]*model.CheckoutLine, error) {
	ret := _m.Called(option)

	var r0 []*model.CheckoutLine
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.CheckoutLineFilterOption) ([]*model.CheckoutLine, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.CheckoutLineFilterOption) []*model.CheckoutLine); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CheckoutLine)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.CheckoutLineFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLines provides a mock function with given fields: transaction, checkoutLineIDs
func (_m *CheckoutLineStore) DeleteLines(transaction *gorm.DB, checkoutLineIDs []string) error {
	ret := _m.Called(transaction, checkoutLineIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) error); ok {
		r0 = rf(transaction, checkoutLineIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *CheckoutLineStore) Get(id string) (*model.CheckoutLine, error) {
	ret := _m.Called(id)

	var r0 *model.CheckoutLine
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.CheckoutLine, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.CheckoutLine); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CheckoutLine)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: line
func (_m *CheckoutLineStore) ScanFields(line *model.CheckoutLine) []interface{} {
	ret := _m.Called(line)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.CheckoutLine) []interface{}); ok {
		r0 = rf(line)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// TotalWeightForCheckoutLines provides a mock function with given fields: checkoutLineIDs
func (_m *CheckoutLineStore) TotalWeightForCheckoutLines(checkoutLineIDs []string) (*measurement.Weight, error) {
	ret := _m.Called(checkoutLineIDs)

	var r0 *measurement.Weight
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (*measurement.Weight, error)); ok {
		return rf(checkoutLineIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) *measurement.Weight); ok {
		r0 = rf(checkoutLineIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*measurement.Weight)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(checkoutLineIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: checkoutLine
func (_m *CheckoutLineStore) Upsert(checkoutLine *model.CheckoutLine) (*model.CheckoutLine, error) {
	ret := _m.Called(checkoutLine)

	var r0 *model.CheckoutLine
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.CheckoutLine) (*model.CheckoutLine, error)); ok {
		return rf(checkoutLine)
	}
	if rf, ok := ret.Get(0).(func(*model.CheckoutLine) *model.CheckoutLine); ok {
		r0 = rf(checkoutLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CheckoutLine)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.CheckoutLine) error); ok {
		r1 = rf(checkoutLine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCheckoutLineStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheckoutLineStore creates a new instance of CheckoutLineStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheckoutLineStore(t mockConstructorTestingTNewCheckoutLineStore) *CheckoutLineStore {
	mock := &CheckoutLineStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
