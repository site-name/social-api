// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	measurement "github.com/sitename/sitename/modules/measurement"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	mock "github.com/stretchr/testify/mock"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// CheckoutLineStore is an autogenerated mock type for the CheckoutLineStore type
type CheckoutLineStore struct {
	mock.Mock
}

// CheckoutLinesByOption provides a mock function with given fields: option
func (_m *CheckoutLineStore) CheckoutLinesByOption(option model_helper.CheckoutLineFilterOptions) (model.CheckoutLineSlice, error) {
	ret := _m.Called(option)

	var r0 model.CheckoutLineSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.CheckoutLineFilterOptions) (model.CheckoutLineSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.CheckoutLineFilterOptions) model.CheckoutLineSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CheckoutLineSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.CheckoutLineFilterOptions) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLines provides a mock function with given fields: tx, checkoutLineIDs
func (_m *CheckoutLineStore) DeleteLines(tx boil.ContextTransactor, checkoutLineIDs []string) error {
	ret := _m.Called(tx, checkoutLineIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, checkoutLineIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *CheckoutLineStore) Get(id string) (*model.CheckoutLine, error) {
	ret := _m.Called(id)

	var r0 *model.CheckoutLine
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.CheckoutLine, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.CheckoutLine); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CheckoutLine)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalWeightForCheckoutLines provides a mock function with given fields: checkoutLineIDs
func (_m *CheckoutLineStore) TotalWeightForCheckoutLines(checkoutLineIDs []string) (*measurement.Weight, error) {
	ret := _m.Called(checkoutLineIDs)

	var r0 *measurement.Weight
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (*measurement.Weight, error)); ok {
		return rf(checkoutLineIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) *measurement.Weight); ok {
		r0 = rf(checkoutLineIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*measurement.Weight)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(checkoutLineIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: checkoutLines
func (_m *CheckoutLineStore) Upsert(checkoutLines model.CheckoutLineSlice) (model.CheckoutLineSlice, error) {
	ret := _m.Called(checkoutLines)

	var r0 model.CheckoutLineSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model.CheckoutLineSlice) (model.CheckoutLineSlice, error)); ok {
		return rf(checkoutLines)
	}
	if rf, ok := ret.Get(0).(func(model.CheckoutLineSlice) model.CheckoutLineSlice); ok {
		r0 = rf(checkoutLines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CheckoutLineSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model.CheckoutLineSlice) error); ok {
		r1 = rf(checkoutLines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCheckoutLineStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheckoutLineStore creates a new instance of CheckoutLineStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheckoutLineStore(t mockConstructorTestingTNewCheckoutLineStore) *CheckoutLineStore {
	mock := &CheckoutLineStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
