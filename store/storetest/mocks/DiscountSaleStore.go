// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// DiscountSaleStore is an autogenerated mock type for the DiscountSaleStore type
type DiscountSaleStore struct {
	mock.Mock
}

// FilterSalesByOption provides a mock function with given fields: option
func (_m *DiscountSaleStore) FilterSalesByOption(option *product_and_discount.SaleFilterOption) ([]*product_and_discount.Sale, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.Sale
	if rf, ok := ret.Get(0).(func(*product_and_discount.SaleFilterOption) []*product_and_discount.Sale); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Sale)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.SaleFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: saleID
func (_m *DiscountSaleStore) Get(saleID string) (*product_and_discount.Sale, error) {
	ret := _m.Called(saleID)

	var r0 *product_and_discount.Sale
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.Sale); ok {
		r0 = rf(saleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Sale)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(saleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: sale
func (_m *DiscountSaleStore) Upsert(sale *product_and_discount.Sale) (*product_and_discount.Sale, error) {
	ret := _m.Called(sale)

	var r0 *product_and_discount.Sale
	if rf, ok := ret.Get(0).(func(*product_and_discount.Sale) *product_and_discount.Sale); ok {
		r0 = rf(sale)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Sale)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.Sale) error); ok {
		r1 = rf(sale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
