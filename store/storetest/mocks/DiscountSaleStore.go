// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// DiscountSaleStore is an autogenerated mock type for the DiscountSaleStore type
type DiscountSaleStore struct {
	mock.Mock
}

// ToggleSaleRelations provides a mock function with given fields: transaction, sales, relations
func (_m *DiscountSaleStore) ToggleSaleRelations(transaction *gorm.DB, sales model.Sales, relations interface{}) error {
	ret := _m.Called(transaction, sales, relations)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.Sales, interface{}) error); ok {
		r0 = rf(transaction, sales, relations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterSalesByOption provides a mock function with given fields: option
func (_m *DiscountSaleStore) FilterSalesByOption(option *model.SaleFilterOption) ([]*model.Sale, error) {
	ret := _m.Called(option)

	var r0 []*model.Sale
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.SaleFilterOption) ([]*model.Sale, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.SaleFilterOption) []*model.Sale); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Sale)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.SaleFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: saleID
func (_m *DiscountSaleStore) Get(saleID string) (*model.Sale, error) {
	ret := _m.Called(saleID)

	var r0 *model.Sale
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Sale, error)); ok {
		return rf(saleID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Sale); ok {
		r0 = rf(saleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Sale)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(saleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: transaction, sale
func (_m *DiscountSaleStore) Upsert(transaction *gorm.DB, sale *model.Sale) (*model.Sale, error) {
	ret := _m.Called(transaction, sale)

	var r0 *model.Sale
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Sale) (*model.Sale, error)); ok {
		return rf(transaction, sale)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Sale) *model.Sale); ok {
		r0 = rf(transaction, sale)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Sale)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Sale) error); ok {
		r1 = rf(transaction, sale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDiscountSaleStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscountSaleStore creates a new instance of DiscountSaleStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscountSaleStore(t mockConstructorTestingTNewDiscountSaleStore) *DiscountSaleStore {
	mock := &DiscountSaleStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
