// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// DiscountSaleStore is an autogenerated mock type for the DiscountSaleStore type
type DiscountSaleStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: tx, ids
func (_m *DiscountSaleStore) Delete(tx boil.ContextTransactor, ids []string) (int64, error) {
	ret := _m.Called(tx, ids)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) (int64, error)); ok {
		return rf(tx, ids)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) int64); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, []string) error); ok {
		r1 = rf(tx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterSalesByOption provides a mock function with given fields: option
func (_m *DiscountSaleStore) FilterSalesByOption(option model_helper.SaleFilterOption) (model_helper.CustomSaleSlice, error) {
	ret := _m.Called(option)

	var r0 model_helper.CustomSaleSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.SaleFilterOption) (model_helper.CustomSaleSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.SaleFilterOption) model_helper.CustomSaleSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model_helper.CustomSaleSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.SaleFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: saleID
func (_m *DiscountSaleStore) Get(saleID string) (*model.Sale, error) {
	ret := _m.Called(saleID)

	var r0 *model.Sale
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Sale, error)); ok {
		return rf(saleID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Sale); ok {
		r0 = rf(saleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Sale)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(saleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, sale
func (_m *DiscountSaleStore) Upsert(tx boil.ContextTransactor, sale model.Sale) (*model.Sale, error) {
	ret := _m.Called(tx, sale)

	var r0 *model.Sale
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.Sale) (*model.Sale, error)); ok {
		return rf(tx, sale)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.Sale) *model.Sale); ok {
		r0 = rf(tx, sale)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Sale)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.Sale) error); ok {
		r1 = rf(tx, sale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDiscountSaleStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscountSaleStore creates a new instance of DiscountSaleStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscountSaleStore(t mockConstructorTestingTNewDiscountSaleStore) *DiscountSaleStore {
	mock := &DiscountSaleStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
