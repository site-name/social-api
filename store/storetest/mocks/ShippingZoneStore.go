// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ShippingZoneStore is an autogenerated mock type for the ShippingZoneStore type
type ShippingZoneStore struct {
	mock.Mock
}

// CountByOptions provides a mock function with given fields: options
func (_m *ShippingZoneStore) CountByOptions(options *model.ShippingZoneFilterOption) (int64, error) {
	ret := _m.Called(options)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ShippingZoneFilterOption) (int64, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.ShippingZoneFilterOption) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.ShippingZoneFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: transaction, conditions
func (_m *ShippingZoneStore) Delete(transaction *gorm.DB, conditions *model.ShippingZoneFilterOption) (int64, error) {
	ret := _m.Called(transaction, conditions)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ShippingZoneFilterOption) (int64, error)); ok {
		return rf(transaction, conditions)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ShippingZoneFilterOption) int64); ok {
		r0 = rf(transaction, conditions)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.ShippingZoneFilterOption) error); ok {
		r1 = rf(transaction, conditions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *ShippingZoneStore) FilterByOption(option *model.ShippingZoneFilterOption) ([]*model.ShippingZone, error) {
	ret := _m.Called(option)

	var r0 []*model.ShippingZone
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ShippingZoneFilterOption) ([]*model.ShippingZone, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.ShippingZoneFilterOption) []*model.ShippingZone); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ShippingZone)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ShippingZoneFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: shippingZoneID
func (_m *ShippingZoneStore) Get(shippingZoneID string) (*model.ShippingZone, error) {
	ret := _m.Called(shippingZoneID)

	var r0 *model.ShippingZone
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ShippingZone, error)); ok {
		return rf(shippingZoneID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ShippingZone); ok {
		r0 = rf(shippingZoneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShippingZone)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shippingZoneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: shippingZone
func (_m *ShippingZoneStore) ScanFields(shippingZone *model.ShippingZone) []interface{} {
	ret := _m.Called(shippingZone)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.ShippingZone) []interface{}); ok {
		r0 = rf(shippingZone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// ToggleRelations provides a mock function with given fields: transaction, zones, warehouseIds, channelIds, delete
func (_m *ShippingZoneStore) ToggleRelations(transaction *gorm.DB, zones model.ShippingZones, warehouseIds []string, channelIds []string, delete bool) error {
	ret := _m.Called(transaction, zones, warehouseIds, channelIds, delete)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.ShippingZones, []string, []string, bool) error); ok {
		r0 = rf(transaction, zones, warehouseIds, channelIds, delete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: transaction, shippingZone
func (_m *ShippingZoneStore) Upsert(transaction *gorm.DB, shippingZone *model.ShippingZone) (*model.ShippingZone, error) {
	ret := _m.Called(transaction, shippingZone)

	var r0 *model.ShippingZone
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ShippingZone) (*model.ShippingZone, error)); ok {
		return rf(transaction, shippingZone)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ShippingZone) *model.ShippingZone); ok {
		r0 = rf(transaction, shippingZone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShippingZone)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.ShippingZone) error); ok {
		r1 = rf(transaction, shippingZone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewShippingZoneStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewShippingZoneStore creates a new instance of ShippingZoneStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewShippingZoneStore(t mockConstructorTestingTNewShippingZoneStore) *ShippingZoneStore {
	mock := &ShippingZoneStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
