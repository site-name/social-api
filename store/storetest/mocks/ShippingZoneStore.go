// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	shipping "github.com/sitename/sitename/model/shipping"
)

// ShippingZoneStore is an autogenerated mock type for the ShippingZoneStore type
type ShippingZoneStore struct {
	mock.Mock
}

// FilterByOption provides a mock function with given fields: option
func (_m *ShippingZoneStore) FilterByOption(option *shipping.ShippingZoneFilterOption) ([]*shipping.ShippingZone, error) {
	ret := _m.Called(option)

	var r0 []*shipping.ShippingZone
	if rf, ok := ret.Get(0).(func(*shipping.ShippingZoneFilterOption) []*shipping.ShippingZone); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*shipping.ShippingZone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shipping.ShippingZoneFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: shippingZoneID
func (_m *ShippingZoneStore) Get(shippingZoneID string) (*shipping.ShippingZone, error) {
	ret := _m.Called(shippingZoneID)

	var r0 *shipping.ShippingZone
	if rf, ok := ret.Get(0).(func(string) *shipping.ShippingZone); ok {
		r0 = rf(shippingZoneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shipping.ShippingZone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shippingZoneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *ShippingZoneStore) ModelFields(prefix string) model.AnyArray[string] {
	ret := _m.Called(prefix)

	var r0 model.AnyArray[string]
	if rf, ok := ret.Get(0).(func(string) model.AnyArray[string]); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AnyArray[string])
		}
	}

	return r0
}

// ScanFields provides a mock function with given fields: shippingZone
func (_m *ShippingZoneStore) ScanFields(shippingZone shipping.ShippingZone) []interface{} {
	ret := _m.Called(shippingZone)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(shipping.ShippingZone) []interface{}); ok {
		r0 = rf(shippingZone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: shippingZone
func (_m *ShippingZoneStore) Upsert(shippingZone *shipping.ShippingZone) (*shipping.ShippingZone, error) {
	ret := _m.Called(shippingZone)

	var r0 *shipping.ShippingZone
	if rf, ok := ret.Get(0).(func(*shipping.ShippingZone) *shipping.ShippingZone); ok {
		r0 = rf(shippingZone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shipping.ShippingZone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shipping.ShippingZone) error); ok {
		r1 = rf(shippingZone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
