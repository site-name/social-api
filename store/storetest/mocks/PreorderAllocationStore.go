// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// PreorderAllocationStore is an autogenerated mock type for the PreorderAllocationStore type
type PreorderAllocationStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: tx, ids
func (_m *PreorderAllocationStore) Delete(tx boil.ContextTransactor, ids []string) error {
	ret := _m.Called(tx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: options
func (_m *PreorderAllocationStore) FilterByOption(options model_helper.PreorderAllocationFilterOption) (model.PreorderAllocationSlice, error) {
	ret := _m.Called(options)

	var r0 model.PreorderAllocationSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.PreorderAllocationFilterOption) (model.PreorderAllocationSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.PreorderAllocationFilterOption) model.PreorderAllocationSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.PreorderAllocationSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.PreorderAllocationFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, preorderAllocations
func (_m *PreorderAllocationStore) Upsert(tx boil.ContextTransactor, preorderAllocations model.PreorderAllocationSlice) (model.PreorderAllocationSlice, error) {
	ret := _m.Called(tx, preorderAllocations)

	var r0 model.PreorderAllocationSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.PreorderAllocationSlice) (model.PreorderAllocationSlice, error)); ok {
		return rf(tx, preorderAllocations)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.PreorderAllocationSlice) model.PreorderAllocationSlice); ok {
		r0 = rf(tx, preorderAllocations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.PreorderAllocationSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.PreorderAllocationSlice) error); ok {
		r1 = rf(tx, preorderAllocations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPreorderAllocationStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewPreorderAllocationStore creates a new instance of PreorderAllocationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPreorderAllocationStore(t mockConstructorTestingTNewPreorderAllocationStore) *PreorderAllocationStore {
	mock := &PreorderAllocationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
