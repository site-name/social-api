// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// PreorderAllocationStore is an autogenerated mock type for the PreorderAllocationStore type
type PreorderAllocationStore struct {
	mock.Mock
}

// BulkCreate provides a mock function with given fields: transaction, preorderAllocations
func (_m *PreorderAllocationStore) BulkCreate(transaction *gorm.DB, preorderAllocations []*model.PreorderAllocation) ([]*model.PreorderAllocation, error) {
	ret := _m.Called(transaction, preorderAllocations)

	var r0 []*model.PreorderAllocation
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.PreorderAllocation) ([]*model.PreorderAllocation, error)); ok {
		return rf(transaction, preorderAllocations)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.PreorderAllocation) []*model.PreorderAllocation); ok {
		r0 = rf(transaction, preorderAllocations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PreorderAllocation)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.PreorderAllocation) error); ok {
		r1 = rf(transaction, preorderAllocations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: transaction, preorderAllocationIDs
func (_m *PreorderAllocationStore) Delete(transaction *gorm.DB, preorderAllocationIDs ...string) error {
	_va := make([]interface{}, len(preorderAllocationIDs))
	for _i := range preorderAllocationIDs {
		_va[_i] = preorderAllocationIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, transaction)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...string) error); ok {
		r0 = rf(transaction, preorderAllocationIDs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: options
func (_m *PreorderAllocationStore) FilterByOption(options *model.PreorderAllocationFilterOption) ([]*model.PreorderAllocation, error) {
	ret := _m.Called(options)

	var r0 []*model.PreorderAllocation
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.PreorderAllocationFilterOption) ([]*model.PreorderAllocation, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.PreorderAllocationFilterOption) []*model.PreorderAllocation); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PreorderAllocation)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.PreorderAllocationFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: preorderAllocation
func (_m *PreorderAllocationStore) ScanFields(preorderAllocation *model.PreorderAllocation) []interface{} {
	ret := _m.Called(preorderAllocation)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.PreorderAllocation) []interface{}); ok {
		r0 = rf(preorderAllocation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewPreorderAllocationStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewPreorderAllocationStore creates a new instance of PreorderAllocationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPreorderAllocationStore(t mockConstructorTestingTNewPreorderAllocationStore) *PreorderAllocationStore {
	mock := &PreorderAllocationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
