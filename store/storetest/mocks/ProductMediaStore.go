// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// ProductMediaStore is an autogenerated mock type for the ProductMediaStore type
type ProductMediaStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: tx, ids
func (_m *ProductMediaStore) Delete(tx boil.ContextTransactor, ids []string) (int64, error) {
	ret := _m.Called(tx, ids)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) (int64, error)); ok {
		return rf(tx, ids)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) int64); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, []string) error); ok {
		r1 = rf(tx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductMediaStore) FilterByOption(option model_helper.ProductMediaFilterOption) (model.ProductMediumSlice, error) {
	ret := _m.Called(option)

	var r0 model.ProductMediumSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.ProductMediaFilterOption) (model.ProductMediumSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.ProductMediaFilterOption) model.ProductMediumSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductMediumSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.ProductMediaFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *ProductMediaStore) Get(id string) (*model.ProductMedium, error) {
	ret := _m.Called(id)

	var r0 *model.ProductMedium
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductMedium, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductMedium); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductMedium)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, medias
func (_m *ProductMediaStore) Upsert(tx boil.ContextTransactor, medias model.ProductMediumSlice) (model.ProductMediumSlice, error) {
	ret := _m.Called(tx, medias)

	var r0 model.ProductMediumSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.ProductMediumSlice) (model.ProductMediumSlice, error)); ok {
		return rf(tx, medias)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.ProductMediumSlice) model.ProductMediumSlice); ok {
		r0 = rf(tx, medias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductMediumSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.ProductMediumSlice) error); ok {
		r1 = rf(tx, medias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductMediaStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductMediaStore creates a new instance of ProductMediaStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductMediaStore(t mockConstructorTestingTNewProductMediaStore) *ProductMediaStore {
	mock := &ProductMediaStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
