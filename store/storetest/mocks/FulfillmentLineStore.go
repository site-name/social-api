// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// FulfillmentLineStore is an autogenerated mock type for the FulfillmentLineStore type
type FulfillmentLineStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, fulfillmentLines
func (_m *FulfillmentLineStore) BulkUpsert(transaction *gorm.DB, fulfillmentLines []*model.FulfillmentLine) ([]*model.FulfillmentLine, error) {
	ret := _m.Called(transaction, fulfillmentLines)

	var r0 []*model.FulfillmentLine
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.FulfillmentLine) ([]*model.FulfillmentLine, error)); ok {
		return rf(transaction, fulfillmentLines)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.FulfillmentLine) []*model.FulfillmentLine); ok {
		r0 = rf(transaction, fulfillmentLines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FulfillmentLine)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.FulfillmentLine) error); ok {
		r1 = rf(transaction, fulfillmentLines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFulfillmentLinesByOption provides a mock function with given fields: transaction, option
func (_m *FulfillmentLineStore) DeleteFulfillmentLinesByOption(transaction *gorm.DB, option *model.FulfillmentLineFilterOption) error {
	ret := _m.Called(transaction, option)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.FulfillmentLineFilterOption) error); ok {
		r0 = rf(transaction, option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterbyOption provides a mock function with given fields: option
func (_m *FulfillmentLineStore) FilterbyOption(option *model.FulfillmentLineFilterOption) ([]*model.FulfillmentLine, error) {
	ret := _m.Called(option)

	var r0 []*model.FulfillmentLine
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.FulfillmentLineFilterOption) ([]*model.FulfillmentLine, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.FulfillmentLineFilterOption) []*model.FulfillmentLine); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.FulfillmentLine)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.FulfillmentLineFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *FulfillmentLineStore) Get(id string) (*model.FulfillmentLine, error) {
	ret := _m.Called(id)

	var r0 *model.FulfillmentLine
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.FulfillmentLine, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.FulfillmentLine); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FulfillmentLine)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: fulfillmentLine
func (_m *FulfillmentLineStore) Save(fulfillmentLine *model.FulfillmentLine) (*model.FulfillmentLine, error) {
	ret := _m.Called(fulfillmentLine)

	var r0 *model.FulfillmentLine
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.FulfillmentLine) (*model.FulfillmentLine, error)); ok {
		return rf(fulfillmentLine)
	}
	if rf, ok := ret.Get(0).(func(*model.FulfillmentLine) *model.FulfillmentLine); ok {
		r0 = rf(fulfillmentLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FulfillmentLine)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.FulfillmentLine) error); ok {
		r1 = rf(fulfillmentLine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFulfillmentLineStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewFulfillmentLineStore creates a new instance of FulfillmentLineStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFulfillmentLineStore(t mockConstructorTestingTNewFulfillmentLineStore) *FulfillmentLineStore {
	mock := &FulfillmentLineStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
