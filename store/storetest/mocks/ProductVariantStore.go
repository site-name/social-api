// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	measurement "github.com/sitename/sitename/modules/measurement"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	model "github.com/sitename/sitename/model"
)

// ProductVariantStore is an autogenerated mock type for the ProductVariantStore type
type ProductVariantStore struct {
	mock.Mock
}

// AddProductVariantMedias provides a mock function with given fields: transaction, variants, medias
func (_m *ProductVariantStore) AddProductVariantMedias(transaction *gorm.DB, variants model.ProductVariants, medias model.ProductMedias) error {
	ret := _m.Called(transaction, variants, medias)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.ProductVariants, model.ProductMedias) error); ok {
		r0 = rf(transaction, variants, medias)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductVariantStore) FilterByOption(option *model.ProductVariantFilterOption) ([]*model.ProductVariant, error) {
	ret := _m.Called(option)

	var r0 []*model.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductVariantFilterOption) ([]*model.ProductVariant, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductVariantFilterOption) []*model.ProductVariant); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductVariantFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *ProductVariantStore) Get(id string) (*model.ProductVariant, error) {
	ret := _m.Called(id)

	var r0 *model.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductVariant, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductVariant); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderLineID provides a mock function with given fields: orderLineID
func (_m *ProductVariantStore) GetByOrderLineID(orderLineID string) (*model.ProductVariant, error) {
	ret := _m.Called(orderLineID)

	var r0 *model.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductVariant, error)); ok {
		return rf(orderLineID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductVariant); ok {
		r0 = rf(orderLineID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderLineID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeight provides a mock function with given fields: productVariantID
func (_m *ProductVariantStore) GetWeight(productVariantID string) (*measurement.Weight, error) {
	ret := _m.Called(productVariantID)

	var r0 *measurement.Weight
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*measurement.Weight, error)); ok {
		return rf(productVariantID)
	}
	if rf, ok := ret.Get(0).(func(string) *measurement.Weight); ok {
		r0 = rf(productVariantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*measurement.Weight)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productVariantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: transaction, variant
func (_m *ProductVariantStore) Save(transaction *gorm.DB, variant *model.ProductVariant) (*model.ProductVariant, error) {
	ret := _m.Called(transaction, variant)

	var r0 *model.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ProductVariant) (*model.ProductVariant, error)); ok {
		return rf(transaction, variant)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ProductVariant) *model.ProductVariant); ok {
		r0 = rf(transaction, variant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.ProductVariant) error); ok {
		r1 = rf(transaction, variant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: variant
func (_m *ProductVariantStore) ScanFields(variant *model.ProductVariant) []interface{} {
	ret := _m.Called(variant)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.ProductVariant) []interface{}); ok {
		r0 = rf(variant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Update provides a mock function with given fields: transaction, variant
func (_m *ProductVariantStore) Update(transaction *gorm.DB, variant *model.ProductVariant) (*model.ProductVariant, error) {
	ret := _m.Called(transaction, variant)

	var r0 *model.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ProductVariant) (*model.ProductVariant, error)); ok {
		return rf(transaction, variant)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ProductVariant) *model.ProductVariant); ok {
		r0 = rf(transaction, variant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.ProductVariant) error); ok {
		r1 = rf(transaction, variant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductVariantStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductVariantStore creates a new instance of ProductVariantStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductVariantStore(t mockConstructorTestingTNewProductVariantStore) *ProductVariantStore {
	mock := &ProductVariantStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
