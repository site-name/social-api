// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	measurement "github.com/sitename/sitename/modules/measurement"
	mock "github.com/stretchr/testify/mock"

	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
)

// ProductVariantStore is an autogenerated mock type for the ProductVariantStore type
type ProductVariantStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *ProductVariantStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductVariantStore) FilterByOption(option *product_and_discount.ProductVariantFilterOption) ([]*product_and_discount.ProductVariant, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.ProductVariant
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductVariantFilterOption) []*product_and_discount.ProductVariant); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.ProductVariant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductVariantFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *ProductVariantStore) Get(id string) (*product_and_discount.ProductVariant, error) {
	ret := _m.Called(id)

	var r0 *product_and_discount.ProductVariant
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.ProductVariant); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.ProductVariant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderLineID provides a mock function with given fields: orderLineID
func (_m *ProductVariantStore) GetByOrderLineID(orderLineID string) (*product_and_discount.ProductVariant, error) {
	ret := _m.Called(orderLineID)

	var r0 *product_and_discount.ProductVariant
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.ProductVariant); ok {
		r0 = rf(orderLineID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.ProductVariant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderLineID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeight provides a mock function with given fields: productVariantID
func (_m *ProductVariantStore) GetWeight(productVariantID string) (*measurement.Weight, error) {
	ret := _m.Called(productVariantID)

	var r0 *measurement.Weight
	if rf, ok := ret.Get(0).(func(string) *measurement.Weight); ok {
		r0 = rf(productVariantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*measurement.Weight)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productVariantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *ProductVariantStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Save provides a mock function with given fields: variant
func (_m *ProductVariantStore) Save(variant *product_and_discount.ProductVariant) (*product_and_discount.ProductVariant, error) {
	ret := _m.Called(variant)

	var r0 *product_and_discount.ProductVariant
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductVariant) *product_and_discount.ProductVariant); ok {
		r0 = rf(variant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.ProductVariant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductVariant) error); ok {
		r1 = rf(variant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
