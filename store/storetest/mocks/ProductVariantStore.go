// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	measurement "github.com/sitename/sitename/modules/measurement"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	mock "github.com/stretchr/testify/mock"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// ProductVariantStore is an autogenerated mock type for the ProductVariantStore type
type ProductVariantStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: tx, ids
func (_m *ProductVariantStore) Delete(tx boil.ContextTransactor, ids []string) (int64, error) {
	ret := _m.Called(tx, ids)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) (int64, error)); ok {
		return rf(tx, ids)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) int64); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, []string) error); ok {
		r1 = rf(tx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductVariantStore) FilterByOption(option model_helper.ProductVariantFilterOptions) (model.ProductVariantSlice, error) {
	ret := _m.Called(option)

	var r0 model.ProductVariantSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.ProductVariantFilterOptions) (model.ProductVariantSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.ProductVariantFilterOptions) model.ProductVariantSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductVariantSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.ProductVariantFilterOptions) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVariantsAvailableForPurchase provides a mock function with given fields: variantIds, channelID
func (_m *ProductVariantStore) FindVariantsAvailableForPurchase(variantIds []string, channelID string) (model.ProductVariantSlice, error) {
	ret := _m.Called(variantIds, channelID)

	var r0 model.ProductVariantSlice
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, string) (model.ProductVariantSlice, error)); ok {
		return rf(variantIds, channelID)
	}
	if rf, ok := ret.Get(0).(func([]string, string) model.ProductVariantSlice); ok {
		r0 = rf(variantIds, channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductVariantSlice)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(variantIds, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *ProductVariantStore) Get(id string) (*model.ProductVariant, error) {
	ret := _m.Called(id)

	var r0 *model.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductVariant, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductVariant); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOrderLineID provides a mock function with given fields: orderLineID
func (_m *ProductVariantStore) GetByOrderLineID(orderLineID string) (*model.ProductVariant, error) {
	ret := _m.Called(orderLineID)

	var r0 *model.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductVariant, error)); ok {
		return rf(orderLineID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductVariant); ok {
		r0 = rf(orderLineID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderLineID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeight provides a mock function with given fields: productVariantID
func (_m *ProductVariantStore) GetWeight(productVariantID string) (*measurement.Weight, error) {
	ret := _m.Called(productVariantID)

	var r0 *measurement.Weight
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*measurement.Weight, error)); ok {
		return rf(productVariantID)
	}
	if rf, ok := ret.Get(0).(func(string) *measurement.Weight); ok {
		r0 = rf(productVariantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*measurement.Weight)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productVariantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, variant
func (_m *ProductVariantStore) Upsert(tx boil.ContextTransactor, variant model.ProductVariant) (*model.ProductVariant, error) {
	ret := _m.Called(tx, variant)

	var r0 *model.ProductVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.ProductVariant) (*model.ProductVariant, error)); ok {
		return rf(tx, variant)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.ProductVariant) *model.ProductVariant); ok {
		r0 = rf(tx, variant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.ProductVariant) error); ok {
		r1 = rf(tx, variant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductVariantStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductVariantStore creates a new instance of ProductVariantStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductVariantStore(t mockConstructorTestingTNewProductVariantStore) *ProductVariantStore {
	mock := &ProductVariantStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
