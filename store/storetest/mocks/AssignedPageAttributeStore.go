// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	model_helper "github.com/sitename/sitename/model_helper"
)

// AssignedPageAttributeStore is an autogenerated mock type for the AssignedPageAttributeStore type
type AssignedPageAttributeStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *AssignedPageAttributeStore) FilterByOptions(options model_helper.AssignedPageAttributeFilterOption) (model.AssignedPageAttributeSlice, error) {
	ret := _m.Called(options)

	var r0 model.AssignedPageAttributeSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.AssignedPageAttributeFilterOption) (model.AssignedPageAttributeSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.AssignedPageAttributeFilterOption) model.AssignedPageAttributeSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AssignedPageAttributeSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.AssignedPageAttributeFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *AssignedPageAttributeStore) Get(id string) (*model.AssignedPageAttribute, error) {
	ret := _m.Called(id)

	var r0 *model.AssignedPageAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AssignedPageAttribute, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AssignedPageAttribute); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedPageAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: assignedPageAttr
func (_m *AssignedPageAttributeStore) Upsert(assignedPageAttr model.AssignedPageAttribute) (*model.AssignedPageAttribute, error) {
	ret := _m.Called(assignedPageAttr)

	var r0 *model.AssignedPageAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AssignedPageAttribute) (*model.AssignedPageAttribute, error)); ok {
		return rf(assignedPageAttr)
	}
	if rf, ok := ret.Get(0).(func(model.AssignedPageAttribute) *model.AssignedPageAttribute); ok {
		r0 = rf(assignedPageAttr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedPageAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AssignedPageAttribute) error); ok {
		r1 = rf(assignedPageAttr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAssignedPageAttributeStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAssignedPageAttributeStore creates a new instance of AssignedPageAttributeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAssignedPageAttributeStore(t mockConstructorTestingTNewAssignedPageAttributeStore) *AssignedPageAttributeStore {
	mock := &AssignedPageAttributeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
