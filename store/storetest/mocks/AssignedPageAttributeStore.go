// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	attribute "github.com/sitename/sitename/model/attribute"
	mock "github.com/stretchr/testify/mock"
)

// AssignedPageAttributeStore is an autogenerated mock type for the AssignedPageAttributeStore type
type AssignedPageAttributeStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *AssignedPageAttributeStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: id
func (_m *AssignedPageAttributeStore) Get(id string) (*attribute.AssignedPageAttribute, error) {
	ret := _m.Called(id)

	var r0 *attribute.AssignedPageAttribute
	if rf, ok := ret.Get(0).(func(string) *attribute.AssignedPageAttribute); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AssignedPageAttribute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *AssignedPageAttributeStore) GetByOption(option *attribute.AssignedPageAttributeFilterOption) (*attribute.AssignedPageAttribute, error) {
	ret := _m.Called(option)

	var r0 *attribute.AssignedPageAttribute
	if rf, ok := ret.Get(0).(func(*attribute.AssignedPageAttributeFilterOption) *attribute.AssignedPageAttribute); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AssignedPageAttribute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AssignedPageAttributeFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: assignedPageAttr
func (_m *AssignedPageAttributeStore) Save(assignedPageAttr *attribute.AssignedPageAttribute) (*attribute.AssignedPageAttribute, error) {
	ret := _m.Called(assignedPageAttr)

	var r0 *attribute.AssignedPageAttribute
	if rf, ok := ret.Get(0).(func(*attribute.AssignedPageAttribute) *attribute.AssignedPageAttribute); ok {
		r0 = rf(assignedPageAttr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AssignedPageAttribute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AssignedPageAttribute) error); ok {
		r1 = rf(assignedPageAttr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
