// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// PluginConfigurationStore is an autogenerated mock type for the PluginConfigurationStore type
type PluginConfigurationStore struct {
	mock.Mock
}

// FilterPluginConfigurations provides a mock function with given fields: options
func (_m *PluginConfigurationStore) FilterPluginConfigurations(options model.PluginConfigurationFilterOptions) ([]*model.PluginConfiguration, error) {
	ret := _m.Called(options)

	var r0 []*model.PluginConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(model.PluginConfigurationFilterOptions) ([]*model.PluginConfiguration, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model.PluginConfigurationFilterOptions) []*model.PluginConfiguration); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PluginConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(model.PluginConfigurationFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *PluginConfigurationStore) Get(id string) (*model.PluginConfiguration, error) {
	ret := _m.Called(id)

	var r0 *model.PluginConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.PluginConfiguration, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.PluginConfiguration); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PluginConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOptions provides a mock function with given fields: options
func (_m *PluginConfigurationStore) GetByOptions(options *model.PluginConfigurationFilterOptions) (*model.PluginConfiguration, error) {
	ret := _m.Called(options)

	var r0 *model.PluginConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.PluginConfigurationFilterOptions) (*model.PluginConfiguration, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.PluginConfigurationFilterOptions) *model.PluginConfiguration); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PluginConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.PluginConfigurationFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: config
func (_m *PluginConfigurationStore) Upsert(config *model.PluginConfiguration) (*model.PluginConfiguration, error) {
	ret := _m.Called(config)

	var r0 *model.PluginConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.PluginConfiguration) (*model.PluginConfiguration, error)); ok {
		return rf(config)
	}
	if rf, ok := ret.Get(0).(func(*model.PluginConfiguration) *model.PluginConfiguration); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PluginConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.PluginConfiguration) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPluginConfigurationStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewPluginConfigurationStore creates a new instance of PluginConfigurationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPluginConfigurationStore(t mockConstructorTestingTNewPluginConfigurationStore) *PluginConfigurationStore {
	mock := &PluginConfigurationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
