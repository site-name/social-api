// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	plugins "github.com/sitename/sitename/model/plugins"
	mock "github.com/stretchr/testify/mock"
)

// PluginConfigurationStore is an autogenerated mock type for the PluginConfigurationStore type
type PluginConfigurationStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *PluginConfigurationStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterPluginConfigurations provides a mock function with given fields: options
func (_m *PluginConfigurationStore) FilterPluginConfigurations(options plugins.PluginConfigurationFilterOptions) ([]*plugins.PluginConfiguration, error) {
	ret := _m.Called(options)

	var r0 []*plugins.PluginConfiguration
	if rf, ok := ret.Get(0).(func(plugins.PluginConfigurationFilterOptions) []*plugins.PluginConfiguration); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*plugins.PluginConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(plugins.PluginConfigurationFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *PluginConfigurationStore) Get(id string) (*plugins.PluginConfiguration, error) {
	ret := _m.Called(id)

	var r0 *plugins.PluginConfiguration
	if rf, ok := ret.Get(0).(func(string) *plugins.PluginConfiguration); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.PluginConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOptions provides a mock function with given fields: options
func (_m *PluginConfigurationStore) GetByOptions(options *plugins.PluginConfigurationFilterOptions) (*plugins.PluginConfiguration, error) {
	ret := _m.Called(options)

	var r0 *plugins.PluginConfiguration
	if rf, ok := ret.Get(0).(func(*plugins.PluginConfigurationFilterOptions) *plugins.PluginConfiguration); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.PluginConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*plugins.PluginConfigurationFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TableName provides a mock function with given fields: withField
func (_m *PluginConfigurationStore) TableName(withField string) string {
	ret := _m.Called(withField)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(withField)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Upsert provides a mock function with given fields: config
func (_m *PluginConfigurationStore) Upsert(config *plugins.PluginConfiguration) (*plugins.PluginConfiguration, error) {
	ret := _m.Called(config)

	var r0 *plugins.PluginConfiguration
	if rf, ok := ret.Get(0).(func(*plugins.PluginConfiguration) *plugins.PluginConfiguration); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*plugins.PluginConfiguration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*plugins.PluginConfiguration) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
