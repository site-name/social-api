// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// VoucherProductStore is an autogenerated mock type for the VoucherProductStore type
type VoucherProductStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *VoucherProductStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: voucherProductID
func (_m *VoucherProductStore) Get(voucherProductID string) (*product_and_discount.VoucherProduct, error) {
	ret := _m.Called(voucherProductID)

	var r0 *product_and_discount.VoucherProduct
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.VoucherProduct); ok {
		r0 = rf(voucherProductID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.VoucherProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(voucherProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductsByVoucherID provides a mock function with given fields: voucherID
func (_m *VoucherProductStore) ProductsByVoucherID(voucherID string) ([]*product_and_discount.Product, error) {
	ret := _m.Called(voucherID)

	var r0 []*product_and_discount.Product
	if rf, ok := ret.Get(0).(func(string) []*product_and_discount.Product); ok {
		r0 = rf(voucherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: voucherProduct
func (_m *VoucherProductStore) Upsert(voucherProduct *product_and_discount.VoucherProduct) (*product_and_discount.VoucherProduct, error) {
	ret := _m.Called(voucherProduct)

	var r0 *product_and_discount.VoucherProduct
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherProduct) *product_and_discount.VoucherProduct); ok {
		r0 = rf(voucherProduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.VoucherProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherProduct) error); ok {
		r1 = rf(voucherProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
