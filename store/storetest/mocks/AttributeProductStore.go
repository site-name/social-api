// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// AttributeProductStore is an autogenerated mock type for the AttributeProductStore type
type AttributeProductStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: option
func (_m *AttributeProductStore) FilterByOptions(option *model.AttributeProductFilterOption) ([]*model.AttributeProduct, error) {
	ret := _m.Called(option)

	var r0 []*model.AttributeProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AttributeProductFilterOption) ([]*model.AttributeProduct, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.AttributeProductFilterOption) []*model.AttributeProduct); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AttributeProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AttributeProductFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: attributeProductID
func (_m *AttributeProductStore) Get(attributeProductID string) (*model.AttributeProduct, error) {
	ret := _m.Called(attributeProductID)

	var r0 *model.AttributeProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AttributeProduct, error)); ok {
		return rf(attributeProductID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AttributeProduct); ok {
		r0 = rf(attributeProductID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttributeProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(attributeProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *AttributeProductStore) GetByOption(option *model.AttributeProductFilterOption) (*model.AttributeProduct, error) {
	ret := _m.Called(option)

	var r0 *model.AttributeProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AttributeProductFilterOption) (*model.AttributeProduct, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.AttributeProductFilterOption) *model.AttributeProduct); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttributeProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AttributeProductFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: attributeProduct
func (_m *AttributeProductStore) Save(attributeProduct *model.AttributeProduct) (*model.AttributeProduct, error) {
	ret := _m.Called(attributeProduct)

	var r0 *model.AttributeProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AttributeProduct) (*model.AttributeProduct, error)); ok {
		return rf(attributeProduct)
	}
	if rf, ok := ret.Get(0).(func(*model.AttributeProduct) *model.AttributeProduct); ok {
		r0 = rf(attributeProduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttributeProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AttributeProduct) error); ok {
		r1 = rf(attributeProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAttributeProductStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAttributeProductStore creates a new instance of AttributeProductStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAttributeProductStore(t mockConstructorTestingTNewAttributeProductStore) *AttributeProductStore {
	mock := &AttributeProductStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
