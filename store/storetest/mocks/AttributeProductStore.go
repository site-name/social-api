// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	attribute "github.com/sitename/sitename/model/attribute"
	mock "github.com/stretchr/testify/mock"
)

// AttributeProductStore is an autogenerated mock type for the AttributeProductStore type
type AttributeProductStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *AttributeProductStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: attributeProductID
func (_m *AttributeProductStore) Get(attributeProductID string) (*attribute.AttributeProduct, error) {
	ret := _m.Called(attributeProductID)

	var r0 *attribute.AttributeProduct
	if rf, ok := ret.Get(0).(func(string) *attribute.AttributeProduct); ok {
		r0 = rf(attributeProductID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AttributeProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(attributeProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *AttributeProductStore) GetByOption(option *attribute.AttributeProductGetOption) (*attribute.AttributeProduct, error) {
	ret := _m.Called(option)

	var r0 *attribute.AttributeProduct
	if rf, ok := ret.Get(0).(func(*attribute.AttributeProductGetOption) *attribute.AttributeProduct); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AttributeProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AttributeProductGetOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: attributeProduct
func (_m *AttributeProductStore) Save(attributeProduct *attribute.AttributeProduct) (*attribute.AttributeProduct, error) {
	ret := _m.Called(attributeProduct)

	var r0 *attribute.AttributeProduct
	if rf, ok := ret.Get(0).(func(*attribute.AttributeProduct) *attribute.AttributeProduct); ok {
		r0 = rf(attributeProduct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AttributeProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AttributeProduct) error); ok {
		r1 = rf(attributeProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
