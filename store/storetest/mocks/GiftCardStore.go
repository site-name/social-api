// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	giftcard "github.com/sitename/sitename/model/giftcard"
	mock "github.com/stretchr/testify/mock"
)

// GiftCardStore is an autogenerated mock type for the GiftCardStore type
type GiftCardStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *GiftCardStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOption provides a mock function with given fields: option
func (_m *GiftCardStore) FilterByOption(option *giftcard.GiftCardFilterOption) ([]*giftcard.GiftCard, error) {
	ret := _m.Called(option)

	var r0 []*giftcard.GiftCard
	if rf, ok := ret.Get(0).(func(*giftcard.GiftCardFilterOption) []*giftcard.GiftCard); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*giftcard.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*giftcard.GiftCardFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByCheckout provides a mock function with given fields: checkoutID
func (_m *GiftCardStore) GetAllByCheckout(checkoutID string) ([]*giftcard.GiftCard, error) {
	ret := _m.Called(checkoutID)

	var r0 []*giftcard.GiftCard
	if rf, ok := ret.Get(0).(func(string) []*giftcard.GiftCard); ok {
		r0 = rf(checkoutID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*giftcard.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(checkoutID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByUserId provides a mock function with given fields: userID
func (_m *GiftCardStore) GetAllByUserId(userID string) ([]*giftcard.GiftCard, error) {
	ret := _m.Called(userID)

	var r0 []*giftcard.GiftCard
	if rf, ok := ret.Get(0).(func(string) []*giftcard.GiftCard); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*giftcard.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *GiftCardStore) GetById(id string) (*giftcard.GiftCard, error) {
	ret := _m.Called(id)

	var r0 *giftcard.GiftCard
	if rf, ok := ret.Get(0).(func(string) *giftcard.GiftCard); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*giftcard.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: giftCard
func (_m *GiftCardStore) Upsert(giftCard *giftcard.GiftCard) (*giftcard.GiftCard, error) {
	ret := _m.Called(giftCard)

	var r0 *giftcard.GiftCard
	if rf, ok := ret.Get(0).(func(*giftcard.GiftCard) *giftcard.GiftCard); ok {
		r0 = rf(giftCard)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*giftcard.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*giftcard.GiftCard) error); ok {
		r1 = rf(giftCard)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
