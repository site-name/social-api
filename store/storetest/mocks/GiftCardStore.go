// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	giftcard "github.com/sitename/sitename/model/giftcard"
	mock "github.com/stretchr/testify/mock"

	store_iface "github.com/sitename/sitename/store/store_iface"
)

// GiftCardStore is an autogenerated mock type for the GiftCardStore type
type GiftCardStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, giftCards
func (_m *GiftCardStore) BulkUpsert(transaction store_iface.SqlxTxExecutor, giftCards ...*giftcard.GiftCard) ([]*giftcard.GiftCard, error) {
	_va := make([]interface{}, len(giftCards))
	for _i := range giftCards {
		_va[_i] = giftCards[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, transaction)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*giftcard.GiftCard
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, ...*giftcard.GiftCard) []*giftcard.GiftCard); ok {
		r0 = rf(transaction, giftCards...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*giftcard.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, ...*giftcard.GiftCard) error); ok {
		r1 = rf(transaction, giftCards...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateOrderGiftcards provides a mock function with given fields: orderID
func (_m *GiftCardStore) DeactivateOrderGiftcards(orderID string) ([]string, error) {
	ret := _m.Called(orderID)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: transaction, option
func (_m *GiftCardStore) FilterByOption(transaction store_iface.SqlxTxExecutor, option *giftcard.GiftCardFilterOption) ([]*giftcard.GiftCard, error) {
	ret := _m.Called(transaction, option)

	var r0 []*giftcard.GiftCard
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *giftcard.GiftCardFilterOption) []*giftcard.GiftCard); ok {
		r0 = rf(transaction, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*giftcard.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *giftcard.GiftCardFilterOption) error); ok {
		r1 = rf(transaction, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *GiftCardStore) GetById(id string) (*giftcard.GiftCard, error) {
	ret := _m.Called(id)

	var r0 *giftcard.GiftCard
	if rf, ok := ret.Get(0).(func(string) *giftcard.GiftCard); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*giftcard.GiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
