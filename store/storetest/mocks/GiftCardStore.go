// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// GiftCardStore is an autogenerated mock type for the GiftCardStore type
type GiftCardStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: tx, giftCards
func (_m *GiftCardStore) BulkUpsert(tx boil.ContextTransactor, giftCards model.GiftcardSlice) (model.GiftcardSlice, error) {
	ret := _m.Called(tx, giftCards)

	var r0 model.GiftcardSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.GiftcardSlice) (model.GiftcardSlice, error)); ok {
		return rf(tx, giftCards)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.GiftcardSlice) model.GiftcardSlice); ok {
		r0 = rf(tx, giftCards)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.GiftcardSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.GiftcardSlice) error); ok {
		r1 = rf(tx, giftCards)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateOrderGiftcards provides a mock function with given fields: tx, orderID
func (_m *GiftCardStore) DeactivateOrderGiftcards(tx boil.ContextTransactor, orderID string) ([]string, error) {
	ret := _m.Called(tx, orderID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, string) ([]string, error)); ok {
		return rf(tx, orderID)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, string) []string); ok {
		r0 = rf(tx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, string) error); ok {
		r1 = rf(tx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, ids
func (_m *GiftCardStore) Delete(tx boil.ContextTransactor, ids []string) error {
	ret := _m.Called(tx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *GiftCardStore) FilterByOption(option model_helper.GiftcardFilterOption) (model.GiftcardSlice, error) {
	ret := _m.Called(option)

	var r0 model.GiftcardSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.GiftcardFilterOption) (model.GiftcardSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.GiftcardFilterOption) model.GiftcardSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.GiftcardSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.GiftcardFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *GiftCardStore) GetById(id string) (*model.Giftcard, error) {
	ret := _m.Called(id)

	var r0 *model.Giftcard
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Giftcard, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Giftcard); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Giftcard)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGiftCardStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewGiftCardStore creates a new instance of GiftCardStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGiftCardStore(t mockConstructorTestingTNewGiftCardStore) *GiftCardStore {
	mock := &GiftCardStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
