// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// GiftCardStore is an autogenerated mock type for the GiftCardStore type
type GiftCardStore struct {
	mock.Mock
}

// AddRelations provides a mock function with given fields: transaction, giftcards, relations
func (_m *GiftCardStore) AddRelations(transaction *gorm.DB, giftcards model.Giftcards, relations interface{}) error {
	ret := _m.Called(transaction, giftcards, relations)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.Giftcards, interface{}) error); ok {
		r0 = rf(transaction, giftcards, relations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpsert provides a mock function with given fields: transaction, giftCards
func (_m *GiftCardStore) BulkUpsert(transaction *gorm.DB, giftCards ...*model.GiftCard) ([]*model.GiftCard, error) {
	_va := make([]interface{}, len(giftCards))
	for _i := range giftCards {
		_va[_i] = giftCards[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, transaction)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*model.GiftCard
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...*model.GiftCard) ([]*model.GiftCard, error)); ok {
		return rf(transaction, giftCards...)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...*model.GiftCard) []*model.GiftCard); ok {
		r0 = rf(transaction, giftCards...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GiftCard)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, ...*model.GiftCard) error); ok {
		r1 = rf(transaction, giftCards...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateOrderGiftcards provides a mock function with given fields: orderID
func (_m *GiftCardStore) DeactivateOrderGiftcards(orderID string) ([]string, error) {
	ret := _m.Called(orderID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(orderID)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGiftcards provides a mock function with given fields: transaction, ids
func (_m *GiftCardStore) DeleteGiftcards(transaction *gorm.DB, ids []string) error {
	ret := _m.Called(transaction, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) error); ok {
		r0 = rf(transaction, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *GiftCardStore) FilterByOption(option *model.GiftCardFilterOption) ([]*model.GiftCard, error) {
	ret := _m.Called(option)

	var r0 []*model.GiftCard
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.GiftCardFilterOption) ([]*model.GiftCard, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.GiftCardFilterOption) []*model.GiftCard); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GiftCard)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.GiftCardFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *GiftCardStore) GetById(id string) (*model.GiftCard, error) {
	ret := _m.Called(id)

	var r0 *model.GiftCard
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.GiftCard, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.GiftCard); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GiftCard)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRelations provides a mock function with given fields: transaction, giftcards, relations
func (_m *GiftCardStore) RemoveRelations(transaction *gorm.DB, giftcards model.Giftcards, relations interface{}) error {
	ret := _m.Called(transaction, giftcards, relations)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.Giftcards, interface{}) error); ok {
		r0 = rf(transaction, giftcards, relations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewGiftCardStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewGiftCardStore creates a new instance of GiftCardStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGiftCardStore(t mockConstructorTestingTNewGiftCardStore) *GiftCardStore {
	mock := &GiftCardStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
