// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ProductChannelListingStore is an autogenerated mock type for the ProductChannelListingStore type
type ProductChannelListingStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, listings
func (_m *ProductChannelListingStore) BulkUpsert(transaction *gorm.DB, listings []*model.ProductChannelListing) ([]*model.ProductChannelListing, error) {
	ret := _m.Called(transaction, listings)

	var r0 []*model.ProductChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.ProductChannelListing) ([]*model.ProductChannelListing, error)); ok {
		return rf(transaction, listings)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.ProductChannelListing) []*model.ProductChannelListing); ok {
		r0 = rf(transaction, listings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.ProductChannelListing) error); ok {
		r1 = rf(transaction, listings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductChannelListingStore) FilterByOption(option *model.ProductChannelListingFilterOption) ([]*model.ProductChannelListing, error) {
	ret := _m.Called(option)

	var r0 []*model.ProductChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductChannelListingFilterOption) ([]*model.ProductChannelListing, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductChannelListingFilterOption) []*model.ProductChannelListing); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductChannelListingFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: channelListingID
func (_m *ProductChannelListingStore) Get(channelListingID string) (*model.ProductChannelListing, error) {
	ret := _m.Called(channelListingID)

	var r0 *model.ProductChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductChannelListing, error)); ok {
		return rf(channelListingID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductChannelListing); ok {
		r0 = rf(channelListingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelListingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductChannelListingStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductChannelListingStore creates a new instance of ProductChannelListingStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductChannelListingStore(t mockConstructorTestingTNewProductChannelListingStore) *ProductChannelListingStore {
	mock := &ProductChannelListingStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
