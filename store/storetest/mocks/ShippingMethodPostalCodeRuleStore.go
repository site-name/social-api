// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// ShippingMethodPostalCodeRuleStore is an autogenerated mock type for the ShippingMethodPostalCodeRuleStore type
type ShippingMethodPostalCodeRuleStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: tx, ids
func (_m *ShippingMethodPostalCodeRuleStore) Delete(tx boil.ContextTransactor, ids []string) error {
	ret := _m.Called(tx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOptions provides a mock function with given fields: options
func (_m *ShippingMethodPostalCodeRuleStore) FilterByOptions(options model_helper.ShippingMethodPostalCodeRuleFilterOptions) (model.ShippingMethodPostalCodeRuleSlice, error) {
	ret := _m.Called(options)

	var r0 model.ShippingMethodPostalCodeRuleSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.ShippingMethodPostalCodeRuleFilterOptions) (model.ShippingMethodPostalCodeRuleSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.ShippingMethodPostalCodeRuleFilterOptions) model.ShippingMethodPostalCodeRuleSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ShippingMethodPostalCodeRuleSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.ShippingMethodPostalCodeRuleFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: tx, rules
func (_m *ShippingMethodPostalCodeRuleStore) Save(tx boil.ContextTransactor, rules model.ShippingMethodPostalCodeRuleSlice) (model.ShippingMethodPostalCodeRuleSlice, error) {
	ret := _m.Called(tx, rules)

	var r0 model.ShippingMethodPostalCodeRuleSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.ShippingMethodPostalCodeRuleSlice) (model.ShippingMethodPostalCodeRuleSlice, error)); ok {
		return rf(tx, rules)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.ShippingMethodPostalCodeRuleSlice) model.ShippingMethodPostalCodeRuleSlice); ok {
		r0 = rf(tx, rules)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ShippingMethodPostalCodeRuleSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.ShippingMethodPostalCodeRuleSlice) error); ok {
		r1 = rf(tx, rules)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewShippingMethodPostalCodeRuleStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewShippingMethodPostalCodeRuleStore creates a new instance of ShippingMethodPostalCodeRuleStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewShippingMethodPostalCodeRuleStore(t mockConstructorTestingTNewShippingMethodPostalCodeRuleStore) *ShippingMethodPostalCodeRuleStore {
	mock := &ShippingMethodPostalCodeRuleStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
