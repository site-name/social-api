// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	model_helper "github.com/sitename/sitename/model_helper"
)

// UploadSessionStore is an autogenerated mock type for the UploadSessionStore type
type UploadSessionStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *UploadSessionStore) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: options
func (_m *UploadSessionStore) FindAll(options model_helper.UploadSessionFilterOption) (model.UploadSessionSlice, error) {
	ret := _m.Called(options)

	var r0 model.UploadSessionSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.UploadSessionFilterOption) (model.UploadSessionSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.UploadSessionFilterOption) model.UploadSessionSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.UploadSessionSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.UploadSessionFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *UploadSessionStore) Get(id string) (*model.UploadSession, error) {
	ret := _m.Called(id)

	var r0 *model.UploadSession
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.UploadSession, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.UploadSession); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UploadSession)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: session
func (_m *UploadSessionStore) Upsert(session model.UploadSession) (*model.UploadSession, error) {
	ret := _m.Called(session)

	var r0 *model.UploadSession
	var r1 error
	if rf, ok := ret.Get(0).(func(model.UploadSession) (*model.UploadSession, error)); ok {
		return rf(session)
	}
	if rf, ok := ret.Get(0).(func(model.UploadSession) *model.UploadSession); ok {
		r0 = rf(session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UploadSession)
		}
	}

	if rf, ok := ret.Get(1).(func(model.UploadSession) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUploadSessionStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewUploadSessionStore creates a new instance of UploadSessionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUploadSessionStore(t mockConstructorTestingTNewUploadSessionStore) *UploadSessionStore {
	mock := &UploadSessionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
