// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	external_services "github.com/sitename/sitename/model/external_services"
	mock "github.com/stretchr/testify/mock"
)

// OpenExchangeRateStore is an autogenerated mock type for the OpenExchangeRateStore type
type OpenExchangeRateStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: rates
func (_m *OpenExchangeRateStore) BulkUpsert(rates []*external_services.OpenExchangeRate) ([]*external_services.OpenExchangeRate, error) {
	ret := _m.Called(rates)

	var r0 []*external_services.OpenExchangeRate
	if rf, ok := ret.Get(0).(func([]*external_services.OpenExchangeRate) []*external_services.OpenExchangeRate); ok {
		r0 = rf(rates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*external_services.OpenExchangeRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*external_services.OpenExchangeRate) error); ok {
		r1 = rf(rates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *OpenExchangeRateStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// GetAll provides a mock function with given fields:
func (_m *OpenExchangeRateStore) GetAll() ([]*external_services.OpenExchangeRate, error) {
	ret := _m.Called()

	var r0 []*external_services.OpenExchangeRate
	if rf, ok := ret.Get(0).(func() []*external_services.OpenExchangeRate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*external_services.OpenExchangeRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
