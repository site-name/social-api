// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// OpenExchangeRateStore is an autogenerated mock type for the OpenExchangeRateStore type
type OpenExchangeRateStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: rates
func (_m *OpenExchangeRateStore) BulkUpsert(rates model.OpenExchangeRateSlice) (model.OpenExchangeRateSlice, error) {
	ret := _m.Called(rates)

	var r0 model.OpenExchangeRateSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model.OpenExchangeRateSlice) (model.OpenExchangeRateSlice, error)); ok {
		return rf(rates)
	}
	if rf, ok := ret.Get(0).(func(model.OpenExchangeRateSlice) model.OpenExchangeRateSlice); ok {
		r0 = rf(rates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.OpenExchangeRateSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model.OpenExchangeRateSlice) error); ok {
		r1 = rf(rates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *OpenExchangeRateStore) GetAll() (model.OpenExchangeRateSlice, error) {
	ret := _m.Called()

	var r0 model.OpenExchangeRateSlice
	var r1 error
	if rf, ok := ret.Get(0).(func() (model.OpenExchangeRateSlice, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() model.OpenExchangeRateSlice); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.OpenExchangeRateSlice)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOpenExchangeRateStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewOpenExchangeRateStore creates a new instance of OpenExchangeRateStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOpenExchangeRateStore(t mockConstructorTestingTNewOpenExchangeRateStore) *OpenExchangeRateStore {
	mock := &OpenExchangeRateStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
