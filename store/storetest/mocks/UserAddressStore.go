// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	account "github.com/sitename/sitename/model/account"
	mock "github.com/stretchr/testify/mock"
)

// UserAddressStore is an autogenerated mock type for the UserAddressStore type
type UserAddressStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *UserAddressStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// DeleteForUser provides a mock function with given fields: userID, addressID
func (_m *UserAddressStore) DeleteForUser(userID string, addressID string) error {
	ret := _m.Called(userID, addressID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, addressID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OrderBy provides a mock function with given fields:
func (_m *UserAddressStore) OrderBy() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Save provides a mock function with given fields: userAddress
func (_m *UserAddressStore) Save(userAddress *account.UserAddress) (*account.UserAddress, error) {
	ret := _m.Called(userAddress)

	var r0 *account.UserAddress
	if rf, ok := ret.Get(0).(func(*account.UserAddress) *account.UserAddress); ok {
		r0 = rf(userAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.UserAddress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*account.UserAddress) error); ok {
		r1 = rf(userAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TableName provides a mock function with given fields: withField
func (_m *UserAddressStore) TableName(withField string) string {
	ret := _m.Called(withField)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(withField)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
