// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
)

// CollectionStore is an autogenerated mock type for the CollectionStore type
type CollectionStore struct {
	mock.Mock
}

// FilterByOption provides a mock function with given fields: option
func (_m *CollectionStore) FilterByOption(option *product_and_discount.CollectionFilterOption) ([]*product_and_discount.Collection, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.Collection
	if rf, ok := ret.Get(0).(func(*product_and_discount.CollectionFilterOption) []*product_and_discount.Collection); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.CollectionFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: collectionID
func (_m *CollectionStore) Get(collectionID string) (*product_and_discount.Collection, error) {
	ret := _m.Called(collectionID)

	var r0 *product_and_discount.Collection
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.Collection); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *CollectionStore) ModelFields(prefix string) model.AnyArray[string] {
	ret := _m.Called(prefix)

	var r0 model.AnyArray[string]
	if rf, ok := ret.Get(0).(func(string) model.AnyArray[string]); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AnyArray[string])
		}
	}

	return r0
}

// ScanFields provides a mock function with given fields: col
func (_m *CollectionStore) ScanFields(col product_and_discount.Collection) []interface{} {
	ret := _m.Called(col)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(product_and_discount.Collection) []interface{}); ok {
		r0 = rf(col)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: collection
func (_m *CollectionStore) Upsert(collection *product_and_discount.Collection) (*product_and_discount.Collection, error) {
	ret := _m.Called(collection)

	var r0 *product_and_discount.Collection
	if rf, ok := ret.Get(0).(func(*product_and_discount.Collection) *product_and_discount.Collection); ok {
		r0 = rf(collection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.Collection) error); ok {
		r1 = rf(collection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
