// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// CollectionStore is an autogenerated mock type for the CollectionStore type
type CollectionStore struct {
	mock.Mock
}

// CollectionsByProductID provides a mock function with given fields: productID
func (_m *CollectionStore) CollectionsByProductID(productID string) ([]*product_and_discount.Collection, error) {
	ret := _m.Called(productID)

	var r0 []*product_and_discount.Collection
	if rf, ok := ret.Get(0).(func(string) []*product_and_discount.Collection); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *CollectionStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: collectionID
func (_m *CollectionStore) Get(collectionID string) (*product_and_discount.Collection, error) {
	ret := _m.Called(collectionID)

	var r0 *product_and_discount.Collection
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.Collection); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *CollectionStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: collection
func (_m *CollectionStore) Upsert(collection *product_and_discount.Collection) (*product_and_discount.Collection, error) {
	ret := _m.Called(collection)

	var r0 *product_and_discount.Collection
	if rf, ok := ret.Get(0).(func(*product_and_discount.Collection) *product_and_discount.Collection); ok {
		r0 = rf(collection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.Collection) error); ok {
		r1 = rf(collection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
