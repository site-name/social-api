// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// CollectionStore is an autogenerated mock type for the CollectionStore type
type CollectionStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ids
func (_m *CollectionStore) Delete(ids ...string) error {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(ids...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *CollectionStore) FilterByOption(option *model.CollectionFilterOption) (int64, []*model.Collection, error) {
	ret := _m.Called(option)

	var r0 int64
	var r1 []*model.Collection
	var r2 error
	if rf, ok := ret.Get(0).(func(*model.CollectionFilterOption) (int64, []*model.Collection, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.CollectionFilterOption) int64); ok {
		r0 = rf(option)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.CollectionFilterOption) []*model.Collection); ok {
		r1 = rf(option)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.Collection)
		}
	}

	if rf, ok := ret.Get(2).(func(*model.CollectionFilterOption) error); ok {
		r2 = rf(option)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: collectionID
func (_m *CollectionStore) Get(collectionID string) (*model.Collection, error) {
	ret := _m.Called(collectionID)

	var r0 *model.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Collection, error)); ok {
		return rf(collectionID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Collection); ok {
		r0 = rf(collectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: col
func (_m *CollectionStore) ScanFields(col *model.Collection) []interface{} {
	ret := _m.Called(col)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.Collection) []interface{}); ok {
		r0 = rf(col)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: collection
func (_m *CollectionStore) Upsert(collection *model.Collection) (*model.Collection, error) {
	ret := _m.Called(collection)

	var r0 *model.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Collection) (*model.Collection, error)); ok {
		return rf(collection)
	}
	if rf, ok := ret.Get(0).(func(*model.Collection) *model.Collection); ok {
		r0 = rf(collection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Collection)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Collection) error); ok {
		r1 = rf(collection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCollectionStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectionStore creates a new instance of CollectionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectionStore(t mockConstructorTestingTNewCollectionStore) *CollectionStore {
	mock := &CollectionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
