// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// CollectionProductStore is an autogenerated mock type for the CollectionProductStore type
type CollectionProductStore struct {
	mock.Mock
}

// BulkSave provides a mock function with given fields: transaction, relations
func (_m *CollectionProductStore) BulkSave(transaction *gorm.DB, relations []*model.CollectionProduct) ([]*model.CollectionProduct, error) {
	ret := _m.Called(transaction, relations)

	var r0 []*model.CollectionProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.CollectionProduct) ([]*model.CollectionProduct, error)); ok {
		return rf(transaction, relations)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.CollectionProduct) []*model.CollectionProduct); ok {
		r0 = rf(transaction, relations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CollectionProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.CollectionProduct) error); ok {
		r1 = rf(transaction, relations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: transaction, options
func (_m *CollectionProductStore) Delete(transaction *gorm.DB, options *model.CollectionProductFilterOptions) error {
	ret := _m.Called(transaction, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.CollectionProductFilterOptions) error); ok {
		r0 = rf(transaction, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOptions provides a mock function with given fields: options
func (_m *CollectionProductStore) FilterByOptions(options *model.CollectionProductFilterOptions) ([]*model.CollectionProduct, error) {
	ret := _m.Called(options)

	var r0 []*model.CollectionProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.CollectionProductFilterOptions) ([]*model.CollectionProduct, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.CollectionProductFilterOptions) []*model.CollectionProduct); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CollectionProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.CollectionProductFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCollectionProductStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectionProductStore creates a new instance of CollectionProductStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectionProductStore(t mockConstructorTestingTNewCollectionProductStore) *CollectionProductStore {
	mock := &CollectionProductStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
