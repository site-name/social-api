// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	payment "github.com/sitename/sitename/model/payment"
	mock "github.com/stretchr/testify/mock"

	store_iface "github.com/sitename/sitename/store/store_iface"
)

// PaymentTransactionStore is an autogenerated mock type for the PaymentTransactionStore type
type PaymentTransactionStore struct {
	mock.Mock
}

// FilterByOption provides a mock function with given fields: option
func (_m *PaymentTransactionStore) FilterByOption(option *payment.PaymentTransactionFilterOpts) ([]*payment.PaymentTransaction, error) {
	ret := _m.Called(option)

	var r0 []*payment.PaymentTransaction
	if rf, ok := ret.Get(0).(func(*payment.PaymentTransactionFilterOpts) []*payment.PaymentTransaction); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*payment.PaymentTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*payment.PaymentTransactionFilterOpts) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *PaymentTransactionStore) Get(id string) (*payment.PaymentTransaction, error) {
	ret := _m.Called(id)

	var r0 *payment.PaymentTransaction
	if rf, ok := ret.Get(0).(func(string) *payment.PaymentTransaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.PaymentTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: transaction, paymentTransaction
func (_m *PaymentTransactionStore) Save(transaction store_iface.SqlxTxExecutor, paymentTransaction *payment.PaymentTransaction) (*payment.PaymentTransaction, error) {
	ret := _m.Called(transaction, paymentTransaction)

	var r0 *payment.PaymentTransaction
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *payment.PaymentTransaction) *payment.PaymentTransaction); ok {
		r0 = rf(transaction, paymentTransaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.PaymentTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *payment.PaymentTransaction) error); ok {
		r1 = rf(transaction, paymentTransaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: transaction
func (_m *PaymentTransactionStore) Update(transaction *payment.PaymentTransaction) (*payment.PaymentTransaction, error) {
	ret := _m.Called(transaction)

	var r0 *payment.PaymentTransaction
	if rf, ok := ret.Get(0).(func(*payment.PaymentTransaction) *payment.PaymentTransaction); ok {
		r0 = rf(transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.PaymentTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*payment.PaymentTransaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
