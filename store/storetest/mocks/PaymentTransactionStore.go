// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// PaymentTransactionStore is an autogenerated mock type for the PaymentTransactionStore type
type PaymentTransactionStore struct {
	mock.Mock
}

// FilterByOption provides a mock function with given fields: option
func (_m *PaymentTransactionStore) FilterByOption(option *model.PaymentTransactionFilterOpts) ([]*model.PaymentTransaction, error) {
	ret := _m.Called(option)

	var r0 []*model.PaymentTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.PaymentTransactionFilterOpts) ([]*model.PaymentTransaction, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.PaymentTransactionFilterOpts) []*model.PaymentTransaction); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PaymentTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.PaymentTransactionFilterOpts) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *PaymentTransactionStore) Get(id string) (*model.PaymentTransaction, error) {
	ret := _m.Called(id)

	var r0 *model.PaymentTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.PaymentTransaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.PaymentTransaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PaymentTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: transaction, paymentTransaction
func (_m *PaymentTransactionStore) Save(transaction *gorm.DB, paymentTransaction *model.PaymentTransaction) (*model.PaymentTransaction, error) {
	ret := _m.Called(transaction, paymentTransaction)

	var r0 *model.PaymentTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.PaymentTransaction) (*model.PaymentTransaction, error)); ok {
		return rf(transaction, paymentTransaction)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.PaymentTransaction) *model.PaymentTransaction); ok {
		r0 = rf(transaction, paymentTransaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PaymentTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.PaymentTransaction) error); ok {
		r1 = rf(transaction, paymentTransaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: transaction
func (_m *PaymentTransactionStore) Update(transaction *model.PaymentTransaction) (*model.PaymentTransaction, error) {
	ret := _m.Called(transaction)

	var r0 *model.PaymentTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.PaymentTransaction) (*model.PaymentTransaction, error)); ok {
		return rf(transaction)
	}
	if rf, ok := ret.Get(0).(func(*model.PaymentTransaction) *model.PaymentTransaction); ok {
		r0 = rf(transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PaymentTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.PaymentTransaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPaymentTransactionStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaymentTransactionStore creates a new instance of PaymentTransactionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentTransactionStore(t mockConstructorTestingTNewPaymentTransactionStore) *PaymentTransactionStore {
	mock := &PaymentTransactionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
