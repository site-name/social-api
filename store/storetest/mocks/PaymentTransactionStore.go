// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	payment "github.com/sitename/sitename/model/payment"
	mock "github.com/stretchr/testify/mock"
)

// PaymentTransactionStore is an autogenerated mock type for the PaymentTransactionStore type
type PaymentTransactionStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *PaymentTransactionStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: id
func (_m *PaymentTransactionStore) Get(id string) (*payment.PaymentTransaction, error) {
	ret := _m.Called(id)

	var r0 *payment.PaymentTransaction
	if rf, ok := ret.Get(0).(func(string) *payment.PaymentTransaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.PaymentTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByPaymentID provides a mock function with given fields: paymentID
func (_m *PaymentTransactionStore) GetAllByPaymentID(paymentID string) ([]*payment.PaymentTransaction, error) {
	ret := _m.Called(paymentID)

	var r0 []*payment.PaymentTransaction
	if rf, ok := ret.Get(0).(func(string) []*payment.PaymentTransaction); ok {
		r0 = rf(paymentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*payment.PaymentTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(paymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: transaction
func (_m *PaymentTransactionStore) Save(transaction *payment.PaymentTransaction) (*payment.PaymentTransaction, error) {
	ret := _m.Called(transaction)

	var r0 *payment.PaymentTransaction
	if rf, ok := ret.Get(0).(func(*payment.PaymentTransaction) *payment.PaymentTransaction); ok {
		r0 = rf(transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.PaymentTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*payment.PaymentTransaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: transaction
func (_m *PaymentTransactionStore) Update(transaction *payment.PaymentTransaction) (*payment.PaymentTransaction, error) {
	ret := _m.Called(transaction)

	var r0 *payment.PaymentTransaction
	if rf, ok := ret.Get(0).(func(*payment.PaymentTransaction) *payment.PaymentTransaction); ok {
		r0 = rf(transaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.PaymentTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*payment.PaymentTransaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
