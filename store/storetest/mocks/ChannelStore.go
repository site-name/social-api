// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// ChannelStore is an autogenerated mock type for the ChannelStore type
type ChannelStore struct {
	mock.Mock
}

// DeleteChannels provides a mock function with given fields: tx, ids
func (_m *ChannelStore) DeleteChannels(tx boil.ContextTransactor, ids []string) error {
	ret := _m.Called(tx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOptions provides a mock function with given fields: conds
func (_m *ChannelStore) FilterByOptions(conds model_helper.ChannelFilterOptions) (model.ChannelSlice, error) {
	ret := _m.Called(conds)

	var r0 model.ChannelSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.ChannelFilterOptions) (model.ChannelSlice, error)); ok {
		return rf(conds)
	}
	if rf, ok := ret.Get(0).(func(model_helper.ChannelFilterOptions) model.ChannelSlice); ok {
		r0 = rf(conds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ChannelSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.ChannelFilterOptions) error); ok {
		r1 = rf(conds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *ChannelStore) Get(id string) (*model.Channel, error) {
	ret := _m.Called(id)

	var r0 *model.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Channel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Channel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, channel
func (_m *ChannelStore) Upsert(tx boil.ContextTransactor, channel model.Channel) (*model.Channel, error) {
	ret := _m.Called(tx, channel)

	var r0 *model.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.Channel) (*model.Channel, error)); ok {
		return rf(tx, channel)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.Channel) *model.Channel); ok {
		r0 = rf(tx, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.Channel) error); ok {
		r1 = rf(tx, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChannelStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewChannelStore creates a new instance of ChannelStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChannelStore(t mockConstructorTestingTNewChannelStore) *ChannelStore {
	mock := &ChannelStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
