// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	channel "github.com/sitename/sitename/model/channel"
	mock "github.com/stretchr/testify/mock"

	model "github.com/sitename/sitename/model"
)

// ChannelStore is an autogenerated mock type for the ChannelStore type
type ChannelStore struct {
	mock.Mock
}

// FilterByOption provides a mock function with given fields: option
func (_m *ChannelStore) FilterByOption(option *channel.ChannelFilterOption) ([]*channel.Channel, error) {
	ret := _m.Called(option)

	var r0 []*channel.Channel
	if rf, ok := ret.Get(0).(func(*channel.ChannelFilterOption) []*channel.Channel); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*channel.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*channel.ChannelFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *ChannelStore) Get(id string) (*channel.Channel, error) {
	ret := _m.Called(id)

	var r0 *channel.Channel
	if rf, ok := ret.Get(0).(func(string) *channel.Channel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*channel.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetbyOption provides a mock function with given fields: option
func (_m *ChannelStore) GetbyOption(option *channel.ChannelFilterOption) (*channel.Channel, error) {
	ret := _m.Called(option)

	var r0 *channel.Channel
	if rf, ok := ret.Get(0).(func(*channel.ChannelFilterOption) *channel.Channel); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*channel.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*channel.ChannelFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *ChannelStore) ModelFields(prefix string) model.StringArray {
	ret := _m.Called(prefix)

	var r0 model.StringArray
	if rf, ok := ret.Get(0).(func(string) model.StringArray); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.StringArray)
		}
	}

	return r0
}

// Save provides a mock function with given fields: ch
func (_m *ChannelStore) Save(ch *channel.Channel) (*channel.Channel, error) {
	ret := _m.Called(ch)

	var r0 *channel.Channel
	if rf, ok := ret.Get(0).(func(*channel.Channel) *channel.Channel); ok {
		r0 = rf(ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*channel.Channel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*channel.Channel) error); ok {
		r1 = rf(ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: chanNel
func (_m *ChannelStore) ScanFields(chanNel channel.Channel) []interface{} {
	ret := _m.Called(chanNel)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(channel.Channel) []interface{}); ok {
		r0 = rf(chanNel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}
