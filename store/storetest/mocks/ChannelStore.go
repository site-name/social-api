// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ChannelStore is an autogenerated mock type for the ChannelStore type
type ChannelStore struct {
	mock.Mock
}

// DeleteChannels provides a mock function with given fields: transaction, ids
func (_m *ChannelStore) DeleteChannels(transaction *gorm.DB, ids []string) error {
	ret := _m.Called(transaction, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) error); ok {
		r0 = rf(transaction, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *ChannelStore) FilterByOption(option *model.ChannelFilterOption) ([]*model.Channel, error) {
	ret := _m.Called(option)

	var r0 []*model.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ChannelFilterOption) ([]*model.Channel, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.ChannelFilterOption) []*model.Channel); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ChannelFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *ChannelStore) Get(id string) (*model.Channel, error) {
	ret := _m.Called(id)

	var r0 *model.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Channel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Channel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: chanNel
func (_m *ChannelStore) ScanFields(chanNel *model.Channel) []interface{} {
	ret := _m.Called(chanNel)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.Channel) []interface{}); ok {
		r0 = rf(chanNel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: transaction, channel
func (_m *ChannelStore) Upsert(transaction *gorm.DB, channel *model.Channel) (*model.Channel, error) {
	ret := _m.Called(transaction, channel)

	var r0 *model.Channel
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Channel) (*model.Channel, error)); ok {
		return rf(transaction, channel)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.Channel) *model.Channel); ok {
		r0 = rf(transaction, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.Channel) error); ok {
		r1 = rf(transaction, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChannelStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewChannelStore creates a new instance of ChannelStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChannelStore(t mockConstructorTestingTNewChannelStore) *ChannelStore {
	mock := &ChannelStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
