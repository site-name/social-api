// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	attribute "github.com/sitename/sitename/model/attribute"
	mock "github.com/stretchr/testify/mock"
)

// AttributeStore is an autogenerated mock type for the AttributeStore type
type AttributeStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *AttributeStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Delete provides a mock function with given fields: id
func (_m *AttributeStore) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterbyOption provides a mock function with given fields: option
func (_m *AttributeStore) FilterbyOption(option *attribute.AttributeFilterOption) (attribute.Attributes, error) {
	ret := _m.Called(option)

	var r0 attribute.Attributes
	if rf, ok := ret.Get(0).(func(*attribute.AttributeFilterOption) attribute.Attributes); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(attribute.Attributes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AttributeFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *AttributeStore) GetByOption(option *attribute.AttributeFilterOption) (*attribute.Attribute, error) {
	ret := _m.Called(option)

	var r0 *attribute.Attribute
	if rf, ok := ret.Get(0).(func(*attribute.AttributeFilterOption) *attribute.Attribute); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.Attribute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AttributeFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *AttributeStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ScanFields provides a mock function with given fields: v
func (_m *AttributeStore) ScanFields(v attribute.Attribute) []interface{} {
	ret := _m.Called(v)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(attribute.Attribute) []interface{}); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: attr
func (_m *AttributeStore) Upsert(attr *attribute.Attribute) (*attribute.Attribute, error) {
	ret := _m.Called(attr)

	var r0 *attribute.Attribute
	if rf, ok := ret.Get(0).(func(*attribute.Attribute) *attribute.Attribute); ok {
		r0 = rf(attr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.Attribute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.Attribute) error); ok {
		r1 = rf(attr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
