// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// AttributeStore is an autogenerated mock type for the AttributeStore type
type AttributeStore struct {
	mock.Mock
}

// CountByOptions provides a mock function with given fields: options
func (_m *AttributeStore) CountByOptions(options *model.AttributeFilterOption) (int64, error) {
	ret := _m.Called(options)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AttributeFilterOption) (int64, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.AttributeFilterOption) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.AttributeFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ids
func (_m *AttributeStore) Delete(ids ...string) (int64, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(...string) (int64, error)); ok {
		return rf(ids...)
	}
	if rf, ok := ret.Get(0).(func(...string) int64); ok {
		r0 = rf(ids...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterbyOption provides a mock function with given fields: option
func (_m *AttributeStore) FilterbyOption(option *model.AttributeFilterOption) (model.Attributes, error) {
	ret := _m.Called(option)

	var r0 model.Attributes
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AttributeFilterOption) (model.Attributes, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.AttributeFilterOption) model.Attributes); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Attributes)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AttributeFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPageTypeAttributes provides a mock function with given fields: pageTypeID, unassigned
func (_m *AttributeStore) GetPageTypeAttributes(pageTypeID string, unassigned bool) (model.Attributes, error) {
	ret := _m.Called(pageTypeID, unassigned)

	var r0 model.Attributes
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool) (model.Attributes, error)); ok {
		return rf(pageTypeID, unassigned)
	}
	if rf, ok := ret.Get(0).(func(string, bool) model.Attributes); ok {
		r0 = rf(pageTypeID, unassigned)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Attributes)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(pageTypeID, unassigned)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductTypeAttributes provides a mock function with given fields: productTypeID, unassigned, filter
func (_m *AttributeStore) GetProductTypeAttributes(productTypeID string, unassigned bool, filter *model.AttributeFilterOption) (model.Attributes, error) {
	ret := _m.Called(productTypeID, unassigned, filter)

	var r0 model.Attributes
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bool, *model.AttributeFilterOption) (model.Attributes, error)); ok {
		return rf(productTypeID, unassigned, filter)
	}
	if rf, ok := ret.Get(0).(func(string, bool, *model.AttributeFilterOption) model.Attributes); ok {
		r0 = rf(productTypeID, unassigned, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Attributes)
		}
	}

	if rf, ok := ret.Get(1).(func(string, bool, *model.AttributeFilterOption) error); ok {
		r1 = rf(productTypeID, unassigned, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: attr
func (_m *AttributeStore) ScanFields(attr *model.Attribute) []interface{} {
	ret := _m.Called(attr)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.Attribute) []interface{}); ok {
		r0 = rf(attr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: attr
func (_m *AttributeStore) Upsert(attr *model.Attribute) (*model.Attribute, error) {
	ret := _m.Called(attr)

	var r0 *model.Attribute
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Attribute) (*model.Attribute, error)); ok {
		return rf(attr)
	}
	if rf, ok := ret.Get(0).(func(*model.Attribute) *model.Attribute); ok {
		r0 = rf(attr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Attribute)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Attribute) error); ok {
		r1 = rf(attr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAttributeStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAttributeStore creates a new instance of AttributeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAttributeStore(t mockConstructorTestingTNewAttributeStore) *AttributeStore {
	mock := &AttributeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
