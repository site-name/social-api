// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	model_helper "github.com/sitename/sitename/model_helper"
)

// AssignedProductAttributeStore is an autogenerated mock type for the AssignedProductAttributeStore type
type AssignedProductAttributeStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *AssignedProductAttributeStore) FilterByOptions(options model_helper.AssignedProductAttributeFilterOption) (model.AssignedProductAttributeSlice, error) {
	ret := _m.Called(options)

	var r0 model.AssignedProductAttributeSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.AssignedProductAttributeFilterOption) (model.AssignedProductAttributeSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.AssignedProductAttributeFilterOption) model.AssignedProductAttributeSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AssignedProductAttributeSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.AssignedProductAttributeFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithOption provides a mock function with given fields: option
func (_m *AssignedProductAttributeStore) GetWithOption(option model_helper.AssignedProductAttributeFilterOption) (*model.AssignedProductAttribute, error) {
	ret := _m.Called(option)

	var r0 *model.AssignedProductAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.AssignedProductAttributeFilterOption) (*model.AssignedProductAttribute, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.AssignedProductAttributeFilterOption) *model.AssignedProductAttribute); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedProductAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.AssignedProductAttributeFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAssignedProductAttributeStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAssignedProductAttributeStore creates a new instance of AssignedProductAttributeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAssignedProductAttributeStore(t mockConstructorTestingTNewAssignedProductAttributeStore) *AssignedProductAttributeStore {
	mock := &AssignedProductAttributeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
