// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	attribute "github.com/sitename/sitename/model/attribute"
	mock "github.com/stretchr/testify/mock"
)

// AssignedProductAttributeStore is an autogenerated mock type for the AssignedProductAttributeStore type
type AssignedProductAttributeStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *AssignedProductAttributeStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: id
func (_m *AssignedProductAttributeStore) Get(id string) (*attribute.AssignedProductAttribute, error) {
	ret := _m.Called(id)

	var r0 *attribute.AssignedProductAttribute
	if rf, ok := ret.Get(0).(func(string) *attribute.AssignedProductAttribute); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AssignedProductAttribute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithOption provides a mock function with given fields: option
func (_m *AssignedProductAttributeStore) GetWithOption(option *attribute.AssignedProductAttributeFilterOption) (*attribute.AssignedProductAttribute, error) {
	ret := _m.Called(option)

	var r0 *attribute.AssignedProductAttribute
	if rf, ok := ret.Get(0).(func(*attribute.AssignedProductAttributeFilterOption) *attribute.AssignedProductAttribute); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AssignedProductAttribute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AssignedProductAttributeFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: assignedProductAttribute
func (_m *AssignedProductAttributeStore) Save(assignedProductAttribute *attribute.AssignedProductAttribute) (*attribute.AssignedProductAttribute, error) {
	ret := _m.Called(assignedProductAttribute)

	var r0 *attribute.AssignedProductAttribute
	if rf, ok := ret.Get(0).(func(*attribute.AssignedProductAttribute) *attribute.AssignedProductAttribute); ok {
		r0 = rf(assignedProductAttribute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AssignedProductAttribute)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AssignedProductAttribute) error); ok {
		r1 = rf(assignedProductAttribute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
