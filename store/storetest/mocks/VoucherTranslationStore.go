// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// VoucherTranslationStore is an autogenerated mock type for the VoucherTranslationStore type
type VoucherTranslationStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *VoucherTranslationStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOption provides a mock function with given fields: option
func (_m *VoucherTranslationStore) FilterByOption(option *product_and_discount.VoucherTranslationFilterOption) ([]*product_and_discount.VoucherTranslation, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.VoucherTranslation
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherTranslationFilterOption) []*product_and_discount.VoucherTranslation); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.VoucherTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherTranslationFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *VoucherTranslationStore) Get(id string) (*product_and_discount.VoucherTranslation, error) {
	ret := _m.Called(id)

	var r0 *product_and_discount.VoucherTranslation
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.VoucherTranslation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.VoucherTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *VoucherTranslationStore) GetByOption(option *product_and_discount.VoucherTranslationFilterOption) (*product_and_discount.VoucherTranslation, error) {
	ret := _m.Called(option)

	var r0 *product_and_discount.VoucherTranslation
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherTranslationFilterOption) *product_and_discount.VoucherTranslation); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.VoucherTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherTranslationFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: translation
func (_m *VoucherTranslationStore) Save(translation *product_and_discount.VoucherTranslation) (*product_and_discount.VoucherTranslation, error) {
	ret := _m.Called(translation)

	var r0 *product_and_discount.VoucherTranslation
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherTranslation) *product_and_discount.VoucherTranslation); ok {
		r0 = rf(translation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.VoucherTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherTranslation) error); ok {
		r1 = rf(translation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
