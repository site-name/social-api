// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	warehouse "github.com/sitename/sitename/model/warehouse"
)

// WarehouseStore is an autogenerated mock type for the WarehouseStore type
type WarehouseStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *WarehouseStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: id
func (_m *WarehouseStore) Get(id string) (*warehouse.WareHouse, error) {
	ret := _m.Called(id)

	var r0 *warehouse.WareHouse
	if rf, ok := ret.Get(0).(func(string) *warehouse.WareHouse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.WareHouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWarehousesHeaders provides a mock function with given fields: ids
func (_m *WarehouseStore) GetWarehousesHeaders(ids []string) ([]string, error) {
	ret := _m.Called(ids)

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *WarehouseStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *WarehouseStore) Save(_a0 *warehouse.WareHouse) (*warehouse.WareHouse, error) {
	ret := _m.Called(_a0)

	var r0 *warehouse.WareHouse
	if rf, ok := ret.Get(0).(func(*warehouse.WareHouse) *warehouse.WareHouse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.WareHouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*warehouse.WareHouse) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
