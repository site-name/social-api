// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// WarehouseStore is an autogenerated mock type for the WarehouseStore type
type WarehouseStore struct {
	mock.Mock
}

// ApplicableForClickAndCollectCheckoutLines provides a mock function with given fields: checkoutLines, country
func (_m *WarehouseStore) ApplicableForClickAndCollectCheckoutLines(checkoutLines model.CheckoutLineSlice, country model.CountryCode) (model.WarehouseSlice, error) {
	ret := _m.Called(checkoutLines, country)

	var r0 model.WarehouseSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model.CheckoutLineSlice, model.CountryCode) (model.WarehouseSlice, error)); ok {
		return rf(checkoutLines, country)
	}
	if rf, ok := ret.Get(0).(func(model.CheckoutLineSlice, model.CountryCode) model.WarehouseSlice); ok {
		r0 = rf(checkoutLines, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WarehouseSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model.CheckoutLineSlice, model.CountryCode) error); ok {
		r1 = rf(checkoutLines, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicableForClickAndCollectNoQuantityCheck provides a mock function with given fields: checkoutLines, country
func (_m *WarehouseStore) ApplicableForClickAndCollectNoQuantityCheck(checkoutLines model.CheckoutLineSlice, country model.CountryCode) (model.WarehouseSlice, error) {
	ret := _m.Called(checkoutLines, country)

	var r0 model.WarehouseSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model.CheckoutLineSlice, model.CountryCode) (model.WarehouseSlice, error)); ok {
		return rf(checkoutLines, country)
	}
	if rf, ok := ret.Get(0).(func(model.CheckoutLineSlice, model.CountryCode) model.WarehouseSlice); ok {
		r0 = rf(checkoutLines, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WarehouseSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model.CheckoutLineSlice, model.CountryCode) error); ok {
		r1 = rf(checkoutLines, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicableForClickAndCollectOrderLines provides a mock function with given fields: orderLines, country
func (_m *WarehouseStore) ApplicableForClickAndCollectOrderLines(orderLines model.OrderLineSlice, country model.CountryCode) (model.WarehouseSlice, error) {
	ret := _m.Called(orderLines, country)

	var r0 model.WarehouseSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model.OrderLineSlice, model.CountryCode) (model.WarehouseSlice, error)); ok {
		return rf(orderLines, country)
	}
	if rf, ok := ret.Get(0).(func(model.OrderLineSlice, model.CountryCode) model.WarehouseSlice); ok {
		r0 = rf(orderLines, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WarehouseSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model.OrderLineSlice, model.CountryCode) error); ok {
		r1 = rf(orderLines, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, ids
func (_m *WarehouseStore) Delete(tx boil.ContextTransactor, ids []string) error {
	ret := _m.Called(tx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOprion provides a mock function with given fields: option
func (_m *WarehouseStore) FilterByOprion(option model_helper.WarehouseFilterOption) (model.WarehouseSlice, error) {
	ret := _m.Called(option)

	var r0 model.WarehouseSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.WarehouseFilterOption) (model.WarehouseSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.WarehouseFilterOption) model.WarehouseSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WarehouseSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.WarehouseFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: _a0
func (_m *WarehouseStore) Upsert(_a0 model.Warehouse) (*model.Warehouse, error) {
	ret := _m.Called(_a0)

	var r0 *model.Warehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Warehouse) (*model.Warehouse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.Warehouse) *model.Warehouse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Warehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Warehouse) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WarehouseByStockID provides a mock function with given fields: stockID
func (_m *WarehouseStore) WarehouseByStockID(stockID string) (*model.Warehouse, error) {
	ret := _m.Called(stockID)

	var r0 *model.Warehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Warehouse, error)); ok {
		return rf(stockID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Warehouse); ok {
		r0 = rf(stockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Warehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WarehouseShipingZonesByCountryCodeAndChannelID provides a mock function with given fields: countryCode, channelID
func (_m *WarehouseStore) WarehouseShipingZonesByCountryCodeAndChannelID(countryCode string, channelID string) (model.WarehouseShippingZoneSlice, error) {
	ret := _m.Called(countryCode, channelID)

	var r0 model.WarehouseShippingZoneSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (model.WarehouseShippingZoneSlice, error)); ok {
		return rf(countryCode, channelID)
	}
	if rf, ok := ret.Get(0).(func(string, string) model.WarehouseShippingZoneSlice); ok {
		r0 = rf(countryCode, channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.WarehouseShippingZoneSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(countryCode, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWarehouseStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewWarehouseStore creates a new instance of WarehouseStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWarehouseStore(t mockConstructorTestingTNewWarehouseStore) *WarehouseStore {
	mock := &WarehouseStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
