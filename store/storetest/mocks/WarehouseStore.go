// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// WarehouseStore is an autogenerated mock type for the WarehouseStore type
type WarehouseStore struct {
	mock.Mock
}

// ApplicableForClickAndCollectCheckoutLines provides a mock function with given fields: checkoutLines, country
func (_m *WarehouseStore) ApplicableForClickAndCollectCheckoutLines(checkoutLines model.CheckoutLines, country model.CountryCode) (model.Warehouses, error) {
	ret := _m.Called(checkoutLines, country)

	var r0 model.Warehouses
	var r1 error
	if rf, ok := ret.Get(0).(func(model.CheckoutLines, model.CountryCode) (model.Warehouses, error)); ok {
		return rf(checkoutLines, country)
	}
	if rf, ok := ret.Get(0).(func(model.CheckoutLines, model.CountryCode) model.Warehouses); ok {
		r0 = rf(checkoutLines, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Warehouses)
		}
	}

	if rf, ok := ret.Get(1).(func(model.CheckoutLines, model.CountryCode) error); ok {
		r1 = rf(checkoutLines, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicableForClickAndCollectNoQuantityCheck provides a mock function with given fields: checkoutLines, country
func (_m *WarehouseStore) ApplicableForClickAndCollectNoQuantityCheck(checkoutLines model.CheckoutLines, country model.CountryCode) (model.Warehouses, error) {
	ret := _m.Called(checkoutLines, country)

	var r0 model.Warehouses
	var r1 error
	if rf, ok := ret.Get(0).(func(model.CheckoutLines, model.CountryCode) (model.Warehouses, error)); ok {
		return rf(checkoutLines, country)
	}
	if rf, ok := ret.Get(0).(func(model.CheckoutLines, model.CountryCode) model.Warehouses); ok {
		r0 = rf(checkoutLines, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Warehouses)
		}
	}

	if rf, ok := ret.Get(1).(func(model.CheckoutLines, model.CountryCode) error); ok {
		r1 = rf(checkoutLines, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicableForClickAndCollectOrderLines provides a mock function with given fields: orderLines, country
func (_m *WarehouseStore) ApplicableForClickAndCollectOrderLines(orderLines model.OrderLines, country model.CountryCode) (model.Warehouses, error) {
	ret := _m.Called(orderLines, country)

	var r0 model.Warehouses
	var r1 error
	if rf, ok := ret.Get(0).(func(model.OrderLines, model.CountryCode) (model.Warehouses, error)); ok {
		return rf(orderLines, country)
	}
	if rf, ok := ret.Get(0).(func(model.OrderLines, model.CountryCode) model.Warehouses); ok {
		r0 = rf(orderLines, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Warehouses)
		}
	}

	if rf, ok := ret.Get(1).(func(model.OrderLines, model.CountryCode) error); ok {
		r1 = rf(orderLines, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: transaction, ids
func (_m *WarehouseStore) Delete(transaction *gorm.DB, ids ...string) error {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, transaction)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...string) error); ok {
		r0 = rf(transaction, ids...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOprion provides a mock function with given fields: option
func (_m *WarehouseStore) FilterByOprion(option *model.WarehouseFilterOption) ([]*model.WareHouse, error) {
	ret := _m.Called(option)

	var r0 []*model.WareHouse
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.WarehouseFilterOption) ([]*model.WareHouse, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.WarehouseFilterOption) []*model.WareHouse); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.WareHouse)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.WarehouseFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *WarehouseStore) GetByOption(option *model.WarehouseFilterOption) (*model.WareHouse, error) {
	ret := _m.Called(option)

	var r0 *model.WareHouse
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.WarehouseFilterOption) (*model.WareHouse, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.WarehouseFilterOption) *model.WareHouse); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WareHouse)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.WarehouseFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *WarehouseStore) Save(_a0 *model.WareHouse) (*model.WareHouse, error) {
	ret := _m.Called(_a0)

	var r0 *model.WareHouse
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.WareHouse) (*model.WareHouse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.WareHouse) *model.WareHouse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WareHouse)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.WareHouse) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: wh
func (_m *WarehouseStore) ScanFields(wh *model.WareHouse) []interface{} {
	ret := _m.Called(wh)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.WareHouse) []interface{}); ok {
		r0 = rf(wh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Update provides a mock function with given fields: warehouse
func (_m *WarehouseStore) Update(warehouse *model.WareHouse) (*model.WareHouse, error) {
	ret := _m.Called(warehouse)

	var r0 *model.WareHouse
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.WareHouse) (*model.WareHouse, error)); ok {
		return rf(warehouse)
	}
	if rf, ok := ret.Get(0).(func(*model.WareHouse) *model.WareHouse); ok {
		r0 = rf(warehouse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WareHouse)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.WareHouse) error); ok {
		r1 = rf(warehouse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WarehouseByStockID provides a mock function with given fields: stockID
func (_m *WarehouseStore) WarehouseByStockID(stockID string) (*model.WareHouse, error) {
	ret := _m.Called(stockID)

	var r0 *model.WareHouse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.WareHouse, error)); ok {
		return rf(stockID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.WareHouse); ok {
		r0 = rf(stockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WareHouse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WarehouseShipingZonesByCountryCodeAndChannelID provides a mock function with given fields: countryCode, channelID
func (_m *WarehouseStore) WarehouseShipingZonesByCountryCodeAndChannelID(countryCode string, channelID string) ([]*model.WarehouseShippingZone, error) {
	ret := _m.Called(countryCode, channelID)

	var r0 []*model.WarehouseShippingZone
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]*model.WarehouseShippingZone, error)); ok {
		return rf(countryCode, channelID)
	}
	if rf, ok := ret.Get(0).(func(string, string) []*model.WarehouseShippingZone); ok {
		r0 = rf(countryCode, channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.WarehouseShippingZone)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(countryCode, channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWarehouseStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewWarehouseStore creates a new instance of WarehouseStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWarehouseStore(t mockConstructorTestingTNewWarehouseStore) *WarehouseStore {
	mock := &WarehouseStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
