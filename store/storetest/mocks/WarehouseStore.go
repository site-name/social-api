// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	checkout "github.com/sitename/sitename/model/checkout"
	mock "github.com/stretchr/testify/mock"

	model "github.com/sitename/sitename/model"

	warehouse "github.com/sitename/sitename/model/warehouse"
)

// WarehouseStore is an autogenerated mock type for the WarehouseStore type
type WarehouseStore struct {
	mock.Mock
}

// ApplicableForClickAndCollect provides a mock function with given fields: checkoutLines, country
func (_m *WarehouseStore) ApplicableForClickAndCollect(checkoutLines checkout.CheckoutLines, country string) (warehouse.Warehouses, error) {
	ret := _m.Called(checkoutLines, country)

	var r0 warehouse.Warehouses
	if rf, ok := ret.Get(0).(func(checkout.CheckoutLines, string) warehouse.Warehouses); ok {
		r0 = rf(checkoutLines, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(warehouse.Warehouses)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(checkout.CheckoutLines, string) error); ok {
		r1 = rf(checkoutLines, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplicableForClickAndCollectNoQuantityCheck provides a mock function with given fields: checkoutLines, country
func (_m *WarehouseStore) ApplicableForClickAndCollectNoQuantityCheck(checkoutLines checkout.CheckoutLines, country string) (warehouse.Warehouses, error) {
	ret := _m.Called(checkoutLines, country)

	var r0 warehouse.Warehouses
	if rf, ok := ret.Get(0).(func(checkout.CheckoutLines, string) warehouse.Warehouses); ok {
		r0 = rf(checkoutLines, country)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(warehouse.Warehouses)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(checkout.CheckoutLines, string) error); ok {
		r1 = rf(checkoutLines, country)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOprion provides a mock function with given fields: option
func (_m *WarehouseStore) FilterByOprion(option *warehouse.WarehouseFilterOption) ([]*warehouse.WareHouse, error) {
	ret := _m.Called(option)

	var r0 []*warehouse.WareHouse
	if rf, ok := ret.Get(0).(func(*warehouse.WarehouseFilterOption) []*warehouse.WareHouse); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.WareHouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*warehouse.WarehouseFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *WarehouseStore) Get(id string) (*warehouse.WareHouse, error) {
	ret := _m.Called(id)

	var r0 *warehouse.WareHouse
	if rf, ok := ret.Get(0).(func(string) *warehouse.WareHouse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.WareHouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *WarehouseStore) GetByOption(option *warehouse.WarehouseFilterOption) (*warehouse.WareHouse, error) {
	ret := _m.Called(option)

	var r0 *warehouse.WareHouse
	if rf, ok := ret.Get(0).(func(*warehouse.WarehouseFilterOption) *warehouse.WareHouse); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.WareHouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*warehouse.WarehouseFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *WarehouseStore) ModelFields(prefix string) model.AnyArray[string] {
	ret := _m.Called(prefix)

	var r0 model.AnyArray[string]
	if rf, ok := ret.Get(0).(func(string) model.AnyArray[string]); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AnyArray[string])
		}
	}

	return r0
}

// Save provides a mock function with given fields: _a0
func (_m *WarehouseStore) Save(_a0 *warehouse.WareHouse) (*warehouse.WareHouse, error) {
	ret := _m.Called(_a0)

	var r0 *warehouse.WareHouse
	if rf, ok := ret.Get(0).(func(*warehouse.WareHouse) *warehouse.WareHouse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.WareHouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*warehouse.WareHouse) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: wh
func (_m *WarehouseStore) ScanFields(wh warehouse.WareHouse) []interface{} {
	ret := _m.Called(wh)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(warehouse.WareHouse) []interface{}); ok {
		r0 = rf(wh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// WarehouseByStockID provides a mock function with given fields: stockID
func (_m *WarehouseStore) WarehouseByStockID(stockID string) (*warehouse.WareHouse, error) {
	ret := _m.Called(stockID)

	var r0 *warehouse.WareHouse
	if rf, ok := ret.Get(0).(func(string) *warehouse.WareHouse); ok {
		r0 = rf(stockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.WareHouse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
