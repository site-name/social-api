// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// ShippingMethodChannelListingStore is an autogenerated mock type for the ShippingMethodChannelListingStore type
type ShippingMethodChannelListingStore struct {
	mock.Mock
}

// BulkDelete provides a mock function with given fields: transaction, options
func (_m *ShippingMethodChannelListingStore) BulkDelete(transaction *gorm.DB, options *model.ShippingMethodChannelListingFilterOption) error {
	ret := _m.Called(transaction, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.ShippingMethodChannelListingFilterOption) error); ok {
		r0 = rf(transaction, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *ShippingMethodChannelListingStore) FilterByOption(option *model.ShippingMethodChannelListingFilterOption) ([]*model.ShippingMethodChannelListing, error) {
	ret := _m.Called(option)

	var r0 []*model.ShippingMethodChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ShippingMethodChannelListingFilterOption) ([]*model.ShippingMethodChannelListing, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.ShippingMethodChannelListingFilterOption) []*model.ShippingMethodChannelListing); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ShippingMethodChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ShippingMethodChannelListingFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: listingID
func (_m *ShippingMethodChannelListingStore) Get(listingID string) (*model.ShippingMethodChannelListing, error) {
	ret := _m.Called(listingID)

	var r0 *model.ShippingMethodChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ShippingMethodChannelListing, error)); ok {
		return rf(listingID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ShippingMethodChannelListing); ok {
		r0 = rf(listingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ShippingMethodChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(listingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: transaction, listings
func (_m *ShippingMethodChannelListingStore) Upsert(transaction *gorm.DB, listings model.ShippingMethodChannelListings) (model.ShippingMethodChannelListings, error) {
	ret := _m.Called(transaction, listings)

	var r0 model.ShippingMethodChannelListings
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.ShippingMethodChannelListings) (model.ShippingMethodChannelListings, error)); ok {
		return rf(transaction, listings)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.ShippingMethodChannelListings) model.ShippingMethodChannelListings); ok {
		r0 = rf(transaction, listings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ShippingMethodChannelListings)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, model.ShippingMethodChannelListings) error); ok {
		r1 = rf(transaction, listings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewShippingMethodChannelListingStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewShippingMethodChannelListingStore creates a new instance of ShippingMethodChannelListingStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewShippingMethodChannelListingStore(t mockConstructorTestingTNewShippingMethodChannelListingStore) *ShippingMethodChannelListingStore {
	mock := &ShippingMethodChannelListingStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
