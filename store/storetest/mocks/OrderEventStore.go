// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// OrderEventStore is an autogenerated mock type for the OrderEventStore type
type OrderEventStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *OrderEventStore) FilterByOptions(options *model.OrderEventFilterOptions) ([]*model.OrderEvent, error) {
	ret := _m.Called(options)

	var r0 []*model.OrderEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.OrderEventFilterOptions) ([]*model.OrderEvent, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.OrderEventFilterOptions) []*model.OrderEvent); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.OrderEventFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: orderEventID
func (_m *OrderEventStore) Get(orderEventID string) (*model.OrderEvent, error) {
	ret := _m.Called(orderEventID)

	var r0 *model.OrderEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.OrderEvent, error)); ok {
		return rf(orderEventID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.OrderEvent); ok {
		r0 = rf(orderEventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderEventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: transaction, orderEvent
func (_m *OrderEventStore) Save(transaction *gorm.DB, orderEvent *model.OrderEvent) (*model.OrderEvent, error) {
	ret := _m.Called(transaction, orderEvent)

	var r0 *model.OrderEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.OrderEvent) (*model.OrderEvent, error)); ok {
		return rf(transaction, orderEvent)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.OrderEvent) *model.OrderEvent); ok {
		r0 = rf(transaction, orderEvent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.OrderEvent) error); ok {
		r1 = rf(transaction, orderEvent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderEventStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderEventStore creates a new instance of OrderEventStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderEventStore(t mockConstructorTestingTNewOrderEventStore) *OrderEventStore {
	mock := &OrderEventStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
