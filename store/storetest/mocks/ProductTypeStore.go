// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// ProductTypeStore is an autogenerated mock type for the ProductTypeStore type
type ProductTypeStore struct {
	mock.Mock
}

// Count provides a mock function with given fields: options
func (_m *ProductTypeStore) Count(options *model.ProductTypeFilterOption) (int64, error) {
	ret := _m.Called(options)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductTypeFilterOption) (int64, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductTypeFilterOption) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.ProductTypeFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterProductTypesByCheckoutToken provides a mock function with given fields: checkoutToken
func (_m *ProductTypeStore) FilterProductTypesByCheckoutToken(checkoutToken string) ([]*model.ProductType, error) {
	ret := _m.Called(checkoutToken)

	var r0 []*model.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.ProductType, error)); ok {
		return rf(checkoutToken)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.ProductType); ok {
		r0 = rf(checkoutToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(checkoutToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterbyOption provides a mock function with given fields: options
func (_m *ProductTypeStore) FilterbyOption(options *model.ProductTypeFilterOption) ([]*model.ProductType, error) {
	ret := _m.Called(options)

	var r0 []*model.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductTypeFilterOption) ([]*model.ProductType, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductTypeFilterOption) []*model.ProductType); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductTypeFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: options
func (_m *ProductTypeStore) GetByOption(options *model.ProductTypeFilterOption) (*model.ProductType, error) {
	ret := _m.Called(options)

	var r0 *model.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductTypeFilterOption) (*model.ProductType, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductTypeFilterOption) *model.ProductType); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductTypeFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductTypeByProductVariantID provides a mock function with given fields: variantID
func (_m *ProductTypeStore) ProductTypeByProductVariantID(variantID string) (*model.ProductType, error) {
	ret := _m.Called(variantID)

	var r0 *model.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductType, error)); ok {
		return rf(variantID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductType); ok {
		r0 = rf(variantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(variantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductTypesByProductIDs provides a mock function with given fields: productIDs
func (_m *ProductTypeStore) ProductTypesByProductIDs(productIDs []string) ([]*model.ProductType, error) {
	ret := _m.Called(productIDs)

	var r0 []*model.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*model.ProductType, error)); ok {
		return rf(productIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) []*model.ProductType); ok {
		r0 = rf(productIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(productIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: productType
func (_m *ProductTypeStore) Save(productType *model.ProductType) (*model.ProductType, error) {
	ret := _m.Called(productType)

	var r0 *model.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductType) (*model.ProductType, error)); ok {
		return rf(productType)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductType) *model.ProductType); ok {
		r0 = rf(productType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductType) error); ok {
		r1 = rf(productType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductTypeStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductTypeStore creates a new instance of ProductTypeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductTypeStore(t mockConstructorTestingTNewProductTypeStore) *ProductTypeStore {
	mock := &ProductTypeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
