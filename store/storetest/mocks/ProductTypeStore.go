// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// ProductTypeStore is an autogenerated mock type for the ProductTypeStore type
type ProductTypeStore struct {
	mock.Mock
}

// Count provides a mock function with given fields: options
func (_m *ProductTypeStore) Count(options *product_and_discount.ProductTypeFilterOption) (int64, error) {
	ret := _m.Called(options)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductTypeFilterOption) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductTypeFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *ProductTypeStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterProductTypesByCheckoutToken provides a mock function with given fields: checkoutToken
func (_m *ProductTypeStore) FilterProductTypesByCheckoutToken(checkoutToken string) ([]*product_and_discount.ProductType, error) {
	ret := _m.Called(checkoutToken)

	var r0 []*product_and_discount.ProductType
	if rf, ok := ret.Get(0).(func(string) []*product_and_discount.ProductType); ok {
		r0 = rf(checkoutToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.ProductType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(checkoutToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterbyOption provides a mock function with given fields: options
func (_m *ProductTypeStore) FilterbyOption(options *product_and_discount.ProductTypeFilterOption) ([]*product_and_discount.ProductType, error) {
	ret := _m.Called(options)

	var r0 []*product_and_discount.ProductType
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductTypeFilterOption) []*product_and_discount.ProductType); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.ProductType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductTypeFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: options
func (_m *ProductTypeStore) GetByOption(options *product_and_discount.ProductTypeFilterOption) (*product_and_discount.ProductType, error) {
	ret := _m.Called(options)

	var r0 *product_and_discount.ProductType
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductTypeFilterOption) *product_and_discount.ProductType); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.ProductType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductTypeFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *ProductTypeStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ProductTypeByProductVariantID provides a mock function with given fields: variantID
func (_m *ProductTypeStore) ProductTypeByProductVariantID(variantID string) (*product_and_discount.ProductType, error) {
	ret := _m.Called(variantID)

	var r0 *product_and_discount.ProductType
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.ProductType); ok {
		r0 = rf(variantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.ProductType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(variantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductTypesByProductIDs provides a mock function with given fields: productIDs
func (_m *ProductTypeStore) ProductTypesByProductIDs(productIDs []string) ([]*product_and_discount.ProductType, error) {
	ret := _m.Called(productIDs)

	var r0 []*product_and_discount.ProductType
	if rf, ok := ret.Get(0).(func([]string) []*product_and_discount.ProductType); ok {
		r0 = rf(productIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.ProductType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(productIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: productType
func (_m *ProductTypeStore) Save(productType *product_and_discount.ProductType) (*product_and_discount.ProductType, error) {
	ret := _m.Called(productType)

	var r0 *product_and_discount.ProductType
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductType) *product_and_discount.ProductType); ok {
		r0 = rf(productType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.ProductType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductType) error); ok {
		r1 = rf(productType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
