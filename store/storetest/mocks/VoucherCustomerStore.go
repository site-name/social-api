// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	model_helper "github.com/sitename/sitename/model_helper"
)

// VoucherCustomerStore is an autogenerated mock type for the VoucherCustomerStore type
type VoucherCustomerStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ids
func (_m *VoucherCustomerStore) Delete(ids []string) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOptions provides a mock function with given fields: options
func (_m *VoucherCustomerStore) FilterByOptions(options model_helper.VoucherCustomerFilterOption) (model.VoucherCustomerSlice, error) {
	ret := _m.Called(options)

	var r0 model.VoucherCustomerSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.VoucherCustomerFilterOption) (model.VoucherCustomerSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.VoucherCustomerFilterOption) model.VoucherCustomerSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.VoucherCustomerSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.VoucherCustomerFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: options
func (_m *VoucherCustomerStore) GetByOption(options model_helper.VoucherCustomerFilterOption) (*model.VoucherCustomer, error) {
	ret := _m.Called(options)

	var r0 *model.VoucherCustomer
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.VoucherCustomerFilterOption) (*model.VoucherCustomer, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.VoucherCustomerFilterOption) *model.VoucherCustomer); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.VoucherCustomer)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.VoucherCustomerFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: voucherCustomer
func (_m *VoucherCustomerStore) Save(voucherCustomer model.VoucherCustomer) (*model.VoucherCustomer, error) {
	ret := _m.Called(voucherCustomer)

	var r0 *model.VoucherCustomer
	var r1 error
	if rf, ok := ret.Get(0).(func(model.VoucherCustomer) (*model.VoucherCustomer, error)); ok {
		return rf(voucherCustomer)
	}
	if rf, ok := ret.Get(0).(func(model.VoucherCustomer) *model.VoucherCustomer); ok {
		r0 = rf(voucherCustomer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.VoucherCustomer)
		}
	}

	if rf, ok := ret.Get(1).(func(model.VoucherCustomer) error); ok {
		r1 = rf(voucherCustomer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewVoucherCustomerStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewVoucherCustomerStore creates a new instance of VoucherCustomerStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVoucherCustomerStore(t mockConstructorTestingTNewVoucherCustomerStore) *VoucherCustomerStore {
	mock := &VoucherCustomerStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
