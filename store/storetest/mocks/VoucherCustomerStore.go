// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// VoucherCustomerStore is an autogenerated mock type for the VoucherCustomerStore type
type VoucherCustomerStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *VoucherCustomerStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// DeleteInBulk provides a mock function with given fields: options
func (_m *VoucherCustomerStore) DeleteInBulk(options *product_and_discount.VoucherCustomerFilterOption) error {
	ret := _m.Called(options)

	var r0 error
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherCustomerFilterOption) error); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOptions provides a mock function with given fields: options
func (_m *VoucherCustomerStore) FilterByOptions(options *product_and_discount.VoucherCustomerFilterOption) ([]*product_and_discount.VoucherCustomer, error) {
	ret := _m.Called(options)

	var r0 []*product_and_discount.VoucherCustomer
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherCustomerFilterOption) []*product_and_discount.VoucherCustomer); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.VoucherCustomer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherCustomerFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: options
func (_m *VoucherCustomerStore) GetByOption(options *product_and_discount.VoucherCustomerFilterOption) (*product_and_discount.VoucherCustomer, error) {
	ret := _m.Called(options)

	var r0 *product_and_discount.VoucherCustomer
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherCustomerFilterOption) *product_and_discount.VoucherCustomer); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.VoucherCustomer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherCustomerFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: voucherCustomer
func (_m *VoucherCustomerStore) Save(voucherCustomer *product_and_discount.VoucherCustomer) (*product_and_discount.VoucherCustomer, error) {
	ret := _m.Called(voucherCustomer)

	var r0 *product_and_discount.VoucherCustomer
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherCustomer) *product_and_discount.VoucherCustomer); ok {
		r0 = rf(voucherCustomer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.VoucherCustomer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherCustomer) error); ok {
		r1 = rf(voucherCustomer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
