// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	context "context"

	gorp "github.com/mattermost/gorp"
	mock "github.com/stretchr/testify/mock"

	squirrel "github.com/Masterminds/squirrel"

	store "github.com/sitename/sitename/store"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *Store) Address() store.AddressStore {
	ret := _m.Called()

	var r0 store.AddressStore
	if rf, ok := ret.Get(0).(func() store.AddressStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AddressStore)
		}
	}

	return r0
}

// Allocation provides a mock function with given fields:
func (_m *Store) Allocation() store.AllocationStore {
	ret := _m.Called()

	var r0 store.AllocationStore
	if rf, ok := ret.Get(0).(func() store.AllocationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AllocationStore)
		}
	}

	return r0
}

// App provides a mock function with given fields:
func (_m *Store) App() store.AppStore {
	ret := _m.Called()

	var r0 store.AppStore
	if rf, ok := ret.Get(0).(func() store.AppStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AppStore)
		}
	}

	return r0
}

// AppToken provides a mock function with given fields:
func (_m *Store) AppToken() store.AppTokenStore {
	ret := _m.Called()

	var r0 store.AppTokenStore
	if rf, ok := ret.Get(0).(func() store.AppTokenStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AppTokenStore)
		}
	}

	return r0
}

// AssignedPageAttribute provides a mock function with given fields:
func (_m *Store) AssignedPageAttribute() store.AssignedPageAttributeStore {
	ret := _m.Called()

	var r0 store.AssignedPageAttributeStore
	if rf, ok := ret.Get(0).(func() store.AssignedPageAttributeStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AssignedPageAttributeStore)
		}
	}

	return r0
}

// AssignedPageAttributeValue provides a mock function with given fields:
func (_m *Store) AssignedPageAttributeValue() store.AssignedPageAttributeValueStore {
	ret := _m.Called()

	var r0 store.AssignedPageAttributeValueStore
	if rf, ok := ret.Get(0).(func() store.AssignedPageAttributeValueStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AssignedPageAttributeValueStore)
		}
	}

	return r0
}

// AssignedProductAttribute provides a mock function with given fields:
func (_m *Store) AssignedProductAttribute() store.AssignedProductAttributeStore {
	ret := _m.Called()

	var r0 store.AssignedProductAttributeStore
	if rf, ok := ret.Get(0).(func() store.AssignedProductAttributeStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AssignedProductAttributeStore)
		}
	}

	return r0
}

// AssignedProductAttributeValue provides a mock function with given fields:
func (_m *Store) AssignedProductAttributeValue() store.AssignedProductAttributeValueStore {
	ret := _m.Called()

	var r0 store.AssignedProductAttributeValueStore
	if rf, ok := ret.Get(0).(func() store.AssignedProductAttributeValueStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AssignedProductAttributeValueStore)
		}
	}

	return r0
}

// AssignedVariantAttribute provides a mock function with given fields:
func (_m *Store) AssignedVariantAttribute() store.AssignedVariantAttributeStore {
	ret := _m.Called()

	var r0 store.AssignedVariantAttributeStore
	if rf, ok := ret.Get(0).(func() store.AssignedVariantAttributeStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AssignedVariantAttributeStore)
		}
	}

	return r0
}

// AssignedVariantAttributeValue provides a mock function with given fields:
func (_m *Store) AssignedVariantAttributeValue() store.AssignedVariantAttributeValueStore {
	ret := _m.Called()

	var r0 store.AssignedVariantAttributeValueStore
	if rf, ok := ret.Get(0).(func() store.AssignedVariantAttributeValueStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AssignedVariantAttributeValueStore)
		}
	}

	return r0
}

// Attribute provides a mock function with given fields:
func (_m *Store) Attribute() store.AttributeStore {
	ret := _m.Called()

	var r0 store.AttributeStore
	if rf, ok := ret.Get(0).(func() store.AttributeStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AttributeStore)
		}
	}

	return r0
}

// AttributePage provides a mock function with given fields:
func (_m *Store) AttributePage() store.AttributePageStore {
	ret := _m.Called()

	var r0 store.AttributePageStore
	if rf, ok := ret.Get(0).(func() store.AttributePageStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AttributePageStore)
		}
	}

	return r0
}

// AttributeProduct provides a mock function with given fields:
func (_m *Store) AttributeProduct() store.AttributeProductStore {
	ret := _m.Called()

	var r0 store.AttributeProductStore
	if rf, ok := ret.Get(0).(func() store.AttributeProductStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AttributeProductStore)
		}
	}

	return r0
}

// AttributeTranslation provides a mock function with given fields:
func (_m *Store) AttributeTranslation() store.AttributeTranslationStore {
	ret := _m.Called()

	var r0 store.AttributeTranslationStore
	if rf, ok := ret.Get(0).(func() store.AttributeTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AttributeTranslationStore)
		}
	}

	return r0
}

// AttributeValue provides a mock function with given fields:
func (_m *Store) AttributeValue() store.AttributeValueStore {
	ret := _m.Called()

	var r0 store.AttributeValueStore
	if rf, ok := ret.Get(0).(func() store.AttributeValueStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AttributeValueStore)
		}
	}

	return r0
}

// AttributeValueTranslation provides a mock function with given fields:
func (_m *Store) AttributeValueTranslation() store.AttributeValueTranslationStore {
	ret := _m.Called()

	var r0 store.AttributeValueTranslationStore
	if rf, ok := ret.Get(0).(func() store.AttributeValueTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AttributeValueTranslationStore)
		}
	}

	return r0
}

// AttributeVariant provides a mock function with given fields:
func (_m *Store) AttributeVariant() store.AttributeVariantStore {
	ret := _m.Called()

	var r0 store.AttributeVariantStore
	if rf, ok := ret.Get(0).(func() store.AttributeVariantStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AttributeVariantStore)
		}
	}

	return r0
}

// Audit provides a mock function with given fields:
func (_m *Store) Audit() store.AuditStore {
	ret := _m.Called()

	var r0 store.AuditStore
	if rf, ok := ret.Get(0).(func() store.AuditStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.AuditStore)
		}
	}

	return r0
}

// Category provides a mock function with given fields:
func (_m *Store) Category() store.CategoryStore {
	ret := _m.Called()

	var r0 store.CategoryStore
	if rf, ok := ret.Get(0).(func() store.CategoryStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CategoryStore)
		}
	}

	return r0
}

// CategoryTranslation provides a mock function with given fields:
func (_m *Store) CategoryTranslation() store.CategoryTranslationStore {
	ret := _m.Called()

	var r0 store.CategoryTranslationStore
	if rf, ok := ret.Get(0).(func() store.CategoryTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CategoryTranslationStore)
		}
	}

	return r0
}

// Channel provides a mock function with given fields:
func (_m *Store) Channel() store.ChannelStore {
	ret := _m.Called()

	var r0 store.ChannelStore
	if rf, ok := ret.Get(0).(func() store.ChannelStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ChannelStore)
		}
	}

	return r0
}

// Checkout provides a mock function with given fields:
func (_m *Store) Checkout() store.CheckoutStore {
	ret := _m.Called()

	var r0 store.CheckoutStore
	if rf, ok := ret.Get(0).(func() store.CheckoutStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CheckoutStore)
		}
	}

	return r0
}

// CheckoutLine provides a mock function with given fields:
func (_m *Store) CheckoutLine() store.CheckoutLineStore {
	ret := _m.Called()

	var r0 store.CheckoutLineStore
	if rf, ok := ret.Get(0).(func() store.CheckoutLineStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CheckoutLineStore)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Store) Close() {
	_m.Called()
}

// ClusterDiscovery provides a mock function with given fields:
func (_m *Store) ClusterDiscovery() store.ClusterDiscoveryStore {
	ret := _m.Called()

	var r0 store.ClusterDiscoveryStore
	if rf, ok := ret.Get(0).(func() store.ClusterDiscoveryStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ClusterDiscoveryStore)
		}
	}

	return r0
}

// Collection provides a mock function with given fields:
func (_m *Store) Collection() store.CollectionStore {
	ret := _m.Called()

	var r0 store.CollectionStore
	if rf, ok := ret.Get(0).(func() store.CollectionStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CollectionStore)
		}
	}

	return r0
}

// CollectionChannelListing provides a mock function with given fields:
func (_m *Store) CollectionChannelListing() store.CollectionChannelListingStore {
	ret := _m.Called()

	var r0 store.CollectionChannelListingStore
	if rf, ok := ret.Get(0).(func() store.CollectionChannelListingStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CollectionChannelListingStore)
		}
	}

	return r0
}

// CollectionProduct provides a mock function with given fields:
func (_m *Store) CollectionProduct() store.CollectionProductStore {
	ret := _m.Called()

	var r0 store.CollectionProductStore
	if rf, ok := ret.Get(0).(func() store.CollectionProductStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CollectionProductStore)
		}
	}

	return r0
}

// CollectionTranslation provides a mock function with given fields:
func (_m *Store) CollectionTranslation() store.CollectionTranslationStore {
	ret := _m.Called()

	var r0 store.CollectionTranslationStore
	if rf, ok := ret.Get(0).(func() store.CollectionTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CollectionTranslationStore)
		}
	}

	return r0
}

// CommonMetaDataIndex provides a mock function with given fields: tableName
func (_m *Store) CommonMetaDataIndex(tableName string) {
	_m.Called(tableName)
}

// CommonSeoMaxLength provides a mock function with given fields: table
func (_m *Store) CommonSeoMaxLength(table *gorp.TableMap) {
	_m.Called(table)
}

// Compliance provides a mock function with given fields:
func (_m *Store) Compliance() store.ComplianceStore {
	ret := _m.Called()

	var r0 store.ComplianceStore
	if rf, ok := ret.Get(0).(func() store.ComplianceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ComplianceStore)
		}
	}

	return r0
}

// Context provides a mock function with given fields:
func (_m *Store) Context() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// CreateForeignKeyIfNotExists provides a mock function with given fields: tableName, columnName, refTableName, refColumnName, onDeleteCascade
func (_m *Store) CreateForeignKeyIfNotExists(tableName string, columnName string, refTableName string, refColumnName string, onDeleteCascade bool) error {
	ret := _m.Called(tableName, columnName, refTableName, refColumnName, onDeleteCascade)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, bool) error); ok {
		r0 = rf(tableName, columnName, refTableName, refColumnName, onDeleteCascade)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateFullTextFuncIndexIfNotExists provides a mock function with given fields: indexName, tableName, function
func (_m *Store) CreateFullTextFuncIndexIfNotExists(indexName string, tableName string, function string) bool {
	ret := _m.Called(indexName, tableName, function)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(indexName, tableName, function)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateFullTextIndexIfNotExists provides a mock function with given fields: indexName, tableName, columnName
func (_m *Store) CreateFullTextIndexIfNotExists(indexName string, tableName string, columnName string) bool {
	ret := _m.Called(indexName, tableName, columnName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(indexName, tableName, columnName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CreateIndexIfNotExists provides a mock function with given fields: indexName, tableName, columnName
func (_m *Store) CreateIndexIfNotExists(indexName string, tableName string, columnName string) bool {
	ret := _m.Called(indexName, tableName, columnName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(indexName, tableName, columnName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CsvExportEvent provides a mock function with given fields:
func (_m *Store) CsvExportEvent() store.CsvExportEventStore {
	ret := _m.Called()

	var r0 store.CsvExportEventStore
	if rf, ok := ret.Get(0).(func() store.CsvExportEventStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CsvExportEventStore)
		}
	}

	return r0
}

// CsvExportFile provides a mock function with given fields:
func (_m *Store) CsvExportFile() store.CsvExportFileStore {
	ret := _m.Called()

	var r0 store.CsvExportFileStore
	if rf, ok := ret.Get(0).(func() store.CsvExportFileStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CsvExportFileStore)
		}
	}

	return r0
}

// CustomerEvent provides a mock function with given fields:
func (_m *Store) CustomerEvent() store.CustomerEventStore {
	ret := _m.Called()

	var r0 store.CustomerEventStore
	if rf, ok := ret.Get(0).(func() store.CustomerEventStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CustomerEventStore)
		}
	}

	return r0
}

// CustomerNote provides a mock function with given fields:
func (_m *Store) CustomerNote() store.CustomerNoteStore {
	ret := _m.Called()

	var r0 store.CustomerNoteStore
	if rf, ok := ret.Get(0).(func() store.CustomerNoteStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.CustomerNoteStore)
		}
	}

	return r0
}

// DBFromContext provides a mock function with given fields: ctx
func (_m *Store) DBFromContext(ctx context.Context) *gorp.DbMap {
	ret := _m.Called(ctx)

	var r0 *gorp.DbMap
	if rf, ok := ret.Get(0).(func(context.Context) *gorp.DbMap); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorp.DbMap)
		}
	}

	return r0
}

// DigitalContent provides a mock function with given fields:
func (_m *Store) DigitalContent() store.DigitalContentStore {
	ret := _m.Called()

	var r0 store.DigitalContentStore
	if rf, ok := ret.Get(0).(func() store.DigitalContentStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.DigitalContentStore)
		}
	}

	return r0
}

// DigitalContentUrl provides a mock function with given fields:
func (_m *Store) DigitalContentUrl() store.DigitalContentUrlStore {
	ret := _m.Called()

	var r0 store.DigitalContentUrlStore
	if rf, ok := ret.Get(0).(func() store.DigitalContentUrlStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.DigitalContentUrlStore)
		}
	}

	return r0
}

// DiscountSale provides a mock function with given fields:
func (_m *Store) DiscountSale() store.DiscountSaleStore {
	ret := _m.Called()

	var r0 store.DiscountSaleStore
	if rf, ok := ret.Get(0).(func() store.DiscountSaleStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.DiscountSaleStore)
		}
	}

	return r0
}

// DiscountSaleChannelListing provides a mock function with given fields:
func (_m *Store) DiscountSaleChannelListing() store.DiscountSaleChannelListingStore {
	ret := _m.Called()

	var r0 store.DiscountSaleChannelListingStore
	if rf, ok := ret.Get(0).(func() store.DiscountSaleChannelListingStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.DiscountSaleChannelListingStore)
		}
	}

	return r0
}

// DiscountSaleTranslation provides a mock function with given fields:
func (_m *Store) DiscountSaleTranslation() store.DiscountSaleTranslationStore {
	ret := _m.Called()

	var r0 store.DiscountSaleTranslationStore
	if rf, ok := ret.Get(0).(func() store.DiscountSaleTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.DiscountSaleTranslationStore)
		}
	}

	return r0
}

// DiscountVoucher provides a mock function with given fields:
func (_m *Store) DiscountVoucher() store.DiscountVoucherStore {
	ret := _m.Called()

	var r0 store.DiscountVoucherStore
	if rf, ok := ret.Get(0).(func() store.DiscountVoucherStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.DiscountVoucherStore)
		}
	}

	return r0
}

// DropAllTables provides a mock function with given fields:
func (_m *Store) DropAllTables() {
	_m.Called()
}

// FileInfo provides a mock function with given fields:
func (_m *Store) FileInfo() store.FileInfoStore {
	ret := _m.Called()

	var r0 store.FileInfoStore
	if rf, ok := ret.Get(0).(func() store.FileInfoStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.FileInfoStore)
		}
	}

	return r0
}

// Fulfillment provides a mock function with given fields:
func (_m *Store) Fulfillment() store.FulfillmentStore {
	ret := _m.Called()

	var r0 store.FulfillmentStore
	if rf, ok := ret.Get(0).(func() store.FulfillmentStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.FulfillmentStore)
		}
	}

	return r0
}

// FulfillmentLine provides a mock function with given fields:
func (_m *Store) FulfillmentLine() store.FulfillmentLineStore {
	ret := _m.Called()

	var r0 store.FulfillmentLineStore
	if rf, ok := ret.Get(0).(func() store.FulfillmentLineStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.FulfillmentLineStore)
		}
	}

	return r0
}

// GetAllConns provides a mock function with given fields:
func (_m *Store) GetAllConns() []*gorp.DbMap {
	ret := _m.Called()

	var r0 []*gorp.DbMap
	if rf, ok := ret.Get(0).(func() []*gorp.DbMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gorp.DbMap)
		}
	}

	return r0
}

// GetDbVersion provides a mock function with given fields: numerical
func (_m *Store) GetDbVersion(numerical bool) (string, error) {
	ret := _m.Called(numerical)

	var r0 string
	if rf, ok := ret.Get(0).(func(bool) string); ok {
		r0 = rf(numerical)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(numerical)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMaster provides a mock function with given fields:
func (_m *Store) GetMaster() *gorp.DbMap {
	ret := _m.Called()

	var r0 *gorp.DbMap
	if rf, ok := ret.Get(0).(func() *gorp.DbMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorp.DbMap)
		}
	}

	return r0
}

// GetQueryBuilder provides a mock function with given fields:
func (_m *Store) GetQueryBuilder() squirrel.StatementBuilderType {
	ret := _m.Called()

	var r0 squirrel.StatementBuilderType
	if rf, ok := ret.Get(0).(func() squirrel.StatementBuilderType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(squirrel.StatementBuilderType)
	}

	return r0
}

// GetReplica provides a mock function with given fields:
func (_m *Store) GetReplica() *gorp.DbMap {
	ret := _m.Called()

	var r0 *gorp.DbMap
	if rf, ok := ret.Get(0).(func() *gorp.DbMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorp.DbMap)
		}
	}

	return r0
}

// GiftCard provides a mock function with given fields:
func (_m *Store) GiftCard() store.GiftCardStore {
	ret := _m.Called()

	var r0 store.GiftCardStore
	if rf, ok := ret.Get(0).(func() store.GiftCardStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.GiftCardStore)
		}
	}

	return r0
}

// GiftCardCheckout provides a mock function with given fields:
func (_m *Store) GiftCardCheckout() store.GiftCardCheckoutStore {
	ret := _m.Called()

	var r0 store.GiftCardCheckoutStore
	if rf, ok := ret.Get(0).(func() store.GiftCardCheckoutStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.GiftCardCheckoutStore)
		}
	}

	return r0
}

// GiftCardOrder provides a mock function with given fields:
func (_m *Store) GiftCardOrder() store.GiftCardOrderStore {
	ret := _m.Called()

	var r0 store.GiftCardOrderStore
	if rf, ok := ret.Get(0).(func() store.GiftCardOrderStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.GiftCardOrderStore)
		}
	}

	return r0
}

// Invoice provides a mock function with given fields:
func (_m *Store) Invoice() store.InvoiceStore {
	ret := _m.Called()

	var r0 store.InvoiceStore
	if rf, ok := ret.Get(0).(func() store.InvoiceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.InvoiceStore)
		}
	}

	return r0
}

// InvoiceEvent provides a mock function with given fields:
func (_m *Store) InvoiceEvent() store.InvoiceEventStore {
	ret := _m.Called()

	var r0 store.InvoiceEventStore
	if rf, ok := ret.Get(0).(func() store.InvoiceEventStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.InvoiceEventStore)
		}
	}

	return r0
}

// IsUniqueConstraintError provides a mock function with given fields: err, indexName
func (_m *Store) IsUniqueConstraintError(err error, indexName []string) bool {
	ret := _m.Called(err, indexName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error, []string) bool); ok {
		r0 = rf(err, indexName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Job provides a mock function with given fields:
func (_m *Store) Job() store.JobStore {
	ret := _m.Called()

	var r0 store.JobStore
	if rf, ok := ret.Get(0).(func() store.JobStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.JobStore)
		}
	}

	return r0
}

// LockToMaster provides a mock function with given fields:
func (_m *Store) LockToMaster() {
	_m.Called()
}

// MarkSystemRanUnitTests provides a mock function with given fields:
func (_m *Store) MarkSystemRanUnitTests() {
	_m.Called()
}

// Menu provides a mock function with given fields:
func (_m *Store) Menu() store.MenuStore {
	ret := _m.Called()

	var r0 store.MenuStore
	if rf, ok := ret.Get(0).(func() store.MenuStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.MenuStore)
		}
	}

	return r0
}

// MenuItem provides a mock function with given fields:
func (_m *Store) MenuItem() store.MenuItemStore {
	ret := _m.Called()

	var r0 store.MenuItemStore
	if rf, ok := ret.Get(0).(func() store.MenuItemStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.MenuItemStore)
		}
	}

	return r0
}

// MenuItemTranslation provides a mock function with given fields:
func (_m *Store) MenuItemTranslation() store.MenuItemTranslationStore {
	ret := _m.Called()

	var r0 store.MenuItemTranslationStore
	if rf, ok := ret.Get(0).(func() store.MenuItemTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.MenuItemTranslationStore)
		}
	}

	return r0
}

// OpenExchangeRate provides a mock function with given fields:
func (_m *Store) OpenExchangeRate() store.OpenExchangeRateStore {
	ret := _m.Called()

	var r0 store.OpenExchangeRateStore
	if rf, ok := ret.Get(0).(func() store.OpenExchangeRateStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.OpenExchangeRateStore)
		}
	}

	return r0
}

// Order provides a mock function with given fields:
func (_m *Store) Order() store.OrderStore {
	ret := _m.Called()

	var r0 store.OrderStore
	if rf, ok := ret.Get(0).(func() store.OrderStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.OrderStore)
		}
	}

	return r0
}

// OrderDiscount provides a mock function with given fields:
func (_m *Store) OrderDiscount() store.OrderDiscountStore {
	ret := _m.Called()

	var r0 store.OrderDiscountStore
	if rf, ok := ret.Get(0).(func() store.OrderDiscountStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.OrderDiscountStore)
		}
	}

	return r0
}

// OrderEvent provides a mock function with given fields:
func (_m *Store) OrderEvent() store.OrderEventStore {
	ret := _m.Called()

	var r0 store.OrderEventStore
	if rf, ok := ret.Get(0).(func() store.OrderEventStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.OrderEventStore)
		}
	}

	return r0
}

// OrderLine provides a mock function with given fields:
func (_m *Store) OrderLine() store.OrderLineStore {
	ret := _m.Called()

	var r0 store.OrderLineStore
	if rf, ok := ret.Get(0).(func() store.OrderLineStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.OrderLineStore)
		}
	}

	return r0
}

// Page provides a mock function with given fields:
func (_m *Store) Page() store.PageStore {
	ret := _m.Called()

	var r0 store.PageStore
	if rf, ok := ret.Get(0).(func() store.PageStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PageStore)
		}
	}

	return r0
}

// PageTranslation provides a mock function with given fields:
func (_m *Store) PageTranslation() store.PageTranslationStore {
	ret := _m.Called()

	var r0 store.PageTranslationStore
	if rf, ok := ret.Get(0).(func() store.PageTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PageTranslationStore)
		}
	}

	return r0
}

// PageType provides a mock function with given fields:
func (_m *Store) PageType() store.PageTypeStore {
	ret := _m.Called()

	var r0 store.PageTypeStore
	if rf, ok := ret.Get(0).(func() store.PageTypeStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PageTypeStore)
		}
	}

	return r0
}

// Payment provides a mock function with given fields:
func (_m *Store) Payment() store.PaymentStore {
	ret := _m.Called()

	var r0 store.PaymentStore
	if rf, ok := ret.Get(0).(func() store.PaymentStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PaymentStore)
		}
	}

	return r0
}

// PaymentTransaction provides a mock function with given fields:
func (_m *Store) PaymentTransaction() store.PaymentTransactionStore {
	ret := _m.Called()

	var r0 store.PaymentTransactionStore
	if rf, ok := ret.Get(0).(func() store.PaymentTransactionStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PaymentTransactionStore)
		}
	}

	return r0
}

// Plugin provides a mock function with given fields:
func (_m *Store) Plugin() store.PluginStore {
	ret := _m.Called()

	var r0 store.PluginStore
	if rf, ok := ret.Get(0).(func() store.PluginStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PluginStore)
		}
	}

	return r0
}

// PluginConfiguration provides a mock function with given fields:
func (_m *Store) PluginConfiguration() store.PluginConfigurationStore {
	ret := _m.Called()

	var r0 store.PluginConfigurationStore
	if rf, ok := ret.Get(0).(func() store.PluginConfigurationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PluginConfigurationStore)
		}
	}

	return r0
}

// Preference provides a mock function with given fields:
func (_m *Store) Preference() store.PreferenceStore {
	ret := _m.Called()

	var r0 store.PreferenceStore
	if rf, ok := ret.Get(0).(func() store.PreferenceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.PreferenceStore)
		}
	}

	return r0
}

// Product provides a mock function with given fields:
func (_m *Store) Product() store.ProductStore {
	ret := _m.Called()

	var r0 store.ProductStore
	if rf, ok := ret.Get(0).(func() store.ProductStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ProductStore)
		}
	}

	return r0
}

// ProductChannelListing provides a mock function with given fields:
func (_m *Store) ProductChannelListing() store.ProductChannelListingStore {
	ret := _m.Called()

	var r0 store.ProductChannelListingStore
	if rf, ok := ret.Get(0).(func() store.ProductChannelListingStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ProductChannelListingStore)
		}
	}

	return r0
}

// ProductMedia provides a mock function with given fields:
func (_m *Store) ProductMedia() store.ProductMediaStore {
	ret := _m.Called()

	var r0 store.ProductMediaStore
	if rf, ok := ret.Get(0).(func() store.ProductMediaStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ProductMediaStore)
		}
	}

	return r0
}

// ProductTranslation provides a mock function with given fields:
func (_m *Store) ProductTranslation() store.ProductTranslationStore {
	ret := _m.Called()

	var r0 store.ProductTranslationStore
	if rf, ok := ret.Get(0).(func() store.ProductTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ProductTranslationStore)
		}
	}

	return r0
}

// ProductType provides a mock function with given fields:
func (_m *Store) ProductType() store.ProductTypeStore {
	ret := _m.Called()

	var r0 store.ProductTypeStore
	if rf, ok := ret.Get(0).(func() store.ProductTypeStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ProductTypeStore)
		}
	}

	return r0
}

// ProductVariant provides a mock function with given fields:
func (_m *Store) ProductVariant() store.ProductVariantStore {
	ret := _m.Called()

	var r0 store.ProductVariantStore
	if rf, ok := ret.Get(0).(func() store.ProductVariantStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ProductVariantStore)
		}
	}

	return r0
}

// ProductVariantChannelListing provides a mock function with given fields:
func (_m *Store) ProductVariantChannelListing() store.ProductVariantChannelListingStore {
	ret := _m.Called()

	var r0 store.ProductVariantChannelListingStore
	if rf, ok := ret.Get(0).(func() store.ProductVariantChannelListingStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ProductVariantChannelListingStore)
		}
	}

	return r0
}

// ProductVariantTranslation provides a mock function with given fields:
func (_m *Store) ProductVariantTranslation() store.ProductVariantTranslationStore {
	ret := _m.Called()

	var r0 store.ProductVariantTranslationStore
	if rf, ok := ret.Get(0).(func() store.ProductVariantTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ProductVariantTranslationStore)
		}
	}

	return r0
}

// Role provides a mock function with given fields:
func (_m *Store) Role() store.RoleStore {
	ret := _m.Called()

	var r0 store.RoleStore
	if rf, ok := ret.Get(0).(func() store.RoleStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.RoleStore)
		}
	}

	return r0
}

// SaleCategoryRelation provides a mock function with given fields:
func (_m *Store) SaleCategoryRelation() store.SaleCategoryRelationStore {
	ret := _m.Called()

	var r0 store.SaleCategoryRelationStore
	if rf, ok := ret.Get(0).(func() store.SaleCategoryRelationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.SaleCategoryRelationStore)
		}
	}

	return r0
}

// SaleCollectionRelation provides a mock function with given fields:
func (_m *Store) SaleCollectionRelation() store.SaleCollectionRelationStore {
	ret := _m.Called()

	var r0 store.SaleCollectionRelationStore
	if rf, ok := ret.Get(0).(func() store.SaleCollectionRelationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.SaleCollectionRelationStore)
		}
	}

	return r0
}

// SaleProductRelation provides a mock function with given fields:
func (_m *Store) SaleProductRelation() store.SaleProductRelationStore {
	ret := _m.Called()

	var r0 store.SaleProductRelationStore
	if rf, ok := ret.Get(0).(func() store.SaleProductRelationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.SaleProductRelationStore)
		}
	}

	return r0
}

// Session provides a mock function with given fields:
func (_m *Store) Session() store.SessionStore {
	ret := _m.Called()

	var r0 store.SessionStore
	if rf, ok := ret.Get(0).(func() store.SessionStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.SessionStore)
		}
	}

	return r0
}

// SetContext provides a mock function with given fields: _a0
func (_m *Store) SetContext(_a0 context.Context) {
	_m.Called(_a0)
}

// ShippingMethod provides a mock function with given fields:
func (_m *Store) ShippingMethod() store.ShippingMethodStore {
	ret := _m.Called()

	var r0 store.ShippingMethodStore
	if rf, ok := ret.Get(0).(func() store.ShippingMethodStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ShippingMethodStore)
		}
	}

	return r0
}

// ShippingMethodChannelListing provides a mock function with given fields:
func (_m *Store) ShippingMethodChannelListing() store.ShippingMethodChannelListingStore {
	ret := _m.Called()

	var r0 store.ShippingMethodChannelListingStore
	if rf, ok := ret.Get(0).(func() store.ShippingMethodChannelListingStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ShippingMethodChannelListingStore)
		}
	}

	return r0
}

// ShippingMethodExcludedProduct provides a mock function with given fields:
func (_m *Store) ShippingMethodExcludedProduct() store.ShippingMethodExcludedProductStore {
	ret := _m.Called()

	var r0 store.ShippingMethodExcludedProductStore
	if rf, ok := ret.Get(0).(func() store.ShippingMethodExcludedProductStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ShippingMethodExcludedProductStore)
		}
	}

	return r0
}

// ShippingMethodPostalCodeRule provides a mock function with given fields:
func (_m *Store) ShippingMethodPostalCodeRule() store.ShippingMethodPostalCodeRuleStore {
	ret := _m.Called()

	var r0 store.ShippingMethodPostalCodeRuleStore
	if rf, ok := ret.Get(0).(func() store.ShippingMethodPostalCodeRuleStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ShippingMethodPostalCodeRuleStore)
		}
	}

	return r0
}

// ShippingMethodTranslation provides a mock function with given fields:
func (_m *Store) ShippingMethodTranslation() store.ShippingMethodTranslationStore {
	ret := _m.Called()

	var r0 store.ShippingMethodTranslationStore
	if rf, ok := ret.Get(0).(func() store.ShippingMethodTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ShippingMethodTranslationStore)
		}
	}

	return r0
}

// ShippingZone provides a mock function with given fields:
func (_m *Store) ShippingZone() store.ShippingZoneStore {
	ret := _m.Called()

	var r0 store.ShippingZoneStore
	if rf, ok := ret.Get(0).(func() store.ShippingZoneStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ShippingZoneStore)
		}
	}

	return r0
}

// ShippingZoneChannel provides a mock function with given fields:
func (_m *Store) ShippingZoneChannel() store.ShippingZoneChannelStore {
	ret := _m.Called()

	var r0 store.ShippingZoneChannelStore
	if rf, ok := ret.Get(0).(func() store.ShippingZoneChannelStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ShippingZoneChannelStore)
		}
	}

	return r0
}

// Shop provides a mock function with given fields:
func (_m *Store) Shop() store.ShopStore {
	ret := _m.Called()

	var r0 store.ShopStore
	if rf, ok := ret.Get(0).(func() store.ShopStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ShopStore)
		}
	}

	return r0
}

// ShopStaff provides a mock function with given fields:
func (_m *Store) ShopStaff() store.ShopStaffStore {
	ret := _m.Called()

	var r0 store.ShopStaffStore
	if rf, ok := ret.Get(0).(func() store.ShopStaffStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ShopStaffStore)
		}
	}

	return r0
}

// ShopTranslation provides a mock function with given fields:
func (_m *Store) ShopTranslation() store.ShopTranslationStore {
	ret := _m.Called()

	var r0 store.ShopTranslationStore
	if rf, ok := ret.Get(0).(func() store.ShopTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.ShopTranslationStore)
		}
	}

	return r0
}

// StaffNotificationRecipient provides a mock function with given fields:
func (_m *Store) StaffNotificationRecipient() store.StaffNotificationRecipientStore {
	ret := _m.Called()

	var r0 store.StaffNotificationRecipientStore
	if rf, ok := ret.Get(0).(func() store.StaffNotificationRecipientStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StaffNotificationRecipientStore)
		}
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Store) Status() store.StatusStore {
	ret := _m.Called()

	var r0 store.StatusStore
	if rf, ok := ret.Get(0).(func() store.StatusStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StatusStore)
		}
	}

	return r0
}

// Stock provides a mock function with given fields:
func (_m *Store) Stock() store.StockStore {
	ret := _m.Called()

	var r0 store.StockStore
	if rf, ok := ret.Get(0).(func() store.StockStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.StockStore)
		}
	}

	return r0
}

// System provides a mock function with given fields:
func (_m *Store) System() store.SystemStore {
	ret := _m.Called()

	var r0 store.SystemStore
	if rf, ok := ret.Get(0).(func() store.SystemStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.SystemStore)
		}
	}

	return r0
}

// TermsOfService provides a mock function with given fields:
func (_m *Store) TermsOfService() store.TermsOfServiceStore {
	ret := _m.Called()

	var r0 store.TermsOfServiceStore
	if rf, ok := ret.Get(0).(func() store.TermsOfServiceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.TermsOfServiceStore)
		}
	}

	return r0
}

// Token provides a mock function with given fields:
func (_m *Store) Token() store.TokenStore {
	ret := _m.Called()

	var r0 store.TokenStore
	if rf, ok := ret.Get(0).(func() store.TokenStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.TokenStore)
		}
	}

	return r0
}

// UnlockFromMaster provides a mock function with given fields:
func (_m *Store) UnlockFromMaster() {
	_m.Called()
}

// UploadSession provides a mock function with given fields:
func (_m *Store) UploadSession() store.UploadSessionStore {
	ret := _m.Called()

	var r0 store.UploadSessionStore
	if rf, ok := ret.Get(0).(func() store.UploadSessionStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UploadSessionStore)
		}
	}

	return r0
}

// User provides a mock function with given fields:
func (_m *Store) User() store.UserStore {
	ret := _m.Called()

	var r0 store.UserStore
	if rf, ok := ret.Get(0).(func() store.UserStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UserStore)
		}
	}

	return r0
}

// UserAccessToken provides a mock function with given fields:
func (_m *Store) UserAccessToken() store.UserAccessTokenStore {
	ret := _m.Called()

	var r0 store.UserAccessTokenStore
	if rf, ok := ret.Get(0).(func() store.UserAccessTokenStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UserAccessTokenStore)
		}
	}

	return r0
}

// UserAddress provides a mock function with given fields:
func (_m *Store) UserAddress() store.UserAddressStore {
	ret := _m.Called()

	var r0 store.UserAddressStore
	if rf, ok := ret.Get(0).(func() store.UserAddressStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UserAddressStore)
		}
	}

	return r0
}

// UserTermOfService provides a mock function with given fields:
func (_m *Store) UserTermOfService() store.UserTermOfServiceStore {
	ret := _m.Called()

	var r0 store.UserTermOfServiceStore
	if rf, ok := ret.Get(0).(func() store.UserTermOfServiceStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.UserTermOfServiceStore)
		}
	}

	return r0
}

// VariantMedia provides a mock function with given fields:
func (_m *Store) VariantMedia() store.VariantMediaStore {
	ret := _m.Called()

	var r0 store.VariantMediaStore
	if rf, ok := ret.Get(0).(func() store.VariantMediaStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.VariantMediaStore)
		}
	}

	return r0
}

// VoucherCategory provides a mock function with given fields:
func (_m *Store) VoucherCategory() store.VoucherCategoryStore {
	ret := _m.Called()

	var r0 store.VoucherCategoryStore
	if rf, ok := ret.Get(0).(func() store.VoucherCategoryStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.VoucherCategoryStore)
		}
	}

	return r0
}

// VoucherChannelListing provides a mock function with given fields:
func (_m *Store) VoucherChannelListing() store.VoucherChannelListingStore {
	ret := _m.Called()

	var r0 store.VoucherChannelListingStore
	if rf, ok := ret.Get(0).(func() store.VoucherChannelListingStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.VoucherChannelListingStore)
		}
	}

	return r0
}

// VoucherCollection provides a mock function with given fields:
func (_m *Store) VoucherCollection() store.VoucherCollectionStore {
	ret := _m.Called()

	var r0 store.VoucherCollectionStore
	if rf, ok := ret.Get(0).(func() store.VoucherCollectionStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.VoucherCollectionStore)
		}
	}

	return r0
}

// VoucherCustomer provides a mock function with given fields:
func (_m *Store) VoucherCustomer() store.VoucherCustomerStore {
	ret := _m.Called()

	var r0 store.VoucherCustomerStore
	if rf, ok := ret.Get(0).(func() store.VoucherCustomerStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.VoucherCustomerStore)
		}
	}

	return r0
}

// VoucherProduct provides a mock function with given fields:
func (_m *Store) VoucherProduct() store.VoucherProductStore {
	ret := _m.Called()

	var r0 store.VoucherProductStore
	if rf, ok := ret.Get(0).(func() store.VoucherProductStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.VoucherProductStore)
		}
	}

	return r0
}

// VoucherTranslation provides a mock function with given fields:
func (_m *Store) VoucherTranslation() store.VoucherTranslationStore {
	ret := _m.Called()

	var r0 store.VoucherTranslationStore
	if rf, ok := ret.Get(0).(func() store.VoucherTranslationStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.VoucherTranslationStore)
		}
	}

	return r0
}

// Warehouse provides a mock function with given fields:
func (_m *Store) Warehouse() store.WarehouseStore {
	ret := _m.Called()

	var r0 store.WarehouseStore
	if rf, ok := ret.Get(0).(func() store.WarehouseStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.WarehouseStore)
		}
	}

	return r0
}

// WarehouseShippingZone provides a mock function with given fields:
func (_m *Store) WarehouseShippingZone() store.WarehouseShippingZoneStore {
	ret := _m.Called()

	var r0 store.WarehouseShippingZoneStore
	if rf, ok := ret.Get(0).(func() store.WarehouseShippingZoneStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.WarehouseShippingZoneStore)
		}
	}

	return r0
}

// Wishlist provides a mock function with given fields:
func (_m *Store) Wishlist() store.WishlistStore {
	ret := _m.Called()

	var r0 store.WishlistStore
	if rf, ok := ret.Get(0).(func() store.WishlistStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.WishlistStore)
		}
	}

	return r0
}

// WishlistItem provides a mock function with given fields:
func (_m *Store) WishlistItem() store.WishlistItemStore {
	ret := _m.Called()

	var r0 store.WishlistItemStore
	if rf, ok := ret.Get(0).(func() store.WishlistItemStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.WishlistItemStore)
		}
	}

	return r0
}

// WishlistProductVariant provides a mock function with given fields:
func (_m *Store) WishlistProductVariant() store.WishlistProductVariantStore {
	ret := _m.Called()

	var r0 store.WishlistProductVariantStore
	if rf, ok := ret.Get(0).(func() store.WishlistProductVariantStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.WishlistProductVariantStore)
		}
	}

	return r0
}
