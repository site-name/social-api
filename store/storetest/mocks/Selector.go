// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import mock "github.com/stretchr/testify/mock"

// Selector is an autogenerated mock type for the Selector type
type Selector struct {
	mock.Mock
}

// Select provides a mock function with given fields: i, query, args
func (_m *Selector) Select(i interface{}, query string, args ...interface{}) ([]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, i, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) []interface{}); ok {
		r0 = rf(i, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, string, ...interface{}) error); ok {
		r1 = rf(i, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectOne provides a mock function with given fields: holder, query, args
func (_m *Selector) SelectOne(holder interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, holder, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(holder, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
