// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	giftcard "github.com/sitename/sitename/model/giftcard"
	mock "github.com/stretchr/testify/mock"
)

// GiftCardCheckoutStore is an autogenerated mock type for the GiftCardCheckoutStore type
type GiftCardCheckoutStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *GiftCardCheckoutStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Delete provides a mock function with given fields: giftcardID, checkoutID
func (_m *GiftCardCheckoutStore) Delete(giftcardID string, checkoutID string) error {
	ret := _m.Called(giftcardID, checkoutID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(giftcardID, checkoutID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *GiftCardCheckoutStore) Get(id string) (*giftcard.GiftCardCheckout, error) {
	ret := _m.Called(id)

	var r0 *giftcard.GiftCardCheckout
	if rf, ok := ret.Get(0).(func(string) *giftcard.GiftCardCheckout); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*giftcard.GiftCardCheckout)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: giftcardOrder
func (_m *GiftCardCheckoutStore) Save(giftcardOrder *giftcard.GiftCardCheckout) (*giftcard.GiftCardCheckout, error) {
	ret := _m.Called(giftcardOrder)

	var r0 *giftcard.GiftCardCheckout
	if rf, ok := ret.Get(0).(func(*giftcard.GiftCardCheckout) *giftcard.GiftCardCheckout); ok {
		r0 = rf(giftcardOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*giftcard.GiftCardCheckout)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*giftcard.GiftCardCheckout) error); ok {
		r1 = rf(giftcardOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
