// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gorp "github.com/mattermost/gorp"
	mock "github.com/stretchr/testify/mock"

	order "github.com/sitename/sitename/model/order"
)

// FulfillmentStore is an autogenerated mock type for the FulfillmentStore type
type FulfillmentStore struct {
	mock.Mock
}

// BulkDeleteFulfillments provides a mock function with given fields: transaction, fulfillments
func (_m *FulfillmentStore) BulkDeleteFulfillments(transaction store_iface.SqlxTxExecutor, fulfillments order.Fulfillments) error {
	ret := _m.Called(transaction, fulfillments)

	var r0 error
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, order.Fulfillments) error); ok {
		r0 = rf(transaction, fulfillments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *FulfillmentStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOption provides a mock function with given fields: transaction, option
func (_m *FulfillmentStore) FilterByOption(transaction store_iface.SqlxTxExecutor, option *order.FulfillmentFilterOption) ([]*order.Fulfillment, error) {
	ret := _m.Called(transaction, option)

	var r0 []*order.Fulfillment
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *order.FulfillmentFilterOption) []*order.Fulfillment); ok {
		r0 = rf(transaction, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Fulfillment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *order.FulfillmentFilterOption) error); ok {
		r1 = rf(transaction, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *FulfillmentStore) Get(id string) (*order.Fulfillment, error) {
	ret := _m.Called(id)

	var r0 *order.Fulfillment
	if rf, ok := ret.Get(0).(func(string) *order.Fulfillment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Fulfillment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: transaction, option
func (_m *FulfillmentStore) GetByOption(transaction store_iface.SqlxTxExecutor, option *order.FulfillmentFilterOption) (*order.Fulfillment, error) {
	ret := _m.Called(transaction, option)

	var r0 *order.Fulfillment
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *order.FulfillmentFilterOption) *order.Fulfillment); ok {
		r0 = rf(transaction, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Fulfillment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *order.FulfillmentFilterOption) error); ok {
		r1 = rf(transaction, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *FulfillmentStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ScanFields provides a mock function with given fields: holder
func (_m *FulfillmentStore) ScanFields(holder order.Fulfillment) []interface{} {
	ret := _m.Called(holder)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(order.Fulfillment) []interface{}); ok {
		r0 = rf(holder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: transaction, fulfillment
func (_m *FulfillmentStore) Upsert(transaction store_iface.SqlxTxExecutor, fulfillment *order.Fulfillment) (*order.Fulfillment, error) {
	ret := _m.Called(transaction, fulfillment)

	var r0 *order.Fulfillment
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *order.Fulfillment) *order.Fulfillment); ok {
		r0 = rf(transaction, fulfillment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Fulfillment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *order.Fulfillment) error); ok {
		r1 = rf(transaction, fulfillment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
