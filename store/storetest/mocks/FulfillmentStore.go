// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	order "github.com/sitename/sitename/model/order"
	mock "github.com/stretchr/testify/mock"
)

// FulfillmentStore is an autogenerated mock type for the FulfillmentStore type
type FulfillmentStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *FulfillmentStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByoption provides a mock function with given fields: option
func (_m *FulfillmentStore) FilterByoption(option *order.FulfillmentFilterOption) ([]*order.Fulfillment, error) {
	ret := _m.Called(option)

	var r0 []*order.Fulfillment
	if rf, ok := ret.Get(0).(func(*order.FulfillmentFilterOption) []*order.Fulfillment); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Fulfillment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*order.FulfillmentFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *FulfillmentStore) Get(id string) (*order.Fulfillment, error) {
	ret := _m.Called(id)

	var r0 *order.Fulfillment
	if rf, ok := ret.Get(0).(func(string) *order.Fulfillment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Fulfillment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: fulfillment
func (_m *FulfillmentStore) Save(fulfillment *order.Fulfillment) (*order.Fulfillment, error) {
	ret := _m.Called(fulfillment)

	var r0 *order.Fulfillment
	if rf, ok := ret.Get(0).(func(*order.Fulfillment) *order.Fulfillment); ok {
		r0 = rf(fulfillment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Fulfillment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*order.Fulfillment) error); ok {
		r1 = rf(fulfillment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
