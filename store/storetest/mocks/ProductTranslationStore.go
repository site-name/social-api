// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// ProductTranslationStore is an autogenerated mock type for the ProductTranslationStore type
type ProductTranslationStore struct {
	mock.Mock
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductTranslationStore) FilterByOption(option *model.ProductTranslationFilterOption) ([]*model.ProductTranslation, error) {
	ret := _m.Called(option)

	var r0 []*model.ProductTranslation
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductTranslationFilterOption) ([]*model.ProductTranslation, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductTranslationFilterOption) []*model.ProductTranslation); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductTranslation)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductTranslationFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: translationID
func (_m *ProductTranslationStore) Get(translationID string) (*model.ProductTranslation, error) {
	ret := _m.Called(translationID)

	var r0 *model.ProductTranslation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductTranslation, error)); ok {
		return rf(translationID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductTranslation); ok {
		r0 = rf(translationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductTranslation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(translationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: translation
func (_m *ProductTranslationStore) Upsert(translation *model.ProductTranslation) (*model.ProductTranslation, error) {
	ret := _m.Called(translation)

	var r0 *model.ProductTranslation
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductTranslation) (*model.ProductTranslation, error)); ok {
		return rf(translation)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductTranslation) *model.ProductTranslation); ok {
		r0 = rf(translation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductTranslation)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductTranslation) error); ok {
		r1 = rf(translation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductTranslationStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductTranslationStore creates a new instance of ProductTranslationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductTranslationStore(t mockConstructorTestingTNewProductTranslationStore) *ProductTranslationStore {
	mock := &ProductTranslationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
