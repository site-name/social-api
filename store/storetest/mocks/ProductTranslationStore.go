// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// ProductTranslationStore is an autogenerated mock type for the ProductTranslationStore type
type ProductTranslationStore struct {
	mock.Mock
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductTranslationStore) FilterByOption(option *product_and_discount.ProductTranslationFilterOption) ([]*product_and_discount.ProductTranslation, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.ProductTranslation
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductTranslationFilterOption) []*product_and_discount.ProductTranslation); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.ProductTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductTranslationFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: translationID
func (_m *ProductTranslationStore) Get(translationID string) (*product_and_discount.ProductTranslation, error) {
	ret := _m.Called(translationID)

	var r0 *product_and_discount.ProductTranslation
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.ProductTranslation); ok {
		r0 = rf(translationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.ProductTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(translationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: translation
func (_m *ProductTranslationStore) Upsert(translation *product_and_discount.ProductTranslation) (*product_and_discount.ProductTranslation, error) {
	ret := _m.Called(translation)

	var r0 *product_and_discount.ProductTranslation
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductTranslation) *product_and_discount.ProductTranslation); ok {
		r0 = rf(translation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.ProductTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductTranslation) error); ok {
		r1 = rf(translation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
