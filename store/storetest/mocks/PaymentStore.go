// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	payment "github.com/sitename/sitename/model/payment"
	mock "github.com/stretchr/testify/mock"

	store_iface "github.com/sitename/sitename/store/store_iface"
)

// PaymentStore is an autogenerated mock type for the PaymentStore type
type PaymentStore struct {
	mock.Mock
}

// CancelActivePaymentsOfCheckout provides a mock function with given fields: checkoutToken
func (_m *PaymentStore) CancelActivePaymentsOfCheckout(checkoutToken string) error {
	ret := _m.Called(checkoutToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(checkoutToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *PaymentStore) FilterByOption(option *payment.PaymentFilterOption) ([]*payment.Payment, error) {
	ret := _m.Called(option)

	var r0 []*payment.Payment
	if rf, ok := ret.Get(0).(func(*payment.PaymentFilterOption) []*payment.Payment); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*payment.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*payment.PaymentFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: transaction, id, lockForUpdate
func (_m *PaymentStore) Get(transaction store_iface.SqlxTxExecutor, id string, lockForUpdate bool) (*payment.Payment, error) {
	ret := _m.Called(transaction, id, lockForUpdate)

	var r0 *payment.Payment
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, string, bool) *payment.Payment); ok {
		r0 = rf(transaction, id, lockForUpdate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, string, bool) error); ok {
		r1 = rf(transaction, id, lockForUpdate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: transaction, _a1
func (_m *PaymentStore) Save(transaction store_iface.SqlxTxExecutor, _a1 *payment.Payment) (*payment.Payment, error) {
	ret := _m.Called(transaction, _a1)

	var r0 *payment.Payment
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *payment.Payment) *payment.Payment); ok {
		r0 = rf(transaction, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *payment.Payment) error); ok {
		r1 = rf(transaction, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: payMent
func (_m *PaymentStore) ScanFields(payMent payment.Payment) []interface{} {
	ret := _m.Called(payMent)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(payment.Payment) []interface{}); ok {
		r0 = rf(payMent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Update provides a mock function with given fields: transaction, _a1
func (_m *PaymentStore) Update(transaction store_iface.SqlxTxExecutor, _a1 *payment.Payment) (*payment.Payment, error) {
	ret := _m.Called(transaction, _a1)

	var r0 *payment.Payment
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *payment.Payment) *payment.Payment); ok {
		r0 = rf(transaction, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *payment.Payment) error); ok {
		r1 = rf(transaction, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePaymentsOfCheckout provides a mock function with given fields: transaction, checkoutToken, option
func (_m *PaymentStore) UpdatePaymentsOfCheckout(transaction store_iface.SqlxTxExecutor, checkoutToken string, option *payment.PaymentPatch) error {
	ret := _m.Called(transaction, checkoutToken, option)

	var r0 error
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, string, *payment.PaymentPatch) error); ok {
		r0 = rf(transaction, checkoutToken, option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
