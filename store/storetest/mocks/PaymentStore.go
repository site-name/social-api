// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// PaymentStore is an autogenerated mock type for the PaymentStore type
type PaymentStore struct {
	mock.Mock
}

// CancelActivePaymentsOfCheckout provides a mock function with given fields: checkoutToken
func (_m *PaymentStore) CancelActivePaymentsOfCheckout(checkoutToken string) error {
	ret := _m.Called(checkoutToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(checkoutToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *PaymentStore) FilterByOption(option model_helper.PaymentFilterOptions) (model.PaymentSlice, error) {
	ret := _m.Called(option)

	var r0 model.PaymentSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.PaymentFilterOptions) (model.PaymentSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.PaymentFilterOptions) model.PaymentSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.PaymentSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.PaymentFilterOptions) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentOwnedByUser provides a mock function with given fields: userID, paymentID
func (_m *PaymentStore) PaymentOwnedByUser(userID string, paymentID string) (bool, error) {
	ret := _m.Called(userID, paymentID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(userID, paymentID)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userID, paymentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, paymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePaymentsOfCheckout provides a mock function with given fields: tx, checkoutToken, option
func (_m *PaymentStore) UpdatePaymentsOfCheckout(tx boil.ContextTransactor, checkoutToken string, option model_helper.PaymentPatch) error {
	ret := _m.Called(tx, checkoutToken, option)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, string, model_helper.PaymentPatch) error); ok {
		r0 = rf(tx, checkoutToken, option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: tx, _a1
func (_m *PaymentStore) Upsert(tx boil.ContextTransactor, _a1 model.Payment) (*model.Payment, error) {
	ret := _m.Called(tx, _a1)

	var r0 *model.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.Payment) (*model.Payment, error)); ok {
		return rf(tx, _a1)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.Payment) *model.Payment); ok {
		r0 = rf(tx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.Payment) error); ok {
		r1 = rf(tx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPaymentStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaymentStore creates a new instance of PaymentStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentStore(t mockConstructorTestingTNewPaymentStore) *PaymentStore {
	mock := &PaymentStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
