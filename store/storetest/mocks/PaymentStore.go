// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	payment "github.com/sitename/sitename/model/payment"
	mock "github.com/stretchr/testify/mock"
)

// PaymentStore is an autogenerated mock type for the PaymentStore type
type PaymentStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *PaymentStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: id
func (_m *PaymentStore) Get(id string) (*payment.Payment, error) {
	ret := _m.Called(id)

	var r0 *payment.Payment
	if rf, ok := ret.Get(0).(func(string) *payment.Payment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentsByCheckoutID provides a mock function with given fields: checkoutID
func (_m *PaymentStore) GetPaymentsByCheckoutID(checkoutID string) ([]*payment.Payment, error) {
	ret := _m.Called(checkoutID)

	var r0 []*payment.Payment
	if rf, ok := ret.Get(0).(func(string) []*payment.Payment); ok {
		r0 = rf(checkoutID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*payment.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(checkoutID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaymentsByOrderID provides a mock function with given fields: orderID
func (_m *PaymentStore) GetPaymentsByOrderID(orderID string) ([]*payment.Payment, error) {
	ret := _m.Called(orderID)

	var r0 []*payment.Payment
	if rf, ok := ret.Get(0).(func(string) []*payment.Payment); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*payment.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentExistWithOptions provides a mock function with given fields: opts
func (_m *PaymentStore) PaymentExistWithOptions(opts *payment.PaymentFilterOpts) (bool, error) {
	ret := _m.Called(opts)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*payment.PaymentFilterOpts) bool); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*payment.PaymentFilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *PaymentStore) Save(_a0 *payment.Payment) (*payment.Payment, error) {
	ret := _m.Called(_a0)

	var r0 *payment.Payment
	if rf, ok := ret.Get(0).(func(*payment.Payment) *payment.Payment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*payment.Payment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *PaymentStore) Update(_a0 *payment.Payment) (*payment.Payment, error) {
	ret := _m.Called(_a0)

	var r0 *payment.Payment
	if rf, ok := ret.Get(0).(func(*payment.Payment) *payment.Payment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*payment.Payment) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
