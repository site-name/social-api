// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gorp "github.com/mattermost/gorp"
	mock "github.com/stretchr/testify/mock"

	warehouse "github.com/sitename/sitename/model/warehouse"
)

// AllocationStore is an autogenerated mock type for the AllocationStore type
type AllocationStore struct {
	mock.Mock
}

// BulkDelete provides a mock function with given fields: transaction, allocationIDs
func (_m *AllocationStore) BulkDelete(transaction *gorp.Transaction, allocationIDs []string) error {
	ret := _m.Called(transaction, allocationIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorp.Transaction, []string) error); ok {
		r0 = rf(transaction, allocationIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpsert provides a mock function with given fields: transaction, allocations
func (_m *AllocationStore) BulkUpsert(transaction *gorp.Transaction, allocations []*warehouse.Allocation) ([]*warehouse.Allocation, error) {
	ret := _m.Called(transaction, allocations)

	var r0 []*warehouse.Allocation
	if rf, ok := ret.Get(0).(func(*gorp.Transaction, []*warehouse.Allocation) []*warehouse.Allocation); ok {
		r0 = rf(transaction, allocations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Allocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorp.Transaction, []*warehouse.Allocation) error); ok {
		r1 = rf(transaction, allocations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAvailableQuantityForStock provides a mock function with given fields: stock
func (_m *AllocationStore) CountAvailableQuantityForStock(stock *warehouse.Stock) (int, error) {
	ret := _m.Called(stock)

	var r0 int
	if rf, ok := ret.Get(0).(func(*warehouse.Stock) int); ok {
		r0 = rf(stock)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*warehouse.Stock) error); ok {
		r1 = rf(stock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *AllocationStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOption provides a mock function with given fields: transaction, option
func (_m *AllocationStore) FilterByOption(transaction *gorp.Transaction, option *warehouse.AllocationFilterOption) ([]*warehouse.Allocation, error) {
	ret := _m.Called(transaction, option)

	var r0 []*warehouse.Allocation
	if rf, ok := ret.Get(0).(func(*gorp.Transaction, *warehouse.AllocationFilterOption) []*warehouse.Allocation); ok {
		r0 = rf(transaction, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Allocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorp.Transaction, *warehouse.AllocationFilterOption) error); ok {
		r1 = rf(transaction, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: allocationID
func (_m *AllocationStore) Get(allocationID string) (*warehouse.Allocation, error) {
	ret := _m.Called(allocationID)

	var r0 *warehouse.Allocation
	if rf, ok := ret.Get(0).(func(string) *warehouse.Allocation); ok {
		r0 = rf(allocationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.Allocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(allocationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderBy provides a mock function with given fields:
func (_m *AllocationStore) OrderBy() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TableName provides a mock function with given fields: withField
func (_m *AllocationStore) TableName(withField string) string {
	ret := _m.Called(withField)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(withField)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
