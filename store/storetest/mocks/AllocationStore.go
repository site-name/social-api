// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// AllocationStore is an autogenerated mock type for the AllocationStore type
type AllocationStore struct {
	mock.Mock
}

// BulkDelete provides a mock function with given fields: transaction, allocationIDs
func (_m *AllocationStore) BulkDelete(transaction *gorm.DB, allocationIDs []string) error {
	ret := _m.Called(transaction, allocationIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) error); ok {
		r0 = rf(transaction, allocationIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpsert provides a mock function with given fields: transaction, allocations
func (_m *AllocationStore) BulkUpsert(transaction *gorm.DB, allocations []*model.Allocation) ([]*model.Allocation, error) {
	ret := _m.Called(transaction, allocations)

	var r0 []*model.Allocation
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.Allocation) ([]*model.Allocation, error)); ok {
		return rf(transaction, allocations)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.Allocation) []*model.Allocation); ok {
		r0 = rf(transaction, allocations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Allocation)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.Allocation) error); ok {
		r1 = rf(transaction, allocations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAvailableQuantityForStock provides a mock function with given fields: stock
func (_m *AllocationStore) CountAvailableQuantityForStock(stock *model.Stock) (int, error) {
	ret := _m.Called(stock)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Stock) (int, error)); ok {
		return rf(stock)
	}
	if rf, ok := ret.Get(0).(func(*model.Stock) int); ok {
		r0 = rf(stock)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*model.Stock) error); ok {
		r1 = rf(stock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *AllocationStore) FilterByOption(option *model.AllocationFilterOption) ([]*model.Allocation, error) {
	ret := _m.Called(option)

	var r0 []*model.Allocation
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AllocationFilterOption) ([]*model.Allocation, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.AllocationFilterOption) []*model.Allocation); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Allocation)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AllocationFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: allocationID
func (_m *AllocationStore) Get(allocationID string) (*model.Allocation, error) {
	ret := _m.Called(allocationID)

	var r0 *model.Allocation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Allocation, error)); ok {
		return rf(allocationID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Allocation); ok {
		r0 = rf(allocationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Allocation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(allocationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAllocationStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAllocationStore creates a new instance of AllocationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAllocationStore(t mockConstructorTestingTNewAllocationStore) *AllocationStore {
	mock := &AllocationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
