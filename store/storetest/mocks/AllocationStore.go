// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// AllocationStore is an autogenerated mock type for the AllocationStore type
type AllocationStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: tx, allocations
func (_m *AllocationStore) BulkUpsert(tx boil.ContextTransactor, allocations model.AllocationSlice) (model.AllocationSlice, error) {
	ret := _m.Called(tx, allocations)

	var r0 model.AllocationSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.AllocationSlice) (model.AllocationSlice, error)); ok {
		return rf(tx, allocations)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.AllocationSlice) model.AllocationSlice); ok {
		r0 = rf(tx, allocations)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AllocationSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.AllocationSlice) error); ok {
		r1 = rf(tx, allocations)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountAvailableQuantityForStock provides a mock function with given fields: stock
func (_m *AllocationStore) CountAvailableQuantityForStock(stock model.Stock) (int, error) {
	ret := _m.Called(stock)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Stock) (int, error)); ok {
		return rf(stock)
	}
	if rf, ok := ret.Get(0).(func(model.Stock) int); ok {
		r0 = rf(stock)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(model.Stock) error); ok {
		r1 = rf(stock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, ids
func (_m *AllocationStore) Delete(tx boil.ContextTransactor, ids []string) error {
	ret := _m.Called(tx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *AllocationStore) FilterByOption(option model_helper.AllocationFilterOption) (model.AllocationSlice, error) {
	ret := _m.Called(option)

	var r0 model.AllocationSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.AllocationFilterOption) (model.AllocationSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.AllocationFilterOption) model.AllocationSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AllocationSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.AllocationFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *AllocationStore) Get(id string) (*model.Allocation, error) {
	ret := _m.Called(id)

	var r0 *model.Allocation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Allocation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Allocation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Allocation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAllocationStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAllocationStore creates a new instance of AllocationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAllocationStore(t mockConstructorTestingTNewAllocationStore) *AllocationStore {
	mock := &AllocationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
