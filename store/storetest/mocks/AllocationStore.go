// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	warehouse "github.com/sitename/sitename/model/warehouse"
)

// AllocationStore is an autogenerated mock type for the AllocationStore type
type AllocationStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *AllocationStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOption provides a mock function with given fields: option
func (_m *AllocationStore) FilterByOption(option *warehouse.AllocationFilterOption) ([]*warehouse.Allocation, error) {
	ret := _m.Called(option)

	var r0 []*warehouse.Allocation
	if rf, ok := ret.Get(0).(func(*warehouse.AllocationFilterOption) []*warehouse.Allocation); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Allocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*warehouse.AllocationFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: allocationID
func (_m *AllocationStore) Get(allocationID string) (*warehouse.Allocation, error) {
	ret := _m.Called(allocationID)

	var r0 *warehouse.Allocation
	if rf, ok := ret.Get(0).(func(string) *warehouse.Allocation); ok {
		r0 = rf(allocationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.Allocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(allocationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: allocation
func (_m *AllocationStore) Save(allocation *warehouse.Allocation) (*warehouse.Allocation, error) {
	ret := _m.Called(allocation)

	var r0 *warehouse.Allocation
	if rf, ok := ret.Get(0).(func(*warehouse.Allocation) *warehouse.Allocation); ok {
		r0 = rf(allocation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.Allocation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*warehouse.Allocation) error); ok {
		r1 = rf(allocation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
