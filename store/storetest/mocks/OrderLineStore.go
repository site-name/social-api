// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gorp "github.com/mattermost/gorp"
	mock "github.com/stretchr/testify/mock"

	order "github.com/sitename/sitename/model/order"
)

// OrderLineStore is an autogenerated mock type for the OrderLineStore type
type OrderLineStore struct {
	mock.Mock
}

// BulkDelete provides a mock function with given fields: orderLineIDs
func (_m *OrderLineStore) BulkDelete(orderLineIDs []string) error {
	ret := _m.Called(orderLineIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(orderLineIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpsert provides a mock function with given fields: transaction, orderLines
func (_m *OrderLineStore) BulkUpsert(transaction *gorp.Transaction, orderLines []*order.OrderLine) ([]*order.OrderLine, error) {
	ret := _m.Called(transaction, orderLines)

	var r0 []*order.OrderLine
	if rf, ok := ret.Get(0).(func(*gorp.Transaction, []*order.OrderLine) []*order.OrderLine); ok {
		r0 = rf(transaction, orderLines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.OrderLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorp.Transaction, []*order.OrderLine) error); ok {
		r1 = rf(transaction, orderLines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *OrderLineStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterbyOption provides a mock function with given fields: option
func (_m *OrderLineStore) FilterbyOption(option *order.OrderLineFilterOption) ([]*order.OrderLine, error) {
	ret := _m.Called(option)

	var r0 []*order.OrderLine
	if rf, ok := ret.Get(0).(func(*order.OrderLineFilterOption) []*order.OrderLine); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.OrderLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*order.OrderLineFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *OrderLineStore) Get(id string) (*order.OrderLine, error) {
	ret := _m.Called(id)

	var r0 *order.OrderLine
	if rf, ok := ret.Get(0).(func(string) *order.OrderLine); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrderLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *OrderLineStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ScanFields provides a mock function with given fields: orderLine
func (_m *OrderLineStore) ScanFields(orderLine order.OrderLine) []interface{} {
	ret := _m.Called(orderLine)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(order.OrderLine) []interface{}); ok {
		r0 = rf(orderLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: transaction, orderLine
func (_m *OrderLineStore) Upsert(transaction *gorp.Transaction, orderLine *order.OrderLine) (*order.OrderLine, error) {
	ret := _m.Called(transaction, orderLine)

	var r0 *order.OrderLine
	if rf, ok := ret.Get(0).(func(*gorp.Transaction, *order.OrderLine) *order.OrderLine); ok {
		r0 = rf(transaction, orderLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrderLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorp.Transaction, *order.OrderLine) error); ok {
		r1 = rf(transaction, orderLine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
