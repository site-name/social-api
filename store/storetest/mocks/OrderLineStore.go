// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// OrderLineStore is an autogenerated mock type for the OrderLineStore type
type OrderLineStore struct {
	mock.Mock
}

// FilterbyOption provides a mock function with given fields: option
func (_m *OrderLineStore) FilterbyOption(option model_helper.OrderLineFilterOptions) (model.OrderLineSlice, error) {
	ret := _m.Called(option)

	var r0 model.OrderLineSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.OrderLineFilterOptions) (model.OrderLineSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.OrderLineFilterOptions) model.OrderLineSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.OrderLineSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.OrderLineFilterOptions) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *OrderLineStore) Get(id string) (*model.OrderLine, error) {
	ret := _m.Called(id)

	var r0 *model.OrderLine
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.OrderLine, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.OrderLine); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderLine)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, orderLine
func (_m *OrderLineStore) Upsert(tx boil.ContextTransactor, orderLine model.OrderLine) (*model.OrderLine, error) {
	ret := _m.Called(tx, orderLine)

	var r0 *model.OrderLine
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.OrderLine) (*model.OrderLine, error)); ok {
		return rf(tx, orderLine)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.OrderLine) *model.OrderLine); ok {
		r0 = rf(tx, orderLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderLine)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.OrderLine) error); ok {
		r1 = rf(tx, orderLine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderLineStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderLineStore creates a new instance of OrderLineStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderLineStore(t mockConstructorTestingTNewOrderLineStore) *OrderLineStore {
	mock := &OrderLineStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
