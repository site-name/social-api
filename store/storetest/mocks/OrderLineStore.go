// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// OrderLineStore is an autogenerated mock type for the OrderLineStore type
type OrderLineStore struct {
	mock.Mock
}

// BulkDelete provides a mock function with given fields: orderLineIDs
func (_m *OrderLineStore) BulkDelete(orderLineIDs []string) error {
	ret := _m.Called(orderLineIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(orderLineIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpsert provides a mock function with given fields: transaction, orderLines
func (_m *OrderLineStore) BulkUpsert(transaction *gorm.DB, orderLines []*model.OrderLine) ([]*model.OrderLine, error) {
	ret := _m.Called(transaction, orderLines)

	var r0 []*model.OrderLine
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.OrderLine) ([]*model.OrderLine, error)); ok {
		return rf(transaction, orderLines)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.OrderLine) []*model.OrderLine); ok {
		r0 = rf(transaction, orderLines)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderLine)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.OrderLine) error); ok {
		r1 = rf(transaction, orderLines)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterbyOption provides a mock function with given fields: option
func (_m *OrderLineStore) FilterbyOption(option *model.OrderLineFilterOption) ([]*model.OrderLine, error) {
	ret := _m.Called(option)

	var r0 []*model.OrderLine
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.OrderLineFilterOption) ([]*model.OrderLine, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.OrderLineFilterOption) []*model.OrderLine); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OrderLine)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.OrderLineFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *OrderLineStore) Get(id string) (*model.OrderLine, error) {
	ret := _m.Called(id)

	var r0 *model.OrderLine
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.OrderLine, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.OrderLine); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderLine)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: orderLine
func (_m *OrderLineStore) ScanFields(orderLine *model.OrderLine) []interface{} {
	ret := _m.Called(orderLine)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.OrderLine) []interface{}); ok {
		r0 = rf(orderLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: transaction, orderLine
func (_m *OrderLineStore) Upsert(transaction *gorm.DB, orderLine *model.OrderLine) (*model.OrderLine, error) {
	ret := _m.Called(transaction, orderLine)

	var r0 *model.OrderLine
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.OrderLine) (*model.OrderLine, error)); ok {
		return rf(transaction, orderLine)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.OrderLine) *model.OrderLine); ok {
		r0 = rf(transaction, orderLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OrderLine)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, *model.OrderLine) error); ok {
		r1 = rf(transaction, orderLine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderLineStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderLineStore creates a new instance of OrderLineStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderLineStore(t mockConstructorTestingTNewOrderLineStore) *OrderLineStore {
	mock := &OrderLineStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
