// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	order "github.com/sitename/sitename/model/order"
	mock "github.com/stretchr/testify/mock"

	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
)

// OrderLineStore is an autogenerated mock type for the OrderLineStore type
type OrderLineStore struct {
	mock.Mock
}

// BulkDelete provides a mock function with given fields: orderLineIDs
func (_m *OrderLineStore) BulkDelete(orderLineIDs []string) error {
	ret := _m.Called(orderLineIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(orderLineIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BulkUpsert provides a mock function with given fields: orderLines
func (_m *OrderLineStore) BulkUpsert(orderLines []*order.OrderLine) error {
	ret := _m.Called(orderLines)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*order.OrderLine) error); ok {
		r0 = rf(orderLines)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *OrderLineStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterbyOption provides a mock function with given fields: option
func (_m *OrderLineStore) FilterbyOption(option *order.OrderLineFilterOption) ([]*order.OrderLine, error) {
	ret := _m.Called(option)

	var r0 []*order.OrderLine
	if rf, ok := ret.Get(0).(func(*order.OrderLineFilterOption) []*order.OrderLine); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.OrderLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*order.OrderLineFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *OrderLineStore) Get(id string) (*order.OrderLine, error) {
	ret := _m.Called(id)

	var r0 *order.OrderLine
	if rf, ok := ret.Get(0).(func(string) *order.OrderLine); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrderLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *OrderLineStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// OrderLinesByOrderWithPrefetch provides a mock function with given fields: orderID
func (_m *OrderLineStore) OrderLinesByOrderWithPrefetch(orderID string) ([]*order.OrderLine, []*product_and_discount.ProductVariant, []*product_and_discount.Product, error) {
	ret := _m.Called(orderID)

	var r0 []*order.OrderLine
	if rf, ok := ret.Get(0).(func(string) []*order.OrderLine); ok {
		r0 = rf(orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.OrderLine)
		}
	}

	var r1 []*product_and_discount.ProductVariant
	if rf, ok := ret.Get(1).(func(string) []*product_and_discount.ProductVariant); ok {
		r1 = rf(orderID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*product_and_discount.ProductVariant)
		}
	}

	var r2 []*product_and_discount.Product
	if rf, ok := ret.Get(2).(func(string) []*product_and_discount.Product); ok {
		r2 = rf(orderID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*product_and_discount.Product)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(orderID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Upsert provides a mock function with given fields: orderLine
func (_m *OrderLineStore) Upsert(orderLine *order.OrderLine) (*order.OrderLine, error) {
	ret := _m.Called(orderLine)

	var r0 *order.OrderLine
	if rf, ok := ret.Get(0).(func(*order.OrderLine) *order.OrderLine); ok {
		r0 = rf(orderLine)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrderLine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*order.OrderLine) error); ok {
		r1 = rf(orderLine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
