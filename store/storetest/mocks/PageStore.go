// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// PageStore is an autogenerated mock type for the PageStore type
type PageStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *PageStore) FilterByOptions(options *model.PageFilterOptions) ([]*model.Page, error) {
	ret := _m.Called(options)

	var r0 []*model.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.PageFilterOptions) ([]*model.Page, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.PageFilterOptions) []*model.Page); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.PageFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPageStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewPageStore creates a new instance of PageStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPageStore(t mockConstructorTestingTNewPageStore) *PageStore {
	mock := &PageStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
