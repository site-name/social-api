// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"

	warehouse "github.com/sitename/sitename/model/warehouse"
)

// StockStore is an autogenerated mock type for the StockStore type
type StockStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *StockStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterForCountryAndChannel provides a mock function with given fields: options
func (_m *StockStore) FilterForCountryAndChannel(options *warehouse.ForCountryAndChannelFilter) ([]*warehouse.Stock, []*warehouse.WareHouse, []*product_and_discount.ProductVariant, error) {
	ret := _m.Called(options)

	var r0 []*warehouse.Stock
	if rf, ok := ret.Get(0).(func(*warehouse.ForCountryAndChannelFilter) []*warehouse.Stock); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Stock)
		}
	}

	var r1 []*warehouse.WareHouse
	if rf, ok := ret.Get(1).(func(*warehouse.ForCountryAndChannelFilter) []*warehouse.WareHouse); ok {
		r1 = rf(options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*warehouse.WareHouse)
		}
	}

	var r2 []*product_and_discount.ProductVariant
	if rf, ok := ret.Get(2).(func(*warehouse.ForCountryAndChannelFilter) []*product_and_discount.ProductVariant); ok {
		r2 = rf(options)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*product_and_discount.ProductVariant)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*warehouse.ForCountryAndChannelFilter) error); ok {
		r3 = rf(options)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FilterProductStocksForCountryAndChannel provides a mock function with given fields: options, productID
func (_m *StockStore) FilterProductStocksForCountryAndChannel(options *warehouse.ForCountryAndChannelFilter, productID string) ([]*warehouse.Stock, []*warehouse.WareHouse, []*product_and_discount.ProductVariant, error) {
	ret := _m.Called(options, productID)

	var r0 []*warehouse.Stock
	if rf, ok := ret.Get(0).(func(*warehouse.ForCountryAndChannelFilter, string) []*warehouse.Stock); ok {
		r0 = rf(options, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Stock)
		}
	}

	var r1 []*warehouse.WareHouse
	if rf, ok := ret.Get(1).(func(*warehouse.ForCountryAndChannelFilter, string) []*warehouse.WareHouse); ok {
		r1 = rf(options, productID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*warehouse.WareHouse)
		}
	}

	var r2 []*product_and_discount.ProductVariant
	if rf, ok := ret.Get(2).(func(*warehouse.ForCountryAndChannelFilter, string) []*product_and_discount.ProductVariant); ok {
		r2 = rf(options, productID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*product_and_discount.ProductVariant)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*warehouse.ForCountryAndChannelFilter, string) error); ok {
		r3 = rf(options, productID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// FilterVariantStocksForCountry provides a mock function with given fields: options, productVariantID
func (_m *StockStore) FilterVariantStocksForCountry(options *warehouse.ForCountryAndChannelFilter, productVariantID string) ([]*warehouse.Stock, []*warehouse.WareHouse, []*product_and_discount.ProductVariant, error) {
	ret := _m.Called(options, productVariantID)

	var r0 []*warehouse.Stock
	if rf, ok := ret.Get(0).(func(*warehouse.ForCountryAndChannelFilter, string) []*warehouse.Stock); ok {
		r0 = rf(options, productVariantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Stock)
		}
	}

	var r1 []*warehouse.WareHouse
	if rf, ok := ret.Get(1).(func(*warehouse.ForCountryAndChannelFilter, string) []*warehouse.WareHouse); ok {
		r1 = rf(options, productVariantID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*warehouse.WareHouse)
		}
	}

	var r2 []*product_and_discount.ProductVariant
	if rf, ok := ret.Get(2).(func(*warehouse.ForCountryAndChannelFilter, string) []*product_and_discount.ProductVariant); ok {
		r2 = rf(options, productVariantID)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]*product_and_discount.ProductVariant)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*warehouse.ForCountryAndChannelFilter, string) error); ok {
		r3 = rf(options, productVariantID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Get provides a mock function with given fields: stockID
func (_m *StockStore) Get(stockID string) (*warehouse.Stock, error) {
	ret := _m.Called(stockID)

	var r0 *warehouse.Stock
	if rf, ok := ret.Get(0).(func(string) *warehouse.Stock); ok {
		r0 = rf(stockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.Stock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetbyOption provides a mock function with given fields: option
func (_m *StockStore) GetbyOption(option *warehouse.StockFilterOption) (*warehouse.Stock, error) {
	ret := _m.Called(option)

	var r0 *warehouse.Stock
	if rf, ok := ret.Get(0).(func(*warehouse.StockFilterOption) *warehouse.Stock); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.Stock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*warehouse.StockFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: stock
func (_m *StockStore) Save(stock *warehouse.Stock) (*warehouse.Stock, error) {
	ret := _m.Called(stock)

	var r0 *warehouse.Stock
	if rf, ok := ret.Get(0).(func(*warehouse.Stock) *warehouse.Stock); ok {
		r0 = rf(stock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.Stock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*warehouse.Stock) error); ok {
		r1 = rf(stock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
