// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"

	squirrel "github.com/mattermost/squirrel"
)

// StockStore is an autogenerated mock type for the StockStore type
type StockStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: tx, stocks
func (_m *StockStore) BulkUpsert(tx boil.ContextTransactor, stocks model.StockSlice) (model.StockSlice, error) {
	ret := _m.Called(tx, stocks)

	var r0 model.StockSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.StockSlice) (model.StockSlice, error)); ok {
		return rf(tx, stocks)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.StockSlice) model.StockSlice); ok {
		r0 = rf(tx, stocks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.StockSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.StockSlice) error); ok {
		r1 = rf(tx, stocks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeQuantity provides a mock function with given fields: stockID, quantity
func (_m *StockStore) ChangeQuantity(stockID string, quantity int) error {
	ret := _m.Called(stockID, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(stockID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: tx, ids
func (_m *StockStore) Delete(tx boil.ContextTransactor, ids []string) (int64, error) {
	ret := _m.Called(tx, ids)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) (int64, error)); ok {
		return rf(tx, ids)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) int64); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, []string) error); ok {
		r1 = rf(tx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: options
func (_m *StockStore) FilterByOption(options model_helper.StockFilterOption) (int64, model.StockSlice, error) {
	ret := _m.Called(options)

	var r0 int64
	var r1 model.StockSlice
	var r2 error
	if rf, ok := ret.Get(0).(func(model_helper.StockFilterOption) (int64, model.StockSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.StockFilterOption) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(model_helper.StockFilterOption) model.StockSlice); ok {
		r1 = rf(options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.StockSlice)
		}
	}

	if rf, ok := ret.Get(2).(func(model_helper.StockFilterOption) error); ok {
		r2 = rf(options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FilterForChannel provides a mock function with given fields: options
func (_m *StockStore) FilterForChannel(options model_helper.StockFilterForChannelOption) (squirrel.Sqlizer, model.StockSlice, error) {
	ret := _m.Called(options)

	var r0 squirrel.Sqlizer
	var r1 model.StockSlice
	var r2 error
	if rf, ok := ret.Get(0).(func(model_helper.StockFilterForChannelOption) (squirrel.Sqlizer, model.StockSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.StockFilterForChannelOption) squirrel.Sqlizer); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(squirrel.Sqlizer)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.StockFilterForChannelOption) model.StockSlice); ok {
		r1 = rf(options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.StockSlice)
		}
	}

	if rf, ok := ret.Get(2).(func(model_helper.StockFilterForChannelOption) error); ok {
		r2 = rf(options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FilterForCountryAndChannel provides a mock function with given fields: options
func (_m *StockStore) FilterForCountryAndChannel(options model_helper.StockFilterOptionsForCountryAndChannel) (model.StockSlice, error) {
	ret := _m.Called(options)

	var r0 model.StockSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.StockFilterOptionsForCountryAndChannel) (model.StockSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.StockFilterOptionsForCountryAndChannel) model.StockSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.StockSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.StockFilterOptionsForCountryAndChannel) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterProductStocksForCountryAndChannel provides a mock function with given fields: options
func (_m *StockStore) FilterProductStocksForCountryAndChannel(options model_helper.StockFilterOptionsForCountryAndChannel) (model.StockSlice, error) {
	ret := _m.Called(options)

	var r0 model.StockSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.StockFilterOptionsForCountryAndChannel) (model.StockSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.StockFilterOptionsForCountryAndChannel) model.StockSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.StockSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.StockFilterOptionsForCountryAndChannel) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVariantStocksForCountry provides a mock function with given fields: options
func (_m *StockStore) FilterVariantStocksForCountry(options model_helper.StockFilterOptionsForCountryAndChannel) (model.StockSlice, error) {
	ret := _m.Called(options)

	var r0 model.StockSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.StockFilterOptionsForCountryAndChannel) (model.StockSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.StockFilterOptionsForCountryAndChannel) model.StockSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.StockSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.StockFilterOptionsForCountryAndChannel) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: stockID
func (_m *StockStore) Get(stockID string) (*model.Stock, error) {
	ret := _m.Called(stockID)

	var r0 *model.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Stock, error)); ok {
		return rf(stockID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Stock); ok {
		r0 = rf(stockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStockStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStockStore creates a new instance of StockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStockStore(t mockConstructorTestingTNewStockStore) *StockStore {
	mock := &StockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
