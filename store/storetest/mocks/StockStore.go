// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	squirrel "github.com/Masterminds/squirrel"

	store_iface "github.com/sitename/sitename/store/store_iface"

	warehouse "github.com/sitename/sitename/model/warehouse"
)

// StockStore is an autogenerated mock type for the StockStore type
type StockStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, stocks
func (_m *StockStore) BulkUpsert(transaction store_iface.SqlxTxExecutor, stocks []*warehouse.Stock) ([]*warehouse.Stock, error) {
	ret := _m.Called(transaction, stocks)

	var r0 []*warehouse.Stock
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, []*warehouse.Stock) []*warehouse.Stock); ok {
		r0 = rf(transaction, stocks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Stock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, []*warehouse.Stock) error); ok {
		r1 = rf(transaction, stocks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeQuantity provides a mock function with given fields: stockID, quantity
func (_m *StockStore) ChangeQuantity(stockID string, quantity int) error {
	ret := _m.Called(stockID, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(stockID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: transaction, options
func (_m *StockStore) FilterByOption(transaction store_iface.SqlxTxExecutor, options *warehouse.StockFilterOption) ([]*warehouse.Stock, error) {
	ret := _m.Called(transaction, options)

	var r0 []*warehouse.Stock
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *warehouse.StockFilterOption) []*warehouse.Stock); ok {
		r0 = rf(transaction, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Stock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *warehouse.StockFilterOption) error); ok {
		r1 = rf(transaction, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterForChannel provides a mock function with given fields: options
func (_m *StockStore) FilterForChannel(options *warehouse.StockFilterForChannelOption) (squirrel.Sqlizer, []*warehouse.Stock, error) {
	ret := _m.Called(options)

	var r0 squirrel.Sqlizer
	if rf, ok := ret.Get(0).(func(*warehouse.StockFilterForChannelOption) squirrel.Sqlizer); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(squirrel.Sqlizer)
		}
	}

	var r1 []*warehouse.Stock
	if rf, ok := ret.Get(1).(func(*warehouse.StockFilterForChannelOption) []*warehouse.Stock); ok {
		r1 = rf(options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*warehouse.Stock)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*warehouse.StockFilterForChannelOption) error); ok {
		r2 = rf(options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FilterForCountryAndChannel provides a mock function with given fields: transaction, options
func (_m *StockStore) FilterForCountryAndChannel(transaction store_iface.SqlxTxExecutor, options *warehouse.StockFilterForCountryAndChannel) ([]*warehouse.Stock, error) {
	ret := _m.Called(transaction, options)

	var r0 []*warehouse.Stock
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *warehouse.StockFilterForCountryAndChannel) []*warehouse.Stock); ok {
		r0 = rf(transaction, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Stock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *warehouse.StockFilterForCountryAndChannel) error); ok {
		r1 = rf(transaction, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterProductStocksForCountryAndChannel provides a mock function with given fields: transaction, options
func (_m *StockStore) FilterProductStocksForCountryAndChannel(transaction store_iface.SqlxTxExecutor, options *warehouse.StockFilterForCountryAndChannel) ([]*warehouse.Stock, error) {
	ret := _m.Called(transaction, options)

	var r0 []*warehouse.Stock
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *warehouse.StockFilterForCountryAndChannel) []*warehouse.Stock); ok {
		r0 = rf(transaction, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Stock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *warehouse.StockFilterForCountryAndChannel) error); ok {
		r1 = rf(transaction, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVariantStocksForCountry provides a mock function with given fields: transaction, options
func (_m *StockStore) FilterVariantStocksForCountry(transaction store_iface.SqlxTxExecutor, options *warehouse.StockFilterForCountryAndChannel) ([]*warehouse.Stock, error) {
	ret := _m.Called(transaction, options)

	var r0 []*warehouse.Stock
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *warehouse.StockFilterForCountryAndChannel) []*warehouse.Stock); ok {
		r0 = rf(transaction, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*warehouse.Stock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *warehouse.StockFilterForCountryAndChannel) error); ok {
		r1 = rf(transaction, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: stockID
func (_m *StockStore) Get(stockID string) (*warehouse.Stock, error) {
	ret := _m.Called(stockID)

	var r0 *warehouse.Stock
	if rf, ok := ret.Get(0).(func(string) *warehouse.Stock); ok {
		r0 = rf(stockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*warehouse.Stock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *StockStore) ModelFields(prefix string) model.AnyArray[string] {
	ret := _m.Called(prefix)

	var r0 model.AnyArray[string]
	if rf, ok := ret.Get(0).(func(string) model.AnyArray[string]); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AnyArray[string])
		}
	}

	return r0
}

// ScanFields provides a mock function with given fields: stock
func (_m *StockStore) ScanFields(stock warehouse.Stock) []interface{} {
	ret := _m.Called(stock)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(warehouse.Stock) []interface{}); ok {
		r0 = rf(stock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}
