// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	squirrel "github.com/Masterminds/squirrel"
)

// StockStore is an autogenerated mock type for the StockStore type
type StockStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, stocks
func (_m *StockStore) BulkUpsert(transaction *gorm.DB, stocks []*model.Stock) ([]*model.Stock, error) {
	ret := _m.Called(transaction, stocks)

	var r0 []*model.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.Stock) ([]*model.Stock, error)); ok {
		return rf(transaction, stocks)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.Stock) []*model.Stock); ok {
		r0 = rf(transaction, stocks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.Stock) error); ok {
		r1 = rf(transaction, stocks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeQuantity provides a mock function with given fields: stockID, quantity
func (_m *StockStore) ChangeQuantity(stockID string, quantity int) error {
	ret := _m.Called(stockID, quantity)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(stockID, quantity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: options
func (_m *StockStore) FilterByOption(options *model.StockFilterOption) (int64, []*model.Stock, error) {
	ret := _m.Called(options)

	var r0 int64
	var r1 []*model.Stock
	var r2 error
	if rf, ok := ret.Get(0).(func(*model.StockFilterOption) (int64, []*model.Stock, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.StockFilterOption) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.StockFilterOption) []*model.Stock); ok {
		r1 = rf(options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.Stock)
		}
	}

	if rf, ok := ret.Get(2).(func(*model.StockFilterOption) error); ok {
		r2 = rf(options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FilterForChannel provides a mock function with given fields: options
func (_m *StockStore) FilterForChannel(options *model.StockFilterForChannelOption) (squirrel.Sqlizer, []*model.Stock, error) {
	ret := _m.Called(options)

	var r0 squirrel.Sqlizer
	var r1 []*model.Stock
	var r2 error
	if rf, ok := ret.Get(0).(func(*model.StockFilterForChannelOption) (squirrel.Sqlizer, []*model.Stock, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.StockFilterForChannelOption) squirrel.Sqlizer); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(squirrel.Sqlizer)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.StockFilterForChannelOption) []*model.Stock); ok {
		r1 = rf(options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.Stock)
		}
	}

	if rf, ok := ret.Get(2).(func(*model.StockFilterForChannelOption) error); ok {
		r2 = rf(options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FilterForCountryAndChannel provides a mock function with given fields: options
func (_m *StockStore) FilterForCountryAndChannel(options *model.StockFilterForCountryAndChannel) ([]*model.Stock, error) {
	ret := _m.Called(options)

	var r0 []*model.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.StockFilterForCountryAndChannel) ([]*model.Stock, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.StockFilterForCountryAndChannel) []*model.Stock); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.StockFilterForCountryAndChannel) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterProductStocksForCountryAndChannel provides a mock function with given fields: options
func (_m *StockStore) FilterProductStocksForCountryAndChannel(options *model.StockFilterForCountryAndChannel) ([]*model.Stock, error) {
	ret := _m.Called(options)

	var r0 []*model.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.StockFilterForCountryAndChannel) ([]*model.Stock, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.StockFilterForCountryAndChannel) []*model.Stock); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.StockFilterForCountryAndChannel) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVariantStocksForCountry provides a mock function with given fields: options
func (_m *StockStore) FilterVariantStocksForCountry(options *model.StockFilterForCountryAndChannel) ([]*model.Stock, error) {
	ret := _m.Called(options)

	var r0 []*model.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.StockFilterForCountryAndChannel) ([]*model.Stock, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.StockFilterForCountryAndChannel) []*model.Stock); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.StockFilterForCountryAndChannel) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: stockID
func (_m *StockStore) Get(stockID string) (*model.Stock, error) {
	ret := _m.Called(stockID)

	var r0 *model.Stock
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Stock, error)); ok {
		return rf(stockID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Stock); ok {
		r0 = rf(stockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Stock)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(stockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: stock
func (_m *StockStore) ScanFields(stock *model.Stock) []interface{} {
	ret := _m.Called(stock)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.Stock) []interface{}); ok {
		r0 = rf(stock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewStockStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStockStore creates a new instance of StockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStockStore(t mockConstructorTestingTNewStockStore) *StockStore {
	mock := &StockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
