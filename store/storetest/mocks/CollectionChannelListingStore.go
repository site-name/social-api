// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// CollectionChannelListingStore is an autogenerated mock type for the CollectionChannelListingStore type
type CollectionChannelListingStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: transaction, options
func (_m *CollectionChannelListingStore) Delete(transaction *gorm.DB, options *model.CollectionChannelListingFilterOptions) error {
	ret := _m.Called(transaction, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.CollectionChannelListingFilterOptions) error); ok {
		r0 = rf(transaction, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOptions provides a mock function with given fields: options
func (_m *CollectionChannelListingStore) FilterByOptions(options *model.CollectionChannelListingFilterOptions) ([]*model.CollectionChannelListing, error) {
	ret := _m.Called(options)

	var r0 []*model.CollectionChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.CollectionChannelListingFilterOptions) ([]*model.CollectionChannelListing, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.CollectionChannelListingFilterOptions) []*model.CollectionChannelListing); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CollectionChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.CollectionChannelListingFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: transaction, relations
func (_m *CollectionChannelListingStore) Upsert(transaction *gorm.DB, relations ...*model.CollectionChannelListing) ([]*model.CollectionChannelListing, error) {
	_va := make([]interface{}, len(relations))
	for _i := range relations {
		_va[_i] = relations[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, transaction)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*model.CollectionChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...*model.CollectionChannelListing) ([]*model.CollectionChannelListing, error)); ok {
		return rf(transaction, relations...)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...*model.CollectionChannelListing) []*model.CollectionChannelListing); ok {
		r0 = rf(transaction, relations...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CollectionChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, ...*model.CollectionChannelListing) error); ok {
		r1 = rf(transaction, relations...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCollectionChannelListingStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCollectionChannelListingStore creates a new instance of CollectionChannelListingStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollectionChannelListingStore(t mockConstructorTestingTNewCollectionChannelListingStore) *CollectionChannelListingStore {
	mock := &CollectionChannelListingStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
