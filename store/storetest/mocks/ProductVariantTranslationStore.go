// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// ProductVariantTranslationStore is an autogenerated mock type for the ProductVariantTranslationStore type
type ProductVariantTranslationStore struct {
	mock.Mock
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductVariantTranslationStore) FilterByOption(option *model.ProductVariantTranslationFilterOption) ([]*model.ProductVariantTranslation, error) {
	ret := _m.Called(option)

	var r0 []*model.ProductVariantTranslation
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductVariantTranslationFilterOption) ([]*model.ProductVariantTranslation, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductVariantTranslationFilterOption) []*model.ProductVariantTranslation); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductVariantTranslation)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductVariantTranslationFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: translationID
func (_m *ProductVariantTranslationStore) Get(translationID string) (*model.ProductVariantTranslation, error) {
	ret := _m.Called(translationID)

	var r0 *model.ProductVariantTranslation
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductVariantTranslation, error)); ok {
		return rf(translationID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductVariantTranslation); ok {
		r0 = rf(translationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariantTranslation)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(translationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: translation
func (_m *ProductVariantTranslationStore) Upsert(translation *model.ProductVariantTranslation) (*model.ProductVariantTranslation, error) {
	ret := _m.Called(translation)

	var r0 *model.ProductVariantTranslation
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductVariantTranslation) (*model.ProductVariantTranslation, error)); ok {
		return rf(translation)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductVariantTranslation) *model.ProductVariantTranslation); ok {
		r0 = rf(translation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariantTranslation)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductVariantTranslation) error); ok {
		r1 = rf(translation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductVariantTranslationStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductVariantTranslationStore creates a new instance of ProductVariantTranslationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductVariantTranslationStore(t mockConstructorTestingTNewProductVariantTranslationStore) *ProductVariantTranslationStore {
	mock := &ProductVariantTranslationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
