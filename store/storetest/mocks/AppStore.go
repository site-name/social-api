// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// AppStore is an autogenerated mock type for the AppStore type
type AppStore struct {
	mock.Mock
}

// Save provides a mock function with given fields: app
func (_m *AppStore) Save(app *model.App) (*model.App, error) {
	ret := _m.Called(app)

	var r0 *model.App
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.App) (*model.App, error)); ok {
		return rf(app)
	}
	if rf, ok := ret.Get(0).(func(*model.App) *model.App); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.App)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.App) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAppStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAppStore creates a new instance of AppStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAppStore(t mockConstructorTestingTNewAppStore) *AppStore {
	mock := &AppStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
