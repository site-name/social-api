// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	attribute "github.com/sitename/sitename/model/attribute"
	mock "github.com/stretchr/testify/mock"

	model "github.com/sitename/sitename/model"
)

// AssignedVariantAttributeValueStore is an autogenerated mock type for the AssignedVariantAttributeValueStore type
type AssignedVariantAttributeValueStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: assignedVariantAttrValueID
func (_m *AssignedVariantAttributeValueStore) Get(assignedVariantAttrValueID string) (*attribute.AssignedVariantAttributeValue, error) {
	ret := _m.Called(assignedVariantAttrValueID)

	var r0 *attribute.AssignedVariantAttributeValue
	if rf, ok := ret.Get(0).(func(string) *attribute.AssignedVariantAttributeValue); ok {
		r0 = rf(assignedVariantAttrValueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AssignedVariantAttributeValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(assignedVariantAttrValueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *AssignedVariantAttributeValueStore) ModelFields(prefix string) model.StringArray {
	ret := _m.Called(prefix)

	var r0 model.StringArray
	if rf, ok := ret.Get(0).(func(string) model.StringArray); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.StringArray)
		}
	}

	return r0
}

// Save provides a mock function with given fields: assignedVariantAttrValue
func (_m *AssignedVariantAttributeValueStore) Save(assignedVariantAttrValue *attribute.AssignedVariantAttributeValue) (*attribute.AssignedVariantAttributeValue, error) {
	ret := _m.Called(assignedVariantAttrValue)

	var r0 *attribute.AssignedVariantAttributeValue
	if rf, ok := ret.Get(0).(func(*attribute.AssignedVariantAttributeValue) *attribute.AssignedVariantAttributeValue); ok {
		r0 = rf(assignedVariantAttrValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AssignedVariantAttributeValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AssignedVariantAttributeValue) error); ok {
		r1 = rf(assignedVariantAttrValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveInBulk provides a mock function with given fields: assignmentID, attributeValueIDs
func (_m *AssignedVariantAttributeValueStore) SaveInBulk(assignmentID string, attributeValueIDs []string) ([]*attribute.AssignedVariantAttributeValue, error) {
	ret := _m.Called(assignmentID, attributeValueIDs)

	var r0 []*attribute.AssignedVariantAttributeValue
	if rf, ok := ret.Get(0).(func(string, []string) []*attribute.AssignedVariantAttributeValue); ok {
		r0 = rf(assignmentID, attributeValueIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*attribute.AssignedVariantAttributeValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(assignmentID, attributeValueIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: assignedVariantAttributeValue
func (_m *AssignedVariantAttributeValueStore) ScanFields(assignedVariantAttributeValue attribute.AssignedVariantAttributeValue) []interface{} {
	ret := _m.Called(assignedVariantAttributeValue)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(attribute.AssignedVariantAttributeValue) []interface{}); ok {
		r0 = rf(assignedVariantAttributeValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// SelectForSort provides a mock function with given fields: assignmentID
func (_m *AssignedVariantAttributeValueStore) SelectForSort(assignmentID string) ([]*attribute.AssignedVariantAttributeValue, []*attribute.AttributeValue, error) {
	ret := _m.Called(assignmentID)

	var r0 []*attribute.AssignedVariantAttributeValue
	if rf, ok := ret.Get(0).(func(string) []*attribute.AssignedVariantAttributeValue); ok {
		r0 = rf(assignmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*attribute.AssignedVariantAttributeValue)
		}
	}

	var r1 []*attribute.AttributeValue
	if rf, ok := ret.Get(1).(func(string) []*attribute.AttributeValue); ok {
		r1 = rf(assignmentID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*attribute.AttributeValue)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(assignmentID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateInBulk provides a mock function with given fields: attributeValues
func (_m *AssignedVariantAttributeValueStore) UpdateInBulk(attributeValues []*attribute.AssignedVariantAttributeValue) error {
	ret := _m.Called(attributeValues)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*attribute.AssignedVariantAttributeValue) error); ok {
		r0 = rf(attributeValues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
