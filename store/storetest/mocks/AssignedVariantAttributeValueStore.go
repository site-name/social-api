// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// AssignedVariantAttributeValueStore is an autogenerated mock type for the AssignedVariantAttributeValueStore type
type AssignedVariantAttributeValueStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *AssignedVariantAttributeValueStore) FilterByOptions(options *model.AssignedVariantAttributeValueFilterOptions) ([]*model.AssignedVariantAttributeValue, error) {
	ret := _m.Called(options)

	var r0 []*model.AssignedVariantAttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttributeValueFilterOptions) ([]*model.AssignedVariantAttributeValue, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttributeValueFilterOptions) []*model.AssignedVariantAttributeValue); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AssignedVariantAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AssignedVariantAttributeValueFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *AssignedVariantAttributeValueStore) Get(id string) (*model.AssignedVariantAttributeValue, error) {
	ret := _m.Called(id)

	var r0 *model.AssignedVariantAttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AssignedVariantAttributeValue, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AssignedVariantAttributeValue); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedVariantAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: assignedVariantAttrValue
func (_m *AssignedVariantAttributeValueStore) Save(assignedVariantAttrValue *model.AssignedVariantAttributeValue) (*model.AssignedVariantAttributeValue, error) {
	ret := _m.Called(assignedVariantAttrValue)

	var r0 *model.AssignedVariantAttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttributeValue) (*model.AssignedVariantAttributeValue, error)); ok {
		return rf(assignedVariantAttrValue)
	}
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttributeValue) *model.AssignedVariantAttributeValue); ok {
		r0 = rf(assignedVariantAttrValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedVariantAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AssignedVariantAttributeValue) error); ok {
		r1 = rf(assignedVariantAttrValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveInBulk provides a mock function with given fields: assignmentID, attributeValueIDs
func (_m *AssignedVariantAttributeValueStore) SaveInBulk(assignmentID string, attributeValueIDs []string) ([]*model.AssignedVariantAttributeValue, error) {
	ret := _m.Called(assignmentID, attributeValueIDs)

	var r0 []*model.AssignedVariantAttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) ([]*model.AssignedVariantAttributeValue, error)); ok {
		return rf(assignmentID, attributeValueIDs)
	}
	if rf, ok := ret.Get(0).(func(string, []string) []*model.AssignedVariantAttributeValue); ok {
		r0 = rf(assignmentID, attributeValueIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AssignedVariantAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(assignmentID, attributeValueIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: assignedVariantAttributeValue
func (_m *AssignedVariantAttributeValueStore) ScanFields(assignedVariantAttributeValue *model.AssignedVariantAttributeValue) []interface{} {
	ret := _m.Called(assignedVariantAttributeValue)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttributeValue) []interface{}); ok {
		r0 = rf(assignedVariantAttributeValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// SelectForSort provides a mock function with given fields: assignmentID
func (_m *AssignedVariantAttributeValueStore) SelectForSort(assignmentID string) ([]*model.AssignedVariantAttributeValue, []*model.AttributeValue, error) {
	ret := _m.Called(assignmentID)

	var r0 []*model.AssignedVariantAttributeValue
	var r1 []*model.AttributeValue
	var r2 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.AssignedVariantAttributeValue, []*model.AttributeValue, error)); ok {
		return rf(assignmentID)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.AssignedVariantAttributeValue); ok {
		r0 = rf(assignmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AssignedVariantAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string) []*model.AttributeValue); ok {
		r1 = rf(assignmentID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.AttributeValue)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(assignmentID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateInBulk provides a mock function with given fields: attributeValues
func (_m *AssignedVariantAttributeValueStore) UpdateInBulk(attributeValues []*model.AssignedVariantAttributeValue) error {
	ret := _m.Called(attributeValues)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*model.AssignedVariantAttributeValue) error); ok {
		r0 = rf(attributeValues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAssignedVariantAttributeValueStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAssignedVariantAttributeValueStore creates a new instance of AssignedVariantAttributeValueStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAssignedVariantAttributeValueStore(t mockConstructorTestingTNewAssignedVariantAttributeValueStore) *AssignedVariantAttributeValueStore {
	mock := &AssignedVariantAttributeValueStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
