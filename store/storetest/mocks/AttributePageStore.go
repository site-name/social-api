// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	attribute "github.com/sitename/sitename/model/attribute"
	mock "github.com/stretchr/testify/mock"
)

// AttributePageStore is an autogenerated mock type for the AttributePageStore type
type AttributePageStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *AttributePageStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: pageID
func (_m *AttributePageStore) Get(pageID string) (*attribute.AttributePage, error) {
	ret := _m.Called(pageID)

	var r0 *attribute.AttributePage
	if rf, ok := ret.Get(0).(func(string) *attribute.AttributePage); ok {
		r0 = rf(pageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AttributePage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *AttributePageStore) GetByOption(option *attribute.AttributePageFilterOption) (*attribute.AttributePage, error) {
	ret := _m.Called(option)

	var r0 *attribute.AttributePage
	if rf, ok := ret.Get(0).(func(*attribute.AttributePageFilterOption) *attribute.AttributePage); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AttributePage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AttributePageFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: page
func (_m *AttributePageStore) Save(page *attribute.AttributePage) (*attribute.AttributePage, error) {
	ret := _m.Called(page)

	var r0 *attribute.AttributePage
	if rf, ok := ret.Get(0).(func(*attribute.AttributePage) *attribute.AttributePage); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AttributePage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AttributePage) error); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
