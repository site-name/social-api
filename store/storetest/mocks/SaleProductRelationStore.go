// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// SaleProductRelationStore is an autogenerated mock type for the SaleProductRelationStore type
type SaleProductRelationStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: relationID
func (_m *SaleProductRelationStore) Get(relationID string) (*product_and_discount.SaleProductRelation, error) {
	ret := _m.Called(relationID)

	var r0 *product_and_discount.SaleProductRelation
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.SaleProductRelation); ok {
		r0 = rf(relationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.SaleProductRelation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(relationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleProductsByOption provides a mock function with given fields: option
func (_m *SaleProductRelationStore) SaleProductsByOption(option *product_and_discount.SaleProductRelationFilterOption) ([]*product_and_discount.SaleProductRelation, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.SaleProductRelation
	if rf, ok := ret.Get(0).(func(*product_and_discount.SaleProductRelationFilterOption) []*product_and_discount.SaleProductRelation); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.SaleProductRelation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.SaleProductRelationFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: relation
func (_m *SaleProductRelationStore) Save(relation *product_and_discount.SaleProductRelation) (*product_and_discount.SaleProductRelation, error) {
	ret := _m.Called(relation)

	var r0 *product_and_discount.SaleProductRelation
	if rf, ok := ret.Get(0).(func(*product_and_discount.SaleProductRelation) *product_and_discount.SaleProductRelation); ok {
		r0 = rf(relation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.SaleProductRelation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.SaleProductRelation) error); ok {
		r1 = rf(relation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
