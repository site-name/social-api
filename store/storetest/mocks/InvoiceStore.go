// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	invoice "github.com/sitename/sitename/model/invoice"
	mock "github.com/stretchr/testify/mock"
)

// InvoiceStore is an autogenerated mock type for the InvoiceStore type
type InvoiceStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: invoiceID
func (_m *InvoiceStore) Get(invoiceID string) (*invoice.Invoice, error) {
	ret := _m.Called(invoiceID)

	var r0 *invoice.Invoice
	if rf, ok := ret.Get(0).(func(string) *invoice.Invoice); ok {
		r0 = rf(invoiceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoice.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invoiceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: _a0
func (_m *InvoiceStore) Upsert(_a0 *invoice.Invoice) (*invoice.Invoice, error) {
	ret := _m.Called(_a0)

	var r0 *invoice.Invoice
	if rf, ok := ret.Get(0).(func(*invoice.Invoice) *invoice.Invoice); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoice.Invoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*invoice.Invoice) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
