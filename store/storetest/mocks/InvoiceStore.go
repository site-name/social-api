// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// InvoiceStore is an autogenerated mock type for the InvoiceStore type
type InvoiceStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: tx, ids
func (_m *InvoiceStore) Delete(tx boil.ContextTransactor, ids []string) error {
	ret := _m.Called(tx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOptions provides a mock function with given fields: options
func (_m *InvoiceStore) FilterByOptions(options model_helper.InvoiceFilterOption) (model.InvoiceSlice, error) {
	ret := _m.Called(options)

	var r0 model.InvoiceSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.InvoiceFilterOption) (model.InvoiceSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.InvoiceFilterOption) model.InvoiceSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.InvoiceSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.InvoiceFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetbyOptions provides a mock function with given fields: options
func (_m *InvoiceStore) GetbyOptions(options model_helper.InvoiceFilterOption) (*model.Invoice, error) {
	ret := _m.Called(options)

	var r0 *model.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.InvoiceFilterOption) (*model.Invoice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.InvoiceFilterOption) *model.Invoice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.InvoiceFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: invoice
func (_m *InvoiceStore) Upsert(invoice model.Invoice) (*model.Invoice, error) {
	ret := _m.Called(invoice)

	var r0 *model.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Invoice) (*model.Invoice, error)); ok {
		return rf(invoice)
	}
	if rf, ok := ret.Get(0).(func(model.Invoice) *model.Invoice); ok {
		r0 = rf(invoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Invoice) error); ok {
		r1 = rf(invoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInvoiceStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvoiceStore creates a new instance of InvoiceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvoiceStore(t mockConstructorTestingTNewInvoiceStore) *InvoiceStore {
	mock := &InvoiceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
