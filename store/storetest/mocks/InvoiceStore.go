// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// InvoiceStore is an autogenerated mock type for the InvoiceStore type
type InvoiceStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: transaction, ids
func (_m *InvoiceStore) Delete(transaction *gorm.DB, ids ...string) error {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, transaction)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...string) error); ok {
		r0 = rf(transaction, ids...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOptions provides a mock function with given fields: options
func (_m *InvoiceStore) FilterByOptions(options *model.InvoiceFilterOptions) ([]*model.Invoice, error) {
	ret := _m.Called(options)

	var r0 []*model.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.InvoiceFilterOptions) ([]*model.Invoice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.InvoiceFilterOptions) []*model.Invoice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.InvoiceFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetbyOptions provides a mock function with given fields: options
func (_m *InvoiceStore) GetbyOptions(options *model.InvoiceFilterOptions) (*model.Invoice, error) {
	ret := _m.Called(options)

	var r0 *model.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.InvoiceFilterOptions) (*model.Invoice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.InvoiceFilterOptions) *model.Invoice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.InvoiceFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: invoice
func (_m *InvoiceStore) Upsert(invoice *model.Invoice) (*model.Invoice, error) {
	ret := _m.Called(invoice)

	var r0 *model.Invoice
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Invoice) (*model.Invoice, error)); ok {
		return rf(invoice)
	}
	if rf, ok := ret.Get(0).(func(*model.Invoice) *model.Invoice); ok {
		r0 = rf(invoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Invoice)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Invoice) error); ok {
		r1 = rf(invoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewInvoiceStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvoiceStore creates a new instance of InvoiceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvoiceStore(t mockConstructorTestingTNewInvoiceStore) *InvoiceStore {
	mock := &InvoiceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
