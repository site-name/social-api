// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	shop "github.com/sitename/sitename/model/shop"
	mock "github.com/stretchr/testify/mock"
)

// ShopStore is an autogenerated mock type for the ShopStore type
type ShopStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *ShopStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOptions provides a mock function with given fields: options
func (_m *ShopStore) FilterByOptions(options *shop.ShopFilterOptions) ([]*shop.Shop, error) {
	ret := _m.Called(options)

	var r0 []*shop.Shop
	if rf, ok := ret.Get(0).(func(*shop.ShopFilterOptions) []*shop.Shop); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*shop.Shop)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shop.ShopFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: shopID
func (_m *ShopStore) Get(shopID string) (*shop.Shop, error) {
	ret := _m.Called(shopID)

	var r0 *shop.Shop
	if rf, ok := ret.Get(0).(func(string) *shop.Shop); ok {
		r0 = rf(shopID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shop.Shop)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shopID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOptions provides a mock function with given fields: options
func (_m *ShopStore) GetByOptions(options *shop.ShopFilterOptions) (*shop.Shop, error) {
	ret := _m.Called(options)

	var r0 *shop.Shop
	if rf, ok := ret.Get(0).(func(*shop.ShopFilterOptions) *shop.Shop); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shop.Shop)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shop.ShopFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: _a0
func (_m *ShopStore) Upsert(_a0 *shop.Shop) (*shop.Shop, error) {
	ret := _m.Called(_a0)

	var r0 *shop.Shop
	if rf, ok := ret.Get(0).(func(*shop.Shop) *shop.Shop); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shop.Shop)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shop.Shop) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
