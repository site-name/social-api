// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// StaffNotificationRecipientStore is an autogenerated mock type for the StaffNotificationRecipientStore type
type StaffNotificationRecipientStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *StaffNotificationRecipientStore) FilterByOptions(options *model.StaffNotificationRecipientFilterOptions) ([]*model.StaffNotificationRecipient, error) {
	ret := _m.Called(options)

	var r0 []*model.StaffNotificationRecipient
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.StaffNotificationRecipientFilterOptions) ([]*model.StaffNotificationRecipient, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.StaffNotificationRecipientFilterOptions) []*model.StaffNotificationRecipient); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.StaffNotificationRecipient)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.StaffNotificationRecipientFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: notificationRecipient
func (_m *StaffNotificationRecipientStore) Save(notificationRecipient *model.StaffNotificationRecipient) (*model.StaffNotificationRecipient, error) {
	ret := _m.Called(notificationRecipient)

	var r0 *model.StaffNotificationRecipient
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.StaffNotificationRecipient) (*model.StaffNotificationRecipient, error)); ok {
		return rf(notificationRecipient)
	}
	if rf, ok := ret.Get(0).(func(*model.StaffNotificationRecipient) *model.StaffNotificationRecipient); ok {
		r0 = rf(notificationRecipient)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.StaffNotificationRecipient)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.StaffNotificationRecipient) error); ok {
		r1 = rf(notificationRecipient)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStaffNotificationRecipientStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStaffNotificationRecipientStore creates a new instance of StaffNotificationRecipientStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStaffNotificationRecipientStore(t mockConstructorTestingTNewStaffNotificationRecipientStore) *StaffNotificationRecipientStore {
	mock := &StaffNotificationRecipientStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
