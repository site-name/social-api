// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// AttributeVariantStore is an autogenerated mock type for the AttributeVariantStore type
type AttributeVariantStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *AttributeVariantStore) FilterByOptions(options *model.AttributeVariantFilterOption) ([]*model.AttributeVariant, error) {
	ret := _m.Called(options)

	var r0 []*model.AttributeVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AttributeVariantFilterOption) ([]*model.AttributeVariant, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.AttributeVariantFilterOption) []*model.AttributeVariant); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AttributeVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AttributeVariantFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: attributeVariantID
func (_m *AttributeVariantStore) Get(attributeVariantID string) (*model.AttributeVariant, error) {
	ret := _m.Called(attributeVariantID)

	var r0 *model.AttributeVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AttributeVariant, error)); ok {
		return rf(attributeVariantID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AttributeVariant); ok {
		r0 = rf(attributeVariantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttributeVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(attributeVariantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *AttributeVariantStore) GetByOption(option *model.AttributeVariantFilterOption) (*model.AttributeVariant, error) {
	ret := _m.Called(option)

	var r0 *model.AttributeVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AttributeVariantFilterOption) (*model.AttributeVariant, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.AttributeVariantFilterOption) *model.AttributeVariant); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttributeVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AttributeVariantFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: attributeVariant
func (_m *AttributeVariantStore) Save(attributeVariant *model.AttributeVariant) (*model.AttributeVariant, error) {
	ret := _m.Called(attributeVariant)

	var r0 *model.AttributeVariant
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AttributeVariant) (*model.AttributeVariant, error)); ok {
		return rf(attributeVariant)
	}
	if rf, ok := ret.Get(0).(func(*model.AttributeVariant) *model.AttributeVariant); ok {
		r0 = rf(attributeVariant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttributeVariant)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AttributeVariant) error); ok {
		r1 = rf(attributeVariant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAttributeVariantStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAttributeVariantStore creates a new instance of AttributeVariantStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAttributeVariantStore(t mockConstructorTestingTNewAttributeVariantStore) *AttributeVariantStore {
	mock := &AttributeVariantStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
