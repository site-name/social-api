// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	menu "github.com/sitename/sitename/model/menu"
	mock "github.com/stretchr/testify/mock"
)

// MenuItemStore is an autogenerated mock type for the MenuItemStore type
type MenuItemStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *MenuItemStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// GetById provides a mock function with given fields: id
func (_m *MenuItemStore) GetById(id string) (*menu.MenuItem, error) {
	ret := _m.Called(id)

	var r0 *menu.MenuItem
	if rf, ok := ret.Get(0).(func(string) *menu.MenuItem); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*menu.MenuItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: name
func (_m *MenuItemStore) GetByName(name string) (*menu.MenuItem, error) {
	ret := _m.Called(name)

	var r0 *menu.MenuItem
	if rf, ok := ret.Get(0).(func(string) *menu.MenuItem); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*menu.MenuItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: menuItem
func (_m *MenuItemStore) Save(menuItem *menu.MenuItem) (*menu.MenuItem, error) {
	ret := _m.Called(menuItem)

	var r0 *menu.MenuItem
	if rf, ok := ret.Get(0).(func(*menu.MenuItem) *menu.MenuItem); ok {
		r0 = rf(menuItem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*menu.MenuItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*menu.MenuItem) error); ok {
		r1 = rf(menuItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
