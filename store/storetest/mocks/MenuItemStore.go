// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// MenuItemStore is an autogenerated mock type for the MenuItemStore type
type MenuItemStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ids
func (_m *MenuItemStore) Delete(ids []string) (int64, *model.AppError) {
	ret := _m.Called(ids)

	var r0 int64
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func([]string) (int64, *model.AppError)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) int64); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func([]string) *model.AppError); ok {
		r1 = rf(ids)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// FilterByOptions provides a mock function with given fields: options
func (_m *MenuItemStore) FilterByOptions(options *model.MenuItemFilterOptions) ([]*model.MenuItem, error) {
	ret := _m.Called(options)

	var r0 []*model.MenuItem
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.MenuItemFilterOptions) ([]*model.MenuItem, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.MenuItemFilterOptions) []*model.MenuItem); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.MenuItem)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.MenuItemFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOptions provides a mock function with given fields: options
func (_m *MenuItemStore) GetByOptions(options *model.MenuItemFilterOptions) (*model.MenuItem, error) {
	ret := _m.Called(options)

	var r0 *model.MenuItem
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.MenuItemFilterOptions) (*model.MenuItem, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.MenuItemFilterOptions) *model.MenuItem); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MenuItem)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.MenuItemFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: menuItem
func (_m *MenuItemStore) Save(menuItem *model.MenuItem) (*model.MenuItem, error) {
	ret := _m.Called(menuItem)

	var r0 *model.MenuItem
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.MenuItem) (*model.MenuItem, error)); ok {
		return rf(menuItem)
	}
	if rf, ok := ret.Get(0).(func(*model.MenuItem) *model.MenuItem); ok {
		r0 = rf(menuItem)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MenuItem)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.MenuItem) error); ok {
		r1 = rf(menuItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMenuItemStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenuItemStore creates a new instance of MenuItemStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenuItemStore(t mockConstructorTestingTNewMenuItemStore) *MenuItemStore {
	mock := &MenuItemStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
