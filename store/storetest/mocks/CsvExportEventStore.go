// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	csv "github.com/sitename/sitename/model/csv"
	mock "github.com/stretchr/testify/mock"
)

// CsvExportEventStore is an autogenerated mock type for the CsvExportEventStore type
type CsvExportEventStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *CsvExportEventStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOption provides a mock function with given fields: options
func (_m *CsvExportEventStore) FilterByOption(options *csv.ExportEventFilterOption) ([]*csv.ExportEvent, error) {
	ret := _m.Called(options)

	var r0 []*csv.ExportEvent
	if rf, ok := ret.Get(0).(func(*csv.ExportEventFilterOption) []*csv.ExportEvent); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*csv.ExportEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*csv.ExportEventFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: event
func (_m *CsvExportEventStore) Save(event *csv.ExportEvent) (*csv.ExportEvent, error) {
	ret := _m.Called(event)

	var r0 *csv.ExportEvent
	if rf, ok := ret.Get(0).(func(*csv.ExportEvent) *csv.ExportEvent); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*csv.ExportEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*csv.ExportEvent) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
