// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	invoice "github.com/sitename/sitename/model/invoice"
	mock "github.com/stretchr/testify/mock"
)

// InvoiceEventStore is an autogenerated mock type for the InvoiceEventStore type
type InvoiceEventStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: invoiceEventID
func (_m *InvoiceEventStore) Get(invoiceEventID string) (*invoice.InvoiceEvent, error) {
	ret := _m.Called(invoiceEventID)

	var r0 *invoice.InvoiceEvent
	if rf, ok := ret.Get(0).(func(string) *invoice.InvoiceEvent); ok {
		r0 = rf(invoiceEventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoice.InvoiceEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(invoiceEventID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: invoiceEvent
func (_m *InvoiceEventStore) Upsert(invoiceEvent *invoice.InvoiceEvent) (*invoice.InvoiceEvent, error) {
	ret := _m.Called(invoiceEvent)

	var r0 *invoice.InvoiceEvent
	if rf, ok := ret.Get(0).(func(*invoice.InvoiceEvent) *invoice.InvoiceEvent); ok {
		r0 = rf(invoiceEvent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoice.InvoiceEvent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*invoice.InvoiceEvent) error); ok {
		r1 = rf(invoiceEvent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
