// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	compliance "github.com/sitename/sitename/model/compliance"
	mock "github.com/stretchr/testify/mock"
)

// ComplianceStore is an autogenerated mock type for the ComplianceStore type
type ComplianceStore struct {
	mock.Mock
}

// ComplianceExport provides a mock function with given fields: _a0, cursor, limit
func (_m *ComplianceStore) ComplianceExport(_a0 *compliance.Compliance, cursor compliance.ComplianceExportCursor, limit int) ([]*compliance.CompliancePost, compliance.ComplianceExportCursor, error) {
	ret := _m.Called(_a0, cursor, limit)

	var r0 []*compliance.CompliancePost
	if rf, ok := ret.Get(0).(func(*compliance.Compliance, compliance.ComplianceExportCursor, int) []*compliance.CompliancePost); ok {
		r0 = rf(_a0, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*compliance.CompliancePost)
		}
	}

	var r1 compliance.ComplianceExportCursor
	if rf, ok := ret.Get(1).(func(*compliance.Compliance, compliance.ComplianceExportCursor, int) compliance.ComplianceExportCursor); ok {
		r1 = rf(_a0, cursor, limit)
	} else {
		r1 = ret.Get(1).(compliance.ComplianceExportCursor)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*compliance.Compliance, compliance.ComplianceExportCursor, int) error); ok {
		r2 = rf(_a0, cursor, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *ComplianceStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: id
func (_m *ComplianceStore) Get(id string) (*compliance.Compliance, error) {
	ret := _m.Called(id)

	var r0 *compliance.Compliance
	if rf, ok := ret.Get(0).(func(string) *compliance.Compliance); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compliance.Compliance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: offset, limit
func (_m *ComplianceStore) GetAll(offset int, limit int) (compliance.Compliances, error) {
	ret := _m.Called(offset, limit)

	var r0 compliance.Compliances
	if rf, ok := ret.Get(0).(func(int, int) compliance.Compliances); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(compliance.Compliances)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageExport provides a mock function with given fields: cursor, limit
func (_m *ComplianceStore) MessageExport(cursor compliance.MessageExportCursor, limit int) ([]*compliance.MessageExport, compliance.MessageExportCursor, error) {
	ret := _m.Called(cursor, limit)

	var r0 []*compliance.MessageExport
	if rf, ok := ret.Get(0).(func(compliance.MessageExportCursor, int) []*compliance.MessageExport); ok {
		r0 = rf(cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*compliance.MessageExport)
		}
	}

	var r1 compliance.MessageExportCursor
	if rf, ok := ret.Get(1).(func(compliance.MessageExportCursor, int) compliance.MessageExportCursor); ok {
		r1 = rf(cursor, limit)
	} else {
		r1 = ret.Get(1).(compliance.MessageExportCursor)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(compliance.MessageExportCursor, int) error); ok {
		r2 = rf(cursor, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Save provides a mock function with given fields: _a0
func (_m *ComplianceStore) Save(_a0 *compliance.Compliance) (*compliance.Compliance, error) {
	ret := _m.Called(_a0)

	var r0 *compliance.Compliance
	if rf, ok := ret.Get(0).(func(*compliance.Compliance) *compliance.Compliance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compliance.Compliance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*compliance.Compliance) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *ComplianceStore) Update(_a0 *compliance.Compliance) (*compliance.Compliance, error) {
	ret := _m.Called(_a0)

	var r0 *compliance.Compliance
	if rf, ok := ret.Get(0).(func(*compliance.Compliance) *compliance.Compliance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*compliance.Compliance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*compliance.Compliance) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
