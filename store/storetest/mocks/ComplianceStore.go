// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	model_helper "github.com/sitename/sitename/model_helper"
)

// ComplianceStore is an autogenerated mock type for the ComplianceStore type
type ComplianceStore struct {
	mock.Mock
}

// ComplianceExport provides a mock function with given fields: _a0, cursor, limit
func (_m *ComplianceStore) ComplianceExport(_a0 model.Compliance, cursor model_helper.ComplianceExportCursor, limit int) ([]*model_helper.CompliancePost, model_helper.ComplianceExportCursor, error) {
	ret := _m.Called(_a0, cursor, limit)

	var r0 []*model_helper.CompliancePost
	var r1 model_helper.ComplianceExportCursor
	var r2 error
	if rf, ok := ret.Get(0).(func(model.Compliance, model_helper.ComplianceExportCursor, int) ([]*model_helper.CompliancePost, model_helper.ComplianceExportCursor, error)); ok {
		return rf(_a0, cursor, limit)
	}
	if rf, ok := ret.Get(0).(func(model.Compliance, model_helper.ComplianceExportCursor, int) []*model_helper.CompliancePost); ok {
		r0 = rf(_a0, cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model_helper.CompliancePost)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Compliance, model_helper.ComplianceExportCursor, int) model_helper.ComplianceExportCursor); ok {
		r1 = rf(_a0, cursor, limit)
	} else {
		r1 = ret.Get(1).(model_helper.ComplianceExportCursor)
	}

	if rf, ok := ret.Get(2).(func(model.Compliance, model_helper.ComplianceExportCursor, int) error); ok {
		r2 = rf(_a0, cursor, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: id
func (_m *ComplianceStore) Get(id string) (*model.Compliance, error) {
	ret := _m.Called(id)

	var r0 *model.Compliance
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Compliance, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Compliance); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Compliance)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: offset, limit
func (_m *ComplianceStore) GetAll(offset int, limit int) (model.ComplianceSlice, error) {
	ret := _m.Called(offset, limit)

	var r0 model.ComplianceSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (model.ComplianceSlice, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) model.ComplianceSlice); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ComplianceSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageExport provides a mock function with given fields: cursor, limit
func (_m *ComplianceStore) MessageExport(cursor model_helper.MessageExportCursor, limit int) ([]*model_helper.MessageExport, model_helper.MessageExportCursor, error) {
	ret := _m.Called(cursor, limit)

	var r0 []*model_helper.MessageExport
	var r1 model_helper.MessageExportCursor
	var r2 error
	if rf, ok := ret.Get(0).(func(model_helper.MessageExportCursor, int) ([]*model_helper.MessageExport, model_helper.MessageExportCursor, error)); ok {
		return rf(cursor, limit)
	}
	if rf, ok := ret.Get(0).(func(model_helper.MessageExportCursor, int) []*model_helper.MessageExport); ok {
		r0 = rf(cursor, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model_helper.MessageExport)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.MessageExportCursor, int) model_helper.MessageExportCursor); ok {
		r1 = rf(cursor, limit)
	} else {
		r1 = ret.Get(1).(model_helper.MessageExportCursor)
	}

	if rf, ok := ret.Get(2).(func(model_helper.MessageExportCursor, int) error); ok {
		r2 = rf(cursor, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Upsert provides a mock function with given fields: _a0
func (_m *ComplianceStore) Upsert(_a0 model.Compliance) (*model.Compliance, error) {
	ret := _m.Called(_a0)

	var r0 *model.Compliance
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Compliance) (*model.Compliance, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.Compliance) *model.Compliance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Compliance)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Compliance) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewComplianceStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewComplianceStore creates a new instance of ComplianceStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewComplianceStore(t mockConstructorTestingTNewComplianceStore) *ComplianceStore {
	mock := &ComplianceStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
