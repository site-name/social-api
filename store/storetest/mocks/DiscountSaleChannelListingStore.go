// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// DiscountSaleChannelListingStore is an autogenerated mock type for the DiscountSaleChannelListingStore type
type DiscountSaleChannelListingStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: saleChannelListingID
func (_m *DiscountSaleChannelListingStore) Get(saleChannelListingID string) (*model.SaleChannelListing, error) {
	ret := _m.Called(saleChannelListingID)

	var r0 *model.SaleChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.SaleChannelListing, error)); ok {
		return rf(saleChannelListingID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.SaleChannelListing); ok {
		r0 = rf(saleChannelListingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SaleChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(saleChannelListingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaleChannelListingsWithOption provides a mock function with given fields: option
func (_m *DiscountSaleChannelListingStore) SaleChannelListingsWithOption(option *model.SaleChannelListingFilterOption) ([]*model.SaleChannelListing, error) {
	ret := _m.Called(option)

	var r0 []*model.SaleChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.SaleChannelListingFilterOption) ([]*model.SaleChannelListing, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.SaleChannelListingFilterOption) []*model.SaleChannelListing); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.SaleChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.SaleChannelListingFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: saleChannelListing
func (_m *DiscountSaleChannelListingStore) Save(saleChannelListing *model.SaleChannelListing) (*model.SaleChannelListing, error) {
	ret := _m.Called(saleChannelListing)

	var r0 *model.SaleChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.SaleChannelListing) (*model.SaleChannelListing, error)); ok {
		return rf(saleChannelListing)
	}
	if rf, ok := ret.Get(0).(func(*model.SaleChannelListing) *model.SaleChannelListing); ok {
		r0 = rf(saleChannelListing)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.SaleChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.SaleChannelListing) error); ok {
		r1 = rf(saleChannelListing)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDiscountSaleChannelListingStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscountSaleChannelListingStore creates a new instance of DiscountSaleChannelListingStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscountSaleChannelListingStore(t mockConstructorTestingTNewDiscountSaleChannelListingStore) *DiscountSaleChannelListingStore {
	mock := &DiscountSaleChannelListingStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
