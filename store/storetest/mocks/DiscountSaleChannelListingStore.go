// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// DiscountSaleChannelListingStore is an autogenerated mock type for the DiscountSaleChannelListingStore type
type DiscountSaleChannelListingStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *DiscountSaleChannelListingStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: saleChannelListingID
func (_m *DiscountSaleChannelListingStore) Get(saleChannelListingID string) (*product_and_discount.SaleChannelListing, error) {
	ret := _m.Called(saleChannelListingID)

	var r0 *product_and_discount.SaleChannelListing
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.SaleChannelListing); ok {
		r0 = rf(saleChannelListingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.SaleChannelListing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(saleChannelListingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *DiscountSaleChannelListingStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SaleChannelListingsWithOption provides a mock function with given fields: option
func (_m *DiscountSaleChannelListingStore) SaleChannelListingsWithOption(option *product_and_discount.SaleChannelListingFilterOption) ([]*struct {
	product_and_discount.SaleChannelListing
	ChannelSlug string
}, error) {
	ret := _m.Called(option)

	var r0 []*struct {
		product_and_discount.SaleChannelListing
		ChannelSlug string
	}
	if rf, ok := ret.Get(0).(func(*product_and_discount.SaleChannelListingFilterOption) []*struct {
		product_and_discount.SaleChannelListing
		ChannelSlug string
	}); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*struct {
				product_and_discount.SaleChannelListing
				ChannelSlug string
			})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.SaleChannelListingFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: saleChannelListing
func (_m *DiscountSaleChannelListingStore) Save(saleChannelListing *product_and_discount.SaleChannelListing) (*product_and_discount.SaleChannelListing, error) {
	ret := _m.Called(saleChannelListing)

	var r0 *product_and_discount.SaleChannelListing
	if rf, ok := ret.Get(0).(func(*product_and_discount.SaleChannelListing) *product_and_discount.SaleChannelListing); ok {
		r0 = rf(saleChannelListing)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.SaleChannelListing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.SaleChannelListing) error); ok {
		r1 = rf(saleChannelListing)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
