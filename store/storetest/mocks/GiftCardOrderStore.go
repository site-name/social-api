// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gorp "github.com/mattermost/gorp"
	giftcard "github.com/sitename/sitename/model/giftcard"

	mock "github.com/stretchr/testify/mock"
)

// GiftCardOrderStore is an autogenerated mock type for the GiftCardOrderStore type
type GiftCardOrderStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, orderGiftcards
func (_m *GiftCardOrderStore) BulkUpsert(transaction store_iface.SqlxTxExecutor, orderGiftcards ...*giftcard.OrderGiftCard) ([]*giftcard.OrderGiftCard, error) {
	_va := make([]interface{}, len(orderGiftcards))
	for _i := range orderGiftcards {
		_va[_i] = orderGiftcards[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, transaction)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*giftcard.OrderGiftCard
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, ...*giftcard.OrderGiftCard) []*giftcard.OrderGiftCard); ok {
		r0 = rf(transaction, orderGiftcards...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*giftcard.OrderGiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, ...*giftcard.OrderGiftCard) error); ok {
		r1 = rf(transaction, orderGiftcards...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *GiftCardOrderStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: id
func (_m *GiftCardOrderStore) Get(id string) (*giftcard.OrderGiftCard, error) {
	ret := _m.Called(id)

	var r0 *giftcard.OrderGiftCard
	if rf, ok := ret.Get(0).(func(string) *giftcard.OrderGiftCard); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*giftcard.OrderGiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: giftcardOrder
func (_m *GiftCardOrderStore) Save(giftcardOrder *giftcard.OrderGiftCard) (*giftcard.OrderGiftCard, error) {
	ret := _m.Called(giftcardOrder)

	var r0 *giftcard.OrderGiftCard
	if rf, ok := ret.Get(0).(func(*giftcard.OrderGiftCard) *giftcard.OrderGiftCard); ok {
		r0 = rf(giftcardOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*giftcard.OrderGiftCard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*giftcard.OrderGiftCard) error); ok {
		r1 = rf(giftcardOrder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
