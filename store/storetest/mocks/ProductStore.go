// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gqlmodel "github.com/sitename/sitename/api/gqlmodel"
	mock "github.com/stretchr/testify/mock"

	model "github.com/sitename/sitename/model"

	product_and_discount "github.com/sitename/sitename/model/product_and_discount"

	squirrel "github.com/Masterminds/squirrel"

	time "time"
)

// ProductStore is an autogenerated mock type for the ProductStore type
type ProductStore struct {
	mock.Mock
}

// AdvancedFilterQueryBuilder provides a mock function with given fields: input
func (_m *ProductStore) AdvancedFilterQueryBuilder(input *gqlmodel.ExportProductsInput) squirrel.SelectBuilder {
	ret := _m.Called(input)

	var r0 squirrel.SelectBuilder
	if rf, ok := ret.Get(0).(func(*gqlmodel.ExportProductsInput) squirrel.SelectBuilder); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(squirrel.SelectBuilder)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductStore) FilterByOption(option *product_and_discount.ProductFilterOption) ([]*product_and_discount.Product, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.Product
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductFilterOption) []*product_and_discount.Product); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByQuery provides a mock function with given fields: query
func (_m *ProductStore) FilterByQuery(query squirrel.SelectBuilder) (product_and_discount.Products, error) {
	ret := _m.Called(query)

	var r0 product_and_discount.Products
	if rf, ok := ret.Get(0).(func(squirrel.SelectBuilder) product_and_discount.Products); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(product_and_discount.Products)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(squirrel.SelectBuilder) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *ProductStore) GetByOption(option *product_and_discount.ProductFilterOption) (*product_and_discount.Product, error) {
	ret := _m.Called(option)

	var r0 *product_and_discount.Product
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductFilterOption) *product_and_discount.Product); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *ProductStore) ModelFields(prefix string) model.StringArray {
	ret := _m.Called(prefix)

	var r0 model.StringArray
	if rf, ok := ret.Get(0).(func(string) model.StringArray); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.StringArray)
		}
	}

	return r0
}

// NotPublishedProducts provides a mock function with given fields: channelSlug
func (_m *ProductStore) NotPublishedProducts(channelSlug string) ([]*struct {
	product_and_discount.Product
	IsPublished     bool
	PublicationDate *time.Time
}, error) {
	ret := _m.Called(channelSlug)

	var r0 []*struct {
		product_and_discount.Product
		IsPublished     bool
		PublicationDate *time.Time
	}
	if rf, ok := ret.Get(0).(func(string) []*struct {
		product_and_discount.Product
		IsPublished     bool
		PublicationDate *time.Time
	}); ok {
		r0 = rf(channelSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*struct {
				product_and_discount.Product
				IsPublished     bool
				PublicationDate *time.Time
			})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishedProducts provides a mock function with given fields: channelSlug
func (_m *ProductStore) PublishedProducts(channelSlug string) ([]*product_and_discount.Product, error) {
	ret := _m.Called(channelSlug)

	var r0 []*product_and_discount.Product
	if rf, ok := ret.Get(0).(func(string) []*product_and_discount.Product); ok {
		r0 = rf(channelSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishedWithVariants provides a mock function with given fields: channelSlug
func (_m *ProductStore) PublishedWithVariants(channelSlug string) ([]*product_and_discount.Product, error) {
	ret := _m.Called(channelSlug)

	var r0 []*product_and_discount.Product
	if rf, ok := ret.Get(0).(func(string) []*product_and_discount.Product); ok {
		r0 = rf(channelSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: prd
func (_m *ProductStore) Save(prd *product_and_discount.Product) (*product_and_discount.Product, error) {
	ret := _m.Called(prd)

	var r0 *product_and_discount.Product
	if rf, ok := ret.Get(0).(func(*product_and_discount.Product) *product_and_discount.Product); ok {
		r0 = rf(prd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.Product) error); ok {
		r1 = rf(prd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: prd
func (_m *ProductStore) ScanFields(prd product_and_discount.Product) []interface{} {
	ret := _m.Called(prd)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(product_and_discount.Product) []interface{}); ok {
		r0 = rf(prd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// SelectForUpdateDiscountedPricesOfCatalogues provides a mock function with given fields: productIDs, categoryIDs, collectionIDs
func (_m *ProductStore) SelectForUpdateDiscountedPricesOfCatalogues(productIDs []string, categoryIDs []string, collectionIDs []string) ([]*product_and_discount.Product, error) {
	ret := _m.Called(productIDs, categoryIDs, collectionIDs)

	var r0 []*product_and_discount.Product
	if rf, ok := ret.Get(0).(func([]string, []string, []string) []*product_and_discount.Product); ok {
		r0 = rf(productIDs, categoryIDs, collectionIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, []string, []string) error); ok {
		r1 = rf(productIDs, categoryIDs, collectionIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VisibleToUserProducts provides a mock function with given fields: channelSlug, requesterIsStaff
func (_m *ProductStore) VisibleToUserProducts(channelSlug string, requesterIsStaff bool) ([]*product_and_discount.Product, error) {
	ret := _m.Called(channelSlug, requesterIsStaff)

	var r0 []*product_and_discount.Product
	if rf, ok := ret.Get(0).(func(string, bool) []*product_and_discount.Product); ok {
		r0 = rf(channelSlug, requesterIsStaff)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(channelSlug, requesterIsStaff)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
