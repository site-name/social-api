// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	squirrel "github.com/Masterminds/squirrel"

	time "time"
)

// ProductStore is an autogenerated mock type for the ProductStore type
type ProductStore struct {
	mock.Mock
}

// AdvancedFilterQueryBuilder provides a mock function with given fields: input
func (_m *ProductStore) AdvancedFilterQueryBuilder(input *model.ExportProductsFilterOptions) squirrel.SelectBuilder {
	ret := _m.Called(input)

	var r0 squirrel.SelectBuilder
	if rf, ok := ret.Get(0).(func(*model.ExportProductsFilterOptions) squirrel.SelectBuilder); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(squirrel.SelectBuilder)
	}

	return r0
}

// CountByCategoryIDs provides a mock function with given fields: categoryIDs
func (_m *ProductStore) CountByCategoryIDs(categoryIDs []string) ([]*model.ProductCountByCategoryID, error) {
	ret := _m.Called(categoryIDs)

	var r0 []*model.ProductCountByCategoryID
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*model.ProductCountByCategoryID, error)); ok {
		return rf(categoryIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) []*model.ProductCountByCategoryID); ok {
		r0 = rf(categoryIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProductCountByCategoryID)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(categoryIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductStore) FilterByOption(option *model.ProductFilterOption) ([]*model.Product, error) {
	ret := _m.Called(option)

	var r0 []*model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductFilterOption) ([]*model.Product, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductFilterOption) []*model.Product); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByQuery provides a mock function with given fields: query
func (_m *ProductStore) FilterByQuery(query squirrel.SelectBuilder) (model.Products, error) {
	ret := _m.Called(query)

	var r0 model.Products
	var r1 error
	if rf, ok := ret.Get(0).(func(squirrel.SelectBuilder) (model.Products, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(squirrel.SelectBuilder) model.Products); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Products)
		}
	}

	if rf, ok := ret.Get(1).(func(squirrel.SelectBuilder) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *ProductStore) GetByOption(option *model.ProductFilterOption) (*model.Product, error) {
	ret := _m.Called(option)

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ProductFilterOption) (*model.Product, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.ProductFilterOption) *model.Product); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ProductFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotPublishedProducts provides a mock function with given fields: channelID
func (_m *ProductStore) NotPublishedProducts(channelID string) ([]*struct {
	model.Product
	IsPublished     bool
	PublicationDate *time.Time
}, error) {
	ret := _m.Called(channelID)

	var r0 []*struct {
		model.Product
		IsPublished     bool
		PublicationDate *time.Time
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*struct {
		model.Product
		IsPublished     bool
		PublicationDate *time.Time
	}, error)); ok {
		return rf(channelID)
	}
	if rf, ok := ret.Get(0).(func(string) []*struct {
		model.Product
		IsPublished     bool
		PublicationDate *time.Time
	}); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*struct {
				model.Product
				IsPublished     bool
				PublicationDate *time.Time
			})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishedProducts provides a mock function with given fields: channelSlug
func (_m *ProductStore) PublishedProducts(channelSlug string) ([]*model.Product, error) {
	ret := _m.Called(channelSlug)

	var r0 []*model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.Product, error)); ok {
		return rf(channelSlug)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.Product); ok {
		r0 = rf(channelSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishedWithVariants provides a mock function with given fields: channel_SlugOrID
func (_m *ProductStore) PublishedWithVariants(channel_SlugOrID string) squirrel.SelectBuilder {
	ret := _m.Called(channel_SlugOrID)

	var r0 squirrel.SelectBuilder
	if rf, ok := ret.Get(0).(func(string) squirrel.SelectBuilder); ok {
		r0 = rf(channel_SlugOrID)
	} else {
		r0 = ret.Get(0).(squirrel.SelectBuilder)
	}

	return r0
}

// Save provides a mock function with given fields: prd
func (_m *ProductStore) Save(prd *model.Product) (*model.Product, error) {
	ret := _m.Called(prd)

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Product) (*model.Product, error)); ok {
		return rf(prd)
	}
	if rf, ok := ret.Get(0).(func(*model.Product) *model.Product); ok {
		r0 = rf(prd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Product) error); ok {
		r1 = rf(prd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: prd
func (_m *ProductStore) ScanFields(prd *model.Product) []interface{} {
	ret := _m.Called(prd)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.Product) []interface{}); ok {
		r0 = rf(prd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// SelectForUpdateDiscountedPricesOfCatalogues provides a mock function with given fields: transaction, productIDs, categoryIDs, collectionIDs, variantIDs
func (_m *ProductStore) SelectForUpdateDiscountedPricesOfCatalogues(transaction *gorm.DB, productIDs []string, categoryIDs []string, collectionIDs []string, variantIDs []string) ([]*model.Product, error) {
	ret := _m.Called(transaction, productIDs, categoryIDs, collectionIDs, variantIDs)

	var r0 []*model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string, []string, []string, []string) ([]*model.Product, error)); ok {
		return rf(transaction, productIDs, categoryIDs, collectionIDs, variantIDs)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string, []string, []string, []string) []*model.Product); ok {
		r0 = rf(transaction, productIDs, categoryIDs, collectionIDs, variantIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []string, []string, []string, []string) error); ok {
		r1 = rf(transaction, productIDs, categoryIDs, collectionIDs, variantIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VisibleToUserProductsQuery provides a mock function with given fields: channel_SlugOrID, userHasOneOfProductpermissions
func (_m *ProductStore) VisibleToUserProductsQuery(channel_SlugOrID string, userHasOneOfProductpermissions bool) squirrel.SelectBuilder {
	ret := _m.Called(channel_SlugOrID, userHasOneOfProductpermissions)

	var r0 squirrel.SelectBuilder
	if rf, ok := ret.Get(0).(func(string, bool) squirrel.SelectBuilder); ok {
		r0 = rf(channel_SlugOrID, userHasOneOfProductpermissions)
	} else {
		r0 = ret.Get(0).(squirrel.SelectBuilder)
	}

	return r0
}

type mockConstructorTestingTNewProductStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductStore creates a new instance of ProductStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductStore(t mockConstructorTestingTNewProductStore) *ProductStore {
	mock := &ProductStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
