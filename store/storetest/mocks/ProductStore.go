// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"

	squirrel "github.com/mattermost/squirrel"
)

// ProductStore is an autogenerated mock type for the ProductStore type
type ProductStore struct {
	mock.Mock
}

// AdvancedFilterQueryBuilder provides a mock function with given fields: input
func (_m *ProductStore) AdvancedFilterQueryBuilder(input model_helper.ExportProductsFilterOptions) squirrel.SelectBuilder {
	ret := _m.Called(input)

	var r0 squirrel.SelectBuilder
	if rf, ok := ret.Get(0).(func(model_helper.ExportProductsFilterOptions) squirrel.SelectBuilder); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(squirrel.SelectBuilder)
	}

	return r0
}

// CountByCategoryIDs provides a mock function with given fields: categoryIDs
func (_m *ProductStore) CountByCategoryIDs(categoryIDs []string) ([]*model_helper.ProductCountByCategoryID, error) {
	ret := _m.Called(categoryIDs)

	var r0 []*model_helper.ProductCountByCategoryID
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*model_helper.ProductCountByCategoryID, error)); ok {
		return rf(categoryIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) []*model_helper.ProductCountByCategoryID); ok {
		r0 = rf(categoryIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model_helper.ProductCountByCategoryID)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(categoryIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *ProductStore) FilterByOption(option model_helper.ProductFilterOption) (model.ProductSlice, error) {
	ret := _m.Called(option)

	var r0 model.ProductSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.ProductFilterOption) (model.ProductSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.ProductFilterOption) model.ProductSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.ProductFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByQuery provides a mock function with given fields: query
func (_m *ProductStore) FilterByQuery(query squirrel.SelectBuilder) (model.ProductSlice, error) {
	ret := _m.Called(query)

	var r0 model.ProductSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(squirrel.SelectBuilder) (model.ProductSlice, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(squirrel.SelectBuilder) model.ProductSlice); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(squirrel.SelectBuilder) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotPublishedProducts provides a mock function with given fields: channelID
func (_m *ProductStore) NotPublishedProducts(channelID string) (model.ProductSlice, error) {
	ret := _m.Called(channelID)

	var r0 model.ProductSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.ProductSlice, error)); ok {
		return rf(channelID)
	}
	if rf, ok := ret.Get(0).(func(string) model.ProductSlice); ok {
		r0 = rf(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishedProducts provides a mock function with given fields: channelSlug
func (_m *ProductStore) PublishedProducts(channelSlug string) (model.ProductSlice, error) {
	ret := _m.Called(channelSlug)

	var r0 model.ProductSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.ProductSlice, error)); ok {
		return rf(channelSlug)
	}
	if rf, ok := ret.Get(0).(func(string) model.ProductSlice); ok {
		r0 = rf(channelSlug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(channelSlug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishedWithVariants provides a mock function with given fields: channelIdOrSlug
func (_m *ProductStore) PublishedWithVariants(channelIdOrSlug string) squirrel.SelectBuilder {
	ret := _m.Called(channelIdOrSlug)

	var r0 squirrel.SelectBuilder
	if rf, ok := ret.Get(0).(func(string) squirrel.SelectBuilder); ok {
		r0 = rf(channelIdOrSlug)
	} else {
		r0 = ret.Get(0).(squirrel.SelectBuilder)
	}

	return r0
}

// Save provides a mock function with given fields: tx, product
func (_m *ProductStore) Save(tx boil.ContextTransactor, product model.Product) (*model.Product, error) {
	ret := _m.Called(tx, product)

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.Product) (*model.Product, error)); ok {
		return rf(tx, product)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.Product) *model.Product); ok {
		r0 = rf(tx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.Product) error); ok {
		r1 = rf(tx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectForUpdateDiscountedPricesOfCatalogues provides a mock function with given fields: tx, productIDs, categoryIDs, collectionIDs, variantIDs
func (_m *ProductStore) SelectForUpdateDiscountedPricesOfCatalogues(tx boil.ContextTransactor, productIDs []string, categoryIDs []string, collectionIDs []string, variantIDs []string) (model.ProductSlice, error) {
	ret := _m.Called(tx, productIDs, categoryIDs, collectionIDs, variantIDs)

	var r0 model.ProductSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string, []string, []string, []string) (model.ProductSlice, error)); ok {
		return rf(tx, productIDs, categoryIDs, collectionIDs, variantIDs)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string, []string, []string, []string) model.ProductSlice); ok {
		r0 = rf(tx, productIDs, categoryIDs, collectionIDs, variantIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, []string, []string, []string, []string) error); ok {
		r1 = rf(tx, productIDs, categoryIDs, collectionIDs, variantIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VisibleToUserProductsQuery provides a mock function with given fields: channelIdOrSlug, userHasOneOfProductpermissions
func (_m *ProductStore) VisibleToUserProductsQuery(channelIdOrSlug string, userHasOneOfProductpermissions bool) squirrel.SelectBuilder {
	ret := _m.Called(channelIdOrSlug, userHasOneOfProductpermissions)

	var r0 squirrel.SelectBuilder
	if rf, ok := ret.Get(0).(func(string, bool) squirrel.SelectBuilder); ok {
		r0 = rf(channelIdOrSlug, userHasOneOfProductpermissions)
	} else {
		r0 = ret.Get(0).(squirrel.SelectBuilder)
	}

	return r0
}

type mockConstructorTestingTNewProductStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductStore creates a new instance of ProductStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductStore(t mockConstructorTestingTNewProductStore) *ProductStore {
	mock := &ProductStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
