// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// DigitalContentUrlStore is an autogenerated mock type for the DigitalContentUrlStore type
type DigitalContentUrlStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *DigitalContentUrlStore) FilterByOptions(options *model.DigitalContentUrlFilterOptions) ([]*model.DigitalContentUrl, error) {
	ret := _m.Called(options)

	var r0 []*model.DigitalContentUrl
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.DigitalContentUrlFilterOptions) ([]*model.DigitalContentUrl, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.DigitalContentUrlFilterOptions) []*model.DigitalContentUrl); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DigitalContentUrl)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.DigitalContentUrlFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *DigitalContentUrlStore) Get(id string) (*model.DigitalContentUrl, error) {
	ret := _m.Called(id)

	var r0 *model.DigitalContentUrl
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.DigitalContentUrl, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.DigitalContentUrl); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DigitalContentUrl)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: contentURL
func (_m *DigitalContentUrlStore) Upsert(contentURL *model.DigitalContentUrl) (*model.DigitalContentUrl, error) {
	ret := _m.Called(contentURL)

	var r0 *model.DigitalContentUrl
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.DigitalContentUrl) (*model.DigitalContentUrl, error)); ok {
		return rf(contentURL)
	}
	if rf, ok := ret.Get(0).(func(*model.DigitalContentUrl) *model.DigitalContentUrl); ok {
		r0 = rf(contentURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DigitalContentUrl)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.DigitalContentUrl) error); ok {
		r1 = rf(contentURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDigitalContentUrlStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewDigitalContentUrlStore creates a new instance of DigitalContentUrlStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDigitalContentUrlStore(t mockConstructorTestingTNewDigitalContentUrlStore) *DigitalContentUrlStore {
	mock := &DigitalContentUrlStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
