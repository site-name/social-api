// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// DigitalContentUrlStore is an autogenerated mock type for the DigitalContentUrlStore type
type DigitalContentUrlStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *DigitalContentUrlStore) Get(id string) (*product_and_discount.DigitalContentUrl, error) {
	ret := _m.Called(id)

	var r0 *product_and_discount.DigitalContentUrl
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.DigitalContentUrl); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.DigitalContentUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: contentURL
func (_m *DigitalContentUrlStore) Upsert(contentURL *product_and_discount.DigitalContentUrl) (*product_and_discount.DigitalContentUrl, error) {
	ret := _m.Called(contentURL)

	var r0 *product_and_discount.DigitalContentUrl
	if rf, ok := ret.Get(0).(func(*product_and_discount.DigitalContentUrl) *product_and_discount.DigitalContentUrl); ok {
		r0 = rf(contentURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.DigitalContentUrl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.DigitalContentUrl) error); ok {
		r1 = rf(contentURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
