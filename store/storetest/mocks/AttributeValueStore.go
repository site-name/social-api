// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// AttributeValueStore is an autogenerated mock type for the AttributeValueStore type
type AttributeValueStore struct {
	mock.Mock
}

// Count provides a mock function with given fields: options
func (_m *AttributeValueStore) Count(options model_helper.AttributeValueFilterOptions) (int64, error) {
	ret := _m.Called(options)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.AttributeValueFilterOptions) (int64, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.AttributeValueFilterOptions) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(model_helper.AttributeValueFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, ids
func (_m *AttributeValueStore) Delete(tx boil.ContextTransactor, ids []string) (int64, error) {
	ret := _m.Called(tx, ids)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) (int64, error)); ok {
		return rf(tx, ids)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) int64); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, []string) error); ok {
		r1 = rf(tx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOptions provides a mock function with given fields: options
func (_m *AttributeValueStore) FilterByOptions(options model_helper.AttributeValueFilterOptions) (model.AttributeValueSlice, error) {
	ret := _m.Called(options)

	var r0 model.AttributeValueSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.AttributeValueFilterOptions) (model.AttributeValueSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.AttributeValueFilterOptions) model.AttributeValueSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AttributeValueSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.AttributeValueFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: attributeID
func (_m *AttributeValueStore) Get(attributeID string) (*model.AttributeValue, error) {
	ret := _m.Called(attributeID)

	var r0 *model.AttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AttributeValue, error)); ok {
		return rf(attributeID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AttributeValue); ok {
		r0 = rf(attributeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(attributeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, values
func (_m *AttributeValueStore) Upsert(tx boil.ContextTransactor, values model.AttributeValueSlice) (model.AttributeValueSlice, error) {
	ret := _m.Called(tx, values)

	var r0 model.AttributeValueSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.AttributeValueSlice) (model.AttributeValueSlice, error)); ok {
		return rf(tx, values)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.AttributeValueSlice) model.AttributeValueSlice); ok {
		r0 = rf(tx, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AttributeValueSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.AttributeValueSlice) error); ok {
		r1 = rf(tx, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAttributeValueStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAttributeValueStore creates a new instance of AttributeValueStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAttributeValueStore(t mockConstructorTestingTNewAttributeValueStore) *AttributeValueStore {
	mock := &AttributeValueStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
