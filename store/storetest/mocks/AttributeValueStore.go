// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// AttributeValueStore is an autogenerated mock type for the AttributeValueStore type
type AttributeValueStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, values
func (_m *AttributeValueStore) BulkUpsert(transaction *gorm.DB, values model.AttributeValues) (model.AttributeValues, error) {
	ret := _m.Called(transaction, values)

	var r0 model.AttributeValues
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.AttributeValues) (model.AttributeValues, error)); ok {
		return rf(transaction, values)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.AttributeValues) model.AttributeValues); ok {
		r0 = rf(transaction, values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AttributeValues)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, model.AttributeValues) error); ok {
		r1 = rf(transaction, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Count provides a mock function with given fields: options
func (_m *AttributeValueStore) Count(options *model.AttributeValueFilterOptions) (int64, error) {
	ret := _m.Called(options)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AttributeValueFilterOptions) (int64, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.AttributeValueFilterOptions) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.AttributeValueFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, ids
func (_m *AttributeValueStore) Delete(tx *gorm.DB, ids ...string) (int64, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, tx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...string) (int64, error)); ok {
		return rf(tx, ids...)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, ...string) int64); ok {
		r0 = rf(tx, ids...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, ...string) error); ok {
		r1 = rf(tx, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOptions provides a mock function with given fields: options
func (_m *AttributeValueStore) FilterByOptions(options model.AttributeValueFilterOptions) (model.AttributeValues, error) {
	ret := _m.Called(options)

	var r0 model.AttributeValues
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AttributeValueFilterOptions) (model.AttributeValues, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model.AttributeValueFilterOptions) model.AttributeValues); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AttributeValues)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AttributeValueFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: attributeID
func (_m *AttributeValueStore) Get(attributeID string) (*model.AttributeValue, error) {
	ret := _m.Called(attributeID)

	var r0 *model.AttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AttributeValue, error)); ok {
		return rf(attributeID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AttributeValue); ok {
		r0 = rf(attributeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(attributeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: attributeValue
func (_m *AttributeValueStore) ScanFields(attributeValue *model.AttributeValue) []interface{} {
	ret := _m.Called(attributeValue)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.AttributeValue) []interface{}); ok {
		r0 = rf(attributeValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: av
func (_m *AttributeValueStore) Upsert(av *model.AttributeValue) (*model.AttributeValue, error) {
	ret := _m.Called(av)

	var r0 *model.AttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AttributeValue) (*model.AttributeValue, error)); ok {
		return rf(av)
	}
	if rf, ok := ret.Get(0).(func(*model.AttributeValue) *model.AttributeValue); ok {
		r0 = rf(av)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AttributeValue) error); ok {
		r1 = rf(av)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAttributeValueStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAttributeValueStore creates a new instance of AttributeValueStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAttributeValueStore(t mockConstructorTestingTNewAttributeValueStore) *AttributeValueStore {
	mock := &AttributeValueStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
