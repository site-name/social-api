// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	attribute "github.com/sitename/sitename/model/attribute"
	mock "github.com/stretchr/testify/mock"
)

// AttributeValueStore is an autogenerated mock type for the AttributeValueStore type
type AttributeValueStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *AttributeValueStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOptions provides a mock function with given fields: options
func (_m *AttributeValueStore) FilterByOptions(options attribute.AttributeValueFilterOptions) (attribute.AttributeValues, error) {
	ret := _m.Called(options)

	var r0 attribute.AttributeValues
	if rf, ok := ret.Get(0).(func(attribute.AttributeValueFilterOptions) attribute.AttributeValues); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(attribute.AttributeValues)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(attribute.AttributeValueFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: attributeID
func (_m *AttributeValueStore) Get(attributeID string) (*attribute.AttributeValue, error) {
	ret := _m.Called(attributeID)

	var r0 *attribute.AttributeValue
	if rf, ok := ret.Get(0).(func(string) *attribute.AttributeValue); ok {
		r0 = rf(attributeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AttributeValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(attributeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *AttributeValueStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ScanFields provides a mock function with given fields: attributeValue
func (_m *AttributeValueStore) ScanFields(attributeValue attribute.AttributeValue) []interface{} {
	ret := _m.Called(attributeValue)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(attribute.AttributeValue) []interface{}); ok {
		r0 = rf(attributeValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: av
func (_m *AttributeValueStore) Upsert(av *attribute.AttributeValue) (*attribute.AttributeValue, error) {
	ret := _m.Called(av)

	var r0 *attribute.AttributeValue
	if rf, ok := ret.Get(0).(func(*attribute.AttributeValue) *attribute.AttributeValue); ok {
		r0 = rf(av)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AttributeValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AttributeValue) error); ok {
		r1 = rf(av)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
