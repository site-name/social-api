// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	product_and_discount "github.com/sitename/sitename/model/product_and_discount"

	time "time"
)

// DiscountVoucherStore is an autogenerated mock type for the DiscountVoucherStore type
type DiscountVoucherStore struct {
	mock.Mock
}

// ExpiredVouchers provides a mock function with given fields: date
func (_m *DiscountVoucherStore) ExpiredVouchers(date *time.Time) ([]*product_and_discount.Voucher, error) {
	ret := _m.Called(date)

	var r0 []*product_and_discount.Voucher
	if rf, ok := ret.Get(0).(func(*time.Time) []*product_and_discount.Voucher); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVouchersByOption provides a mock function with given fields: option
func (_m *DiscountVoucherStore) FilterVouchersByOption(option *product_and_discount.VoucherFilterOption) ([]*product_and_discount.Voucher, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.Voucher
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherFilterOption) []*product_and_discount.Voucher); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: voucherID
func (_m *DiscountVoucherStore) Get(voucherID string) (*product_and_discount.Voucher, error) {
	ret := _m.Called(voucherID)

	var r0 *product_and_discount.Voucher
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.Voucher); ok {
		r0 = rf(voucherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOptions provides a mock function with given fields: options
func (_m *DiscountVoucherStore) GetByOptions(options *product_and_discount.VoucherFilterOption) (*product_and_discount.Voucher, error) {
	ret := _m.Called(options)

	var r0 *product_and_discount.Voucher
	if rf, ok := ret.Get(0).(func(*product_and_discount.VoucherFilterOption) *product_and_discount.Voucher); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.VoucherFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *DiscountVoucherStore) ModelFields(prefix string) model.AnyArray[string] {
	ret := _m.Called(prefix)

	var r0 model.AnyArray[string]
	if rf, ok := ret.Get(0).(func(string) model.AnyArray[string]); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AnyArray[string])
		}
	}

	return r0
}

// ScanFields provides a mock function with given fields: voucher
func (_m *DiscountVoucherStore) ScanFields(voucher product_and_discount.Voucher) []interface{} {
	ret := _m.Called(voucher)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(product_and_discount.Voucher) []interface{}); ok {
		r0 = rf(voucher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: voucher
func (_m *DiscountVoucherStore) Upsert(voucher *product_and_discount.Voucher) (*product_and_discount.Voucher, error) {
	ret := _m.Called(voucher)

	var r0 *product_and_discount.Voucher
	if rf, ok := ret.Get(0).(func(*product_and_discount.Voucher) *product_and_discount.Voucher); ok {
		r0 = rf(voucher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Voucher)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.Voucher) error); ok {
		r1 = rf(voucher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
