// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"

	time "time"
)

// DiscountVoucherStore is an autogenerated mock type for the DiscountVoucherStore type
type DiscountVoucherStore struct {
	mock.Mock
}

// AddVoucherRelations provides a mock function with given fields: transaction, vouchers, relations
func (_m *DiscountVoucherStore) AddVoucherRelations(transaction *gorm.DB, vouchers model.Vouchers, relations interface{}) error {
	ret := _m.Called(transaction, vouchers, relations)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, model.Vouchers, interface{}) error); ok {
		r0 = rf(transaction, vouchers, relations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExpiredVouchers provides a mock function with given fields: date
func (_m *DiscountVoucherStore) ExpiredVouchers(date *time.Time) ([]*model.Voucher, error) {
	ret := _m.Called(date)

	var r0 []*model.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(*time.Time) ([]*model.Voucher, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(*time.Time) []*model.Voucher); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(*time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVouchersByOption provides a mock function with given fields: option
func (_m *DiscountVoucherStore) FilterVouchersByOption(option *model.VoucherFilterOption) ([]*model.Voucher, error) {
	ret := _m.Called(option)

	var r0 []*model.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.VoucherFilterOption) ([]*model.Voucher, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.VoucherFilterOption) []*model.Voucher); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.VoucherFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: voucherID
func (_m *DiscountVoucherStore) Get(voucherID string) (*model.Voucher, error) {
	ret := _m.Called(voucherID)

	var r0 *model.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Voucher, error)); ok {
		return rf(voucherID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Voucher); ok {
		r0 = rf(voucherID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(voucherID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOptions provides a mock function with given fields: options
func (_m *DiscountVoucherStore) GetByOptions(options *model.VoucherFilterOption) (*model.Voucher, error) {
	ret := _m.Called(options)

	var r0 *model.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.VoucherFilterOption) (*model.Voucher, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.VoucherFilterOption) *model.Voucher); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.VoucherFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: voucher
func (_m *DiscountVoucherStore) ScanFields(voucher *model.Voucher) []interface{} {
	ret := _m.Called(voucher)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.Voucher) []interface{}); ok {
		r0 = rf(voucher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: voucher
func (_m *DiscountVoucherStore) Upsert(voucher *model.Voucher) (*model.Voucher, error) {
	ret := _m.Called(voucher)

	var r0 *model.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Voucher) (*model.Voucher, error)); ok {
		return rf(voucher)
	}
	if rf, ok := ret.Get(0).(func(*model.Voucher) *model.Voucher); ok {
		r0 = rf(voucher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Voucher) error); ok {
		r1 = rf(voucher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDiscountVoucherStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscountVoucherStore creates a new instance of DiscountVoucherStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscountVoucherStore(t mockConstructorTestingTNewDiscountVoucherStore) *DiscountVoucherStore {
	mock := &DiscountVoucherStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
