// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"

	time "time"
)

// DiscountVoucherStore is an autogenerated mock type for the DiscountVoucherStore type
type DiscountVoucherStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: tx, ids
func (_m *DiscountVoucherStore) Delete(tx boil.ContextTransactor, ids []string) (int64, error) {
	ret := _m.Called(tx, ids)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) (int64, error)); ok {
		return rf(tx, ids)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) int64); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, []string) error); ok {
		r1 = rf(tx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpiredVouchers provides a mock function with given fields: date
func (_m *DiscountVoucherStore) ExpiredVouchers(date time.Time) (model.VoucherSlice, error) {
	ret := _m.Called(date)

	var r0 model.VoucherSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time) (model.VoucherSlice, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(time.Time) model.VoucherSlice); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.VoucherSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterVouchersByOption provides a mock function with given fields: option
func (_m *DiscountVoucherStore) FilterVouchersByOption(option model_helper.VoucherFilterOption) (model_helper.CustomVoucherSlice, error) {
	ret := _m.Called(option)

	var r0 model_helper.CustomVoucherSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.VoucherFilterOption) (model_helper.CustomVoucherSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.VoucherFilterOption) model_helper.CustomVoucherSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model_helper.CustomVoucherSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.VoucherFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *DiscountVoucherStore) Get(id string) (*model.Voucher, error) {
	ret := _m.Called(id)

	var r0 *model.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Voucher, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Voucher); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: voucher
func (_m *DiscountVoucherStore) Upsert(voucher model.Voucher) (*model.Voucher, error) {
	ret := _m.Called(voucher)

	var r0 *model.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Voucher) (*model.Voucher, error)); ok {
		return rf(voucher)
	}
	if rf, ok := ret.Get(0).(func(model.Voucher) *model.Voucher); ok {
		r0 = rf(voucher)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Voucher) error); ok {
		r1 = rf(voucher)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDiscountVoucherStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewDiscountVoucherStore creates a new instance of DiscountVoucherStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDiscountVoucherStore(t mockConstructorTestingTNewDiscountVoucherStore) *DiscountVoucherStore {
	mock := &DiscountVoucherStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
