// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// CustomProductAttributeStore is an autogenerated mock type for the CustomProductAttributeStore type
type CustomProductAttributeStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: tx, ids
func (_m *CustomProductAttributeStore) Delete(tx boil.ContextTransactor, ids []string) (int64, error) {
	ret := _m.Called(tx, ids)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) (int64, error)); ok {
		return rf(tx, ids)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) int64); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, []string) error); ok {
		r1 = rf(tx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOptions provides a mock function with given fields: options
func (_m *CustomProductAttributeStore) FilterByOptions(options model_helper.CustomProductAttributeFilterOptions) (model.CustomProductAttributeSlice, error) {
	ret := _m.Called(options)

	var r0 model.CustomProductAttributeSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.CustomProductAttributeFilterOptions) (model.CustomProductAttributeSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.CustomProductAttributeFilterOptions) model.CustomProductAttributeSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CustomProductAttributeSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.CustomProductAttributeFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, record
func (_m *CustomProductAttributeStore) Upsert(tx boil.ContextTransactor, record model.CustomProductAttribute) (*model.CustomProductAttribute, error) {
	ret := _m.Called(tx, record)

	var r0 *model.CustomProductAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.CustomProductAttribute) (*model.CustomProductAttribute, error)); ok {
		return rf(tx, record)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.CustomProductAttribute) *model.CustomProductAttribute); ok {
		r0 = rf(tx, record)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CustomProductAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.CustomProductAttribute) error); ok {
		r1 = rf(tx, record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomProductAttributeStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomProductAttributeStore creates a new instance of CustomProductAttributeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomProductAttributeStore(t mockConstructorTestingTNewCustomProductAttributeStore) *CustomProductAttributeStore {
	mock := &CustomProductAttributeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
