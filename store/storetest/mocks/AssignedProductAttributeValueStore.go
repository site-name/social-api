// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	model_helper "github.com/sitename/sitename/model_helper"
)

// AssignedProductAttributeValueStore is an autogenerated mock type for the AssignedProductAttributeValueStore type
type AssignedProductAttributeValueStore struct {
	mock.Mock
}

// FilterByOptions provides a mock function with given fields: options
func (_m *AssignedProductAttributeValueStore) FilterByOptions(options model_helper.AssignedProductAttributeValueFilterOptions) (model.AssignedProductAttributeValueSlice, error) {
	ret := _m.Called(options)

	var r0 model.AssignedProductAttributeValueSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.AssignedProductAttributeValueFilterOptions) (model.AssignedProductAttributeValueSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.AssignedProductAttributeValueFilterOptions) model.AssignedProductAttributeValueSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AssignedProductAttributeValueSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.AssignedProductAttributeValueFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: assignedProductAttrValueID
func (_m *AssignedProductAttributeValueStore) Get(assignedProductAttrValueID string) (*model.AssignedProductAttributeValue, error) {
	ret := _m.Called(assignedProductAttrValueID)

	var r0 *model.AssignedProductAttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AssignedProductAttributeValue, error)); ok {
		return rf(assignedProductAttrValueID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AssignedProductAttributeValue); ok {
		r0 = rf(assignedProductAttrValueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedProductAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(assignedProductAttrValueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: assignedProductAttrValue
func (_m *AssignedProductAttributeValueStore) Save(assignedProductAttrValue model.AssignedProductAttributeValue) (*model.AssignedProductAttributeValue, error) {
	ret := _m.Called(assignedProductAttrValue)

	var r0 *model.AssignedProductAttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AssignedProductAttributeValue) (*model.AssignedProductAttributeValue, error)); ok {
		return rf(assignedProductAttrValue)
	}
	if rf, ok := ret.Get(0).(func(model.AssignedProductAttributeValue) *model.AssignedProductAttributeValue); ok {
		r0 = rf(assignedProductAttrValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedProductAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AssignedProductAttributeValue) error); ok {
		r1 = rf(assignedProductAttrValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectForSort provides a mock function with given fields: assignmentID
func (_m *AssignedProductAttributeValueStore) SelectForSort(assignmentID string) (model.AssignedProductAttributeValueSlice, model.AttributeValueSlice, error) {
	ret := _m.Called(assignmentID)

	var r0 model.AssignedProductAttributeValueSlice
	var r1 model.AttributeValueSlice
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (model.AssignedProductAttributeValueSlice, model.AttributeValueSlice, error)); ok {
		return rf(assignmentID)
	}
	if rf, ok := ret.Get(0).(func(string) model.AssignedProductAttributeValueSlice); ok {
		r0 = rf(assignmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AssignedProductAttributeValueSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(string) model.AttributeValueSlice); ok {
		r1 = rf(assignmentID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.AttributeValueSlice)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(assignmentID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewAssignedProductAttributeValueStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAssignedProductAttributeValueStore creates a new instance of AssignedProductAttributeValueStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAssignedProductAttributeValueStore(t mockConstructorTestingTNewAssignedProductAttributeValueStore) *AssignedProductAttributeValueStore {
	mock := &AssignedProductAttributeValueStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
