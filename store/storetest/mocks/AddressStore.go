// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// AddressStore is an autogenerated mock type for the AddressStore type
type AddressStore struct {
	mock.Mock
}

// DeleteAddresses provides a mock function with given fields: tx, addressIDs
func (_m *AddressStore) DeleteAddresses(tx boil.ContextTransactor, addressIDs []string) error {
	ret := _m.Called(tx, addressIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, addressIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *AddressStore) FilterByOption(option model_helper.AddressFilterOptions) (model.AddressSlice, error) {
	ret := _m.Called(option)

	var r0 model.AddressSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.AddressFilterOptions) (model.AddressSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.AddressFilterOptions) model.AddressSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AddressSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.AddressFilterOptions) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: addressID
func (_m *AddressStore) Get(addressID string) (*model.Address, error) {
	ret := _m.Called(addressID)

	var r0 *model.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Address, error)); ok {
		return rf(addressID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Address); ok {
		r0 = rf(addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, address
func (_m *AddressStore) Upsert(tx boil.ContextTransactor, address model.Address) (*model.Address, error) {
	ret := _m.Called(tx, address)

	var r0 *model.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.Address) (*model.Address, error)); ok {
		return rf(tx, address)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.Address) *model.Address); ok {
		r0 = rf(tx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.Address) error); ok {
		r1 = rf(tx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAddressStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAddressStore creates a new instance of AddressStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAddressStore(t mockConstructorTestingTNewAddressStore) *AddressStore {
	mock := &AddressStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
