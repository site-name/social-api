// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	account "github.com/sitename/sitename/model/account"
	mock "github.com/stretchr/testify/mock"

	model "github.com/sitename/sitename/model"

	store_iface "github.com/sitename/sitename/store/store_iface"
)

// AddressStore is an autogenerated mock type for the AddressStore type
type AddressStore struct {
	mock.Mock
}

// DeleteAddresses provides a mock function with given fields: addressIDs
func (_m *AddressStore) DeleteAddresses(addressIDs []string) error {
	ret := _m.Called(addressIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(addressIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *AddressStore) FilterByOption(option *account.AddressFilterOption) ([]*account.Address, error) {
	ret := _m.Called(option)

	var r0 []*account.Address
	if rf, ok := ret.Get(0).(func(*account.AddressFilterOption) []*account.Address); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*account.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*account.AddressFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: addressID
func (_m *AddressStore) Get(addressID string) (*account.Address, error) {
	ret := _m.Called(addressID)

	var r0 *account.Address
	if rf, ok := ret.Get(0).(func(string) *account.Address); ok {
		r0 = rf(addressID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(addressID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *AddressStore) ModelFields(prefix string) model.StringArray {
	ret := _m.Called(prefix)

	var r0 model.StringArray
	if rf, ok := ret.Get(0).(func(string) model.StringArray); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.StringArray)
		}
	}

	return r0
}

// ScanFields provides a mock function with given fields: addr
func (_m *AddressStore) ScanFields(addr account.Address) []interface{} {
	ret := _m.Called(addr)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(account.Address) []interface{}); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: transaction, address
func (_m *AddressStore) Upsert(transaction store_iface.SqlxTxExecutor, address *account.Address) (*account.Address, error) {
	ret := _m.Called(transaction, address)

	var r0 *account.Address
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *account.Address) *account.Address); ok {
		r0 = rf(transaction, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.Address)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *account.Address) error); ok {
		r1 = rf(transaction, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
