// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
	mock "github.com/stretchr/testify/mock"
)

// CategoryStore is an autogenerated mock type for the CategoryStore type
type CategoryStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *CategoryStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOption provides a mock function with given fields: option
func (_m *CategoryStore) FilterByOption(option *product_and_discount.CategoryFilterOption) ([]*product_and_discount.Category, error) {
	ret := _m.Called(option)

	var r0 []*product_and_discount.Category
	if rf, ok := ret.Get(0).(func(*product_and_discount.CategoryFilterOption) []*product_and_discount.Category); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.CategoryFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: categoryID
func (_m *CategoryStore) Get(categoryID string) (*product_and_discount.Category, error) {
	ret := _m.Called(categoryID)

	var r0 *product_and_discount.Category
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.Category); ok {
		r0 = rf(categoryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(categoryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *CategoryStore) GetByOption(option *product_and_discount.CategoryFilterOption) (*product_and_discount.Category, error) {
	ret := _m.Called(option)

	var r0 *product_and_discount.Category
	if rf, ok := ret.Get(0).(func(*product_and_discount.CategoryFilterOption) *product_and_discount.Category); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.CategoryFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: category
func (_m *CategoryStore) Upsert(category *product_and_discount.Category) (*product_and_discount.Category, error) {
	ret := _m.Called(category)

	var r0 *product_and_discount.Category
	if rf, ok := ret.Get(0).(func(*product_and_discount.Category) *product_and_discount.Category); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.Category) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
