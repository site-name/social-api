// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// CheckoutStore is an autogenerated mock type for the CheckoutStore type
type CheckoutStore struct {
	mock.Mock
}

// CountCheckouts provides a mock function with given fields: options
func (_m *CheckoutStore) CountCheckouts(options *model.CheckoutFilterOption) (int64, error) {
	ret := _m.Called(options)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.CheckoutFilterOption) (int64, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(*model.CheckoutFilterOption) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.CheckoutFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCheckoutsByOption provides a mock function with given fields: transaction, option
func (_m *CheckoutStore) DeleteCheckoutsByOption(transaction *gorm.DB, option *model.CheckoutFilterOption) error {
	ret := _m.Called(transaction, option)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.CheckoutFilterOption) error); ok {
		r0 = rf(transaction, option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchCheckoutLinesAndPrefetchRelatedValue provides a mock function with given fields: ckout
func (_m *CheckoutStore) FetchCheckoutLinesAndPrefetchRelatedValue(ckout *model.Checkout) ([]*model.CheckoutLineInfo, error) {
	ret := _m.Called(ckout)

	var r0 []*model.CheckoutLineInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Checkout) ([]*model.CheckoutLineInfo, error)); ok {
		return rf(ckout)
	}
	if rf, ok := ret.Get(0).(func(*model.Checkout) []*model.CheckoutLineInfo); ok {
		r0 = rf(ckout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CheckoutLineInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Checkout) error); ok {
		r1 = rf(ckout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *CheckoutStore) FilterByOption(option *model.CheckoutFilterOption) ([]*model.Checkout, error) {
	ret := _m.Called(option)

	var r0 []*model.Checkout
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.CheckoutFilterOption) ([]*model.Checkout, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.CheckoutFilterOption) []*model.Checkout); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Checkout)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.CheckoutFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *CheckoutStore) GetByOption(option *model.CheckoutFilterOption) (*model.Checkout, error) {
	ret := _m.Called(option)

	var r0 *model.Checkout
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.CheckoutFilterOption) (*model.Checkout, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.CheckoutFilterOption) *model.Checkout); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Checkout)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.CheckoutFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: transaction, checkouts
func (_m *CheckoutStore) Upsert(transaction *gorm.DB, checkouts []*model.Checkout) ([]*model.Checkout, error) {
	ret := _m.Called(transaction, checkouts)

	var r0 []*model.Checkout
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.Checkout) ([]*model.Checkout, error)); ok {
		return rf(transaction, checkouts)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.Checkout) []*model.Checkout); ok {
		r0 = rf(transaction, checkouts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Checkout)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.Checkout) error); ok {
		r1 = rf(transaction, checkouts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCheckoutStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheckoutStore creates a new instance of CheckoutStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheckoutStore(t mockConstructorTestingTNewCheckoutStore) *CheckoutStore {
	mock := &CheckoutStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
