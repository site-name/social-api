// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// CheckoutStore is an autogenerated mock type for the CheckoutStore type
type CheckoutStore struct {
	mock.Mock
}

// CountCheckouts provides a mock function with given fields: options
func (_m *CheckoutStore) CountCheckouts(options model_helper.CheckoutFilterOptions) (int64, error) {
	ret := _m.Called(options)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.CheckoutFilterOptions) (int64, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.CheckoutFilterOptions) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(model_helper.CheckoutFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, ids
func (_m *CheckoutStore) Delete(tx boil.ContextTransactor, ids []string) error {
	ret := _m.Called(tx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, []string) error); ok {
		r0 = rf(tx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchCheckoutLinesAndPrefetchRelatedValue provides a mock function with given fields: checkout
func (_m *CheckoutStore) FetchCheckoutLinesAndPrefetchRelatedValue(checkout model.Checkout) (model_helper.CheckoutLineInfos, error) {
	ret := _m.Called(checkout)

	var r0 model_helper.CheckoutLineInfos
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Checkout) (model_helper.CheckoutLineInfos, error)); ok {
		return rf(checkout)
	}
	if rf, ok := ret.Get(0).(func(model.Checkout) model_helper.CheckoutLineInfos); ok {
		r0 = rf(checkout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model_helper.CheckoutLineInfos)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Checkout) error); ok {
		r1 = rf(checkout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *CheckoutStore) FilterByOption(option model_helper.CheckoutFilterOptions) (model.CheckoutSlice, error) {
	ret := _m.Called(option)

	var r0 model.CheckoutSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.CheckoutFilterOptions) (model.CheckoutSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.CheckoutFilterOptions) model.CheckoutSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CheckoutSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.CheckoutFilterOptions) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *CheckoutStore) GetByOption(option model_helper.CheckoutFilterOptions) (*model.Checkout, error) {
	ret := _m.Called(option)

	var r0 *model.Checkout
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.CheckoutFilterOptions) (*model.Checkout, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.CheckoutFilterOptions) *model.Checkout); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Checkout)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.CheckoutFilterOptions) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, checkouts
func (_m *CheckoutStore) Upsert(tx boil.ContextTransactor, checkouts model.CheckoutSlice) (model.CheckoutSlice, error) {
	ret := _m.Called(tx, checkouts)

	var r0 model.CheckoutSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.CheckoutSlice) (model.CheckoutSlice, error)); ok {
		return rf(tx, checkouts)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.CheckoutSlice) model.CheckoutSlice); ok {
		r0 = rf(tx, checkouts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.CheckoutSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.CheckoutSlice) error); ok {
		r1 = rf(tx, checkouts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCheckoutStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCheckoutStore creates a new instance of CheckoutStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCheckoutStore(t mockConstructorTestingTNewCheckoutStore) *CheckoutStore {
	mock := &CheckoutStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
