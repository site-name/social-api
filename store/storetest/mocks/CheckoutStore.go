// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gorp "github.com/mattermost/gorp"
	checkout "github.com/sitename/sitename/model/checkout"

	mock "github.com/stretchr/testify/mock"
)

// CheckoutStore is an autogenerated mock type for the CheckoutStore type
type CheckoutStore struct {
	mock.Mock
}

// CountCheckouts provides a mock function with given fields: options
func (_m *CheckoutStore) CountCheckouts(options *checkout.CheckoutFilterOption) (int64, error) {
	ret := _m.Called(options)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*checkout.CheckoutFilterOption) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*checkout.CheckoutFilterOption) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *CheckoutStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// DeleteCheckoutsByOption provides a mock function with given fields: transaction, option
func (_m *CheckoutStore) DeleteCheckoutsByOption(transaction store_iface.SqlxTxExecutor, option *checkout.CheckoutFilterOption) error {
	ret := _m.Called(transaction, option)

	var r0 error
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *checkout.CheckoutFilterOption) error); ok {
		r0 = rf(transaction, option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchCheckoutLinesAndPrefetchRelatedValue provides a mock function with given fields: ckout
func (_m *CheckoutStore) FetchCheckoutLinesAndPrefetchRelatedValue(ckout *checkout.Checkout) ([]*checkout.CheckoutLineInfo, error) {
	ret := _m.Called(ckout)

	var r0 []*checkout.CheckoutLineInfo
	if rf, ok := ret.Get(0).(func(*checkout.Checkout) []*checkout.CheckoutLineInfo); ok {
		r0 = rf(ckout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*checkout.CheckoutLineInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*checkout.Checkout) error); ok {
		r1 = rf(ckout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *CheckoutStore) FilterByOption(option *checkout.CheckoutFilterOption) ([]*checkout.Checkout, error) {
	ret := _m.Called(option)

	var r0 []*checkout.Checkout
	if rf, ok := ret.Get(0).(func(*checkout.CheckoutFilterOption) []*checkout.Checkout); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*checkout.Checkout)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*checkout.CheckoutFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: token
func (_m *CheckoutStore) Get(token string) (*checkout.Checkout, error) {
	ret := _m.Called(token)

	var r0 *checkout.Checkout
	if rf, ok := ret.Get(0).(func(string) *checkout.Checkout); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*checkout.Checkout)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOption provides a mock function with given fields: option
func (_m *CheckoutStore) GetByOption(option *checkout.CheckoutFilterOption) (*checkout.Checkout, error) {
	ret := _m.Called(option)

	var r0 *checkout.Checkout
	if rf, ok := ret.Get(0).(func(*checkout.CheckoutFilterOption) *checkout.Checkout); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*checkout.Checkout)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*checkout.CheckoutFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: ckout
func (_m *CheckoutStore) Upsert(ckout *checkout.Checkout) (*checkout.Checkout, error) {
	ret := _m.Called(ckout)

	var r0 *checkout.Checkout
	if rf, ok := ret.Get(0).(func(*checkout.Checkout) *checkout.Checkout); ok {
		r0 = rf(ckout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*checkout.Checkout)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*checkout.Checkout) error); ok {
		r1 = rf(ckout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
