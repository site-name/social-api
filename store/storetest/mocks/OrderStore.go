// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gorp "github.com/mattermost/gorp"
	mock "github.com/stretchr/testify/mock"

	order "github.com/sitename/sitename/model/order"
)

// OrderStore is an autogenerated mock type for the OrderStore type
type OrderStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: orders
func (_m *OrderStore) BulkUpsert(orders []*order.Order) ([]*order.Order, error) {
	ret := _m.Called(orders)

	var r0 []*order.Order
	if rf, ok := ret.Get(0).(func([]*order.Order) []*order.Order); ok {
		r0 = rf(orders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*order.Order) error); ok {
		r1 = rf(orders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *OrderStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterByOption provides a mock function with given fields: option
func (_m *OrderStore) FilterByOption(option *order.OrderFilterOption) ([]*order.Order, error) {
	ret := _m.Called(option)

	var r0 []*order.Order
	if rf, ok := ret.Get(0).(func(*order.OrderFilterOption) []*order.Order); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*order.OrderFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *OrderStore) Get(id string) (*order.Order, error) {
	ret := _m.Called(id)

	var r0 *order.Order
	if rf, ok := ret.Get(0).(func(string) *order.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: transaction, _a1
func (_m *OrderStore) Save(transaction *gorp.Transaction, _a1 *order.Order) (*order.Order, error) {
	ret := _m.Called(transaction, _a1)

	var r0 *order.Order
	if rf, ok := ret.Get(0).(func(*gorp.Transaction, *order.Order) *order.Order); ok {
		r0 = rf(transaction, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorp.Transaction, *order.Order) error); ok {
		r1 = rf(transaction, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: transaction, _a1
func (_m *OrderStore) Update(transaction *gorp.Transaction, _a1 *order.Order) (*order.Order, error) {
	ret := _m.Called(transaction, _a1)

	var r0 *order.Order
	if rf, ok := ret.Get(0).(func(*gorp.Transaction, *order.Order) *order.Order); ok {
		r0 = rf(transaction, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorp.Transaction, *order.Order) error); ok {
		r1 = rf(transaction, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
