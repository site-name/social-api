// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	order "github.com/sitename/sitename/model/order"

	store_iface "github.com/sitename/sitename/store/store_iface"
)

// OrderStore is an autogenerated mock type for the OrderStore type
type OrderStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: orders
func (_m *OrderStore) BulkUpsert(orders []*order.Order) ([]*order.Order, error) {
	ret := _m.Called(orders)

	var r0 []*order.Order
	if rf, ok := ret.Get(0).(func([]*order.Order) []*order.Order); ok {
		r0 = rf(orders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*order.Order) error); ok {
		r1 = rf(orders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *OrderStore) FilterByOption(option *order.OrderFilterOption) ([]*order.Order, error) {
	ret := _m.Called(option)

	var r0 []*order.Order
	if rf, ok := ret.Get(0).(func(*order.OrderFilterOption) []*order.Order); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*order.OrderFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *OrderStore) Get(id string) (*order.Order, error) {
	ret := _m.Called(id)

	var r0 *order.Order
	if rf, ok := ret.Get(0).(func(string) *order.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *OrderStore) ModelFields(prefix string) model.AnyArray[string] {
	ret := _m.Called(prefix)

	var r0 model.AnyArray[string]
	if rf, ok := ret.Get(0).(func(string) model.AnyArray[string]); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AnyArray[string])
		}
	}

	return r0
}

// Save provides a mock function with given fields: transaction, _a1
func (_m *OrderStore) Save(transaction store_iface.SqlxTxExecutor, _a1 *order.Order) (*order.Order, error) {
	ret := _m.Called(transaction, _a1)

	var r0 *order.Order
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *order.Order) *order.Order); ok {
		r0 = rf(transaction, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *order.Order) error); ok {
		r1 = rf(transaction, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: holder
func (_m *OrderStore) ScanFields(holder order.Order) []interface{} {
	ret := _m.Called(holder)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(order.Order) []interface{}); ok {
		r0 = rf(holder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

// Update provides a mock function with given fields: transaction, _a1
func (_m *OrderStore) Update(transaction store_iface.SqlxTxExecutor, _a1 *order.Order) (*order.Order, error) {
	ret := _m.Called(transaction, _a1)

	var r0 *order.Order
	if rf, ok := ret.Get(0).(func(store_iface.SqlxTxExecutor, *order.Order) *order.Order); ok {
		r0 = rf(transaction, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(store_iface.SqlxTxExecutor, *order.Order) error); ok {
		r1 = rf(transaction, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
