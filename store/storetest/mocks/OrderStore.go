// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// OrderStore is an autogenerated mock type for the OrderStore type
type OrderStore struct {
	mock.Mock
}

// BulkUpsert provides a mock function with given fields: transaction, orders
func (_m *OrderStore) BulkUpsert(transaction *gorm.DB, orders []*model.Order) ([]*model.Order, error) {
	ret := _m.Called(transaction, orders)

	var r0 []*model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.Order) ([]*model.Order, error)); ok {
		return rf(transaction, orders)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []*model.Order) []*model.Order); ok {
		r0 = rf(transaction, orders)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []*model.Order) error); ok {
		r1 = rf(transaction, orders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: transaction, ids
func (_m *OrderStore) Delete(transaction *gorm.DB, ids []string) (int64, error) {
	ret := _m.Called(transaction, ids)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) (int64, error)); ok {
		return rf(transaction, ids)
	}
	if rf, ok := ret.Get(0).(func(*gorm.DB, []string) int64); ok {
		r0 = rf(transaction, ids)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*gorm.DB, []string) error); ok {
		r1 = rf(transaction, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterByOption provides a mock function with given fields: option
func (_m *OrderStore) FilterByOption(option *model.OrderFilterOption) (int64, []*model.Order, error) {
	ret := _m.Called(option)

	var r0 int64
	var r1 []*model.Order
	var r2 error
	if rf, ok := ret.Get(0).(func(*model.OrderFilterOption) (int64, []*model.Order, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.OrderFilterOption) int64); ok {
		r0 = rf(option)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.OrderFilterOption) []*model.Order); ok {
		r1 = rf(option)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.Order)
		}
	}

	if rf, ok := ret.Get(2).(func(*model.OrderFilterOption) error); ok {
		r2 = rf(option)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Get provides a mock function with given fields: id
func (_m *OrderStore) Get(id string) (*model.Order, error) {
	ret := _m.Called(id)

	var r0 *model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: holder
func (_m *OrderStore) ScanFields(holder *model.Order) []interface{} {
	ret := _m.Called(holder)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.Order) []interface{}); ok {
		r0 = rf(holder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewOrderStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderStore creates a new instance of OrderStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderStore(t mockConstructorTestingTNewOrderStore) *OrderStore {
	mock := &OrderStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
