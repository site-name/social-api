// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	shop "github.com/sitename/sitename/model/shop"
	mock "github.com/stretchr/testify/mock"
)

// ShopTranslationStore is an autogenerated mock type for the ShopTranslationStore type
type ShopTranslationStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *ShopTranslationStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// Get provides a mock function with given fields: id
func (_m *ShopTranslationStore) Get(id string) (*shop.ShopTranslation, error) {
	ret := _m.Called(id)

	var r0 *shop.ShopTranslation
	if rf, ok := ret.Get(0).(func(string) *shop.ShopTranslation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shop.ShopTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: translation
func (_m *ShopTranslationStore) Upsert(translation *shop.ShopTranslation) (*shop.ShopTranslation, error) {
	ret := _m.Called(translation)

	var r0 *shop.ShopTranslation
	if rf, ok := ret.Get(0).(func(*shop.ShopTranslation) *shop.ShopTranslation); ok {
		r0 = rf(translation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shop.ShopTranslation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*shop.ShopTranslation) error); ok {
		r1 = rf(translation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
