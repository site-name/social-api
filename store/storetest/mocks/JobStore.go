// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	model_helper "github.com/sitename/sitename/model_helper"
)

// JobStore is an autogenerated mock type for the JobStore type
type JobStore struct {
	mock.Mock
}

// Count provides a mock function with given fields: options
func (_m *JobStore) Count(options model_helper.JobFilterOptions) (int64, error) {
	ret := _m.Called(options)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.JobFilterOptions) (int64, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.JobFilterOptions) int64); ok {
		r0 = rf(options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(model_helper.JobFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *JobStore) Delete(id string) (string, error) {
	ret := _m.Called(id)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: options
func (_m *JobStore) FindAll(options model_helper.JobFilterOptions) (model.JobSlice, error) {
	ret := _m.Called(options)

	var r0 model.JobSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.JobFilterOptions) (model.JobSlice, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(model_helper.JobFilterOptions) model.JobSlice); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.JobSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.JobFilterOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *JobStore) Get(id string) (*model.Job, error) {
	ret := _m.Called(id)

	var r0 *model.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Job, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Job); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: job
func (_m *JobStore) Save(job model.Job) (*model.Job, error) {
	ret := _m.Called(job)

	var r0 *model.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Job) (*model.Job, error)); ok {
		return rf(job)
	}
	if rf, ok := ret.Get(0).(func(model.Job) *model.Job); ok {
		r0 = rf(job)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Job) error); ok {
		r1 = rf(job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOptimistically provides a mock function with given fields: job, currentStatus
func (_m *JobStore) UpdateOptimistically(job model.Job, currentStatus model.JobStatus) (bool, error) {
	ret := _m.Called(job, currentStatus)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Job, model.JobStatus) (bool, error)); ok {
		return rf(job, currentStatus)
	}
	if rf, ok := ret.Get(0).(func(model.Job, model.JobStatus) bool); ok {
		r0 = rf(job, currentStatus)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(model.Job, model.JobStatus) error); ok {
		r1 = rf(job, currentStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: id, status
func (_m *JobStore) UpdateStatus(id string, status model.JobStatus) (*model.Job, error) {
	ret := _m.Called(id, status)

	var r0 *model.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.JobStatus) (*model.Job, error)); ok {
		return rf(id, status)
	}
	if rf, ok := ret.Get(0).(func(string, model.JobStatus) *model.Job); ok {
		r0 = rf(id, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(string, model.JobStatus) error); ok {
		r1 = rf(id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusOptimistically provides a mock function with given fields: id, currentStatus, newStatus
func (_m *JobStore) UpdateStatusOptimistically(id string, currentStatus model.JobStatus, newStatus model.JobStatus) (bool, error) {
	ret := _m.Called(id, currentStatus, newStatus)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.JobStatus, model.JobStatus) (bool, error)); ok {
		return rf(id, currentStatus, newStatus)
	}
	if rf, ok := ret.Get(0).(func(string, model.JobStatus, model.JobStatus) bool); ok {
		r0 = rf(id, currentStatus, newStatus)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, model.JobStatus, model.JobStatus) error); ok {
		r1 = rf(id, currentStatus, newStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJobStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewJobStore creates a new instance of JobStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJobStore(t mockConstructorTestingTNewJobStore) *JobStore {
	mock := &JobStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
