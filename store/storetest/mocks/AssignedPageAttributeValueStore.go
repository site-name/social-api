// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// AssignedPageAttributeValueStore is an autogenerated mock type for the AssignedPageAttributeValueStore type
type AssignedPageAttributeValueStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: assignedPageAttrValueID
func (_m *AssignedPageAttributeValueStore) Get(assignedPageAttrValueID string) (*model.AssignedPageAttributeValue, error) {
	ret := _m.Called(assignedPageAttrValueID)

	var r0 *model.AssignedPageAttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AssignedPageAttributeValue, error)); ok {
		return rf(assignedPageAttrValueID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AssignedPageAttributeValue); ok {
		r0 = rf(assignedPageAttrValueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedPageAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(assignedPageAttrValueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: assignedPageAttrValue
func (_m *AssignedPageAttributeValueStore) Save(assignedPageAttrValue *model.AssignedPageAttributeValue) (*model.AssignedPageAttributeValue, error) {
	ret := _m.Called(assignedPageAttrValue)

	var r0 *model.AssignedPageAttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AssignedPageAttributeValue) (*model.AssignedPageAttributeValue, error)); ok {
		return rf(assignedPageAttrValue)
	}
	if rf, ok := ret.Get(0).(func(*model.AssignedPageAttributeValue) *model.AssignedPageAttributeValue); ok {
		r0 = rf(assignedPageAttrValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedPageAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AssignedPageAttributeValue) error); ok {
		r1 = rf(assignedPageAttrValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveInBulk provides a mock function with given fields: assignmentID, attributeValueIDs
func (_m *AssignedPageAttributeValueStore) SaveInBulk(assignmentID string, attributeValueIDs []string) ([]*model.AssignedPageAttributeValue, error) {
	ret := _m.Called(assignmentID, attributeValueIDs)

	var r0 []*model.AssignedPageAttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string) ([]*model.AssignedPageAttributeValue, error)); ok {
		return rf(assignmentID, attributeValueIDs)
	}
	if rf, ok := ret.Get(0).(func(string, []string) []*model.AssignedPageAttributeValue); ok {
		r0 = rf(assignmentID, attributeValueIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AssignedPageAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(assignmentID, attributeValueIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectForSort provides a mock function with given fields: assignmentID
func (_m *AssignedPageAttributeValueStore) SelectForSort(assignmentID string) ([]*model.AssignedPageAttributeValue, []*model.AttributeValue, error) {
	ret := _m.Called(assignmentID)

	var r0 []*model.AssignedPageAttributeValue
	var r1 []*model.AttributeValue
	var r2 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.AssignedPageAttributeValue, []*model.AttributeValue, error)); ok {
		return rf(assignmentID)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.AssignedPageAttributeValue); ok {
		r0 = rf(assignmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AssignedPageAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string) []*model.AttributeValue); ok {
		r1 = rf(assignmentID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.AttributeValue)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(assignmentID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateInBulk provides a mock function with given fields: attributeValues
func (_m *AssignedPageAttributeValueStore) UpdateInBulk(attributeValues []*model.AssignedPageAttributeValue) error {
	ret := _m.Called(attributeValues)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*model.AssignedPageAttributeValue) error); ok {
		r0 = rf(attributeValues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAssignedPageAttributeValueStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAssignedPageAttributeValueStore creates a new instance of AssignedPageAttributeValueStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAssignedPageAttributeValueStore(t mockConstructorTestingTNewAssignedPageAttributeValueStore) *AssignedPageAttributeValueStore {
	mock := &AssignedPageAttributeValueStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
