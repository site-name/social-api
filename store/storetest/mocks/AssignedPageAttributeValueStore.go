// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	attribute "github.com/sitename/sitename/model/attribute"
	mock "github.com/stretchr/testify/mock"

	model "github.com/sitename/sitename/model"
)

// AssignedPageAttributeValueStore is an autogenerated mock type for the AssignedPageAttributeValueStore type
type AssignedPageAttributeValueStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: assignedPageAttrValueID
func (_m *AssignedPageAttributeValueStore) Get(assignedPageAttrValueID string) (*attribute.AssignedPageAttributeValue, error) {
	ret := _m.Called(assignedPageAttrValueID)

	var r0 *attribute.AssignedPageAttributeValue
	if rf, ok := ret.Get(0).(func(string) *attribute.AssignedPageAttributeValue); ok {
		r0 = rf(assignedPageAttrValueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AssignedPageAttributeValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(assignedPageAttrValueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *AssignedPageAttributeValueStore) ModelFields(prefix string) model.StringArray {
	ret := _m.Called(prefix)

	var r0 model.StringArray
	if rf, ok := ret.Get(0).(func(string) model.StringArray); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.StringArray)
		}
	}

	return r0
}

// Save provides a mock function with given fields: assignedPageAttrValue
func (_m *AssignedPageAttributeValueStore) Save(assignedPageAttrValue *attribute.AssignedPageAttributeValue) (*attribute.AssignedPageAttributeValue, error) {
	ret := _m.Called(assignedPageAttrValue)

	var r0 *attribute.AssignedPageAttributeValue
	if rf, ok := ret.Get(0).(func(*attribute.AssignedPageAttributeValue) *attribute.AssignedPageAttributeValue); ok {
		r0 = rf(assignedPageAttrValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*attribute.AssignedPageAttributeValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*attribute.AssignedPageAttributeValue) error); ok {
		r1 = rf(assignedPageAttrValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveInBulk provides a mock function with given fields: assignmentID, attributeValueIDs
func (_m *AssignedPageAttributeValueStore) SaveInBulk(assignmentID string, attributeValueIDs []string) ([]*attribute.AssignedPageAttributeValue, error) {
	ret := _m.Called(assignmentID, attributeValueIDs)

	var r0 []*attribute.AssignedPageAttributeValue
	if rf, ok := ret.Get(0).(func(string, []string) []*attribute.AssignedPageAttributeValue); ok {
		r0 = rf(assignmentID, attributeValueIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*attribute.AssignedPageAttributeValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(assignmentID, attributeValueIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectForSort provides a mock function with given fields: assignmentID
func (_m *AssignedPageAttributeValueStore) SelectForSort(assignmentID string) ([]*attribute.AssignedPageAttributeValue, []*attribute.AttributeValue, error) {
	ret := _m.Called(assignmentID)

	var r0 []*attribute.AssignedPageAttributeValue
	if rf, ok := ret.Get(0).(func(string) []*attribute.AssignedPageAttributeValue); ok {
		r0 = rf(assignmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*attribute.AssignedPageAttributeValue)
		}
	}

	var r1 []*attribute.AttributeValue
	if rf, ok := ret.Get(1).(func(string) []*attribute.AttributeValue); ok {
		r1 = rf(assignmentID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*attribute.AttributeValue)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(assignmentID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateInBulk provides a mock function with given fields: attributeValues
func (_m *AssignedPageAttributeValueStore) UpdateInBulk(attributeValues []*attribute.AssignedPageAttributeValue) error {
	ret := _m.Called(attributeValues)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*attribute.AssignedPageAttributeValue) error); ok {
		r0 = rf(attributeValues)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
