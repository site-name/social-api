// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"
)

// AssignedPageAttributeValueStore is an autogenerated mock type for the AssignedPageAttributeValueStore type
type AssignedPageAttributeValueStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: assignedPageAttrValueID
func (_m *AssignedPageAttributeValueStore) Get(assignedPageAttrValueID string) (*model.AssignedPageAttributeValue, error) {
	ret := _m.Called(assignedPageAttrValueID)

	var r0 *model.AssignedPageAttributeValue
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AssignedPageAttributeValue, error)); ok {
		return rf(assignedPageAttrValueID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AssignedPageAttributeValue); ok {
		r0 = rf(assignedPageAttrValueID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedPageAttributeValue)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(assignedPageAttrValueID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectForSort provides a mock function with given fields: assignmentID
func (_m *AssignedPageAttributeValueStore) SelectForSort(assignmentID string) (model.AssignedPageAttributeValueSlice, model.AttributeValueSlice, error) {
	ret := _m.Called(assignmentID)

	var r0 model.AssignedPageAttributeValueSlice
	var r1 model.AttributeValueSlice
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (model.AssignedPageAttributeValueSlice, model.AttributeValueSlice, error)); ok {
		return rf(assignmentID)
	}
	if rf, ok := ret.Get(0).(func(string) model.AssignedPageAttributeValueSlice); ok {
		r0 = rf(assignmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AssignedPageAttributeValueSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(string) model.AttributeValueSlice); ok {
		r1 = rf(assignmentID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.AttributeValueSlice)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(assignmentID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Upsert provides a mock function with given fields: tx, assignedPageAttrValue
func (_m *AssignedPageAttributeValueStore) Upsert(tx boil.ContextTransactor, assignedPageAttrValue model.AssignedPageAttributeValueSlice) (model.AssignedPageAttributeValueSlice, error) {
	ret := _m.Called(tx, assignedPageAttrValue)

	var r0 model.AssignedPageAttributeValueSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.AssignedPageAttributeValueSlice) (model.AssignedPageAttributeValueSlice, error)); ok {
		return rf(tx, assignedPageAttrValue)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.AssignedPageAttributeValueSlice) model.AssignedPageAttributeValueSlice); ok {
		r0 = rf(tx, assignedPageAttrValue)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.AssignedPageAttributeValueSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.AssignedPageAttributeValueSlice) error); ok {
		r1 = rf(tx, assignedPageAttrValue)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAssignedPageAttributeValueStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAssignedPageAttributeValueStore creates a new instance of AssignedPageAttributeValueStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAssignedPageAttributeValueStore(t mockConstructorTestingTNewAssignedPageAttributeValueStore) *AssignedPageAttributeValueStore {
	mock := &AssignedPageAttributeValueStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
