// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	wishlist "github.com/sitename/sitename/model/wishlist"
)

// WishlistStore is an autogenerated mock type for the WishlistStore type
type WishlistStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *WishlistStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// GetById provides a mock function with given fields: id
func (_m *WishlistStore) GetById(id string) (*wishlist.Wishlist, error) {
	ret := _m.Called(id)

	var r0 *wishlist.Wishlist
	if rf, ok := ret.Get(0).(func(string) *wishlist.Wishlist); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wishlist.Wishlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: userID
func (_m *WishlistStore) GetByUserID(userID string) (*wishlist.Wishlist, error) {
	ret := _m.Called(userID)

	var r0 *wishlist.Wishlist
	if rf, ok := ret.Get(0).(func(string) *wishlist.Wishlist); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wishlist.Wishlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *WishlistStore) Save(_a0 *wishlist.Wishlist) (*wishlist.Wishlist, error) {
	ret := _m.Called(_a0)

	var r0 *wishlist.Wishlist
	if rf, ok := ret.Get(0).(func(*wishlist.Wishlist) *wishlist.Wishlist); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*wishlist.Wishlist)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*wishlist.Wishlist) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
