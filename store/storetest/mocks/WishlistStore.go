// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	model_helper "github.com/sitename/sitename/model_helper"
)

// WishlistStore is an autogenerated mock type for the WishlistStore type
type WishlistStore struct {
	mock.Mock
}

// GetByOption provides a mock function with given fields: option
func (_m *WishlistStore) GetByOption(option model_helper.WishlistFilterOption) (*model.Wishlist, error) {
	ret := _m.Called(option)

	var r0 *model.Wishlist
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.WishlistFilterOption) (*model.Wishlist, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.WishlistFilterOption) *model.Wishlist); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wishlist)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.WishlistFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: wishList
func (_m *WishlistStore) Upsert(wishList model.Wishlist) (*model.Wishlist, error) {
	ret := _m.Called(wishList)

	var r0 *model.Wishlist
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Wishlist) (*model.Wishlist, error)); ok {
		return rf(wishList)
	}
	if rf, ok := ret.Get(0).(func(model.Wishlist) *model.Wishlist); ok {
		r0 = rf(wishList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wishlist)
		}
	}

	if rf, ok := ret.Get(1).(func(model.Wishlist) error); ok {
		r1 = rf(wishList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWishlistStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewWishlistStore creates a new instance of WishlistStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWishlistStore(t mockConstructorTestingTNewWishlistStore) *WishlistStore {
	mock := &WishlistStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
