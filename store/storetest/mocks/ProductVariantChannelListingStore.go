// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	boil "github.com/volatiletech/sqlboiler/v4/boil"

	model "github.com/sitename/sitename/model"

	model_helper "github.com/sitename/sitename/model_helper"
)

// ProductVariantChannelListingStore is an autogenerated mock type for the ProductVariantChannelListingStore type
type ProductVariantChannelListingStore struct {
	mock.Mock
}

// FilterbyOption provides a mock function with given fields: option
func (_m *ProductVariantChannelListingStore) FilterbyOption(option model_helper.ProductVariantChannelListingFilterOption) (model.ProductVariantChannelListingSlice, error) {
	ret := _m.Called(option)

	var r0 model.ProductVariantChannelListingSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(model_helper.ProductVariantChannelListingFilterOption) (model.ProductVariantChannelListingSlice, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_helper.ProductVariantChannelListingFilterOption) model.ProductVariantChannelListingSlice); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductVariantChannelListingSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(model_helper.ProductVariantChannelListingFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: variantChannelListingID
func (_m *ProductVariantChannelListingStore) Get(variantChannelListingID string) (*model.ProductVariantChannelListing, error) {
	ret := _m.Called(variantChannelListingID)

	var r0 *model.ProductVariantChannelListing
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ProductVariantChannelListing, error)); ok {
		return rf(variantChannelListingID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ProductVariantChannelListing); ok {
		r0 = rf(variantChannelListingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductVariantChannelListing)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(variantChannelListingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upsert provides a mock function with given fields: tx, variantChannelListings
func (_m *ProductVariantChannelListingStore) Upsert(tx boil.ContextTransactor, variantChannelListings model.ProductVariantChannelListingSlice) (model.ProductVariantChannelListingSlice, error) {
	ret := _m.Called(tx, variantChannelListings)

	var r0 model.ProductVariantChannelListingSlice
	var r1 error
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.ProductVariantChannelListingSlice) (model.ProductVariantChannelListingSlice, error)); ok {
		return rf(tx, variantChannelListings)
	}
	if rf, ok := ret.Get(0).(func(boil.ContextTransactor, model.ProductVariantChannelListingSlice) model.ProductVariantChannelListingSlice); ok {
		r0 = rf(tx, variantChannelListings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.ProductVariantChannelListingSlice)
		}
	}

	if rf, ok := ret.Get(1).(func(boil.ContextTransactor, model.ProductVariantChannelListingSlice) error); ok {
		r1 = rf(tx, variantChannelListings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductVariantChannelListingStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductVariantChannelListingStore creates a new instance of ProductVariantChannelListingStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductVariantChannelListingStore(t mockConstructorTestingTNewProductVariantChannelListingStore) *ProductVariantChannelListingStore {
	mock := &ProductVariantChannelListingStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
