// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	gorp "github.com/mattermost/gorp"
	mock "github.com/stretchr/testify/mock"

	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
)

// ProductVariantChannelListingStore is an autogenerated mock type for the ProductVariantChannelListingStore type
type ProductVariantChannelListingStore struct {
	mock.Mock
}

// CreateIndexesIfNotExists provides a mock function with given fields:
func (_m *ProductVariantChannelListingStore) CreateIndexesIfNotExists() {
	_m.Called()
}

// FilterbyOption provides a mock function with given fields: transaction, option
func (_m *ProductVariantChannelListingStore) FilterbyOption(transaction *gorp.Transaction, option *product_and_discount.ProductVariantChannelListingFilterOption) ([]*product_and_discount.ProductVariantChannelListing, error) {
	ret := _m.Called(transaction, option)

	var r0 []*product_and_discount.ProductVariantChannelListing
	if rf, ok := ret.Get(0).(func(*gorp.Transaction, *product_and_discount.ProductVariantChannelListingFilterOption) []*product_and_discount.ProductVariantChannelListing); ok {
		r0 = rf(transaction, option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product_and_discount.ProductVariantChannelListing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*gorp.Transaction, *product_and_discount.ProductVariantChannelListingFilterOption) error); ok {
		r1 = rf(transaction, option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: variantChannelListingID
func (_m *ProductVariantChannelListingStore) Get(variantChannelListingID string) (*product_and_discount.ProductVariantChannelListing, error) {
	ret := _m.Called(variantChannelListingID)

	var r0 *product_and_discount.ProductVariantChannelListing
	if rf, ok := ret.Get(0).(func(string) *product_and_discount.ProductVariantChannelListing); ok {
		r0 = rf(variantChannelListingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.ProductVariantChannelListing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(variantChannelListingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields:
func (_m *ProductVariantChannelListingStore) ModelFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Save provides a mock function with given fields: variantChannelListing
func (_m *ProductVariantChannelListingStore) Save(variantChannelListing *product_and_discount.ProductVariantChannelListing) (*product_and_discount.ProductVariantChannelListing, error) {
	ret := _m.Called(variantChannelListing)

	var r0 *product_and_discount.ProductVariantChannelListing
	if rf, ok := ret.Get(0).(func(*product_and_discount.ProductVariantChannelListing) *product_and_discount.ProductVariantChannelListing); ok {
		r0 = rf(variantChannelListing)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.ProductVariantChannelListing)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.ProductVariantChannelListing) error); ok {
		r1 = rf(variantChannelListing)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: listing
func (_m *ProductVariantChannelListingStore) ScanFields(listing product_and_discount.ProductVariantChannelListing) []interface{} {
	ret := _m.Called(listing)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(product_and_discount.ProductVariantChannelListing) []interface{}); ok {
		r0 = rf(listing)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}
