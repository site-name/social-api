// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// AssignedVariantAttributeStore is an autogenerated mock type for the AssignedVariantAttributeStore type
type AssignedVariantAttributeStore struct {
	mock.Mock
}

// FilterByOption provides a mock function with given fields: option
func (_m *AssignedVariantAttributeStore) FilterByOption(option *model.AssignedVariantAttributeFilterOption) ([]*model.AssignedVariantAttribute, error) {
	ret := _m.Called(option)

	var r0 []*model.AssignedVariantAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttributeFilterOption) ([]*model.AssignedVariantAttribute, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttributeFilterOption) []*model.AssignedVariantAttribute); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.AssignedVariantAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AssignedVariantAttributeFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *AssignedVariantAttributeStore) Get(id string) (*model.AssignedVariantAttribute, error) {
	ret := _m.Called(id)

	var r0 *model.AssignedVariantAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AssignedVariantAttribute, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AssignedVariantAttribute); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedVariantAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithOption provides a mock function with given fields: option
func (_m *AssignedVariantAttributeStore) GetWithOption(option *model.AssignedVariantAttributeFilterOption) (*model.AssignedVariantAttribute, error) {
	ret := _m.Called(option)

	var r0 *model.AssignedVariantAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttributeFilterOption) (*model.AssignedVariantAttribute, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttributeFilterOption) *model.AssignedVariantAttribute); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedVariantAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AssignedVariantAttributeFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: assignedVariantAttribute
func (_m *AssignedVariantAttributeStore) Save(assignedVariantAttribute *model.AssignedVariantAttribute) (*model.AssignedVariantAttribute, error) {
	ret := _m.Called(assignedVariantAttribute)

	var r0 *model.AssignedVariantAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttribute) (*model.AssignedVariantAttribute, error)); ok {
		return rf(assignedVariantAttribute)
	}
	if rf, ok := ret.Get(0).(func(*model.AssignedVariantAttribute) *model.AssignedVariantAttribute); ok {
		r0 = rf(assignedVariantAttribute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AssignedVariantAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AssignedVariantAttribute) error); ok {
		r1 = rf(assignedVariantAttribute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAssignedVariantAttributeStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewAssignedVariantAttributeStore creates a new instance of AssignedVariantAttributeStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAssignedVariantAttributeStore(t mockConstructorTestingTNewAssignedVariantAttributeStore) *AssignedVariantAttributeStore {
	mock := &AssignedVariantAttributeStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
