// Code generated by mockery v2.10.4. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"

	product_and_discount "github.com/sitename/sitename/model/product_and_discount"
)

// DigitalContentStore is an autogenerated mock type for the DigitalContentStore type
type DigitalContentStore struct {
	mock.Mock
}

// GetByOption provides a mock function with given fields: option
func (_m *DigitalContentStore) GetByOption(option *product_and_discount.DigitalContenetFilterOption) (*product_and_discount.DigitalContent, error) {
	ret := _m.Called(option)

	var r0 *product_and_discount.DigitalContent
	if rf, ok := ret.Get(0).(func(*product_and_discount.DigitalContenetFilterOption) *product_and_discount.DigitalContent); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.DigitalContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.DigitalContenetFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelFields provides a mock function with given fields: prefix
func (_m *DigitalContentStore) ModelFields(prefix string) model.StringArray {
	ret := _m.Called(prefix)

	var r0 model.StringArray
	if rf, ok := ret.Get(0).(func(string) model.StringArray); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.StringArray)
		}
	}

	return r0
}

// Save provides a mock function with given fields: content
func (_m *DigitalContentStore) Save(content *product_and_discount.DigitalContent) (*product_and_discount.DigitalContent, error) {
	ret := _m.Called(content)

	var r0 *product_and_discount.DigitalContent
	if rf, ok := ret.Get(0).(func(*product_and_discount.DigitalContent) *product_and_discount.DigitalContent); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product_and_discount.DigitalContent)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product_and_discount.DigitalContent) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: content
func (_m *DigitalContentStore) ScanFields(content product_and_discount.DigitalContent) []interface{} {
	ret := _m.Called(content)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(product_and_discount.DigitalContent) []interface{}); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}
