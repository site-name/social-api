// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// DigitalContentStore is an autogenerated mock type for the DigitalContentStore type
type DigitalContentStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: transaction, options
func (_m *DigitalContentStore) Delete(transaction *gorm.DB, options *model.DigitalContentFilterOption) error {
	ret := _m.Called(transaction, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *model.DigitalContentFilterOption) error); ok {
		r0 = rf(transaction, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterByOption provides a mock function with given fields: option
func (_m *DigitalContentStore) FilterByOption(option *model.DigitalContentFilterOption) (int64, []*model.DigitalContent, error) {
	ret := _m.Called(option)

	var r0 int64
	var r1 []*model.DigitalContent
	var r2 error
	if rf, ok := ret.Get(0).(func(*model.DigitalContentFilterOption) (int64, []*model.DigitalContent, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.DigitalContentFilterOption) int64); ok {
		r0 = rf(option)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.DigitalContentFilterOption) []*model.DigitalContent); ok {
		r1 = rf(option)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.DigitalContent)
		}
	}

	if rf, ok := ret.Get(2).(func(*model.DigitalContentFilterOption) error); ok {
		r2 = rf(option)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByOption provides a mock function with given fields: option
func (_m *DigitalContentStore) GetByOption(option *model.DigitalContentFilterOption) (*model.DigitalContent, error) {
	ret := _m.Called(option)

	var r0 *model.DigitalContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.DigitalContentFilterOption) (*model.DigitalContent, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(*model.DigitalContentFilterOption) *model.DigitalContent); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DigitalContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.DigitalContentFilterOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: content
func (_m *DigitalContentStore) Save(content *model.DigitalContent) (*model.DigitalContent, error) {
	ret := _m.Called(content)

	var r0 *model.DigitalContent
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.DigitalContent) (*model.DigitalContent, error)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(*model.DigitalContent) *model.DigitalContent); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DigitalContent)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.DigitalContent) error); ok {
		r1 = rf(content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanFields provides a mock function with given fields: content
func (_m *DigitalContentStore) ScanFields(content *model.DigitalContent) []interface{} {
	ret := _m.Called(content)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(*model.DigitalContent) []interface{}); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	return r0
}

type mockConstructorTestingTNewDigitalContentStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewDigitalContentStore creates a new instance of DigitalContentStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDigitalContentStore(t mockConstructorTestingTNewDigitalContentStore) *DigitalContentStore {
	mock := &DigitalContentStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
