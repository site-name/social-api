// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/sitename/sitename/model"
	mock "github.com/stretchr/testify/mock"
)

// CsvExportFileStore is an autogenerated mock type for the CsvExportFileStore type
type CsvExportFileStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *CsvExportFileStore) Get(id string) (*model.ExportFile, error) {
	ret := _m.Called(id)

	var r0 *model.ExportFile
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.ExportFile, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *model.ExportFile); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExportFile)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: file
func (_m *CsvExportFileStore) Save(file *model.ExportFile) (*model.ExportFile, error) {
	ret := _m.Called(file)

	var r0 *model.ExportFile
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.ExportFile) (*model.ExportFile, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(*model.ExportFile) *model.ExportFile); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ExportFile)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.ExportFile) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCsvExportFileStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewCsvExportFileStore creates a new instance of CsvExportFileStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCsvExportFileStore(t mockConstructorTestingTNewCsvExportFileStore) *CsvExportFileStore {
	mock := &CsvExportFileStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
