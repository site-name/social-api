// Code generated by "make store-layers"
// DO NOT EDIT

package timerlayer

import (
	"context"
	timemodule "time"

    "github.com/sitename/sitename/einterfaces"
	"github.com/sitename/sitename/model/account"
	"github.com/sitename/sitename/model/compliance"
	"github.com/sitename/sitename/model/csv"
	"github.com/sitename/sitename/model/product_and_discount"
	"github.com/sitename/sitename/model/channel"
	"github.com/sitename/sitename/model/checkout"
	"github.com/sitename/sitename/model/audit"
	"github.com/sitename/sitename/model/attribute"
	"github.com/sitename/sitename/model/warehouse"
	"github.com/sitename/sitename/model/shop"
	"github.com/sitename/sitename/model/wishlist"
	"github.com/sitename/sitename/model"
	"github.com/sitename/sitename/model/cluster"
	"github.com/sitename/sitename/model/file"
	"github.com/sitename/sitename/store"
	"github.com/sitename/sitename/model/app"
	"github.com/sitename/sitename/model/order"
	"github.com/sitename/sitename/model/giftcard"
	"github.com/sitename/sitename/model/payment"
	"github.com/sitename/sitename/model/shipping"
	"github.com/sitename/sitename/model/menu"
	"github.com/shopspring/decimal"
	"github.com/sitename/sitename/model/plugins"
)

type {{.Name}} struct {
	store.Store
	Metrics einterfaces.MetricsInterface
{{range $index, $element := .SubStores}}	{{$index}}Store store.{{$index}}Store
{{end}}
}

{{range $index, $element := .SubStores}}func (s *{{$.Name}}) {{$index}}() store.{{$index}}Store {
	return s.{{$index}}Store
}

{{end}}

{{range $index, $element := .SubStores}}type {{$.Name}}{{$index}}Store struct {
	store.{{$index}}Store
	Root *{{$.Name}}
}

{{end}}

{{range $substoreName, $substore := .SubStores}}
{{range $index, $element := $substore.Methods}}
func (s *{{$.Name}}{{$substoreName}}Store) {{$index}}({{$element.Params | joinParamsWithType}}) {{$element.Results | joinResultsForSignature}} {
	start := timemodule.Now()
	{{if $element.Results | len | eq 0}}
	s.{{$substoreName}}Store.{{$index}}({{$element.Params | joinParams}})
	{{else}}
	{{genResultsVars $element.Results false }} := s.{{$substoreName}}Store.{{$index}}({{$element.Params | joinParams}})
	{{end}}
	elapsed := float64(timemodule.Since(start)) / float64(timemodule.Second)
	if s.Root.Metrics != nil {
		success := "false"
		if {{$element.Results | errorToBoolean}} {
			success = "true"
		}
		s.Root.Metrics.ObserveStoreMethodDuration("{{$substoreName}}Store.{{$index}}", success, elapsed)
	{{ with (genResultsVars $element.Results false ) -}}
	}
	return {{ . }}
	{{- else -}}
	}
	{{- end }}
}
{{end}}
{{end}}

{{range $index, $element := .Methods}}
func (s *{{$.Name}}) {{$index}}({{$element.Params | joinParamsWithType}}) {{$element.Results | joinResultsForSignature}} {
	{{if $element.Results | len | eq 0}}s.Store.{{$index}}({{$element.Params | joinParams}})
	{{else}}return s.Store.{{$index}}({{$element.Params | joinParams}})
	{{end}}}
{{end}}

func New(childStore store.Store, metrics einterfaces.MetricsInterface) *{{.Name}} {
	newStore := {{.Name}}{
		Store: childStore,
		Metrics: metrics,
	}
	{{range $substoreName, $substore := .SubStores}}
	newStore.{{$substoreName}}Store = &{{$.Name}}{{$substoreName}}Store{{"{"}}{{$substoreName}}Store: childStore.{{$substoreName}}(), Root: &newStore}{{end}}
	return &newStore
}
