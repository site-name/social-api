// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShippingZones(t *testing.T) {
	t.Parallel()

	query := ShippingZones()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShippingZonesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingZonesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShippingZones().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingZonesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShippingZoneSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingZonesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShippingZoneExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShippingZone exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShippingZoneExists to return true, but got false.")
	}
}

func testShippingZonesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shippingZoneFound, err := FindShippingZone(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shippingZoneFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShippingZonesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShippingZones().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShippingZonesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShippingZones().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShippingZonesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shippingZoneOne := &ShippingZone{}
	shippingZoneTwo := &ShippingZone{}
	if err = randomize.Struct(seed, shippingZoneOne, shippingZoneDBTypes, false, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}
	if err = randomize.Struct(seed, shippingZoneTwo, shippingZoneDBTypes, false, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shippingZoneOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shippingZoneTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShippingZones().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShippingZonesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shippingZoneOne := &ShippingZone{}
	shippingZoneTwo := &ShippingZone{}
	if err = randomize.Struct(seed, shippingZoneOne, shippingZoneDBTypes, false, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}
	if err = randomize.Struct(seed, shippingZoneTwo, shippingZoneDBTypes, false, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shippingZoneOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shippingZoneTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shippingZoneBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
	*o = ShippingZone{}
	return nil
}

func shippingZoneAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
	*o = ShippingZone{}
	return nil
}

func shippingZoneAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
	*o = ShippingZone{}
	return nil
}

func shippingZoneBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
	*o = ShippingZone{}
	return nil
}

func shippingZoneAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
	*o = ShippingZone{}
	return nil
}

func shippingZoneBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
	*o = ShippingZone{}
	return nil
}

func shippingZoneAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
	*o = ShippingZone{}
	return nil
}

func shippingZoneBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
	*o = ShippingZone{}
	return nil
}

func shippingZoneAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
	*o = ShippingZone{}
	return nil
}

func testShippingZonesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShippingZone{}
	o := &ShippingZone{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShippingZone object: %s", err)
	}

	AddShippingZoneHook(boil.BeforeInsertHook, shippingZoneBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shippingZoneBeforeInsertHooks = []ShippingZoneHook{}

	AddShippingZoneHook(boil.AfterInsertHook, shippingZoneAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shippingZoneAfterInsertHooks = []ShippingZoneHook{}

	AddShippingZoneHook(boil.AfterSelectHook, shippingZoneAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shippingZoneAfterSelectHooks = []ShippingZoneHook{}

	AddShippingZoneHook(boil.BeforeUpdateHook, shippingZoneBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shippingZoneBeforeUpdateHooks = []ShippingZoneHook{}

	AddShippingZoneHook(boil.AfterUpdateHook, shippingZoneAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shippingZoneAfterUpdateHooks = []ShippingZoneHook{}

	AddShippingZoneHook(boil.BeforeDeleteHook, shippingZoneBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shippingZoneBeforeDeleteHooks = []ShippingZoneHook{}

	AddShippingZoneHook(boil.AfterDeleteHook, shippingZoneAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shippingZoneAfterDeleteHooks = []ShippingZoneHook{}

	AddShippingZoneHook(boil.BeforeUpsertHook, shippingZoneBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shippingZoneBeforeUpsertHooks = []ShippingZoneHook{}

	AddShippingZoneHook(boil.AfterUpsertHook, shippingZoneAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shippingZoneAfterUpsertHooks = []ShippingZoneHook{}
}

func testShippingZonesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShippingZonesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shippingZoneColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShippingZoneToManyShippingMethods(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingZone
	var b, c ShippingMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShippingZoneID = a.ID
	c.ShippingZoneID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShippingMethods().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShippingZoneID == b.ShippingZoneID {
			bFound = true
		}
		if v.ShippingZoneID == c.ShippingZoneID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShippingZoneSlice{&a}
	if err = a.L.LoadShippingMethods(ctx, tx, false, (*[]*ShippingZone)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingMethods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShippingMethods = nil
	if err = a.L.LoadShippingMethods(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingMethods); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShippingZoneToManyShippingZoneChannels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingZone
	var b, c ShippingZoneChannel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shippingZoneChannelDBTypes, false, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingZoneChannelDBTypes, false, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShippingZoneID = a.ID
	c.ShippingZoneID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShippingZoneChannels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShippingZoneID == b.ShippingZoneID {
			bFound = true
		}
		if v.ShippingZoneID == c.ShippingZoneID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShippingZoneSlice{&a}
	if err = a.L.LoadShippingZoneChannels(ctx, tx, false, (*[]*ShippingZone)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingZoneChannels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShippingZoneChannels = nil
	if err = a.L.LoadShippingZoneChannels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingZoneChannels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShippingZoneToManyWarehouseShippingZones(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingZone
	var b, c WarehouseShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, warehouseShippingZoneDBTypes, false, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, warehouseShippingZoneDBTypes, false, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShippingZoneID = a.ID
	c.ShippingZoneID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WarehouseShippingZones().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShippingZoneID == b.ShippingZoneID {
			bFound = true
		}
		if v.ShippingZoneID == c.ShippingZoneID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShippingZoneSlice{&a}
	if err = a.L.LoadWarehouseShippingZones(ctx, tx, false, (*[]*ShippingZone)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WarehouseShippingZones); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WarehouseShippingZones = nil
	if err = a.L.LoadWarehouseShippingZones(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WarehouseShippingZones); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShippingZoneToManyAddOpShippingMethods(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingZone
	var b, c, d, e ShippingMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingMethod{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShippingMethod{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShippingMethods(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShippingZoneID {
			t.Error("foreign key was wrong value", a.ID, first.ShippingZoneID)
		}
		if a.ID != second.ShippingZoneID {
			t.Error("foreign key was wrong value", a.ID, second.ShippingZoneID)
		}

		if first.R.ShippingZone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShippingZone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShippingMethods[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShippingMethods[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShippingMethods().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testShippingZoneToManyAddOpShippingZoneChannels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingZone
	var b, c, d, e ShippingZoneChannel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingZoneChannel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingZoneChannelDBTypes, false, strmangle.SetComplement(shippingZoneChannelPrimaryKeyColumns, shippingZoneChannelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShippingZoneChannel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShippingZoneChannels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShippingZoneID {
			t.Error("foreign key was wrong value", a.ID, first.ShippingZoneID)
		}
		if a.ID != second.ShippingZoneID {
			t.Error("foreign key was wrong value", a.ID, second.ShippingZoneID)
		}

		if first.R.ShippingZone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShippingZone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShippingZoneChannels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShippingZoneChannels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShippingZoneChannels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testShippingZoneToManyAddOpWarehouseShippingZones(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingZone
	var b, c, d, e WarehouseShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WarehouseShippingZone{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, warehouseShippingZoneDBTypes, false, strmangle.SetComplement(warehouseShippingZonePrimaryKeyColumns, warehouseShippingZoneColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*WarehouseShippingZone{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWarehouseShippingZones(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShippingZoneID {
			t.Error("foreign key was wrong value", a.ID, first.ShippingZoneID)
		}
		if a.ID != second.ShippingZoneID {
			t.Error("foreign key was wrong value", a.ID, second.ShippingZoneID)
		}

		if first.R.ShippingZone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShippingZone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WarehouseShippingZones[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WarehouseShippingZones[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WarehouseShippingZones().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testShippingZonesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShippingZonesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShippingZoneSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShippingZonesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShippingZones().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shippingZoneDBTypes = map[string]string{`ID`: `uuid`, `Name`: `character varying`, `Countries`: `character varying`, `DefaultFlag`: `boolean`, `Description`: `character varying`, `CreatedAt`: `bigint`, `Metadata`: `jsonb`, `PrivateMetadata`: `jsonb`}
	_                   = bytes.MinRead
)

func testShippingZonesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shippingZonePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shippingZoneAllColumns) == len(shippingZonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShippingZonesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shippingZoneAllColumns) == len(shippingZonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZone{}
	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shippingZoneDBTypes, true, shippingZonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shippingZoneAllColumns, shippingZonePrimaryKeyColumns) {
		fields = shippingZoneAllColumns
	} else {
		fields = strmangle.SetComplement(
			shippingZoneAllColumns,
			shippingZonePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShippingZoneSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShippingZonesUpsert(t *testing.T) {
	t.Parallel()

	if len(shippingZoneAllColumns) == len(shippingZonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShippingZone{}
	if err = randomize.Struct(seed, &o, shippingZoneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShippingZone: %s", err)
	}

	count, err := ShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shippingZoneDBTypes, false, shippingZonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShippingZone: %s", err)
	}

	count, err = ShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
