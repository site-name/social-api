// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UploadSession is an object representing the database table.
type UploadSession struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Type       null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	CreateAt   null.Int64  `boil:"create_at" json:"create_at,omitempty" toml:"create_at" yaml:"create_at,omitempty"`
	UserID     null.String `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	FileName   null.String `boil:"file_name" json:"file_name,omitempty" toml:"file_name" yaml:"file_name,omitempty"`
	Path       null.String `boil:"path" json:"path,omitempty" toml:"path" yaml:"path,omitempty"`
	FileSize   null.Int64  `boil:"file_size" json:"file_size,omitempty" toml:"file_size" yaml:"file_size,omitempty"`
	FileOffset null.Int64  `boil:"file_offset" json:"file_offset,omitempty" toml:"file_offset" yaml:"file_offset,omitempty"`

	R *uploadSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadSessionColumns = struct {
	ID         string
	Type       string
	CreateAt   string
	UserID     string
	FileName   string
	Path       string
	FileSize   string
	FileOffset string
}{
	ID:         "id",
	Type:       "type",
	CreateAt:   "create_at",
	UserID:     "user_id",
	FileName:   "file_name",
	Path:       "path",
	FileSize:   "file_size",
	FileOffset: "file_offset",
}

var UploadSessionTableColumns = struct {
	ID         string
	Type       string
	CreateAt   string
	UserID     string
	FileName   string
	Path       string
	FileSize   string
	FileOffset string
}{
	ID:         "upload_sessions.id",
	Type:       "upload_sessions.type",
	CreateAt:   "upload_sessions.create_at",
	UserID:     "upload_sessions.user_id",
	FileName:   "upload_sessions.file_name",
	Path:       "upload_sessions.path",
	FileSize:   "upload_sessions.file_size",
	FileOffset: "upload_sessions.file_offset",
}

// Generated where

var UploadSessionWhere = struct {
	ID         whereHelperstring
	Type       whereHelpernull_String
	CreateAt   whereHelpernull_Int64
	UserID     whereHelpernull_String
	FileName   whereHelpernull_String
	Path       whereHelpernull_String
	FileSize   whereHelpernull_Int64
	FileOffset whereHelpernull_Int64
}{
	ID:         whereHelperstring{field: "\"upload_sessions\".\"id\""},
	Type:       whereHelpernull_String{field: "\"upload_sessions\".\"type\""},
	CreateAt:   whereHelpernull_Int64{field: "\"upload_sessions\".\"create_at\""},
	UserID:     whereHelpernull_String{field: "\"upload_sessions\".\"user_id\""},
	FileName:   whereHelpernull_String{field: "\"upload_sessions\".\"file_name\""},
	Path:       whereHelpernull_String{field: "\"upload_sessions\".\"path\""},
	FileSize:   whereHelpernull_Int64{field: "\"upload_sessions\".\"file_size\""},
	FileOffset: whereHelpernull_Int64{field: "\"upload_sessions\".\"file_offset\""},
}

// UploadSessionRels is where relationship names are stored.
var UploadSessionRels = struct {
}{}

// uploadSessionR is where relationships are stored.
type uploadSessionR struct {
}

// NewStruct creates a new relationship struct
func (*uploadSessionR) NewStruct() *uploadSessionR {
	return &uploadSessionR{}
}

// uploadSessionL is where Load methods for each relationship are stored.
type uploadSessionL struct{}

var (
	uploadSessionAllColumns            = []string{"id", "type", "create_at", "user_id", "file_name", "path", "file_size", "file_offset"}
	uploadSessionColumnsWithoutDefault = []string{"id"}
	uploadSessionColumnsWithDefault    = []string{"type", "create_at", "user_id", "file_name", "path", "file_size", "file_offset"}
	uploadSessionPrimaryKeyColumns     = []string{"id"}
	uploadSessionGeneratedColumns      = []string{}
)

type (
	// UploadSessionSlice is an alias for a slice of pointers to UploadSession.
	// This should almost always be used instead of []UploadSession.
	UploadSessionSlice []*UploadSession
	// UploadSessionHook is the signature for custom UploadSession hook methods
	UploadSessionHook func(context.Context, boil.ContextExecutor, *UploadSession) error

	uploadSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadSessionType                 = reflect.TypeOf(&UploadSession{})
	uploadSessionMapping              = queries.MakeStructMapping(uploadSessionType)
	uploadSessionPrimaryKeyMapping, _ = queries.BindMapping(uploadSessionType, uploadSessionMapping, uploadSessionPrimaryKeyColumns)
	uploadSessionInsertCacheMut       sync.RWMutex
	uploadSessionInsertCache          = make(map[string]insertCache)
	uploadSessionUpdateCacheMut       sync.RWMutex
	uploadSessionUpdateCache          = make(map[string]updateCache)
	uploadSessionUpsertCacheMut       sync.RWMutex
	uploadSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uploadSessionAfterSelectHooks []UploadSessionHook

var uploadSessionBeforeInsertHooks []UploadSessionHook
var uploadSessionAfterInsertHooks []UploadSessionHook

var uploadSessionBeforeUpdateHooks []UploadSessionHook
var uploadSessionAfterUpdateHooks []UploadSessionHook

var uploadSessionBeforeDeleteHooks []UploadSessionHook
var uploadSessionAfterDeleteHooks []UploadSessionHook

var uploadSessionBeforeUpsertHooks []UploadSessionHook
var uploadSessionAfterUpsertHooks []UploadSessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UploadSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UploadSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UploadSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UploadSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UploadSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UploadSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UploadSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UploadSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UploadSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUploadSessionHook registers your hook function for all future operations.
func AddUploadSessionHook(hookPoint boil.HookPoint, uploadSessionHook UploadSessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		uploadSessionAfterSelectHooks = append(uploadSessionAfterSelectHooks, uploadSessionHook)
	case boil.BeforeInsertHook:
		uploadSessionBeforeInsertHooks = append(uploadSessionBeforeInsertHooks, uploadSessionHook)
	case boil.AfterInsertHook:
		uploadSessionAfterInsertHooks = append(uploadSessionAfterInsertHooks, uploadSessionHook)
	case boil.BeforeUpdateHook:
		uploadSessionBeforeUpdateHooks = append(uploadSessionBeforeUpdateHooks, uploadSessionHook)
	case boil.AfterUpdateHook:
		uploadSessionAfterUpdateHooks = append(uploadSessionAfterUpdateHooks, uploadSessionHook)
	case boil.BeforeDeleteHook:
		uploadSessionBeforeDeleteHooks = append(uploadSessionBeforeDeleteHooks, uploadSessionHook)
	case boil.AfterDeleteHook:
		uploadSessionAfterDeleteHooks = append(uploadSessionAfterDeleteHooks, uploadSessionHook)
	case boil.BeforeUpsertHook:
		uploadSessionBeforeUpsertHooks = append(uploadSessionBeforeUpsertHooks, uploadSessionHook)
	case boil.AfterUpsertHook:
		uploadSessionAfterUpsertHooks = append(uploadSessionAfterUpsertHooks, uploadSessionHook)
	}
}

// One returns a single uploadSession record from the query.
func (q uploadSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UploadSession, error) {
	o := &UploadSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upload_sessions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UploadSession records from the query.
func (q uploadSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UploadSessionSlice, error) {
	var o []*UploadSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UploadSession slice")
	}

	if len(uploadSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UploadSession records in the query.
func (q uploadSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upload_sessions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uploadSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upload_sessions exists")
	}

	return count > 0, nil
}

// UploadSessions retrieves all the records using an executor.
func UploadSessions(mods ...qm.QueryMod) uploadSessionQuery {
	mods = append(mods, qm.From("\"upload_sessions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"upload_sessions\".*"})
	}

	return uploadSessionQuery{q}
}

// FindUploadSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUploadSession(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UploadSession, error) {
	uploadSessionObj := &UploadSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upload_sessions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, uploadSessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upload_sessions")
	}

	if err = uploadSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return uploadSessionObj, err
	}

	return uploadSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UploadSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no upload_sessions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadSessionInsertCacheMut.RLock()
	cache, cached := uploadSessionInsertCache[key]
	uploadSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadSessionAllColumns,
			uploadSessionColumnsWithDefault,
			uploadSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uploadSessionType, uploadSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadSessionType, uploadSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upload_sessions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upload_sessions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upload_sessions")
	}

	if !cached {
		uploadSessionInsertCacheMut.Lock()
		uploadSessionInsertCache[key] = cache
		uploadSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UploadSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UploadSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uploadSessionUpdateCacheMut.RLock()
	cache, cached := uploadSessionUpdateCache[key]
	uploadSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadSessionAllColumns,
			uploadSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update upload_sessions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upload_sessions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, uploadSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadSessionType, uploadSessionMapping, append(wl, uploadSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update upload_sessions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for upload_sessions")
	}

	if !cached {
		uploadSessionUpdateCacheMut.Lock()
		uploadSessionUpdateCache[key] = cache
		uploadSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q uploadSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for upload_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for upload_sessions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upload_sessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, uploadSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in uploadSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all uploadSession")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UploadSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no upload_sessions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadSessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadSessionUpsertCacheMut.RLock()
	cache, cached := uploadSessionUpsertCache[key]
	uploadSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			uploadSessionAllColumns,
			uploadSessionColumnsWithDefault,
			uploadSessionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uploadSessionAllColumns,
			uploadSessionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert upload_sessions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(uploadSessionPrimaryKeyColumns))
			copy(conflict, uploadSessionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"upload_sessions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(uploadSessionType, uploadSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadSessionType, uploadSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert upload_sessions")
	}

	if !cached {
		uploadSessionUpsertCacheMut.Lock()
		uploadSessionUpsertCache[key] = cache
		uploadSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UploadSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UploadSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UploadSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadSessionPrimaryKeyMapping)
	sql := "DELETE FROM \"upload_sessions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from upload_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for upload_sessions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uploadSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no uploadSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from upload_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for upload_sessions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uploadSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upload_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadSessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from uploadSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for upload_sessions")
	}

	if len(uploadSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UploadSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUploadSession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upload_sessions\".* FROM \"upload_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UploadSessionSlice")
	}

	*o = slice

	return nil
}

// UploadSessionExists checks if the UploadSession row exists.
func UploadSessionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upload_sessions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upload_sessions exists")
	}

	return exists, nil
}

// Exists checks if the UploadSession row exists.
func (o *UploadSession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UploadSessionExists(ctx, exec, o.ID)
}
