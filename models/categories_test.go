// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCategories(t *testing.T) {
	t.Parallel()

	query := Categories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Categories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Categories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Categories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Categories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CategoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Category exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CategoryExists to return true, but got false.")
	}
}

func testCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	categoryFound, err := FindCategory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if categoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Categories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Categories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	categoryOne := &Category{}
	categoryTwo := &Category{}
	if err = randomize.Struct(seed, categoryOne, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}
	if err = randomize.Struct(seed, categoryTwo, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = categoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = categoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Categories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	categoryOne := &Category{}
	categoryTwo := &Category{}
	if err = randomize.Struct(seed, categoryOne, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}
	if err = randomize.Struct(seed, categoryTwo, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = categoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = categoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Categories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func categoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Category) error {
	*o = Category{}
	return nil
}

func categoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Category) error {
	*o = Category{}
	return nil
}

func categoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Category) error {
	*o = Category{}
	return nil
}

func categoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Category) error {
	*o = Category{}
	return nil
}

func categoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Category) error {
	*o = Category{}
	return nil
}

func categoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Category) error {
	*o = Category{}
	return nil
}

func categoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Category) error {
	*o = Category{}
	return nil
}

func categoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Category) error {
	*o = Category{}
	return nil
}

func categoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Category) error {
	*o = Category{}
	return nil
}

func testCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Category{}
	o := &Category{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, categoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Category object: %s", err)
	}

	AddCategoryHook(boil.BeforeInsertHook, categoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	categoryBeforeInsertHooks = []CategoryHook{}

	AddCategoryHook(boil.AfterInsertHook, categoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	categoryAfterInsertHooks = []CategoryHook{}

	AddCategoryHook(boil.AfterSelectHook, categoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	categoryAfterSelectHooks = []CategoryHook{}

	AddCategoryHook(boil.BeforeUpdateHook, categoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	categoryBeforeUpdateHooks = []CategoryHook{}

	AddCategoryHook(boil.AfterUpdateHook, categoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	categoryAfterUpdateHooks = []CategoryHook{}

	AddCategoryHook(boil.BeforeDeleteHook, categoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	categoryBeforeDeleteHooks = []CategoryHook{}

	AddCategoryHook(boil.AfterDeleteHook, categoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	categoryAfterDeleteHooks = []CategoryHook{}

	AddCategoryHook(boil.BeforeUpsertHook, categoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	categoryBeforeUpsertHooks = []CategoryHook{}

	AddCategoryHook(boil.AfterUpsertHook, categoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	categoryAfterUpsertHooks = []CategoryHook{}
}

func testCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Categories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(categoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Categories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCategoryToManyParentidCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Parentid, a.ID)
	queries.Assign(&c.Parentid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ParentidCategories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Parentid, b.Parentid) {
			bFound = true
		}
		if queries.Equal(v.Parentid, c.Parentid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CategorySlice{&a}
	if err = a.L.LoadParentidCategories(ctx, tx, false, (*[]*Category)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentidCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentidCategories = nil
	if err = a.L.LoadParentidCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentidCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCategoryToManyCategoryidMenuItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Categoryid, a.ID)
	queries.Assign(&c.Categoryid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CategoryidMenuItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Categoryid, b.Categoryid) {
			bFound = true
		}
		if queries.Equal(v.Categoryid, c.Categoryid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CategorySlice{&a}
	if err = a.L.LoadCategoryidMenuItems(ctx, tx, false, (*[]*Category)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryidMenuItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryidMenuItems = nil
	if err = a.L.LoadCategoryidMenuItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryidMenuItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCategoryToManyCategoryidSaleCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c SaleCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, saleCategoryDBTypes, false, saleCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleCategoryDBTypes, false, saleCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Categoryid, a.ID)
	queries.Assign(&c.Categoryid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CategoryidSaleCategories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Categoryid, b.Categoryid) {
			bFound = true
		}
		if queries.Equal(v.Categoryid, c.Categoryid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CategorySlice{&a}
	if err = a.L.LoadCategoryidSaleCategories(ctx, tx, false, (*[]*Category)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryidSaleCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryidSaleCategories = nil
	if err = a.L.LoadCategoryidSaleCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryidSaleCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCategoryToManyCategoryidVoucherCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c VoucherCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voucherCategoryDBTypes, false, voucherCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherCategoryDBTypes, false, voucherCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Categoryid, a.ID)
	queries.Assign(&c.Categoryid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CategoryidVoucherCategories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Categoryid, b.Categoryid) {
			bFound = true
		}
		if queries.Equal(v.Categoryid, c.Categoryid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CategorySlice{&a}
	if err = a.L.LoadCategoryidVoucherCategories(ctx, tx, false, (*[]*Category)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryidVoucherCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CategoryidVoucherCategories = nil
	if err = a.L.LoadCategoryidVoucherCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CategoryidVoucherCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCategoryToManyAddOpParentidCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Category{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Category{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentidCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Parentid) {
			t.Error("foreign key was wrong value", a.ID, first.Parentid)
		}
		if !queries.Equal(a.ID, second.Parentid) {
			t.Error("foreign key was wrong value", a.ID, second.Parentid)
		}

		if first.R.ParentidCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ParentidCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentidCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentidCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentidCategories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCategoryToManySetOpParentidCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Category{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentidCategories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentidCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentidCategories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentidCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Parentid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Parentid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Parentid) {
		t.Error("foreign key was wrong value", a.ID, d.Parentid)
	}
	if !queries.Equal(a.ID, e.Parentid) {
		t.Error("foreign key was wrong value", a.ID, e.Parentid)
	}

	if b.R.ParentidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentidCategory != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ParentidCategory != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentidCategories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentidCategories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCategoryToManyRemoveOpParentidCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Category{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentidCategories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentidCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentidCategories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentidCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Parentid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Parentid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ParentidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ParentidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ParentidCategory != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ParentidCategory != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentidCategories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentidCategories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentidCategories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCategoryToManyAddOpCategoryidMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MenuItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryidMenuItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Categoryid) {
			t.Error("foreign key was wrong value", a.ID, first.Categoryid)
		}
		if !queries.Equal(a.ID, second.Categoryid) {
			t.Error("foreign key was wrong value", a.ID, second.Categoryid)
		}

		if first.R.CategoryidCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CategoryidCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryidMenuItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryidMenuItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryidMenuItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCategoryToManySetOpCategoryidMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCategoryidMenuItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CategoryidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCategoryidMenuItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CategoryidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Categoryid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Categoryid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Categoryid) {
		t.Error("foreign key was wrong value", a.ID, d.Categoryid)
	}
	if !queries.Equal(a.ID, e.Categoryid) {
		t.Error("foreign key was wrong value", a.ID, e.Categoryid)
	}

	if b.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CategoryidCategory != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CategoryidCategory != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CategoryidMenuItems[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CategoryidMenuItems[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCategoryToManyRemoveOpCategoryidMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCategoryidMenuItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CategoryidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCategoryidMenuItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CategoryidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Categoryid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Categoryid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CategoryidCategory != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CategoryidCategory != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CategoryidMenuItems) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CategoryidMenuItems[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CategoryidMenuItems[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCategoryToManyAddOpCategoryidSaleCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e SaleCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleCategoryDBTypes, false, strmangle.SetComplement(saleCategoryPrimaryKeyColumns, saleCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SaleCategory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryidSaleCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Categoryid) {
			t.Error("foreign key was wrong value", a.ID, first.Categoryid)
		}
		if !queries.Equal(a.ID, second.Categoryid) {
			t.Error("foreign key was wrong value", a.ID, second.Categoryid)
		}

		if first.R.CategoryidCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CategoryidCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryidSaleCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryidSaleCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryidSaleCategories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCategoryToManySetOpCategoryidSaleCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e SaleCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleCategoryDBTypes, false, strmangle.SetComplement(saleCategoryPrimaryKeyColumns, saleCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCategoryidSaleCategories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CategoryidSaleCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCategoryidSaleCategories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CategoryidSaleCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Categoryid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Categoryid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Categoryid) {
		t.Error("foreign key was wrong value", a.ID, d.Categoryid)
	}
	if !queries.Equal(a.ID, e.Categoryid) {
		t.Error("foreign key was wrong value", a.ID, e.Categoryid)
	}

	if b.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CategoryidCategory != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CategoryidCategory != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CategoryidSaleCategories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CategoryidSaleCategories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCategoryToManyRemoveOpCategoryidSaleCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e SaleCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleCategoryDBTypes, false, strmangle.SetComplement(saleCategoryPrimaryKeyColumns, saleCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCategoryidSaleCategories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CategoryidSaleCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCategoryidSaleCategories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CategoryidSaleCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Categoryid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Categoryid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CategoryidCategory != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CategoryidCategory != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CategoryidSaleCategories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CategoryidSaleCategories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CategoryidSaleCategories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCategoryToManyAddOpCategoryidVoucherCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e VoucherCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCategoryDBTypes, false, strmangle.SetComplement(voucherCategoryPrimaryKeyColumns, voucherCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VoucherCategory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategoryidVoucherCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Categoryid) {
			t.Error("foreign key was wrong value", a.ID, first.Categoryid)
		}
		if !queries.Equal(a.ID, second.Categoryid) {
			t.Error("foreign key was wrong value", a.ID, second.Categoryid)
		}

		if first.R.CategoryidCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CategoryidCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CategoryidVoucherCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CategoryidVoucherCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CategoryidVoucherCategories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCategoryToManySetOpCategoryidVoucherCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e VoucherCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCategoryDBTypes, false, strmangle.SetComplement(voucherCategoryPrimaryKeyColumns, voucherCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCategoryidVoucherCategories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CategoryidVoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCategoryidVoucherCategories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CategoryidVoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Categoryid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Categoryid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Categoryid) {
		t.Error("foreign key was wrong value", a.ID, d.Categoryid)
	}
	if !queries.Equal(a.ID, e.Categoryid) {
		t.Error("foreign key was wrong value", a.ID, e.Categoryid)
	}

	if b.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CategoryidCategory != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CategoryidCategory != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CategoryidVoucherCategories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CategoryidVoucherCategories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCategoryToManyRemoveOpCategoryidVoucherCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c, d, e VoucherCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCategoryDBTypes, false, strmangle.SetComplement(voucherCategoryPrimaryKeyColumns, voucherCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCategoryidVoucherCategories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CategoryidVoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCategoryidVoucherCategories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CategoryidVoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Categoryid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Categoryid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CategoryidCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CategoryidCategory != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CategoryidCategory != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CategoryidVoucherCategories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CategoryidVoucherCategories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CategoryidVoucherCategories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCategoryToOneCategoryUsingParentidCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Category
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Parentid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ParentidCategory().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCategoryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Category) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CategorySlice{&local}
	if err = local.L.LoadParentidCategory(ctx, tx, false, (*[]*Category)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentidCategory == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ParentidCategory = nil
	if err = local.L.LoadParentidCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ParentidCategory == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCategoryToOneSetOpCategoryUsingParentidCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetParentidCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ParentidCategory != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentidCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Parentid, x.ID) {
			t.Error("foreign key was wrong value", a.Parentid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Parentid))
		reflect.Indirect(reflect.ValueOf(&a.Parentid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Parentid, x.ID) {
			t.Error("foreign key was wrong value", a.Parentid, x.ID)
		}
	}
}

func testCategoryToOneRemoveOpCategoryUsingParentidCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Category
	var b Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParentidCategory(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParentidCategory(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ParentidCategory().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ParentidCategory != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Parentid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentidCategories) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Categories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	categoryDBTypes = map[string]string{`ID`: `character varying`, `Name`: `character varying`, `Slug`: `character varying`, `Description`: `jsonb`, `Parentid`: `character varying`, `Level`: `smallint`, `Backgroundimage`: `character varying`, `Backgroundimagealt`: `character varying`, `Images`: `character varying`, `Seotitle`: `character varying`, `Seodescription`: `character varying`, `Nametranslation`: `jsonb`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`}
	_               = bytes.MinRead
)

func testCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(categoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(categoryAllColumns) == len(categoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Categories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(categoryAllColumns) == len(categoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Category{}
	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Categories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, categoryDBTypes, true, categoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(categoryAllColumns, categoryPrimaryKeyColumns) {
		fields = categoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			categoryAllColumns,
			categoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(categoryAllColumns) == len(categoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Category{}
	if err = randomize.Struct(seed, &o, categoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Category: %s", err)
	}

	count, err := Categories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, categoryDBTypes, false, categoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Category: %s", err)
	}

	count, err = Categories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
