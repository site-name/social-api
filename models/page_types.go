// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PageType is an object representing the database table.
type PageType struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name            null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Slug            null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	Metadata        null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata null.JSON   `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *pageTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pageTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PageTypeColumns = struct {
	ID              string
	Name            string
	Slug            string
	Metadata        string
	Privatemetadata string
}{
	ID:              "id",
	Name:            "name",
	Slug:            "slug",
	Metadata:        "metadata",
	Privatemetadata: "privatemetadata",
}

var PageTypeTableColumns = struct {
	ID              string
	Name            string
	Slug            string
	Metadata        string
	Privatemetadata string
}{
	ID:              "page_types.id",
	Name:            "page_types.name",
	Slug:            "page_types.slug",
	Metadata:        "page_types.metadata",
	Privatemetadata: "page_types.privatemetadata",
}

// Generated where

var PageTypeWhere = struct {
	ID              whereHelperstring
	Name            whereHelpernull_String
	Slug            whereHelpernull_String
	Metadata        whereHelpernull_JSON
	Privatemetadata whereHelpernull_JSON
}{
	ID:              whereHelperstring{field: "\"page_types\".\"id\""},
	Name:            whereHelpernull_String{field: "\"page_types\".\"name\""},
	Slug:            whereHelpernull_String{field: "\"page_types\".\"slug\""},
	Metadata:        whereHelpernull_JSON{field: "\"page_types\".\"metadata\""},
	Privatemetadata: whereHelpernull_JSON{field: "\"page_types\".\"privatemetadata\""},
}

// PageTypeRels is where relationship names are stored.
var PageTypeRels = struct {
	PagetypeidAttributePages string
	PagetypeidPages          string
}{
	PagetypeidAttributePages: "PagetypeidAttributePages",
	PagetypeidPages:          "PagetypeidPages",
}

// pageTypeR is where relationships are stored.
type pageTypeR struct {
	PagetypeidAttributePages AttributePageSlice `boil:"PagetypeidAttributePages" json:"PagetypeidAttributePages" toml:"PagetypeidAttributePages" yaml:"PagetypeidAttributePages"`
	PagetypeidPages          PageSlice          `boil:"PagetypeidPages" json:"PagetypeidPages" toml:"PagetypeidPages" yaml:"PagetypeidPages"`
}

// NewStruct creates a new relationship struct
func (*pageTypeR) NewStruct() *pageTypeR {
	return &pageTypeR{}
}

func (r *pageTypeR) GetPagetypeidAttributePages() AttributePageSlice {
	if r == nil {
		return nil
	}
	return r.PagetypeidAttributePages
}

func (r *pageTypeR) GetPagetypeidPages() PageSlice {
	if r == nil {
		return nil
	}
	return r.PagetypeidPages
}

// pageTypeL is where Load methods for each relationship are stored.
type pageTypeL struct{}

var (
	pageTypeAllColumns            = []string{"id", "name", "slug", "metadata", "privatemetadata"}
	pageTypeColumnsWithoutDefault = []string{"id"}
	pageTypeColumnsWithDefault    = []string{"name", "slug", "metadata", "privatemetadata"}
	pageTypePrimaryKeyColumns     = []string{"id"}
	pageTypeGeneratedColumns      = []string{}
)

type (
	// PageTypeSlice is an alias for a slice of pointers to PageType.
	// This should almost always be used instead of []PageType.
	PageTypeSlice []*PageType
	// PageTypeHook is the signature for custom PageType hook methods
	PageTypeHook func(context.Context, boil.ContextExecutor, *PageType) error

	pageTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pageTypeType                 = reflect.TypeOf(&PageType{})
	pageTypeMapping              = queries.MakeStructMapping(pageTypeType)
	pageTypePrimaryKeyMapping, _ = queries.BindMapping(pageTypeType, pageTypeMapping, pageTypePrimaryKeyColumns)
	pageTypeInsertCacheMut       sync.RWMutex
	pageTypeInsertCache          = make(map[string]insertCache)
	pageTypeUpdateCacheMut       sync.RWMutex
	pageTypeUpdateCache          = make(map[string]updateCache)
	pageTypeUpsertCacheMut       sync.RWMutex
	pageTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pageTypeAfterSelectHooks []PageTypeHook

var pageTypeBeforeInsertHooks []PageTypeHook
var pageTypeAfterInsertHooks []PageTypeHook

var pageTypeBeforeUpdateHooks []PageTypeHook
var pageTypeAfterUpdateHooks []PageTypeHook

var pageTypeBeforeDeleteHooks []PageTypeHook
var pageTypeAfterDeleteHooks []PageTypeHook

var pageTypeBeforeUpsertHooks []PageTypeHook
var pageTypeAfterUpsertHooks []PageTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PageType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PageType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PageType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PageType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PageType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PageType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PageType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PageType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PageType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPageTypeHook registers your hook function for all future operations.
func AddPageTypeHook(hookPoint boil.HookPoint, pageTypeHook PageTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pageTypeAfterSelectHooks = append(pageTypeAfterSelectHooks, pageTypeHook)
	case boil.BeforeInsertHook:
		pageTypeBeforeInsertHooks = append(pageTypeBeforeInsertHooks, pageTypeHook)
	case boil.AfterInsertHook:
		pageTypeAfterInsertHooks = append(pageTypeAfterInsertHooks, pageTypeHook)
	case boil.BeforeUpdateHook:
		pageTypeBeforeUpdateHooks = append(pageTypeBeforeUpdateHooks, pageTypeHook)
	case boil.AfterUpdateHook:
		pageTypeAfterUpdateHooks = append(pageTypeAfterUpdateHooks, pageTypeHook)
	case boil.BeforeDeleteHook:
		pageTypeBeforeDeleteHooks = append(pageTypeBeforeDeleteHooks, pageTypeHook)
	case boil.AfterDeleteHook:
		pageTypeAfterDeleteHooks = append(pageTypeAfterDeleteHooks, pageTypeHook)
	case boil.BeforeUpsertHook:
		pageTypeBeforeUpsertHooks = append(pageTypeBeforeUpsertHooks, pageTypeHook)
	case boil.AfterUpsertHook:
		pageTypeAfterUpsertHooks = append(pageTypeAfterUpsertHooks, pageTypeHook)
	}
}

// One returns a single pageType record from the query.
func (q pageTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PageType, error) {
	o := &PageType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for page_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PageType records from the query.
func (q pageTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PageTypeSlice, error) {
	var o []*PageType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PageType slice")
	}

	if len(pageTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PageType records in the query.
func (q pageTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count page_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pageTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if page_types exists")
	}

	return count > 0, nil
}

// PagetypeidAttributePages retrieves all the attribute_page's AttributePages with an executor via pagetypeid column.
func (o *PageType) PagetypeidAttributePages(mods ...qm.QueryMod) attributePageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"attribute_pages\".\"pagetypeid\"=?", o.ID),
	)

	return AttributePages(queryMods...)
}

// PagetypeidPages retrieves all the page's Pages with an executor via pagetypeid column.
func (o *PageType) PagetypeidPages(mods ...qm.QueryMod) pageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"pages\".\"pagetypeid\"=?", o.ID),
	)

	return Pages(queryMods...)
}

// LoadPagetypeidAttributePages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pageTypeL) LoadPagetypeidAttributePages(ctx context.Context, e boil.ContextExecutor, singular bool, maybePageType interface{}, mods queries.Applicator) error {
	var slice []*PageType
	var object *PageType

	if singular {
		var ok bool
		object, ok = maybePageType.(*PageType)
		if !ok {
			object = new(PageType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePageType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePageType))
			}
		}
	} else {
		s, ok := maybePageType.(*[]*PageType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePageType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePageType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attribute_pages`),
		qm.WhereIn(`attribute_pages.pagetypeid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load attribute_pages")
	}

	var resultSlice []*AttributePage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice attribute_pages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on attribute_pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_pages")
	}

	if len(attributePageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PagetypeidAttributePages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &attributePageR{}
			}
			foreign.R.PagetypeidPageType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Pagetypeid) {
				local.R.PagetypeidAttributePages = append(local.R.PagetypeidAttributePages, foreign)
				if foreign.R == nil {
					foreign.R = &attributePageR{}
				}
				foreign.R.PagetypeidPageType = local
				break
			}
		}
	}

	return nil
}

// LoadPagetypeidPages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pageTypeL) LoadPagetypeidPages(ctx context.Context, e boil.ContextExecutor, singular bool, maybePageType interface{}, mods queries.Applicator) error {
	var slice []*PageType
	var object *PageType

	if singular {
		var ok bool
		object, ok = maybePageType.(*PageType)
		if !ok {
			object = new(PageType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePageType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePageType))
			}
		}
	} else {
		s, ok := maybePageType.(*[]*PageType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePageType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePageType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageTypeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pages`),
		qm.WhereIn(`pages.pagetypeid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load pages")
	}

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice pages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pages")
	}

	if len(pageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PagetypeidPages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pageR{}
			}
			foreign.R.PagetypeidPageType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Pagetypeid) {
				local.R.PagetypeidPages = append(local.R.PagetypeidPages, foreign)
				if foreign.R == nil {
					foreign.R = &pageR{}
				}
				foreign.R.PagetypeidPageType = local
				break
			}
		}
	}

	return nil
}

// AddPagetypeidAttributePages adds the given related objects to the existing relationships
// of the page_type, optionally inserting them as new records.
// Appends related to o.R.PagetypeidAttributePages.
// Sets related.R.PagetypeidPageType appropriately.
func (o *PageType) AddPagetypeidAttributePages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AttributePage) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Pagetypeid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"attribute_pages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pagetypeid"}),
				strmangle.WhereClause("\"", "\"", 2, attributePagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Pagetypeid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &pageTypeR{
			PagetypeidAttributePages: related,
		}
	} else {
		o.R.PagetypeidAttributePages = append(o.R.PagetypeidAttributePages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &attributePageR{
				PagetypeidPageType: o,
			}
		} else {
			rel.R.PagetypeidPageType = o
		}
	}
	return nil
}

// SetPagetypeidAttributePages removes all previously related items of the
// page_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PagetypeidPageType's PagetypeidAttributePages accordingly.
// Replaces o.R.PagetypeidAttributePages with related.
// Sets related.R.PagetypeidPageType's PagetypeidAttributePages accordingly.
func (o *PageType) SetPagetypeidAttributePages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AttributePage) error {
	query := "update \"attribute_pages\" set \"pagetypeid\" = null where \"pagetypeid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PagetypeidAttributePages {
			queries.SetScanner(&rel.Pagetypeid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PagetypeidPageType = nil
		}
		o.R.PagetypeidAttributePages = nil
	}

	return o.AddPagetypeidAttributePages(ctx, exec, insert, related...)
}

// RemovePagetypeidAttributePages relationships from objects passed in.
// Removes related items from R.PagetypeidAttributePages (uses pointer comparison, removal does not keep order)
// Sets related.R.PagetypeidPageType.
func (o *PageType) RemovePagetypeidAttributePages(ctx context.Context, exec boil.ContextExecutor, related ...*AttributePage) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Pagetypeid, nil)
		if rel.R != nil {
			rel.R.PagetypeidPageType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("pagetypeid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PagetypeidAttributePages {
			if rel != ri {
				continue
			}

			ln := len(o.R.PagetypeidAttributePages)
			if ln > 1 && i < ln-1 {
				o.R.PagetypeidAttributePages[i] = o.R.PagetypeidAttributePages[ln-1]
			}
			o.R.PagetypeidAttributePages = o.R.PagetypeidAttributePages[:ln-1]
			break
		}
	}

	return nil
}

// AddPagetypeidPages adds the given related objects to the existing relationships
// of the page_type, optionally inserting them as new records.
// Appends related to o.R.PagetypeidPages.
// Sets related.R.PagetypeidPageType appropriately.
func (o *PageType) AddPagetypeidPages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Page) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Pagetypeid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"pages\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"pagetypeid"}),
				strmangle.WhereClause("\"", "\"", 2, pagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Pagetypeid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &pageTypeR{
			PagetypeidPages: related,
		}
	} else {
		o.R.PagetypeidPages = append(o.R.PagetypeidPages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pageR{
				PagetypeidPageType: o,
			}
		} else {
			rel.R.PagetypeidPageType = o
		}
	}
	return nil
}

// SetPagetypeidPages removes all previously related items of the
// page_type replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PagetypeidPageType's PagetypeidPages accordingly.
// Replaces o.R.PagetypeidPages with related.
// Sets related.R.PagetypeidPageType's PagetypeidPages accordingly.
func (o *PageType) SetPagetypeidPages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Page) error {
	query := "update \"pages\" set \"pagetypeid\" = null where \"pagetypeid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PagetypeidPages {
			queries.SetScanner(&rel.Pagetypeid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PagetypeidPageType = nil
		}
		o.R.PagetypeidPages = nil
	}

	return o.AddPagetypeidPages(ctx, exec, insert, related...)
}

// RemovePagetypeidPages relationships from objects passed in.
// Removes related items from R.PagetypeidPages (uses pointer comparison, removal does not keep order)
// Sets related.R.PagetypeidPageType.
func (o *PageType) RemovePagetypeidPages(ctx context.Context, exec boil.ContextExecutor, related ...*Page) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Pagetypeid, nil)
		if rel.R != nil {
			rel.R.PagetypeidPageType = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("pagetypeid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PagetypeidPages {
			if rel != ri {
				continue
			}

			ln := len(o.R.PagetypeidPages)
			if ln > 1 && i < ln-1 {
				o.R.PagetypeidPages[i] = o.R.PagetypeidPages[ln-1]
			}
			o.R.PagetypeidPages = o.R.PagetypeidPages[:ln-1]
			break
		}
	}

	return nil
}

// PageTypes retrieves all the records using an executor.
func PageTypes(mods ...qm.QueryMod) pageTypeQuery {
	mods = append(mods, qm.From("\"page_types\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"page_types\".*"})
	}

	return pageTypeQuery{q}
}

// FindPageType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPageType(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PageType, error) {
	pageTypeObj := &PageType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"page_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pageTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from page_types")
	}

	if err = pageTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pageTypeObj, err
	}

	return pageTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PageType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no page_types provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pageTypeInsertCacheMut.RLock()
	cache, cached := pageTypeInsertCache[key]
	pageTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pageTypeAllColumns,
			pageTypeColumnsWithDefault,
			pageTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pageTypeType, pageTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pageTypeType, pageTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"page_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"page_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into page_types")
	}

	if !cached {
		pageTypeInsertCacheMut.Lock()
		pageTypeInsertCache[key] = cache
		pageTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PageType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PageType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pageTypeUpdateCacheMut.RLock()
	cache, cached := pageTypeUpdateCache[key]
	pageTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pageTypeAllColumns,
			pageTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update page_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"page_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pageTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pageTypeType, pageTypeMapping, append(wl, pageTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update page_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for page_types")
	}

	if !cached {
		pageTypeUpdateCacheMut.Lock()
		pageTypeUpdateCache[key] = cache
		pageTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pageTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for page_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for page_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PageTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"page_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pageTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in pageType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all pageType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PageType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no page_types provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pageTypeUpsertCacheMut.RLock()
	cache, cached := pageTypeUpsertCache[key]
	pageTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pageTypeAllColumns,
			pageTypeColumnsWithDefault,
			pageTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pageTypeAllColumns,
			pageTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert page_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pageTypePrimaryKeyColumns))
			copy(conflict, pageTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"page_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pageTypeType, pageTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pageTypeType, pageTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert page_types")
	}

	if !cached {
		pageTypeUpsertCacheMut.Lock()
		pageTypeUpsertCache[key] = cache
		pageTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PageType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PageType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PageType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pageTypePrimaryKeyMapping)
	sql := "DELETE FROM \"page_types\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from page_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for page_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pageTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pageTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from page_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for page_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PageTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pageTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"page_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pageTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pageType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for page_types")
	}

	if len(pageTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PageType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPageType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PageTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pageTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"page_types\".* FROM \"page_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pageTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PageTypeSlice")
	}

	*o = slice

	return nil
}

// PageTypeExists checks if the PageType row exists.
func PageTypeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"page_types\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if page_types exists")
	}

	return exists, nil
}

// Exists checks if the PageType row exists.
func (o *PageType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PageTypeExists(ctx, exec, o.ID)
}
