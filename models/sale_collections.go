// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SaleCollection is an object representing the database table.
type SaleCollection struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Saleid       null.String `boil:"saleid" json:"saleid,omitempty" toml:"saleid" yaml:"saleid,omitempty"`
	Collectionid null.String `boil:"collectionid" json:"collectionid,omitempty" toml:"collectionid" yaml:"collectionid,omitempty"`
	Createat     null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`

	R *saleCollectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L saleCollectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SaleCollectionColumns = struct {
	ID           string
	Saleid       string
	Collectionid string
	Createat     string
}{
	ID:           "id",
	Saleid:       "saleid",
	Collectionid: "collectionid",
	Createat:     "createat",
}

var SaleCollectionTableColumns = struct {
	ID           string
	Saleid       string
	Collectionid string
	Createat     string
}{
	ID:           "sale_collections.id",
	Saleid:       "sale_collections.saleid",
	Collectionid: "sale_collections.collectionid",
	Createat:     "sale_collections.createat",
}

// Generated where

var SaleCollectionWhere = struct {
	ID           whereHelperstring
	Saleid       whereHelpernull_String
	Collectionid whereHelpernull_String
	Createat     whereHelpernull_Int64
}{
	ID:           whereHelperstring{field: "\"sale_collections\".\"id\""},
	Saleid:       whereHelpernull_String{field: "\"sale_collections\".\"saleid\""},
	Collectionid: whereHelpernull_String{field: "\"sale_collections\".\"collectionid\""},
	Createat:     whereHelpernull_Int64{field: "\"sale_collections\".\"createat\""},
}

// SaleCollectionRels is where relationship names are stored.
var SaleCollectionRels = struct {
	CollectionidCollection string
	SaleidSale             string
}{
	CollectionidCollection: "CollectionidCollection",
	SaleidSale:             "SaleidSale",
}

// saleCollectionR is where relationships are stored.
type saleCollectionR struct {
	CollectionidCollection *Collection `boil:"CollectionidCollection" json:"CollectionidCollection" toml:"CollectionidCollection" yaml:"CollectionidCollection"`
	SaleidSale             *Sale       `boil:"SaleidSale" json:"SaleidSale" toml:"SaleidSale" yaml:"SaleidSale"`
}

// NewStruct creates a new relationship struct
func (*saleCollectionR) NewStruct() *saleCollectionR {
	return &saleCollectionR{}
}

func (r *saleCollectionR) GetCollectionidCollection() *Collection {
	if r == nil {
		return nil
	}
	return r.CollectionidCollection
}

func (r *saleCollectionR) GetSaleidSale() *Sale {
	if r == nil {
		return nil
	}
	return r.SaleidSale
}

// saleCollectionL is where Load methods for each relationship are stored.
type saleCollectionL struct{}

var (
	saleCollectionAllColumns            = []string{"id", "saleid", "collectionid", "createat"}
	saleCollectionColumnsWithoutDefault = []string{"id"}
	saleCollectionColumnsWithDefault    = []string{"saleid", "collectionid", "createat"}
	saleCollectionPrimaryKeyColumns     = []string{"id"}
	saleCollectionGeneratedColumns      = []string{}
)

type (
	// SaleCollectionSlice is an alias for a slice of pointers to SaleCollection.
	// This should almost always be used instead of []SaleCollection.
	SaleCollectionSlice []*SaleCollection
	// SaleCollectionHook is the signature for custom SaleCollection hook methods
	SaleCollectionHook func(context.Context, boil.ContextExecutor, *SaleCollection) error

	saleCollectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	saleCollectionType                 = reflect.TypeOf(&SaleCollection{})
	saleCollectionMapping              = queries.MakeStructMapping(saleCollectionType)
	saleCollectionPrimaryKeyMapping, _ = queries.BindMapping(saleCollectionType, saleCollectionMapping, saleCollectionPrimaryKeyColumns)
	saleCollectionInsertCacheMut       sync.RWMutex
	saleCollectionInsertCache          = make(map[string]insertCache)
	saleCollectionUpdateCacheMut       sync.RWMutex
	saleCollectionUpdateCache          = make(map[string]updateCache)
	saleCollectionUpsertCacheMut       sync.RWMutex
	saleCollectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var saleCollectionAfterSelectHooks []SaleCollectionHook

var saleCollectionBeforeInsertHooks []SaleCollectionHook
var saleCollectionAfterInsertHooks []SaleCollectionHook

var saleCollectionBeforeUpdateHooks []SaleCollectionHook
var saleCollectionAfterUpdateHooks []SaleCollectionHook

var saleCollectionBeforeDeleteHooks []SaleCollectionHook
var saleCollectionAfterDeleteHooks []SaleCollectionHook

var saleCollectionBeforeUpsertHooks []SaleCollectionHook
var saleCollectionAfterUpsertHooks []SaleCollectionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SaleCollection) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleCollectionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SaleCollection) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleCollectionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SaleCollection) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleCollectionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SaleCollection) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleCollectionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SaleCollection) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleCollectionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SaleCollection) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleCollectionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SaleCollection) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleCollectionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SaleCollection) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleCollectionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SaleCollection) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleCollectionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSaleCollectionHook registers your hook function for all future operations.
func AddSaleCollectionHook(hookPoint boil.HookPoint, saleCollectionHook SaleCollectionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		saleCollectionAfterSelectHooks = append(saleCollectionAfterSelectHooks, saleCollectionHook)
	case boil.BeforeInsertHook:
		saleCollectionBeforeInsertHooks = append(saleCollectionBeforeInsertHooks, saleCollectionHook)
	case boil.AfterInsertHook:
		saleCollectionAfterInsertHooks = append(saleCollectionAfterInsertHooks, saleCollectionHook)
	case boil.BeforeUpdateHook:
		saleCollectionBeforeUpdateHooks = append(saleCollectionBeforeUpdateHooks, saleCollectionHook)
	case boil.AfterUpdateHook:
		saleCollectionAfterUpdateHooks = append(saleCollectionAfterUpdateHooks, saleCollectionHook)
	case boil.BeforeDeleteHook:
		saleCollectionBeforeDeleteHooks = append(saleCollectionBeforeDeleteHooks, saleCollectionHook)
	case boil.AfterDeleteHook:
		saleCollectionAfterDeleteHooks = append(saleCollectionAfterDeleteHooks, saleCollectionHook)
	case boil.BeforeUpsertHook:
		saleCollectionBeforeUpsertHooks = append(saleCollectionBeforeUpsertHooks, saleCollectionHook)
	case boil.AfterUpsertHook:
		saleCollectionAfterUpsertHooks = append(saleCollectionAfterUpsertHooks, saleCollectionHook)
	}
}

// One returns a single saleCollection record from the query.
func (q saleCollectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SaleCollection, error) {
	o := &SaleCollection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sale_collections")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SaleCollection records from the query.
func (q saleCollectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SaleCollectionSlice, error) {
	var o []*SaleCollection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SaleCollection slice")
	}

	if len(saleCollectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SaleCollection records in the query.
func (q saleCollectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sale_collections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q saleCollectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sale_collections exists")
	}

	return count > 0, nil
}

// CollectionidCollection pointed to by the foreign key.
func (o *SaleCollection) CollectionidCollection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Collectionid),
	}

	queryMods = append(queryMods, mods...)

	return Collections(queryMods...)
}

// SaleidSale pointed to by the foreign key.
func (o *SaleCollection) SaleidSale(mods ...qm.QueryMod) saleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Saleid),
	}

	queryMods = append(queryMods, mods...)

	return Sales(queryMods...)
}

// LoadCollectionidCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleCollectionL) LoadCollectionidCollection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSaleCollection interface{}, mods queries.Applicator) error {
	var slice []*SaleCollection
	var object *SaleCollection

	if singular {
		var ok bool
		object, ok = maybeSaleCollection.(*SaleCollection)
		if !ok {
			object = new(SaleCollection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSaleCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSaleCollection))
			}
		}
	} else {
		s, ok := maybeSaleCollection.(*[]*SaleCollection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSaleCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSaleCollection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleCollectionR{}
		}
		if !queries.IsNil(object.Collectionid) {
			args = append(args, object.Collectionid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleCollectionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Collectionid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Collectionid) {
				args = append(args, obj.Collectionid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(collectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionidCollection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.CollectionidSaleCollections = append(foreign.R.CollectionidSaleCollections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Collectionid, foreign.ID) {
				local.R.CollectionidCollection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.CollectionidSaleCollections = append(foreign.R.CollectionidSaleCollections, local)
				break
			}
		}
	}

	return nil
}

// LoadSaleidSale allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleCollectionL) LoadSaleidSale(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSaleCollection interface{}, mods queries.Applicator) error {
	var slice []*SaleCollection
	var object *SaleCollection

	if singular {
		var ok bool
		object, ok = maybeSaleCollection.(*SaleCollection)
		if !ok {
			object = new(SaleCollection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSaleCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSaleCollection))
			}
		}
	} else {
		s, ok := maybeSaleCollection.(*[]*SaleCollection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSaleCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSaleCollection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleCollectionR{}
		}
		if !queries.IsNil(object.Saleid) {
			args = append(args, object.Saleid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleCollectionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Saleid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Saleid) {
				args = append(args, obj.Saleid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sales`),
		qm.WhereIn(`sales.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Sale")
	}

	var resultSlice []*Sale
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Sale")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sales")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sales")
	}

	if len(saleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SaleidSale = foreign
		if foreign.R == nil {
			foreign.R = &saleR{}
		}
		foreign.R.SaleidSaleCollections = append(foreign.R.SaleidSaleCollections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Saleid, foreign.ID) {
				local.R.SaleidSale = foreign
				if foreign.R == nil {
					foreign.R = &saleR{}
				}
				foreign.R.SaleidSaleCollections = append(foreign.R.SaleidSaleCollections, local)
				break
			}
		}
	}

	return nil
}

// SetCollectionidCollection of the saleCollection to the related item.
// Sets o.R.CollectionidCollection to related.
// Adds o to related.R.CollectionidSaleCollections.
func (o *SaleCollection) SetCollectionidCollection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collectionid"}),
		strmangle.WhereClause("\"", "\"", 2, saleCollectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Collectionid, related.ID)
	if o.R == nil {
		o.R = &saleCollectionR{
			CollectionidCollection: related,
		}
	} else {
		o.R.CollectionidCollection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			CollectionidSaleCollections: SaleCollectionSlice{o},
		}
	} else {
		related.R.CollectionidSaleCollections = append(related.R.CollectionidSaleCollections, o)
	}

	return nil
}

// RemoveCollectionidCollection relationship.
// Sets o.R.CollectionidCollection to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SaleCollection) RemoveCollectionidCollection(ctx context.Context, exec boil.ContextExecutor, related *Collection) error {
	var err error

	queries.SetScanner(&o.Collectionid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("collectionid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CollectionidCollection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CollectionidSaleCollections {
		if queries.Equal(o.Collectionid, ri.Collectionid) {
			continue
		}

		ln := len(related.R.CollectionidSaleCollections)
		if ln > 1 && i < ln-1 {
			related.R.CollectionidSaleCollections[i] = related.R.CollectionidSaleCollections[ln-1]
		}
		related.R.CollectionidSaleCollections = related.R.CollectionidSaleCollections[:ln-1]
		break
	}
	return nil
}

// SetSaleidSale of the saleCollection to the related item.
// Sets o.R.SaleidSale to related.
// Adds o to related.R.SaleidSaleCollections.
func (o *SaleCollection) SetSaleidSale(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Sale) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"saleid"}),
		strmangle.WhereClause("\"", "\"", 2, saleCollectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Saleid, related.ID)
	if o.R == nil {
		o.R = &saleCollectionR{
			SaleidSale: related,
		}
	} else {
		o.R.SaleidSale = related
	}

	if related.R == nil {
		related.R = &saleR{
			SaleidSaleCollections: SaleCollectionSlice{o},
		}
	} else {
		related.R.SaleidSaleCollections = append(related.R.SaleidSaleCollections, o)
	}

	return nil
}

// RemoveSaleidSale relationship.
// Sets o.R.SaleidSale to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SaleCollection) RemoveSaleidSale(ctx context.Context, exec boil.ContextExecutor, related *Sale) error {
	var err error

	queries.SetScanner(&o.Saleid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("saleid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SaleidSale = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SaleidSaleCollections {
		if queries.Equal(o.Saleid, ri.Saleid) {
			continue
		}

		ln := len(related.R.SaleidSaleCollections)
		if ln > 1 && i < ln-1 {
			related.R.SaleidSaleCollections[i] = related.R.SaleidSaleCollections[ln-1]
		}
		related.R.SaleidSaleCollections = related.R.SaleidSaleCollections[:ln-1]
		break
	}
	return nil
}

// SaleCollections retrieves all the records using an executor.
func SaleCollections(mods ...qm.QueryMod) saleCollectionQuery {
	mods = append(mods, qm.From("\"sale_collections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sale_collections\".*"})
	}

	return saleCollectionQuery{q}
}

// FindSaleCollection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSaleCollection(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SaleCollection, error) {
	saleCollectionObj := &SaleCollection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale_collections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, saleCollectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sale_collections")
	}

	if err = saleCollectionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return saleCollectionObj, err
	}

	return saleCollectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SaleCollection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sale_collections provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(saleCollectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	saleCollectionInsertCacheMut.RLock()
	cache, cached := saleCollectionInsertCache[key]
	saleCollectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			saleCollectionAllColumns,
			saleCollectionColumnsWithDefault,
			saleCollectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(saleCollectionType, saleCollectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(saleCollectionType, saleCollectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale_collections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale_collections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sale_collections")
	}

	if !cached {
		saleCollectionInsertCacheMut.Lock()
		saleCollectionInsertCache[key] = cache
		saleCollectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SaleCollection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SaleCollection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	saleCollectionUpdateCacheMut.RLock()
	cache, cached := saleCollectionUpdateCache[key]
	saleCollectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			saleCollectionAllColumns,
			saleCollectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sale_collections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale_collections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, saleCollectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(saleCollectionType, saleCollectionMapping, append(wl, saleCollectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sale_collections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sale_collections")
	}

	if !cached {
		saleCollectionUpdateCacheMut.Lock()
		saleCollectionUpdateCache[key] = cache
		saleCollectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q saleCollectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sale_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sale_collections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SaleCollectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, saleCollectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in saleCollection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all saleCollection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SaleCollection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sale_collections provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(saleCollectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	saleCollectionUpsertCacheMut.RLock()
	cache, cached := saleCollectionUpsertCache[key]
	saleCollectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			saleCollectionAllColumns,
			saleCollectionColumnsWithDefault,
			saleCollectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			saleCollectionAllColumns,
			saleCollectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sale_collections, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(saleCollectionPrimaryKeyColumns))
			copy(conflict, saleCollectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale_collections\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(saleCollectionType, saleCollectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(saleCollectionType, saleCollectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sale_collections")
	}

	if !cached {
		saleCollectionUpsertCacheMut.Lock()
		saleCollectionUpsertCache[key] = cache
		saleCollectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SaleCollection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SaleCollection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SaleCollection provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), saleCollectionPrimaryKeyMapping)
	sql := "DELETE FROM \"sale_collections\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sale_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sale_collections")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q saleCollectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no saleCollectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sale_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sale_collections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SaleCollectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(saleCollectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale_collections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, saleCollectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from saleCollection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sale_collections")
	}

	if len(saleCollectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SaleCollection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSaleCollection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SaleCollectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SaleCollectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale_collections\".* FROM \"sale_collections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, saleCollectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SaleCollectionSlice")
	}

	*o = slice

	return nil
}

// SaleCollectionExists checks if the SaleCollection row exists.
func SaleCollectionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale_collections\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sale_collections exists")
	}

	return exists, nil
}

// Exists checks if the SaleCollection row exists.
func (o *SaleCollection) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SaleCollectionExists(ctx, exec, o.ID)
}
