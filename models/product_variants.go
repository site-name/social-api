// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductVariant is an object representing the database table.
type ProductVariant struct {
	ID                      string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                    null.String  `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Productid               null.String  `boil:"productid" json:"productid,omitempty" toml:"productid" yaml:"productid,omitempty"`
	Sku                     null.String  `boil:"sku" json:"sku,omitempty" toml:"sku" yaml:"sku,omitempty"`
	Weight                  null.Float32 `boil:"weight" json:"weight,omitempty" toml:"weight" yaml:"weight,omitempty"`
	Weightunit              null.String  `boil:"weightunit" json:"weightunit,omitempty" toml:"weightunit" yaml:"weightunit,omitempty"`
	Trackinventory          null.Bool    `boil:"trackinventory" json:"trackinventory,omitempty" toml:"trackinventory" yaml:"trackinventory,omitempty"`
	Ispreorder              null.Bool    `boil:"ispreorder" json:"ispreorder,omitempty" toml:"ispreorder" yaml:"ispreorder,omitempty"`
	Preorderenddate         null.Int64   `boil:"preorderenddate" json:"preorderenddate,omitempty" toml:"preorderenddate" yaml:"preorderenddate,omitempty"`
	Preorderglobalthreshold null.Int     `boil:"preorderglobalthreshold" json:"preorderglobalthreshold,omitempty" toml:"preorderglobalthreshold" yaml:"preorderglobalthreshold,omitempty"`
	Sortorder               null.Int     `boil:"sortorder" json:"sortorder,omitempty" toml:"sortorder" yaml:"sortorder,omitempty"`
	Metadata                null.JSON    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata         null.JSON    `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *productVariantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productVariantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductVariantColumns = struct {
	ID                      string
	Name                    string
	Productid               string
	Sku                     string
	Weight                  string
	Weightunit              string
	Trackinventory          string
	Ispreorder              string
	Preorderenddate         string
	Preorderglobalthreshold string
	Sortorder               string
	Metadata                string
	Privatemetadata         string
}{
	ID:                      "id",
	Name:                    "name",
	Productid:               "productid",
	Sku:                     "sku",
	Weight:                  "weight",
	Weightunit:              "weightunit",
	Trackinventory:          "trackinventory",
	Ispreorder:              "ispreorder",
	Preorderenddate:         "preorderenddate",
	Preorderglobalthreshold: "preorderglobalthreshold",
	Sortorder:               "sortorder",
	Metadata:                "metadata",
	Privatemetadata:         "privatemetadata",
}

var ProductVariantTableColumns = struct {
	ID                      string
	Name                    string
	Productid               string
	Sku                     string
	Weight                  string
	Weightunit              string
	Trackinventory          string
	Ispreorder              string
	Preorderenddate         string
	Preorderglobalthreshold string
	Sortorder               string
	Metadata                string
	Privatemetadata         string
}{
	ID:                      "product_variants.id",
	Name:                    "product_variants.name",
	Productid:               "product_variants.productid",
	Sku:                     "product_variants.sku",
	Weight:                  "product_variants.weight",
	Weightunit:              "product_variants.weightunit",
	Trackinventory:          "product_variants.trackinventory",
	Ispreorder:              "product_variants.ispreorder",
	Preorderenddate:         "product_variants.preorderenddate",
	Preorderglobalthreshold: "product_variants.preorderglobalthreshold",
	Sortorder:               "product_variants.sortorder",
	Metadata:                "product_variants.metadata",
	Privatemetadata:         "product_variants.privatemetadata",
}

// Generated where

var ProductVariantWhere = struct {
	ID                      whereHelperstring
	Name                    whereHelpernull_String
	Productid               whereHelpernull_String
	Sku                     whereHelpernull_String
	Weight                  whereHelpernull_Float32
	Weightunit              whereHelpernull_String
	Trackinventory          whereHelpernull_Bool
	Ispreorder              whereHelpernull_Bool
	Preorderenddate         whereHelpernull_Int64
	Preorderglobalthreshold whereHelpernull_Int
	Sortorder               whereHelpernull_Int
	Metadata                whereHelpernull_JSON
	Privatemetadata         whereHelpernull_JSON
}{
	ID:                      whereHelperstring{field: "\"product_variants\".\"id\""},
	Name:                    whereHelpernull_String{field: "\"product_variants\".\"name\""},
	Productid:               whereHelpernull_String{field: "\"product_variants\".\"productid\""},
	Sku:                     whereHelpernull_String{field: "\"product_variants\".\"sku\""},
	Weight:                  whereHelpernull_Float32{field: "\"product_variants\".\"weight\""},
	Weightunit:              whereHelpernull_String{field: "\"product_variants\".\"weightunit\""},
	Trackinventory:          whereHelpernull_Bool{field: "\"product_variants\".\"trackinventory\""},
	Ispreorder:              whereHelpernull_Bool{field: "\"product_variants\".\"ispreorder\""},
	Preorderenddate:         whereHelpernull_Int64{field: "\"product_variants\".\"preorderenddate\""},
	Preorderglobalthreshold: whereHelpernull_Int{field: "\"product_variants\".\"preorderglobalthreshold\""},
	Sortorder:               whereHelpernull_Int{field: "\"product_variants\".\"sortorder\""},
	Metadata:                whereHelpernull_JSON{field: "\"product_variants\".\"metadata\""},
	Privatemetadata:         whereHelpernull_JSON{field: "\"product_variants\".\"privatemetadata\""},
}

// ProductVariantRels is where relationship names are stored.
var ProductVariantRels = struct {
	ProductidProduct                            string
	VariantidAssignedVariantAttributes          string
	VariantidCheckoutLines                      string
	ProductvariantidDigitalContents             string
	VariantidOrderLines                         string
	VariantidProductVariantChannelListings      string
	ProductvariantidProductVariantTranslations  string
	ProductvariantidStocks                      string
	VariantidVariantMedia                       string
	ProductvariantidWishlistItemProductVariants string
	ProductidWishlistItems                      string
}{
	ProductidProduct:                            "ProductidProduct",
	VariantidAssignedVariantAttributes:          "VariantidAssignedVariantAttributes",
	VariantidCheckoutLines:                      "VariantidCheckoutLines",
	ProductvariantidDigitalContents:             "ProductvariantidDigitalContents",
	VariantidOrderLines:                         "VariantidOrderLines",
	VariantidProductVariantChannelListings:      "VariantidProductVariantChannelListings",
	ProductvariantidProductVariantTranslations:  "ProductvariantidProductVariantTranslations",
	ProductvariantidStocks:                      "ProductvariantidStocks",
	VariantidVariantMedia:                       "VariantidVariantMedia",
	ProductvariantidWishlistItemProductVariants: "ProductvariantidWishlistItemProductVariants",
	ProductidWishlistItems:                      "ProductidWishlistItems",
}

// productVariantR is where relationships are stored.
type productVariantR struct {
	ProductidProduct                            *Product                          `boil:"ProductidProduct" json:"ProductidProduct" toml:"ProductidProduct" yaml:"ProductidProduct"`
	VariantidAssignedVariantAttributes          AssignedVariantAttributeSlice     `boil:"VariantidAssignedVariantAttributes" json:"VariantidAssignedVariantAttributes" toml:"VariantidAssignedVariantAttributes" yaml:"VariantidAssignedVariantAttributes"`
	VariantidCheckoutLines                      CheckoutLineSlice                 `boil:"VariantidCheckoutLines" json:"VariantidCheckoutLines" toml:"VariantidCheckoutLines" yaml:"VariantidCheckoutLines"`
	ProductvariantidDigitalContents             DigitalContentSlice               `boil:"ProductvariantidDigitalContents" json:"ProductvariantidDigitalContents" toml:"ProductvariantidDigitalContents" yaml:"ProductvariantidDigitalContents"`
	VariantidOrderLines                         OrderLineSlice                    `boil:"VariantidOrderLines" json:"VariantidOrderLines" toml:"VariantidOrderLines" yaml:"VariantidOrderLines"`
	VariantidProductVariantChannelListings      ProductVariantChannelListingSlice `boil:"VariantidProductVariantChannelListings" json:"VariantidProductVariantChannelListings" toml:"VariantidProductVariantChannelListings" yaml:"VariantidProductVariantChannelListings"`
	ProductvariantidProductVariantTranslations  ProductVariantTranslationSlice    `boil:"ProductvariantidProductVariantTranslations" json:"ProductvariantidProductVariantTranslations" toml:"ProductvariantidProductVariantTranslations" yaml:"ProductvariantidProductVariantTranslations"`
	ProductvariantidStocks                      StockSlice                        `boil:"ProductvariantidStocks" json:"ProductvariantidStocks" toml:"ProductvariantidStocks" yaml:"ProductvariantidStocks"`
	VariantidVariantMedia                       VariantMediumSlice                `boil:"VariantidVariantMedia" json:"VariantidVariantMedia" toml:"VariantidVariantMedia" yaml:"VariantidVariantMedia"`
	ProductvariantidWishlistItemProductVariants WishlistItemProductVariantSlice   `boil:"ProductvariantidWishlistItemProductVariants" json:"ProductvariantidWishlistItemProductVariants" toml:"ProductvariantidWishlistItemProductVariants" yaml:"ProductvariantidWishlistItemProductVariants"`
	ProductidWishlistItems                      WishlistItemSlice                 `boil:"ProductidWishlistItems" json:"ProductidWishlistItems" toml:"ProductidWishlistItems" yaml:"ProductidWishlistItems"`
}

// NewStruct creates a new relationship struct
func (*productVariantR) NewStruct() *productVariantR {
	return &productVariantR{}
}

func (r *productVariantR) GetProductidProduct() *Product {
	if r == nil {
		return nil
	}
	return r.ProductidProduct
}

func (r *productVariantR) GetVariantidAssignedVariantAttributes() AssignedVariantAttributeSlice {
	if r == nil {
		return nil
	}
	return r.VariantidAssignedVariantAttributes
}

func (r *productVariantR) GetVariantidCheckoutLines() CheckoutLineSlice {
	if r == nil {
		return nil
	}
	return r.VariantidCheckoutLines
}

func (r *productVariantR) GetProductvariantidDigitalContents() DigitalContentSlice {
	if r == nil {
		return nil
	}
	return r.ProductvariantidDigitalContents
}

func (r *productVariantR) GetVariantidOrderLines() OrderLineSlice {
	if r == nil {
		return nil
	}
	return r.VariantidOrderLines
}

func (r *productVariantR) GetVariantidProductVariantChannelListings() ProductVariantChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.VariantidProductVariantChannelListings
}

func (r *productVariantR) GetProductvariantidProductVariantTranslations() ProductVariantTranslationSlice {
	if r == nil {
		return nil
	}
	return r.ProductvariantidProductVariantTranslations
}

func (r *productVariantR) GetProductvariantidStocks() StockSlice {
	if r == nil {
		return nil
	}
	return r.ProductvariantidStocks
}

func (r *productVariantR) GetVariantidVariantMedia() VariantMediumSlice {
	if r == nil {
		return nil
	}
	return r.VariantidVariantMedia
}

func (r *productVariantR) GetProductvariantidWishlistItemProductVariants() WishlistItemProductVariantSlice {
	if r == nil {
		return nil
	}
	return r.ProductvariantidWishlistItemProductVariants
}

func (r *productVariantR) GetProductidWishlistItems() WishlistItemSlice {
	if r == nil {
		return nil
	}
	return r.ProductidWishlistItems
}

// productVariantL is where Load methods for each relationship are stored.
type productVariantL struct{}

var (
	productVariantAllColumns            = []string{"id", "name", "productid", "sku", "weight", "weightunit", "trackinventory", "ispreorder", "preorderenddate", "preorderglobalthreshold", "sortorder", "metadata", "privatemetadata"}
	productVariantColumnsWithoutDefault = []string{"id"}
	productVariantColumnsWithDefault    = []string{"name", "productid", "sku", "weight", "weightunit", "trackinventory", "ispreorder", "preorderenddate", "preorderglobalthreshold", "sortorder", "metadata", "privatemetadata"}
	productVariantPrimaryKeyColumns     = []string{"id"}
	productVariantGeneratedColumns      = []string{}
)

type (
	// ProductVariantSlice is an alias for a slice of pointers to ProductVariant.
	// This should almost always be used instead of []ProductVariant.
	ProductVariantSlice []*ProductVariant
	// ProductVariantHook is the signature for custom ProductVariant hook methods
	ProductVariantHook func(context.Context, boil.ContextExecutor, *ProductVariant) error

	productVariantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productVariantType                 = reflect.TypeOf(&ProductVariant{})
	productVariantMapping              = queries.MakeStructMapping(productVariantType)
	productVariantPrimaryKeyMapping, _ = queries.BindMapping(productVariantType, productVariantMapping, productVariantPrimaryKeyColumns)
	productVariantInsertCacheMut       sync.RWMutex
	productVariantInsertCache          = make(map[string]insertCache)
	productVariantUpdateCacheMut       sync.RWMutex
	productVariantUpdateCache          = make(map[string]updateCache)
	productVariantUpsertCacheMut       sync.RWMutex
	productVariantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productVariantAfterSelectHooks []ProductVariantHook

var productVariantBeforeInsertHooks []ProductVariantHook
var productVariantAfterInsertHooks []ProductVariantHook

var productVariantBeforeUpdateHooks []ProductVariantHook
var productVariantAfterUpdateHooks []ProductVariantHook

var productVariantBeforeDeleteHooks []ProductVariantHook
var productVariantAfterDeleteHooks []ProductVariantHook

var productVariantBeforeUpsertHooks []ProductVariantHook
var productVariantAfterUpsertHooks []ProductVariantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductVariant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productVariantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductVariant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productVariantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductVariant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productVariantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductVariant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productVariantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductVariant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productVariantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductVariant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productVariantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductVariant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productVariantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductVariant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productVariantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductVariant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productVariantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductVariantHook registers your hook function for all future operations.
func AddProductVariantHook(hookPoint boil.HookPoint, productVariantHook ProductVariantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productVariantAfterSelectHooks = append(productVariantAfterSelectHooks, productVariantHook)
	case boil.BeforeInsertHook:
		productVariantBeforeInsertHooks = append(productVariantBeforeInsertHooks, productVariantHook)
	case boil.AfterInsertHook:
		productVariantAfterInsertHooks = append(productVariantAfterInsertHooks, productVariantHook)
	case boil.BeforeUpdateHook:
		productVariantBeforeUpdateHooks = append(productVariantBeforeUpdateHooks, productVariantHook)
	case boil.AfterUpdateHook:
		productVariantAfterUpdateHooks = append(productVariantAfterUpdateHooks, productVariantHook)
	case boil.BeforeDeleteHook:
		productVariantBeforeDeleteHooks = append(productVariantBeforeDeleteHooks, productVariantHook)
	case boil.AfterDeleteHook:
		productVariantAfterDeleteHooks = append(productVariantAfterDeleteHooks, productVariantHook)
	case boil.BeforeUpsertHook:
		productVariantBeforeUpsertHooks = append(productVariantBeforeUpsertHooks, productVariantHook)
	case boil.AfterUpsertHook:
		productVariantAfterUpsertHooks = append(productVariantAfterUpsertHooks, productVariantHook)
	}
}

// One returns a single productVariant record from the query.
func (q productVariantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductVariant, error) {
	o := &ProductVariant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_variants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductVariant records from the query.
func (q productVariantQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductVariantSlice, error) {
	var o []*ProductVariant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductVariant slice")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductVariant records in the query.
func (q productVariantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_variants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productVariantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_variants exists")
	}

	return count > 0, nil
}

// ProductidProduct pointed to by the foreign key.
func (o *ProductVariant) ProductidProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Productid),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// VariantidAssignedVariantAttributes retrieves all the assigned_variant_attribute's AssignedVariantAttributes with an executor via variantid column.
func (o *ProductVariant) VariantidAssignedVariantAttributes(mods ...qm.QueryMod) assignedVariantAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_variant_attributes\".\"variantid\"=?", o.ID),
	)

	return AssignedVariantAttributes(queryMods...)
}

// VariantidCheckoutLines retrieves all the checkout_line's CheckoutLines with an executor via variantid column.
func (o *ProductVariant) VariantidCheckoutLines(mods ...qm.QueryMod) checkoutLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkout_lines\".\"variantid\"=?", o.ID),
	)

	return CheckoutLines(queryMods...)
}

// ProductvariantidDigitalContents retrieves all the digital_content's DigitalContents with an executor via productvariantid column.
func (o *ProductVariant) ProductvariantidDigitalContents(mods ...qm.QueryMod) digitalContentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"digital_contents\".\"productvariantid\"=?", o.ID),
	)

	return DigitalContents(queryMods...)
}

// VariantidOrderLines retrieves all the order_line's OrderLines with an executor via variantid column.
func (o *ProductVariant) VariantidOrderLines(mods ...qm.QueryMod) orderLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_lines\".\"variantid\"=?", o.ID),
	)

	return OrderLines(queryMods...)
}

// VariantidProductVariantChannelListings retrieves all the product_variant_channel_listing's ProductVariantChannelListings with an executor via variantid column.
func (o *ProductVariant) VariantidProductVariantChannelListings(mods ...qm.QueryMod) productVariantChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_variant_channel_listings\".\"variantid\"=?", o.ID),
	)

	return ProductVariantChannelListings(queryMods...)
}

// ProductvariantidProductVariantTranslations retrieves all the product_variant_translation's ProductVariantTranslations with an executor via productvariantid column.
func (o *ProductVariant) ProductvariantidProductVariantTranslations(mods ...qm.QueryMod) productVariantTranslationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_variant_translations\".\"productvariantid\"=?", o.ID),
	)

	return ProductVariantTranslations(queryMods...)
}

// ProductvariantidStocks retrieves all the stock's Stocks with an executor via productvariantid column.
func (o *ProductVariant) ProductvariantidStocks(mods ...qm.QueryMod) stockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stocks\".\"productvariantid\"=?", o.ID),
	)

	return Stocks(queryMods...)
}

// VariantidVariantMedia retrieves all the variant_medium's VariantMedia with an executor via variantid column.
func (o *ProductVariant) VariantidVariantMedia(mods ...qm.QueryMod) variantMediumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"variant_media\".\"variantid\"=?", o.ID),
	)

	return VariantMedia(queryMods...)
}

// ProductvariantidWishlistItemProductVariants retrieves all the wishlist_item_product_variant's WishlistItemProductVariants with an executor via productvariantid column.
func (o *ProductVariant) ProductvariantidWishlistItemProductVariants(mods ...qm.QueryMod) wishlistItemProductVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"wishlist_item_product_variants\".\"productvariantid\"=?", o.ID),
	)

	return WishlistItemProductVariants(queryMods...)
}

// ProductidWishlistItems retrieves all the wishlist_item's WishlistItems with an executor via productid column.
func (o *ProductVariant) ProductidWishlistItems(mods ...qm.QueryMod) wishlistItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"wishlist_items\".\"productid\"=?", o.ID),
	)

	return WishlistItems(queryMods...)
}

// LoadProductidProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productVariantL) LoadProductidProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		if !queries.IsNil(object.Productid) {
			args = append(args, object.Productid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Productid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Productid) {
				args = append(args, obj.Productid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductidProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductidProductVariants = append(foreign.R.ProductidProductVariants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Productid, foreign.ID) {
				local.R.ProductidProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductidProductVariants = append(foreign.R.ProductidProductVariants, local)
				break
			}
		}
	}

	return nil
}

// LoadVariantidAssignedVariantAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productVariantL) LoadVariantidAssignedVariantAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_variant_attributes`),
		qm.WhereIn(`assigned_variant_attributes.variantid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_variant_attributes")
	}

	var resultSlice []*AssignedVariantAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_variant_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_variant_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_variant_attributes")
	}

	if len(assignedVariantAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VariantidAssignedVariantAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedVariantAttributeR{}
			}
			foreign.R.VariantidProductVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Variantid) {
				local.R.VariantidAssignedVariantAttributes = append(local.R.VariantidAssignedVariantAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &assignedVariantAttributeR{}
				}
				foreign.R.VariantidProductVariant = local
				break
			}
		}
	}

	return nil
}

// LoadVariantidCheckoutLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productVariantL) LoadVariantidCheckoutLines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkout_lines`),
		qm.WhereIn(`checkout_lines.variantid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkout_lines")
	}

	var resultSlice []*CheckoutLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkout_lines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkout_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkout_lines")
	}

	if len(checkoutLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VariantidCheckoutLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutLineR{}
			}
			foreign.R.VariantidProductVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Variantid) {
				local.R.VariantidCheckoutLines = append(local.R.VariantidCheckoutLines, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutLineR{}
				}
				foreign.R.VariantidProductVariant = local
				break
			}
		}
	}

	return nil
}

// LoadProductvariantidDigitalContents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productVariantL) LoadProductvariantidDigitalContents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`digital_contents`),
		qm.WhereIn(`digital_contents.productvariantid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load digital_contents")
	}

	var resultSlice []*DigitalContent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice digital_contents")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on digital_contents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for digital_contents")
	}

	if len(digitalContentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductvariantidDigitalContents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &digitalContentR{}
			}
			foreign.R.ProductvariantidProductVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productvariantid) {
				local.R.ProductvariantidDigitalContents = append(local.R.ProductvariantidDigitalContents, foreign)
				if foreign.R == nil {
					foreign.R = &digitalContentR{}
				}
				foreign.R.ProductvariantidProductVariant = local
				break
			}
		}
	}

	return nil
}

// LoadVariantidOrderLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productVariantL) LoadVariantidOrderLines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_lines`),
		qm.WhereIn(`order_lines.variantid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_lines")
	}

	var resultSlice []*OrderLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_lines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_lines")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VariantidOrderLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderLineR{}
			}
			foreign.R.VariantidProductVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Variantid) {
				local.R.VariantidOrderLines = append(local.R.VariantidOrderLines, foreign)
				if foreign.R == nil {
					foreign.R = &orderLineR{}
				}
				foreign.R.VariantidProductVariant = local
				break
			}
		}
	}

	return nil
}

// LoadVariantidProductVariantChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productVariantL) LoadVariantidProductVariantChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variant_channel_listings`),
		qm.WhereIn(`product_variant_channel_listings.variantid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_variant_channel_listings")
	}

	var resultSlice []*ProductVariantChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_variant_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_variant_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variant_channel_listings")
	}

	if len(productVariantChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VariantidProductVariantChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productVariantChannelListingR{}
			}
			foreign.R.VariantidProductVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Variantid {
				local.R.VariantidProductVariantChannelListings = append(local.R.VariantidProductVariantChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &productVariantChannelListingR{}
				}
				foreign.R.VariantidProductVariant = local
				break
			}
		}
	}

	return nil
}

// LoadProductvariantidProductVariantTranslations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productVariantL) LoadProductvariantidProductVariantTranslations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variant_translations`),
		qm.WhereIn(`product_variant_translations.productvariantid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_variant_translations")
	}

	var resultSlice []*ProductVariantTranslation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_variant_translations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_variant_translations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variant_translations")
	}

	if len(productVariantTranslationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductvariantidProductVariantTranslations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productVariantTranslationR{}
			}
			foreign.R.ProductvariantidProductVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productvariantid) {
				local.R.ProductvariantidProductVariantTranslations = append(local.R.ProductvariantidProductVariantTranslations, foreign)
				if foreign.R == nil {
					foreign.R = &productVariantTranslationR{}
				}
				foreign.R.ProductvariantidProductVariant = local
				break
			}
		}
	}

	return nil
}

// LoadProductvariantidStocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productVariantL) LoadProductvariantidStocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stocks`),
		qm.WhereIn(`stocks.productvariantid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stocks")
	}

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stocks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stocks")
	}

	if len(stockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductvariantidStocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockR{}
			}
			foreign.R.ProductvariantidProductVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productvariantid) {
				local.R.ProductvariantidStocks = append(local.R.ProductvariantidStocks, foreign)
				if foreign.R == nil {
					foreign.R = &stockR{}
				}
				foreign.R.ProductvariantidProductVariant = local
				break
			}
		}
	}

	return nil
}

// LoadVariantidVariantMedia allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productVariantL) LoadVariantidVariantMedia(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`variant_media`),
		qm.WhereIn(`variant_media.variantid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load variant_media")
	}

	var resultSlice []*VariantMedium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice variant_media")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on variant_media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for variant_media")
	}

	if len(variantMediumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VariantidVariantMedia = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &variantMediumR{}
			}
			foreign.R.VariantidProductVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Variantid) {
				local.R.VariantidVariantMedia = append(local.R.VariantidVariantMedia, foreign)
				if foreign.R == nil {
					foreign.R = &variantMediumR{}
				}
				foreign.R.VariantidProductVariant = local
				break
			}
		}
	}

	return nil
}

// LoadProductvariantidWishlistItemProductVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productVariantL) LoadProductvariantidWishlistItemProductVariants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`wishlist_item_product_variants`),
		qm.WhereIn(`wishlist_item_product_variants.productvariantid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load wishlist_item_product_variants")
	}

	var resultSlice []*WishlistItemProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice wishlist_item_product_variants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on wishlist_item_product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for wishlist_item_product_variants")
	}

	if len(wishlistItemProductVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductvariantidWishlistItemProductVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &wishlistItemProductVariantR{}
			}
			foreign.R.ProductvariantidProductVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productvariantid) {
				local.R.ProductvariantidWishlistItemProductVariants = append(local.R.ProductvariantidWishlistItemProductVariants, foreign)
				if foreign.R == nil {
					foreign.R = &wishlistItemProductVariantR{}
				}
				foreign.R.ProductvariantidProductVariant = local
				break
			}
		}
	}

	return nil
}

// LoadProductidWishlistItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productVariantL) LoadProductidWishlistItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductVariant interface{}, mods queries.Applicator) error {
	var slice []*ProductVariant
	var object *ProductVariant

	if singular {
		var ok bool
		object, ok = maybeProductVariant.(*ProductVariant)
		if !ok {
			object = new(ProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductVariant))
			}
		}
	} else {
		s, ok := maybeProductVariant.(*[]*ProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`wishlist_items`),
		qm.WhereIn(`wishlist_items.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load wishlist_items")
	}

	var resultSlice []*WishlistItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice wishlist_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on wishlist_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for wishlist_items")
	}

	if len(wishlistItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidWishlistItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &wishlistItemR{}
			}
			foreign.R.ProductidProductVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidWishlistItems = append(local.R.ProductidWishlistItems, foreign)
				if foreign.R == nil {
					foreign.R = &wishlistItemR{}
				}
				foreign.R.ProductidProductVariant = local
				break
			}
		}
	}

	return nil
}

// SetProductidProduct of the productVariant to the related item.
// Sets o.R.ProductidProduct to related.
// Adds o to related.R.ProductidProductVariants.
func (o *ProductVariant) SetProductidProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
		strmangle.WhereClause("\"", "\"", 2, productVariantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Productid, related.ID)
	if o.R == nil {
		o.R = &productVariantR{
			ProductidProduct: related,
		}
	} else {
		o.R.ProductidProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductidProductVariants: ProductVariantSlice{o},
		}
	} else {
		related.R.ProductidProductVariants = append(related.R.ProductidProductVariants, o)
	}

	return nil
}

// RemoveProductidProduct relationship.
// Sets o.R.ProductidProduct to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductVariant) RemoveProductidProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.Productid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductidProduct = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductidProductVariants {
		if queries.Equal(o.Productid, ri.Productid) {
			continue
		}

		ln := len(related.R.ProductidProductVariants)
		if ln > 1 && i < ln-1 {
			related.R.ProductidProductVariants[i] = related.R.ProductidProductVariants[ln-1]
		}
		related.R.ProductidProductVariants = related.R.ProductidProductVariants[:ln-1]
		break
	}
	return nil
}

// AddVariantidAssignedVariantAttributes adds the given related objects to the existing relationships
// of the product_variant, optionally inserting them as new records.
// Appends related to o.R.VariantidAssignedVariantAttributes.
// Sets related.R.VariantidProductVariant appropriately.
func (o *ProductVariant) AddVariantidAssignedVariantAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedVariantAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Variantid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_variant_attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"variantid"}),
				strmangle.WhereClause("\"", "\"", 2, assignedVariantAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Variantid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productVariantR{
			VariantidAssignedVariantAttributes: related,
		}
	} else {
		o.R.VariantidAssignedVariantAttributes = append(o.R.VariantidAssignedVariantAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedVariantAttributeR{
				VariantidProductVariant: o,
			}
		} else {
			rel.R.VariantidProductVariant = o
		}
	}
	return nil
}

// SetVariantidAssignedVariantAttributes removes all previously related items of the
// product_variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VariantidProductVariant's VariantidAssignedVariantAttributes accordingly.
// Replaces o.R.VariantidAssignedVariantAttributes with related.
// Sets related.R.VariantidProductVariant's VariantidAssignedVariantAttributes accordingly.
func (o *ProductVariant) SetVariantidAssignedVariantAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedVariantAttribute) error {
	query := "update \"assigned_variant_attributes\" set \"variantid\" = null where \"variantid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VariantidAssignedVariantAttributes {
			queries.SetScanner(&rel.Variantid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VariantidProductVariant = nil
		}
		o.R.VariantidAssignedVariantAttributes = nil
	}

	return o.AddVariantidAssignedVariantAttributes(ctx, exec, insert, related...)
}

// RemoveVariantidAssignedVariantAttributes relationships from objects passed in.
// Removes related items from R.VariantidAssignedVariantAttributes (uses pointer comparison, removal does not keep order)
// Sets related.R.VariantidProductVariant.
func (o *ProductVariant) RemoveVariantidAssignedVariantAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*AssignedVariantAttribute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Variantid, nil)
		if rel.R != nil {
			rel.R.VariantidProductVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("variantid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VariantidAssignedVariantAttributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.VariantidAssignedVariantAttributes)
			if ln > 1 && i < ln-1 {
				o.R.VariantidAssignedVariantAttributes[i] = o.R.VariantidAssignedVariantAttributes[ln-1]
			}
			o.R.VariantidAssignedVariantAttributes = o.R.VariantidAssignedVariantAttributes[:ln-1]
			break
		}
	}

	return nil
}

// AddVariantidCheckoutLines adds the given related objects to the existing relationships
// of the product_variant, optionally inserting them as new records.
// Appends related to o.R.VariantidCheckoutLines.
// Sets related.R.VariantidProductVariant appropriately.
func (o *ProductVariant) AddVariantidCheckoutLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckoutLine) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Variantid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkout_lines\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"variantid"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutLinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Variantid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productVariantR{
			VariantidCheckoutLines: related,
		}
	} else {
		o.R.VariantidCheckoutLines = append(o.R.VariantidCheckoutLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutLineR{
				VariantidProductVariant: o,
			}
		} else {
			rel.R.VariantidProductVariant = o
		}
	}
	return nil
}

// SetVariantidCheckoutLines removes all previously related items of the
// product_variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VariantidProductVariant's VariantidCheckoutLines accordingly.
// Replaces o.R.VariantidCheckoutLines with related.
// Sets related.R.VariantidProductVariant's VariantidCheckoutLines accordingly.
func (o *ProductVariant) SetVariantidCheckoutLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckoutLine) error {
	query := "update \"checkout_lines\" set \"variantid\" = null where \"variantid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VariantidCheckoutLines {
			queries.SetScanner(&rel.Variantid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VariantidProductVariant = nil
		}
		o.R.VariantidCheckoutLines = nil
	}

	return o.AddVariantidCheckoutLines(ctx, exec, insert, related...)
}

// RemoveVariantidCheckoutLines relationships from objects passed in.
// Removes related items from R.VariantidCheckoutLines (uses pointer comparison, removal does not keep order)
// Sets related.R.VariantidProductVariant.
func (o *ProductVariant) RemoveVariantidCheckoutLines(ctx context.Context, exec boil.ContextExecutor, related ...*CheckoutLine) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Variantid, nil)
		if rel.R != nil {
			rel.R.VariantidProductVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("variantid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VariantidCheckoutLines {
			if rel != ri {
				continue
			}

			ln := len(o.R.VariantidCheckoutLines)
			if ln > 1 && i < ln-1 {
				o.R.VariantidCheckoutLines[i] = o.R.VariantidCheckoutLines[ln-1]
			}
			o.R.VariantidCheckoutLines = o.R.VariantidCheckoutLines[:ln-1]
			break
		}
	}

	return nil
}

// AddProductvariantidDigitalContents adds the given related objects to the existing relationships
// of the product_variant, optionally inserting them as new records.
// Appends related to o.R.ProductvariantidDigitalContents.
// Sets related.R.ProductvariantidProductVariant appropriately.
func (o *ProductVariant) AddProductvariantidDigitalContents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DigitalContent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productvariantid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"digital_contents\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productvariantid"}),
				strmangle.WhereClause("\"", "\"", 2, digitalContentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productvariantid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productVariantR{
			ProductvariantidDigitalContents: related,
		}
	} else {
		o.R.ProductvariantidDigitalContents = append(o.R.ProductvariantidDigitalContents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &digitalContentR{
				ProductvariantidProductVariant: o,
			}
		} else {
			rel.R.ProductvariantidProductVariant = o
		}
	}
	return nil
}

// SetProductvariantidDigitalContents removes all previously related items of the
// product_variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductvariantidProductVariant's ProductvariantidDigitalContents accordingly.
// Replaces o.R.ProductvariantidDigitalContents with related.
// Sets related.R.ProductvariantidProductVariant's ProductvariantidDigitalContents accordingly.
func (o *ProductVariant) SetProductvariantidDigitalContents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DigitalContent) error {
	query := "update \"digital_contents\" set \"productvariantid\" = null where \"productvariantid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductvariantidDigitalContents {
			queries.SetScanner(&rel.Productvariantid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductvariantidProductVariant = nil
		}
		o.R.ProductvariantidDigitalContents = nil
	}

	return o.AddProductvariantidDigitalContents(ctx, exec, insert, related...)
}

// RemoveProductvariantidDigitalContents relationships from objects passed in.
// Removes related items from R.ProductvariantidDigitalContents (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductvariantidProductVariant.
func (o *ProductVariant) RemoveProductvariantidDigitalContents(ctx context.Context, exec boil.ContextExecutor, related ...*DigitalContent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productvariantid, nil)
		if rel.R != nil {
			rel.R.ProductvariantidProductVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productvariantid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductvariantidDigitalContents {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductvariantidDigitalContents)
			if ln > 1 && i < ln-1 {
				o.R.ProductvariantidDigitalContents[i] = o.R.ProductvariantidDigitalContents[ln-1]
			}
			o.R.ProductvariantidDigitalContents = o.R.ProductvariantidDigitalContents[:ln-1]
			break
		}
	}

	return nil
}

// AddVariantidOrderLines adds the given related objects to the existing relationships
// of the product_variant, optionally inserting them as new records.
// Appends related to o.R.VariantidOrderLines.
// Sets related.R.VariantidProductVariant appropriately.
func (o *ProductVariant) AddVariantidOrderLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderLine) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Variantid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_lines\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"variantid"}),
				strmangle.WhereClause("\"", "\"", 2, orderLinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Variantid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productVariantR{
			VariantidOrderLines: related,
		}
	} else {
		o.R.VariantidOrderLines = append(o.R.VariantidOrderLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderLineR{
				VariantidProductVariant: o,
			}
		} else {
			rel.R.VariantidProductVariant = o
		}
	}
	return nil
}

// SetVariantidOrderLines removes all previously related items of the
// product_variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VariantidProductVariant's VariantidOrderLines accordingly.
// Replaces o.R.VariantidOrderLines with related.
// Sets related.R.VariantidProductVariant's VariantidOrderLines accordingly.
func (o *ProductVariant) SetVariantidOrderLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderLine) error {
	query := "update \"order_lines\" set \"variantid\" = null where \"variantid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VariantidOrderLines {
			queries.SetScanner(&rel.Variantid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VariantidProductVariant = nil
		}
		o.R.VariantidOrderLines = nil
	}

	return o.AddVariantidOrderLines(ctx, exec, insert, related...)
}

// RemoveVariantidOrderLines relationships from objects passed in.
// Removes related items from R.VariantidOrderLines (uses pointer comparison, removal does not keep order)
// Sets related.R.VariantidProductVariant.
func (o *ProductVariant) RemoveVariantidOrderLines(ctx context.Context, exec boil.ContextExecutor, related ...*OrderLine) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Variantid, nil)
		if rel.R != nil {
			rel.R.VariantidProductVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("variantid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VariantidOrderLines {
			if rel != ri {
				continue
			}

			ln := len(o.R.VariantidOrderLines)
			if ln > 1 && i < ln-1 {
				o.R.VariantidOrderLines[i] = o.R.VariantidOrderLines[ln-1]
			}
			o.R.VariantidOrderLines = o.R.VariantidOrderLines[:ln-1]
			break
		}
	}

	return nil
}

// AddVariantidProductVariantChannelListings adds the given related objects to the existing relationships
// of the product_variant, optionally inserting them as new records.
// Appends related to o.R.VariantidProductVariantChannelListings.
// Sets related.R.VariantidProductVariant appropriately.
func (o *ProductVariant) AddVariantidProductVariantChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariantChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Variantid = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_variant_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"variantid"}),
				strmangle.WhereClause("\"", "\"", 2, productVariantChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Variantid = o.ID
		}
	}

	if o.R == nil {
		o.R = &productVariantR{
			VariantidProductVariantChannelListings: related,
		}
	} else {
		o.R.VariantidProductVariantChannelListings = append(o.R.VariantidProductVariantChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productVariantChannelListingR{
				VariantidProductVariant: o,
			}
		} else {
			rel.R.VariantidProductVariant = o
		}
	}
	return nil
}

// AddProductvariantidProductVariantTranslations adds the given related objects to the existing relationships
// of the product_variant, optionally inserting them as new records.
// Appends related to o.R.ProductvariantidProductVariantTranslations.
// Sets related.R.ProductvariantidProductVariant appropriately.
func (o *ProductVariant) AddProductvariantidProductVariantTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariantTranslation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productvariantid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_variant_translations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productvariantid"}),
				strmangle.WhereClause("\"", "\"", 2, productVariantTranslationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productvariantid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productVariantR{
			ProductvariantidProductVariantTranslations: related,
		}
	} else {
		o.R.ProductvariantidProductVariantTranslations = append(o.R.ProductvariantidProductVariantTranslations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productVariantTranslationR{
				ProductvariantidProductVariant: o,
			}
		} else {
			rel.R.ProductvariantidProductVariant = o
		}
	}
	return nil
}

// SetProductvariantidProductVariantTranslations removes all previously related items of the
// product_variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductvariantidProductVariant's ProductvariantidProductVariantTranslations accordingly.
// Replaces o.R.ProductvariantidProductVariantTranslations with related.
// Sets related.R.ProductvariantidProductVariant's ProductvariantidProductVariantTranslations accordingly.
func (o *ProductVariant) SetProductvariantidProductVariantTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariantTranslation) error {
	query := "update \"product_variant_translations\" set \"productvariantid\" = null where \"productvariantid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductvariantidProductVariantTranslations {
			queries.SetScanner(&rel.Productvariantid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductvariantidProductVariant = nil
		}
		o.R.ProductvariantidProductVariantTranslations = nil
	}

	return o.AddProductvariantidProductVariantTranslations(ctx, exec, insert, related...)
}

// RemoveProductvariantidProductVariantTranslations relationships from objects passed in.
// Removes related items from R.ProductvariantidProductVariantTranslations (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductvariantidProductVariant.
func (o *ProductVariant) RemoveProductvariantidProductVariantTranslations(ctx context.Context, exec boil.ContextExecutor, related ...*ProductVariantTranslation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productvariantid, nil)
		if rel.R != nil {
			rel.R.ProductvariantidProductVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productvariantid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductvariantidProductVariantTranslations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductvariantidProductVariantTranslations)
			if ln > 1 && i < ln-1 {
				o.R.ProductvariantidProductVariantTranslations[i] = o.R.ProductvariantidProductVariantTranslations[ln-1]
			}
			o.R.ProductvariantidProductVariantTranslations = o.R.ProductvariantidProductVariantTranslations[:ln-1]
			break
		}
	}

	return nil
}

// AddProductvariantidStocks adds the given related objects to the existing relationships
// of the product_variant, optionally inserting them as new records.
// Appends related to o.R.ProductvariantidStocks.
// Sets related.R.ProductvariantidProductVariant appropriately.
func (o *ProductVariant) AddProductvariantidStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stock) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productvariantid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stocks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productvariantid"}),
				strmangle.WhereClause("\"", "\"", 2, stockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productvariantid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productVariantR{
			ProductvariantidStocks: related,
		}
	} else {
		o.R.ProductvariantidStocks = append(o.R.ProductvariantidStocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockR{
				ProductvariantidProductVariant: o,
			}
		} else {
			rel.R.ProductvariantidProductVariant = o
		}
	}
	return nil
}

// SetProductvariantidStocks removes all previously related items of the
// product_variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductvariantidProductVariant's ProductvariantidStocks accordingly.
// Replaces o.R.ProductvariantidStocks with related.
// Sets related.R.ProductvariantidProductVariant's ProductvariantidStocks accordingly.
func (o *ProductVariant) SetProductvariantidStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stock) error {
	query := "update \"stocks\" set \"productvariantid\" = null where \"productvariantid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductvariantidStocks {
			queries.SetScanner(&rel.Productvariantid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductvariantidProductVariant = nil
		}
		o.R.ProductvariantidStocks = nil
	}

	return o.AddProductvariantidStocks(ctx, exec, insert, related...)
}

// RemoveProductvariantidStocks relationships from objects passed in.
// Removes related items from R.ProductvariantidStocks (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductvariantidProductVariant.
func (o *ProductVariant) RemoveProductvariantidStocks(ctx context.Context, exec boil.ContextExecutor, related ...*Stock) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productvariantid, nil)
		if rel.R != nil {
			rel.R.ProductvariantidProductVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productvariantid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductvariantidStocks {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductvariantidStocks)
			if ln > 1 && i < ln-1 {
				o.R.ProductvariantidStocks[i] = o.R.ProductvariantidStocks[ln-1]
			}
			o.R.ProductvariantidStocks = o.R.ProductvariantidStocks[:ln-1]
			break
		}
	}

	return nil
}

// AddVariantidVariantMedia adds the given related objects to the existing relationships
// of the product_variant, optionally inserting them as new records.
// Appends related to o.R.VariantidVariantMedia.
// Sets related.R.VariantidProductVariant appropriately.
func (o *ProductVariant) AddVariantidVariantMedia(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VariantMedium) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Variantid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"variant_media\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"variantid"}),
				strmangle.WhereClause("\"", "\"", 2, variantMediumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Variantid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productVariantR{
			VariantidVariantMedia: related,
		}
	} else {
		o.R.VariantidVariantMedia = append(o.R.VariantidVariantMedia, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &variantMediumR{
				VariantidProductVariant: o,
			}
		} else {
			rel.R.VariantidProductVariant = o
		}
	}
	return nil
}

// SetVariantidVariantMedia removes all previously related items of the
// product_variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VariantidProductVariant's VariantidVariantMedia accordingly.
// Replaces o.R.VariantidVariantMedia with related.
// Sets related.R.VariantidProductVariant's VariantidVariantMedia accordingly.
func (o *ProductVariant) SetVariantidVariantMedia(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VariantMedium) error {
	query := "update \"variant_media\" set \"variantid\" = null where \"variantid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VariantidVariantMedia {
			queries.SetScanner(&rel.Variantid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VariantidProductVariant = nil
		}
		o.R.VariantidVariantMedia = nil
	}

	return o.AddVariantidVariantMedia(ctx, exec, insert, related...)
}

// RemoveVariantidVariantMedia relationships from objects passed in.
// Removes related items from R.VariantidVariantMedia (uses pointer comparison, removal does not keep order)
// Sets related.R.VariantidProductVariant.
func (o *ProductVariant) RemoveVariantidVariantMedia(ctx context.Context, exec boil.ContextExecutor, related ...*VariantMedium) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Variantid, nil)
		if rel.R != nil {
			rel.R.VariantidProductVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("variantid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VariantidVariantMedia {
			if rel != ri {
				continue
			}

			ln := len(o.R.VariantidVariantMedia)
			if ln > 1 && i < ln-1 {
				o.R.VariantidVariantMedia[i] = o.R.VariantidVariantMedia[ln-1]
			}
			o.R.VariantidVariantMedia = o.R.VariantidVariantMedia[:ln-1]
			break
		}
	}

	return nil
}

// AddProductvariantidWishlistItemProductVariants adds the given related objects to the existing relationships
// of the product_variant, optionally inserting them as new records.
// Appends related to o.R.ProductvariantidWishlistItemProductVariants.
// Sets related.R.ProductvariantidProductVariant appropriately.
func (o *ProductVariant) AddProductvariantidWishlistItemProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WishlistItemProductVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productvariantid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"wishlist_item_product_variants\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productvariantid"}),
				strmangle.WhereClause("\"", "\"", 2, wishlistItemProductVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productvariantid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productVariantR{
			ProductvariantidWishlistItemProductVariants: related,
		}
	} else {
		o.R.ProductvariantidWishlistItemProductVariants = append(o.R.ProductvariantidWishlistItemProductVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &wishlistItemProductVariantR{
				ProductvariantidProductVariant: o,
			}
		} else {
			rel.R.ProductvariantidProductVariant = o
		}
	}
	return nil
}

// SetProductvariantidWishlistItemProductVariants removes all previously related items of the
// product_variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductvariantidProductVariant's ProductvariantidWishlistItemProductVariants accordingly.
// Replaces o.R.ProductvariantidWishlistItemProductVariants with related.
// Sets related.R.ProductvariantidProductVariant's ProductvariantidWishlistItemProductVariants accordingly.
func (o *ProductVariant) SetProductvariantidWishlistItemProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WishlistItemProductVariant) error {
	query := "update \"wishlist_item_product_variants\" set \"productvariantid\" = null where \"productvariantid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductvariantidWishlistItemProductVariants {
			queries.SetScanner(&rel.Productvariantid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductvariantidProductVariant = nil
		}
		o.R.ProductvariantidWishlistItemProductVariants = nil
	}

	return o.AddProductvariantidWishlistItemProductVariants(ctx, exec, insert, related...)
}

// RemoveProductvariantidWishlistItemProductVariants relationships from objects passed in.
// Removes related items from R.ProductvariantidWishlistItemProductVariants (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductvariantidProductVariant.
func (o *ProductVariant) RemoveProductvariantidWishlistItemProductVariants(ctx context.Context, exec boil.ContextExecutor, related ...*WishlistItemProductVariant) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productvariantid, nil)
		if rel.R != nil {
			rel.R.ProductvariantidProductVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productvariantid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductvariantidWishlistItemProductVariants {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductvariantidWishlistItemProductVariants)
			if ln > 1 && i < ln-1 {
				o.R.ProductvariantidWishlistItemProductVariants[i] = o.R.ProductvariantidWishlistItemProductVariants[ln-1]
			}
			o.R.ProductvariantidWishlistItemProductVariants = o.R.ProductvariantidWishlistItemProductVariants[:ln-1]
			break
		}
	}

	return nil
}

// AddProductidWishlistItems adds the given related objects to the existing relationships
// of the product_variant, optionally inserting them as new records.
// Appends related to o.R.ProductidWishlistItems.
// Sets related.R.ProductidProductVariant appropriately.
func (o *ProductVariant) AddProductidWishlistItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WishlistItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"wishlist_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, wishlistItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productVariantR{
			ProductidWishlistItems: related,
		}
	} else {
		o.R.ProductidWishlistItems = append(o.R.ProductidWishlistItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &wishlistItemR{
				ProductidProductVariant: o,
			}
		} else {
			rel.R.ProductidProductVariant = o
		}
	}
	return nil
}

// SetProductidWishlistItems removes all previously related items of the
// product_variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProductVariant's ProductidWishlistItems accordingly.
// Replaces o.R.ProductidWishlistItems with related.
// Sets related.R.ProductidProductVariant's ProductidWishlistItems accordingly.
func (o *ProductVariant) SetProductidWishlistItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WishlistItem) error {
	query := "update \"wishlist_items\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidWishlistItems {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProductVariant = nil
		}
		o.R.ProductidWishlistItems = nil
	}

	return o.AddProductidWishlistItems(ctx, exec, insert, related...)
}

// RemoveProductidWishlistItems relationships from objects passed in.
// Removes related items from R.ProductidWishlistItems (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProductVariant.
func (o *ProductVariant) RemoveProductidWishlistItems(ctx context.Context, exec boil.ContextExecutor, related ...*WishlistItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProductVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidWishlistItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidWishlistItems)
			if ln > 1 && i < ln-1 {
				o.R.ProductidWishlistItems[i] = o.R.ProductidWishlistItems[ln-1]
			}
			o.R.ProductidWishlistItems = o.R.ProductidWishlistItems[:ln-1]
			break
		}
	}

	return nil
}

// ProductVariants retrieves all the records using an executor.
func ProductVariants(mods ...qm.QueryMod) productVariantQuery {
	mods = append(mods, qm.From("\"product_variants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_variants\".*"})
	}

	return productVariantQuery{q}
}

// FindProductVariant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductVariant(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ProductVariant, error) {
	productVariantObj := &ProductVariant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_variants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productVariantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_variants")
	}

	if err = productVariantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productVariantObj, err
	}

	return productVariantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductVariant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_variants provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productVariantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productVariantInsertCacheMut.RLock()
	cache, cached := productVariantInsertCache[key]
	productVariantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productVariantAllColumns,
			productVariantColumnsWithDefault,
			productVariantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productVariantType, productVariantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productVariantType, productVariantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_variants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_variants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_variants")
	}

	if !cached {
		productVariantInsertCacheMut.Lock()
		productVariantInsertCache[key] = cache
		productVariantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductVariant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductVariant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productVariantUpdateCacheMut.RLock()
	cache, cached := productVariantUpdateCache[key]
	productVariantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productVariantAllColumns,
			productVariantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_variants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_variants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productVariantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productVariantType, productVariantMapping, append(wl, productVariantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_variants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_variants")
	}

	if !cached {
		productVariantUpdateCacheMut.Lock()
		productVariantUpdateCache[key] = cache
		productVariantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productVariantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_variants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductVariantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productVariantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productVariant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductVariant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_variants provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productVariantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productVariantUpsertCacheMut.RLock()
	cache, cached := productVariantUpsertCache[key]
	productVariantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productVariantAllColumns,
			productVariantColumnsWithDefault,
			productVariantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productVariantAllColumns,
			productVariantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_variants, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productVariantPrimaryKeyColumns))
			copy(conflict, productVariantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_variants\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productVariantType, productVariantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productVariantType, productVariantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_variants")
	}

	if !cached {
		productVariantUpsertCacheMut.Lock()
		productVariantUpsertCache[key] = cache
		productVariantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductVariant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductVariant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductVariant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productVariantPrimaryKeyMapping)
	sql := "DELETE FROM \"product_variants\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_variants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productVariantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productVariantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_variants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductVariantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productVariantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productVariantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_variants")
	}

	if len(productVariantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductVariant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductVariant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductVariantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductVariantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_variants\".* FROM \"product_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productVariantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductVariantSlice")
	}

	*o = slice

	return nil
}

// ProductVariantExists checks if the ProductVariant row exists.
func ProductVariantExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_variants\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_variants exists")
	}

	return exists, nil
}

// Exists checks if the ProductVariant row exists.
func (o *ProductVariant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductVariantExists(ctx, exec, o.ID)
}
