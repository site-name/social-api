// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFileInfos(t *testing.T) {
	t.Parallel()

	query := FileInfos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFileInfosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FileInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFileInfosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FileInfos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FileInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFileInfosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FileInfoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FileInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFileInfosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FileInfoExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FileInfo exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FileInfoExists to return true, but got false.")
	}
}

func testFileInfosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fileInfoFound, err := FindFileInfo(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if fileInfoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFileInfosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FileInfos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFileInfosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FileInfos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFileInfosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fileInfoOne := &FileInfo{}
	fileInfoTwo := &FileInfo{}
	if err = randomize.Struct(seed, fileInfoOne, fileInfoDBTypes, false, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, fileInfoTwo, fileInfoDBTypes, false, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fileInfoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fileInfoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FileInfos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFileInfosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fileInfoOne := &FileInfo{}
	fileInfoTwo := &FileInfo{}
	if err = randomize.Struct(seed, fileInfoOne, fileInfoDBTypes, false, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}
	if err = randomize.Struct(seed, fileInfoTwo, fileInfoDBTypes, false, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fileInfoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fileInfoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fileInfoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FileInfo) error {
	*o = FileInfo{}
	return nil
}

func fileInfoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FileInfo) error {
	*o = FileInfo{}
	return nil
}

func fileInfoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FileInfo) error {
	*o = FileInfo{}
	return nil
}

func fileInfoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FileInfo) error {
	*o = FileInfo{}
	return nil
}

func fileInfoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FileInfo) error {
	*o = FileInfo{}
	return nil
}

func fileInfoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FileInfo) error {
	*o = FileInfo{}
	return nil
}

func fileInfoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FileInfo) error {
	*o = FileInfo{}
	return nil
}

func fileInfoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FileInfo) error {
	*o = FileInfo{}
	return nil
}

func fileInfoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FileInfo) error {
	*o = FileInfo{}
	return nil
}

func testFileInfosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FileInfo{}
	o := &FileInfo{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fileInfoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FileInfo object: %s", err)
	}

	AddFileInfoHook(boil.BeforeInsertHook, fileInfoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fileInfoBeforeInsertHooks = []FileInfoHook{}

	AddFileInfoHook(boil.AfterInsertHook, fileInfoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fileInfoAfterInsertHooks = []FileInfoHook{}

	AddFileInfoHook(boil.AfterSelectHook, fileInfoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fileInfoAfterSelectHooks = []FileInfoHook{}

	AddFileInfoHook(boil.BeforeUpdateHook, fileInfoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fileInfoBeforeUpdateHooks = []FileInfoHook{}

	AddFileInfoHook(boil.AfterUpdateHook, fileInfoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fileInfoAfterUpdateHooks = []FileInfoHook{}

	AddFileInfoHook(boil.BeforeDeleteHook, fileInfoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fileInfoBeforeDeleteHooks = []FileInfoHook{}

	AddFileInfoHook(boil.AfterDeleteHook, fileInfoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fileInfoAfterDeleteHooks = []FileInfoHook{}

	AddFileInfoHook(boil.BeforeUpsertHook, fileInfoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fileInfoBeforeUpsertHooks = []FileInfoHook{}

	AddFileInfoHook(boil.AfterUpsertHook, fileInfoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fileInfoAfterUpsertHooks = []FileInfoHook{}
}

func testFileInfosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFileInfosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fileInfoColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FileInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFileInfosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFileInfosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FileInfoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFileInfosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FileInfos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fileInfoDBTypes = map[string]string{`ID`: `character varying`, `Creatorid`: `character varying`, `Parentid`: `character varying`, `Createat`: `bigint`, `Updateat`: `bigint`, `Deleteat`: `bigint`, `Path`: `character varying`, `Thumbnailpath`: `character varying`, `Previewpath`: `character varying`, `Name`: `character varying`, `Extension`: `character varying`, `Size`: `bigint`, `Mimetype`: `character varying`, `Width`: `integer`, `Height`: `integer`, `Haspreviewimage`: `boolean`, `Minipreview`: `bytea`, `Content`: `text`, `Remoteid`: `character varying`}
	_               = bytes.MinRead
)

func testFileInfosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fileInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fileInfoAllColumns) == len(fileInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFileInfosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fileInfoAllColumns) == len(fileInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FileInfo{}
	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FileInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fileInfoDBTypes, true, fileInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fileInfoAllColumns, fileInfoPrimaryKeyColumns) {
		fields = fileInfoAllColumns
	} else {
		fields = strmangle.SetComplement(
			fileInfoAllColumns,
			fileInfoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FileInfoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFileInfosUpsert(t *testing.T) {
	t.Parallel()

	if len(fileInfoAllColumns) == len(fileInfoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FileInfo{}
	if err = randomize.Struct(seed, &o, fileInfoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FileInfo: %s", err)
	}

	count, err := FileInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fileInfoDBTypes, false, fileInfoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FileInfo struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FileInfo: %s", err)
	}

	count, err = FileInfos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
