// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCheckouts(t *testing.T) {
	t.Parallel()

	query := Checkouts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCheckoutsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Checkouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckoutsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Checkouts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Checkouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckoutsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CheckoutSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Checkouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckoutsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CheckoutExists(ctx, tx, o.Token)
	if err != nil {
		t.Errorf("Unable to check if Checkout exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CheckoutExists to return true, but got false.")
	}
}

func testCheckoutsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	checkoutFound, err := FindCheckout(ctx, tx, o.Token)
	if err != nil {
		t.Error(err)
	}

	if checkoutFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCheckoutsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Checkouts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCheckoutsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Checkouts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCheckoutsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	checkoutOne := &Checkout{}
	checkoutTwo := &Checkout{}
	if err = randomize.Struct(seed, checkoutOne, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}
	if err = randomize.Struct(seed, checkoutTwo, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = checkoutOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = checkoutTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Checkouts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCheckoutsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	checkoutOne := &Checkout{}
	checkoutTwo := &Checkout{}
	if err = randomize.Struct(seed, checkoutOne, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}
	if err = randomize.Struct(seed, checkoutTwo, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = checkoutOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = checkoutTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Checkouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func checkoutBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
	*o = Checkout{}
	return nil
}

func checkoutAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
	*o = Checkout{}
	return nil
}

func checkoutAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
	*o = Checkout{}
	return nil
}

func checkoutBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
	*o = Checkout{}
	return nil
}

func checkoutAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
	*o = Checkout{}
	return nil
}

func checkoutBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
	*o = Checkout{}
	return nil
}

func checkoutAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
	*o = Checkout{}
	return nil
}

func checkoutBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
	*o = Checkout{}
	return nil
}

func checkoutAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
	*o = Checkout{}
	return nil
}

func testCheckoutsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Checkout{}
	o := &Checkout{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, checkoutDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Checkout object: %s", err)
	}

	AddCheckoutHook(boil.BeforeInsertHook, checkoutBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	checkoutBeforeInsertHooks = []CheckoutHook{}

	AddCheckoutHook(boil.AfterInsertHook, checkoutAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	checkoutAfterInsertHooks = []CheckoutHook{}

	AddCheckoutHook(boil.AfterSelectHook, checkoutAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	checkoutAfterSelectHooks = []CheckoutHook{}

	AddCheckoutHook(boil.BeforeUpdateHook, checkoutBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	checkoutBeforeUpdateHooks = []CheckoutHook{}

	AddCheckoutHook(boil.AfterUpdateHook, checkoutAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	checkoutAfterUpdateHooks = []CheckoutHook{}

	AddCheckoutHook(boil.BeforeDeleteHook, checkoutBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	checkoutBeforeDeleteHooks = []CheckoutHook{}

	AddCheckoutHook(boil.AfterDeleteHook, checkoutAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	checkoutAfterDeleteHooks = []CheckoutHook{}

	AddCheckoutHook(boil.BeforeUpsertHook, checkoutBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	checkoutBeforeUpsertHooks = []CheckoutHook{}

	AddCheckoutHook(boil.AfterUpsertHook, checkoutAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	checkoutAfterUpsertHooks = []CheckoutHook{}
}

func testCheckoutsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Checkouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCheckoutsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(checkoutColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Checkouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCheckoutToManyCheckoutidCheckoutLines(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c CheckoutLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkoutLineDBTypes, false, checkoutLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutLineDBTypes, false, checkoutLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Checkoutid, a.Token)
	queries.Assign(&c.Checkoutid, a.Token)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CheckoutidCheckoutLines().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Checkoutid, b.Checkoutid) {
			bFound = true
		}
		if queries.Equal(v.Checkoutid, c.Checkoutid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CheckoutSlice{&a}
	if err = a.L.LoadCheckoutidCheckoutLines(ctx, tx, false, (*[]*Checkout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CheckoutidCheckoutLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CheckoutidCheckoutLines = nil
	if err = a.L.LoadCheckoutidCheckoutLines(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CheckoutidCheckoutLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCheckoutToManyCheckoutidGiftcardCheckouts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c GiftcardCheckout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, giftcardCheckoutDBTypes, false, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, giftcardCheckoutDBTypes, false, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Checkoutid, a.Token)
	queries.Assign(&c.Checkoutid, a.Token)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CheckoutidGiftcardCheckouts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Checkoutid, b.Checkoutid) {
			bFound = true
		}
		if queries.Equal(v.Checkoutid, c.Checkoutid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CheckoutSlice{&a}
	if err = a.L.LoadCheckoutidGiftcardCheckouts(ctx, tx, false, (*[]*Checkout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CheckoutidGiftcardCheckouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CheckoutidGiftcardCheckouts = nil
	if err = a.L.LoadCheckoutidGiftcardCheckouts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CheckoutidGiftcardCheckouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCheckoutToManyCheckoutidPayments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Checkoutid, a.Token)
	queries.Assign(&c.Checkoutid, a.Token)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CheckoutidPayments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Checkoutid, b.Checkoutid) {
			bFound = true
		}
		if queries.Equal(v.Checkoutid, c.Checkoutid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CheckoutSlice{&a}
	if err = a.L.LoadCheckoutidPayments(ctx, tx, false, (*[]*Checkout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CheckoutidPayments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CheckoutidPayments = nil
	if err = a.L.LoadCheckoutidPayments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CheckoutidPayments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCheckoutToManyAddOpCheckoutidCheckoutLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c, d, e CheckoutLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutLineDBTypes, false, strmangle.SetComplement(checkoutLinePrimaryKeyColumns, checkoutLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CheckoutLine{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCheckoutidCheckoutLines(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Token, first.Checkoutid) {
			t.Error("foreign key was wrong value", a.Token, first.Checkoutid)
		}
		if !queries.Equal(a.Token, second.Checkoutid) {
			t.Error("foreign key was wrong value", a.Token, second.Checkoutid)
		}

		if first.R.CheckoutidCheckout != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CheckoutidCheckout != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CheckoutidCheckoutLines[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CheckoutidCheckoutLines[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CheckoutidCheckoutLines().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCheckoutToManySetOpCheckoutidCheckoutLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c, d, e CheckoutLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutLineDBTypes, false, strmangle.SetComplement(checkoutLinePrimaryKeyColumns, checkoutLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCheckoutidCheckoutLines(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CheckoutidCheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCheckoutidCheckoutLines(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CheckoutidCheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Checkoutid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Checkoutid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Token, d.Checkoutid) {
		t.Error("foreign key was wrong value", a.Token, d.Checkoutid)
	}
	if !queries.Equal(a.Token, e.Checkoutid) {
		t.Error("foreign key was wrong value", a.Token, e.Checkoutid)
	}

	if b.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CheckoutidCheckout != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CheckoutidCheckout != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CheckoutidCheckoutLines[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CheckoutidCheckoutLines[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCheckoutToManyRemoveOpCheckoutidCheckoutLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c, d, e CheckoutLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutLineDBTypes, false, strmangle.SetComplement(checkoutLinePrimaryKeyColumns, checkoutLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCheckoutidCheckoutLines(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CheckoutidCheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCheckoutidCheckoutLines(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CheckoutidCheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Checkoutid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Checkoutid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CheckoutidCheckout != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CheckoutidCheckout != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CheckoutidCheckoutLines) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CheckoutidCheckoutLines[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CheckoutidCheckoutLines[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCheckoutToManyAddOpCheckoutidGiftcardCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c, d, e GiftcardCheckout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardCheckout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GiftcardCheckout{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCheckoutidGiftcardCheckouts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Token, first.Checkoutid) {
			t.Error("foreign key was wrong value", a.Token, first.Checkoutid)
		}
		if !queries.Equal(a.Token, second.Checkoutid) {
			t.Error("foreign key was wrong value", a.Token, second.Checkoutid)
		}

		if first.R.CheckoutidCheckout != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CheckoutidCheckout != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CheckoutidGiftcardCheckouts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CheckoutidGiftcardCheckouts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CheckoutidGiftcardCheckouts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCheckoutToManySetOpCheckoutidGiftcardCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c, d, e GiftcardCheckout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardCheckout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCheckoutidGiftcardCheckouts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CheckoutidGiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCheckoutidGiftcardCheckouts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CheckoutidGiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Checkoutid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Checkoutid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Token, d.Checkoutid) {
		t.Error("foreign key was wrong value", a.Token, d.Checkoutid)
	}
	if !queries.Equal(a.Token, e.Checkoutid) {
		t.Error("foreign key was wrong value", a.Token, e.Checkoutid)
	}

	if b.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CheckoutidCheckout != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CheckoutidCheckout != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CheckoutidGiftcardCheckouts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CheckoutidGiftcardCheckouts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCheckoutToManyRemoveOpCheckoutidGiftcardCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c, d, e GiftcardCheckout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardCheckout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCheckoutidGiftcardCheckouts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CheckoutidGiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCheckoutidGiftcardCheckouts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CheckoutidGiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Checkoutid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Checkoutid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CheckoutidCheckout != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CheckoutidCheckout != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CheckoutidGiftcardCheckouts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CheckoutidGiftcardCheckouts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CheckoutidGiftcardCheckouts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCheckoutToManyAddOpCheckoutidPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Payment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCheckoutidPayments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.Token, first.Checkoutid) {
			t.Error("foreign key was wrong value", a.Token, first.Checkoutid)
		}
		if !queries.Equal(a.Token, second.Checkoutid) {
			t.Error("foreign key was wrong value", a.Token, second.Checkoutid)
		}

		if first.R.CheckoutidCheckout != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CheckoutidCheckout != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CheckoutidPayments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CheckoutidPayments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CheckoutidPayments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCheckoutToManySetOpCheckoutidPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCheckoutidPayments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CheckoutidPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCheckoutidPayments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CheckoutidPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Checkoutid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Checkoutid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.Token, d.Checkoutid) {
		t.Error("foreign key was wrong value", a.Token, d.Checkoutid)
	}
	if !queries.Equal(a.Token, e.Checkoutid) {
		t.Error("foreign key was wrong value", a.Token, e.Checkoutid)
	}

	if b.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CheckoutidCheckout != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CheckoutidCheckout != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CheckoutidPayments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CheckoutidPayments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCheckoutToManyRemoveOpCheckoutidPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCheckoutidPayments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CheckoutidPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCheckoutidPayments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CheckoutidPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Checkoutid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Checkoutid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CheckoutidCheckout != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CheckoutidCheckout != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CheckoutidCheckout != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CheckoutidPayments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CheckoutidPayments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CheckoutidPayments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCheckoutToOneAddressUsingBillingaddressidAddress(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Checkout
	var foreign Address

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Billingaddressid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BillingaddressidAddress().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAddressHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Address) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CheckoutSlice{&local}
	if err = local.L.LoadBillingaddressidAddress(ctx, tx, false, (*[]*Checkout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BillingaddressidAddress == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BillingaddressidAddress = nil
	if err = local.L.LoadBillingaddressidAddress(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BillingaddressidAddress == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCheckoutToOneChannelUsingChannelidChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Checkout
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Channelid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ChannelidChannel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddChannelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CheckoutSlice{&local}
	if err = local.L.LoadChannelidChannel(ctx, tx, false, (*[]*Checkout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelidChannel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ChannelidChannel = nil
	if err = local.L.LoadChannelidChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelidChannel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCheckoutToOneShippingMethodUsingShippingmethodidShippingMethod(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Checkout
	var foreign ShippingMethod

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Shippingmethodid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShippingmethodidShippingMethod().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShippingMethodHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CheckoutSlice{&local}
	if err = local.L.LoadShippingmethodidShippingMethod(ctx, tx, false, (*[]*Checkout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingmethodidShippingMethod == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShippingmethodidShippingMethod = nil
	if err = local.L.LoadShippingmethodidShippingMethod(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingmethodidShippingMethod == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCheckoutToOneUserUsingUseridUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Checkout
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Userid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UseridUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CheckoutSlice{&local}
	if err = local.L.LoadUseridUser(ctx, tx, false, (*[]*Checkout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UseridUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UseridUser = nil
	if err = local.L.LoadUseridUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UseridUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCheckoutToOneWarehouseUsingCollectionpointidWarehouse(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Checkout
	var foreign Warehouse

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Collectionpointid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CollectionpointidWarehouse().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddWarehouseHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CheckoutSlice{&local}
	if err = local.L.LoadCollectionpointidWarehouse(ctx, tx, false, (*[]*Checkout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CollectionpointidWarehouse == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CollectionpointidWarehouse = nil
	if err = local.L.LoadCollectionpointidWarehouse(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CollectionpointidWarehouse == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCheckoutToOneSetOpAddressUsingBillingaddressidAddress(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Address{&b, &c} {
		err = a.SetBillingaddressidAddress(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BillingaddressidAddress != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BillingaddressidCheckouts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Billingaddressid, x.ID) {
			t.Error("foreign key was wrong value", a.Billingaddressid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Billingaddressid))
		reflect.Indirect(reflect.ValueOf(&a.Billingaddressid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Billingaddressid, x.ID) {
			t.Error("foreign key was wrong value", a.Billingaddressid, x.ID)
		}
	}
}

func testCheckoutToOneRemoveOpAddressUsingBillingaddressidAddress(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBillingaddressidAddress(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBillingaddressidAddress(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.BillingaddressidAddress().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.BillingaddressidAddress != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Billingaddressid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.BillingaddressidCheckouts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutToOneSetOpChannelUsingChannelidChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannelidChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ChannelidChannel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChannelidCheckouts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Channelid, x.ID) {
			t.Error("foreign key was wrong value", a.Channelid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Channelid))
		reflect.Indirect(reflect.ValueOf(&a.Channelid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Channelid, x.ID) {
			t.Error("foreign key was wrong value", a.Channelid, x.ID)
		}
	}
}

func testCheckoutToOneRemoveOpChannelUsingChannelidChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetChannelidChannel(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveChannelidChannel(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ChannelidChannel().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ChannelidChannel != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Channelid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ChannelidCheckouts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutToOneSetOpShippingMethodUsingShippingmethodidShippingMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c ShippingMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShippingMethod{&b, &c} {
		err = a.SetShippingmethodidShippingMethod(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShippingmethodidShippingMethod != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShippingmethodidCheckouts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Shippingmethodid, x.ID) {
			t.Error("foreign key was wrong value", a.Shippingmethodid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Shippingmethodid))
		reflect.Indirect(reflect.ValueOf(&a.Shippingmethodid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Shippingmethodid, x.ID) {
			t.Error("foreign key was wrong value", a.Shippingmethodid, x.ID)
		}
	}
}

func testCheckoutToOneRemoveOpShippingMethodUsingShippingmethodidShippingMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b ShippingMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetShippingmethodidShippingMethod(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveShippingmethodidShippingMethod(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ShippingmethodidShippingMethod().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ShippingmethodidShippingMethod != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Shippingmethodid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ShippingmethodidCheckouts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutToOneSetOpUserUsingUseridUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUseridUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UseridUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UseridCheckouts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Userid, x.ID) {
			t.Error("foreign key was wrong value", a.Userid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Userid))
		reflect.Indirect(reflect.ValueOf(&a.Userid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Userid, x.ID) {
			t.Error("foreign key was wrong value", a.Userid, x.ID)
		}
	}
}

func testCheckoutToOneRemoveOpUserUsingUseridUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUseridUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUseridUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UseridUser().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UseridUser != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Userid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UseridCheckouts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutToOneSetOpWarehouseUsingCollectionpointidWarehouse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b, c Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Warehouse{&b, &c} {
		err = a.SetCollectionpointidWarehouse(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CollectionpointidWarehouse != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CollectionpointidCheckouts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Collectionpointid, x.ID) {
			t.Error("foreign key was wrong value", a.Collectionpointid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Collectionpointid))
		reflect.Indirect(reflect.ValueOf(&a.Collectionpointid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Collectionpointid, x.ID) {
			t.Error("foreign key was wrong value", a.Collectionpointid, x.ID)
		}
	}
}

func testCheckoutToOneRemoveOpWarehouseUsingCollectionpointidWarehouse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Checkout
	var b Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCollectionpointidWarehouse(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCollectionpointidWarehouse(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CollectionpointidWarehouse().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CollectionpointidWarehouse != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Collectionpointid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CollectionpointidCheckouts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCheckoutsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CheckoutSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCheckoutsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Checkouts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	checkoutDBTypes = map[string]string{`Token`: `character varying`, `Createat`: `bigint`, `Updateat`: `bigint`, `Userid`: `character varying`, `Email`: `text`, `Quantity`: `integer`, `Channelid`: `character varying`, `Billingaddressid`: `character varying`, `Shippingaddressid`: `character varying`, `Shippingmethodid`: `character varying`, `Collectionpointid`: `character varying`, `Note`: `text`, `Currency`: `text`, `Country`: `character varying`, `Discountamount`: `double precision`, `Discountname`: `character varying`, `Translateddiscountname`: `character varying`, `Vouchercode`: `character varying`, `Redirecturl`: `text`, `Trackingcode`: `character varying`, `Languagecode`: `text`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`}
	_               = bytes.MinRead
)

func testCheckoutsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(checkoutPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(checkoutAllColumns) == len(checkoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Checkouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCheckoutsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(checkoutAllColumns) == len(checkoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Checkout{}
	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Checkouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, checkoutDBTypes, true, checkoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(checkoutAllColumns, checkoutPrimaryKeyColumns) {
		fields = checkoutAllColumns
	} else {
		fields = strmangle.SetComplement(
			checkoutAllColumns,
			checkoutPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CheckoutSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCheckoutsUpsert(t *testing.T) {
	t.Parallel()

	if len(checkoutAllColumns) == len(checkoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Checkout{}
	if err = randomize.Struct(seed, &o, checkoutDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Checkout: %s", err)
	}

	count, err := Checkouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, checkoutDBTypes, false, checkoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Checkout: %s", err)
	}

	count, err = Checkouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
