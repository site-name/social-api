// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShippingMethodExcludedProducts(t *testing.T) {
	t.Parallel()

	query := ShippingMethodExcludedProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShippingMethodExcludedProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingMethodExcludedProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShippingMethodExcludedProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingMethodExcludedProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShippingMethodExcludedProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingMethodExcludedProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShippingMethodExcludedProductExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShippingMethodExcludedProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShippingMethodExcludedProductExists to return true, but got false.")
	}
}

func testShippingMethodExcludedProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shippingMethodExcludedProductFound, err := FindShippingMethodExcludedProduct(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shippingMethodExcludedProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShippingMethodExcludedProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShippingMethodExcludedProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShippingMethodExcludedProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShippingMethodExcludedProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShippingMethodExcludedProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shippingMethodExcludedProductOne := &ShippingMethodExcludedProduct{}
	shippingMethodExcludedProductTwo := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, shippingMethodExcludedProductOne, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, shippingMethodExcludedProductTwo, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shippingMethodExcludedProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shippingMethodExcludedProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShippingMethodExcludedProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShippingMethodExcludedProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shippingMethodExcludedProductOne := &ShippingMethodExcludedProduct{}
	shippingMethodExcludedProductTwo := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, shippingMethodExcludedProductOne, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, shippingMethodExcludedProductTwo, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shippingMethodExcludedProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shippingMethodExcludedProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shippingMethodExcludedProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodExcludedProduct) error {
	*o = ShippingMethodExcludedProduct{}
	return nil
}

func shippingMethodExcludedProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodExcludedProduct) error {
	*o = ShippingMethodExcludedProduct{}
	return nil
}

func shippingMethodExcludedProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodExcludedProduct) error {
	*o = ShippingMethodExcludedProduct{}
	return nil
}

func shippingMethodExcludedProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodExcludedProduct) error {
	*o = ShippingMethodExcludedProduct{}
	return nil
}

func shippingMethodExcludedProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodExcludedProduct) error {
	*o = ShippingMethodExcludedProduct{}
	return nil
}

func shippingMethodExcludedProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodExcludedProduct) error {
	*o = ShippingMethodExcludedProduct{}
	return nil
}

func shippingMethodExcludedProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodExcludedProduct) error {
	*o = ShippingMethodExcludedProduct{}
	return nil
}

func shippingMethodExcludedProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodExcludedProduct) error {
	*o = ShippingMethodExcludedProduct{}
	return nil
}

func shippingMethodExcludedProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodExcludedProduct) error {
	*o = ShippingMethodExcludedProduct{}
	return nil
}

func testShippingMethodExcludedProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShippingMethodExcludedProduct{}
	o := &ShippingMethodExcludedProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct object: %s", err)
	}

	AddShippingMethodExcludedProductHook(boil.BeforeInsertHook, shippingMethodExcludedProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodExcludedProductBeforeInsertHooks = []ShippingMethodExcludedProductHook{}

	AddShippingMethodExcludedProductHook(boil.AfterInsertHook, shippingMethodExcludedProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodExcludedProductAfterInsertHooks = []ShippingMethodExcludedProductHook{}

	AddShippingMethodExcludedProductHook(boil.AfterSelectHook, shippingMethodExcludedProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shippingMethodExcludedProductAfterSelectHooks = []ShippingMethodExcludedProductHook{}

	AddShippingMethodExcludedProductHook(boil.BeforeUpdateHook, shippingMethodExcludedProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shippingMethodExcludedProductBeforeUpdateHooks = []ShippingMethodExcludedProductHook{}

	AddShippingMethodExcludedProductHook(boil.AfterUpdateHook, shippingMethodExcludedProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shippingMethodExcludedProductAfterUpdateHooks = []ShippingMethodExcludedProductHook{}

	AddShippingMethodExcludedProductHook(boil.BeforeDeleteHook, shippingMethodExcludedProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shippingMethodExcludedProductBeforeDeleteHooks = []ShippingMethodExcludedProductHook{}

	AddShippingMethodExcludedProductHook(boil.AfterDeleteHook, shippingMethodExcludedProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shippingMethodExcludedProductAfterDeleteHooks = []ShippingMethodExcludedProductHook{}

	AddShippingMethodExcludedProductHook(boil.BeforeUpsertHook, shippingMethodExcludedProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodExcludedProductBeforeUpsertHooks = []ShippingMethodExcludedProductHook{}

	AddShippingMethodExcludedProductHook(boil.AfterUpsertHook, shippingMethodExcludedProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodExcludedProductAfterUpsertHooks = []ShippingMethodExcludedProductHook{}
}

func testShippingMethodExcludedProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShippingMethodExcludedProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shippingMethodExcludedProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShippingMethodExcludedProductToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShippingMethodExcludedProduct
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShippingMethodExcludedProductSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*ShippingMethodExcludedProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShippingMethodExcludedProductToOneShippingMethodUsingShippingMethod(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShippingMethodExcludedProduct
	var foreign ShippingMethod

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ShippingMethodID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShippingMethod().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShippingMethodHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShippingMethodExcludedProductSlice{&local}
	if err = local.L.LoadShippingMethod(ctx, tx, false, (*[]*ShippingMethodExcludedProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingMethod == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShippingMethod = nil
	if err = local.L.LoadShippingMethod(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingMethod == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShippingMethodExcludedProductToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethodExcludedProduct
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodExcludedProductDBTypes, false, strmangle.SetComplement(shippingMethodExcludedProductPrimaryKeyColumns, shippingMethodExcludedProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShippingMethodExcludedProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}
func testShippingMethodExcludedProductToOneSetOpShippingMethodUsingShippingMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethodExcludedProduct
	var b, c ShippingMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodExcludedProductDBTypes, false, strmangle.SetComplement(shippingMethodExcludedProductPrimaryKeyColumns, shippingMethodExcludedProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShippingMethod{&b, &c} {
		err = a.SetShippingMethod(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShippingMethod != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShippingMethodExcludedProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ShippingMethodID != x.ID {
			t.Error("foreign key was wrong value", a.ShippingMethodID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShippingMethodID))
		reflect.Indirect(reflect.ValueOf(&a.ShippingMethodID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ShippingMethodID != x.ID {
			t.Error("foreign key was wrong value", a.ShippingMethodID, x.ID)
		}
	}
}

func testShippingMethodExcludedProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShippingMethodExcludedProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShippingMethodExcludedProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShippingMethodExcludedProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShippingMethodExcludedProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shippingMethodExcludedProductDBTypes = map[string]string{`ID`: `uuid`, `ShippingMethodID`: `uuid`, `ProductID`: `uuid`}
	_                                    = bytes.MinRead
)

func testShippingMethodExcludedProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shippingMethodExcludedProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shippingMethodExcludedProductAllColumns) == len(shippingMethodExcludedProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShippingMethodExcludedProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shippingMethodExcludedProductAllColumns) == len(shippingMethodExcludedProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shippingMethodExcludedProductDBTypes, true, shippingMethodExcludedProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shippingMethodExcludedProductAllColumns, shippingMethodExcludedProductPrimaryKeyColumns) {
		fields = shippingMethodExcludedProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			shippingMethodExcludedProductAllColumns,
			shippingMethodExcludedProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShippingMethodExcludedProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShippingMethodExcludedProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(shippingMethodExcludedProductAllColumns) == len(shippingMethodExcludedProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShippingMethodExcludedProduct{}
	if err = randomize.Struct(seed, &o, shippingMethodExcludedProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShippingMethodExcludedProduct: %s", err)
	}

	count, err := ShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodExcludedProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShippingMethodExcludedProduct: %s", err)
	}

	count, err = ShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
