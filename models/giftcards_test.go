// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGiftcards(t *testing.T) {
	t.Parallel()

	query := Giftcards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGiftcardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGiftcardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Giftcards().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGiftcardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GiftcardSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGiftcardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GiftcardExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Giftcard exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GiftcardExists to return true, but got false.")
	}
}

func testGiftcardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	giftcardFound, err := FindGiftcard(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if giftcardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGiftcardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Giftcards().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGiftcardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Giftcards().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGiftcardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	giftcardOne := &Giftcard{}
	giftcardTwo := &Giftcard{}
	if err = randomize.Struct(seed, giftcardOne, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}
	if err = randomize.Struct(seed, giftcardTwo, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = giftcardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = giftcardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Giftcards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGiftcardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	giftcardOne := &Giftcard{}
	giftcardTwo := &Giftcard{}
	if err = randomize.Struct(seed, giftcardOne, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}
	if err = randomize.Struct(seed, giftcardTwo, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = giftcardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = giftcardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func giftcardBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func testGiftcardsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Giftcard{}
	o := &Giftcard{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, giftcardDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Giftcard object: %s", err)
	}

	AddGiftcardHook(boil.BeforeInsertHook, giftcardBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	giftcardBeforeInsertHooks = []GiftcardHook{}

	AddGiftcardHook(boil.AfterInsertHook, giftcardAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	giftcardAfterInsertHooks = []GiftcardHook{}

	AddGiftcardHook(boil.AfterSelectHook, giftcardAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	giftcardAfterSelectHooks = []GiftcardHook{}

	AddGiftcardHook(boil.BeforeUpdateHook, giftcardBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	giftcardBeforeUpdateHooks = []GiftcardHook{}

	AddGiftcardHook(boil.AfterUpdateHook, giftcardAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	giftcardAfterUpdateHooks = []GiftcardHook{}

	AddGiftcardHook(boil.BeforeDeleteHook, giftcardBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	giftcardBeforeDeleteHooks = []GiftcardHook{}

	AddGiftcardHook(boil.AfterDeleteHook, giftcardAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	giftcardAfterDeleteHooks = []GiftcardHook{}

	AddGiftcardHook(boil.BeforeUpsertHook, giftcardBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	giftcardBeforeUpsertHooks = []GiftcardHook{}

	AddGiftcardHook(boil.AfterUpsertHook, giftcardAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	giftcardAfterUpsertHooks = []GiftcardHook{}
}

func testGiftcardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGiftcardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(giftcardColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGiftcardToManyGiftcardCheckouts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c GiftcardCheckout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, giftcardCheckoutDBTypes, false, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, giftcardCheckoutDBTypes, false, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GiftcardID = a.ID
	c.GiftcardID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GiftcardCheckouts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GiftcardID == b.GiftcardID {
			bFound = true
		}
		if v.GiftcardID == c.GiftcardID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GiftcardSlice{&a}
	if err = a.L.LoadGiftcardCheckouts(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiftcardCheckouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GiftcardCheckouts = nil
	if err = a.L.LoadGiftcardCheckouts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiftcardCheckouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGiftcardToManyGiftcardEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c GiftcardEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, giftcardEventDBTypes, false, giftcardEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, giftcardEventDBTypes, false, giftcardEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GiftcardID = a.ID
	c.GiftcardID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GiftcardEvents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GiftcardID == b.GiftcardID {
			bFound = true
		}
		if v.GiftcardID == c.GiftcardID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GiftcardSlice{&a}
	if err = a.L.LoadGiftcardEvents(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiftcardEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GiftcardEvents = nil
	if err = a.L.LoadGiftcardEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiftcardEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGiftcardToManyOrderGiftcards(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c OrderGiftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.GiftcardID = a.ID
	c.GiftcardID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderGiftcards().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.GiftcardID == b.GiftcardID {
			bFound = true
		}
		if v.GiftcardID == c.GiftcardID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GiftcardSlice{&a}
	if err = a.L.LoadOrderGiftcards(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderGiftcards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderGiftcards = nil
	if err = a.L.LoadOrderGiftcards(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderGiftcards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGiftcardToManyAddOpGiftcardCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e GiftcardCheckout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardCheckout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GiftcardCheckout{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGiftcardCheckouts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GiftcardID {
			t.Error("foreign key was wrong value", a.ID, first.GiftcardID)
		}
		if a.ID != second.GiftcardID {
			t.Error("foreign key was wrong value", a.ID, second.GiftcardID)
		}

		if first.R.Giftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Giftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GiftcardCheckouts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GiftcardCheckouts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GiftcardCheckouts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGiftcardToManyAddOpGiftcardEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e GiftcardEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardEventDBTypes, false, strmangle.SetComplement(giftcardEventPrimaryKeyColumns, giftcardEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GiftcardEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGiftcardEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GiftcardID {
			t.Error("foreign key was wrong value", a.ID, first.GiftcardID)
		}
		if a.ID != second.GiftcardID {
			t.Error("foreign key was wrong value", a.ID, second.GiftcardID)
		}

		if first.R.Giftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Giftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GiftcardEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GiftcardEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GiftcardEvents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGiftcardToManyAddOpOrderGiftcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e OrderGiftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderGiftcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderGiftcardDBTypes, false, strmangle.SetComplement(orderGiftcardPrimaryKeyColumns, orderGiftcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderGiftcard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderGiftcards(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GiftcardID {
			t.Error("foreign key was wrong value", a.ID, first.GiftcardID)
		}
		if a.ID != second.GiftcardID {
			t.Error("foreign key was wrong value", a.ID, second.GiftcardID)
		}

		if first.R.Giftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Giftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderGiftcards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderGiftcards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderGiftcards().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGiftcardToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Giftcard
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GiftcardSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGiftcardToOneUserUsingUsedBy(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Giftcard
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UsedByID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UsedBy().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GiftcardSlice{&local}
	if err = local.L.LoadUsedBy(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UsedBy == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UsedBy = nil
	if err = local.L.LoadUsedBy(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UsedBy == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGiftcardToOneUserUsingCreatedBy(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Giftcard
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CreatedByID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CreatedBy().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GiftcardSlice{&local}
	if err = local.L.LoadCreatedBy(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedBy == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CreatedBy = nil
	if err = local.L.LoadCreatedBy(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedBy == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGiftcardToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Giftcards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}

func testGiftcardToOneRemoveOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Product().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Product != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Giftcards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGiftcardToOneSetOpUserUsingUsedBy(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUsedBy(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UsedBy != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UsedByGiftcards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UsedByID, x.ID) {
			t.Error("foreign key was wrong value", a.UsedByID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UsedByID))
		reflect.Indirect(reflect.ValueOf(&a.UsedByID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UsedByID, x.ID) {
			t.Error("foreign key was wrong value", a.UsedByID, x.ID)
		}
	}
}

func testGiftcardToOneRemoveOpUserUsingUsedBy(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUsedBy(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUsedBy(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UsedBy().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UsedBy != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UsedByID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UsedByGiftcards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGiftcardToOneSetOpUserUsingCreatedBy(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetCreatedBy(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CreatedBy != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatedByGiftcards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CreatedByID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatedByID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatedByID))
		reflect.Indirect(reflect.ValueOf(&a.CreatedByID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CreatedByID, x.ID) {
			t.Error("foreign key was wrong value", a.CreatedByID, x.ID)
		}
	}
}

func testGiftcardToOneRemoveOpUserUsingCreatedBy(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreatedBy(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreatedBy(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CreatedBy().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CreatedBy != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CreatedByID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatedByGiftcards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGiftcardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGiftcardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GiftcardSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGiftcardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Giftcards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	giftcardDBTypes = map[string]string{`ID`: `uuid`, `Code`: `character varying`, `CreatedByID`: `uuid`, `UsedByID`: `uuid`, `CreatedByEmail`: `character varying`, `UsedByEmail`: `character varying`, `CreatedAt`: `bigint`, `StartDate`: `timestamp with time zone`, `ExpiryDate`: `timestamp with time zone`, `Tag`: `character varying`, `ProductID`: `uuid`, `LastUsedOn`: `bigint`, `IsActive`: `boolean`, `Currency`: `character varying`, `InitialBalanceAmount`: `double precision`, `CurrentBalanceAmount`: `double precision`, `Metadata`: `jsonb`, `PrivateMetadata`: `jsonb`}
	_               = bytes.MinRead
)

func testGiftcardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(giftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(giftcardAllColumns) == len(giftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGiftcardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(giftcardAllColumns) == len(giftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(giftcardAllColumns, giftcardPrimaryKeyColumns) {
		fields = giftcardAllColumns
	} else {
		fields = strmangle.SetComplement(
			giftcardAllColumns,
			giftcardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GiftcardSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGiftcardsUpsert(t *testing.T) {
	t.Parallel()

	if len(giftcardAllColumns) == len(giftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Giftcard{}
	if err = randomize.Struct(seed, &o, giftcardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Giftcard: %s", err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, giftcardDBTypes, false, giftcardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Giftcard: %s", err)
	}

	count, err = Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
