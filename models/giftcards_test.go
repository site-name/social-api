// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGiftcards(t *testing.T) {
	t.Parallel()

	query := Giftcards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGiftcardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGiftcardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Giftcards().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGiftcardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GiftcardSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGiftcardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GiftcardExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Giftcard exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GiftcardExists to return true, but got false.")
	}
}

func testGiftcardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	giftcardFound, err := FindGiftcard(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if giftcardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGiftcardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Giftcards().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGiftcardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Giftcards().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGiftcardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	giftcardOne := &Giftcard{}
	giftcardTwo := &Giftcard{}
	if err = randomize.Struct(seed, giftcardOne, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}
	if err = randomize.Struct(seed, giftcardTwo, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = giftcardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = giftcardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Giftcards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGiftcardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	giftcardOne := &Giftcard{}
	giftcardTwo := &Giftcard{}
	if err = randomize.Struct(seed, giftcardOne, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}
	if err = randomize.Struct(seed, giftcardTwo, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = giftcardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = giftcardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func giftcardBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func giftcardAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
	*o = Giftcard{}
	return nil
}

func testGiftcardsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Giftcard{}
	o := &Giftcard{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, giftcardDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Giftcard object: %s", err)
	}

	AddGiftcardHook(boil.BeforeInsertHook, giftcardBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	giftcardBeforeInsertHooks = []GiftcardHook{}

	AddGiftcardHook(boil.AfterInsertHook, giftcardAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	giftcardAfterInsertHooks = []GiftcardHook{}

	AddGiftcardHook(boil.AfterSelectHook, giftcardAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	giftcardAfterSelectHooks = []GiftcardHook{}

	AddGiftcardHook(boil.BeforeUpdateHook, giftcardBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	giftcardBeforeUpdateHooks = []GiftcardHook{}

	AddGiftcardHook(boil.AfterUpdateHook, giftcardAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	giftcardAfterUpdateHooks = []GiftcardHook{}

	AddGiftcardHook(boil.BeforeDeleteHook, giftcardBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	giftcardBeforeDeleteHooks = []GiftcardHook{}

	AddGiftcardHook(boil.AfterDeleteHook, giftcardAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	giftcardAfterDeleteHooks = []GiftcardHook{}

	AddGiftcardHook(boil.BeforeUpsertHook, giftcardBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	giftcardBeforeUpsertHooks = []GiftcardHook{}

	AddGiftcardHook(boil.AfterUpsertHook, giftcardAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	giftcardAfterUpsertHooks = []GiftcardHook{}
}

func testGiftcardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGiftcardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(giftcardColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGiftcardToManyGiftcardidGiftcardCheckouts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c GiftcardCheckout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, giftcardCheckoutDBTypes, false, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, giftcardCheckoutDBTypes, false, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Giftcardid, a.ID)
	queries.Assign(&c.Giftcardid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GiftcardidGiftcardCheckouts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Giftcardid, b.Giftcardid) {
			bFound = true
		}
		if queries.Equal(v.Giftcardid, c.Giftcardid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GiftcardSlice{&a}
	if err = a.L.LoadGiftcardidGiftcardCheckouts(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiftcardidGiftcardCheckouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GiftcardidGiftcardCheckouts = nil
	if err = a.L.LoadGiftcardidGiftcardCheckouts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiftcardidGiftcardCheckouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGiftcardToManyGiftcardidGiftcardEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c GiftcardEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, giftcardEventDBTypes, false, giftcardEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, giftcardEventDBTypes, false, giftcardEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Giftcardid, a.ID)
	queries.Assign(&c.Giftcardid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GiftcardidGiftcardEvents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Giftcardid, b.Giftcardid) {
			bFound = true
		}
		if queries.Equal(v.Giftcardid, c.Giftcardid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GiftcardSlice{&a}
	if err = a.L.LoadGiftcardidGiftcardEvents(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiftcardidGiftcardEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GiftcardidGiftcardEvents = nil
	if err = a.L.LoadGiftcardidGiftcardEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiftcardidGiftcardEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGiftcardToManyGiftcardidOrderGiftcards(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c OrderGiftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Giftcardid, a.ID)
	queries.Assign(&c.Giftcardid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.GiftcardidOrderGiftcards().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Giftcardid, b.Giftcardid) {
			bFound = true
		}
		if queries.Equal(v.Giftcardid, c.Giftcardid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GiftcardSlice{&a}
	if err = a.L.LoadGiftcardidOrderGiftcards(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiftcardidOrderGiftcards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GiftcardidOrderGiftcards = nil
	if err = a.L.LoadGiftcardidOrderGiftcards(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GiftcardidOrderGiftcards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testGiftcardToManyAddOpGiftcardidGiftcardCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e GiftcardCheckout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardCheckout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GiftcardCheckout{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGiftcardidGiftcardCheckouts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Giftcardid) {
			t.Error("foreign key was wrong value", a.ID, first.Giftcardid)
		}
		if !queries.Equal(a.ID, second.Giftcardid) {
			t.Error("foreign key was wrong value", a.ID, second.Giftcardid)
		}

		if first.R.GiftcardidGiftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GiftcardidGiftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GiftcardidGiftcardCheckouts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GiftcardidGiftcardCheckouts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GiftcardidGiftcardCheckouts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGiftcardToManySetOpGiftcardidGiftcardCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e GiftcardCheckout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardCheckout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGiftcardidGiftcardCheckouts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GiftcardidGiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGiftcardidGiftcardCheckouts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GiftcardidGiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Giftcardid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Giftcardid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Giftcardid) {
		t.Error("foreign key was wrong value", a.ID, d.Giftcardid)
	}
	if !queries.Equal(a.ID, e.Giftcardid) {
		t.Error("foreign key was wrong value", a.ID, e.Giftcardid)
	}

	if b.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.GiftcardidGiftcard != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.GiftcardidGiftcard != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.GiftcardidGiftcardCheckouts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.GiftcardidGiftcardCheckouts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGiftcardToManyRemoveOpGiftcardidGiftcardCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e GiftcardCheckout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardCheckout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGiftcardidGiftcardCheckouts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GiftcardidGiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGiftcardidGiftcardCheckouts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GiftcardidGiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Giftcardid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Giftcardid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.GiftcardidGiftcard != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.GiftcardidGiftcard != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.GiftcardidGiftcardCheckouts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.GiftcardidGiftcardCheckouts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.GiftcardidGiftcardCheckouts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGiftcardToManyAddOpGiftcardidGiftcardEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e GiftcardEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardEventDBTypes, false, strmangle.SetComplement(giftcardEventPrimaryKeyColumns, giftcardEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GiftcardEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGiftcardidGiftcardEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Giftcardid) {
			t.Error("foreign key was wrong value", a.ID, first.Giftcardid)
		}
		if !queries.Equal(a.ID, second.Giftcardid) {
			t.Error("foreign key was wrong value", a.ID, second.Giftcardid)
		}

		if first.R.GiftcardidGiftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GiftcardidGiftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GiftcardidGiftcardEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GiftcardidGiftcardEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GiftcardidGiftcardEvents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGiftcardToManySetOpGiftcardidGiftcardEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e GiftcardEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardEventDBTypes, false, strmangle.SetComplement(giftcardEventPrimaryKeyColumns, giftcardEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGiftcardidGiftcardEvents(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GiftcardidGiftcardEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGiftcardidGiftcardEvents(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GiftcardidGiftcardEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Giftcardid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Giftcardid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Giftcardid) {
		t.Error("foreign key was wrong value", a.ID, d.Giftcardid)
	}
	if !queries.Equal(a.ID, e.Giftcardid) {
		t.Error("foreign key was wrong value", a.ID, e.Giftcardid)
	}

	if b.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.GiftcardidGiftcard != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.GiftcardidGiftcard != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.GiftcardidGiftcardEvents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.GiftcardidGiftcardEvents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGiftcardToManyRemoveOpGiftcardidGiftcardEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e GiftcardEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GiftcardEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardEventDBTypes, false, strmangle.SetComplement(giftcardEventPrimaryKeyColumns, giftcardEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGiftcardidGiftcardEvents(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GiftcardidGiftcardEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGiftcardidGiftcardEvents(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GiftcardidGiftcardEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Giftcardid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Giftcardid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.GiftcardidGiftcard != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.GiftcardidGiftcard != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.GiftcardidGiftcardEvents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.GiftcardidGiftcardEvents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.GiftcardidGiftcardEvents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGiftcardToManyAddOpGiftcardidOrderGiftcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e OrderGiftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderGiftcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderGiftcardDBTypes, false, strmangle.SetComplement(orderGiftcardPrimaryKeyColumns, orderGiftcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderGiftcard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGiftcardidOrderGiftcards(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Giftcardid) {
			t.Error("foreign key was wrong value", a.ID, first.Giftcardid)
		}
		if !queries.Equal(a.ID, second.Giftcardid) {
			t.Error("foreign key was wrong value", a.ID, second.Giftcardid)
		}

		if first.R.GiftcardidGiftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GiftcardidGiftcard != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GiftcardidOrderGiftcards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GiftcardidOrderGiftcards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GiftcardidOrderGiftcards().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGiftcardToManySetOpGiftcardidOrderGiftcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e OrderGiftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderGiftcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderGiftcardDBTypes, false, strmangle.SetComplement(orderGiftcardPrimaryKeyColumns, orderGiftcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetGiftcardidOrderGiftcards(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GiftcardidOrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGiftcardidOrderGiftcards(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GiftcardidOrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Giftcardid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Giftcardid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Giftcardid) {
		t.Error("foreign key was wrong value", a.ID, d.Giftcardid)
	}
	if !queries.Equal(a.ID, e.Giftcardid) {
		t.Error("foreign key was wrong value", a.ID, e.Giftcardid)
	}

	if b.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.GiftcardidGiftcard != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.GiftcardidGiftcard != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.GiftcardidOrderGiftcards[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.GiftcardidOrderGiftcards[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGiftcardToManyRemoveOpGiftcardidOrderGiftcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c, d, e OrderGiftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderGiftcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderGiftcardDBTypes, false, strmangle.SetComplement(orderGiftcardPrimaryKeyColumns, orderGiftcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddGiftcardidOrderGiftcards(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GiftcardidOrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGiftcardidOrderGiftcards(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GiftcardidOrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Giftcardid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Giftcardid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.GiftcardidGiftcard != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.GiftcardidGiftcard != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.GiftcardidGiftcard != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.GiftcardidOrderGiftcards) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.GiftcardidOrderGiftcards[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.GiftcardidOrderGiftcards[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGiftcardToOneProductUsingProductidProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Giftcard
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Productid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductidProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GiftcardSlice{&local}
	if err = local.L.LoadProductidProduct(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductidProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductidProduct = nil
	if err = local.L.LoadProductidProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductidProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGiftcardToOneUserUsingUsedbyidUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Giftcard
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Usedbyid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UsedbyidUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GiftcardSlice{&local}
	if err = local.L.LoadUsedbyidUser(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UsedbyidUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UsedbyidUser = nil
	if err = local.L.LoadUsedbyidUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UsedbyidUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGiftcardToOneUserUsingCreatedbyidUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Giftcard
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Createdbyid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CreatedbyidUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GiftcardSlice{&local}
	if err = local.L.LoadCreatedbyidUser(ctx, tx, false, (*[]*Giftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedbyidUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CreatedbyidUser = nil
	if err = local.L.LoadCreatedbyidUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedbyidUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGiftcardToOneSetOpProductUsingProductidProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProductidProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductidProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductidGiftcards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Productid, x.ID) {
			t.Error("foreign key was wrong value", a.Productid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Productid))
		reflect.Indirect(reflect.ValueOf(&a.Productid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Productid, x.ID) {
			t.Error("foreign key was wrong value", a.Productid, x.ID)
		}
	}
}

func testGiftcardToOneRemoveOpProductUsingProductidProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProductidProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProductidProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProductidProduct().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProductidProduct != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Productid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductidGiftcards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGiftcardToOneSetOpUserUsingUsedbyidUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUsedbyidUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UsedbyidUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UsedbyidGiftcards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Usedbyid, x.ID) {
			t.Error("foreign key was wrong value", a.Usedbyid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Usedbyid))
		reflect.Indirect(reflect.ValueOf(&a.Usedbyid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Usedbyid, x.ID) {
			t.Error("foreign key was wrong value", a.Usedbyid, x.ID)
		}
	}
}

func testGiftcardToOneRemoveOpUserUsingUsedbyidUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUsedbyidUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUsedbyidUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UsedbyidUser().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UsedbyidUser != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Usedbyid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UsedbyidGiftcards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGiftcardToOneSetOpUserUsingCreatedbyidUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetCreatedbyidUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CreatedbyidUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatedbyidGiftcards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Createdbyid, x.ID) {
			t.Error("foreign key was wrong value", a.Createdbyid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Createdbyid))
		reflect.Indirect(reflect.ValueOf(&a.Createdbyid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Createdbyid, x.ID) {
			t.Error("foreign key was wrong value", a.Createdbyid, x.ID)
		}
	}
}

func testGiftcardToOneRemoveOpUserUsingCreatedbyidUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Giftcard
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCreatedbyidUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCreatedbyidUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CreatedbyidUser().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CreatedbyidUser != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Createdbyid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CreatedbyidGiftcards) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGiftcardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGiftcardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GiftcardSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGiftcardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Giftcards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	giftcardDBTypes = map[string]string{`ID`: `character varying`, `Code`: `character varying`, `Createdbyid`: `character varying`, `Usedbyid`: `character varying`, `Createdbyemail`: `character varying`, `Usedbyemail`: `character varying`, `Createat`: `bigint`, `Startdate`: `timestamp with time zone`, `Expirydate`: `timestamp with time zone`, `Tag`: `character varying`, `Productid`: `character varying`, `Lastusedon`: `bigint`, `Isactive`: `boolean`, `Currency`: `character varying`, `Initialbalanceamount`: `double precision`, `Currentbalanceamount`: `double precision`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`}
	_               = bytes.MinRead
)

func testGiftcardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(giftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(giftcardAllColumns) == len(giftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGiftcardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(giftcardAllColumns) == len(giftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Giftcard{}
	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, giftcardDBTypes, true, giftcardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(giftcardAllColumns, giftcardPrimaryKeyColumns) {
		fields = giftcardAllColumns
	} else {
		fields = strmangle.SetComplement(
			giftcardAllColumns,
			giftcardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GiftcardSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGiftcardsUpsert(t *testing.T) {
	t.Parallel()

	if len(giftcardAllColumns) == len(giftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Giftcard{}
	if err = randomize.Struct(seed, &o, giftcardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Giftcard: %s", err)
	}

	count, err := Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, giftcardDBTypes, false, giftcardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Giftcard: %s", err)
	}

	count, err = Giftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
