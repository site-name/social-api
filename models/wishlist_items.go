// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WishlistItem is an object representing the database table.
type WishlistItem struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Wishlistid null.String `boil:"wishlistid" json:"wishlistid,omitempty" toml:"wishlistid" yaml:"wishlistid,omitempty"`
	Productid  null.String `boil:"productid" json:"productid,omitempty" toml:"productid" yaml:"productid,omitempty"`
	Createat   null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`

	R *wishlistItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L wishlistItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WishlistItemColumns = struct {
	ID         string
	Wishlistid string
	Productid  string
	Createat   string
}{
	ID:         "id",
	Wishlistid: "wishlistid",
	Productid:  "productid",
	Createat:   "createat",
}

var WishlistItemTableColumns = struct {
	ID         string
	Wishlistid string
	Productid  string
	Createat   string
}{
	ID:         "wishlist_items.id",
	Wishlistid: "wishlist_items.wishlistid",
	Productid:  "wishlist_items.productid",
	Createat:   "wishlist_items.createat",
}

// Generated where

var WishlistItemWhere = struct {
	ID         whereHelperstring
	Wishlistid whereHelpernull_String
	Productid  whereHelpernull_String
	Createat   whereHelpernull_Int64
}{
	ID:         whereHelperstring{field: "\"wishlist_items\".\"id\""},
	Wishlistid: whereHelpernull_String{field: "\"wishlist_items\".\"wishlistid\""},
	Productid:  whereHelpernull_String{field: "\"wishlist_items\".\"productid\""},
	Createat:   whereHelpernull_Int64{field: "\"wishlist_items\".\"createat\""},
}

// WishlistItemRels is where relationship names are stored.
var WishlistItemRels = struct {
	ProductidProductVariant                   string
	WishlistidWishlist                        string
	WishlistitemidWishlistItemProductVariants string
}{
	ProductidProductVariant:                   "ProductidProductVariant",
	WishlistidWishlist:                        "WishlistidWishlist",
	WishlistitemidWishlistItemProductVariants: "WishlistitemidWishlistItemProductVariants",
}

// wishlistItemR is where relationships are stored.
type wishlistItemR struct {
	ProductidProductVariant                   *ProductVariant                 `boil:"ProductidProductVariant" json:"ProductidProductVariant" toml:"ProductidProductVariant" yaml:"ProductidProductVariant"`
	WishlistidWishlist                        *Wishlist                       `boil:"WishlistidWishlist" json:"WishlistidWishlist" toml:"WishlistidWishlist" yaml:"WishlistidWishlist"`
	WishlistitemidWishlistItemProductVariants WishlistItemProductVariantSlice `boil:"WishlistitemidWishlistItemProductVariants" json:"WishlistitemidWishlistItemProductVariants" toml:"WishlistitemidWishlistItemProductVariants" yaml:"WishlistitemidWishlistItemProductVariants"`
}

// NewStruct creates a new relationship struct
func (*wishlistItemR) NewStruct() *wishlistItemR {
	return &wishlistItemR{}
}

func (r *wishlistItemR) GetProductidProductVariant() *ProductVariant {
	if r == nil {
		return nil
	}
	return r.ProductidProductVariant
}

func (r *wishlistItemR) GetWishlistidWishlist() *Wishlist {
	if r == nil {
		return nil
	}
	return r.WishlistidWishlist
}

func (r *wishlistItemR) GetWishlistitemidWishlistItemProductVariants() WishlistItemProductVariantSlice {
	if r == nil {
		return nil
	}
	return r.WishlistitemidWishlistItemProductVariants
}

// wishlistItemL is where Load methods for each relationship are stored.
type wishlistItemL struct{}

var (
	wishlistItemAllColumns            = []string{"id", "wishlistid", "productid", "createat"}
	wishlistItemColumnsWithoutDefault = []string{"id"}
	wishlistItemColumnsWithDefault    = []string{"wishlistid", "productid", "createat"}
	wishlistItemPrimaryKeyColumns     = []string{"id"}
	wishlistItemGeneratedColumns      = []string{}
)

type (
	// WishlistItemSlice is an alias for a slice of pointers to WishlistItem.
	// This should almost always be used instead of []WishlistItem.
	WishlistItemSlice []*WishlistItem
	// WishlistItemHook is the signature for custom WishlistItem hook methods
	WishlistItemHook func(context.Context, boil.ContextExecutor, *WishlistItem) error

	wishlistItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	wishlistItemType                 = reflect.TypeOf(&WishlistItem{})
	wishlistItemMapping              = queries.MakeStructMapping(wishlistItemType)
	wishlistItemPrimaryKeyMapping, _ = queries.BindMapping(wishlistItemType, wishlistItemMapping, wishlistItemPrimaryKeyColumns)
	wishlistItemInsertCacheMut       sync.RWMutex
	wishlistItemInsertCache          = make(map[string]insertCache)
	wishlistItemUpdateCacheMut       sync.RWMutex
	wishlistItemUpdateCache          = make(map[string]updateCache)
	wishlistItemUpsertCacheMut       sync.RWMutex
	wishlistItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var wishlistItemAfterSelectHooks []WishlistItemHook

var wishlistItemBeforeInsertHooks []WishlistItemHook
var wishlistItemAfterInsertHooks []WishlistItemHook

var wishlistItemBeforeUpdateHooks []WishlistItemHook
var wishlistItemAfterUpdateHooks []WishlistItemHook

var wishlistItemBeforeDeleteHooks []WishlistItemHook
var wishlistItemAfterDeleteHooks []WishlistItemHook

var wishlistItemBeforeUpsertHooks []WishlistItemHook
var wishlistItemAfterUpsertHooks []WishlistItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WishlistItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WishlistItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WishlistItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WishlistItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WishlistItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WishlistItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WishlistItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WishlistItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WishlistItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWishlistItemHook registers your hook function for all future operations.
func AddWishlistItemHook(hookPoint boil.HookPoint, wishlistItemHook WishlistItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		wishlistItemAfterSelectHooks = append(wishlistItemAfterSelectHooks, wishlistItemHook)
	case boil.BeforeInsertHook:
		wishlistItemBeforeInsertHooks = append(wishlistItemBeforeInsertHooks, wishlistItemHook)
	case boil.AfterInsertHook:
		wishlistItemAfterInsertHooks = append(wishlistItemAfterInsertHooks, wishlistItemHook)
	case boil.BeforeUpdateHook:
		wishlistItemBeforeUpdateHooks = append(wishlistItemBeforeUpdateHooks, wishlistItemHook)
	case boil.AfterUpdateHook:
		wishlistItemAfterUpdateHooks = append(wishlistItemAfterUpdateHooks, wishlistItemHook)
	case boil.BeforeDeleteHook:
		wishlistItemBeforeDeleteHooks = append(wishlistItemBeforeDeleteHooks, wishlistItemHook)
	case boil.AfterDeleteHook:
		wishlistItemAfterDeleteHooks = append(wishlistItemAfterDeleteHooks, wishlistItemHook)
	case boil.BeforeUpsertHook:
		wishlistItemBeforeUpsertHooks = append(wishlistItemBeforeUpsertHooks, wishlistItemHook)
	case boil.AfterUpsertHook:
		wishlistItemAfterUpsertHooks = append(wishlistItemAfterUpsertHooks, wishlistItemHook)
	}
}

// One returns a single wishlistItem record from the query.
func (q wishlistItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WishlistItem, error) {
	o := &WishlistItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for wishlist_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WishlistItem records from the query.
func (q wishlistItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (WishlistItemSlice, error) {
	var o []*WishlistItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WishlistItem slice")
	}

	if len(wishlistItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WishlistItem records in the query.
func (q wishlistItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count wishlist_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q wishlistItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if wishlist_items exists")
	}

	return count > 0, nil
}

// ProductidProductVariant pointed to by the foreign key.
func (o *WishlistItem) ProductidProductVariant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Productid),
	}

	queryMods = append(queryMods, mods...)

	return ProductVariants(queryMods...)
}

// WishlistidWishlist pointed to by the foreign key.
func (o *WishlistItem) WishlistidWishlist(mods ...qm.QueryMod) wishlistQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Wishlistid),
	}

	queryMods = append(queryMods, mods...)

	return Wishlists(queryMods...)
}

// WishlistitemidWishlistItemProductVariants retrieves all the wishlist_item_product_variant's WishlistItemProductVariants with an executor via wishlistitemid column.
func (o *WishlistItem) WishlistitemidWishlistItemProductVariants(mods ...qm.QueryMod) wishlistItemProductVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"wishlist_item_product_variants\".\"wishlistitemid\"=?", o.ID),
	)

	return WishlistItemProductVariants(queryMods...)
}

// LoadProductidProductVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (wishlistItemL) LoadProductidProductVariant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWishlistItem interface{}, mods queries.Applicator) error {
	var slice []*WishlistItem
	var object *WishlistItem

	if singular {
		var ok bool
		object, ok = maybeWishlistItem.(*WishlistItem)
		if !ok {
			object = new(WishlistItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWishlistItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWishlistItem))
			}
		}
	} else {
		s, ok := maybeWishlistItem.(*[]*WishlistItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWishlistItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWishlistItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wishlistItemR{}
		}
		if !queries.IsNil(object.Productid) {
			args = append(args, object.Productid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wishlistItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Productid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Productid) {
				args = append(args, obj.Productid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductidProductVariant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.ProductidWishlistItems = append(foreign.R.ProductidWishlistItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Productid, foreign.ID) {
				local.R.ProductidProductVariant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.ProductidWishlistItems = append(foreign.R.ProductidWishlistItems, local)
				break
			}
		}
	}

	return nil
}

// LoadWishlistidWishlist allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (wishlistItemL) LoadWishlistidWishlist(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWishlistItem interface{}, mods queries.Applicator) error {
	var slice []*WishlistItem
	var object *WishlistItem

	if singular {
		var ok bool
		object, ok = maybeWishlistItem.(*WishlistItem)
		if !ok {
			object = new(WishlistItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWishlistItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWishlistItem))
			}
		}
	} else {
		s, ok := maybeWishlistItem.(*[]*WishlistItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWishlistItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWishlistItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wishlistItemR{}
		}
		if !queries.IsNil(object.Wishlistid) {
			args = append(args, object.Wishlistid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wishlistItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Wishlistid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Wishlistid) {
				args = append(args, obj.Wishlistid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`wishlists`),
		qm.WhereIn(`wishlists.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Wishlist")
	}

	var resultSlice []*Wishlist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Wishlist")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for wishlists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for wishlists")
	}

	if len(wishlistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WishlistidWishlist = foreign
		if foreign.R == nil {
			foreign.R = &wishlistR{}
		}
		foreign.R.WishlistidWishlistItems = append(foreign.R.WishlistidWishlistItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Wishlistid, foreign.ID) {
				local.R.WishlistidWishlist = foreign
				if foreign.R == nil {
					foreign.R = &wishlistR{}
				}
				foreign.R.WishlistidWishlistItems = append(foreign.R.WishlistidWishlistItems, local)
				break
			}
		}
	}

	return nil
}

// LoadWishlistitemidWishlistItemProductVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (wishlistItemL) LoadWishlistitemidWishlistItemProductVariants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWishlistItem interface{}, mods queries.Applicator) error {
	var slice []*WishlistItem
	var object *WishlistItem

	if singular {
		var ok bool
		object, ok = maybeWishlistItem.(*WishlistItem)
		if !ok {
			object = new(WishlistItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWishlistItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWishlistItem))
			}
		}
	} else {
		s, ok := maybeWishlistItem.(*[]*WishlistItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWishlistItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWishlistItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wishlistItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wishlistItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`wishlist_item_product_variants`),
		qm.WhereIn(`wishlist_item_product_variants.wishlistitemid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load wishlist_item_product_variants")
	}

	var resultSlice []*WishlistItemProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice wishlist_item_product_variants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on wishlist_item_product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for wishlist_item_product_variants")
	}

	if len(wishlistItemProductVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WishlistitemidWishlistItemProductVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &wishlistItemProductVariantR{}
			}
			foreign.R.WishlistitemidWishlistItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Wishlistitemid) {
				local.R.WishlistitemidWishlistItemProductVariants = append(local.R.WishlistitemidWishlistItemProductVariants, foreign)
				if foreign.R == nil {
					foreign.R = &wishlistItemProductVariantR{}
				}
				foreign.R.WishlistitemidWishlistItem = local
				break
			}
		}
	}

	return nil
}

// SetProductidProductVariant of the wishlistItem to the related item.
// Sets o.R.ProductidProductVariant to related.
// Adds o to related.R.ProductidWishlistItems.
func (o *WishlistItem) SetProductidProductVariant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"wishlist_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
		strmangle.WhereClause("\"", "\"", 2, wishlistItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Productid, related.ID)
	if o.R == nil {
		o.R = &wishlistItemR{
			ProductidProductVariant: related,
		}
	} else {
		o.R.ProductidProductVariant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			ProductidWishlistItems: WishlistItemSlice{o},
		}
	} else {
		related.R.ProductidWishlistItems = append(related.R.ProductidWishlistItems, o)
	}

	return nil
}

// RemoveProductidProductVariant relationship.
// Sets o.R.ProductidProductVariant to nil.
// Removes o from all passed in related items' relationships struct.
func (o *WishlistItem) RemoveProductidProductVariant(ctx context.Context, exec boil.ContextExecutor, related *ProductVariant) error {
	var err error

	queries.SetScanner(&o.Productid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductidProductVariant = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductidWishlistItems {
		if queries.Equal(o.Productid, ri.Productid) {
			continue
		}

		ln := len(related.R.ProductidWishlistItems)
		if ln > 1 && i < ln-1 {
			related.R.ProductidWishlistItems[i] = related.R.ProductidWishlistItems[ln-1]
		}
		related.R.ProductidWishlistItems = related.R.ProductidWishlistItems[:ln-1]
		break
	}
	return nil
}

// SetWishlistidWishlist of the wishlistItem to the related item.
// Sets o.R.WishlistidWishlist to related.
// Adds o to related.R.WishlistidWishlistItems.
func (o *WishlistItem) SetWishlistidWishlist(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Wishlist) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"wishlist_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"wishlistid"}),
		strmangle.WhereClause("\"", "\"", 2, wishlistItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Wishlistid, related.ID)
	if o.R == nil {
		o.R = &wishlistItemR{
			WishlistidWishlist: related,
		}
	} else {
		o.R.WishlistidWishlist = related
	}

	if related.R == nil {
		related.R = &wishlistR{
			WishlistidWishlistItems: WishlistItemSlice{o},
		}
	} else {
		related.R.WishlistidWishlistItems = append(related.R.WishlistidWishlistItems, o)
	}

	return nil
}

// RemoveWishlistidWishlist relationship.
// Sets o.R.WishlistidWishlist to nil.
// Removes o from all passed in related items' relationships struct.
func (o *WishlistItem) RemoveWishlistidWishlist(ctx context.Context, exec boil.ContextExecutor, related *Wishlist) error {
	var err error

	queries.SetScanner(&o.Wishlistid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("wishlistid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WishlistidWishlist = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WishlistidWishlistItems {
		if queries.Equal(o.Wishlistid, ri.Wishlistid) {
			continue
		}

		ln := len(related.R.WishlistidWishlistItems)
		if ln > 1 && i < ln-1 {
			related.R.WishlistidWishlistItems[i] = related.R.WishlistidWishlistItems[ln-1]
		}
		related.R.WishlistidWishlistItems = related.R.WishlistidWishlistItems[:ln-1]
		break
	}
	return nil
}

// AddWishlistitemidWishlistItemProductVariants adds the given related objects to the existing relationships
// of the wishlist_item, optionally inserting them as new records.
// Appends related to o.R.WishlistitemidWishlistItemProductVariants.
// Sets related.R.WishlistitemidWishlistItem appropriately.
func (o *WishlistItem) AddWishlistitemidWishlistItemProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WishlistItemProductVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Wishlistitemid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"wishlist_item_product_variants\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"wishlistitemid"}),
				strmangle.WhereClause("\"", "\"", 2, wishlistItemProductVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Wishlistitemid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &wishlistItemR{
			WishlistitemidWishlistItemProductVariants: related,
		}
	} else {
		o.R.WishlistitemidWishlistItemProductVariants = append(o.R.WishlistitemidWishlistItemProductVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &wishlistItemProductVariantR{
				WishlistitemidWishlistItem: o,
			}
		} else {
			rel.R.WishlistitemidWishlistItem = o
		}
	}
	return nil
}

// SetWishlistitemidWishlistItemProductVariants removes all previously related items of the
// wishlist_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WishlistitemidWishlistItem's WishlistitemidWishlistItemProductVariants accordingly.
// Replaces o.R.WishlistitemidWishlistItemProductVariants with related.
// Sets related.R.WishlistitemidWishlistItem's WishlistitemidWishlistItemProductVariants accordingly.
func (o *WishlistItem) SetWishlistitemidWishlistItemProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WishlistItemProductVariant) error {
	query := "update \"wishlist_item_product_variants\" set \"wishlistitemid\" = null where \"wishlistitemid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WishlistitemidWishlistItemProductVariants {
			queries.SetScanner(&rel.Wishlistitemid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WishlistitemidWishlistItem = nil
		}
		o.R.WishlistitemidWishlistItemProductVariants = nil
	}

	return o.AddWishlistitemidWishlistItemProductVariants(ctx, exec, insert, related...)
}

// RemoveWishlistitemidWishlistItemProductVariants relationships from objects passed in.
// Removes related items from R.WishlistitemidWishlistItemProductVariants (uses pointer comparison, removal does not keep order)
// Sets related.R.WishlistitemidWishlistItem.
func (o *WishlistItem) RemoveWishlistitemidWishlistItemProductVariants(ctx context.Context, exec boil.ContextExecutor, related ...*WishlistItemProductVariant) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Wishlistitemid, nil)
		if rel.R != nil {
			rel.R.WishlistitemidWishlistItem = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("wishlistitemid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WishlistitemidWishlistItemProductVariants {
			if rel != ri {
				continue
			}

			ln := len(o.R.WishlistitemidWishlistItemProductVariants)
			if ln > 1 && i < ln-1 {
				o.R.WishlistitemidWishlistItemProductVariants[i] = o.R.WishlistitemidWishlistItemProductVariants[ln-1]
			}
			o.R.WishlistitemidWishlistItemProductVariants = o.R.WishlistitemidWishlistItemProductVariants[:ln-1]
			break
		}
	}

	return nil
}

// WishlistItems retrieves all the records using an executor.
func WishlistItems(mods ...qm.QueryMod) wishlistItemQuery {
	mods = append(mods, qm.From("\"wishlist_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"wishlist_items\".*"})
	}

	return wishlistItemQuery{q}
}

// FindWishlistItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWishlistItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*WishlistItem, error) {
	wishlistItemObj := &WishlistItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"wishlist_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, wishlistItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from wishlist_items")
	}

	if err = wishlistItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return wishlistItemObj, err
	}

	return wishlistItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WishlistItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wishlist_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wishlistItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	wishlistItemInsertCacheMut.RLock()
	cache, cached := wishlistItemInsertCache[key]
	wishlistItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			wishlistItemAllColumns,
			wishlistItemColumnsWithDefault,
			wishlistItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(wishlistItemType, wishlistItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(wishlistItemType, wishlistItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"wishlist_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"wishlist_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into wishlist_items")
	}

	if !cached {
		wishlistItemInsertCacheMut.Lock()
		wishlistItemInsertCache[key] = cache
		wishlistItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WishlistItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WishlistItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	wishlistItemUpdateCacheMut.RLock()
	cache, cached := wishlistItemUpdateCache[key]
	wishlistItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			wishlistItemAllColumns,
			wishlistItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update wishlist_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"wishlist_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, wishlistItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(wishlistItemType, wishlistItemMapping, append(wl, wishlistItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update wishlist_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for wishlist_items")
	}

	if !cached {
		wishlistItemUpdateCacheMut.Lock()
		wishlistItemUpdateCache[key] = cache
		wishlistItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q wishlistItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for wishlist_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for wishlist_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WishlistItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wishlistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"wishlist_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, wishlistItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in wishlistItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all wishlistItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WishlistItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wishlist_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wishlistItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	wishlistItemUpsertCacheMut.RLock()
	cache, cached := wishlistItemUpsertCache[key]
	wishlistItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			wishlistItemAllColumns,
			wishlistItemColumnsWithDefault,
			wishlistItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			wishlistItemAllColumns,
			wishlistItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert wishlist_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(wishlistItemPrimaryKeyColumns))
			copy(conflict, wishlistItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"wishlist_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(wishlistItemType, wishlistItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(wishlistItemType, wishlistItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert wishlist_items")
	}

	if !cached {
		wishlistItemUpsertCacheMut.Lock()
		wishlistItemUpsertCache[key] = cache
		wishlistItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WishlistItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WishlistItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WishlistItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), wishlistItemPrimaryKeyMapping)
	sql := "DELETE FROM \"wishlist_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from wishlist_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for wishlist_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q wishlistItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no wishlistItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wishlist_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wishlist_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WishlistItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(wishlistItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wishlistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"wishlist_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, wishlistItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wishlistItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wishlist_items")
	}

	if len(wishlistItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WishlistItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWishlistItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WishlistItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WishlistItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wishlistItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"wishlist_items\".* FROM \"wishlist_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, wishlistItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WishlistItemSlice")
	}

	*o = slice

	return nil
}

// WishlistItemExists checks if the WishlistItem row exists.
func WishlistItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"wishlist_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if wishlist_items exists")
	}

	return exists, nil
}

// Exists checks if the WishlistItem row exists.
func (o *WishlistItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WishlistItemExists(ctx, exec, o.ID)
}
