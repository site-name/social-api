// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShippingZoneChannels(t *testing.T) {
	t.Parallel()

	query := ShippingZoneChannels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShippingZoneChannelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingZoneChannelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShippingZoneChannels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingZoneChannelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShippingZoneChannelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingZoneChannelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShippingZoneChannelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShippingZoneChannel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShippingZoneChannelExists to return true, but got false.")
	}
}

func testShippingZoneChannelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shippingZoneChannelFound, err := FindShippingZoneChannel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shippingZoneChannelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShippingZoneChannelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShippingZoneChannels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShippingZoneChannelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShippingZoneChannels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShippingZoneChannelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shippingZoneChannelOne := &ShippingZoneChannel{}
	shippingZoneChannelTwo := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, shippingZoneChannelOne, shippingZoneChannelDBTypes, false, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}
	if err = randomize.Struct(seed, shippingZoneChannelTwo, shippingZoneChannelDBTypes, false, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shippingZoneChannelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shippingZoneChannelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShippingZoneChannels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShippingZoneChannelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shippingZoneChannelOne := &ShippingZoneChannel{}
	shippingZoneChannelTwo := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, shippingZoneChannelOne, shippingZoneChannelDBTypes, false, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}
	if err = randomize.Struct(seed, shippingZoneChannelTwo, shippingZoneChannelDBTypes, false, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shippingZoneChannelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shippingZoneChannelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shippingZoneChannelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZoneChannel) error {
	*o = ShippingZoneChannel{}
	return nil
}

func shippingZoneChannelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZoneChannel) error {
	*o = ShippingZoneChannel{}
	return nil
}

func shippingZoneChannelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZoneChannel) error {
	*o = ShippingZoneChannel{}
	return nil
}

func shippingZoneChannelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZoneChannel) error {
	*o = ShippingZoneChannel{}
	return nil
}

func shippingZoneChannelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZoneChannel) error {
	*o = ShippingZoneChannel{}
	return nil
}

func shippingZoneChannelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZoneChannel) error {
	*o = ShippingZoneChannel{}
	return nil
}

func shippingZoneChannelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZoneChannel) error {
	*o = ShippingZoneChannel{}
	return nil
}

func shippingZoneChannelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZoneChannel) error {
	*o = ShippingZoneChannel{}
	return nil
}

func shippingZoneChannelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingZoneChannel) error {
	*o = ShippingZoneChannel{}
	return nil
}

func testShippingZoneChannelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShippingZoneChannel{}
	o := &ShippingZoneChannel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel object: %s", err)
	}

	AddShippingZoneChannelHook(boil.BeforeInsertHook, shippingZoneChannelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shippingZoneChannelBeforeInsertHooks = []ShippingZoneChannelHook{}

	AddShippingZoneChannelHook(boil.AfterInsertHook, shippingZoneChannelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shippingZoneChannelAfterInsertHooks = []ShippingZoneChannelHook{}

	AddShippingZoneChannelHook(boil.AfterSelectHook, shippingZoneChannelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shippingZoneChannelAfterSelectHooks = []ShippingZoneChannelHook{}

	AddShippingZoneChannelHook(boil.BeforeUpdateHook, shippingZoneChannelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shippingZoneChannelBeforeUpdateHooks = []ShippingZoneChannelHook{}

	AddShippingZoneChannelHook(boil.AfterUpdateHook, shippingZoneChannelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shippingZoneChannelAfterUpdateHooks = []ShippingZoneChannelHook{}

	AddShippingZoneChannelHook(boil.BeforeDeleteHook, shippingZoneChannelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shippingZoneChannelBeforeDeleteHooks = []ShippingZoneChannelHook{}

	AddShippingZoneChannelHook(boil.AfterDeleteHook, shippingZoneChannelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shippingZoneChannelAfterDeleteHooks = []ShippingZoneChannelHook{}

	AddShippingZoneChannelHook(boil.BeforeUpsertHook, shippingZoneChannelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shippingZoneChannelBeforeUpsertHooks = []ShippingZoneChannelHook{}

	AddShippingZoneChannelHook(boil.AfterUpsertHook, shippingZoneChannelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shippingZoneChannelAfterUpsertHooks = []ShippingZoneChannelHook{}
}

func testShippingZoneChannelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShippingZoneChannelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shippingZoneChannelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShippingZoneChannelToOneChannelUsingChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShippingZoneChannel
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ChannelID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Channel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddChannelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShippingZoneChannelSlice{&local}
	if err = local.L.LoadChannel(ctx, tx, false, (*[]*ShippingZoneChannel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Channel = nil
	if err = local.L.LoadChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShippingZoneChannelToOneShippingZoneUsingShippingZone(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShippingZoneChannel
	var foreign ShippingZone

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shippingZoneDBTypes, false, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ShippingZoneID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShippingZone().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShippingZoneHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShippingZoneChannelSlice{&local}
	if err = local.L.LoadShippingZone(ctx, tx, false, (*[]*ShippingZoneChannel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingZone == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShippingZone = nil
	if err = local.L.LoadShippingZone(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingZone == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShippingZoneChannelToOneSetOpChannelUsingChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingZoneChannel
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingZoneChannelDBTypes, false, strmangle.SetComplement(shippingZoneChannelPrimaryKeyColumns, shippingZoneChannelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Channel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShippingZoneChannels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ChannelID, x.ID) {
			t.Error("foreign key was wrong value", a.ChannelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChannelID))
		reflect.Indirect(reflect.ValueOf(&a.ChannelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ChannelID, x.ID) {
			t.Error("foreign key was wrong value", a.ChannelID, x.ID)
		}
	}
}

func testShippingZoneChannelToOneRemoveOpChannelUsingChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingZoneChannel
	var b Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingZoneChannelDBTypes, false, strmangle.SetComplement(shippingZoneChannelPrimaryKeyColumns, shippingZoneChannelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetChannel(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveChannel(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Channel().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Channel != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ChannelID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ShippingZoneChannels) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testShippingZoneChannelToOneSetOpShippingZoneUsingShippingZone(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingZoneChannel
	var b, c ShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingZoneChannelDBTypes, false, strmangle.SetComplement(shippingZoneChannelPrimaryKeyColumns, shippingZoneChannelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShippingZone{&b, &c} {
		err = a.SetShippingZone(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShippingZone != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShippingZoneChannels[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ShippingZoneID, x.ID) {
			t.Error("foreign key was wrong value", a.ShippingZoneID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShippingZoneID))
		reflect.Indirect(reflect.ValueOf(&a.ShippingZoneID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ShippingZoneID, x.ID) {
			t.Error("foreign key was wrong value", a.ShippingZoneID, x.ID)
		}
	}
}

func testShippingZoneChannelToOneRemoveOpShippingZoneUsingShippingZone(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingZoneChannel
	var b ShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingZoneChannelDBTypes, false, strmangle.SetComplement(shippingZoneChannelPrimaryKeyColumns, shippingZoneChannelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetShippingZone(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveShippingZone(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ShippingZone().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ShippingZone != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ShippingZoneID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ShippingZoneChannels) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testShippingZoneChannelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShippingZoneChannelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShippingZoneChannelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShippingZoneChannelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShippingZoneChannels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shippingZoneChannelDBTypes = map[string]string{`ID`: `character varying`, `ShippingZoneID`: `character varying`, `ChannelID`: `character varying`}
	_                          = bytes.MinRead
)

func testShippingZoneChannelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shippingZoneChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shippingZoneChannelAllColumns) == len(shippingZoneChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShippingZoneChannelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shippingZoneChannelAllColumns) == len(shippingZoneChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShippingZoneChannel{}
	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shippingZoneChannelDBTypes, true, shippingZoneChannelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shippingZoneChannelAllColumns, shippingZoneChannelPrimaryKeyColumns) {
		fields = shippingZoneChannelAllColumns
	} else {
		fields = strmangle.SetComplement(
			shippingZoneChannelAllColumns,
			shippingZoneChannelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShippingZoneChannelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShippingZoneChannelsUpsert(t *testing.T) {
	t.Parallel()

	if len(shippingZoneChannelAllColumns) == len(shippingZoneChannelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShippingZoneChannel{}
	if err = randomize.Struct(seed, &o, shippingZoneChannelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShippingZoneChannel: %s", err)
	}

	count, err := ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shippingZoneChannelDBTypes, false, shippingZoneChannelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingZoneChannel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShippingZoneChannel: %s", err)
	}

	count, err = ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
