// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShopTranslation is an object representing the database table.
type ShopTranslation struct {
	ID           string `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageCode string `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	Name         string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description  string `boil:"description" json:"description" toml:"description" yaml:"description"`
	CreatedAt    int64  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    int64  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *shopTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shopTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShopTranslationColumns = struct {
	ID           string
	LanguageCode string
	Name         string
	Description  string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	LanguageCode: "language_code",
	Name:         "name",
	Description:  "description",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var ShopTranslationTableColumns = struct {
	ID           string
	LanguageCode string
	Name         string
	Description  string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "shop_translations.id",
	LanguageCode: "shop_translations.language_code",
	Name:         "shop_translations.name",
	Description:  "shop_translations.description",
	CreatedAt:    "shop_translations.created_at",
	UpdatedAt:    "shop_translations.updated_at",
}

// Generated where

var ShopTranslationWhere = struct {
	ID           whereHelperstring
	LanguageCode whereHelperstring
	Name         whereHelperstring
	Description  whereHelperstring
	CreatedAt    whereHelperint64
	UpdatedAt    whereHelperint64
}{
	ID:           whereHelperstring{field: "\"shop_translations\".\"id\""},
	LanguageCode: whereHelperstring{field: "\"shop_translations\".\"language_code\""},
	Name:         whereHelperstring{field: "\"shop_translations\".\"name\""},
	Description:  whereHelperstring{field: "\"shop_translations\".\"description\""},
	CreatedAt:    whereHelperint64{field: "\"shop_translations\".\"created_at\""},
	UpdatedAt:    whereHelperint64{field: "\"shop_translations\".\"updated_at\""},
}

// ShopTranslationRels is where relationship names are stored.
var ShopTranslationRels = struct {
}{}

// shopTranslationR is where relationships are stored.
type shopTranslationR struct {
}

// NewStruct creates a new relationship struct
func (*shopTranslationR) NewStruct() *shopTranslationR {
	return &shopTranslationR{}
}

// shopTranslationL is where Load methods for each relationship are stored.
type shopTranslationL struct{}

var (
	shopTranslationAllColumns            = []string{"id", "language_code", "name", "description", "created_at", "updated_at"}
	shopTranslationColumnsWithoutDefault = []string{"language_code", "name", "description", "created_at", "updated_at"}
	shopTranslationColumnsWithDefault    = []string{"id"}
	shopTranslationPrimaryKeyColumns     = []string{"id"}
	shopTranslationGeneratedColumns      = []string{}
)

type (
	// ShopTranslationSlice is an alias for a slice of pointers to ShopTranslation.
	// This should almost always be used instead of []ShopTranslation.
	ShopTranslationSlice []*ShopTranslation
	// ShopTranslationHook is the signature for custom ShopTranslation hook methods
	ShopTranslationHook func(context.Context, boil.ContextExecutor, *ShopTranslation) error

	shopTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shopTranslationType                 = reflect.TypeOf(&ShopTranslation{})
	shopTranslationMapping              = queries.MakeStructMapping(shopTranslationType)
	shopTranslationPrimaryKeyMapping, _ = queries.BindMapping(shopTranslationType, shopTranslationMapping, shopTranslationPrimaryKeyColumns)
	shopTranslationInsertCacheMut       sync.RWMutex
	shopTranslationInsertCache          = make(map[string]insertCache)
	shopTranslationUpdateCacheMut       sync.RWMutex
	shopTranslationUpdateCache          = make(map[string]updateCache)
	shopTranslationUpsertCacheMut       sync.RWMutex
	shopTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shopTranslationAfterSelectHooks []ShopTranslationHook

var shopTranslationBeforeInsertHooks []ShopTranslationHook
var shopTranslationAfterInsertHooks []ShopTranslationHook

var shopTranslationBeforeUpdateHooks []ShopTranslationHook
var shopTranslationAfterUpdateHooks []ShopTranslationHook

var shopTranslationBeforeDeleteHooks []ShopTranslationHook
var shopTranslationAfterDeleteHooks []ShopTranslationHook

var shopTranslationBeforeUpsertHooks []ShopTranslationHook
var shopTranslationAfterUpsertHooks []ShopTranslationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShopTranslation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopTranslationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShopTranslation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopTranslationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShopTranslation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopTranslationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShopTranslation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopTranslationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShopTranslation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopTranslationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShopTranslation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopTranslationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShopTranslation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopTranslationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShopTranslation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopTranslationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShopTranslation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopTranslationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShopTranslationHook registers your hook function for all future operations.
func AddShopTranslationHook(hookPoint boil.HookPoint, shopTranslationHook ShopTranslationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shopTranslationAfterSelectHooks = append(shopTranslationAfterSelectHooks, shopTranslationHook)
	case boil.BeforeInsertHook:
		shopTranslationBeforeInsertHooks = append(shopTranslationBeforeInsertHooks, shopTranslationHook)
	case boil.AfterInsertHook:
		shopTranslationAfterInsertHooks = append(shopTranslationAfterInsertHooks, shopTranslationHook)
	case boil.BeforeUpdateHook:
		shopTranslationBeforeUpdateHooks = append(shopTranslationBeforeUpdateHooks, shopTranslationHook)
	case boil.AfterUpdateHook:
		shopTranslationAfterUpdateHooks = append(shopTranslationAfterUpdateHooks, shopTranslationHook)
	case boil.BeforeDeleteHook:
		shopTranslationBeforeDeleteHooks = append(shopTranslationBeforeDeleteHooks, shopTranslationHook)
	case boil.AfterDeleteHook:
		shopTranslationAfterDeleteHooks = append(shopTranslationAfterDeleteHooks, shopTranslationHook)
	case boil.BeforeUpsertHook:
		shopTranslationBeforeUpsertHooks = append(shopTranslationBeforeUpsertHooks, shopTranslationHook)
	case boil.AfterUpsertHook:
		shopTranslationAfterUpsertHooks = append(shopTranslationAfterUpsertHooks, shopTranslationHook)
	}
}

// One returns a single shopTranslation record from the query.
func (q shopTranslationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShopTranslation, error) {
	o := &ShopTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shop_translations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShopTranslation records from the query.
func (q shopTranslationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShopTranslationSlice, error) {
	var o []*ShopTranslation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShopTranslation slice")
	}

	if len(shopTranslationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShopTranslation records in the query.
func (q shopTranslationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shop_translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shopTranslationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shop_translations exists")
	}

	return count > 0, nil
}

// ShopTranslations retrieves all the records using an executor.
func ShopTranslations(mods ...qm.QueryMod) shopTranslationQuery {
	mods = append(mods, qm.From("\"shop_translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shop_translations\".*"})
	}

	return shopTranslationQuery{q}
}

// FindShopTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShopTranslation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ShopTranslation, error) {
	shopTranslationObj := &ShopTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shop_translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shopTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shop_translations")
	}

	if err = shopTranslationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shopTranslationObj, err
	}

	return shopTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShopTranslation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shop_translations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shopTranslationInsertCacheMut.RLock()
	cache, cached := shopTranslationInsertCache[key]
	shopTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shopTranslationAllColumns,
			shopTranslationColumnsWithDefault,
			shopTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shopTranslationType, shopTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shopTranslationType, shopTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shop_translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shop_translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shop_translations")
	}

	if !cached {
		shopTranslationInsertCacheMut.Lock()
		shopTranslationInsertCache[key] = cache
		shopTranslationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShopTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShopTranslation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shopTranslationUpdateCacheMut.RLock()
	cache, cached := shopTranslationUpdateCache[key]
	shopTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shopTranslationAllColumns,
			shopTranslationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shop_translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shop_translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shopTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shopTranslationType, shopTranslationMapping, append(wl, shopTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shop_translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shop_translations")
	}

	if !cached {
		shopTranslationUpdateCacheMut.Lock()
		shopTranslationUpdateCache[key] = cache
		shopTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shopTranslationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shop_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shop_translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShopTranslationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shop_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shopTranslationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shopTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shopTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShopTranslation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shop_translations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shopTranslationUpsertCacheMut.RLock()
	cache, cached := shopTranslationUpsertCache[key]
	shopTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shopTranslationAllColumns,
			shopTranslationColumnsWithDefault,
			shopTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shopTranslationAllColumns,
			shopTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shop_translations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shopTranslationPrimaryKeyColumns))
			copy(conflict, shopTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shop_translations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shopTranslationType, shopTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shopTranslationType, shopTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shop_translations")
	}

	if !cached {
		shopTranslationUpsertCacheMut.Lock()
		shopTranslationUpsertCache[key] = cache
		shopTranslationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShopTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShopTranslation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShopTranslation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shopTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"shop_translations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shop_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shop_translations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shopTranslationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shopTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shop_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shop_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShopTranslationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shopTranslationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shop_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopTranslationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shopTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shop_translations")
	}

	if len(shopTranslationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShopTranslation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShopTranslation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShopTranslationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShopTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shop_translations\".* FROM \"shop_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShopTranslationSlice")
	}

	*o = slice

	return nil
}

// ShopTranslationExists checks if the ShopTranslation row exists.
func ShopTranslationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shop_translations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shop_translations exists")
	}

	return exists, nil
}

// Exists checks if the ShopTranslation row exists.
func (o *ShopTranslation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShopTranslationExists(ctx, exec, o.ID)
}
