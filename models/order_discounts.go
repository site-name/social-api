// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// OrderDiscount is an object representing the database table.
type OrderDiscount struct {
	ID             string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderID        null.String   `boil:"order_id" json:"order_id,omitempty" toml:"order_id" yaml:"order_id,omitempty"`
	Type           string        `boil:"type" json:"type" toml:"type" yaml:"type"`
	ValueType      string        `boil:"value_type" json:"value_type" toml:"value_type" yaml:"value_type"`
	Value          types.Decimal `boil:"value" json:"value" toml:"value" yaml:"value"`
	AmountValue    types.Decimal `boil:"amount_value" json:"amount_value" toml:"amount_value" yaml:"amount_value"`
	Currency       string        `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	Name           null.String   `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	TranslatedName null.String   `boil:"translated_name" json:"translated_name,omitempty" toml:"translated_name" yaml:"translated_name,omitempty"`
	Reason         null.String   `boil:"reason" json:"reason,omitempty" toml:"reason" yaml:"reason,omitempty"`

	R *orderDiscountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderDiscountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderDiscountColumns = struct {
	ID             string
	OrderID        string
	Type           string
	ValueType      string
	Value          string
	AmountValue    string
	Currency       string
	Name           string
	TranslatedName string
	Reason         string
}{
	ID:             "id",
	OrderID:        "order_id",
	Type:           "type",
	ValueType:      "value_type",
	Value:          "value",
	AmountValue:    "amount_value",
	Currency:       "currency",
	Name:           "name",
	TranslatedName: "translated_name",
	Reason:         "reason",
}

var OrderDiscountTableColumns = struct {
	ID             string
	OrderID        string
	Type           string
	ValueType      string
	Value          string
	AmountValue    string
	Currency       string
	Name           string
	TranslatedName string
	Reason         string
}{
	ID:             "order_discounts.id",
	OrderID:        "order_discounts.order_id",
	Type:           "order_discounts.type",
	ValueType:      "order_discounts.value_type",
	Value:          "order_discounts.value",
	AmountValue:    "order_discounts.amount_value",
	Currency:       "order_discounts.currency",
	Name:           "order_discounts.name",
	TranslatedName: "order_discounts.translated_name",
	Reason:         "order_discounts.reason",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var OrderDiscountWhere = struct {
	ID             whereHelperstring
	OrderID        whereHelpernull_String
	Type           whereHelperstring
	ValueType      whereHelperstring
	Value          whereHelpertypes_Decimal
	AmountValue    whereHelpertypes_Decimal
	Currency       whereHelperstring
	Name           whereHelpernull_String
	TranslatedName whereHelpernull_String
	Reason         whereHelpernull_String
}{
	ID:             whereHelperstring{field: "\"order_discounts\".\"id\""},
	OrderID:        whereHelpernull_String{field: "\"order_discounts\".\"order_id\""},
	Type:           whereHelperstring{field: "\"order_discounts\".\"type\""},
	ValueType:      whereHelperstring{field: "\"order_discounts\".\"value_type\""},
	Value:          whereHelpertypes_Decimal{field: "\"order_discounts\".\"value\""},
	AmountValue:    whereHelpertypes_Decimal{field: "\"order_discounts\".\"amount_value\""},
	Currency:       whereHelperstring{field: "\"order_discounts\".\"currency\""},
	Name:           whereHelpernull_String{field: "\"order_discounts\".\"name\""},
	TranslatedName: whereHelpernull_String{field: "\"order_discounts\".\"translated_name\""},
	Reason:         whereHelpernull_String{field: "\"order_discounts\".\"reason\""},
}

// OrderDiscountRels is where relationship names are stored.
var OrderDiscountRels = struct {
	Order string
}{
	Order: "Order",
}

// orderDiscountR is where relationships are stored.
type orderDiscountR struct {
	Order *Order `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
}

// NewStruct creates a new relationship struct
func (*orderDiscountR) NewStruct() *orderDiscountR {
	return &orderDiscountR{}
}

func (r *orderDiscountR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

// orderDiscountL is where Load methods for each relationship are stored.
type orderDiscountL struct{}

var (
	orderDiscountAllColumns            = []string{"id", "order_id", "type", "value_type", "value", "amount_value", "currency", "name", "translated_name", "reason"}
	orderDiscountColumnsWithoutDefault = []string{"type", "value_type", "currency"}
	orderDiscountColumnsWithDefault    = []string{"id", "order_id", "value", "amount_value", "name", "translated_name", "reason"}
	orderDiscountPrimaryKeyColumns     = []string{"id"}
	orderDiscountGeneratedColumns      = []string{}
)

type (
	// OrderDiscountSlice is an alias for a slice of pointers to OrderDiscount.
	// This should almost always be used instead of []OrderDiscount.
	OrderDiscountSlice []*OrderDiscount
	// OrderDiscountHook is the signature for custom OrderDiscount hook methods
	OrderDiscountHook func(context.Context, boil.ContextExecutor, *OrderDiscount) error

	orderDiscountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderDiscountType                 = reflect.TypeOf(&OrderDiscount{})
	orderDiscountMapping              = queries.MakeStructMapping(orderDiscountType)
	orderDiscountPrimaryKeyMapping, _ = queries.BindMapping(orderDiscountType, orderDiscountMapping, orderDiscountPrimaryKeyColumns)
	orderDiscountInsertCacheMut       sync.RWMutex
	orderDiscountInsertCache          = make(map[string]insertCache)
	orderDiscountUpdateCacheMut       sync.RWMutex
	orderDiscountUpdateCache          = make(map[string]updateCache)
	orderDiscountUpsertCacheMut       sync.RWMutex
	orderDiscountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderDiscountAfterSelectHooks []OrderDiscountHook

var orderDiscountBeforeInsertHooks []OrderDiscountHook
var orderDiscountAfterInsertHooks []OrderDiscountHook

var orderDiscountBeforeUpdateHooks []OrderDiscountHook
var orderDiscountAfterUpdateHooks []OrderDiscountHook

var orderDiscountBeforeDeleteHooks []OrderDiscountHook
var orderDiscountAfterDeleteHooks []OrderDiscountHook

var orderDiscountBeforeUpsertHooks []OrderDiscountHook
var orderDiscountAfterUpsertHooks []OrderDiscountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderDiscount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDiscountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderDiscount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDiscountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderDiscount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDiscountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderDiscount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDiscountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderDiscount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDiscountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderDiscount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDiscountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderDiscount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDiscountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderDiscount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDiscountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderDiscount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderDiscountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderDiscountHook registers your hook function for all future operations.
func AddOrderDiscountHook(hookPoint boil.HookPoint, orderDiscountHook OrderDiscountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderDiscountAfterSelectHooks = append(orderDiscountAfterSelectHooks, orderDiscountHook)
	case boil.BeforeInsertHook:
		orderDiscountBeforeInsertHooks = append(orderDiscountBeforeInsertHooks, orderDiscountHook)
	case boil.AfterInsertHook:
		orderDiscountAfterInsertHooks = append(orderDiscountAfterInsertHooks, orderDiscountHook)
	case boil.BeforeUpdateHook:
		orderDiscountBeforeUpdateHooks = append(orderDiscountBeforeUpdateHooks, orderDiscountHook)
	case boil.AfterUpdateHook:
		orderDiscountAfterUpdateHooks = append(orderDiscountAfterUpdateHooks, orderDiscountHook)
	case boil.BeforeDeleteHook:
		orderDiscountBeforeDeleteHooks = append(orderDiscountBeforeDeleteHooks, orderDiscountHook)
	case boil.AfterDeleteHook:
		orderDiscountAfterDeleteHooks = append(orderDiscountAfterDeleteHooks, orderDiscountHook)
	case boil.BeforeUpsertHook:
		orderDiscountBeforeUpsertHooks = append(orderDiscountBeforeUpsertHooks, orderDiscountHook)
	case boil.AfterUpsertHook:
		orderDiscountAfterUpsertHooks = append(orderDiscountAfterUpsertHooks, orderDiscountHook)
	}
}

// One returns a single orderDiscount record from the query.
func (q orderDiscountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderDiscount, error) {
	o := &OrderDiscount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for order_discounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderDiscount records from the query.
func (q orderDiscountQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderDiscountSlice, error) {
	var o []*OrderDiscount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrderDiscount slice")
	}

	if len(orderDiscountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderDiscount records in the query.
func (q orderDiscountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count order_discounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderDiscountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if order_discounts exists")
	}

	return count > 0, nil
}

// Order pointed to by the foreign key.
func (o *OrderDiscount) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderDiscountL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderDiscount interface{}, mods queries.Applicator) error {
	var slice []*OrderDiscount
	var object *OrderDiscount

	if singular {
		var ok bool
		object, ok = maybeOrderDiscount.(*OrderDiscount)
		if !ok {
			object = new(OrderDiscount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderDiscount))
			}
		}
	} else {
		s, ok := maybeOrderDiscount.(*[]*OrderDiscount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderDiscount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderDiscount))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderDiscountR{}
		}
		if !queries.IsNil(object.OrderID) {
			args = append(args, object.OrderID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderDiscountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OrderID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OrderID) {
				args = append(args, obj.OrderID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderDiscounts = append(foreign.R.OrderDiscounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrderID, foreign.ID) {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderDiscounts = append(foreign.R.OrderDiscounts, local)
				break
			}
		}
	}

	return nil
}

// SetOrder of the orderDiscount to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderDiscounts.
func (o *OrderDiscount) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderDiscountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrderID, related.ID)
	if o.R == nil {
		o.R = &orderDiscountR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderDiscounts: OrderDiscountSlice{o},
		}
	} else {
		related.R.OrderDiscounts = append(related.R.OrderDiscounts, o)
	}

	return nil
}

// RemoveOrder relationship.
// Sets o.R.Order to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderDiscount) RemoveOrder(ctx context.Context, exec boil.ContextExecutor, related *Order) error {
	var err error

	queries.SetScanner(&o.OrderID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Order = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderDiscounts {
		if queries.Equal(o.OrderID, ri.OrderID) {
			continue
		}

		ln := len(related.R.OrderDiscounts)
		if ln > 1 && i < ln-1 {
			related.R.OrderDiscounts[i] = related.R.OrderDiscounts[ln-1]
		}
		related.R.OrderDiscounts = related.R.OrderDiscounts[:ln-1]
		break
	}
	return nil
}

// OrderDiscounts retrieves all the records using an executor.
func OrderDiscounts(mods ...qm.QueryMod) orderDiscountQuery {
	mods = append(mods, qm.From("\"order_discounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_discounts\".*"})
	}

	return orderDiscountQuery{q}
}

// FindOrderDiscount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderDiscount(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OrderDiscount, error) {
	orderDiscountObj := &OrderDiscount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_discounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderDiscountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from order_discounts")
	}

	if err = orderDiscountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderDiscountObj, err
	}

	return orderDiscountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderDiscount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_discounts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderDiscountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderDiscountInsertCacheMut.RLock()
	cache, cached := orderDiscountInsertCache[key]
	orderDiscountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderDiscountAllColumns,
			orderDiscountColumnsWithDefault,
			orderDiscountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderDiscountType, orderDiscountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderDiscountType, orderDiscountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_discounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_discounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into order_discounts")
	}

	if !cached {
		orderDiscountInsertCacheMut.Lock()
		orderDiscountInsertCache[key] = cache
		orderDiscountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderDiscount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderDiscount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderDiscountUpdateCacheMut.RLock()
	cache, cached := orderDiscountUpdateCache[key]
	orderDiscountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderDiscountAllColumns,
			orderDiscountPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update order_discounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_discounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderDiscountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderDiscountType, orderDiscountMapping, append(wl, orderDiscountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update order_discounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for order_discounts")
	}

	if !cached {
		orderDiscountUpdateCacheMut.Lock()
		orderDiscountUpdateCache[key] = cache
		orderDiscountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderDiscountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for order_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for order_discounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderDiscountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_discounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderDiscountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in orderDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all orderDiscount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderDiscount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_discounts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderDiscountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderDiscountUpsertCacheMut.RLock()
	cache, cached := orderDiscountUpsertCache[key]
	orderDiscountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderDiscountAllColumns,
			orderDiscountColumnsWithDefault,
			orderDiscountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderDiscountAllColumns,
			orderDiscountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert order_discounts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderDiscountPrimaryKeyColumns))
			copy(conflict, orderDiscountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_discounts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderDiscountType, orderDiscountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderDiscountType, orderDiscountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert order_discounts")
	}

	if !cached {
		orderDiscountUpsertCacheMut.Lock()
		orderDiscountUpsertCache[key] = cache
		orderDiscountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderDiscount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderDiscount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderDiscount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderDiscountPrimaryKeyMapping)
	sql := "DELETE FROM \"order_discounts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from order_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for order_discounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderDiscountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderDiscountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order_discounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_discounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderDiscountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderDiscountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_discounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderDiscountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orderDiscount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_discounts")
	}

	if len(orderDiscountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderDiscount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderDiscount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderDiscountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderDiscountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderDiscountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_discounts\".* FROM \"order_discounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderDiscountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderDiscountSlice")
	}

	*o = slice

	return nil
}

// OrderDiscountExists checks if the OrderDiscount row exists.
func OrderDiscountExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_discounts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if order_discounts exists")
	}

	return exists, nil
}

// Exists checks if the OrderDiscount row exists.
func (o *OrderDiscount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderDiscountExists(ctx, exec, o.ID)
}
