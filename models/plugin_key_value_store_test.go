// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPluginKeyValueStores(t *testing.T) {
	t.Parallel()

	query := PluginKeyValueStores()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPluginKeyValueStoresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PluginKeyValueStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPluginKeyValueStoresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PluginKeyValueStores().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PluginKeyValueStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPluginKeyValueStoresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PluginKeyValueStoreSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PluginKeyValueStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPluginKeyValueStoresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PluginKeyValueStoreExists(ctx, tx, o.PluginID)
	if err != nil {
		t.Errorf("Unable to check if PluginKeyValueStore exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PluginKeyValueStoreExists to return true, but got false.")
	}
}

func testPluginKeyValueStoresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pluginKeyValueStoreFound, err := FindPluginKeyValueStore(ctx, tx, o.PluginID)
	if err != nil {
		t.Error(err)
	}

	if pluginKeyValueStoreFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPluginKeyValueStoresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PluginKeyValueStores().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPluginKeyValueStoresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PluginKeyValueStores().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPluginKeyValueStoresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pluginKeyValueStoreOne := &PluginKeyValueStore{}
	pluginKeyValueStoreTwo := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, pluginKeyValueStoreOne, pluginKeyValueStoreDBTypes, false, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}
	if err = randomize.Struct(seed, pluginKeyValueStoreTwo, pluginKeyValueStoreDBTypes, false, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pluginKeyValueStoreOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pluginKeyValueStoreTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PluginKeyValueStores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPluginKeyValueStoresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pluginKeyValueStoreOne := &PluginKeyValueStore{}
	pluginKeyValueStoreTwo := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, pluginKeyValueStoreOne, pluginKeyValueStoreDBTypes, false, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}
	if err = randomize.Struct(seed, pluginKeyValueStoreTwo, pluginKeyValueStoreDBTypes, false, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pluginKeyValueStoreOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pluginKeyValueStoreTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PluginKeyValueStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pluginKeyValueStoreBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PluginKeyValueStore) error {
	*o = PluginKeyValueStore{}
	return nil
}

func pluginKeyValueStoreAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PluginKeyValueStore) error {
	*o = PluginKeyValueStore{}
	return nil
}

func pluginKeyValueStoreAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PluginKeyValueStore) error {
	*o = PluginKeyValueStore{}
	return nil
}

func pluginKeyValueStoreBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PluginKeyValueStore) error {
	*o = PluginKeyValueStore{}
	return nil
}

func pluginKeyValueStoreAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PluginKeyValueStore) error {
	*o = PluginKeyValueStore{}
	return nil
}

func pluginKeyValueStoreBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PluginKeyValueStore) error {
	*o = PluginKeyValueStore{}
	return nil
}

func pluginKeyValueStoreAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PluginKeyValueStore) error {
	*o = PluginKeyValueStore{}
	return nil
}

func pluginKeyValueStoreBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PluginKeyValueStore) error {
	*o = PluginKeyValueStore{}
	return nil
}

func pluginKeyValueStoreAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PluginKeyValueStore) error {
	*o = PluginKeyValueStore{}
	return nil
}

func testPluginKeyValueStoresHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PluginKeyValueStore{}
	o := &PluginKeyValueStore{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore object: %s", err)
	}

	AddPluginKeyValueStoreHook(boil.BeforeInsertHook, pluginKeyValueStoreBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pluginKeyValueStoreBeforeInsertHooks = []PluginKeyValueStoreHook{}

	AddPluginKeyValueStoreHook(boil.AfterInsertHook, pluginKeyValueStoreAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pluginKeyValueStoreAfterInsertHooks = []PluginKeyValueStoreHook{}

	AddPluginKeyValueStoreHook(boil.AfterSelectHook, pluginKeyValueStoreAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pluginKeyValueStoreAfterSelectHooks = []PluginKeyValueStoreHook{}

	AddPluginKeyValueStoreHook(boil.BeforeUpdateHook, pluginKeyValueStoreBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pluginKeyValueStoreBeforeUpdateHooks = []PluginKeyValueStoreHook{}

	AddPluginKeyValueStoreHook(boil.AfterUpdateHook, pluginKeyValueStoreAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pluginKeyValueStoreAfterUpdateHooks = []PluginKeyValueStoreHook{}

	AddPluginKeyValueStoreHook(boil.BeforeDeleteHook, pluginKeyValueStoreBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pluginKeyValueStoreBeforeDeleteHooks = []PluginKeyValueStoreHook{}

	AddPluginKeyValueStoreHook(boil.AfterDeleteHook, pluginKeyValueStoreAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pluginKeyValueStoreAfterDeleteHooks = []PluginKeyValueStoreHook{}

	AddPluginKeyValueStoreHook(boil.BeforeUpsertHook, pluginKeyValueStoreBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pluginKeyValueStoreBeforeUpsertHooks = []PluginKeyValueStoreHook{}

	AddPluginKeyValueStoreHook(boil.AfterUpsertHook, pluginKeyValueStoreAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pluginKeyValueStoreAfterUpsertHooks = []PluginKeyValueStoreHook{}
}

func testPluginKeyValueStoresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PluginKeyValueStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPluginKeyValueStoresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pluginKeyValueStoreColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PluginKeyValueStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPluginKeyValueStoresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPluginKeyValueStoresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PluginKeyValueStoreSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPluginKeyValueStoresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PluginKeyValueStores().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pluginKeyValueStoreDBTypes = map[string]string{`PluginID`: `character varying`, `PKey`: `character varying`, `PValue`: `bytea`, `ExpireAt`: `bigint`}
	_                          = bytes.MinRead
)

func testPluginKeyValueStoresUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pluginKeyValueStorePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pluginKeyValueStoreAllColumns) == len(pluginKeyValueStorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PluginKeyValueStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPluginKeyValueStoresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pluginKeyValueStoreAllColumns) == len(pluginKeyValueStorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PluginKeyValueStore{}
	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStoreColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PluginKeyValueStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pluginKeyValueStoreDBTypes, true, pluginKeyValueStorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pluginKeyValueStoreAllColumns, pluginKeyValueStorePrimaryKeyColumns) {
		fields = pluginKeyValueStoreAllColumns
	} else {
		fields = strmangle.SetComplement(
			pluginKeyValueStoreAllColumns,
			pluginKeyValueStorePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PluginKeyValueStoreSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPluginKeyValueStoresUpsert(t *testing.T) {
	t.Parallel()

	if len(pluginKeyValueStoreAllColumns) == len(pluginKeyValueStorePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PluginKeyValueStore{}
	if err = randomize.Struct(seed, &o, pluginKeyValueStoreDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PluginKeyValueStore: %s", err)
	}

	count, err := PluginKeyValueStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pluginKeyValueStoreDBTypes, false, pluginKeyValueStorePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PluginKeyValueStore struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PluginKeyValueStore: %s", err)
	}

	count, err = PluginKeyValueStores().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
