// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSaleCategories(t *testing.T) {
	t.Parallel()

	query := SaleCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSaleCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SaleCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSaleCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SaleCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SaleCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSaleCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SaleCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SaleCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSaleCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SaleCategoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SaleCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SaleCategoryExists to return true, but got false.")
	}
}

func testSaleCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	saleCategoryFound, err := FindSaleCategory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if saleCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSaleCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SaleCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSaleCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SaleCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSaleCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	saleCategoryOne := &SaleCategory{}
	saleCategoryTwo := &SaleCategory{}
	if err = randomize.Struct(seed, saleCategoryOne, saleCategoryDBTypes, false, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, saleCategoryTwo, saleCategoryDBTypes, false, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = saleCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = saleCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SaleCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSaleCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	saleCategoryOne := &SaleCategory{}
	saleCategoryTwo := &SaleCategory{}
	if err = randomize.Struct(seed, saleCategoryOne, saleCategoryDBTypes, false, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, saleCategoryTwo, saleCategoryDBTypes, false, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = saleCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = saleCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func saleCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SaleCategory) error {
	*o = SaleCategory{}
	return nil
}

func saleCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SaleCategory) error {
	*o = SaleCategory{}
	return nil
}

func saleCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SaleCategory) error {
	*o = SaleCategory{}
	return nil
}

func saleCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SaleCategory) error {
	*o = SaleCategory{}
	return nil
}

func saleCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SaleCategory) error {
	*o = SaleCategory{}
	return nil
}

func saleCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SaleCategory) error {
	*o = SaleCategory{}
	return nil
}

func saleCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SaleCategory) error {
	*o = SaleCategory{}
	return nil
}

func saleCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SaleCategory) error {
	*o = SaleCategory{}
	return nil
}

func saleCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SaleCategory) error {
	*o = SaleCategory{}
	return nil
}

func testSaleCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SaleCategory{}
	o := &SaleCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SaleCategory object: %s", err)
	}

	AddSaleCategoryHook(boil.BeforeInsertHook, saleCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	saleCategoryBeforeInsertHooks = []SaleCategoryHook{}

	AddSaleCategoryHook(boil.AfterInsertHook, saleCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	saleCategoryAfterInsertHooks = []SaleCategoryHook{}

	AddSaleCategoryHook(boil.AfterSelectHook, saleCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	saleCategoryAfterSelectHooks = []SaleCategoryHook{}

	AddSaleCategoryHook(boil.BeforeUpdateHook, saleCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	saleCategoryBeforeUpdateHooks = []SaleCategoryHook{}

	AddSaleCategoryHook(boil.AfterUpdateHook, saleCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	saleCategoryAfterUpdateHooks = []SaleCategoryHook{}

	AddSaleCategoryHook(boil.BeforeDeleteHook, saleCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	saleCategoryBeforeDeleteHooks = []SaleCategoryHook{}

	AddSaleCategoryHook(boil.AfterDeleteHook, saleCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	saleCategoryAfterDeleteHooks = []SaleCategoryHook{}

	AddSaleCategoryHook(boil.BeforeUpsertHook, saleCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	saleCategoryBeforeUpsertHooks = []SaleCategoryHook{}

	AddSaleCategoryHook(boil.AfterUpsertHook, saleCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	saleCategoryAfterUpsertHooks = []SaleCategoryHook{}
}

func testSaleCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSaleCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(saleCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SaleCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSaleCategoryToOneCategoryUsingCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SaleCategory
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CategoryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCategoryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Category) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SaleCategorySlice{&local}
	if err = local.L.LoadCategory(ctx, tx, false, (*[]*SaleCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSaleCategoryToOneSaleUsingSale(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SaleCategory
	var foreign Sale

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, saleDBTypes, false, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SaleID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sale().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddSaleHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SaleCategorySlice{&local}
	if err = local.L.LoadSale(ctx, tx, false, (*[]*SaleCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sale == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sale = nil
	if err = local.L.LoadSale(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sale == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSaleCategoryToOneSetOpCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SaleCategory
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleCategoryDBTypes, false, strmangle.SetComplement(saleCategoryPrimaryKeyColumns, saleCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SaleCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CategoryID))
		reflect.Indirect(reflect.ValueOf(&a.CategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.CategoryID, x.ID)
		}
	}
}

func testSaleCategoryToOneRemoveOpCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SaleCategory
	var b Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleCategoryDBTypes, false, strmangle.SetComplement(saleCategoryPrimaryKeyColumns, saleCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCategory(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCategory(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Category().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Category != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CategoryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SaleCategories) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSaleCategoryToOneSetOpSaleUsingSale(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SaleCategory
	var b, c Sale

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleCategoryDBTypes, false, strmangle.SetComplement(saleCategoryPrimaryKeyColumns, saleCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Sale{&b, &c} {
		err = a.SetSale(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sale != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SaleCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SaleID, x.ID) {
			t.Error("foreign key was wrong value", a.SaleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SaleID))
		reflect.Indirect(reflect.ValueOf(&a.SaleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SaleID, x.ID) {
			t.Error("foreign key was wrong value", a.SaleID, x.ID)
		}
	}
}

func testSaleCategoryToOneRemoveOpSaleUsingSale(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SaleCategory
	var b Sale

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleCategoryDBTypes, false, strmangle.SetComplement(saleCategoryPrimaryKeyColumns, saleCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSale(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSale(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Sale().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Sale != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SaleID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SaleCategories) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSaleCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSaleCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SaleCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSaleCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SaleCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	saleCategoryDBTypes = map[string]string{`ID`: `character varying`, `SaleID`: `character varying`, `CategoryID`: `character varying`, `CreateAt`: `bigint`}
	_                   = bytes.MinRead
)

func testSaleCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(saleCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(saleCategoryAllColumns) == len(saleCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSaleCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(saleCategoryAllColumns) == len(saleCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SaleCategory{}
	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, saleCategoryDBTypes, true, saleCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(saleCategoryAllColumns, saleCategoryPrimaryKeyColumns) {
		fields = saleCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			saleCategoryAllColumns,
			saleCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SaleCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSaleCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(saleCategoryAllColumns) == len(saleCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SaleCategory{}
	if err = randomize.Struct(seed, &o, saleCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SaleCategory: %s", err)
	}

	count, err := SaleCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, saleCategoryDBTypes, false, saleCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SaleCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SaleCategory: %s", err)
	}

	count, err = SaleCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
