// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTermsOfServices(t *testing.T) {
	t.Parallel()

	query := TermsOfServices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTermsOfServicesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TermsOfServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTermsOfServicesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TermsOfServices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TermsOfServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTermsOfServicesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TermsOfServiceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TermsOfServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTermsOfServicesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TermsOfServiceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TermsOfService exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TermsOfServiceExists to return true, but got false.")
	}
}

func testTermsOfServicesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	termsOfServiceFound, err := FindTermsOfService(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if termsOfServiceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTermsOfServicesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TermsOfServices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTermsOfServicesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TermsOfServices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTermsOfServicesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	termsOfServiceOne := &TermsOfService{}
	termsOfServiceTwo := &TermsOfService{}
	if err = randomize.Struct(seed, termsOfServiceOne, termsOfServiceDBTypes, false, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}
	if err = randomize.Struct(seed, termsOfServiceTwo, termsOfServiceDBTypes, false, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = termsOfServiceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = termsOfServiceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TermsOfServices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTermsOfServicesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	termsOfServiceOne := &TermsOfService{}
	termsOfServiceTwo := &TermsOfService{}
	if err = randomize.Struct(seed, termsOfServiceOne, termsOfServiceDBTypes, false, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}
	if err = randomize.Struct(seed, termsOfServiceTwo, termsOfServiceDBTypes, false, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = termsOfServiceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = termsOfServiceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TermsOfServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func termsOfServiceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TermsOfService) error {
	*o = TermsOfService{}
	return nil
}

func termsOfServiceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TermsOfService) error {
	*o = TermsOfService{}
	return nil
}

func termsOfServiceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TermsOfService) error {
	*o = TermsOfService{}
	return nil
}

func termsOfServiceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TermsOfService) error {
	*o = TermsOfService{}
	return nil
}

func termsOfServiceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TermsOfService) error {
	*o = TermsOfService{}
	return nil
}

func termsOfServiceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TermsOfService) error {
	*o = TermsOfService{}
	return nil
}

func termsOfServiceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TermsOfService) error {
	*o = TermsOfService{}
	return nil
}

func termsOfServiceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TermsOfService) error {
	*o = TermsOfService{}
	return nil
}

func termsOfServiceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TermsOfService) error {
	*o = TermsOfService{}
	return nil
}

func testTermsOfServicesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TermsOfService{}
	o := &TermsOfService{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TermsOfService object: %s", err)
	}

	AddTermsOfServiceHook(boil.BeforeInsertHook, termsOfServiceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	termsOfServiceBeforeInsertHooks = []TermsOfServiceHook{}

	AddTermsOfServiceHook(boil.AfterInsertHook, termsOfServiceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	termsOfServiceAfterInsertHooks = []TermsOfServiceHook{}

	AddTermsOfServiceHook(boil.AfterSelectHook, termsOfServiceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	termsOfServiceAfterSelectHooks = []TermsOfServiceHook{}

	AddTermsOfServiceHook(boil.BeforeUpdateHook, termsOfServiceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	termsOfServiceBeforeUpdateHooks = []TermsOfServiceHook{}

	AddTermsOfServiceHook(boil.AfterUpdateHook, termsOfServiceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	termsOfServiceAfterUpdateHooks = []TermsOfServiceHook{}

	AddTermsOfServiceHook(boil.BeforeDeleteHook, termsOfServiceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	termsOfServiceBeforeDeleteHooks = []TermsOfServiceHook{}

	AddTermsOfServiceHook(boil.AfterDeleteHook, termsOfServiceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	termsOfServiceAfterDeleteHooks = []TermsOfServiceHook{}

	AddTermsOfServiceHook(boil.BeforeUpsertHook, termsOfServiceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	termsOfServiceBeforeUpsertHooks = []TermsOfServiceHook{}

	AddTermsOfServiceHook(boil.AfterUpsertHook, termsOfServiceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	termsOfServiceAfterUpsertHooks = []TermsOfServiceHook{}
}

func testTermsOfServicesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TermsOfServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTermsOfServicesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(termsOfServiceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TermsOfServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTermsOfServicesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTermsOfServicesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TermsOfServiceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTermsOfServicesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TermsOfServices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	termsOfServiceDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `bigint`, `UserID`: `uuid`, `Text`: `character varying`}
	_                     = bytes.MinRead
)

func testTermsOfServicesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(termsOfServicePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(termsOfServiceAllColumns) == len(termsOfServicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TermsOfServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTermsOfServicesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(termsOfServiceAllColumns) == len(termsOfServicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TermsOfService{}
	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TermsOfServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, termsOfServiceDBTypes, true, termsOfServicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(termsOfServiceAllColumns, termsOfServicePrimaryKeyColumns) {
		fields = termsOfServiceAllColumns
	} else {
		fields = strmangle.SetComplement(
			termsOfServiceAllColumns,
			termsOfServicePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TermsOfServiceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTermsOfServicesUpsert(t *testing.T) {
	t.Parallel()

	if len(termsOfServiceAllColumns) == len(termsOfServicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TermsOfService{}
	if err = randomize.Struct(seed, &o, termsOfServiceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TermsOfService: %s", err)
	}

	count, err := TermsOfServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, termsOfServiceDBTypes, false, termsOfServicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TermsOfService struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TermsOfService: %s", err)
	}

	count, err = TermsOfServices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
