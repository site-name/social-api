// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Page is an object representing the database table.
type Page struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title           null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Slug            null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	PageTypeID      null.String `boil:"page_type_id" json:"page_type_id,omitempty" toml:"page_type_id" yaml:"page_type_id,omitempty"`
	Content         null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	CreateAt        null.Int64  `boil:"create_at" json:"create_at,omitempty" toml:"create_at" yaml:"create_at,omitempty"`
	Metadata        null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata null.JSON   `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`
	PublicationDate null.Time   `boil:"publication_date" json:"publication_date,omitempty" toml:"publication_date" yaml:"publication_date,omitempty"`
	IsPublished     null.Bool   `boil:"is_published" json:"is_published,omitempty" toml:"is_published" yaml:"is_published,omitempty"`
	SeoTitle        null.String `boil:"seo_title" json:"seo_title,omitempty" toml:"seo_title" yaml:"seo_title,omitempty"`
	SeoDescription  null.String `boil:"seo_description" json:"seo_description,omitempty" toml:"seo_description" yaml:"seo_description,omitempty"`

	R *pageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L pageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PageColumns = struct {
	ID              string
	Title           string
	Slug            string
	PageTypeID      string
	Content         string
	CreateAt        string
	Metadata        string
	PrivateMetadata string
	PublicationDate string
	IsPublished     string
	SeoTitle        string
	SeoDescription  string
}{
	ID:              "id",
	Title:           "title",
	Slug:            "slug",
	PageTypeID:      "page_type_id",
	Content:         "content",
	CreateAt:        "create_at",
	Metadata:        "metadata",
	PrivateMetadata: "private_metadata",
	PublicationDate: "publication_date",
	IsPublished:     "is_published",
	SeoTitle:        "seo_title",
	SeoDescription:  "seo_description",
}

var PageTableColumns = struct {
	ID              string
	Title           string
	Slug            string
	PageTypeID      string
	Content         string
	CreateAt        string
	Metadata        string
	PrivateMetadata string
	PublicationDate string
	IsPublished     string
	SeoTitle        string
	SeoDescription  string
}{
	ID:              "pages.id",
	Title:           "pages.title",
	Slug:            "pages.slug",
	PageTypeID:      "pages.page_type_id",
	Content:         "pages.content",
	CreateAt:        "pages.create_at",
	Metadata:        "pages.metadata",
	PrivateMetadata: "pages.private_metadata",
	PublicationDate: "pages.publication_date",
	IsPublished:     "pages.is_published",
	SeoTitle:        "pages.seo_title",
	SeoDescription:  "pages.seo_description",
}

// Generated where

var PageWhere = struct {
	ID              whereHelperstring
	Title           whereHelpernull_String
	Slug            whereHelpernull_String
	PageTypeID      whereHelpernull_String
	Content         whereHelpernull_String
	CreateAt        whereHelpernull_Int64
	Metadata        whereHelpernull_JSON
	PrivateMetadata whereHelpernull_JSON
	PublicationDate whereHelpernull_Time
	IsPublished     whereHelpernull_Bool
	SeoTitle        whereHelpernull_String
	SeoDescription  whereHelpernull_String
}{
	ID:              whereHelperstring{field: "\"pages\".\"id\""},
	Title:           whereHelpernull_String{field: "\"pages\".\"title\""},
	Slug:            whereHelpernull_String{field: "\"pages\".\"slug\""},
	PageTypeID:      whereHelpernull_String{field: "\"pages\".\"page_type_id\""},
	Content:         whereHelpernull_String{field: "\"pages\".\"content\""},
	CreateAt:        whereHelpernull_Int64{field: "\"pages\".\"create_at\""},
	Metadata:        whereHelpernull_JSON{field: "\"pages\".\"metadata\""},
	PrivateMetadata: whereHelpernull_JSON{field: "\"pages\".\"private_metadata\""},
	PublicationDate: whereHelpernull_Time{field: "\"pages\".\"publication_date\""},
	IsPublished:     whereHelpernull_Bool{field: "\"pages\".\"is_published\""},
	SeoTitle:        whereHelpernull_String{field: "\"pages\".\"seo_title\""},
	SeoDescription:  whereHelpernull_String{field: "\"pages\".\"seo_description\""},
}

// PageRels is where relationship names are stored.
var PageRels = struct {
	PageType               string
	AssignedPageAttributes string
	MenuItems              string
	PageTranslations       string
}{
	PageType:               "PageType",
	AssignedPageAttributes: "AssignedPageAttributes",
	MenuItems:              "MenuItems",
	PageTranslations:       "PageTranslations",
}

// pageR is where relationships are stored.
type pageR struct {
	PageType               *PageType                  `boil:"PageType" json:"PageType" toml:"PageType" yaml:"PageType"`
	AssignedPageAttributes AssignedPageAttributeSlice `boil:"AssignedPageAttributes" json:"AssignedPageAttributes" toml:"AssignedPageAttributes" yaml:"AssignedPageAttributes"`
	MenuItems              MenuItemSlice              `boil:"MenuItems" json:"MenuItems" toml:"MenuItems" yaml:"MenuItems"`
	PageTranslations       PageTranslationSlice       `boil:"PageTranslations" json:"PageTranslations" toml:"PageTranslations" yaml:"PageTranslations"`
}

// NewStruct creates a new relationship struct
func (*pageR) NewStruct() *pageR {
	return &pageR{}
}

func (r *pageR) GetPageType() *PageType {
	if r == nil {
		return nil
	}
	return r.PageType
}

func (r *pageR) GetAssignedPageAttributes() AssignedPageAttributeSlice {
	if r == nil {
		return nil
	}
	return r.AssignedPageAttributes
}

func (r *pageR) GetMenuItems() MenuItemSlice {
	if r == nil {
		return nil
	}
	return r.MenuItems
}

func (r *pageR) GetPageTranslations() PageTranslationSlice {
	if r == nil {
		return nil
	}
	return r.PageTranslations
}

// pageL is where Load methods for each relationship are stored.
type pageL struct{}

var (
	pageAllColumns            = []string{"id", "title", "slug", "page_type_id", "content", "create_at", "metadata", "private_metadata", "publication_date", "is_published", "seo_title", "seo_description"}
	pageColumnsWithoutDefault = []string{"id"}
	pageColumnsWithDefault    = []string{"title", "slug", "page_type_id", "content", "create_at", "metadata", "private_metadata", "publication_date", "is_published", "seo_title", "seo_description"}
	pagePrimaryKeyColumns     = []string{"id"}
	pageGeneratedColumns      = []string{}
)

type (
	// PageSlice is an alias for a slice of pointers to Page.
	// This should almost always be used instead of []Page.
	PageSlice []*Page
	// PageHook is the signature for custom Page hook methods
	PageHook func(context.Context, boil.ContextExecutor, *Page) error

	pageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pageType                 = reflect.TypeOf(&Page{})
	pageMapping              = queries.MakeStructMapping(pageType)
	pagePrimaryKeyMapping, _ = queries.BindMapping(pageType, pageMapping, pagePrimaryKeyColumns)
	pageInsertCacheMut       sync.RWMutex
	pageInsertCache          = make(map[string]insertCache)
	pageUpdateCacheMut       sync.RWMutex
	pageUpdateCache          = make(map[string]updateCache)
	pageUpsertCacheMut       sync.RWMutex
	pageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var pageAfterSelectHooks []PageHook

var pageBeforeInsertHooks []PageHook
var pageAfterInsertHooks []PageHook

var pageBeforeUpdateHooks []PageHook
var pageAfterUpdateHooks []PageHook

var pageBeforeDeleteHooks []PageHook
var pageAfterDeleteHooks []PageHook

var pageBeforeUpsertHooks []PageHook
var pageAfterUpsertHooks []PageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Page) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Page) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Page) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Page) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Page) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Page) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Page) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Page) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Page) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPageHook registers your hook function for all future operations.
func AddPageHook(hookPoint boil.HookPoint, pageHook PageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pageAfterSelectHooks = append(pageAfterSelectHooks, pageHook)
	case boil.BeforeInsertHook:
		pageBeforeInsertHooks = append(pageBeforeInsertHooks, pageHook)
	case boil.AfterInsertHook:
		pageAfterInsertHooks = append(pageAfterInsertHooks, pageHook)
	case boil.BeforeUpdateHook:
		pageBeforeUpdateHooks = append(pageBeforeUpdateHooks, pageHook)
	case boil.AfterUpdateHook:
		pageAfterUpdateHooks = append(pageAfterUpdateHooks, pageHook)
	case boil.BeforeDeleteHook:
		pageBeforeDeleteHooks = append(pageBeforeDeleteHooks, pageHook)
	case boil.AfterDeleteHook:
		pageAfterDeleteHooks = append(pageAfterDeleteHooks, pageHook)
	case boil.BeforeUpsertHook:
		pageBeforeUpsertHooks = append(pageBeforeUpsertHooks, pageHook)
	case boil.AfterUpsertHook:
		pageAfterUpsertHooks = append(pageAfterUpsertHooks, pageHook)
	}
}

// One returns a single page record from the query.
func (q pageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Page, error) {
	o := &Page{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for pages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Page records from the query.
func (q pageQuery) All(ctx context.Context, exec boil.ContextExecutor) (PageSlice, error) {
	var o []*Page

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Page slice")
	}

	if len(pageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Page records in the query.
func (q pageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count pages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q pageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if pages exists")
	}

	return count > 0, nil
}

// PageType pointed to by the foreign key.
func (o *Page) PageType(mods ...qm.QueryMod) pageTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PageTypeID),
	}

	queryMods = append(queryMods, mods...)

	return PageTypes(queryMods...)
}

// AssignedPageAttributes retrieves all the assigned_page_attribute's AssignedPageAttributes with an executor.
func (o *Page) AssignedPageAttributes(mods ...qm.QueryMod) assignedPageAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_page_attributes\".\"page_id\"=?", o.ID),
	)

	return AssignedPageAttributes(queryMods...)
}

// MenuItems retrieves all the menu_item's MenuItems with an executor.
func (o *Page) MenuItems(mods ...qm.QueryMod) menuItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"menu_items\".\"page_id\"=?", o.ID),
	)

	return MenuItems(queryMods...)
}

// PageTranslations retrieves all the page_translation's PageTranslations with an executor.
func (o *Page) PageTranslations(mods ...qm.QueryMod) pageTranslationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"page_translations\".\"page_id\"=?", o.ID),
	)

	return PageTranslations(queryMods...)
}

// LoadPageType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (pageL) LoadPageType(ctx context.Context, e boil.ContextExecutor, singular bool, maybePage interface{}, mods queries.Applicator) error {
	var slice []*Page
	var object *Page

	if singular {
		var ok bool
		object, ok = maybePage.(*Page)
		if !ok {
			object = new(Page)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePage))
			}
		}
	} else {
		s, ok := maybePage.(*[]*Page)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageR{}
		}
		if !queries.IsNil(object.PageTypeID) {
			args = append(args, object.PageTypeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PageTypeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PageTypeID) {
				args = append(args, obj.PageTypeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`page_types`),
		qm.WhereIn(`page_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PageType")
	}

	var resultSlice []*PageType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PageType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for page_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for page_types")
	}

	if len(pageTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PageType = foreign
		if foreign.R == nil {
			foreign.R = &pageTypeR{}
		}
		foreign.R.Pages = append(foreign.R.Pages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PageTypeID, foreign.ID) {
				local.R.PageType = foreign
				if foreign.R == nil {
					foreign.R = &pageTypeR{}
				}
				foreign.R.Pages = append(foreign.R.Pages, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignedPageAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pageL) LoadAssignedPageAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybePage interface{}, mods queries.Applicator) error {
	var slice []*Page
	var object *Page

	if singular {
		var ok bool
		object, ok = maybePage.(*Page)
		if !ok {
			object = new(Page)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePage))
			}
		}
	} else {
		s, ok := maybePage.(*[]*Page)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_page_attributes`),
		qm.WhereIn(`assigned_page_attributes.page_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_page_attributes")
	}

	var resultSlice []*AssignedPageAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_page_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_page_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_page_attributes")
	}

	if len(assignedPageAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignedPageAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedPageAttributeR{}
			}
			foreign.R.Page = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PageID {
				local.R.AssignedPageAttributes = append(local.R.AssignedPageAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &assignedPageAttributeR{}
				}
				foreign.R.Page = local
				break
			}
		}
	}

	return nil
}

// LoadMenuItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pageL) LoadMenuItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybePage interface{}, mods queries.Applicator) error {
	var slice []*Page
	var object *Page

	if singular {
		var ok bool
		object, ok = maybePage.(*Page)
		if !ok {
			object = new(Page)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePage))
			}
		}
	} else {
		s, ok := maybePage.(*[]*Page)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menu_items`),
		qm.WhereIn(`menu_items.page_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_items")
	}

	var resultSlice []*MenuItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_items")
	}

	if len(menuItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MenuItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuItemR{}
			}
			foreign.R.Page = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PageID) {
				local.R.MenuItems = append(local.R.MenuItems, foreign)
				if foreign.R == nil {
					foreign.R = &menuItemR{}
				}
				foreign.R.Page = local
				break
			}
		}
	}

	return nil
}

// LoadPageTranslations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (pageL) LoadPageTranslations(ctx context.Context, e boil.ContextExecutor, singular bool, maybePage interface{}, mods queries.Applicator) error {
	var slice []*Page
	var object *Page

	if singular {
		var ok bool
		object, ok = maybePage.(*Page)
		if !ok {
			object = new(Page)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePage))
			}
		}
	} else {
		s, ok := maybePage.(*[]*Page)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &pageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &pageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`page_translations`),
		qm.WhereIn(`page_translations.page_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load page_translations")
	}

	var resultSlice []*PageTranslation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice page_translations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on page_translations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for page_translations")
	}

	if len(pageTranslationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PageTranslations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &pageTranslationR{}
			}
			foreign.R.Page = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.PageID) {
				local.R.PageTranslations = append(local.R.PageTranslations, foreign)
				if foreign.R == nil {
					foreign.R = &pageTranslationR{}
				}
				foreign.R.Page = local
				break
			}
		}
	}

	return nil
}

// SetPageType of the page to the related item.
// Sets o.R.PageType to related.
// Adds o to related.R.Pages.
func (o *Page) SetPageType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PageType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"pages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"page_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, pagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PageTypeID, related.ID)
	if o.R == nil {
		o.R = &pageR{
			PageType: related,
		}
	} else {
		o.R.PageType = related
	}

	if related.R == nil {
		related.R = &pageTypeR{
			Pages: PageSlice{o},
		}
	} else {
		related.R.Pages = append(related.R.Pages, o)
	}

	return nil
}

// RemovePageType relationship.
// Sets o.R.PageType to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Page) RemovePageType(ctx context.Context, exec boil.ContextExecutor, related *PageType) error {
	var err error

	queries.SetScanner(&o.PageTypeID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("page_type_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PageType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Pages {
		if queries.Equal(o.PageTypeID, ri.PageTypeID) {
			continue
		}

		ln := len(related.R.Pages)
		if ln > 1 && i < ln-1 {
			related.R.Pages[i] = related.R.Pages[ln-1]
		}
		related.R.Pages = related.R.Pages[:ln-1]
		break
	}
	return nil
}

// AddAssignedPageAttributes adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.AssignedPageAttributes.
// Sets related.R.Page appropriately.
func (o *Page) AddAssignedPageAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedPageAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PageID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_page_attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
				strmangle.WhereClause("\"", "\"", 2, assignedPageAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PageID = o.ID
		}
	}

	if o.R == nil {
		o.R = &pageR{
			AssignedPageAttributes: related,
		}
	} else {
		o.R.AssignedPageAttributes = append(o.R.AssignedPageAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedPageAttributeR{
				Page: o,
			}
		} else {
			rel.R.Page = o
		}
	}
	return nil
}

// AddMenuItems adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.MenuItems.
// Sets related.R.Page appropriately.
func (o *Page) AddMenuItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PageID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"menu_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
				strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PageID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &pageR{
			MenuItems: related,
		}
	} else {
		o.R.MenuItems = append(o.R.MenuItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuItemR{
				Page: o,
			}
		} else {
			rel.R.Page = o
		}
	}
	return nil
}

// SetMenuItems removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's MenuItems accordingly.
// Replaces o.R.MenuItems with related.
// Sets related.R.Page's MenuItems accordingly.
func (o *Page) SetMenuItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItem) error {
	query := "update \"menu_items\" set \"page_id\" = null where \"page_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MenuItems {
			queries.SetScanner(&rel.PageID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Page = nil
		}
		o.R.MenuItems = nil
	}

	return o.AddMenuItems(ctx, exec, insert, related...)
}

// RemoveMenuItems relationships from objects passed in.
// Removes related items from R.MenuItems (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
func (o *Page) RemoveMenuItems(ctx context.Context, exec boil.ContextExecutor, related ...*MenuItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PageID, nil)
		if rel.R != nil {
			rel.R.Page = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("page_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MenuItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.MenuItems)
			if ln > 1 && i < ln-1 {
				o.R.MenuItems[i] = o.R.MenuItems[ln-1]
			}
			o.R.MenuItems = o.R.MenuItems[:ln-1]
			break
		}
	}

	return nil
}

// AddPageTranslations adds the given related objects to the existing relationships
// of the page, optionally inserting them as new records.
// Appends related to o.R.PageTranslations.
// Sets related.R.Page appropriately.
func (o *Page) AddPageTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PageTranslation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PageID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"page_translations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
				strmangle.WhereClause("\"", "\"", 2, pageTranslationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PageID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &pageR{
			PageTranslations: related,
		}
	} else {
		o.R.PageTranslations = append(o.R.PageTranslations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &pageTranslationR{
				Page: o,
			}
		} else {
			rel.R.Page = o
		}
	}
	return nil
}

// SetPageTranslations removes all previously related items of the
// page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Page's PageTranslations accordingly.
// Replaces o.R.PageTranslations with related.
// Sets related.R.Page's PageTranslations accordingly.
func (o *Page) SetPageTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PageTranslation) error {
	query := "update \"page_translations\" set \"page_id\" = null where \"page_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PageTranslations {
			queries.SetScanner(&rel.PageID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Page = nil
		}
		o.R.PageTranslations = nil
	}

	return o.AddPageTranslations(ctx, exec, insert, related...)
}

// RemovePageTranslations relationships from objects passed in.
// Removes related items from R.PageTranslations (uses pointer comparison, removal does not keep order)
// Sets related.R.Page.
func (o *Page) RemovePageTranslations(ctx context.Context, exec boil.ContextExecutor, related ...*PageTranslation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PageID, nil)
		if rel.R != nil {
			rel.R.Page = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("page_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PageTranslations {
			if rel != ri {
				continue
			}

			ln := len(o.R.PageTranslations)
			if ln > 1 && i < ln-1 {
				o.R.PageTranslations[i] = o.R.PageTranslations[ln-1]
			}
			o.R.PageTranslations = o.R.PageTranslations[:ln-1]
			break
		}
	}

	return nil
}

// Pages retrieves all the records using an executor.
func Pages(mods ...qm.QueryMod) pageQuery {
	mods = append(mods, qm.From("\"pages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pages\".*"})
	}

	return pageQuery{q}
}

// FindPage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPage(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Page, error) {
	pageObj := &Page{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"pages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, pageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from pages")
	}

	if err = pageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return pageObj, err
	}

	return pageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Page) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	pageInsertCacheMut.RLock()
	cache, cached := pageInsertCache[key]
	pageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			pageAllColumns,
			pageColumnsWithDefault,
			pageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(pageType, pageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(pageType, pageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"pages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"pages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into pages")
	}

	if !cached {
		pageInsertCacheMut.Lock()
		pageInsertCache[key] = cache
		pageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Page.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Page) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	pageUpdateCacheMut.RLock()
	cache, cached := pageUpdateCache[key]
	pageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			pageAllColumns,
			pagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update pages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"pages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, pagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(pageType, pageMapping, append(wl, pagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update pages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for pages")
	}

	if !cached {
		pageUpdateCacheMut.Lock()
		pageUpdateCache[key] = cache
		pageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q pageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for pages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"pages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, pagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in page slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all page")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Page) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no pages provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(pageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	pageUpsertCacheMut.RLock()
	cache, cached := pageUpsertCache[key]
	pageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			pageAllColumns,
			pageColumnsWithDefault,
			pageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			pageAllColumns,
			pagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert pages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(pagePrimaryKeyColumns))
			copy(conflict, pagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"pages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(pageType, pageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(pageType, pageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert pages")
	}

	if !cached {
		pageUpsertCacheMut.Lock()
		pageUpsertCache[key] = cache
		pageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Page record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Page) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Page provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pagePrimaryKeyMapping)
	sql := "DELETE FROM \"pages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for pages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q pageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no pageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(pageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"pages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from page slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for pages")
	}

	if len(pageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Page) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"pages\".* FROM \"pages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, pagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PageSlice")
	}

	*o = slice

	return nil
}

// PageExists checks if the Page row exists.
func PageExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"pages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if pages exists")
	}

	return exists, nil
}

// Exists checks if the Page row exists.
func (o *Page) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PageExists(ctx, exec, o.ID)
}
