// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVoucherProducts(t *testing.T) {
	t.Parallel()

	query := VoucherProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVoucherProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VoucherProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VoucherProductExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if VoucherProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VoucherProductExists to return true, but got false.")
	}
}

func testVoucherProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	voucherProductFound, err := FindVoucherProduct(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if voucherProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVoucherProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VoucherProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVoucherProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VoucherProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVoucherProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	voucherProductOne := &VoucherProduct{}
	voucherProductTwo := &VoucherProduct{}
	if err = randomize.Struct(seed, voucherProductOne, voucherProductDBTypes, false, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherProductTwo, voucherProductDBTypes, false, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoucherProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVoucherProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	voucherProductOne := &VoucherProduct{}
	voucherProductTwo := &VoucherProduct{}
	if err = randomize.Struct(seed, voucherProductOne, voucherProductDBTypes, false, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherProductTwo, voucherProductDBTypes, false, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func voucherProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherProduct) error {
	*o = VoucherProduct{}
	return nil
}

func voucherProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherProduct) error {
	*o = VoucherProduct{}
	return nil
}

func voucherProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VoucherProduct) error {
	*o = VoucherProduct{}
	return nil
}

func voucherProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoucherProduct) error {
	*o = VoucherProduct{}
	return nil
}

func voucherProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoucherProduct) error {
	*o = VoucherProduct{}
	return nil
}

func voucherProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoucherProduct) error {
	*o = VoucherProduct{}
	return nil
}

func voucherProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoucherProduct) error {
	*o = VoucherProduct{}
	return nil
}

func voucherProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherProduct) error {
	*o = VoucherProduct{}
	return nil
}

func voucherProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherProduct) error {
	*o = VoucherProduct{}
	return nil
}

func testVoucherProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VoucherProduct{}
	o := &VoucherProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, voucherProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VoucherProduct object: %s", err)
	}

	AddVoucherProductHook(boil.BeforeInsertHook, voucherProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	voucherProductBeforeInsertHooks = []VoucherProductHook{}

	AddVoucherProductHook(boil.AfterInsertHook, voucherProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	voucherProductAfterInsertHooks = []VoucherProductHook{}

	AddVoucherProductHook(boil.AfterSelectHook, voucherProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	voucherProductAfterSelectHooks = []VoucherProductHook{}

	AddVoucherProductHook(boil.BeforeUpdateHook, voucherProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	voucherProductBeforeUpdateHooks = []VoucherProductHook{}

	AddVoucherProductHook(boil.AfterUpdateHook, voucherProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	voucherProductAfterUpdateHooks = []VoucherProductHook{}

	AddVoucherProductHook(boil.BeforeDeleteHook, voucherProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	voucherProductBeforeDeleteHooks = []VoucherProductHook{}

	AddVoucherProductHook(boil.AfterDeleteHook, voucherProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	voucherProductAfterDeleteHooks = []VoucherProductHook{}

	AddVoucherProductHook(boil.BeforeUpsertHook, voucherProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	voucherProductBeforeUpsertHooks = []VoucherProductHook{}

	AddVoucherProductHook(boil.AfterUpsertHook, voucherProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	voucherProductAfterUpsertHooks = []VoucherProductHook{}
}

func testVoucherProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(voucherProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherProductToOneProductUsingProductidProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VoucherProduct
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Productid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductidProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VoucherProductSlice{&local}
	if err = local.L.LoadProductidProduct(ctx, tx, false, (*[]*VoucherProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductidProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductidProduct = nil
	if err = local.L.LoadProductidProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductidProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVoucherProductToOneVoucherUsingVoucheridVoucher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VoucherProduct
	var foreign Voucher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, voucherDBTypes, false, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Voucherid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.VoucheridVoucher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddVoucherHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VoucherProductSlice{&local}
	if err = local.L.LoadVoucheridVoucher(ctx, tx, false, (*[]*VoucherProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VoucheridVoucher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VoucheridVoucher = nil
	if err = local.L.LoadVoucheridVoucher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VoucheridVoucher == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVoucherProductToOneSetOpProductUsingProductidProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherProduct
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherProductDBTypes, false, strmangle.SetComplement(voucherProductPrimaryKeyColumns, voucherProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProductidProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductidProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductidVoucherProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Productid, x.ID) {
			t.Error("foreign key was wrong value", a.Productid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Productid))
		reflect.Indirect(reflect.ValueOf(&a.Productid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Productid, x.ID) {
			t.Error("foreign key was wrong value", a.Productid, x.ID)
		}
	}
}

func testVoucherProductToOneRemoveOpProductUsingProductidProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherProduct
	var b Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherProductDBTypes, false, strmangle.SetComplement(voucherProductPrimaryKeyColumns, voucherProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProductidProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProductidProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProductidProduct().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProductidProduct != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Productid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductidVoucherProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVoucherProductToOneSetOpVoucherUsingVoucheridVoucher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherProduct
	var b, c Voucher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherProductDBTypes, false, strmangle.SetComplement(voucherProductPrimaryKeyColumns, voucherProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Voucher{&b, &c} {
		err = a.SetVoucheridVoucher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VoucheridVoucher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VoucheridVoucherProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Voucherid, x.ID) {
			t.Error("foreign key was wrong value", a.Voucherid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Voucherid))
		reflect.Indirect(reflect.ValueOf(&a.Voucherid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Voucherid, x.ID) {
			t.Error("foreign key was wrong value", a.Voucherid, x.ID)
		}
	}
}

func testVoucherProductToOneRemoveOpVoucherUsingVoucheridVoucher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherProduct
	var b Voucher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherProductDBTypes, false, strmangle.SetComplement(voucherProductPrimaryKeyColumns, voucherProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetVoucheridVoucher(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveVoucheridVoucher(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.VoucheridVoucher().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.VoucheridVoucher != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Voucherid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VoucheridVoucherProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVoucherProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoucherProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoucherProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoucherProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	voucherProductDBTypes = map[string]string{`ID`: `character varying`, `Voucherid`: `character varying`, `Productid`: `character varying`}
	_                     = bytes.MinRead
)

func testVoucherProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(voucherProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(voucherProductAllColumns) == len(voucherProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVoucherProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(voucherProductAllColumns) == len(voucherProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoucherProduct{}
	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherProductDBTypes, true, voucherProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(voucherProductAllColumns, voucherProductPrimaryKeyColumns) {
		fields = voucherProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			voucherProductAllColumns,
			voucherProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VoucherProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVoucherProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(voucherProductAllColumns) == len(voucherProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VoucherProduct{}
	if err = randomize.Struct(seed, &o, voucherProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoucherProduct: %s", err)
	}

	count, err := VoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, voucherProductDBTypes, false, voucherProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoucherProduct: %s", err)
	}

	count, err = VoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
