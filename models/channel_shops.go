// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ChannelShop is an object representing the database table.
type ChannelShop struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ChannelID null.String `boil:"channel_id" json:"channel_id,omitempty" toml:"channel_id" yaml:"channel_id,omitempty"`
	CreateAt  null.Int64  `boil:"create_at" json:"create_at,omitempty" toml:"create_at" yaml:"create_at,omitempty"`
	EndAt     null.Int64  `boil:"end_at" json:"end_at,omitempty" toml:"end_at" yaml:"end_at,omitempty"`

	R *channelShopR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L channelShopL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChannelShopColumns = struct {
	ID        string
	ChannelID string
	CreateAt  string
	EndAt     string
}{
	ID:        "id",
	ChannelID: "channel_id",
	CreateAt:  "create_at",
	EndAt:     "end_at",
}

var ChannelShopTableColumns = struct {
	ID        string
	ChannelID string
	CreateAt  string
	EndAt     string
}{
	ID:        "channel_shops.id",
	ChannelID: "channel_shops.channel_id",
	CreateAt:  "channel_shops.create_at",
	EndAt:     "channel_shops.end_at",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ChannelShopWhere = struct {
	ID        whereHelperstring
	ChannelID whereHelpernull_String
	CreateAt  whereHelpernull_Int64
	EndAt     whereHelpernull_Int64
}{
	ID:        whereHelperstring{field: "\"channel_shops\".\"id\""},
	ChannelID: whereHelpernull_String{field: "\"channel_shops\".\"channel_id\""},
	CreateAt:  whereHelpernull_Int64{field: "\"channel_shops\".\"create_at\""},
	EndAt:     whereHelpernull_Int64{field: "\"channel_shops\".\"end_at\""},
}

// ChannelShopRels is where relationship names are stored.
var ChannelShopRels = struct {
	Channel string
}{
	Channel: "Channel",
}

// channelShopR is where relationships are stored.
type channelShopR struct {
	Channel *Channel `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
}

// NewStruct creates a new relationship struct
func (*channelShopR) NewStruct() *channelShopR {
	return &channelShopR{}
}

func (r *channelShopR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

// channelShopL is where Load methods for each relationship are stored.
type channelShopL struct{}

var (
	channelShopAllColumns            = []string{"id", "channel_id", "create_at", "end_at"}
	channelShopColumnsWithoutDefault = []string{"id"}
	channelShopColumnsWithDefault    = []string{"channel_id", "create_at", "end_at"}
	channelShopPrimaryKeyColumns     = []string{"id"}
	channelShopGeneratedColumns      = []string{}
)

type (
	// ChannelShopSlice is an alias for a slice of pointers to ChannelShop.
	// This should almost always be used instead of []ChannelShop.
	ChannelShopSlice []*ChannelShop
	// ChannelShopHook is the signature for custom ChannelShop hook methods
	ChannelShopHook func(context.Context, boil.ContextExecutor, *ChannelShop) error

	channelShopQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	channelShopType                 = reflect.TypeOf(&ChannelShop{})
	channelShopMapping              = queries.MakeStructMapping(channelShopType)
	channelShopPrimaryKeyMapping, _ = queries.BindMapping(channelShopType, channelShopMapping, channelShopPrimaryKeyColumns)
	channelShopInsertCacheMut       sync.RWMutex
	channelShopInsertCache          = make(map[string]insertCache)
	channelShopUpdateCacheMut       sync.RWMutex
	channelShopUpdateCache          = make(map[string]updateCache)
	channelShopUpsertCacheMut       sync.RWMutex
	channelShopUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var channelShopAfterSelectHooks []ChannelShopHook

var channelShopBeforeInsertHooks []ChannelShopHook
var channelShopAfterInsertHooks []ChannelShopHook

var channelShopBeforeUpdateHooks []ChannelShopHook
var channelShopAfterUpdateHooks []ChannelShopHook

var channelShopBeforeDeleteHooks []ChannelShopHook
var channelShopAfterDeleteHooks []ChannelShopHook

var channelShopBeforeUpsertHooks []ChannelShopHook
var channelShopAfterUpsertHooks []ChannelShopHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChannelShop) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelShopAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChannelShop) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelShopBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChannelShop) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelShopAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChannelShop) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelShopBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChannelShop) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelShopAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChannelShop) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelShopBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChannelShop) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelShopAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChannelShop) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelShopBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChannelShop) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelShopAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChannelShopHook registers your hook function for all future operations.
func AddChannelShopHook(hookPoint boil.HookPoint, channelShopHook ChannelShopHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		channelShopAfterSelectHooks = append(channelShopAfterSelectHooks, channelShopHook)
	case boil.BeforeInsertHook:
		channelShopBeforeInsertHooks = append(channelShopBeforeInsertHooks, channelShopHook)
	case boil.AfterInsertHook:
		channelShopAfterInsertHooks = append(channelShopAfterInsertHooks, channelShopHook)
	case boil.BeforeUpdateHook:
		channelShopBeforeUpdateHooks = append(channelShopBeforeUpdateHooks, channelShopHook)
	case boil.AfterUpdateHook:
		channelShopAfterUpdateHooks = append(channelShopAfterUpdateHooks, channelShopHook)
	case boil.BeforeDeleteHook:
		channelShopBeforeDeleteHooks = append(channelShopBeforeDeleteHooks, channelShopHook)
	case boil.AfterDeleteHook:
		channelShopAfterDeleteHooks = append(channelShopAfterDeleteHooks, channelShopHook)
	case boil.BeforeUpsertHook:
		channelShopBeforeUpsertHooks = append(channelShopBeforeUpsertHooks, channelShopHook)
	case boil.AfterUpsertHook:
		channelShopAfterUpsertHooks = append(channelShopAfterUpsertHooks, channelShopHook)
	}
}

// One returns a single channelShop record from the query.
func (q channelShopQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChannelShop, error) {
	o := &ChannelShop{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for channel_shops")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChannelShop records from the query.
func (q channelShopQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChannelShopSlice, error) {
	var o []*ChannelShop

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChannelShop slice")
	}

	if len(channelShopAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChannelShop records in the query.
func (q channelShopQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count channel_shops rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q channelShopQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if channel_shops exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *ChannelShop) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (channelShopL) LoadChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannelShop interface{}, mods queries.Applicator) error {
	var slice []*ChannelShop
	var object *ChannelShop

	if singular {
		var ok bool
		object, ok = maybeChannelShop.(*ChannelShop)
		if !ok {
			object = new(ChannelShop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannelShop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannelShop))
			}
		}
	} else {
		s, ok := maybeChannelShop.(*[]*ChannelShop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannelShop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannelShop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelShopR{}
		}
		if !queries.IsNil(object.ChannelID) {
			args = append(args, object.ChannelID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelShopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChannelID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChannelID) {
				args = append(args, obj.ChannelID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.ChannelShops = append(foreign.R.ChannelShops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChannelID, foreign.ID) {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.ChannelShops = append(foreign.R.ChannelShops, local)
				break
			}
		}
	}

	return nil
}

// SetChannel of the channelShop to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.ChannelShops.
func (o *ChannelShop) SetChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"channel_shops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, channelShopPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChannelID, related.ID)
	if o.R == nil {
		o.R = &channelShopR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			ChannelShops: ChannelShopSlice{o},
		}
	} else {
		related.R.ChannelShops = append(related.R.ChannelShops, o)
	}

	return nil
}

// RemoveChannel relationship.
// Sets o.R.Channel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ChannelShop) RemoveChannel(ctx context.Context, exec boil.ContextExecutor, related *Channel) error {
	var err error

	queries.SetScanner(&o.ChannelID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("channel_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Channel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChannelShops {
		if queries.Equal(o.ChannelID, ri.ChannelID) {
			continue
		}

		ln := len(related.R.ChannelShops)
		if ln > 1 && i < ln-1 {
			related.R.ChannelShops[i] = related.R.ChannelShops[ln-1]
		}
		related.R.ChannelShops = related.R.ChannelShops[:ln-1]
		break
	}
	return nil
}

// ChannelShops retrieves all the records using an executor.
func ChannelShops(mods ...qm.QueryMod) channelShopQuery {
	mods = append(mods, qm.From("\"channel_shops\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"channel_shops\".*"})
	}

	return channelShopQuery{q}
}

// FindChannelShop retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChannelShop(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ChannelShop, error) {
	channelShopObj := &ChannelShop{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"channel_shops\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, channelShopObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from channel_shops")
	}

	if err = channelShopObj.doAfterSelectHooks(ctx, exec); err != nil {
		return channelShopObj, err
	}

	return channelShopObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChannelShop) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no channel_shops provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(channelShopColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	channelShopInsertCacheMut.RLock()
	cache, cached := channelShopInsertCache[key]
	channelShopInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			channelShopAllColumns,
			channelShopColumnsWithDefault,
			channelShopColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(channelShopType, channelShopMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(channelShopType, channelShopMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"channel_shops\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"channel_shops\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into channel_shops")
	}

	if !cached {
		channelShopInsertCacheMut.Lock()
		channelShopInsertCache[key] = cache
		channelShopInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChannelShop.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChannelShop) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	channelShopUpdateCacheMut.RLock()
	cache, cached := channelShopUpdateCache[key]
	channelShopUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			channelShopAllColumns,
			channelShopPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update channel_shops, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"channel_shops\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, channelShopPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(channelShopType, channelShopMapping, append(wl, channelShopPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update channel_shops row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for channel_shops")
	}

	if !cached {
		channelShopUpdateCacheMut.Lock()
		channelShopUpdateCache[key] = cache
		channelShopUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q channelShopQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for channel_shops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for channel_shops")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChannelShopSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelShopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"channel_shops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, channelShopPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in channelShop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all channelShop")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChannelShop) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no channel_shops provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(channelShopColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	channelShopUpsertCacheMut.RLock()
	cache, cached := channelShopUpsertCache[key]
	channelShopUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			channelShopAllColumns,
			channelShopColumnsWithDefault,
			channelShopColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			channelShopAllColumns,
			channelShopPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert channel_shops, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(channelShopPrimaryKeyColumns))
			copy(conflict, channelShopPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"channel_shops\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(channelShopType, channelShopMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(channelShopType, channelShopMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert channel_shops")
	}

	if !cached {
		channelShopUpsertCacheMut.Lock()
		channelShopUpsertCache[key] = cache
		channelShopUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChannelShop record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChannelShop) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChannelShop provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), channelShopPrimaryKeyMapping)
	sql := "DELETE FROM \"channel_shops\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from channel_shops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for channel_shops")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q channelShopQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no channelShopQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from channel_shops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for channel_shops")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChannelShopSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(channelShopBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelShopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"channel_shops\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, channelShopPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from channelShop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for channel_shops")
	}

	if len(channelShopAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChannelShop) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChannelShop(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChannelShopSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChannelShopSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelShopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"channel_shops\".* FROM \"channel_shops\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, channelShopPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChannelShopSlice")
	}

	*o = slice

	return nil
}

// ChannelShopExists checks if the ChannelShop row exists.
func ChannelShopExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"channel_shops\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if channel_shops exists")
	}

	return exists, nil
}

// Exists checks if the ChannelShop row exists.
func (o *ChannelShop) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChannelShopExists(ctx, exec, o.ID)
}
