// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Channelshop is an object representing the database table.
type Channelshop struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Channelid null.String `boil:"channelid" json:"channelid,omitempty" toml:"channelid" yaml:"channelid,omitempty"`
	Createat  null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Endat     null.Int64  `boil:"endat" json:"endat,omitempty" toml:"endat" yaml:"endat,omitempty"`

	R *channelshopR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L channelshopL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChannelshopColumns = struct {
	ID        string
	Channelid string
	Createat  string
	Endat     string
}{
	ID:        "id",
	Channelid: "channelid",
	Createat:  "createat",
	Endat:     "endat",
}

var ChannelshopTableColumns = struct {
	ID        string
	Channelid string
	Createat  string
	Endat     string
}{
	ID:        "channelshops.id",
	Channelid: "channelshops.channelid",
	Createat:  "channelshops.createat",
	Endat:     "channelshops.endat",
}

// Generated where

var ChannelshopWhere = struct {
	ID        whereHelperstring
	Channelid whereHelpernull_String
	Createat  whereHelpernull_Int64
	Endat     whereHelpernull_Int64
}{
	ID:        whereHelperstring{field: "\"channelshops\".\"id\""},
	Channelid: whereHelpernull_String{field: "\"channelshops\".\"channelid\""},
	Createat:  whereHelpernull_Int64{field: "\"channelshops\".\"createat\""},
	Endat:     whereHelpernull_Int64{field: "\"channelshops\".\"endat\""},
}

// ChannelshopRels is where relationship names are stored.
var ChannelshopRels = struct {
	ChannelidChannel string
}{
	ChannelidChannel: "ChannelidChannel",
}

// channelshopR is where relationships are stored.
type channelshopR struct {
	ChannelidChannel *Channel `boil:"ChannelidChannel" json:"ChannelidChannel" toml:"ChannelidChannel" yaml:"ChannelidChannel"`
}

// NewStruct creates a new relationship struct
func (*channelshopR) NewStruct() *channelshopR {
	return &channelshopR{}
}

func (r *channelshopR) GetChannelidChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.ChannelidChannel
}

// channelshopL is where Load methods for each relationship are stored.
type channelshopL struct{}

var (
	channelshopAllColumns            = []string{"id", "channelid", "createat", "endat"}
	channelshopColumnsWithoutDefault = []string{"id"}
	channelshopColumnsWithDefault    = []string{"channelid", "createat", "endat"}
	channelshopPrimaryKeyColumns     = []string{"id"}
	channelshopGeneratedColumns      = []string{}
)

type (
	// ChannelshopSlice is an alias for a slice of pointers to Channelshop.
	// This should almost always be used instead of []Channelshop.
	ChannelshopSlice []*Channelshop
	// ChannelshopHook is the signature for custom Channelshop hook methods
	ChannelshopHook func(context.Context, boil.ContextExecutor, *Channelshop) error

	channelshopQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	channelshopType                 = reflect.TypeOf(&Channelshop{})
	channelshopMapping              = queries.MakeStructMapping(channelshopType)
	channelshopPrimaryKeyMapping, _ = queries.BindMapping(channelshopType, channelshopMapping, channelshopPrimaryKeyColumns)
	channelshopInsertCacheMut       sync.RWMutex
	channelshopInsertCache          = make(map[string]insertCache)
	channelshopUpdateCacheMut       sync.RWMutex
	channelshopUpdateCache          = make(map[string]updateCache)
	channelshopUpsertCacheMut       sync.RWMutex
	channelshopUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var channelshopAfterSelectHooks []ChannelshopHook

var channelshopBeforeInsertHooks []ChannelshopHook
var channelshopAfterInsertHooks []ChannelshopHook

var channelshopBeforeUpdateHooks []ChannelshopHook
var channelshopAfterUpdateHooks []ChannelshopHook

var channelshopBeforeDeleteHooks []ChannelshopHook
var channelshopAfterDeleteHooks []ChannelshopHook

var channelshopBeforeUpsertHooks []ChannelshopHook
var channelshopAfterUpsertHooks []ChannelshopHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Channelshop) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelshopAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Channelshop) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelshopBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Channelshop) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelshopAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Channelshop) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelshopBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Channelshop) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelshopAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Channelshop) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelshopBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Channelshop) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelshopAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Channelshop) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelshopBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Channelshop) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelshopAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChannelshopHook registers your hook function for all future operations.
func AddChannelshopHook(hookPoint boil.HookPoint, channelshopHook ChannelshopHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		channelshopAfterSelectHooks = append(channelshopAfterSelectHooks, channelshopHook)
	case boil.BeforeInsertHook:
		channelshopBeforeInsertHooks = append(channelshopBeforeInsertHooks, channelshopHook)
	case boil.AfterInsertHook:
		channelshopAfterInsertHooks = append(channelshopAfterInsertHooks, channelshopHook)
	case boil.BeforeUpdateHook:
		channelshopBeforeUpdateHooks = append(channelshopBeforeUpdateHooks, channelshopHook)
	case boil.AfterUpdateHook:
		channelshopAfterUpdateHooks = append(channelshopAfterUpdateHooks, channelshopHook)
	case boil.BeforeDeleteHook:
		channelshopBeforeDeleteHooks = append(channelshopBeforeDeleteHooks, channelshopHook)
	case boil.AfterDeleteHook:
		channelshopAfterDeleteHooks = append(channelshopAfterDeleteHooks, channelshopHook)
	case boil.BeforeUpsertHook:
		channelshopBeforeUpsertHooks = append(channelshopBeforeUpsertHooks, channelshopHook)
	case boil.AfterUpsertHook:
		channelshopAfterUpsertHooks = append(channelshopAfterUpsertHooks, channelshopHook)
	}
}

// One returns a single channelshop record from the query.
func (q channelshopQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Channelshop, error) {
	o := &Channelshop{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for channelshops")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Channelshop records from the query.
func (q channelshopQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChannelshopSlice, error) {
	var o []*Channelshop

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Channelshop slice")
	}

	if len(channelshopAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Channelshop records in the query.
func (q channelshopQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count channelshops rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q channelshopQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if channelshops exists")
	}

	return count > 0, nil
}

// ChannelidChannel pointed to by the foreign key.
func (o *Channelshop) ChannelidChannel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Channelid),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// LoadChannelidChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (channelshopL) LoadChannelidChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannelshop interface{}, mods queries.Applicator) error {
	var slice []*Channelshop
	var object *Channelshop

	if singular {
		var ok bool
		object, ok = maybeChannelshop.(*Channelshop)
		if !ok {
			object = new(Channelshop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannelshop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannelshop))
			}
		}
	} else {
		s, ok := maybeChannelshop.(*[]*Channelshop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannelshop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannelshop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelshopR{}
		}
		if !queries.IsNil(object.Channelid) {
			args = append(args, object.Channelid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelshopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Channelid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Channelid) {
				args = append(args, obj.Channelid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChannelidChannel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.ChannelidChannelshops = append(foreign.R.ChannelidChannelshops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Channelid, foreign.ID) {
				local.R.ChannelidChannel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.ChannelidChannelshops = append(foreign.R.ChannelidChannelshops, local)
				break
			}
		}
	}

	return nil
}

// SetChannelidChannel of the channelshop to the related item.
// Sets o.R.ChannelidChannel to related.
// Adds o to related.R.ChannelidChannelshops.
func (o *Channelshop) SetChannelidChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"channelshops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
		strmangle.WhereClause("\"", "\"", 2, channelshopPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Channelid, related.ID)
	if o.R == nil {
		o.R = &channelshopR{
			ChannelidChannel: related,
		}
	} else {
		o.R.ChannelidChannel = related
	}

	if related.R == nil {
		related.R = &channelR{
			ChannelidChannelshops: ChannelshopSlice{o},
		}
	} else {
		related.R.ChannelidChannelshops = append(related.R.ChannelidChannelshops, o)
	}

	return nil
}

// RemoveChannelidChannel relationship.
// Sets o.R.ChannelidChannel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Channelshop) RemoveChannelidChannel(ctx context.Context, exec boil.ContextExecutor, related *Channel) error {
	var err error

	queries.SetScanner(&o.Channelid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ChannelidChannel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChannelidChannelshops {
		if queries.Equal(o.Channelid, ri.Channelid) {
			continue
		}

		ln := len(related.R.ChannelidChannelshops)
		if ln > 1 && i < ln-1 {
			related.R.ChannelidChannelshops[i] = related.R.ChannelidChannelshops[ln-1]
		}
		related.R.ChannelidChannelshops = related.R.ChannelidChannelshops[:ln-1]
		break
	}
	return nil
}

// Channelshops retrieves all the records using an executor.
func Channelshops(mods ...qm.QueryMod) channelshopQuery {
	mods = append(mods, qm.From("\"channelshops\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"channelshops\".*"})
	}

	return channelshopQuery{q}
}

// FindChannelshop retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChannelshop(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Channelshop, error) {
	channelshopObj := &Channelshop{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"channelshops\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, channelshopObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from channelshops")
	}

	if err = channelshopObj.doAfterSelectHooks(ctx, exec); err != nil {
		return channelshopObj, err
	}

	return channelshopObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Channelshop) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no channelshops provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(channelshopColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	channelshopInsertCacheMut.RLock()
	cache, cached := channelshopInsertCache[key]
	channelshopInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			channelshopAllColumns,
			channelshopColumnsWithDefault,
			channelshopColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(channelshopType, channelshopMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(channelshopType, channelshopMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"channelshops\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"channelshops\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into channelshops")
	}

	if !cached {
		channelshopInsertCacheMut.Lock()
		channelshopInsertCache[key] = cache
		channelshopInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Channelshop.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Channelshop) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	channelshopUpdateCacheMut.RLock()
	cache, cached := channelshopUpdateCache[key]
	channelshopUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			channelshopAllColumns,
			channelshopPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update channelshops, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"channelshops\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, channelshopPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(channelshopType, channelshopMapping, append(wl, channelshopPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update channelshops row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for channelshops")
	}

	if !cached {
		channelshopUpdateCacheMut.Lock()
		channelshopUpdateCache[key] = cache
		channelshopUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q channelshopQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for channelshops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for channelshops")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChannelshopSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelshopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"channelshops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, channelshopPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in channelshop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all channelshop")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Channelshop) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no channelshops provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(channelshopColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	channelshopUpsertCacheMut.RLock()
	cache, cached := channelshopUpsertCache[key]
	channelshopUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			channelshopAllColumns,
			channelshopColumnsWithDefault,
			channelshopColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			channelshopAllColumns,
			channelshopPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert channelshops, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(channelshopPrimaryKeyColumns))
			copy(conflict, channelshopPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"channelshops\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(channelshopType, channelshopMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(channelshopType, channelshopMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert channelshops")
	}

	if !cached {
		channelshopUpsertCacheMut.Lock()
		channelshopUpsertCache[key] = cache
		channelshopUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Channelshop record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Channelshop) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Channelshop provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), channelshopPrimaryKeyMapping)
	sql := "DELETE FROM \"channelshops\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from channelshops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for channelshops")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q channelshopQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no channelshopQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from channelshops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for channelshops")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChannelshopSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(channelshopBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelshopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"channelshops\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, channelshopPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from channelshop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for channelshops")
	}

	if len(channelshopAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Channelshop) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChannelshop(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChannelshopSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChannelshopSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelshopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"channelshops\".* FROM \"channelshops\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, channelshopPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChannelshopSlice")
	}

	*o = slice

	return nil
}

// ChannelshopExists checks if the Channelshop row exists.
func ChannelshopExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"channelshops\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if channelshops exists")
	}

	return exists, nil
}

// Exists checks if the Channelshop row exists.
func (o *Channelshop) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChannelshopExists(ctx, exec, o.ID)
}
