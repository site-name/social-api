// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DigitalContentURL is an object representing the database table.
type DigitalContentURL struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Token       null.String `boil:"token" json:"token,omitempty" toml:"token" yaml:"token,omitempty"`
	Contentid   null.String `boil:"contentid" json:"contentid,omitempty" toml:"contentid" yaml:"contentid,omitempty"`
	Createat    null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Downloadnum null.Int    `boil:"downloadnum" json:"downloadnum,omitempty" toml:"downloadnum" yaml:"downloadnum,omitempty"`
	Lineid      null.String `boil:"lineid" json:"lineid,omitempty" toml:"lineid" yaml:"lineid,omitempty"`

	R *digitalContentURLR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L digitalContentURLL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DigitalContentURLColumns = struct {
	ID          string
	Token       string
	Contentid   string
	Createat    string
	Downloadnum string
	Lineid      string
}{
	ID:          "id",
	Token:       "token",
	Contentid:   "contentid",
	Createat:    "createat",
	Downloadnum: "downloadnum",
	Lineid:      "lineid",
}

var DigitalContentURLTableColumns = struct {
	ID          string
	Token       string
	Contentid   string
	Createat    string
	Downloadnum string
	Lineid      string
}{
	ID:          "digital_content_urls.id",
	Token:       "digital_content_urls.token",
	Contentid:   "digital_content_urls.contentid",
	Createat:    "digital_content_urls.createat",
	Downloadnum: "digital_content_urls.downloadnum",
	Lineid:      "digital_content_urls.lineid",
}

// Generated where

var DigitalContentURLWhere = struct {
	ID          whereHelperstring
	Token       whereHelpernull_String
	Contentid   whereHelpernull_String
	Createat    whereHelpernull_Int64
	Downloadnum whereHelpernull_Int
	Lineid      whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"digital_content_urls\".\"id\""},
	Token:       whereHelpernull_String{field: "\"digital_content_urls\".\"token\""},
	Contentid:   whereHelpernull_String{field: "\"digital_content_urls\".\"contentid\""},
	Createat:    whereHelpernull_Int64{field: "\"digital_content_urls\".\"createat\""},
	Downloadnum: whereHelpernull_Int{field: "\"digital_content_urls\".\"downloadnum\""},
	Lineid:      whereHelpernull_String{field: "\"digital_content_urls\".\"lineid\""},
}

// DigitalContentURLRels is where relationship names are stored.
var DigitalContentURLRels = struct {
	ContentidDigitalContent string
	LineidOrderLine         string
}{
	ContentidDigitalContent: "ContentidDigitalContent",
	LineidOrderLine:         "LineidOrderLine",
}

// digitalContentURLR is where relationships are stored.
type digitalContentURLR struct {
	ContentidDigitalContent *DigitalContent `boil:"ContentidDigitalContent" json:"ContentidDigitalContent" toml:"ContentidDigitalContent" yaml:"ContentidDigitalContent"`
	LineidOrderLine         *OrderLine      `boil:"LineidOrderLine" json:"LineidOrderLine" toml:"LineidOrderLine" yaml:"LineidOrderLine"`
}

// NewStruct creates a new relationship struct
func (*digitalContentURLR) NewStruct() *digitalContentURLR {
	return &digitalContentURLR{}
}

func (r *digitalContentURLR) GetContentidDigitalContent() *DigitalContent {
	if r == nil {
		return nil
	}
	return r.ContentidDigitalContent
}

func (r *digitalContentURLR) GetLineidOrderLine() *OrderLine {
	if r == nil {
		return nil
	}
	return r.LineidOrderLine
}

// digitalContentURLL is where Load methods for each relationship are stored.
type digitalContentURLL struct{}

var (
	digitalContentURLAllColumns            = []string{"id", "token", "contentid", "createat", "downloadnum", "lineid"}
	digitalContentURLColumnsWithoutDefault = []string{"id"}
	digitalContentURLColumnsWithDefault    = []string{"token", "contentid", "createat", "downloadnum", "lineid"}
	digitalContentURLPrimaryKeyColumns     = []string{"id"}
	digitalContentURLGeneratedColumns      = []string{}
)

type (
	// DigitalContentURLSlice is an alias for a slice of pointers to DigitalContentURL.
	// This should almost always be used instead of []DigitalContentURL.
	DigitalContentURLSlice []*DigitalContentURL
	// DigitalContentURLHook is the signature for custom DigitalContentURL hook methods
	DigitalContentURLHook func(context.Context, boil.ContextExecutor, *DigitalContentURL) error

	digitalContentURLQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	digitalContentURLType                 = reflect.TypeOf(&DigitalContentURL{})
	digitalContentURLMapping              = queries.MakeStructMapping(digitalContentURLType)
	digitalContentURLPrimaryKeyMapping, _ = queries.BindMapping(digitalContentURLType, digitalContentURLMapping, digitalContentURLPrimaryKeyColumns)
	digitalContentURLInsertCacheMut       sync.RWMutex
	digitalContentURLInsertCache          = make(map[string]insertCache)
	digitalContentURLUpdateCacheMut       sync.RWMutex
	digitalContentURLUpdateCache          = make(map[string]updateCache)
	digitalContentURLUpsertCacheMut       sync.RWMutex
	digitalContentURLUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var digitalContentURLAfterSelectHooks []DigitalContentURLHook

var digitalContentURLBeforeInsertHooks []DigitalContentURLHook
var digitalContentURLAfterInsertHooks []DigitalContentURLHook

var digitalContentURLBeforeUpdateHooks []DigitalContentURLHook
var digitalContentURLAfterUpdateHooks []DigitalContentURLHook

var digitalContentURLBeforeDeleteHooks []DigitalContentURLHook
var digitalContentURLAfterDeleteHooks []DigitalContentURLHook

var digitalContentURLBeforeUpsertHooks []DigitalContentURLHook
var digitalContentURLAfterUpsertHooks []DigitalContentURLHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DigitalContentURL) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentURLAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DigitalContentURL) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentURLBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DigitalContentURL) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentURLAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DigitalContentURL) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentURLBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DigitalContentURL) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentURLAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DigitalContentURL) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentURLBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DigitalContentURL) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentURLAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DigitalContentURL) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentURLBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DigitalContentURL) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentURLAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDigitalContentURLHook registers your hook function for all future operations.
func AddDigitalContentURLHook(hookPoint boil.HookPoint, digitalContentURLHook DigitalContentURLHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		digitalContentURLAfterSelectHooks = append(digitalContentURLAfterSelectHooks, digitalContentURLHook)
	case boil.BeforeInsertHook:
		digitalContentURLBeforeInsertHooks = append(digitalContentURLBeforeInsertHooks, digitalContentURLHook)
	case boil.AfterInsertHook:
		digitalContentURLAfterInsertHooks = append(digitalContentURLAfterInsertHooks, digitalContentURLHook)
	case boil.BeforeUpdateHook:
		digitalContentURLBeforeUpdateHooks = append(digitalContentURLBeforeUpdateHooks, digitalContentURLHook)
	case boil.AfterUpdateHook:
		digitalContentURLAfterUpdateHooks = append(digitalContentURLAfterUpdateHooks, digitalContentURLHook)
	case boil.BeforeDeleteHook:
		digitalContentURLBeforeDeleteHooks = append(digitalContentURLBeforeDeleteHooks, digitalContentURLHook)
	case boil.AfterDeleteHook:
		digitalContentURLAfterDeleteHooks = append(digitalContentURLAfterDeleteHooks, digitalContentURLHook)
	case boil.BeforeUpsertHook:
		digitalContentURLBeforeUpsertHooks = append(digitalContentURLBeforeUpsertHooks, digitalContentURLHook)
	case boil.AfterUpsertHook:
		digitalContentURLAfterUpsertHooks = append(digitalContentURLAfterUpsertHooks, digitalContentURLHook)
	}
}

// One returns a single digitalContentURL record from the query.
func (q digitalContentURLQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DigitalContentURL, error) {
	o := &DigitalContentURL{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for digital_content_urls")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DigitalContentURL records from the query.
func (q digitalContentURLQuery) All(ctx context.Context, exec boil.ContextExecutor) (DigitalContentURLSlice, error) {
	var o []*DigitalContentURL

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DigitalContentURL slice")
	}

	if len(digitalContentURLAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DigitalContentURL records in the query.
func (q digitalContentURLQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count digital_content_urls rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q digitalContentURLQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if digital_content_urls exists")
	}

	return count > 0, nil
}

// ContentidDigitalContent pointed to by the foreign key.
func (o *DigitalContentURL) ContentidDigitalContent(mods ...qm.QueryMod) digitalContentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Contentid),
	}

	queryMods = append(queryMods, mods...)

	return DigitalContents(queryMods...)
}

// LineidOrderLine pointed to by the foreign key.
func (o *DigitalContentURL) LineidOrderLine(mods ...qm.QueryMod) orderLineQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Lineid),
	}

	queryMods = append(queryMods, mods...)

	return OrderLines(queryMods...)
}

// LoadContentidDigitalContent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (digitalContentURLL) LoadContentidDigitalContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDigitalContentURL interface{}, mods queries.Applicator) error {
	var slice []*DigitalContentURL
	var object *DigitalContentURL

	if singular {
		var ok bool
		object, ok = maybeDigitalContentURL.(*DigitalContentURL)
		if !ok {
			object = new(DigitalContentURL)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDigitalContentURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDigitalContentURL))
			}
		}
	} else {
		s, ok := maybeDigitalContentURL.(*[]*DigitalContentURL)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDigitalContentURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDigitalContentURL))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &digitalContentURLR{}
		}
		if !queries.IsNil(object.Contentid) {
			args = append(args, object.Contentid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &digitalContentURLR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Contentid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Contentid) {
				args = append(args, obj.Contentid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`digital_contents`),
		qm.WhereIn(`digital_contents.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DigitalContent")
	}

	var resultSlice []*DigitalContent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DigitalContent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for digital_contents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for digital_contents")
	}

	if len(digitalContentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContentidDigitalContent = foreign
		if foreign.R == nil {
			foreign.R = &digitalContentR{}
		}
		foreign.R.ContentidDigitalContentUrls = append(foreign.R.ContentidDigitalContentUrls, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Contentid, foreign.ID) {
				local.R.ContentidDigitalContent = foreign
				if foreign.R == nil {
					foreign.R = &digitalContentR{}
				}
				foreign.R.ContentidDigitalContentUrls = append(foreign.R.ContentidDigitalContentUrls, local)
				break
			}
		}
	}

	return nil
}

// LoadLineidOrderLine allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (digitalContentURLL) LoadLineidOrderLine(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDigitalContentURL interface{}, mods queries.Applicator) error {
	var slice []*DigitalContentURL
	var object *DigitalContentURL

	if singular {
		var ok bool
		object, ok = maybeDigitalContentURL.(*DigitalContentURL)
		if !ok {
			object = new(DigitalContentURL)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDigitalContentURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDigitalContentURL))
			}
		}
	} else {
		s, ok := maybeDigitalContentURL.(*[]*DigitalContentURL)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDigitalContentURL)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDigitalContentURL))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &digitalContentURLR{}
		}
		if !queries.IsNil(object.Lineid) {
			args = append(args, object.Lineid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &digitalContentURLR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Lineid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Lineid) {
				args = append(args, obj.Lineid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_lines`),
		qm.WhereIn(`order_lines.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderLine")
	}

	var resultSlice []*OrderLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderLine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_lines")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LineidOrderLine = foreign
		if foreign.R == nil {
			foreign.R = &orderLineR{}
		}
		foreign.R.LineidDigitalContentURL = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Lineid, foreign.ID) {
				local.R.LineidOrderLine = foreign
				if foreign.R == nil {
					foreign.R = &orderLineR{}
				}
				foreign.R.LineidDigitalContentURL = local
				break
			}
		}
	}

	return nil
}

// SetContentidDigitalContent of the digitalContentURL to the related item.
// Sets o.R.ContentidDigitalContent to related.
// Adds o to related.R.ContentidDigitalContentUrls.
func (o *DigitalContentURL) SetContentidDigitalContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DigitalContent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"digital_content_urls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"contentid"}),
		strmangle.WhereClause("\"", "\"", 2, digitalContentURLPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Contentid, related.ID)
	if o.R == nil {
		o.R = &digitalContentURLR{
			ContentidDigitalContent: related,
		}
	} else {
		o.R.ContentidDigitalContent = related
	}

	if related.R == nil {
		related.R = &digitalContentR{
			ContentidDigitalContentUrls: DigitalContentURLSlice{o},
		}
	} else {
		related.R.ContentidDigitalContentUrls = append(related.R.ContentidDigitalContentUrls, o)
	}

	return nil
}

// RemoveContentidDigitalContent relationship.
// Sets o.R.ContentidDigitalContent to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DigitalContentURL) RemoveContentidDigitalContent(ctx context.Context, exec boil.ContextExecutor, related *DigitalContent) error {
	var err error

	queries.SetScanner(&o.Contentid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("contentid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ContentidDigitalContent = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ContentidDigitalContentUrls {
		if queries.Equal(o.Contentid, ri.Contentid) {
			continue
		}

		ln := len(related.R.ContentidDigitalContentUrls)
		if ln > 1 && i < ln-1 {
			related.R.ContentidDigitalContentUrls[i] = related.R.ContentidDigitalContentUrls[ln-1]
		}
		related.R.ContentidDigitalContentUrls = related.R.ContentidDigitalContentUrls[:ln-1]
		break
	}
	return nil
}

// SetLineidOrderLine of the digitalContentURL to the related item.
// Sets o.R.LineidOrderLine to related.
// Adds o to related.R.LineidDigitalContentURL.
func (o *DigitalContentURL) SetLineidOrderLine(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrderLine) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"digital_content_urls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lineid"}),
		strmangle.WhereClause("\"", "\"", 2, digitalContentURLPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Lineid, related.ID)
	if o.R == nil {
		o.R = &digitalContentURLR{
			LineidOrderLine: related,
		}
	} else {
		o.R.LineidOrderLine = related
	}

	if related.R == nil {
		related.R = &orderLineR{
			LineidDigitalContentURL: o,
		}
	} else {
		related.R.LineidDigitalContentURL = o
	}

	return nil
}

// RemoveLineidOrderLine relationship.
// Sets o.R.LineidOrderLine to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DigitalContentURL) RemoveLineidOrderLine(ctx context.Context, exec boil.ContextExecutor, related *OrderLine) error {
	var err error

	queries.SetScanner(&o.Lineid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("lineid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LineidOrderLine = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.LineidDigitalContentURL = nil
	return nil
}

// DigitalContentUrls retrieves all the records using an executor.
func DigitalContentUrls(mods ...qm.QueryMod) digitalContentURLQuery {
	mods = append(mods, qm.From("\"digital_content_urls\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"digital_content_urls\".*"})
	}

	return digitalContentURLQuery{q}
}

// FindDigitalContentURL retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDigitalContentURL(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DigitalContentURL, error) {
	digitalContentURLObj := &DigitalContentURL{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"digital_content_urls\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, digitalContentURLObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from digital_content_urls")
	}

	if err = digitalContentURLObj.doAfterSelectHooks(ctx, exec); err != nil {
		return digitalContentURLObj, err
	}

	return digitalContentURLObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DigitalContentURL) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no digital_content_urls provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(digitalContentURLColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	digitalContentURLInsertCacheMut.RLock()
	cache, cached := digitalContentURLInsertCache[key]
	digitalContentURLInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			digitalContentURLAllColumns,
			digitalContentURLColumnsWithDefault,
			digitalContentURLColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(digitalContentURLType, digitalContentURLMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(digitalContentURLType, digitalContentURLMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"digital_content_urls\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"digital_content_urls\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into digital_content_urls")
	}

	if !cached {
		digitalContentURLInsertCacheMut.Lock()
		digitalContentURLInsertCache[key] = cache
		digitalContentURLInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DigitalContentURL.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DigitalContentURL) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	digitalContentURLUpdateCacheMut.RLock()
	cache, cached := digitalContentURLUpdateCache[key]
	digitalContentURLUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			digitalContentURLAllColumns,
			digitalContentURLPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update digital_content_urls, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"digital_content_urls\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, digitalContentURLPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(digitalContentURLType, digitalContentURLMapping, append(wl, digitalContentURLPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update digital_content_urls row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for digital_content_urls")
	}

	if !cached {
		digitalContentURLUpdateCacheMut.Lock()
		digitalContentURLUpdateCache[key] = cache
		digitalContentURLUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q digitalContentURLQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for digital_content_urls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for digital_content_urls")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DigitalContentURLSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), digitalContentURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"digital_content_urls\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, digitalContentURLPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in digitalContentURL slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all digitalContentURL")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DigitalContentURL) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no digital_content_urls provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(digitalContentURLColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	digitalContentURLUpsertCacheMut.RLock()
	cache, cached := digitalContentURLUpsertCache[key]
	digitalContentURLUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			digitalContentURLAllColumns,
			digitalContentURLColumnsWithDefault,
			digitalContentURLColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			digitalContentURLAllColumns,
			digitalContentURLPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert digital_content_urls, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(digitalContentURLPrimaryKeyColumns))
			copy(conflict, digitalContentURLPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"digital_content_urls\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(digitalContentURLType, digitalContentURLMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(digitalContentURLType, digitalContentURLMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert digital_content_urls")
	}

	if !cached {
		digitalContentURLUpsertCacheMut.Lock()
		digitalContentURLUpsertCache[key] = cache
		digitalContentURLUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DigitalContentURL record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DigitalContentURL) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DigitalContentURL provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), digitalContentURLPrimaryKeyMapping)
	sql := "DELETE FROM \"digital_content_urls\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from digital_content_urls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for digital_content_urls")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q digitalContentURLQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no digitalContentURLQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from digital_content_urls")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for digital_content_urls")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DigitalContentURLSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(digitalContentURLBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), digitalContentURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"digital_content_urls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, digitalContentURLPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from digitalContentURL slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for digital_content_urls")
	}

	if len(digitalContentURLAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DigitalContentURL) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDigitalContentURL(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DigitalContentURLSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DigitalContentURLSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), digitalContentURLPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"digital_content_urls\".* FROM \"digital_content_urls\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, digitalContentURLPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DigitalContentURLSlice")
	}

	*o = slice

	return nil
}

// DigitalContentURLExists checks if the DigitalContentURL row exists.
func DigitalContentURLExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"digital_content_urls\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if digital_content_urls exists")
	}

	return exists, nil
}

// Exists checks if the DigitalContentURL row exists.
func (o *DigitalContentURL) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DigitalContentURLExists(ctx, exec, o.ID)
}
