// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SaleproductVariant is an object representing the database table.
type SaleproductVariant struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Saleid           null.String `boil:"saleid" json:"saleid,omitempty" toml:"saleid" yaml:"saleid,omitempty"`
	Productvariantid null.String `boil:"productvariantid" json:"productvariantid,omitempty" toml:"productvariantid" yaml:"productvariantid,omitempty"`
	Createat         null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`

	R *saleproductVariantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L saleproductVariantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SaleproductVariantColumns = struct {
	ID               string
	Saleid           string
	Productvariantid string
	Createat         string
}{
	ID:               "id",
	Saleid:           "saleid",
	Productvariantid: "productvariantid",
	Createat:         "createat",
}

var SaleproductVariantTableColumns = struct {
	ID               string
	Saleid           string
	Productvariantid string
	Createat         string
}{
	ID:               "saleproduct_variants.id",
	Saleid:           "saleproduct_variants.saleid",
	Productvariantid: "saleproduct_variants.productvariantid",
	Createat:         "saleproduct_variants.createat",
}

// Generated where

var SaleproductVariantWhere = struct {
	ID               whereHelperstring
	Saleid           whereHelpernull_String
	Productvariantid whereHelpernull_String
	Createat         whereHelpernull_Int64
}{
	ID:               whereHelperstring{field: "\"saleproduct_variants\".\"id\""},
	Saleid:           whereHelpernull_String{field: "\"saleproduct_variants\".\"saleid\""},
	Productvariantid: whereHelpernull_String{field: "\"saleproduct_variants\".\"productvariantid\""},
	Createat:         whereHelpernull_Int64{field: "\"saleproduct_variants\".\"createat\""},
}

// SaleproductVariantRels is where relationship names are stored.
var SaleproductVariantRels = struct {
}{}

// saleproductVariantR is where relationships are stored.
type saleproductVariantR struct {
}

// NewStruct creates a new relationship struct
func (*saleproductVariantR) NewStruct() *saleproductVariantR {
	return &saleproductVariantR{}
}

// saleproductVariantL is where Load methods for each relationship are stored.
type saleproductVariantL struct{}

var (
	saleproductVariantAllColumns            = []string{"id", "saleid", "productvariantid", "createat"}
	saleproductVariantColumnsWithoutDefault = []string{"id"}
	saleproductVariantColumnsWithDefault    = []string{"saleid", "productvariantid", "createat"}
	saleproductVariantPrimaryKeyColumns     = []string{"id"}
	saleproductVariantGeneratedColumns      = []string{}
)

type (
	// SaleproductVariantSlice is an alias for a slice of pointers to SaleproductVariant.
	// This should almost always be used instead of []SaleproductVariant.
	SaleproductVariantSlice []*SaleproductVariant
	// SaleproductVariantHook is the signature for custom SaleproductVariant hook methods
	SaleproductVariantHook func(context.Context, boil.ContextExecutor, *SaleproductVariant) error

	saleproductVariantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	saleproductVariantType                 = reflect.TypeOf(&SaleproductVariant{})
	saleproductVariantMapping              = queries.MakeStructMapping(saleproductVariantType)
	saleproductVariantPrimaryKeyMapping, _ = queries.BindMapping(saleproductVariantType, saleproductVariantMapping, saleproductVariantPrimaryKeyColumns)
	saleproductVariantInsertCacheMut       sync.RWMutex
	saleproductVariantInsertCache          = make(map[string]insertCache)
	saleproductVariantUpdateCacheMut       sync.RWMutex
	saleproductVariantUpdateCache          = make(map[string]updateCache)
	saleproductVariantUpsertCacheMut       sync.RWMutex
	saleproductVariantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var saleproductVariantAfterSelectHooks []SaleproductVariantHook

var saleproductVariantBeforeInsertHooks []SaleproductVariantHook
var saleproductVariantAfterInsertHooks []SaleproductVariantHook

var saleproductVariantBeforeUpdateHooks []SaleproductVariantHook
var saleproductVariantAfterUpdateHooks []SaleproductVariantHook

var saleproductVariantBeforeDeleteHooks []SaleproductVariantHook
var saleproductVariantAfterDeleteHooks []SaleproductVariantHook

var saleproductVariantBeforeUpsertHooks []SaleproductVariantHook
var saleproductVariantAfterUpsertHooks []SaleproductVariantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SaleproductVariant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleproductVariantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SaleproductVariant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleproductVariantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SaleproductVariant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleproductVariantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SaleproductVariant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleproductVariantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SaleproductVariant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleproductVariantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SaleproductVariant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleproductVariantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SaleproductVariant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleproductVariantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SaleproductVariant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleproductVariantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SaleproductVariant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleproductVariantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSaleproductVariantHook registers your hook function for all future operations.
func AddSaleproductVariantHook(hookPoint boil.HookPoint, saleproductVariantHook SaleproductVariantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		saleproductVariantAfterSelectHooks = append(saleproductVariantAfterSelectHooks, saleproductVariantHook)
	case boil.BeforeInsertHook:
		saleproductVariantBeforeInsertHooks = append(saleproductVariantBeforeInsertHooks, saleproductVariantHook)
	case boil.AfterInsertHook:
		saleproductVariantAfterInsertHooks = append(saleproductVariantAfterInsertHooks, saleproductVariantHook)
	case boil.BeforeUpdateHook:
		saleproductVariantBeforeUpdateHooks = append(saleproductVariantBeforeUpdateHooks, saleproductVariantHook)
	case boil.AfterUpdateHook:
		saleproductVariantAfterUpdateHooks = append(saleproductVariantAfterUpdateHooks, saleproductVariantHook)
	case boil.BeforeDeleteHook:
		saleproductVariantBeforeDeleteHooks = append(saleproductVariantBeforeDeleteHooks, saleproductVariantHook)
	case boil.AfterDeleteHook:
		saleproductVariantAfterDeleteHooks = append(saleproductVariantAfterDeleteHooks, saleproductVariantHook)
	case boil.BeforeUpsertHook:
		saleproductVariantBeforeUpsertHooks = append(saleproductVariantBeforeUpsertHooks, saleproductVariantHook)
	case boil.AfterUpsertHook:
		saleproductVariantAfterUpsertHooks = append(saleproductVariantAfterUpsertHooks, saleproductVariantHook)
	}
}

// One returns a single saleproductVariant record from the query.
func (q saleproductVariantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SaleproductVariant, error) {
	o := &SaleproductVariant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for saleproduct_variants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SaleproductVariant records from the query.
func (q saleproductVariantQuery) All(ctx context.Context, exec boil.ContextExecutor) (SaleproductVariantSlice, error) {
	var o []*SaleproductVariant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SaleproductVariant slice")
	}

	if len(saleproductVariantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SaleproductVariant records in the query.
func (q saleproductVariantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count saleproduct_variants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q saleproductVariantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if saleproduct_variants exists")
	}

	return count > 0, nil
}

// SaleproductVariants retrieves all the records using an executor.
func SaleproductVariants(mods ...qm.QueryMod) saleproductVariantQuery {
	mods = append(mods, qm.From("\"saleproduct_variants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"saleproduct_variants\".*"})
	}

	return saleproductVariantQuery{q}
}

// FindSaleproductVariant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSaleproductVariant(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SaleproductVariant, error) {
	saleproductVariantObj := &SaleproductVariant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"saleproduct_variants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, saleproductVariantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from saleproduct_variants")
	}

	if err = saleproductVariantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return saleproductVariantObj, err
	}

	return saleproductVariantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SaleproductVariant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no saleproduct_variants provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(saleproductVariantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	saleproductVariantInsertCacheMut.RLock()
	cache, cached := saleproductVariantInsertCache[key]
	saleproductVariantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			saleproductVariantAllColumns,
			saleproductVariantColumnsWithDefault,
			saleproductVariantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(saleproductVariantType, saleproductVariantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(saleproductVariantType, saleproductVariantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"saleproduct_variants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"saleproduct_variants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into saleproduct_variants")
	}

	if !cached {
		saleproductVariantInsertCacheMut.Lock()
		saleproductVariantInsertCache[key] = cache
		saleproductVariantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SaleproductVariant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SaleproductVariant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	saleproductVariantUpdateCacheMut.RLock()
	cache, cached := saleproductVariantUpdateCache[key]
	saleproductVariantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			saleproductVariantAllColumns,
			saleproductVariantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update saleproduct_variants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"saleproduct_variants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, saleproductVariantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(saleproductVariantType, saleproductVariantMapping, append(wl, saleproductVariantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update saleproduct_variants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for saleproduct_variants")
	}

	if !cached {
		saleproductVariantUpdateCacheMut.Lock()
		saleproductVariantUpdateCache[key] = cache
		saleproductVariantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q saleproductVariantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for saleproduct_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for saleproduct_variants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SaleproductVariantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleproductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"saleproduct_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, saleproductVariantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in saleproductVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all saleproductVariant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SaleproductVariant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no saleproduct_variants provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(saleproductVariantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	saleproductVariantUpsertCacheMut.RLock()
	cache, cached := saleproductVariantUpsertCache[key]
	saleproductVariantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			saleproductVariantAllColumns,
			saleproductVariantColumnsWithDefault,
			saleproductVariantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			saleproductVariantAllColumns,
			saleproductVariantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert saleproduct_variants, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(saleproductVariantPrimaryKeyColumns))
			copy(conflict, saleproductVariantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"saleproduct_variants\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(saleproductVariantType, saleproductVariantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(saleproductVariantType, saleproductVariantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert saleproduct_variants")
	}

	if !cached {
		saleproductVariantUpsertCacheMut.Lock()
		saleproductVariantUpsertCache[key] = cache
		saleproductVariantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SaleproductVariant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SaleproductVariant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SaleproductVariant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), saleproductVariantPrimaryKeyMapping)
	sql := "DELETE FROM \"saleproduct_variants\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from saleproduct_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for saleproduct_variants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q saleproductVariantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no saleproductVariantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from saleproduct_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for saleproduct_variants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SaleproductVariantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(saleproductVariantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleproductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"saleproduct_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, saleproductVariantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from saleproductVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for saleproduct_variants")
	}

	if len(saleproductVariantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SaleproductVariant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSaleproductVariant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SaleproductVariantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SaleproductVariantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), saleproductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"saleproduct_variants\".* FROM \"saleproduct_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, saleproductVariantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SaleproductVariantSlice")
	}

	*o = slice

	return nil
}

// SaleproductVariantExists checks if the SaleproductVariant row exists.
func SaleproductVariantExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"saleproduct_variants\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if saleproduct_variants exists")
	}

	return exists, nil
}

// Exists checks if the SaleproductVariant row exists.
func (o *SaleproductVariant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SaleproductVariantExists(ctx, exec, o.ID)
}
