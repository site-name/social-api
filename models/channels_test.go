// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChannels(t *testing.T) {
	t.Parallel()

	query := Channels()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChannelsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Channels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChannelsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Channels().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Channels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChannelsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChannelSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Channels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChannelsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChannelExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Channel exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChannelExists to return true, but got false.")
	}
}

func testChannelsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	channelFound, err := FindChannel(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if channelFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChannelsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Channels().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChannelsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Channels().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChannelsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	channelOne := &Channel{}
	channelTwo := &Channel{}
	if err = randomize.Struct(seed, channelOne, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}
	if err = randomize.Struct(seed, channelTwo, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = channelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = channelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Channels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChannelsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	channelOne := &Channel{}
	channelTwo := &Channel{}
	if err = randomize.Struct(seed, channelOne, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}
	if err = randomize.Struct(seed, channelTwo, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = channelOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = channelTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Channels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func channelBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
	*o = Channel{}
	return nil
}

func channelAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
	*o = Channel{}
	return nil
}

func channelAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
	*o = Channel{}
	return nil
}

func channelBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
	*o = Channel{}
	return nil
}

func channelAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
	*o = Channel{}
	return nil
}

func channelBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
	*o = Channel{}
	return nil
}

func channelAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
	*o = Channel{}
	return nil
}

func channelBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
	*o = Channel{}
	return nil
}

func channelAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
	*o = Channel{}
	return nil
}

func testChannelsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Channel{}
	o := &Channel{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, channelDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Channel object: %s", err)
	}

	AddChannelHook(boil.BeforeInsertHook, channelBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	channelBeforeInsertHooks = []ChannelHook{}

	AddChannelHook(boil.AfterInsertHook, channelAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	channelAfterInsertHooks = []ChannelHook{}

	AddChannelHook(boil.AfterSelectHook, channelAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	channelAfterSelectHooks = []ChannelHook{}

	AddChannelHook(boil.BeforeUpdateHook, channelBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	channelBeforeUpdateHooks = []ChannelHook{}

	AddChannelHook(boil.AfterUpdateHook, channelAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	channelAfterUpdateHooks = []ChannelHook{}

	AddChannelHook(boil.BeforeDeleteHook, channelBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	channelBeforeDeleteHooks = []ChannelHook{}

	AddChannelHook(boil.AfterDeleteHook, channelAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	channelAfterDeleteHooks = []ChannelHook{}

	AddChannelHook(boil.BeforeUpsertHook, channelBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	channelBeforeUpsertHooks = []ChannelHook{}

	AddChannelHook(boil.AfterUpsertHook, channelAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	channelAfterUpsertHooks = []ChannelHook{}
}

func testChannelsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Channels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChannelsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(channelColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Channels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChannelToManyChannelShops(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c ChannelShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, channelShopDBTypes, false, channelShopColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelShopDBTypes, false, channelShopColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ChannelID, a.ID)
	queries.Assign(&c.ChannelID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ChannelShops().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ChannelID, b.ChannelID) {
			bFound = true
		}
		if queries.Equal(v.ChannelID, c.ChannelID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChannelSlice{&a}
	if err = a.L.LoadChannelShops(ctx, tx, false, (*[]*Channel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChannelShops); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ChannelShops = nil
	if err = a.L.LoadChannelShops(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ChannelShops); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChannelToManyCheckouts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ChannelID, a.ID)
	queries.Assign(&c.ChannelID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Checkouts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ChannelID, b.ChannelID) {
			bFound = true
		}
		if queries.Equal(v.ChannelID, c.ChannelID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChannelSlice{&a}
	if err = a.L.LoadCheckouts(ctx, tx, false, (*[]*Channel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Checkouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Checkouts = nil
	if err = a.L.LoadCheckouts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Checkouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChannelToManyCollectionChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c CollectionChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, collectionChannelListingDBTypes, false, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collectionChannelListingDBTypes, false, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ChannelID, a.ID)
	queries.Assign(&c.ChannelID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CollectionChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ChannelID, b.ChannelID) {
			bFound = true
		}
		if queries.Equal(v.ChannelID, c.ChannelID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChannelSlice{&a}
	if err = a.L.LoadCollectionChannelListings(ctx, tx, false, (*[]*Channel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CollectionChannelListings = nil
	if err = a.L.LoadCollectionChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChannelToManyOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ChannelID, a.ID)
	queries.Assign(&c.ChannelID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Orders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ChannelID, b.ChannelID) {
			bFound = true
		}
		if queries.Equal(v.ChannelID, c.ChannelID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChannelSlice{&a}
	if err = a.L.LoadOrders(ctx, tx, false, (*[]*Channel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Orders = nil
	if err = a.L.LoadOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChannelToManyProductChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c ProductChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productChannelListingDBTypes, false, productChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productChannelListingDBTypes, false, productChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ChannelID, a.ID)
	queries.Assign(&c.ChannelID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ChannelID, b.ChannelID) {
			bFound = true
		}
		if queries.Equal(v.ChannelID, c.ChannelID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChannelSlice{&a}
	if err = a.L.LoadProductChannelListings(ctx, tx, false, (*[]*Channel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductChannelListings = nil
	if err = a.L.LoadProductChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChannelToManyProductVariantChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c ProductVariantChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productVariantChannelListingDBTypes, false, productVariantChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantChannelListingDBTypes, false, productVariantChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ChannelID = a.ID
	c.ChannelID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductVariantChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ChannelID == b.ChannelID {
			bFound = true
		}
		if v.ChannelID == c.ChannelID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChannelSlice{&a}
	if err = a.L.LoadProductVariantChannelListings(ctx, tx, false, (*[]*Channel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductVariantChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductVariantChannelListings = nil
	if err = a.L.LoadProductVariantChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductVariantChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChannelToManySaleChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c SaleChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, saleChannelListingDBTypes, false, saleChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleChannelListingDBTypes, false, saleChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ChannelID = a.ID
	c.ChannelID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SaleChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ChannelID == b.ChannelID {
			bFound = true
		}
		if v.ChannelID == c.ChannelID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChannelSlice{&a}
	if err = a.L.LoadSaleChannelListings(ctx, tx, false, (*[]*Channel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SaleChannelListings = nil
	if err = a.L.LoadSaleChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChannelToManyShippingMethodChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c ShippingMethodChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shippingMethodChannelListingDBTypes, false, shippingMethodChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingMethodChannelListingDBTypes, false, shippingMethodChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ChannelID, a.ID)
	queries.Assign(&c.ChannelID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShippingMethodChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ChannelID, b.ChannelID) {
			bFound = true
		}
		if queries.Equal(v.ChannelID, c.ChannelID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChannelSlice{&a}
	if err = a.L.LoadShippingMethodChannelListings(ctx, tx, false, (*[]*Channel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingMethodChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShippingMethodChannelListings = nil
	if err = a.L.LoadShippingMethodChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingMethodChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChannelToManyShippingZoneChannels(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c ShippingZoneChannel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shippingZoneChannelDBTypes, false, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingZoneChannelDBTypes, false, shippingZoneChannelColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ChannelID, a.ID)
	queries.Assign(&c.ChannelID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShippingZoneChannels().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ChannelID, b.ChannelID) {
			bFound = true
		}
		if queries.Equal(v.ChannelID, c.ChannelID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChannelSlice{&a}
	if err = a.L.LoadShippingZoneChannels(ctx, tx, false, (*[]*Channel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingZoneChannels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShippingZoneChannels = nil
	if err = a.L.LoadShippingZoneChannels(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingZoneChannels); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChannelToManyVoucherChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c VoucherChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voucherChannelListingDBTypes, false, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherChannelListingDBTypes, false, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ChannelID = a.ID
	c.ChannelID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VoucherChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ChannelID == b.ChannelID {
			bFound = true
		}
		if v.ChannelID == c.ChannelID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ChannelSlice{&a}
	if err = a.L.LoadVoucherChannelListings(ctx, tx, false, (*[]*Channel)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucherChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VoucherChannelListings = nil
	if err = a.L.LoadVoucherChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucherChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testChannelToManyAddOpChannelShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ChannelShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChannelShop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, channelShopDBTypes, false, strmangle.SetComplement(channelShopPrimaryKeyColumns, channelShopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ChannelShop{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChannelShops(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if !queries.Equal(a.ID, second.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ChannelShops[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ChannelShops[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ChannelShops().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChannelToManySetOpChannelShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ChannelShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChannelShop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, channelShopDBTypes, false, strmangle.SetComplement(channelShopPrimaryKeyColumns, channelShopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetChannelShops(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ChannelShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetChannelShops(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ChannelShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, d.ChannelID)
	}
	if !queries.Equal(a.ID, e.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, e.ChannelID)
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ChannelShops[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ChannelShops[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testChannelToManyRemoveOpChannelShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ChannelShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ChannelShop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, channelShopDBTypes, false, strmangle.SetComplement(channelShopPrimaryKeyColumns, channelShopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddChannelShops(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ChannelShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveChannelShops(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ChannelShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ChannelShops) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ChannelShops[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ChannelShops[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testChannelToManyAddOpCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Checkout{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCheckouts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if !queries.Equal(a.ID, second.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Checkouts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Checkouts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Checkouts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChannelToManySetOpCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCheckouts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCheckouts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, d.ChannelID)
	}
	if !queries.Equal(a.ID, e.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, e.ChannelID)
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Checkouts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Checkouts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testChannelToManyRemoveOpCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCheckouts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCheckouts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Checkouts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Checkouts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Checkouts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testChannelToManyAddOpCollectionChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e CollectionChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CollectionChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, collectionChannelListingDBTypes, false, strmangle.SetComplement(collectionChannelListingPrimaryKeyColumns, collectionChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CollectionChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCollectionChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if !queries.Equal(a.ID, second.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CollectionChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CollectionChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CollectionChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChannelToManySetOpCollectionChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e CollectionChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CollectionChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, collectionChannelListingDBTypes, false, strmangle.SetComplement(collectionChannelListingPrimaryKeyColumns, collectionChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCollectionChannelListings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCollectionChannelListings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, d.ChannelID)
	}
	if !queries.Equal(a.ID, e.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, e.ChannelID)
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CollectionChannelListings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CollectionChannelListings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testChannelToManyRemoveOpCollectionChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e CollectionChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CollectionChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, collectionChannelListingDBTypes, false, strmangle.SetComplement(collectionChannelListingPrimaryKeyColumns, collectionChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCollectionChannelListings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCollectionChannelListings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CollectionChannelListings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CollectionChannelListings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CollectionChannelListings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testChannelToManyAddOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if !queries.Equal(a.ID, second.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Orders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Orders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Orders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChannelToManySetOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, d.ChannelID)
	}
	if !queries.Equal(a.ID, e.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, e.ChannelID)
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Orders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Orders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testChannelToManyRemoveOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Orders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Orders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Orders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testChannelToManyAddOpProductChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ProductChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productChannelListingDBTypes, false, strmangle.SetComplement(productChannelListingPrimaryKeyColumns, productChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if !queries.Equal(a.ID, second.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChannelToManySetOpProductChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ProductChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productChannelListingDBTypes, false, strmangle.SetComplement(productChannelListingPrimaryKeyColumns, productChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductChannelListings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductChannelListings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, d.ChannelID)
	}
	if !queries.Equal(a.ID, e.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, e.ChannelID)
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductChannelListings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductChannelListings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testChannelToManyRemoveOpProductChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ProductChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productChannelListingDBTypes, false, strmangle.SetComplement(productChannelListingPrimaryKeyColumns, productChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductChannelListings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductChannelListings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductChannelListings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductChannelListings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductChannelListings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testChannelToManyAddOpProductVariantChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ProductVariantChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariantChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantChannelListingDBTypes, false, strmangle.SetComplement(productVariantChannelListingPrimaryKeyColumns, productVariantChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductVariantChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductVariantChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ChannelID {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if a.ID != second.ChannelID {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductVariantChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductVariantChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductVariantChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testChannelToManyAddOpSaleChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e SaleChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleChannelListingDBTypes, false, strmangle.SetComplement(saleChannelListingPrimaryKeyColumns, saleChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SaleChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSaleChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ChannelID {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if a.ID != second.ChannelID {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SaleChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SaleChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SaleChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testChannelToManyAddOpShippingMethodChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ShippingMethodChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingMethodChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingMethodChannelListingDBTypes, false, strmangle.SetComplement(shippingMethodChannelListingPrimaryKeyColumns, shippingMethodChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShippingMethodChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShippingMethodChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if !queries.Equal(a.ID, second.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShippingMethodChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShippingMethodChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShippingMethodChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChannelToManySetOpShippingMethodChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ShippingMethodChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingMethodChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingMethodChannelListingDBTypes, false, strmangle.SetComplement(shippingMethodChannelListingPrimaryKeyColumns, shippingMethodChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetShippingMethodChannelListings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ShippingMethodChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetShippingMethodChannelListings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ShippingMethodChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, d.ChannelID)
	}
	if !queries.Equal(a.ID, e.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, e.ChannelID)
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ShippingMethodChannelListings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ShippingMethodChannelListings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testChannelToManyRemoveOpShippingMethodChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ShippingMethodChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingMethodChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingMethodChannelListingDBTypes, false, strmangle.SetComplement(shippingMethodChannelListingPrimaryKeyColumns, shippingMethodChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddShippingMethodChannelListings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ShippingMethodChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveShippingMethodChannelListings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ShippingMethodChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ShippingMethodChannelListings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ShippingMethodChannelListings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ShippingMethodChannelListings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testChannelToManyAddOpShippingZoneChannels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ShippingZoneChannel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingZoneChannel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingZoneChannelDBTypes, false, strmangle.SetComplement(shippingZoneChannelPrimaryKeyColumns, shippingZoneChannelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShippingZoneChannel{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShippingZoneChannels(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if !queries.Equal(a.ID, second.ChannelID) {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShippingZoneChannels[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShippingZoneChannels[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShippingZoneChannels().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChannelToManySetOpShippingZoneChannels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ShippingZoneChannel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingZoneChannel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingZoneChannelDBTypes, false, strmangle.SetComplement(shippingZoneChannelPrimaryKeyColumns, shippingZoneChannelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetShippingZoneChannels(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetShippingZoneChannels(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, d.ChannelID)
	}
	if !queries.Equal(a.ID, e.ChannelID) {
		t.Error("foreign key was wrong value", a.ID, e.ChannelID)
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Channel != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ShippingZoneChannels[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ShippingZoneChannels[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testChannelToManyRemoveOpShippingZoneChannels(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e ShippingZoneChannel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingZoneChannel{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingZoneChannelDBTypes, false, strmangle.SetComplement(shippingZoneChannelPrimaryKeyColumns, shippingZoneChannelColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddShippingZoneChannels(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveShippingZoneChannels(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ShippingZoneChannels().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ChannelID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ChannelID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Channel != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Channel != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ShippingZoneChannels) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ShippingZoneChannels[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ShippingZoneChannels[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testChannelToManyAddOpVoucherChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channel
	var b, c, d, e VoucherChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherChannelListingDBTypes, false, strmangle.SetComplement(voucherChannelListingPrimaryKeyColumns, voucherChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VoucherChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVoucherChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ChannelID {
			t.Error("foreign key was wrong value", a.ID, first.ChannelID)
		}
		if a.ID != second.ChannelID {
			t.Error("foreign key was wrong value", a.ID, second.ChannelID)
		}

		if first.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Channel != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VoucherChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VoucherChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VoucherChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testChannelsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChannelsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChannelSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChannelsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Channels().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	channelDBTypes = map[string]string{`ID`: `character varying`, `Name`: `character varying`, `IsActive`: `boolean`, `Slug`: `character varying`, `Currency`: `text`, `DefaultCountry`: `character varying`}
	_              = bytes.MinRead
)

func testChannelsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(channelPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(channelAllColumns) == len(channelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Channels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, channelDBTypes, true, channelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChannelsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(channelAllColumns) == len(channelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Channel{}
	if err = randomize.Struct(seed, o, channelDBTypes, true, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Channels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, channelDBTypes, true, channelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(channelAllColumns, channelPrimaryKeyColumns) {
		fields = channelAllColumns
	} else {
		fields = strmangle.SetComplement(
			channelAllColumns,
			channelPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChannelSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChannelsUpsert(t *testing.T) {
	t.Parallel()

	if len(channelAllColumns) == len(channelPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Channel{}
	if err = randomize.Struct(seed, &o, channelDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Channel: %s", err)
	}

	count, err := Channels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, channelDBTypes, false, channelPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Channel: %s", err)
	}

	count, err = Channels().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
