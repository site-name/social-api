// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStatuses(t *testing.T) {
	t.Parallel()

	query := Statuses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStatusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Statuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Statuses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Statuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StatusSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Statuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StatusExists(ctx, tx, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if Status exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StatusExists to return true, but got false.")
	}
}

func testStatusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	statusFound, err := FindStatus(ctx, tx, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if statusFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStatusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Statuses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStatusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Statuses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStatusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statusOne := &Status{}
	statusTwo := &Status{}
	if err = randomize.Struct(seed, statusOne, statusDBTypes, false, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}
	if err = randomize.Struct(seed, statusTwo, statusDBTypes, false, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = statusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = statusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Statuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStatusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	statusOne := &Status{}
	statusTwo := &Status{}
	if err = randomize.Struct(seed, statusOne, statusDBTypes, false, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}
	if err = randomize.Struct(seed, statusTwo, statusDBTypes, false, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = statusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = statusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Statuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func statusBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Status) error {
	*o = Status{}
	return nil
}

func statusAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Status) error {
	*o = Status{}
	return nil
}

func statusAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Status) error {
	*o = Status{}
	return nil
}

func statusBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Status) error {
	*o = Status{}
	return nil
}

func statusAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Status) error {
	*o = Status{}
	return nil
}

func statusBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Status) error {
	*o = Status{}
	return nil
}

func statusAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Status) error {
	*o = Status{}
	return nil
}

func statusBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Status) error {
	*o = Status{}
	return nil
}

func statusAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Status) error {
	*o = Status{}
	return nil
}

func testStatusesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Status{}
	o := &Status{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, statusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Status object: %s", err)
	}

	AddStatusHook(boil.BeforeInsertHook, statusBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	statusBeforeInsertHooks = []StatusHook{}

	AddStatusHook(boil.AfterInsertHook, statusAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	statusAfterInsertHooks = []StatusHook{}

	AddStatusHook(boil.AfterSelectHook, statusAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	statusAfterSelectHooks = []StatusHook{}

	AddStatusHook(boil.BeforeUpdateHook, statusBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	statusBeforeUpdateHooks = []StatusHook{}

	AddStatusHook(boil.AfterUpdateHook, statusAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	statusAfterUpdateHooks = []StatusHook{}

	AddStatusHook(boil.BeforeDeleteHook, statusBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	statusBeforeDeleteHooks = []StatusHook{}

	AddStatusHook(boil.AfterDeleteHook, statusAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	statusAfterDeleteHooks = []StatusHook{}

	AddStatusHook(boil.BeforeUpsertHook, statusBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	statusBeforeUpsertHooks = []StatusHook{}

	AddStatusHook(boil.AfterUpsertHook, statusAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	statusAfterUpsertHooks = []StatusHook{}
}

func testStatusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Statuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStatusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(statusColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Statuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStatusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStatusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StatusSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStatusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Statuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	statusDBTypes = map[string]string{`UserID`: `character varying`, `Status`: `character varying`, `Manual`: `boolean`, `LastActivityAt`: `bigint`}
	_             = bytes.MinRead
)

func testStatusesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(statusPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(statusAllColumns) == len(statusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Statuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, statusDBTypes, true, statusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStatusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(statusAllColumns) == len(statusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Status{}
	if err = randomize.Struct(seed, o, statusDBTypes, true, statusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Statuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, statusDBTypes, true, statusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(statusAllColumns, statusPrimaryKeyColumns) {
		fields = statusAllColumns
	} else {
		fields = strmangle.SetComplement(
			statusAllColumns,
			statusPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StatusSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStatusesUpsert(t *testing.T) {
	t.Parallel()

	if len(statusAllColumns) == len(statusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Status{}
	if err = randomize.Struct(seed, &o, statusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Status: %s", err)
	}

	count, err := Statuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, statusDBTypes, false, statusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Status struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Status: %s", err)
	}

	count, err = Statuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
