// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductChannelListing is an object representing the database table.
type ProductChannelListing struct {
	ID                    string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ProductID             null.String  `boil:"product_id" json:"product_id,omitempty" toml:"product_id" yaml:"product_id,omitempty"`
	ChannelID             null.String  `boil:"channel_id" json:"channel_id,omitempty" toml:"channel_id" yaml:"channel_id,omitempty"`
	VisibleInListings     null.Bool    `boil:"visible_in_listings" json:"visible_in_listings,omitempty" toml:"visible_in_listings" yaml:"visible_in_listings,omitempty"`
	AvailableForPurchase  null.Time    `boil:"available_for_purchase" json:"available_for_purchase,omitempty" toml:"available_for_purchase" yaml:"available_for_purchase,omitempty"`
	Currency              null.String  `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	DiscountedPriceAmount null.Float64 `boil:"discounted_price_amount" json:"discounted_price_amount,omitempty" toml:"discounted_price_amount" yaml:"discounted_price_amount,omitempty"`
	CreateAt              null.Int64   `boil:"create_at" json:"create_at,omitempty" toml:"create_at" yaml:"create_at,omitempty"`
	PublicationDate       null.Time    `boil:"publication_date" json:"publication_date,omitempty" toml:"publication_date" yaml:"publication_date,omitempty"`
	IsPublished           null.Bool    `boil:"is_published" json:"is_published,omitempty" toml:"is_published" yaml:"is_published,omitempty"`

	R *productChannelListingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productChannelListingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductChannelListingColumns = struct {
	ID                    string
	ProductID             string
	ChannelID             string
	VisibleInListings     string
	AvailableForPurchase  string
	Currency              string
	DiscountedPriceAmount string
	CreateAt              string
	PublicationDate       string
	IsPublished           string
}{
	ID:                    "id",
	ProductID:             "product_id",
	ChannelID:             "channel_id",
	VisibleInListings:     "visible_in_listings",
	AvailableForPurchase:  "available_for_purchase",
	Currency:              "currency",
	DiscountedPriceAmount: "discounted_price_amount",
	CreateAt:              "create_at",
	PublicationDate:       "publication_date",
	IsPublished:           "is_published",
}

var ProductChannelListingTableColumns = struct {
	ID                    string
	ProductID             string
	ChannelID             string
	VisibleInListings     string
	AvailableForPurchase  string
	Currency              string
	DiscountedPriceAmount string
	CreateAt              string
	PublicationDate       string
	IsPublished           string
}{
	ID:                    "product_channel_listings.id",
	ProductID:             "product_channel_listings.product_id",
	ChannelID:             "product_channel_listings.channel_id",
	VisibleInListings:     "product_channel_listings.visible_in_listings",
	AvailableForPurchase:  "product_channel_listings.available_for_purchase",
	Currency:              "product_channel_listings.currency",
	DiscountedPriceAmount: "product_channel_listings.discounted_price_amount",
	CreateAt:              "product_channel_listings.create_at",
	PublicationDate:       "product_channel_listings.publication_date",
	IsPublished:           "product_channel_listings.is_published",
}

// Generated where

var ProductChannelListingWhere = struct {
	ID                    whereHelperstring
	ProductID             whereHelpernull_String
	ChannelID             whereHelpernull_String
	VisibleInListings     whereHelpernull_Bool
	AvailableForPurchase  whereHelpernull_Time
	Currency              whereHelpernull_String
	DiscountedPriceAmount whereHelpernull_Float64
	CreateAt              whereHelpernull_Int64
	PublicationDate       whereHelpernull_Time
	IsPublished           whereHelpernull_Bool
}{
	ID:                    whereHelperstring{field: "\"product_channel_listings\".\"id\""},
	ProductID:             whereHelpernull_String{field: "\"product_channel_listings\".\"product_id\""},
	ChannelID:             whereHelpernull_String{field: "\"product_channel_listings\".\"channel_id\""},
	VisibleInListings:     whereHelpernull_Bool{field: "\"product_channel_listings\".\"visible_in_listings\""},
	AvailableForPurchase:  whereHelpernull_Time{field: "\"product_channel_listings\".\"available_for_purchase\""},
	Currency:              whereHelpernull_String{field: "\"product_channel_listings\".\"currency\""},
	DiscountedPriceAmount: whereHelpernull_Float64{field: "\"product_channel_listings\".\"discounted_price_amount\""},
	CreateAt:              whereHelpernull_Int64{field: "\"product_channel_listings\".\"create_at\""},
	PublicationDate:       whereHelpernull_Time{field: "\"product_channel_listings\".\"publication_date\""},
	IsPublished:           whereHelpernull_Bool{field: "\"product_channel_listings\".\"is_published\""},
}

// ProductChannelListingRels is where relationship names are stored.
var ProductChannelListingRels = struct {
	Channel string
	Product string
}{
	Channel: "Channel",
	Product: "Product",
}

// productChannelListingR is where relationships are stored.
type productChannelListingR struct {
	Channel *Channel `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
	Product *Product `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
}

// NewStruct creates a new relationship struct
func (*productChannelListingR) NewStruct() *productChannelListingR {
	return &productChannelListingR{}
}

func (r *productChannelListingR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *productChannelListingR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

// productChannelListingL is where Load methods for each relationship are stored.
type productChannelListingL struct{}

var (
	productChannelListingAllColumns            = []string{"id", "product_id", "channel_id", "visible_in_listings", "available_for_purchase", "currency", "discounted_price_amount", "create_at", "publication_date", "is_published"}
	productChannelListingColumnsWithoutDefault = []string{"id"}
	productChannelListingColumnsWithDefault    = []string{"product_id", "channel_id", "visible_in_listings", "available_for_purchase", "currency", "discounted_price_amount", "create_at", "publication_date", "is_published"}
	productChannelListingPrimaryKeyColumns     = []string{"id"}
	productChannelListingGeneratedColumns      = []string{}
)

type (
	// ProductChannelListingSlice is an alias for a slice of pointers to ProductChannelListing.
	// This should almost always be used instead of []ProductChannelListing.
	ProductChannelListingSlice []*ProductChannelListing
	// ProductChannelListingHook is the signature for custom ProductChannelListing hook methods
	ProductChannelListingHook func(context.Context, boil.ContextExecutor, *ProductChannelListing) error

	productChannelListingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productChannelListingType                 = reflect.TypeOf(&ProductChannelListing{})
	productChannelListingMapping              = queries.MakeStructMapping(productChannelListingType)
	productChannelListingPrimaryKeyMapping, _ = queries.BindMapping(productChannelListingType, productChannelListingMapping, productChannelListingPrimaryKeyColumns)
	productChannelListingInsertCacheMut       sync.RWMutex
	productChannelListingInsertCache          = make(map[string]insertCache)
	productChannelListingUpdateCacheMut       sync.RWMutex
	productChannelListingUpdateCache          = make(map[string]updateCache)
	productChannelListingUpsertCacheMut       sync.RWMutex
	productChannelListingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productChannelListingAfterSelectHooks []ProductChannelListingHook

var productChannelListingBeforeInsertHooks []ProductChannelListingHook
var productChannelListingAfterInsertHooks []ProductChannelListingHook

var productChannelListingBeforeUpdateHooks []ProductChannelListingHook
var productChannelListingAfterUpdateHooks []ProductChannelListingHook

var productChannelListingBeforeDeleteHooks []ProductChannelListingHook
var productChannelListingAfterDeleteHooks []ProductChannelListingHook

var productChannelListingBeforeUpsertHooks []ProductChannelListingHook
var productChannelListingAfterUpsertHooks []ProductChannelListingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductChannelListing) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productChannelListingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductChannelListing) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productChannelListingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductChannelListing) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productChannelListingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductChannelListing) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productChannelListingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductChannelListing) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productChannelListingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductChannelListing) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productChannelListingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductChannelListing) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productChannelListingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductChannelListing) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productChannelListingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductChannelListing) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productChannelListingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductChannelListingHook registers your hook function for all future operations.
func AddProductChannelListingHook(hookPoint boil.HookPoint, productChannelListingHook ProductChannelListingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productChannelListingAfterSelectHooks = append(productChannelListingAfterSelectHooks, productChannelListingHook)
	case boil.BeforeInsertHook:
		productChannelListingBeforeInsertHooks = append(productChannelListingBeforeInsertHooks, productChannelListingHook)
	case boil.AfterInsertHook:
		productChannelListingAfterInsertHooks = append(productChannelListingAfterInsertHooks, productChannelListingHook)
	case boil.BeforeUpdateHook:
		productChannelListingBeforeUpdateHooks = append(productChannelListingBeforeUpdateHooks, productChannelListingHook)
	case boil.AfterUpdateHook:
		productChannelListingAfterUpdateHooks = append(productChannelListingAfterUpdateHooks, productChannelListingHook)
	case boil.BeforeDeleteHook:
		productChannelListingBeforeDeleteHooks = append(productChannelListingBeforeDeleteHooks, productChannelListingHook)
	case boil.AfterDeleteHook:
		productChannelListingAfterDeleteHooks = append(productChannelListingAfterDeleteHooks, productChannelListingHook)
	case boil.BeforeUpsertHook:
		productChannelListingBeforeUpsertHooks = append(productChannelListingBeforeUpsertHooks, productChannelListingHook)
	case boil.AfterUpsertHook:
		productChannelListingAfterUpsertHooks = append(productChannelListingAfterUpsertHooks, productChannelListingHook)
	}
}

// One returns a single productChannelListing record from the query.
func (q productChannelListingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductChannelListing, error) {
	o := &ProductChannelListing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_channel_listings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductChannelListing records from the query.
func (q productChannelListingQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductChannelListingSlice, error) {
	var o []*ProductChannelListing

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductChannelListing slice")
	}

	if len(productChannelListingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductChannelListing records in the query.
func (q productChannelListingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_channel_listings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productChannelListingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_channel_listings exists")
	}

	return count > 0, nil
}

// Channel pointed to by the foreign key.
func (o *ProductChannelListing) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// Product pointed to by the foreign key.
func (o *ProductChannelListing) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productChannelListingL) LoadChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductChannelListing interface{}, mods queries.Applicator) error {
	var slice []*ProductChannelListing
	var object *ProductChannelListing

	if singular {
		var ok bool
		object, ok = maybeProductChannelListing.(*ProductChannelListing)
		if !ok {
			object = new(ProductChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductChannelListing))
			}
		}
	} else {
		s, ok := maybeProductChannelListing.(*[]*ProductChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductChannelListing))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productChannelListingR{}
		}
		if !queries.IsNil(object.ChannelID) {
			args = append(args, object.ChannelID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productChannelListingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChannelID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChannelID) {
				args = append(args, obj.ChannelID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.ProductChannelListings = append(foreign.R.ProductChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChannelID, foreign.ID) {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.ProductChannelListings = append(foreign.R.ProductChannelListings, local)
				break
			}
		}
	}

	return nil
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productChannelListingL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductChannelListing interface{}, mods queries.Applicator) error {
	var slice []*ProductChannelListing
	var object *ProductChannelListing

	if singular {
		var ok bool
		object, ok = maybeProductChannelListing.(*ProductChannelListing)
		if !ok {
			object = new(ProductChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductChannelListing))
			}
		}
	} else {
		s, ok := maybeProductChannelListing.(*[]*ProductChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductChannelListing))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productChannelListingR{}
		}
		if !queries.IsNil(object.ProductID) {
			args = append(args, object.ProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productChannelListingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductID) {
				args = append(args, obj.ProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductChannelListings = append(foreign.R.ProductChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductID, foreign.ID) {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductChannelListings = append(foreign.R.ProductChannelListings, local)
				break
			}
		}
	}

	return nil
}

// SetChannel of the productChannelListing to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.ProductChannelListings.
func (o *ProductChannelListing) SetChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, productChannelListingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChannelID, related.ID)
	if o.R == nil {
		o.R = &productChannelListingR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			ProductChannelListings: ProductChannelListingSlice{o},
		}
	} else {
		related.R.ProductChannelListings = append(related.R.ProductChannelListings, o)
	}

	return nil
}

// RemoveChannel relationship.
// Sets o.R.Channel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductChannelListing) RemoveChannel(ctx context.Context, exec boil.ContextExecutor, related *Channel) error {
	var err error

	queries.SetScanner(&o.ChannelID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("channel_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Channel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductChannelListings {
		if queries.Equal(o.ChannelID, ri.ChannelID) {
			continue
		}

		ln := len(related.R.ProductChannelListings)
		if ln > 1 && i < ln-1 {
			related.R.ProductChannelListings[i] = related.R.ProductChannelListings[ln-1]
		}
		related.R.ProductChannelListings = related.R.ProductChannelListings[:ln-1]
		break
	}
	return nil
}

// SetProduct of the productChannelListing to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.ProductChannelListings.
func (o *ProductChannelListing) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, productChannelListingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductID, related.ID)
	if o.R == nil {
		o.R = &productChannelListingR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductChannelListings: ProductChannelListingSlice{o},
		}
	} else {
		related.R.ProductChannelListings = append(related.R.ProductChannelListings, o)
	}

	return nil
}

// RemoveProduct relationship.
// Sets o.R.Product to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductChannelListing) RemoveProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.ProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Product = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductChannelListings {
		if queries.Equal(o.ProductID, ri.ProductID) {
			continue
		}

		ln := len(related.R.ProductChannelListings)
		if ln > 1 && i < ln-1 {
			related.R.ProductChannelListings[i] = related.R.ProductChannelListings[ln-1]
		}
		related.R.ProductChannelListings = related.R.ProductChannelListings[:ln-1]
		break
	}
	return nil
}

// ProductChannelListings retrieves all the records using an executor.
func ProductChannelListings(mods ...qm.QueryMod) productChannelListingQuery {
	mods = append(mods, qm.From("\"product_channel_listings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_channel_listings\".*"})
	}

	return productChannelListingQuery{q}
}

// FindProductChannelListing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductChannelListing(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ProductChannelListing, error) {
	productChannelListingObj := &ProductChannelListing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_channel_listings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productChannelListingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_channel_listings")
	}

	if err = productChannelListingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productChannelListingObj, err
	}

	return productChannelListingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductChannelListing) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_channel_listings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productChannelListingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productChannelListingInsertCacheMut.RLock()
	cache, cached := productChannelListingInsertCache[key]
	productChannelListingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productChannelListingAllColumns,
			productChannelListingColumnsWithDefault,
			productChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productChannelListingType, productChannelListingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productChannelListingType, productChannelListingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_channel_listings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_channel_listings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_channel_listings")
	}

	if !cached {
		productChannelListingInsertCacheMut.Lock()
		productChannelListingInsertCache[key] = cache
		productChannelListingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductChannelListing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductChannelListing) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productChannelListingUpdateCacheMut.RLock()
	cache, cached := productChannelListingUpdateCache[key]
	productChannelListingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productChannelListingAllColumns,
			productChannelListingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_channel_listings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_channel_listings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productChannelListingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productChannelListingType, productChannelListingMapping, append(wl, productChannelListingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_channel_listings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_channel_listings")
	}

	if !cached {
		productChannelListingUpdateCacheMut.Lock()
		productChannelListingUpdateCache[key] = cache
		productChannelListingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productChannelListingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_channel_listings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductChannelListingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productChannelListingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productChannelListing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductChannelListing) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_channel_listings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productChannelListingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productChannelListingUpsertCacheMut.RLock()
	cache, cached := productChannelListingUpsertCache[key]
	productChannelListingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productChannelListingAllColumns,
			productChannelListingColumnsWithDefault,
			productChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productChannelListingAllColumns,
			productChannelListingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_channel_listings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productChannelListingPrimaryKeyColumns))
			copy(conflict, productChannelListingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_channel_listings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productChannelListingType, productChannelListingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productChannelListingType, productChannelListingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_channel_listings")
	}

	if !cached {
		productChannelListingUpsertCacheMut.Lock()
		productChannelListingUpsertCache[key] = cache
		productChannelListingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductChannelListing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductChannelListing) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductChannelListing provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productChannelListingPrimaryKeyMapping)
	sql := "DELETE FROM \"product_channel_listings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_channel_listings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productChannelListingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productChannelListingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_channel_listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductChannelListingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productChannelListingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productChannelListingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_channel_listings")
	}

	if len(productChannelListingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductChannelListing) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductChannelListing(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductChannelListingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductChannelListingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_channel_listings\".* FROM \"product_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productChannelListingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductChannelListingSlice")
	}

	*o = slice

	return nil
}

// ProductChannelListingExists checks if the ProductChannelListing row exists.
func ProductChannelListingExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_channel_listings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_channel_listings exists")
	}

	return exists, nil
}

// Exists checks if the ProductChannelListing row exists.
func (o *ProductChannelListing) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductChannelListingExists(ctx, exec, o.ID)
}
