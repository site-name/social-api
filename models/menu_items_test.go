// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMenuItems(t *testing.T) {
	t.Parallel()

	query := MenuItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMenuItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MenuItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMenuItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MenuItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MenuItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMenuItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MenuItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MenuItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMenuItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MenuItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MenuItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MenuItemExists to return true, but got false.")
	}
}

func testMenuItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	menuItemFound, err := FindMenuItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if menuItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMenuItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MenuItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMenuItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MenuItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMenuItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuItemOne := &MenuItem{}
	menuItemTwo := &MenuItem{}
	if err = randomize.Struct(seed, menuItemOne, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}
	if err = randomize.Struct(seed, menuItemTwo, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = menuItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = menuItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MenuItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMenuItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	menuItemOne := &MenuItem{}
	menuItemTwo := &MenuItem{}
	if err = randomize.Struct(seed, menuItemOne, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}
	if err = randomize.Struct(seed, menuItemTwo, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = menuItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = menuItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MenuItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func menuItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MenuItem) error {
	*o = MenuItem{}
	return nil
}

func menuItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MenuItem) error {
	*o = MenuItem{}
	return nil
}

func menuItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MenuItem) error {
	*o = MenuItem{}
	return nil
}

func menuItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MenuItem) error {
	*o = MenuItem{}
	return nil
}

func menuItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MenuItem) error {
	*o = MenuItem{}
	return nil
}

func menuItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MenuItem) error {
	*o = MenuItem{}
	return nil
}

func menuItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MenuItem) error {
	*o = MenuItem{}
	return nil
}

func menuItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MenuItem) error {
	*o = MenuItem{}
	return nil
}

func menuItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MenuItem) error {
	*o = MenuItem{}
	return nil
}

func testMenuItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MenuItem{}
	o := &MenuItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, menuItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MenuItem object: %s", err)
	}

	AddMenuItemHook(boil.BeforeInsertHook, menuItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	menuItemBeforeInsertHooks = []MenuItemHook{}

	AddMenuItemHook(boil.AfterInsertHook, menuItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	menuItemAfterInsertHooks = []MenuItemHook{}

	AddMenuItemHook(boil.AfterSelectHook, menuItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	menuItemAfterSelectHooks = []MenuItemHook{}

	AddMenuItemHook(boil.BeforeUpdateHook, menuItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	menuItemBeforeUpdateHooks = []MenuItemHook{}

	AddMenuItemHook(boil.AfterUpdateHook, menuItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	menuItemAfterUpdateHooks = []MenuItemHook{}

	AddMenuItemHook(boil.BeforeDeleteHook, menuItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	menuItemBeforeDeleteHooks = []MenuItemHook{}

	AddMenuItemHook(boil.AfterDeleteHook, menuItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	menuItemAfterDeleteHooks = []MenuItemHook{}

	AddMenuItemHook(boil.BeforeUpsertHook, menuItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	menuItemBeforeUpsertHooks = []MenuItemHook{}

	AddMenuItemHook(boil.AfterUpsertHook, menuItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	menuItemAfterUpsertHooks = []MenuItemHook{}
}

func testMenuItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MenuItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMenuItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(menuItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MenuItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMenuItemToManyMenuItemTranslations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c MenuItemTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, menuItemTranslationDBTypes, false, menuItemTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, menuItemTranslationDBTypes, false, menuItemTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MenuItemID, a.ID)
	queries.Assign(&c.MenuItemID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MenuItemTranslations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MenuItemID, b.MenuItemID) {
			bFound = true
		}
		if queries.Equal(v.MenuItemID, c.MenuItemID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MenuItemSlice{&a}
	if err = a.L.LoadMenuItemTranslations(ctx, tx, false, (*[]*MenuItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MenuItemTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MenuItemTranslations = nil
	if err = a.L.LoadMenuItemTranslations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MenuItemTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMenuItemToManyParentMenuItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ParentID, a.ID)
	queries.Assign(&c.ParentID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ParentMenuItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ParentID, b.ParentID) {
			bFound = true
		}
		if queries.Equal(v.ParentID, c.ParentID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MenuItemSlice{&a}
	if err = a.L.LoadParentMenuItems(ctx, tx, false, (*[]*MenuItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentMenuItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentMenuItems = nil
	if err = a.L.LoadParentMenuItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentMenuItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMenuItemToManyAddOpMenuItemTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c, d, e MenuItemTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItemTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemTranslationDBTypes, false, strmangle.SetComplement(menuItemTranslationPrimaryKeyColumns, menuItemTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MenuItemTranslation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMenuItemTranslations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.MenuItemID) {
			t.Error("foreign key was wrong value", a.ID, first.MenuItemID)
		}
		if !queries.Equal(a.ID, second.MenuItemID) {
			t.Error("foreign key was wrong value", a.ID, second.MenuItemID)
		}

		if first.R.MenuItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MenuItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MenuItemTranslations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MenuItemTranslations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MenuItemTranslations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMenuItemToManySetOpMenuItemTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c, d, e MenuItemTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItemTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemTranslationDBTypes, false, strmangle.SetComplement(menuItemTranslationPrimaryKeyColumns, menuItemTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMenuItemTranslations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MenuItemTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMenuItemTranslations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MenuItemTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MenuItemID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MenuItemID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.MenuItemID) {
		t.Error("foreign key was wrong value", a.ID, d.MenuItemID)
	}
	if !queries.Equal(a.ID, e.MenuItemID) {
		t.Error("foreign key was wrong value", a.ID, e.MenuItemID)
	}

	if b.R.MenuItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MenuItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MenuItem != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.MenuItem != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MenuItemTranslations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MenuItemTranslations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMenuItemToManyRemoveOpMenuItemTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c, d, e MenuItemTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItemTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemTranslationDBTypes, false, strmangle.SetComplement(menuItemTranslationPrimaryKeyColumns, menuItemTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMenuItemTranslations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MenuItemTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMenuItemTranslations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MenuItemTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MenuItemID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MenuItemID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.MenuItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MenuItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MenuItem != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.MenuItem != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MenuItemTranslations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MenuItemTranslations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MenuItemTranslations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMenuItemToManyAddOpParentMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MenuItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentMenuItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ParentID) {
			t.Error("foreign key was wrong value", a.ID, first.ParentID)
		}
		if !queries.Equal(a.ID, second.ParentID) {
			t.Error("foreign key was wrong value", a.ID, second.ParentID)
		}

		if first.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentMenuItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentMenuItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentMenuItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMenuItemToManySetOpParentMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentMenuItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentMenuItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ParentID) {
		t.Error("foreign key was wrong value", a.ID, d.ParentID)
	}
	if !queries.Equal(a.ID, e.ParentID) {
		t.Error("foreign key was wrong value", a.ID, e.ParentID)
	}

	if b.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Parent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Parent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentMenuItems[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentMenuItems[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMenuItemToManyRemoveOpParentMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentMenuItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentMenuItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ParentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ParentID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Parent != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Parent != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentMenuItems) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentMenuItems[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentMenuItems[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMenuItemToOneCategoryUsingCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MenuItem
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CategoryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCategoryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Category) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MenuItemSlice{&local}
	if err = local.L.LoadCategory(ctx, tx, false, (*[]*MenuItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMenuItemToOneCollectionUsingCollection(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MenuItem
	var foreign Collection

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, collectionDBTypes, false, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CollectionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Collection().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCollectionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MenuItemSlice{&local}
	if err = local.L.LoadCollection(ctx, tx, false, (*[]*MenuItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Collection == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Collection = nil
	if err = local.L.LoadCollection(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Collection == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMenuItemToOneMenuItemUsingParent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MenuItem
	var foreign MenuItem

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ParentID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Parent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddMenuItemHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *MenuItem) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MenuItemSlice{&local}
	if err = local.L.LoadParent(ctx, tx, false, (*[]*MenuItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Parent = nil
	if err = local.L.LoadParent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMenuItemToOneMenuUsingMenu(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MenuItem
	var foreign Menu

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, menuDBTypes, false, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.MenuID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Menu().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddMenuHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Menu) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MenuItemSlice{&local}
	if err = local.L.LoadMenu(ctx, tx, false, (*[]*MenuItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Menu == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Menu = nil
	if err = local.L.LoadMenu(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Menu == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMenuItemToOnePageUsingPage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MenuItem
	var foreign Page

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PageID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Page().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Page) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := MenuItemSlice{&local}
	if err = local.L.LoadPage(ctx, tx, false, (*[]*MenuItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Page = nil
	if err = local.L.LoadPage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testMenuItemToOneSetOpCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MenuItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CategoryID))
		reflect.Indirect(reflect.ValueOf(&a.CategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.CategoryID, x.ID)
		}
	}
}

func testMenuItemToOneRemoveOpCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCategory(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCategory(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Category().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Category != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CategoryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MenuItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMenuItemToOneSetOpCollectionUsingCollection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c Collection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Collection{&b, &c} {
		err = a.SetCollection(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Collection != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MenuItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CollectionID, x.ID) {
			t.Error("foreign key was wrong value", a.CollectionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CollectionID))
		reflect.Indirect(reflect.ValueOf(&a.CollectionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CollectionID, x.ID) {
			t.Error("foreign key was wrong value", a.CollectionID, x.ID)
		}
	}
}

func testMenuItemToOneRemoveOpCollectionUsingCollection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b Collection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCollection(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCollection(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Collection().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Collection != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CollectionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MenuItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMenuItemToOneSetOpMenuItemUsingParent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MenuItem{&b, &c} {
		err = a.SetParent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Parent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentMenuItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ParentID, x.ID) {
			t.Error("foreign key was wrong value", a.ParentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ParentID))
		reflect.Indirect(reflect.ValueOf(&a.ParentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ParentID, x.ID) {
			t.Error("foreign key was wrong value", a.ParentID, x.ID)
		}
	}
}

func testMenuItemToOneRemoveOpMenuItemUsingParent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParent(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParent(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Parent().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Parent != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ParentID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentMenuItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMenuItemToOneSetOpMenuUsingMenu(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c Menu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Menu{&b, &c} {
		err = a.SetMenu(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Menu != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MenuItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.MenuID, x.ID) {
			t.Error("foreign key was wrong value", a.MenuID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MenuID))
		reflect.Indirect(reflect.ValueOf(&a.MenuID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.MenuID, x.ID) {
			t.Error("foreign key was wrong value", a.MenuID, x.ID)
		}
	}
}

func testMenuItemToOneRemoveOpMenuUsingMenu(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b Menu

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetMenu(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveMenu(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Menu().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Menu != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.MenuID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MenuItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMenuItemToOneSetOpPageUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b, c Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Page{&b, &c} {
		err = a.SetPage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Page != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MenuItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PageID, x.ID) {
			t.Error("foreign key was wrong value", a.PageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageID))
		reflect.Indirect(reflect.ValueOf(&a.PageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PageID, x.ID) {
			t.Error("foreign key was wrong value", a.PageID, x.ID)
		}
	}
}

func testMenuItemToOneRemoveOpPageUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MenuItem
	var b Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Page().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Page != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PageID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.MenuItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testMenuItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMenuItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MenuItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMenuItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MenuItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	menuItemDBTypes = map[string]string{`ID`: `character varying`, `MenuID`: `character varying`, `Name`: `character varying`, `ParentID`: `character varying`, `URL`: `character varying`, `CategoryID`: `character varying`, `CollectionID`: `character varying`, `PageID`: `character varying`, `Metadata`: `jsonb`, `PrivateMetadata`: `jsonb`, `SortOrder`: `integer`}
	_               = bytes.MinRead
)

func testMenuItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(menuItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(menuItemAllColumns) == len(menuItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MenuItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMenuItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(menuItemAllColumns) == len(menuItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MenuItem{}
	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MenuItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, menuItemDBTypes, true, menuItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(menuItemAllColumns, menuItemPrimaryKeyColumns) {
		fields = menuItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			menuItemAllColumns,
			menuItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MenuItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMenuItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(menuItemAllColumns) == len(menuItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MenuItem{}
	if err = randomize.Struct(seed, &o, menuItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MenuItem: %s", err)
	}

	count, err := MenuItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, menuItemDBTypes, false, menuItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MenuItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MenuItem: %s", err)
	}

	count, err = MenuItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
