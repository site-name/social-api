// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PreorderAllocation is an object representing the database table.
type PreorderAllocation struct {
	ID                             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderLineID                    null.String `boil:"order_line_id" json:"order_line_id,omitempty" toml:"order_line_id" yaml:"order_line_id,omitempty"`
	Quantity                       null.Int    `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	ProductVariantChannelListingID null.String `boil:"product_variant_channel_listing_id" json:"product_variant_channel_listing_id,omitempty" toml:"product_variant_channel_listing_id" yaml:"product_variant_channel_listing_id,omitempty"`

	R *preorderAllocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L preorderAllocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PreorderAllocationColumns = struct {
	ID                             string
	OrderLineID                    string
	Quantity                       string
	ProductVariantChannelListingID string
}{
	ID:                             "id",
	OrderLineID:                    "order_line_id",
	Quantity:                       "quantity",
	ProductVariantChannelListingID: "product_variant_channel_listing_id",
}

var PreorderAllocationTableColumns = struct {
	ID                             string
	OrderLineID                    string
	Quantity                       string
	ProductVariantChannelListingID string
}{
	ID:                             "preorder_allocations.id",
	OrderLineID:                    "preorder_allocations.order_line_id",
	Quantity:                       "preorder_allocations.quantity",
	ProductVariantChannelListingID: "preorder_allocations.product_variant_channel_listing_id",
}

// Generated where

var PreorderAllocationWhere = struct {
	ID                             whereHelperstring
	OrderLineID                    whereHelpernull_String
	Quantity                       whereHelpernull_Int
	ProductVariantChannelListingID whereHelpernull_String
}{
	ID:                             whereHelperstring{field: "\"preorder_allocations\".\"id\""},
	OrderLineID:                    whereHelpernull_String{field: "\"preorder_allocations\".\"order_line_id\""},
	Quantity:                       whereHelpernull_Int{field: "\"preorder_allocations\".\"quantity\""},
	ProductVariantChannelListingID: whereHelpernull_String{field: "\"preorder_allocations\".\"product_variant_channel_listing_id\""},
}

// PreorderAllocationRels is where relationship names are stored.
var PreorderAllocationRels = struct {
}{}

// preorderAllocationR is where relationships are stored.
type preorderAllocationR struct {
}

// NewStruct creates a new relationship struct
func (*preorderAllocationR) NewStruct() *preorderAllocationR {
	return &preorderAllocationR{}
}

// preorderAllocationL is where Load methods for each relationship are stored.
type preorderAllocationL struct{}

var (
	preorderAllocationAllColumns            = []string{"id", "order_line_id", "quantity", "product_variant_channel_listing_id"}
	preorderAllocationColumnsWithoutDefault = []string{"id"}
	preorderAllocationColumnsWithDefault    = []string{"order_line_id", "quantity", "product_variant_channel_listing_id"}
	preorderAllocationPrimaryKeyColumns     = []string{"id"}
	preorderAllocationGeneratedColumns      = []string{}
)

type (
	// PreorderAllocationSlice is an alias for a slice of pointers to PreorderAllocation.
	// This should almost always be used instead of []PreorderAllocation.
	PreorderAllocationSlice []*PreorderAllocation
	// PreorderAllocationHook is the signature for custom PreorderAllocation hook methods
	PreorderAllocationHook func(context.Context, boil.ContextExecutor, *PreorderAllocation) error

	preorderAllocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	preorderAllocationType                 = reflect.TypeOf(&PreorderAllocation{})
	preorderAllocationMapping              = queries.MakeStructMapping(preorderAllocationType)
	preorderAllocationPrimaryKeyMapping, _ = queries.BindMapping(preorderAllocationType, preorderAllocationMapping, preorderAllocationPrimaryKeyColumns)
	preorderAllocationInsertCacheMut       sync.RWMutex
	preorderAllocationInsertCache          = make(map[string]insertCache)
	preorderAllocationUpdateCacheMut       sync.RWMutex
	preorderAllocationUpdateCache          = make(map[string]updateCache)
	preorderAllocationUpsertCacheMut       sync.RWMutex
	preorderAllocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var preorderAllocationAfterSelectHooks []PreorderAllocationHook

var preorderAllocationBeforeInsertHooks []PreorderAllocationHook
var preorderAllocationAfterInsertHooks []PreorderAllocationHook

var preorderAllocationBeforeUpdateHooks []PreorderAllocationHook
var preorderAllocationAfterUpdateHooks []PreorderAllocationHook

var preorderAllocationBeforeDeleteHooks []PreorderAllocationHook
var preorderAllocationAfterDeleteHooks []PreorderAllocationHook

var preorderAllocationBeforeUpsertHooks []PreorderAllocationHook
var preorderAllocationAfterUpsertHooks []PreorderAllocationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PreorderAllocation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preorderAllocationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PreorderAllocation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preorderAllocationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PreorderAllocation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preorderAllocationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PreorderAllocation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preorderAllocationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PreorderAllocation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preorderAllocationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PreorderAllocation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preorderAllocationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PreorderAllocation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preorderAllocationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PreorderAllocation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preorderAllocationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PreorderAllocation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range preorderAllocationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPreorderAllocationHook registers your hook function for all future operations.
func AddPreorderAllocationHook(hookPoint boil.HookPoint, preorderAllocationHook PreorderAllocationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		preorderAllocationAfterSelectHooks = append(preorderAllocationAfterSelectHooks, preorderAllocationHook)
	case boil.BeforeInsertHook:
		preorderAllocationBeforeInsertHooks = append(preorderAllocationBeforeInsertHooks, preorderAllocationHook)
	case boil.AfterInsertHook:
		preorderAllocationAfterInsertHooks = append(preorderAllocationAfterInsertHooks, preorderAllocationHook)
	case boil.BeforeUpdateHook:
		preorderAllocationBeforeUpdateHooks = append(preorderAllocationBeforeUpdateHooks, preorderAllocationHook)
	case boil.AfterUpdateHook:
		preorderAllocationAfterUpdateHooks = append(preorderAllocationAfterUpdateHooks, preorderAllocationHook)
	case boil.BeforeDeleteHook:
		preorderAllocationBeforeDeleteHooks = append(preorderAllocationBeforeDeleteHooks, preorderAllocationHook)
	case boil.AfterDeleteHook:
		preorderAllocationAfterDeleteHooks = append(preorderAllocationAfterDeleteHooks, preorderAllocationHook)
	case boil.BeforeUpsertHook:
		preorderAllocationBeforeUpsertHooks = append(preorderAllocationBeforeUpsertHooks, preorderAllocationHook)
	case boil.AfterUpsertHook:
		preorderAllocationAfterUpsertHooks = append(preorderAllocationAfterUpsertHooks, preorderAllocationHook)
	}
}

// One returns a single preorderAllocation record from the query.
func (q preorderAllocationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PreorderAllocation, error) {
	o := &PreorderAllocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for preorder_allocations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PreorderAllocation records from the query.
func (q preorderAllocationQuery) All(ctx context.Context, exec boil.ContextExecutor) (PreorderAllocationSlice, error) {
	var o []*PreorderAllocation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PreorderAllocation slice")
	}

	if len(preorderAllocationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PreorderAllocation records in the query.
func (q preorderAllocationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count preorder_allocations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q preorderAllocationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if preorder_allocations exists")
	}

	return count > 0, nil
}

// PreorderAllocations retrieves all the records using an executor.
func PreorderAllocations(mods ...qm.QueryMod) preorderAllocationQuery {
	mods = append(mods, qm.From("\"preorder_allocations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"preorder_allocations\".*"})
	}

	return preorderAllocationQuery{q}
}

// FindPreorderAllocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPreorderAllocation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PreorderAllocation, error) {
	preorderAllocationObj := &PreorderAllocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"preorder_allocations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, preorderAllocationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from preorder_allocations")
	}

	if err = preorderAllocationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return preorderAllocationObj, err
	}

	return preorderAllocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PreorderAllocation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no preorder_allocations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(preorderAllocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	preorderAllocationInsertCacheMut.RLock()
	cache, cached := preorderAllocationInsertCache[key]
	preorderAllocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			preorderAllocationAllColumns,
			preorderAllocationColumnsWithDefault,
			preorderAllocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(preorderAllocationType, preorderAllocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(preorderAllocationType, preorderAllocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"preorder_allocations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"preorder_allocations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into preorder_allocations")
	}

	if !cached {
		preorderAllocationInsertCacheMut.Lock()
		preorderAllocationInsertCache[key] = cache
		preorderAllocationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PreorderAllocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PreorderAllocation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	preorderAllocationUpdateCacheMut.RLock()
	cache, cached := preorderAllocationUpdateCache[key]
	preorderAllocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			preorderAllocationAllColumns,
			preorderAllocationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update preorder_allocations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"preorder_allocations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, preorderAllocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(preorderAllocationType, preorderAllocationMapping, append(wl, preorderAllocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update preorder_allocations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for preorder_allocations")
	}

	if !cached {
		preorderAllocationUpdateCacheMut.Lock()
		preorderAllocationUpdateCache[key] = cache
		preorderAllocationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q preorderAllocationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for preorder_allocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for preorder_allocations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PreorderAllocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preorderAllocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"preorder_allocations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, preorderAllocationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in preorderAllocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all preorderAllocation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PreorderAllocation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no preorder_allocations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(preorderAllocationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	preorderAllocationUpsertCacheMut.RLock()
	cache, cached := preorderAllocationUpsertCache[key]
	preorderAllocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			preorderAllocationAllColumns,
			preorderAllocationColumnsWithDefault,
			preorderAllocationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			preorderAllocationAllColumns,
			preorderAllocationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert preorder_allocations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(preorderAllocationPrimaryKeyColumns))
			copy(conflict, preorderAllocationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"preorder_allocations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(preorderAllocationType, preorderAllocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(preorderAllocationType, preorderAllocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert preorder_allocations")
	}

	if !cached {
		preorderAllocationUpsertCacheMut.Lock()
		preorderAllocationUpsertCache[key] = cache
		preorderAllocationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PreorderAllocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PreorderAllocation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PreorderAllocation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), preorderAllocationPrimaryKeyMapping)
	sql := "DELETE FROM \"preorder_allocations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from preorder_allocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for preorder_allocations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q preorderAllocationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no preorderAllocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from preorder_allocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for preorder_allocations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PreorderAllocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(preorderAllocationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preorderAllocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"preorder_allocations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, preorderAllocationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from preorderAllocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for preorder_allocations")
	}

	if len(preorderAllocationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PreorderAllocation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPreorderAllocation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PreorderAllocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PreorderAllocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), preorderAllocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"preorder_allocations\".* FROM \"preorder_allocations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, preorderAllocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PreorderAllocationSlice")
	}

	*o = slice

	return nil
}

// PreorderAllocationExists checks if the PreorderAllocation row exists.
func PreorderAllocationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"preorder_allocations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if preorder_allocations exists")
	}

	return exists, nil
}

// Exists checks if the PreorderAllocation row exists.
func (o *PreorderAllocation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PreorderAllocationExists(ctx, exec, o.ID)
}
