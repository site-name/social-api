// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCustomerEvents(t *testing.T) {
	t.Parallel()

	query := CustomerEvents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCustomerEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomerEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CustomerEvents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomerEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CustomerEventSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomerEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CustomerEventExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CustomerEvent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CustomerEventExists to return true, but got false.")
	}
}

func testCustomerEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	customerEventFound, err := FindCustomerEvent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if customerEventFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCustomerEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CustomerEvents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCustomerEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CustomerEvents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCustomerEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	customerEventOne := &CustomerEvent{}
	customerEventTwo := &CustomerEvent{}
	if err = randomize.Struct(seed, customerEventOne, customerEventDBTypes, false, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, customerEventTwo, customerEventDBTypes, false, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = customerEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = customerEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CustomerEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCustomerEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	customerEventOne := &CustomerEvent{}
	customerEventTwo := &CustomerEvent{}
	if err = randomize.Struct(seed, customerEventOne, customerEventDBTypes, false, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, customerEventTwo, customerEventDBTypes, false, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = customerEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = customerEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func customerEventBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerEvent) error {
	*o = CustomerEvent{}
	return nil
}

func customerEventAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerEvent) error {
	*o = CustomerEvent{}
	return nil
}

func customerEventAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CustomerEvent) error {
	*o = CustomerEvent{}
	return nil
}

func customerEventBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CustomerEvent) error {
	*o = CustomerEvent{}
	return nil
}

func customerEventAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CustomerEvent) error {
	*o = CustomerEvent{}
	return nil
}

func customerEventBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CustomerEvent) error {
	*o = CustomerEvent{}
	return nil
}

func customerEventAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CustomerEvent) error {
	*o = CustomerEvent{}
	return nil
}

func customerEventBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerEvent) error {
	*o = CustomerEvent{}
	return nil
}

func customerEventAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerEvent) error {
	*o = CustomerEvent{}
	return nil
}

func testCustomerEventsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CustomerEvent{}
	o := &CustomerEvent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, customerEventDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CustomerEvent object: %s", err)
	}

	AddCustomerEventHook(boil.BeforeInsertHook, customerEventBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	customerEventBeforeInsertHooks = []CustomerEventHook{}

	AddCustomerEventHook(boil.AfterInsertHook, customerEventAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	customerEventAfterInsertHooks = []CustomerEventHook{}

	AddCustomerEventHook(boil.AfterSelectHook, customerEventAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	customerEventAfterSelectHooks = []CustomerEventHook{}

	AddCustomerEventHook(boil.BeforeUpdateHook, customerEventBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	customerEventBeforeUpdateHooks = []CustomerEventHook{}

	AddCustomerEventHook(boil.AfterUpdateHook, customerEventAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	customerEventAfterUpdateHooks = []CustomerEventHook{}

	AddCustomerEventHook(boil.BeforeDeleteHook, customerEventBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	customerEventBeforeDeleteHooks = []CustomerEventHook{}

	AddCustomerEventHook(boil.AfterDeleteHook, customerEventAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	customerEventAfterDeleteHooks = []CustomerEventHook{}

	AddCustomerEventHook(boil.BeforeUpsertHook, customerEventBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	customerEventBeforeUpsertHooks = []CustomerEventHook{}

	AddCustomerEventHook(boil.AfterUpsertHook, customerEventAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	customerEventAfterUpsertHooks = []CustomerEventHook{}
}

func testCustomerEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCustomerEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(customerEventColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCustomerEventToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CustomerEvent
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Order) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CustomerEventSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*CustomerEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCustomerEventToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CustomerEvent
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CustomerEventSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*CustomerEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCustomerEventToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CustomerEvent
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, customerEventDBTypes, false, strmangle.SetComplement(customerEventPrimaryKeyColumns, customerEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CustomerEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testCustomerEventToOneRemoveOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CustomerEvent
	var b Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, customerEventDBTypes, false, strmangle.SetComplement(customerEventPrimaryKeyColumns, customerEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Order().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Order != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrderID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CustomerEvents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCustomerEventToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CustomerEvent
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, customerEventDBTypes, false, strmangle.SetComplement(customerEventPrimaryKeyColumns, customerEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CustomerEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testCustomerEventToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CustomerEvent
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, customerEventDBTypes, false, strmangle.SetComplement(customerEventPrimaryKeyColumns, customerEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CustomerEvents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCustomerEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCustomerEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CustomerEventSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCustomerEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CustomerEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	customerEventDBTypes = map[string]string{`ID`: `character varying`, `Date`: `bigint`, `Type`: `character varying`, `OrderID`: `character varying`, `UserID`: `character varying`, `Parameters`: `jsonb`}
	_                    = bytes.MinRead
)

func testCustomerEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(customerEventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(customerEventAllColumns) == len(customerEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCustomerEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(customerEventAllColumns) == len(customerEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CustomerEvent{}
	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, customerEventDBTypes, true, customerEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(customerEventAllColumns, customerEventPrimaryKeyColumns) {
		fields = customerEventAllColumns
	} else {
		fields = strmangle.SetComplement(
			customerEventAllColumns,
			customerEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CustomerEventSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCustomerEventsUpsert(t *testing.T) {
	t.Parallel()

	if len(customerEventAllColumns) == len(customerEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CustomerEvent{}
	if err = randomize.Struct(seed, &o, customerEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CustomerEvent: %s", err)
	}

	count, err := CustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, customerEventDBTypes, false, customerEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomerEvent struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CustomerEvent: %s", err)
	}

	count, err = CustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
