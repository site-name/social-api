// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWishlistItems(t *testing.T) {
	t.Parallel()

	query := WishlistItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWishlistItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WishlistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWishlistItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := WishlistItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WishlistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWishlistItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WishlistItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WishlistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWishlistItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WishlistItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if WishlistItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WishlistItemExists to return true, but got false.")
	}
}

func testWishlistItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	wishlistItemFound, err := FindWishlistItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if wishlistItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWishlistItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = WishlistItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWishlistItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := WishlistItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWishlistItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	wishlistItemOne := &WishlistItem{}
	wishlistItemTwo := &WishlistItem{}
	if err = randomize.Struct(seed, wishlistItemOne, wishlistItemDBTypes, false, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}
	if err = randomize.Struct(seed, wishlistItemTwo, wishlistItemDBTypes, false, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = wishlistItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = wishlistItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WishlistItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWishlistItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	wishlistItemOne := &WishlistItem{}
	wishlistItemTwo := &WishlistItem{}
	if err = randomize.Struct(seed, wishlistItemOne, wishlistItemDBTypes, false, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}
	if err = randomize.Struct(seed, wishlistItemTwo, wishlistItemDBTypes, false, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = wishlistItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = wishlistItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WishlistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func wishlistItemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItem) error {
	*o = WishlistItem{}
	return nil
}

func wishlistItemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItem) error {
	*o = WishlistItem{}
	return nil
}

func wishlistItemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItem) error {
	*o = WishlistItem{}
	return nil
}

func wishlistItemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItem) error {
	*o = WishlistItem{}
	return nil
}

func wishlistItemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItem) error {
	*o = WishlistItem{}
	return nil
}

func wishlistItemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItem) error {
	*o = WishlistItem{}
	return nil
}

func wishlistItemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItem) error {
	*o = WishlistItem{}
	return nil
}

func wishlistItemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItem) error {
	*o = WishlistItem{}
	return nil
}

func wishlistItemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItem) error {
	*o = WishlistItem{}
	return nil
}

func testWishlistItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &WishlistItem{}
	o := &WishlistItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WishlistItem object: %s", err)
	}

	AddWishlistItemHook(boil.BeforeInsertHook, wishlistItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	wishlistItemBeforeInsertHooks = []WishlistItemHook{}

	AddWishlistItemHook(boil.AfterInsertHook, wishlistItemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	wishlistItemAfterInsertHooks = []WishlistItemHook{}

	AddWishlistItemHook(boil.AfterSelectHook, wishlistItemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	wishlistItemAfterSelectHooks = []WishlistItemHook{}

	AddWishlistItemHook(boil.BeforeUpdateHook, wishlistItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	wishlistItemBeforeUpdateHooks = []WishlistItemHook{}

	AddWishlistItemHook(boil.AfterUpdateHook, wishlistItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	wishlistItemAfterUpdateHooks = []WishlistItemHook{}

	AddWishlistItemHook(boil.BeforeDeleteHook, wishlistItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	wishlistItemBeforeDeleteHooks = []WishlistItemHook{}

	AddWishlistItemHook(boil.AfterDeleteHook, wishlistItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	wishlistItemAfterDeleteHooks = []WishlistItemHook{}

	AddWishlistItemHook(boil.BeforeUpsertHook, wishlistItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	wishlistItemBeforeUpsertHooks = []WishlistItemHook{}

	AddWishlistItemHook(boil.AfterUpsertHook, wishlistItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	wishlistItemAfterUpsertHooks = []WishlistItemHook{}
}

func testWishlistItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WishlistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWishlistItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(wishlistItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := WishlistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWishlistItemToManyWishlistItemProductVariants(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItem
	var b, c WishlistItemProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, wishlistItemProductVariantDBTypes, false, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, wishlistItemProductVariantDBTypes, false, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.WishlistItemID, a.ID)
	queries.Assign(&c.WishlistItemID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WishlistItemProductVariants().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.WishlistItemID, b.WishlistItemID) {
			bFound = true
		}
		if queries.Equal(v.WishlistItemID, c.WishlistItemID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WishlistItemSlice{&a}
	if err = a.L.LoadWishlistItemProductVariants(ctx, tx, false, (*[]*WishlistItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WishlistItemProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WishlistItemProductVariants = nil
	if err = a.L.LoadWishlistItemProductVariants(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WishlistItemProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWishlistItemToManyAddOpWishlistItemProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItem
	var b, c, d, e WishlistItemProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WishlistItemProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, wishlistItemProductVariantDBTypes, false, strmangle.SetComplement(wishlistItemProductVariantPrimaryKeyColumns, wishlistItemProductVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*WishlistItemProductVariant{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWishlistItemProductVariants(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.WishlistItemID) {
			t.Error("foreign key was wrong value", a.ID, first.WishlistItemID)
		}
		if !queries.Equal(a.ID, second.WishlistItemID) {
			t.Error("foreign key was wrong value", a.ID, second.WishlistItemID)
		}

		if first.R.WishlistItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.WishlistItem != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WishlistItemProductVariants[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WishlistItemProductVariants[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WishlistItemProductVariants().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testWishlistItemToManySetOpWishlistItemProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItem
	var b, c, d, e WishlistItemProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WishlistItemProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, wishlistItemProductVariantDBTypes, false, strmangle.SetComplement(wishlistItemProductVariantPrimaryKeyColumns, wishlistItemProductVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetWishlistItemProductVariants(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetWishlistItemProductVariants(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.WishlistItemID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.WishlistItemID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.WishlistItemID) {
		t.Error("foreign key was wrong value", a.ID, d.WishlistItemID)
	}
	if !queries.Equal(a.ID, e.WishlistItemID) {
		t.Error("foreign key was wrong value", a.ID, e.WishlistItemID)
	}

	if b.R.WishlistItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WishlistItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WishlistItem != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.WishlistItem != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.WishlistItemProductVariants[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.WishlistItemProductVariants[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testWishlistItemToManyRemoveOpWishlistItemProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItem
	var b, c, d, e WishlistItemProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WishlistItemProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, wishlistItemProductVariantDBTypes, false, strmangle.SetComplement(wishlistItemProductVariantPrimaryKeyColumns, wishlistItemProductVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddWishlistItemProductVariants(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveWishlistItemProductVariants(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.WishlistItemID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.WishlistItemID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.WishlistItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WishlistItem != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WishlistItem != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.WishlistItem != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.WishlistItemProductVariants) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.WishlistItemProductVariants[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.WishlistItemProductVariants[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testWishlistItemToOneProductVariantUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WishlistItem
	var foreign ProductVariant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductVariantHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := WishlistItemSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*WishlistItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testWishlistItemToOneWishlistUsingWishlist(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WishlistItem
	var foreign Wishlist

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, wishlistDBTypes, false, wishlistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Wishlist struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.WishlistID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Wishlist().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddWishlistHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Wishlist) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := WishlistItemSlice{&local}
	if err = local.L.LoadWishlist(ctx, tx, false, (*[]*WishlistItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Wishlist == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Wishlist = nil
	if err = local.L.LoadWishlist(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Wishlist == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testWishlistItemToOneSetOpProductVariantUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItem
	var b, c ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductVariant{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductWishlistItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}

func testWishlistItemToOneRemoveOpProductVariantUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItem
	var b ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Product().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Product != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductWishlistItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWishlistItemToOneSetOpWishlistUsingWishlist(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItem
	var b, c Wishlist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, wishlistDBTypes, false, strmangle.SetComplement(wishlistPrimaryKeyColumns, wishlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, wishlistDBTypes, false, strmangle.SetComplement(wishlistPrimaryKeyColumns, wishlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Wishlist{&b, &c} {
		err = a.SetWishlist(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Wishlist != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WishlistItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.WishlistID, x.ID) {
			t.Error("foreign key was wrong value", a.WishlistID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WishlistID))
		reflect.Indirect(reflect.ValueOf(&a.WishlistID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.WishlistID, x.ID) {
			t.Error("foreign key was wrong value", a.WishlistID, x.ID)
		}
	}
}

func testWishlistItemToOneRemoveOpWishlistUsingWishlist(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItem
	var b Wishlist

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, wishlistDBTypes, false, strmangle.SetComplement(wishlistPrimaryKeyColumns, wishlistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetWishlist(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveWishlist(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Wishlist().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Wishlist != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.WishlistID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.WishlistItems) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWishlistItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWishlistItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WishlistItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWishlistItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WishlistItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	wishlistItemDBTypes = map[string]string{`ID`: `character varying`, `WishlistID`: `character varying`, `ProductID`: `character varying`, `CreateAt`: `bigint`}
	_                   = bytes.MinRead
)

func testWishlistItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(wishlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(wishlistItemAllColumns) == len(wishlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WishlistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWishlistItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(wishlistItemAllColumns) == len(wishlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItem{}
	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WishlistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, wishlistItemDBTypes, true, wishlistItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(wishlistItemAllColumns, wishlistItemPrimaryKeyColumns) {
		fields = wishlistItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			wishlistItemAllColumns,
			wishlistItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WishlistItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWishlistItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(wishlistItemAllColumns) == len(wishlistItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := WishlistItem{}
	if err = randomize.Struct(seed, &o, wishlistItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WishlistItem: %s", err)
	}

	count, err := WishlistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, wishlistItemDBTypes, false, wishlistItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WishlistItem: %s", err)
	}

	count, err = WishlistItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
