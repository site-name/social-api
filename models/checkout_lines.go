// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CheckoutLine is an object representing the database table.
type CheckoutLine struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateAt   null.Int64  `boil:"create_at" json:"create_at,omitempty" toml:"create_at" yaml:"create_at,omitempty"`
	CheckoutID null.String `boil:"checkout_id" json:"checkout_id,omitempty" toml:"checkout_id" yaml:"checkout_id,omitempty"`
	VariantID  null.String `boil:"variant_id" json:"variant_id,omitempty" toml:"variant_id" yaml:"variant_id,omitempty"`
	Quantity   null.Int    `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`

	R *checkoutLineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checkoutLineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CheckoutLineColumns = struct {
	ID         string
	CreateAt   string
	CheckoutID string
	VariantID  string
	Quantity   string
}{
	ID:         "id",
	CreateAt:   "create_at",
	CheckoutID: "checkout_id",
	VariantID:  "variant_id",
	Quantity:   "quantity",
}

var CheckoutLineTableColumns = struct {
	ID         string
	CreateAt   string
	CheckoutID string
	VariantID  string
	Quantity   string
}{
	ID:         "checkout_lines.id",
	CreateAt:   "checkout_lines.create_at",
	CheckoutID: "checkout_lines.checkout_id",
	VariantID:  "checkout_lines.variant_id",
	Quantity:   "checkout_lines.quantity",
}

// Generated where

var CheckoutLineWhere = struct {
	ID         whereHelperstring
	CreateAt   whereHelpernull_Int64
	CheckoutID whereHelpernull_String
	VariantID  whereHelpernull_String
	Quantity   whereHelpernull_Int
}{
	ID:         whereHelperstring{field: "\"checkout_lines\".\"id\""},
	CreateAt:   whereHelpernull_Int64{field: "\"checkout_lines\".\"create_at\""},
	CheckoutID: whereHelpernull_String{field: "\"checkout_lines\".\"checkout_id\""},
	VariantID:  whereHelpernull_String{field: "\"checkout_lines\".\"variant_id\""},
	Quantity:   whereHelpernull_Int{field: "\"checkout_lines\".\"quantity\""},
}

// CheckoutLineRels is where relationship names are stored.
var CheckoutLineRels = struct {
	Checkout string
	Variant  string
}{
	Checkout: "Checkout",
	Variant:  "Variant",
}

// checkoutLineR is where relationships are stored.
type checkoutLineR struct {
	Checkout *Checkout       `boil:"Checkout" json:"Checkout" toml:"Checkout" yaml:"Checkout"`
	Variant  *ProductVariant `boil:"Variant" json:"Variant" toml:"Variant" yaml:"Variant"`
}

// NewStruct creates a new relationship struct
func (*checkoutLineR) NewStruct() *checkoutLineR {
	return &checkoutLineR{}
}

func (r *checkoutLineR) GetCheckout() *Checkout {
	if r == nil {
		return nil
	}
	return r.Checkout
}

func (r *checkoutLineR) GetVariant() *ProductVariant {
	if r == nil {
		return nil
	}
	return r.Variant
}

// checkoutLineL is where Load methods for each relationship are stored.
type checkoutLineL struct{}

var (
	checkoutLineAllColumns            = []string{"id", "create_at", "checkout_id", "variant_id", "quantity"}
	checkoutLineColumnsWithoutDefault = []string{"id"}
	checkoutLineColumnsWithDefault    = []string{"create_at", "checkout_id", "variant_id", "quantity"}
	checkoutLinePrimaryKeyColumns     = []string{"id"}
	checkoutLineGeneratedColumns      = []string{}
)

type (
	// CheckoutLineSlice is an alias for a slice of pointers to CheckoutLine.
	// This should almost always be used instead of []CheckoutLine.
	CheckoutLineSlice []*CheckoutLine
	// CheckoutLineHook is the signature for custom CheckoutLine hook methods
	CheckoutLineHook func(context.Context, boil.ContextExecutor, *CheckoutLine) error

	checkoutLineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checkoutLineType                 = reflect.TypeOf(&CheckoutLine{})
	checkoutLineMapping              = queries.MakeStructMapping(checkoutLineType)
	checkoutLinePrimaryKeyMapping, _ = queries.BindMapping(checkoutLineType, checkoutLineMapping, checkoutLinePrimaryKeyColumns)
	checkoutLineInsertCacheMut       sync.RWMutex
	checkoutLineInsertCache          = make(map[string]insertCache)
	checkoutLineUpdateCacheMut       sync.RWMutex
	checkoutLineUpdateCache          = make(map[string]updateCache)
	checkoutLineUpsertCacheMut       sync.RWMutex
	checkoutLineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var checkoutLineAfterSelectHooks []CheckoutLineHook

var checkoutLineBeforeInsertHooks []CheckoutLineHook
var checkoutLineAfterInsertHooks []CheckoutLineHook

var checkoutLineBeforeUpdateHooks []CheckoutLineHook
var checkoutLineAfterUpdateHooks []CheckoutLineHook

var checkoutLineBeforeDeleteHooks []CheckoutLineHook
var checkoutLineAfterDeleteHooks []CheckoutLineHook

var checkoutLineBeforeUpsertHooks []CheckoutLineHook
var checkoutLineAfterUpsertHooks []CheckoutLineHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CheckoutLine) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutLineAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CheckoutLine) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutLineBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CheckoutLine) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutLineAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CheckoutLine) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutLineBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CheckoutLine) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutLineAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CheckoutLine) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutLineBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CheckoutLine) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutLineAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CheckoutLine) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutLineBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CheckoutLine) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutLineAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCheckoutLineHook registers your hook function for all future operations.
func AddCheckoutLineHook(hookPoint boil.HookPoint, checkoutLineHook CheckoutLineHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		checkoutLineAfterSelectHooks = append(checkoutLineAfterSelectHooks, checkoutLineHook)
	case boil.BeforeInsertHook:
		checkoutLineBeforeInsertHooks = append(checkoutLineBeforeInsertHooks, checkoutLineHook)
	case boil.AfterInsertHook:
		checkoutLineAfterInsertHooks = append(checkoutLineAfterInsertHooks, checkoutLineHook)
	case boil.BeforeUpdateHook:
		checkoutLineBeforeUpdateHooks = append(checkoutLineBeforeUpdateHooks, checkoutLineHook)
	case boil.AfterUpdateHook:
		checkoutLineAfterUpdateHooks = append(checkoutLineAfterUpdateHooks, checkoutLineHook)
	case boil.BeforeDeleteHook:
		checkoutLineBeforeDeleteHooks = append(checkoutLineBeforeDeleteHooks, checkoutLineHook)
	case boil.AfterDeleteHook:
		checkoutLineAfterDeleteHooks = append(checkoutLineAfterDeleteHooks, checkoutLineHook)
	case boil.BeforeUpsertHook:
		checkoutLineBeforeUpsertHooks = append(checkoutLineBeforeUpsertHooks, checkoutLineHook)
	case boil.AfterUpsertHook:
		checkoutLineAfterUpsertHooks = append(checkoutLineAfterUpsertHooks, checkoutLineHook)
	}
}

// One returns a single checkoutLine record from the query.
func (q checkoutLineQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CheckoutLine, error) {
	o := &CheckoutLine{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for checkout_lines")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CheckoutLine records from the query.
func (q checkoutLineQuery) All(ctx context.Context, exec boil.ContextExecutor) (CheckoutLineSlice, error) {
	var o []*CheckoutLine

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CheckoutLine slice")
	}

	if len(checkoutLineAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CheckoutLine records in the query.
func (q checkoutLineQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count checkout_lines rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q checkoutLineQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if checkout_lines exists")
	}

	return count > 0, nil
}

// Checkout pointed to by the foreign key.
func (o *CheckoutLine) Checkout(mods ...qm.QueryMod) checkoutQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"token\" = ?", o.CheckoutID),
	}

	queryMods = append(queryMods, mods...)

	return Checkouts(queryMods...)
}

// Variant pointed to by the foreign key.
func (o *CheckoutLine) Variant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VariantID),
	}

	queryMods = append(queryMods, mods...)

	return ProductVariants(queryMods...)
}

// LoadCheckout allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutLineL) LoadCheckout(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckoutLine interface{}, mods queries.Applicator) error {
	var slice []*CheckoutLine
	var object *CheckoutLine

	if singular {
		var ok bool
		object, ok = maybeCheckoutLine.(*CheckoutLine)
		if !ok {
			object = new(CheckoutLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckoutLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckoutLine))
			}
		}
	} else {
		s, ok := maybeCheckoutLine.(*[]*CheckoutLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckoutLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckoutLine))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutLineR{}
		}
		if !queries.IsNil(object.CheckoutID) {
			args = append(args, object.CheckoutID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutLineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CheckoutID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CheckoutID) {
				args = append(args, obj.CheckoutID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.token in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Checkout")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Checkout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Checkout = foreign
		if foreign.R == nil {
			foreign.R = &checkoutR{}
		}
		foreign.R.CheckoutLines = append(foreign.R.CheckoutLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CheckoutID, foreign.Token) {
				local.R.Checkout = foreign
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.CheckoutLines = append(foreign.R.CheckoutLines, local)
				break
			}
		}
	}

	return nil
}

// LoadVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutLineL) LoadVariant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckoutLine interface{}, mods queries.Applicator) error {
	var slice []*CheckoutLine
	var object *CheckoutLine

	if singular {
		var ok bool
		object, ok = maybeCheckoutLine.(*CheckoutLine)
		if !ok {
			object = new(CheckoutLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckoutLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckoutLine))
			}
		}
	} else {
		s, ok := maybeCheckoutLine.(*[]*CheckoutLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckoutLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckoutLine))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutLineR{}
		}
		if !queries.IsNil(object.VariantID) {
			args = append(args, object.VariantID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutLineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VariantID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.VariantID) {
				args = append(args, obj.VariantID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Variant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.VariantCheckoutLines = append(foreign.R.VariantCheckoutLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VariantID, foreign.ID) {
				local.R.Variant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.VariantCheckoutLines = append(foreign.R.VariantCheckoutLines, local)
				break
			}
		}
	}

	return nil
}

// SetCheckout of the checkoutLine to the related item.
// Sets o.R.Checkout to related.
// Adds o to related.R.CheckoutLines.
func (o *CheckoutLine) SetCheckout(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Checkout) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkout_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"checkout_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutLinePrimaryKeyColumns),
	)
	values := []interface{}{related.Token, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CheckoutID, related.Token)
	if o.R == nil {
		o.R = &checkoutLineR{
			Checkout: related,
		}
	} else {
		o.R.Checkout = related
	}

	if related.R == nil {
		related.R = &checkoutR{
			CheckoutLines: CheckoutLineSlice{o},
		}
	} else {
		related.R.CheckoutLines = append(related.R.CheckoutLines, o)
	}

	return nil
}

// RemoveCheckout relationship.
// Sets o.R.Checkout to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CheckoutLine) RemoveCheckout(ctx context.Context, exec boil.ContextExecutor, related *Checkout) error {
	var err error

	queries.SetScanner(&o.CheckoutID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("checkout_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Checkout = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CheckoutLines {
		if queries.Equal(o.CheckoutID, ri.CheckoutID) {
			continue
		}

		ln := len(related.R.CheckoutLines)
		if ln > 1 && i < ln-1 {
			related.R.CheckoutLines[i] = related.R.CheckoutLines[ln-1]
		}
		related.R.CheckoutLines = related.R.CheckoutLines[:ln-1]
		break
	}
	return nil
}

// SetVariant of the checkoutLine to the related item.
// Sets o.R.Variant to related.
// Adds o to related.R.VariantCheckoutLines.
func (o *CheckoutLine) SetVariant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkout_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"variant_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutLinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VariantID, related.ID)
	if o.R == nil {
		o.R = &checkoutLineR{
			Variant: related,
		}
	} else {
		o.R.Variant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			VariantCheckoutLines: CheckoutLineSlice{o},
		}
	} else {
		related.R.VariantCheckoutLines = append(related.R.VariantCheckoutLines, o)
	}

	return nil
}

// RemoveVariant relationship.
// Sets o.R.Variant to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CheckoutLine) RemoveVariant(ctx context.Context, exec boil.ContextExecutor, related *ProductVariant) error {
	var err error

	queries.SetScanner(&o.VariantID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("variant_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Variant = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VariantCheckoutLines {
		if queries.Equal(o.VariantID, ri.VariantID) {
			continue
		}

		ln := len(related.R.VariantCheckoutLines)
		if ln > 1 && i < ln-1 {
			related.R.VariantCheckoutLines[i] = related.R.VariantCheckoutLines[ln-1]
		}
		related.R.VariantCheckoutLines = related.R.VariantCheckoutLines[:ln-1]
		break
	}
	return nil
}

// CheckoutLines retrieves all the records using an executor.
func CheckoutLines(mods ...qm.QueryMod) checkoutLineQuery {
	mods = append(mods, qm.From("\"checkout_lines\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"checkout_lines\".*"})
	}

	return checkoutLineQuery{q}
}

// FindCheckoutLine retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCheckoutLine(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CheckoutLine, error) {
	checkoutLineObj := &CheckoutLine{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"checkout_lines\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, checkoutLineObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from checkout_lines")
	}

	if err = checkoutLineObj.doAfterSelectHooks(ctx, exec); err != nil {
		return checkoutLineObj, err
	}

	return checkoutLineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CheckoutLine) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkout_lines provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutLineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checkoutLineInsertCacheMut.RLock()
	cache, cached := checkoutLineInsertCache[key]
	checkoutLineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checkoutLineAllColumns,
			checkoutLineColumnsWithDefault,
			checkoutLineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checkoutLineType, checkoutLineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checkoutLineType, checkoutLineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"checkout_lines\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"checkout_lines\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into checkout_lines")
	}

	if !cached {
		checkoutLineInsertCacheMut.Lock()
		checkoutLineInsertCache[key] = cache
		checkoutLineInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CheckoutLine.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CheckoutLine) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	checkoutLineUpdateCacheMut.RLock()
	cache, cached := checkoutLineUpdateCache[key]
	checkoutLineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checkoutLineAllColumns,
			checkoutLinePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update checkout_lines, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"checkout_lines\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, checkoutLinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checkoutLineType, checkoutLineMapping, append(wl, checkoutLinePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update checkout_lines row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for checkout_lines")
	}

	if !cached {
		checkoutLineUpdateCacheMut.Lock()
		checkoutLineUpdateCache[key] = cache
		checkoutLineUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q checkoutLineQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for checkout_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for checkout_lines")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CheckoutLineSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"checkout_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, checkoutLinePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in checkoutLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all checkoutLine")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CheckoutLine) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkout_lines provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutLineColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checkoutLineUpsertCacheMut.RLock()
	cache, cached := checkoutLineUpsertCache[key]
	checkoutLineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			checkoutLineAllColumns,
			checkoutLineColumnsWithDefault,
			checkoutLineColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			checkoutLineAllColumns,
			checkoutLinePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert checkout_lines, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(checkoutLinePrimaryKeyColumns))
			copy(conflict, checkoutLinePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"checkout_lines\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(checkoutLineType, checkoutLineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checkoutLineType, checkoutLineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert checkout_lines")
	}

	if !cached {
		checkoutLineUpsertCacheMut.Lock()
		checkoutLineUpsertCache[key] = cache
		checkoutLineUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CheckoutLine record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CheckoutLine) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CheckoutLine provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checkoutLinePrimaryKeyMapping)
	sql := "DELETE FROM \"checkout_lines\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from checkout_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for checkout_lines")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q checkoutLineQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no checkoutLineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkout_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkout_lines")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CheckoutLineSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(checkoutLineBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"checkout_lines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutLinePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkoutLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkout_lines")
	}

	if len(checkoutLineAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CheckoutLine) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCheckoutLine(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckoutLineSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CheckoutLineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"checkout_lines\".* FROM \"checkout_lines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutLinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CheckoutLineSlice")
	}

	*o = slice

	return nil
}

// CheckoutLineExists checks if the CheckoutLine row exists.
func CheckoutLineExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"checkout_lines\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if checkout_lines exists")
	}

	return exists, nil
}

// Exists checks if the CheckoutLine row exists.
func (o *CheckoutLine) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CheckoutLineExists(ctx, exec, o.ID)
}
