// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Voucher is an object representing the database table.
type Voucher struct {
	ID                       string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Type                     null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Name                     null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Code                     null.String `boil:"code" json:"code,omitempty" toml:"code" yaml:"code,omitempty"`
	Usagelimit               null.Int    `boil:"usagelimit" json:"usagelimit,omitempty" toml:"usagelimit" yaml:"usagelimit,omitempty"`
	Used                     null.Int    `boil:"used" json:"used,omitempty" toml:"used" yaml:"used,omitempty"`
	Startdate                null.Int64  `boil:"startdate" json:"startdate,omitempty" toml:"startdate" yaml:"startdate,omitempty"`
	Enddate                  null.Int64  `boil:"enddate" json:"enddate,omitempty" toml:"enddate" yaml:"enddate,omitempty"`
	Applyonceperorder        null.Bool   `boil:"applyonceperorder" json:"applyonceperorder,omitempty" toml:"applyonceperorder" yaml:"applyonceperorder,omitempty"`
	Applyoncepercustomer     null.Bool   `boil:"applyoncepercustomer" json:"applyoncepercustomer,omitempty" toml:"applyoncepercustomer" yaml:"applyoncepercustomer,omitempty"`
	Onlyforstaff             null.Bool   `boil:"onlyforstaff" json:"onlyforstaff,omitempty" toml:"onlyforstaff" yaml:"onlyforstaff,omitempty"`
	Discountvaluetype        null.String `boil:"discountvaluetype" json:"discountvaluetype,omitempty" toml:"discountvaluetype" yaml:"discountvaluetype,omitempty"`
	Countries                null.String `boil:"countries" json:"countries,omitempty" toml:"countries" yaml:"countries,omitempty"`
	Mincheckoutitemsquantity null.Int    `boil:"mincheckoutitemsquantity" json:"mincheckoutitemsquantity,omitempty" toml:"mincheckoutitemsquantity" yaml:"mincheckoutitemsquantity,omitempty"`
	Createat                 null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Updateat                 null.Int64  `boil:"updateat" json:"updateat,omitempty" toml:"updateat" yaml:"updateat,omitempty"`
	Metadata                 null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata          null.JSON   `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *voucherR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voucherL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoucherColumns = struct {
	ID                       string
	Type                     string
	Name                     string
	Code                     string
	Usagelimit               string
	Used                     string
	Startdate                string
	Enddate                  string
	Applyonceperorder        string
	Applyoncepercustomer     string
	Onlyforstaff             string
	Discountvaluetype        string
	Countries                string
	Mincheckoutitemsquantity string
	Createat                 string
	Updateat                 string
	Metadata                 string
	Privatemetadata          string
}{
	ID:                       "id",
	Type:                     "type",
	Name:                     "name",
	Code:                     "code",
	Usagelimit:               "usagelimit",
	Used:                     "used",
	Startdate:                "startdate",
	Enddate:                  "enddate",
	Applyonceperorder:        "applyonceperorder",
	Applyoncepercustomer:     "applyoncepercustomer",
	Onlyforstaff:             "onlyforstaff",
	Discountvaluetype:        "discountvaluetype",
	Countries:                "countries",
	Mincheckoutitemsquantity: "mincheckoutitemsquantity",
	Createat:                 "createat",
	Updateat:                 "updateat",
	Metadata:                 "metadata",
	Privatemetadata:          "privatemetadata",
}

var VoucherTableColumns = struct {
	ID                       string
	Type                     string
	Name                     string
	Code                     string
	Usagelimit               string
	Used                     string
	Startdate                string
	Enddate                  string
	Applyonceperorder        string
	Applyoncepercustomer     string
	Onlyforstaff             string
	Discountvaluetype        string
	Countries                string
	Mincheckoutitemsquantity string
	Createat                 string
	Updateat                 string
	Metadata                 string
	Privatemetadata          string
}{
	ID:                       "vouchers.id",
	Type:                     "vouchers.type",
	Name:                     "vouchers.name",
	Code:                     "vouchers.code",
	Usagelimit:               "vouchers.usagelimit",
	Used:                     "vouchers.used",
	Startdate:                "vouchers.startdate",
	Enddate:                  "vouchers.enddate",
	Applyonceperorder:        "vouchers.applyonceperorder",
	Applyoncepercustomer:     "vouchers.applyoncepercustomer",
	Onlyforstaff:             "vouchers.onlyforstaff",
	Discountvaluetype:        "vouchers.discountvaluetype",
	Countries:                "vouchers.countries",
	Mincheckoutitemsquantity: "vouchers.mincheckoutitemsquantity",
	Createat:                 "vouchers.createat",
	Updateat:                 "vouchers.updateat",
	Metadata:                 "vouchers.metadata",
	Privatemetadata:          "vouchers.privatemetadata",
}

// Generated where

var VoucherWhere = struct {
	ID                       whereHelperstring
	Type                     whereHelpernull_String
	Name                     whereHelpernull_String
	Code                     whereHelpernull_String
	Usagelimit               whereHelpernull_Int
	Used                     whereHelpernull_Int
	Startdate                whereHelpernull_Int64
	Enddate                  whereHelpernull_Int64
	Applyonceperorder        whereHelpernull_Bool
	Applyoncepercustomer     whereHelpernull_Bool
	Onlyforstaff             whereHelpernull_Bool
	Discountvaluetype        whereHelpernull_String
	Countries                whereHelpernull_String
	Mincheckoutitemsquantity whereHelpernull_Int
	Createat                 whereHelpernull_Int64
	Updateat                 whereHelpernull_Int64
	Metadata                 whereHelpernull_JSON
	Privatemetadata          whereHelpernull_JSON
}{
	ID:                       whereHelperstring{field: "\"vouchers\".\"id\""},
	Type:                     whereHelpernull_String{field: "\"vouchers\".\"type\""},
	Name:                     whereHelpernull_String{field: "\"vouchers\".\"name\""},
	Code:                     whereHelpernull_String{field: "\"vouchers\".\"code\""},
	Usagelimit:               whereHelpernull_Int{field: "\"vouchers\".\"usagelimit\""},
	Used:                     whereHelpernull_Int{field: "\"vouchers\".\"used\""},
	Startdate:                whereHelpernull_Int64{field: "\"vouchers\".\"startdate\""},
	Enddate:                  whereHelpernull_Int64{field: "\"vouchers\".\"enddate\""},
	Applyonceperorder:        whereHelpernull_Bool{field: "\"vouchers\".\"applyonceperorder\""},
	Applyoncepercustomer:     whereHelpernull_Bool{field: "\"vouchers\".\"applyoncepercustomer\""},
	Onlyforstaff:             whereHelpernull_Bool{field: "\"vouchers\".\"onlyforstaff\""},
	Discountvaluetype:        whereHelpernull_String{field: "\"vouchers\".\"discountvaluetype\""},
	Countries:                whereHelpernull_String{field: "\"vouchers\".\"countries\""},
	Mincheckoutitemsquantity: whereHelpernull_Int{field: "\"vouchers\".\"mincheckoutitemsquantity\""},
	Createat:                 whereHelpernull_Int64{field: "\"vouchers\".\"createat\""},
	Updateat:                 whereHelpernull_Int64{field: "\"vouchers\".\"updateat\""},
	Metadata:                 whereHelpernull_JSON{field: "\"vouchers\".\"metadata\""},
	Privatemetadata:          whereHelpernull_JSON{field: "\"vouchers\".\"privatemetadata\""},
}

// VoucherRels is where relationship names are stored.
var VoucherRels = struct {
	VoucheridOrders                 string
	VoucheridVoucherCategories      string
	VoucheridVoucherChannelListings string
	VoucheridVoucherCollections     string
	VoucheridVoucherCustomers       string
	VoucheridVoucherProducts        string
	VoucheridVoucherTranslations    string
}{
	VoucheridOrders:                 "VoucheridOrders",
	VoucheridVoucherCategories:      "VoucheridVoucherCategories",
	VoucheridVoucherChannelListings: "VoucheridVoucherChannelListings",
	VoucheridVoucherCollections:     "VoucheridVoucherCollections",
	VoucheridVoucherCustomers:       "VoucheridVoucherCustomers",
	VoucheridVoucherProducts:        "VoucheridVoucherProducts",
	VoucheridVoucherTranslations:    "VoucheridVoucherTranslations",
}

// voucherR is where relationships are stored.
type voucherR struct {
	VoucheridOrders                 OrderSlice                 `boil:"VoucheridOrders" json:"VoucheridOrders" toml:"VoucheridOrders" yaml:"VoucheridOrders"`
	VoucheridVoucherCategories      VoucherCategorySlice       `boil:"VoucheridVoucherCategories" json:"VoucheridVoucherCategories" toml:"VoucheridVoucherCategories" yaml:"VoucheridVoucherCategories"`
	VoucheridVoucherChannelListings VoucherChannelListingSlice `boil:"VoucheridVoucherChannelListings" json:"VoucheridVoucherChannelListings" toml:"VoucheridVoucherChannelListings" yaml:"VoucheridVoucherChannelListings"`
	VoucheridVoucherCollections     VoucherCollectionSlice     `boil:"VoucheridVoucherCollections" json:"VoucheridVoucherCollections" toml:"VoucheridVoucherCollections" yaml:"VoucheridVoucherCollections"`
	VoucheridVoucherCustomers       VoucherCustomerSlice       `boil:"VoucheridVoucherCustomers" json:"VoucheridVoucherCustomers" toml:"VoucheridVoucherCustomers" yaml:"VoucheridVoucherCustomers"`
	VoucheridVoucherProducts        VoucherProductSlice        `boil:"VoucheridVoucherProducts" json:"VoucheridVoucherProducts" toml:"VoucheridVoucherProducts" yaml:"VoucheridVoucherProducts"`
	VoucheridVoucherTranslations    VoucherTranslationSlice    `boil:"VoucheridVoucherTranslations" json:"VoucheridVoucherTranslations" toml:"VoucheridVoucherTranslations" yaml:"VoucheridVoucherTranslations"`
}

// NewStruct creates a new relationship struct
func (*voucherR) NewStruct() *voucherR {
	return &voucherR{}
}

func (r *voucherR) GetVoucheridOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.VoucheridOrders
}

func (r *voucherR) GetVoucheridVoucherCategories() VoucherCategorySlice {
	if r == nil {
		return nil
	}
	return r.VoucheridVoucherCategories
}

func (r *voucherR) GetVoucheridVoucherChannelListings() VoucherChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.VoucheridVoucherChannelListings
}

func (r *voucherR) GetVoucheridVoucherCollections() VoucherCollectionSlice {
	if r == nil {
		return nil
	}
	return r.VoucheridVoucherCollections
}

func (r *voucherR) GetVoucheridVoucherCustomers() VoucherCustomerSlice {
	if r == nil {
		return nil
	}
	return r.VoucheridVoucherCustomers
}

func (r *voucherR) GetVoucheridVoucherProducts() VoucherProductSlice {
	if r == nil {
		return nil
	}
	return r.VoucheridVoucherProducts
}

func (r *voucherR) GetVoucheridVoucherTranslations() VoucherTranslationSlice {
	if r == nil {
		return nil
	}
	return r.VoucheridVoucherTranslations
}

// voucherL is where Load methods for each relationship are stored.
type voucherL struct{}

var (
	voucherAllColumns            = []string{"id", "type", "name", "code", "usagelimit", "used", "startdate", "enddate", "applyonceperorder", "applyoncepercustomer", "onlyforstaff", "discountvaluetype", "countries", "mincheckoutitemsquantity", "createat", "updateat", "metadata", "privatemetadata"}
	voucherColumnsWithoutDefault = []string{"id"}
	voucherColumnsWithDefault    = []string{"type", "name", "code", "usagelimit", "used", "startdate", "enddate", "applyonceperorder", "applyoncepercustomer", "onlyforstaff", "discountvaluetype", "countries", "mincheckoutitemsquantity", "createat", "updateat", "metadata", "privatemetadata"}
	voucherPrimaryKeyColumns     = []string{"id"}
	voucherGeneratedColumns      = []string{}
)

type (
	// VoucherSlice is an alias for a slice of pointers to Voucher.
	// This should almost always be used instead of []Voucher.
	VoucherSlice []*Voucher
	// VoucherHook is the signature for custom Voucher hook methods
	VoucherHook func(context.Context, boil.ContextExecutor, *Voucher) error

	voucherQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voucherType                 = reflect.TypeOf(&Voucher{})
	voucherMapping              = queries.MakeStructMapping(voucherType)
	voucherPrimaryKeyMapping, _ = queries.BindMapping(voucherType, voucherMapping, voucherPrimaryKeyColumns)
	voucherInsertCacheMut       sync.RWMutex
	voucherInsertCache          = make(map[string]insertCache)
	voucherUpdateCacheMut       sync.RWMutex
	voucherUpdateCache          = make(map[string]updateCache)
	voucherUpsertCacheMut       sync.RWMutex
	voucherUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var voucherAfterSelectHooks []VoucherHook

var voucherBeforeInsertHooks []VoucherHook
var voucherAfterInsertHooks []VoucherHook

var voucherBeforeUpdateHooks []VoucherHook
var voucherAfterUpdateHooks []VoucherHook

var voucherBeforeDeleteHooks []VoucherHook
var voucherAfterDeleteHooks []VoucherHook

var voucherBeforeUpsertHooks []VoucherHook
var voucherAfterUpsertHooks []VoucherHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Voucher) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Voucher) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Voucher) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Voucher) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Voucher) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Voucher) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Voucher) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Voucher) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Voucher) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVoucherHook registers your hook function for all future operations.
func AddVoucherHook(hookPoint boil.HookPoint, voucherHook VoucherHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		voucherAfterSelectHooks = append(voucherAfterSelectHooks, voucherHook)
	case boil.BeforeInsertHook:
		voucherBeforeInsertHooks = append(voucherBeforeInsertHooks, voucherHook)
	case boil.AfterInsertHook:
		voucherAfterInsertHooks = append(voucherAfterInsertHooks, voucherHook)
	case boil.BeforeUpdateHook:
		voucherBeforeUpdateHooks = append(voucherBeforeUpdateHooks, voucherHook)
	case boil.AfterUpdateHook:
		voucherAfterUpdateHooks = append(voucherAfterUpdateHooks, voucherHook)
	case boil.BeforeDeleteHook:
		voucherBeforeDeleteHooks = append(voucherBeforeDeleteHooks, voucherHook)
	case boil.AfterDeleteHook:
		voucherAfterDeleteHooks = append(voucherAfterDeleteHooks, voucherHook)
	case boil.BeforeUpsertHook:
		voucherBeforeUpsertHooks = append(voucherBeforeUpsertHooks, voucherHook)
	case boil.AfterUpsertHook:
		voucherAfterUpsertHooks = append(voucherAfterUpsertHooks, voucherHook)
	}
}

// One returns a single voucher record from the query.
func (q voucherQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Voucher, error) {
	o := &Voucher{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vouchers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Voucher records from the query.
func (q voucherQuery) All(ctx context.Context, exec boil.ContextExecutor) (VoucherSlice, error) {
	var o []*Voucher

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Voucher slice")
	}

	if len(voucherAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Voucher records in the query.
func (q voucherQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vouchers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voucherQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vouchers exists")
	}

	return count > 0, nil
}

// VoucheridOrders retrieves all the order's Orders with an executor via voucherid column.
func (o *Voucher) VoucheridOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"voucherid\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// VoucheridVoucherCategories retrieves all the voucher_category's VoucherCategories with an executor via voucherid column.
func (o *Voucher) VoucheridVoucherCategories(mods ...qm.QueryMod) voucherCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_categories\".\"voucherid\"=?", o.ID),
	)

	return VoucherCategories(queryMods...)
}

// VoucheridVoucherChannelListings retrieves all the voucher_channel_listing's VoucherChannelListings with an executor via voucherid column.
func (o *Voucher) VoucheridVoucherChannelListings(mods ...qm.QueryMod) voucherChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_channel_listings\".\"voucherid\"=?", o.ID),
	)

	return VoucherChannelListings(queryMods...)
}

// VoucheridVoucherCollections retrieves all the voucher_collection's VoucherCollections with an executor via voucherid column.
func (o *Voucher) VoucheridVoucherCollections(mods ...qm.QueryMod) voucherCollectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_collections\".\"voucherid\"=?", o.ID),
	)

	return VoucherCollections(queryMods...)
}

// VoucheridVoucherCustomers retrieves all the voucher_customer's VoucherCustomers with an executor via voucherid column.
func (o *Voucher) VoucheridVoucherCustomers(mods ...qm.QueryMod) voucherCustomerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_customers\".\"voucherid\"=?", o.ID),
	)

	return VoucherCustomers(queryMods...)
}

// VoucheridVoucherProducts retrieves all the voucher_product's VoucherProducts with an executor via voucherid column.
func (o *Voucher) VoucheridVoucherProducts(mods ...qm.QueryMod) voucherProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_products\".\"voucherid\"=?", o.ID),
	)

	return VoucherProducts(queryMods...)
}

// VoucheridVoucherTranslations retrieves all the voucher_translation's VoucherTranslations with an executor via voucherid column.
func (o *Voucher) VoucheridVoucherTranslations(mods ...qm.QueryMod) voucherTranslationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_translations\".\"voucherid\"=?", o.ID),
	)

	return VoucherTranslations(queryMods...)
}

// LoadVoucheridOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (voucherL) LoadVoucheridOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucher interface{}, mods queries.Applicator) error {
	var slice []*Voucher
	var object *Voucher

	if singular {
		var ok bool
		object, ok = maybeVoucher.(*Voucher)
		if !ok {
			object = new(Voucher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucher))
			}
		}
	} else {
		s, ok := maybeVoucher.(*[]*Voucher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucher))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.voucherid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VoucheridOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.VoucheridVoucher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Voucherid) {
				local.R.VoucheridOrders = append(local.R.VoucheridOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.VoucheridVoucher = local
				break
			}
		}
	}

	return nil
}

// LoadVoucheridVoucherCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (voucherL) LoadVoucheridVoucherCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucher interface{}, mods queries.Applicator) error {
	var slice []*Voucher
	var object *Voucher

	if singular {
		var ok bool
		object, ok = maybeVoucher.(*Voucher)
		if !ok {
			object = new(Voucher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucher))
			}
		}
	} else {
		s, ok := maybeVoucher.(*[]*Voucher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucher))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voucher_categories`),
		qm.WhereIn(`voucher_categories.voucherid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_categories")
	}

	var resultSlice []*VoucherCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_categories")
	}

	if len(voucherCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VoucheridVoucherCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherCategoryR{}
			}
			foreign.R.VoucheridVoucher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Voucherid) {
				local.R.VoucheridVoucherCategories = append(local.R.VoucheridVoucherCategories, foreign)
				if foreign.R == nil {
					foreign.R = &voucherCategoryR{}
				}
				foreign.R.VoucheridVoucher = local
				break
			}
		}
	}

	return nil
}

// LoadVoucheridVoucherChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (voucherL) LoadVoucheridVoucherChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucher interface{}, mods queries.Applicator) error {
	var slice []*Voucher
	var object *Voucher

	if singular {
		var ok bool
		object, ok = maybeVoucher.(*Voucher)
		if !ok {
			object = new(Voucher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucher))
			}
		}
	} else {
		s, ok := maybeVoucher.(*[]*Voucher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucher))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voucher_channel_listings`),
		qm.WhereIn(`voucher_channel_listings.voucherid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_channel_listings")
	}

	var resultSlice []*VoucherChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_channel_listings")
	}

	if len(voucherChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VoucheridVoucherChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherChannelListingR{}
			}
			foreign.R.VoucheridVoucher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Voucherid {
				local.R.VoucheridVoucherChannelListings = append(local.R.VoucheridVoucherChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &voucherChannelListingR{}
				}
				foreign.R.VoucheridVoucher = local
				break
			}
		}
	}

	return nil
}

// LoadVoucheridVoucherCollections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (voucherL) LoadVoucheridVoucherCollections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucher interface{}, mods queries.Applicator) error {
	var slice []*Voucher
	var object *Voucher

	if singular {
		var ok bool
		object, ok = maybeVoucher.(*Voucher)
		if !ok {
			object = new(Voucher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucher))
			}
		}
	} else {
		s, ok := maybeVoucher.(*[]*Voucher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucher))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voucher_collections`),
		qm.WhereIn(`voucher_collections.voucherid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_collections")
	}

	var resultSlice []*VoucherCollection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_collections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_collections")
	}

	if len(voucherCollectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VoucheridVoucherCollections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherCollectionR{}
			}
			foreign.R.VoucheridVoucher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Voucherid) {
				local.R.VoucheridVoucherCollections = append(local.R.VoucheridVoucherCollections, foreign)
				if foreign.R == nil {
					foreign.R = &voucherCollectionR{}
				}
				foreign.R.VoucheridVoucher = local
				break
			}
		}
	}

	return nil
}

// LoadVoucheridVoucherCustomers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (voucherL) LoadVoucheridVoucherCustomers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucher interface{}, mods queries.Applicator) error {
	var slice []*Voucher
	var object *Voucher

	if singular {
		var ok bool
		object, ok = maybeVoucher.(*Voucher)
		if !ok {
			object = new(Voucher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucher))
			}
		}
	} else {
		s, ok := maybeVoucher.(*[]*Voucher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucher))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voucher_customers`),
		qm.WhereIn(`voucher_customers.voucherid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_customers")
	}

	var resultSlice []*VoucherCustomer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_customers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_customers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_customers")
	}

	if len(voucherCustomerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VoucheridVoucherCustomers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherCustomerR{}
			}
			foreign.R.VoucheridVoucher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Voucherid) {
				local.R.VoucheridVoucherCustomers = append(local.R.VoucheridVoucherCustomers, foreign)
				if foreign.R == nil {
					foreign.R = &voucherCustomerR{}
				}
				foreign.R.VoucheridVoucher = local
				break
			}
		}
	}

	return nil
}

// LoadVoucheridVoucherProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (voucherL) LoadVoucheridVoucherProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucher interface{}, mods queries.Applicator) error {
	var slice []*Voucher
	var object *Voucher

	if singular {
		var ok bool
		object, ok = maybeVoucher.(*Voucher)
		if !ok {
			object = new(Voucher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucher))
			}
		}
	} else {
		s, ok := maybeVoucher.(*[]*Voucher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucher))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voucher_products`),
		qm.WhereIn(`voucher_products.voucherid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_products")
	}

	var resultSlice []*VoucherProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_products")
	}

	if len(voucherProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VoucheridVoucherProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherProductR{}
			}
			foreign.R.VoucheridVoucher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Voucherid) {
				local.R.VoucheridVoucherProducts = append(local.R.VoucheridVoucherProducts, foreign)
				if foreign.R == nil {
					foreign.R = &voucherProductR{}
				}
				foreign.R.VoucheridVoucher = local
				break
			}
		}
	}

	return nil
}

// LoadVoucheridVoucherTranslations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (voucherL) LoadVoucheridVoucherTranslations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucher interface{}, mods queries.Applicator) error {
	var slice []*Voucher
	var object *Voucher

	if singular {
		var ok bool
		object, ok = maybeVoucher.(*Voucher)
		if !ok {
			object = new(Voucher)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucher))
			}
		}
	} else {
		s, ok := maybeVoucher.(*[]*Voucher)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucher)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucher))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voucher_translations`),
		qm.WhereIn(`voucher_translations.voucherid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_translations")
	}

	var resultSlice []*VoucherTranslation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_translations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_translations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_translations")
	}

	if len(voucherTranslationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VoucheridVoucherTranslations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherTranslationR{}
			}
			foreign.R.VoucheridVoucher = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Voucherid) {
				local.R.VoucheridVoucherTranslations = append(local.R.VoucheridVoucherTranslations, foreign)
				if foreign.R == nil {
					foreign.R = &voucherTranslationR{}
				}
				foreign.R.VoucheridVoucher = local
				break
			}
		}
	}

	return nil
}

// AddVoucheridOrders adds the given related objects to the existing relationships
// of the voucher, optionally inserting them as new records.
// Appends related to o.R.VoucheridOrders.
// Sets related.R.VoucheridVoucher appropriately.
func (o *Voucher) AddVoucheridOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Voucherid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Voucherid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &voucherR{
			VoucheridOrders: related,
		}
	} else {
		o.R.VoucheridOrders = append(o.R.VoucheridOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				VoucheridVoucher: o,
			}
		} else {
			rel.R.VoucheridVoucher = o
		}
	}
	return nil
}

// SetVoucheridOrders removes all previously related items of the
// voucher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VoucheridVoucher's VoucheridOrders accordingly.
// Replaces o.R.VoucheridOrders with related.
// Sets related.R.VoucheridVoucher's VoucheridOrders accordingly.
func (o *Voucher) SetVoucheridOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"voucherid\" = null where \"voucherid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VoucheridOrders {
			queries.SetScanner(&rel.Voucherid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VoucheridVoucher = nil
		}
		o.R.VoucheridOrders = nil
	}

	return o.AddVoucheridOrders(ctx, exec, insert, related...)
}

// RemoveVoucheridOrders relationships from objects passed in.
// Removes related items from R.VoucheridOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.VoucheridVoucher.
func (o *Voucher) RemoveVoucheridOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Voucherid, nil)
		if rel.R != nil {
			rel.R.VoucheridVoucher = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("voucherid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VoucheridOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.VoucheridOrders)
			if ln > 1 && i < ln-1 {
				o.R.VoucheridOrders[i] = o.R.VoucheridOrders[ln-1]
			}
			o.R.VoucheridOrders = o.R.VoucheridOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddVoucheridVoucherCategories adds the given related objects to the existing relationships
// of the voucher, optionally inserting them as new records.
// Appends related to o.R.VoucheridVoucherCategories.
// Sets related.R.VoucheridVoucher appropriately.
func (o *Voucher) AddVoucheridVoucherCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Voucherid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
				strmangle.WhereClause("\"", "\"", 2, voucherCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Voucherid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &voucherR{
			VoucheridVoucherCategories: related,
		}
	} else {
		o.R.VoucheridVoucherCategories = append(o.R.VoucheridVoucherCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherCategoryR{
				VoucheridVoucher: o,
			}
		} else {
			rel.R.VoucheridVoucher = o
		}
	}
	return nil
}

// SetVoucheridVoucherCategories removes all previously related items of the
// voucher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VoucheridVoucher's VoucheridVoucherCategories accordingly.
// Replaces o.R.VoucheridVoucherCategories with related.
// Sets related.R.VoucheridVoucher's VoucheridVoucherCategories accordingly.
func (o *Voucher) SetVoucheridVoucherCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherCategory) error {
	query := "update \"voucher_categories\" set \"voucherid\" = null where \"voucherid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VoucheridVoucherCategories {
			queries.SetScanner(&rel.Voucherid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VoucheridVoucher = nil
		}
		o.R.VoucheridVoucherCategories = nil
	}

	return o.AddVoucheridVoucherCategories(ctx, exec, insert, related...)
}

// RemoveVoucheridVoucherCategories relationships from objects passed in.
// Removes related items from R.VoucheridVoucherCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.VoucheridVoucher.
func (o *Voucher) RemoveVoucheridVoucherCategories(ctx context.Context, exec boil.ContextExecutor, related ...*VoucherCategory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Voucherid, nil)
		if rel.R != nil {
			rel.R.VoucheridVoucher = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("voucherid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VoucheridVoucherCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.VoucheridVoucherCategories)
			if ln > 1 && i < ln-1 {
				o.R.VoucheridVoucherCategories[i] = o.R.VoucheridVoucherCategories[ln-1]
			}
			o.R.VoucheridVoucherCategories = o.R.VoucheridVoucherCategories[:ln-1]
			break
		}
	}

	return nil
}

// AddVoucheridVoucherChannelListings adds the given related objects to the existing relationships
// of the voucher, optionally inserting them as new records.
// Appends related to o.R.VoucheridVoucherChannelListings.
// Sets related.R.VoucheridVoucher appropriately.
func (o *Voucher) AddVoucheridVoucherChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Voucherid = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
				strmangle.WhereClause("\"", "\"", 2, voucherChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Voucherid = o.ID
		}
	}

	if o.R == nil {
		o.R = &voucherR{
			VoucheridVoucherChannelListings: related,
		}
	} else {
		o.R.VoucheridVoucherChannelListings = append(o.R.VoucheridVoucherChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherChannelListingR{
				VoucheridVoucher: o,
			}
		} else {
			rel.R.VoucheridVoucher = o
		}
	}
	return nil
}

// AddVoucheridVoucherCollections adds the given related objects to the existing relationships
// of the voucher, optionally inserting them as new records.
// Appends related to o.R.VoucheridVoucherCollections.
// Sets related.R.VoucheridVoucher appropriately.
func (o *Voucher) AddVoucheridVoucherCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherCollection) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Voucherid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_collections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
				strmangle.WhereClause("\"", "\"", 2, voucherCollectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Voucherid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &voucherR{
			VoucheridVoucherCollections: related,
		}
	} else {
		o.R.VoucheridVoucherCollections = append(o.R.VoucheridVoucherCollections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherCollectionR{
				VoucheridVoucher: o,
			}
		} else {
			rel.R.VoucheridVoucher = o
		}
	}
	return nil
}

// SetVoucheridVoucherCollections removes all previously related items of the
// voucher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VoucheridVoucher's VoucheridVoucherCollections accordingly.
// Replaces o.R.VoucheridVoucherCollections with related.
// Sets related.R.VoucheridVoucher's VoucheridVoucherCollections accordingly.
func (o *Voucher) SetVoucheridVoucherCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherCollection) error {
	query := "update \"voucher_collections\" set \"voucherid\" = null where \"voucherid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VoucheridVoucherCollections {
			queries.SetScanner(&rel.Voucherid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VoucheridVoucher = nil
		}
		o.R.VoucheridVoucherCollections = nil
	}

	return o.AddVoucheridVoucherCollections(ctx, exec, insert, related...)
}

// RemoveVoucheridVoucherCollections relationships from objects passed in.
// Removes related items from R.VoucheridVoucherCollections (uses pointer comparison, removal does not keep order)
// Sets related.R.VoucheridVoucher.
func (o *Voucher) RemoveVoucheridVoucherCollections(ctx context.Context, exec boil.ContextExecutor, related ...*VoucherCollection) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Voucherid, nil)
		if rel.R != nil {
			rel.R.VoucheridVoucher = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("voucherid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VoucheridVoucherCollections {
			if rel != ri {
				continue
			}

			ln := len(o.R.VoucheridVoucherCollections)
			if ln > 1 && i < ln-1 {
				o.R.VoucheridVoucherCollections[i] = o.R.VoucheridVoucherCollections[ln-1]
			}
			o.R.VoucheridVoucherCollections = o.R.VoucheridVoucherCollections[:ln-1]
			break
		}
	}

	return nil
}

// AddVoucheridVoucherCustomers adds the given related objects to the existing relationships
// of the voucher, optionally inserting them as new records.
// Appends related to o.R.VoucheridVoucherCustomers.
// Sets related.R.VoucheridVoucher appropriately.
func (o *Voucher) AddVoucheridVoucherCustomers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherCustomer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Voucherid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_customers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
				strmangle.WhereClause("\"", "\"", 2, voucherCustomerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Voucherid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &voucherR{
			VoucheridVoucherCustomers: related,
		}
	} else {
		o.R.VoucheridVoucherCustomers = append(o.R.VoucheridVoucherCustomers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherCustomerR{
				VoucheridVoucher: o,
			}
		} else {
			rel.R.VoucheridVoucher = o
		}
	}
	return nil
}

// SetVoucheridVoucherCustomers removes all previously related items of the
// voucher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VoucheridVoucher's VoucheridVoucherCustomers accordingly.
// Replaces o.R.VoucheridVoucherCustomers with related.
// Sets related.R.VoucheridVoucher's VoucheridVoucherCustomers accordingly.
func (o *Voucher) SetVoucheridVoucherCustomers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherCustomer) error {
	query := "update \"voucher_customers\" set \"voucherid\" = null where \"voucherid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VoucheridVoucherCustomers {
			queries.SetScanner(&rel.Voucherid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VoucheridVoucher = nil
		}
		o.R.VoucheridVoucherCustomers = nil
	}

	return o.AddVoucheridVoucherCustomers(ctx, exec, insert, related...)
}

// RemoveVoucheridVoucherCustomers relationships from objects passed in.
// Removes related items from R.VoucheridVoucherCustomers (uses pointer comparison, removal does not keep order)
// Sets related.R.VoucheridVoucher.
func (o *Voucher) RemoveVoucheridVoucherCustomers(ctx context.Context, exec boil.ContextExecutor, related ...*VoucherCustomer) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Voucherid, nil)
		if rel.R != nil {
			rel.R.VoucheridVoucher = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("voucherid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VoucheridVoucherCustomers {
			if rel != ri {
				continue
			}

			ln := len(o.R.VoucheridVoucherCustomers)
			if ln > 1 && i < ln-1 {
				o.R.VoucheridVoucherCustomers[i] = o.R.VoucheridVoucherCustomers[ln-1]
			}
			o.R.VoucheridVoucherCustomers = o.R.VoucheridVoucherCustomers[:ln-1]
			break
		}
	}

	return nil
}

// AddVoucheridVoucherProducts adds the given related objects to the existing relationships
// of the voucher, optionally inserting them as new records.
// Appends related to o.R.VoucheridVoucherProducts.
// Sets related.R.VoucheridVoucher appropriately.
func (o *Voucher) AddVoucheridVoucherProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Voucherid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
				strmangle.WhereClause("\"", "\"", 2, voucherProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Voucherid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &voucherR{
			VoucheridVoucherProducts: related,
		}
	} else {
		o.R.VoucheridVoucherProducts = append(o.R.VoucheridVoucherProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherProductR{
				VoucheridVoucher: o,
			}
		} else {
			rel.R.VoucheridVoucher = o
		}
	}
	return nil
}

// SetVoucheridVoucherProducts removes all previously related items of the
// voucher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VoucheridVoucher's VoucheridVoucherProducts accordingly.
// Replaces o.R.VoucheridVoucherProducts with related.
// Sets related.R.VoucheridVoucher's VoucheridVoucherProducts accordingly.
func (o *Voucher) SetVoucheridVoucherProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherProduct) error {
	query := "update \"voucher_products\" set \"voucherid\" = null where \"voucherid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VoucheridVoucherProducts {
			queries.SetScanner(&rel.Voucherid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VoucheridVoucher = nil
		}
		o.R.VoucheridVoucherProducts = nil
	}

	return o.AddVoucheridVoucherProducts(ctx, exec, insert, related...)
}

// RemoveVoucheridVoucherProducts relationships from objects passed in.
// Removes related items from R.VoucheridVoucherProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.VoucheridVoucher.
func (o *Voucher) RemoveVoucheridVoucherProducts(ctx context.Context, exec boil.ContextExecutor, related ...*VoucherProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Voucherid, nil)
		if rel.R != nil {
			rel.R.VoucheridVoucher = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("voucherid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VoucheridVoucherProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.VoucheridVoucherProducts)
			if ln > 1 && i < ln-1 {
				o.R.VoucheridVoucherProducts[i] = o.R.VoucheridVoucherProducts[ln-1]
			}
			o.R.VoucheridVoucherProducts = o.R.VoucheridVoucherProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddVoucheridVoucherTranslations adds the given related objects to the existing relationships
// of the voucher, optionally inserting them as new records.
// Appends related to o.R.VoucheridVoucherTranslations.
// Sets related.R.VoucheridVoucher appropriately.
func (o *Voucher) AddVoucheridVoucherTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherTranslation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Voucherid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_translations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
				strmangle.WhereClause("\"", "\"", 2, voucherTranslationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Voucherid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &voucherR{
			VoucheridVoucherTranslations: related,
		}
	} else {
		o.R.VoucheridVoucherTranslations = append(o.R.VoucheridVoucherTranslations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherTranslationR{
				VoucheridVoucher: o,
			}
		} else {
			rel.R.VoucheridVoucher = o
		}
	}
	return nil
}

// SetVoucheridVoucherTranslations removes all previously related items of the
// voucher replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.VoucheridVoucher's VoucheridVoucherTranslations accordingly.
// Replaces o.R.VoucheridVoucherTranslations with related.
// Sets related.R.VoucheridVoucher's VoucheridVoucherTranslations accordingly.
func (o *Voucher) SetVoucheridVoucherTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherTranslation) error {
	query := "update \"voucher_translations\" set \"voucherid\" = null where \"voucherid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.VoucheridVoucherTranslations {
			queries.SetScanner(&rel.Voucherid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.VoucheridVoucher = nil
		}
		o.R.VoucheridVoucherTranslations = nil
	}

	return o.AddVoucheridVoucherTranslations(ctx, exec, insert, related...)
}

// RemoveVoucheridVoucherTranslations relationships from objects passed in.
// Removes related items from R.VoucheridVoucherTranslations (uses pointer comparison, removal does not keep order)
// Sets related.R.VoucheridVoucher.
func (o *Voucher) RemoveVoucheridVoucherTranslations(ctx context.Context, exec boil.ContextExecutor, related ...*VoucherTranslation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Voucherid, nil)
		if rel.R != nil {
			rel.R.VoucheridVoucher = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("voucherid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.VoucheridVoucherTranslations {
			if rel != ri {
				continue
			}

			ln := len(o.R.VoucheridVoucherTranslations)
			if ln > 1 && i < ln-1 {
				o.R.VoucheridVoucherTranslations[i] = o.R.VoucheridVoucherTranslations[ln-1]
			}
			o.R.VoucheridVoucherTranslations = o.R.VoucheridVoucherTranslations[:ln-1]
			break
		}
	}

	return nil
}

// Vouchers retrieves all the records using an executor.
func Vouchers(mods ...qm.QueryMod) voucherQuery {
	mods = append(mods, qm.From("\"vouchers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vouchers\".*"})
	}

	return voucherQuery{q}
}

// FindVoucher retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoucher(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Voucher, error) {
	voucherObj := &Voucher{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vouchers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, voucherObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vouchers")
	}

	if err = voucherObj.doAfterSelectHooks(ctx, exec); err != nil {
		return voucherObj, err
	}

	return voucherObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Voucher) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vouchers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voucherInsertCacheMut.RLock()
	cache, cached := voucherInsertCache[key]
	voucherInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voucherAllColumns,
			voucherColumnsWithDefault,
			voucherColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voucherType, voucherMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voucherType, voucherMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vouchers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vouchers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vouchers")
	}

	if !cached {
		voucherInsertCacheMut.Lock()
		voucherInsertCache[key] = cache
		voucherInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Voucher.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Voucher) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	voucherUpdateCacheMut.RLock()
	cache, cached := voucherUpdateCache[key]
	voucherUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voucherAllColumns,
			voucherPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vouchers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vouchers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, voucherPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voucherType, voucherMapping, append(wl, voucherPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vouchers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vouchers")
	}

	if !cached {
		voucherUpdateCacheMut.Lock()
		voucherUpdateCache[key] = cache
		voucherUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q voucherQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vouchers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vouchers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoucherSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vouchers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, voucherPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in voucher slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all voucher")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Voucher) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vouchers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voucherUpsertCacheMut.RLock()
	cache, cached := voucherUpsertCache[key]
	voucherUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			voucherAllColumns,
			voucherColumnsWithDefault,
			voucherColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voucherAllColumns,
			voucherPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vouchers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(voucherPrimaryKeyColumns))
			copy(conflict, voucherPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vouchers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(voucherType, voucherMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voucherType, voucherMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vouchers")
	}

	if !cached {
		voucherUpsertCacheMut.Lock()
		voucherUpsertCache[key] = cache
		voucherUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Voucher record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Voucher) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Voucher provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voucherPrimaryKeyMapping)
	sql := "DELETE FROM \"vouchers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vouchers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vouchers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voucherQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no voucherQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vouchers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vouchers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoucherSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(voucherBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vouchers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from voucher slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vouchers")
	}

	if len(voucherAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Voucher) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVoucher(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoucherSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoucherSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vouchers\".* FROM \"vouchers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VoucherSlice")
	}

	*o = slice

	return nil
}

// VoucherExists checks if the Voucher row exists.
func VoucherExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vouchers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vouchers exists")
	}

	return exists, nil
}

// Exists checks if the Voucher row exists.
func (o *Voucher) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VoucherExists(ctx, exec, o.ID)
}
