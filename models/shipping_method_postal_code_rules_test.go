// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShippingMethodPostalCodeRules(t *testing.T) {
	t.Parallel()

	query := ShippingMethodPostalCodeRules()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShippingMethodPostalCodeRulesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingMethodPostalCodeRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingMethodPostalCodeRulesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShippingMethodPostalCodeRules().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingMethodPostalCodeRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingMethodPostalCodeRulesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShippingMethodPostalCodeRuleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingMethodPostalCodeRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingMethodPostalCodeRulesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShippingMethodPostalCodeRuleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShippingMethodPostalCodeRule exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShippingMethodPostalCodeRuleExists to return true, but got false.")
	}
}

func testShippingMethodPostalCodeRulesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shippingMethodPostalCodeRuleFound, err := FindShippingMethodPostalCodeRule(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shippingMethodPostalCodeRuleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShippingMethodPostalCodeRulesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShippingMethodPostalCodeRules().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShippingMethodPostalCodeRulesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShippingMethodPostalCodeRules().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShippingMethodPostalCodeRulesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shippingMethodPostalCodeRuleOne := &ShippingMethodPostalCodeRule{}
	shippingMethodPostalCodeRuleTwo := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, shippingMethodPostalCodeRuleOne, shippingMethodPostalCodeRuleDBTypes, false, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}
	if err = randomize.Struct(seed, shippingMethodPostalCodeRuleTwo, shippingMethodPostalCodeRuleDBTypes, false, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shippingMethodPostalCodeRuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shippingMethodPostalCodeRuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShippingMethodPostalCodeRules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShippingMethodPostalCodeRulesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shippingMethodPostalCodeRuleOne := &ShippingMethodPostalCodeRule{}
	shippingMethodPostalCodeRuleTwo := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, shippingMethodPostalCodeRuleOne, shippingMethodPostalCodeRuleDBTypes, false, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}
	if err = randomize.Struct(seed, shippingMethodPostalCodeRuleTwo, shippingMethodPostalCodeRuleDBTypes, false, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shippingMethodPostalCodeRuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shippingMethodPostalCodeRuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethodPostalCodeRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shippingMethodPostalCodeRuleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodPostalCodeRule) error {
	*o = ShippingMethodPostalCodeRule{}
	return nil
}

func shippingMethodPostalCodeRuleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodPostalCodeRule) error {
	*o = ShippingMethodPostalCodeRule{}
	return nil
}

func shippingMethodPostalCodeRuleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodPostalCodeRule) error {
	*o = ShippingMethodPostalCodeRule{}
	return nil
}

func shippingMethodPostalCodeRuleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodPostalCodeRule) error {
	*o = ShippingMethodPostalCodeRule{}
	return nil
}

func shippingMethodPostalCodeRuleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodPostalCodeRule) error {
	*o = ShippingMethodPostalCodeRule{}
	return nil
}

func shippingMethodPostalCodeRuleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodPostalCodeRule) error {
	*o = ShippingMethodPostalCodeRule{}
	return nil
}

func shippingMethodPostalCodeRuleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodPostalCodeRule) error {
	*o = ShippingMethodPostalCodeRule{}
	return nil
}

func shippingMethodPostalCodeRuleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodPostalCodeRule) error {
	*o = ShippingMethodPostalCodeRule{}
	return nil
}

func shippingMethodPostalCodeRuleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethodPostalCodeRule) error {
	*o = ShippingMethodPostalCodeRule{}
	return nil
}

func testShippingMethodPostalCodeRulesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShippingMethodPostalCodeRule{}
	o := &ShippingMethodPostalCodeRule{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule object: %s", err)
	}

	AddShippingMethodPostalCodeRuleHook(boil.BeforeInsertHook, shippingMethodPostalCodeRuleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodPostalCodeRuleBeforeInsertHooks = []ShippingMethodPostalCodeRuleHook{}

	AddShippingMethodPostalCodeRuleHook(boil.AfterInsertHook, shippingMethodPostalCodeRuleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodPostalCodeRuleAfterInsertHooks = []ShippingMethodPostalCodeRuleHook{}

	AddShippingMethodPostalCodeRuleHook(boil.AfterSelectHook, shippingMethodPostalCodeRuleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shippingMethodPostalCodeRuleAfterSelectHooks = []ShippingMethodPostalCodeRuleHook{}

	AddShippingMethodPostalCodeRuleHook(boil.BeforeUpdateHook, shippingMethodPostalCodeRuleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shippingMethodPostalCodeRuleBeforeUpdateHooks = []ShippingMethodPostalCodeRuleHook{}

	AddShippingMethodPostalCodeRuleHook(boil.AfterUpdateHook, shippingMethodPostalCodeRuleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shippingMethodPostalCodeRuleAfterUpdateHooks = []ShippingMethodPostalCodeRuleHook{}

	AddShippingMethodPostalCodeRuleHook(boil.BeforeDeleteHook, shippingMethodPostalCodeRuleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shippingMethodPostalCodeRuleBeforeDeleteHooks = []ShippingMethodPostalCodeRuleHook{}

	AddShippingMethodPostalCodeRuleHook(boil.AfterDeleteHook, shippingMethodPostalCodeRuleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shippingMethodPostalCodeRuleAfterDeleteHooks = []ShippingMethodPostalCodeRuleHook{}

	AddShippingMethodPostalCodeRuleHook(boil.BeforeUpsertHook, shippingMethodPostalCodeRuleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodPostalCodeRuleBeforeUpsertHooks = []ShippingMethodPostalCodeRuleHook{}

	AddShippingMethodPostalCodeRuleHook(boil.AfterUpsertHook, shippingMethodPostalCodeRuleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodPostalCodeRuleAfterUpsertHooks = []ShippingMethodPostalCodeRuleHook{}
}

func testShippingMethodPostalCodeRulesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethodPostalCodeRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShippingMethodPostalCodeRulesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shippingMethodPostalCodeRuleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethodPostalCodeRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShippingMethodPostalCodeRuleToOneShippingMethodUsingShippingMethod(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShippingMethodPostalCodeRule
	var foreign ShippingMethod

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ShippingMethodID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShippingMethod().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShippingMethodHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShippingMethodPostalCodeRuleSlice{&local}
	if err = local.L.LoadShippingMethod(ctx, tx, false, (*[]*ShippingMethodPostalCodeRule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingMethod == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShippingMethod = nil
	if err = local.L.LoadShippingMethod(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingMethod == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShippingMethodPostalCodeRuleToOneSetOpShippingMethodUsingShippingMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethodPostalCodeRule
	var b, c ShippingMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodPostalCodeRuleDBTypes, false, strmangle.SetComplement(shippingMethodPostalCodeRulePrimaryKeyColumns, shippingMethodPostalCodeRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShippingMethod{&b, &c} {
		err = a.SetShippingMethod(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShippingMethod != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShippingMethodPostalCodeRules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ShippingMethodID, x.ID) {
			t.Error("foreign key was wrong value", a.ShippingMethodID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShippingMethodID))
		reflect.Indirect(reflect.ValueOf(&a.ShippingMethodID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ShippingMethodID, x.ID) {
			t.Error("foreign key was wrong value", a.ShippingMethodID, x.ID)
		}
	}
}

func testShippingMethodPostalCodeRuleToOneRemoveOpShippingMethodUsingShippingMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethodPostalCodeRule
	var b ShippingMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodPostalCodeRuleDBTypes, false, strmangle.SetComplement(shippingMethodPostalCodeRulePrimaryKeyColumns, shippingMethodPostalCodeRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetShippingMethod(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveShippingMethod(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ShippingMethod().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ShippingMethod != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ShippingMethodID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ShippingMethodPostalCodeRules) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testShippingMethodPostalCodeRulesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShippingMethodPostalCodeRulesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShippingMethodPostalCodeRuleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShippingMethodPostalCodeRulesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShippingMethodPostalCodeRules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shippingMethodPostalCodeRuleDBTypes = map[string]string{`ID`: `character varying`, `ShippingMethodID`: `character varying`, `Start`: `character varying`, `End`: `character varying`, `InclusionType`: `character varying`}
	_                                   = bytes.MinRead
)

func testShippingMethodPostalCodeRulesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shippingMethodPostalCodeRulePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shippingMethodPostalCodeRuleAllColumns) == len(shippingMethodPostalCodeRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethodPostalCodeRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShippingMethodPostalCodeRulesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shippingMethodPostalCodeRuleAllColumns) == len(shippingMethodPostalCodeRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethodPostalCodeRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shippingMethodPostalCodeRuleDBTypes, true, shippingMethodPostalCodeRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shippingMethodPostalCodeRuleAllColumns, shippingMethodPostalCodeRulePrimaryKeyColumns) {
		fields = shippingMethodPostalCodeRuleAllColumns
	} else {
		fields = strmangle.SetComplement(
			shippingMethodPostalCodeRuleAllColumns,
			shippingMethodPostalCodeRulePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShippingMethodPostalCodeRuleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShippingMethodPostalCodeRulesUpsert(t *testing.T) {
	t.Parallel()

	if len(shippingMethodPostalCodeRuleAllColumns) == len(shippingMethodPostalCodeRulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShippingMethodPostalCodeRule{}
	if err = randomize.Struct(seed, &o, shippingMethodPostalCodeRuleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShippingMethodPostalCodeRule: %s", err)
	}

	count, err := ShippingMethodPostalCodeRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shippingMethodPostalCodeRuleDBTypes, false, shippingMethodPostalCodeRulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingMethodPostalCodeRule struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShippingMethodPostalCodeRule: %s", err)
	}

	count, err = ShippingMethodPostalCodeRules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
