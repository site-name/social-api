// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Product is an object representing the database table.
type Product struct {
	ID                   string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Producttypeid        null.String  `boil:"producttypeid" json:"producttypeid,omitempty" toml:"producttypeid" yaml:"producttypeid,omitempty"`
	Name                 null.String  `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Slug                 null.String  `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	Description          null.String  `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Descriptionplaintext null.String  `boil:"descriptionplaintext" json:"descriptionplaintext,omitempty" toml:"descriptionplaintext" yaml:"descriptionplaintext,omitempty"`
	Categoryid           null.String  `boil:"categoryid" json:"categoryid,omitempty" toml:"categoryid" yaml:"categoryid,omitempty"`
	Createat             null.Int64   `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Updateat             null.Int64   `boil:"updateat" json:"updateat,omitempty" toml:"updateat" yaml:"updateat,omitempty"`
	Chargetaxes          null.Bool    `boil:"chargetaxes" json:"chargetaxes,omitempty" toml:"chargetaxes" yaml:"chargetaxes,omitempty"`
	Weight               null.Float32 `boil:"weight" json:"weight,omitempty" toml:"weight" yaml:"weight,omitempty"`
	Weightunit           null.String  `boil:"weightunit" json:"weightunit,omitempty" toml:"weightunit" yaml:"weightunit,omitempty"`
	Defaultvariantid     null.String  `boil:"defaultvariantid" json:"defaultvariantid,omitempty" toml:"defaultvariantid" yaml:"defaultvariantid,omitempty"`
	Rating               null.Float32 `boil:"rating" json:"rating,omitempty" toml:"rating" yaml:"rating,omitempty"`
	Metadata             null.JSON    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata      null.JSON    `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`
	Seotitle             null.String  `boil:"seotitle" json:"seotitle,omitempty" toml:"seotitle" yaml:"seotitle,omitempty"`
	Seodescription       null.String  `boil:"seodescription" json:"seodescription,omitempty" toml:"seodescription" yaml:"seodescription,omitempty"`

	R *productR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductColumns = struct {
	ID                   string
	Producttypeid        string
	Name                 string
	Slug                 string
	Description          string
	Descriptionplaintext string
	Categoryid           string
	Createat             string
	Updateat             string
	Chargetaxes          string
	Weight               string
	Weightunit           string
	Defaultvariantid     string
	Rating               string
	Metadata             string
	Privatemetadata      string
	Seotitle             string
	Seodescription       string
}{
	ID:                   "id",
	Producttypeid:        "producttypeid",
	Name:                 "name",
	Slug:                 "slug",
	Description:          "description",
	Descriptionplaintext: "descriptionplaintext",
	Categoryid:           "categoryid",
	Createat:             "createat",
	Updateat:             "updateat",
	Chargetaxes:          "chargetaxes",
	Weight:               "weight",
	Weightunit:           "weightunit",
	Defaultvariantid:     "defaultvariantid",
	Rating:               "rating",
	Metadata:             "metadata",
	Privatemetadata:      "privatemetadata",
	Seotitle:             "seotitle",
	Seodescription:       "seodescription",
}

var ProductTableColumns = struct {
	ID                   string
	Producttypeid        string
	Name                 string
	Slug                 string
	Description          string
	Descriptionplaintext string
	Categoryid           string
	Createat             string
	Updateat             string
	Chargetaxes          string
	Weight               string
	Weightunit           string
	Defaultvariantid     string
	Rating               string
	Metadata             string
	Privatemetadata      string
	Seotitle             string
	Seodescription       string
}{
	ID:                   "products.id",
	Producttypeid:        "products.producttypeid",
	Name:                 "products.name",
	Slug:                 "products.slug",
	Description:          "products.description",
	Descriptionplaintext: "products.descriptionplaintext",
	Categoryid:           "products.categoryid",
	Createat:             "products.createat",
	Updateat:             "products.updateat",
	Chargetaxes:          "products.chargetaxes",
	Weight:               "products.weight",
	Weightunit:           "products.weightunit",
	Defaultvariantid:     "products.defaultvariantid",
	Rating:               "products.rating",
	Metadata:             "products.metadata",
	Privatemetadata:      "products.privatemetadata",
	Seotitle:             "products.seotitle",
	Seodescription:       "products.seodescription",
}

// Generated where

var ProductWhere = struct {
	ID                   whereHelperstring
	Producttypeid        whereHelpernull_String
	Name                 whereHelpernull_String
	Slug                 whereHelpernull_String
	Description          whereHelpernull_String
	Descriptionplaintext whereHelpernull_String
	Categoryid           whereHelpernull_String
	Createat             whereHelpernull_Int64
	Updateat             whereHelpernull_Int64
	Chargetaxes          whereHelpernull_Bool
	Weight               whereHelpernull_Float32
	Weightunit           whereHelpernull_String
	Defaultvariantid     whereHelpernull_String
	Rating               whereHelpernull_Float32
	Metadata             whereHelpernull_JSON
	Privatemetadata      whereHelpernull_JSON
	Seotitle             whereHelpernull_String
	Seodescription       whereHelpernull_String
}{
	ID:                   whereHelperstring{field: "\"products\".\"id\""},
	Producttypeid:        whereHelpernull_String{field: "\"products\".\"producttypeid\""},
	Name:                 whereHelpernull_String{field: "\"products\".\"name\""},
	Slug:                 whereHelpernull_String{field: "\"products\".\"slug\""},
	Description:          whereHelpernull_String{field: "\"products\".\"description\""},
	Descriptionplaintext: whereHelpernull_String{field: "\"products\".\"descriptionplaintext\""},
	Categoryid:           whereHelpernull_String{field: "\"products\".\"categoryid\""},
	Createat:             whereHelpernull_Int64{field: "\"products\".\"createat\""},
	Updateat:             whereHelpernull_Int64{field: "\"products\".\"updateat\""},
	Chargetaxes:          whereHelpernull_Bool{field: "\"products\".\"chargetaxes\""},
	Weight:               whereHelpernull_Float32{field: "\"products\".\"weight\""},
	Weightunit:           whereHelpernull_String{field: "\"products\".\"weightunit\""},
	Defaultvariantid:     whereHelpernull_String{field: "\"products\".\"defaultvariantid\""},
	Rating:               whereHelpernull_Float32{field: "\"products\".\"rating\""},
	Metadata:             whereHelpernull_JSON{field: "\"products\".\"metadata\""},
	Privatemetadata:      whereHelpernull_JSON{field: "\"products\".\"privatemetadata\""},
	Seotitle:             whereHelpernull_String{field: "\"products\".\"seotitle\""},
	Seodescription:       whereHelpernull_String{field: "\"products\".\"seodescription\""},
}

// ProductRels is where relationship names are stored.
var ProductRels = struct {
	ProductidAssignedProductAttributes      string
	ProductidGiftcards                      string
	ProductidProductChannelListings         string
	ProductidProductCollections             string
	ProductidProductMedia                   string
	ProductidProductTranslations            string
	ProductidProductVariants                string
	ProductidSaleProducts                   string
	ProductidShippingMethodExcludedProducts string
	ProductidVoucherProducts                string
}{
	ProductidAssignedProductAttributes:      "ProductidAssignedProductAttributes",
	ProductidGiftcards:                      "ProductidGiftcards",
	ProductidProductChannelListings:         "ProductidProductChannelListings",
	ProductidProductCollections:             "ProductidProductCollections",
	ProductidProductMedia:                   "ProductidProductMedia",
	ProductidProductTranslations:            "ProductidProductTranslations",
	ProductidProductVariants:                "ProductidProductVariants",
	ProductidSaleProducts:                   "ProductidSaleProducts",
	ProductidShippingMethodExcludedProducts: "ProductidShippingMethodExcludedProducts",
	ProductidVoucherProducts:                "ProductidVoucherProducts",
}

// productR is where relationships are stored.
type productR struct {
	ProductidAssignedProductAttributes      AssignedProductAttributeSlice      `boil:"ProductidAssignedProductAttributes" json:"ProductidAssignedProductAttributes" toml:"ProductidAssignedProductAttributes" yaml:"ProductidAssignedProductAttributes"`
	ProductidGiftcards                      GiftcardSlice                      `boil:"ProductidGiftcards" json:"ProductidGiftcards" toml:"ProductidGiftcards" yaml:"ProductidGiftcards"`
	ProductidProductChannelListings         ProductChannelListingSlice         `boil:"ProductidProductChannelListings" json:"ProductidProductChannelListings" toml:"ProductidProductChannelListings" yaml:"ProductidProductChannelListings"`
	ProductidProductCollections             ProductCollectionSlice             `boil:"ProductidProductCollections" json:"ProductidProductCollections" toml:"ProductidProductCollections" yaml:"ProductidProductCollections"`
	ProductidProductMedia                   ProductMediumSlice                 `boil:"ProductidProductMedia" json:"ProductidProductMedia" toml:"ProductidProductMedia" yaml:"ProductidProductMedia"`
	ProductidProductTranslations            ProductTranslationSlice            `boil:"ProductidProductTranslations" json:"ProductidProductTranslations" toml:"ProductidProductTranslations" yaml:"ProductidProductTranslations"`
	ProductidProductVariants                ProductVariantSlice                `boil:"ProductidProductVariants" json:"ProductidProductVariants" toml:"ProductidProductVariants" yaml:"ProductidProductVariants"`
	ProductidSaleProducts                   SaleProductSlice                   `boil:"ProductidSaleProducts" json:"ProductidSaleProducts" toml:"ProductidSaleProducts" yaml:"ProductidSaleProducts"`
	ProductidShippingMethodExcludedProducts ShippingMethodExcludedProductSlice `boil:"ProductidShippingMethodExcludedProducts" json:"ProductidShippingMethodExcludedProducts" toml:"ProductidShippingMethodExcludedProducts" yaml:"ProductidShippingMethodExcludedProducts"`
	ProductidVoucherProducts                VoucherProductSlice                `boil:"ProductidVoucherProducts" json:"ProductidVoucherProducts" toml:"ProductidVoucherProducts" yaml:"ProductidVoucherProducts"`
}

// NewStruct creates a new relationship struct
func (*productR) NewStruct() *productR {
	return &productR{}
}

func (r *productR) GetProductidAssignedProductAttributes() AssignedProductAttributeSlice {
	if r == nil {
		return nil
	}
	return r.ProductidAssignedProductAttributes
}

func (r *productR) GetProductidGiftcards() GiftcardSlice {
	if r == nil {
		return nil
	}
	return r.ProductidGiftcards
}

func (r *productR) GetProductidProductChannelListings() ProductChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.ProductidProductChannelListings
}

func (r *productR) GetProductidProductCollections() ProductCollectionSlice {
	if r == nil {
		return nil
	}
	return r.ProductidProductCollections
}

func (r *productR) GetProductidProductMedia() ProductMediumSlice {
	if r == nil {
		return nil
	}
	return r.ProductidProductMedia
}

func (r *productR) GetProductidProductTranslations() ProductTranslationSlice {
	if r == nil {
		return nil
	}
	return r.ProductidProductTranslations
}

func (r *productR) GetProductidProductVariants() ProductVariantSlice {
	if r == nil {
		return nil
	}
	return r.ProductidProductVariants
}

func (r *productR) GetProductidSaleProducts() SaleProductSlice {
	if r == nil {
		return nil
	}
	return r.ProductidSaleProducts
}

func (r *productR) GetProductidShippingMethodExcludedProducts() ShippingMethodExcludedProductSlice {
	if r == nil {
		return nil
	}
	return r.ProductidShippingMethodExcludedProducts
}

func (r *productR) GetProductidVoucherProducts() VoucherProductSlice {
	if r == nil {
		return nil
	}
	return r.ProductidVoucherProducts
}

// productL is where Load methods for each relationship are stored.
type productL struct{}

var (
	productAllColumns            = []string{"id", "producttypeid", "name", "slug", "description", "descriptionplaintext", "categoryid", "createat", "updateat", "chargetaxes", "weight", "weightunit", "defaultvariantid", "rating", "metadata", "privatemetadata", "seotitle", "seodescription"}
	productColumnsWithoutDefault = []string{"id"}
	productColumnsWithDefault    = []string{"producttypeid", "name", "slug", "description", "descriptionplaintext", "categoryid", "createat", "updateat", "chargetaxes", "weight", "weightunit", "defaultvariantid", "rating", "metadata", "privatemetadata", "seotitle", "seodescription"}
	productPrimaryKeyColumns     = []string{"id"}
	productGeneratedColumns      = []string{}
)

type (
	// ProductSlice is an alias for a slice of pointers to Product.
	// This should almost always be used instead of []Product.
	ProductSlice []*Product
	// ProductHook is the signature for custom Product hook methods
	ProductHook func(context.Context, boil.ContextExecutor, *Product) error

	productQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productType                 = reflect.TypeOf(&Product{})
	productMapping              = queries.MakeStructMapping(productType)
	productPrimaryKeyMapping, _ = queries.BindMapping(productType, productMapping, productPrimaryKeyColumns)
	productInsertCacheMut       sync.RWMutex
	productInsertCache          = make(map[string]insertCache)
	productUpdateCacheMut       sync.RWMutex
	productUpdateCache          = make(map[string]updateCache)
	productUpsertCacheMut       sync.RWMutex
	productUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productAfterSelectHooks []ProductHook

var productBeforeInsertHooks []ProductHook
var productAfterInsertHooks []ProductHook

var productBeforeUpdateHooks []ProductHook
var productAfterUpdateHooks []ProductHook

var productBeforeDeleteHooks []ProductHook
var productAfterDeleteHooks []ProductHook

var productBeforeUpsertHooks []ProductHook
var productAfterUpsertHooks []ProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Product) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Product) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Product) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Product) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Product) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Product) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Product) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Product) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Product) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductHook registers your hook function for all future operations.
func AddProductHook(hookPoint boil.HookPoint, productHook ProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productAfterSelectHooks = append(productAfterSelectHooks, productHook)
	case boil.BeforeInsertHook:
		productBeforeInsertHooks = append(productBeforeInsertHooks, productHook)
	case boil.AfterInsertHook:
		productAfterInsertHooks = append(productAfterInsertHooks, productHook)
	case boil.BeforeUpdateHook:
		productBeforeUpdateHooks = append(productBeforeUpdateHooks, productHook)
	case boil.AfterUpdateHook:
		productAfterUpdateHooks = append(productAfterUpdateHooks, productHook)
	case boil.BeforeDeleteHook:
		productBeforeDeleteHooks = append(productBeforeDeleteHooks, productHook)
	case boil.AfterDeleteHook:
		productAfterDeleteHooks = append(productAfterDeleteHooks, productHook)
	case boil.BeforeUpsertHook:
		productBeforeUpsertHooks = append(productBeforeUpsertHooks, productHook)
	case boil.AfterUpsertHook:
		productAfterUpsertHooks = append(productAfterUpsertHooks, productHook)
	}
}

// One returns a single product record from the query.
func (q productQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Product, error) {
	o := &Product{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Product records from the query.
func (q productQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductSlice, error) {
	var o []*Product

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Product slice")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Product records in the query.
func (q productQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if products exists")
	}

	return count > 0, nil
}

// ProductidAssignedProductAttributes retrieves all the assigned_product_attribute's AssignedProductAttributes with an executor via productid column.
func (o *Product) ProductidAssignedProductAttributes(mods ...qm.QueryMod) assignedProductAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_product_attributes\".\"productid\"=?", o.ID),
	)

	return AssignedProductAttributes(queryMods...)
}

// ProductidGiftcards retrieves all the giftcard's Giftcards with an executor via productid column.
func (o *Product) ProductidGiftcards(mods ...qm.QueryMod) giftcardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"giftcards\".\"productid\"=?", o.ID),
	)

	return Giftcards(queryMods...)
}

// ProductidProductChannelListings retrieves all the product_channel_listing's ProductChannelListings with an executor via productid column.
func (o *Product) ProductidProductChannelListings(mods ...qm.QueryMod) productChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_channel_listings\".\"productid\"=?", o.ID),
	)

	return ProductChannelListings(queryMods...)
}

// ProductidProductCollections retrieves all the product_collection's ProductCollections with an executor via productid column.
func (o *Product) ProductidProductCollections(mods ...qm.QueryMod) productCollectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_collections\".\"productid\"=?", o.ID),
	)

	return ProductCollections(queryMods...)
}

// ProductidProductMedia retrieves all the product_medium's ProductMedia with an executor via productid column.
func (o *Product) ProductidProductMedia(mods ...qm.QueryMod) productMediumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_media\".\"productid\"=?", o.ID),
	)

	return ProductMedia(queryMods...)
}

// ProductidProductTranslations retrieves all the product_translation's ProductTranslations with an executor via productid column.
func (o *Product) ProductidProductTranslations(mods ...qm.QueryMod) productTranslationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_translations\".\"productid\"=?", o.ID),
	)

	return ProductTranslations(queryMods...)
}

// ProductidProductVariants retrieves all the product_variant's ProductVariants with an executor via productid column.
func (o *Product) ProductidProductVariants(mods ...qm.QueryMod) productVariantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_variants\".\"productid\"=?", o.ID),
	)

	return ProductVariants(queryMods...)
}

// ProductidSaleProducts retrieves all the sale_product's SaleProducts with an executor via productid column.
func (o *Product) ProductidSaleProducts(mods ...qm.QueryMod) saleProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_products\".\"productid\"=?", o.ID),
	)

	return SaleProducts(queryMods...)
}

// ProductidShippingMethodExcludedProducts retrieves all the shipping_method_excluded_product's ShippingMethodExcludedProducts with an executor via productid column.
func (o *Product) ProductidShippingMethodExcludedProducts(mods ...qm.QueryMod) shippingMethodExcludedProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_method_excluded_products\".\"productid\"=?", o.ID),
	)

	return ShippingMethodExcludedProducts(queryMods...)
}

// ProductidVoucherProducts retrieves all the voucher_product's VoucherProducts with an executor via productid column.
func (o *Product) ProductidVoucherProducts(mods ...qm.QueryMod) voucherProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_products\".\"productid\"=?", o.ID),
	)

	return VoucherProducts(queryMods...)
}

// LoadProductidAssignedProductAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductidAssignedProductAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_product_attributes`),
		qm.WhereIn(`assigned_product_attributes.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_product_attributes")
	}

	var resultSlice []*AssignedProductAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_product_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_product_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_product_attributes")
	}

	if len(assignedProductAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidAssignedProductAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedProductAttributeR{}
			}
			foreign.R.ProductidProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidAssignedProductAttributes = append(local.R.ProductidAssignedProductAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &assignedProductAttributeR{}
				}
				foreign.R.ProductidProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductidGiftcards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductidGiftcards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`giftcards`),
		qm.WhereIn(`giftcards.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load giftcards")
	}

	var resultSlice []*Giftcard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice giftcards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on giftcards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for giftcards")
	}

	if len(giftcardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidGiftcards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &giftcardR{}
			}
			foreign.R.ProductidProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidGiftcards = append(local.R.ProductidGiftcards, foreign)
				if foreign.R == nil {
					foreign.R = &giftcardR{}
				}
				foreign.R.ProductidProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductidProductChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductidProductChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_channel_listings`),
		qm.WhereIn(`product_channel_listings.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_channel_listings")
	}

	var resultSlice []*ProductChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_channel_listings")
	}

	if len(productChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidProductChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productChannelListingR{}
			}
			foreign.R.ProductidProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidProductChannelListings = append(local.R.ProductidProductChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &productChannelListingR{}
				}
				foreign.R.ProductidProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductidProductCollections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductidProductCollections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_collections`),
		qm.WhereIn(`product_collections.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_collections")
	}

	var resultSlice []*ProductCollection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_collections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_collections")
	}

	if len(productCollectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidProductCollections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productCollectionR{}
			}
			foreign.R.ProductidProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidProductCollections = append(local.R.ProductidProductCollections, foreign)
				if foreign.R == nil {
					foreign.R = &productCollectionR{}
				}
				foreign.R.ProductidProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductidProductMedia allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductidProductMedia(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_media`),
		qm.WhereIn(`product_media.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_media")
	}

	var resultSlice []*ProductMedium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_media")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_media")
	}

	if len(productMediumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidProductMedia = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productMediumR{}
			}
			foreign.R.ProductidProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidProductMedia = append(local.R.ProductidProductMedia, foreign)
				if foreign.R == nil {
					foreign.R = &productMediumR{}
				}
				foreign.R.ProductidProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductidProductTranslations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductidProductTranslations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_translations`),
		qm.WhereIn(`product_translations.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_translations")
	}

	var resultSlice []*ProductTranslation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_translations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_translations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_translations")
	}

	if len(productTranslationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidProductTranslations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productTranslationR{}
			}
			foreign.R.ProductidProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidProductTranslations = append(local.R.ProductidProductTranslations, foreign)
				if foreign.R == nil {
					foreign.R = &productTranslationR{}
				}
				foreign.R.ProductidProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductidProductVariants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductidProductVariants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_variants")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_variants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidProductVariants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productVariantR{}
			}
			foreign.R.ProductidProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidProductVariants = append(local.R.ProductidProductVariants, foreign)
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.ProductidProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductidSaleProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductidSaleProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sale_products`),
		qm.WhereIn(`sale_products.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_products")
	}

	var resultSlice []*SaleProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_products")
	}

	if len(saleProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidSaleProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &saleProductR{}
			}
			foreign.R.ProductidProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidSaleProducts = append(local.R.ProductidSaleProducts, foreign)
				if foreign.R == nil {
					foreign.R = &saleProductR{}
				}
				foreign.R.ProductidProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductidShippingMethodExcludedProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductidShippingMethodExcludedProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_method_excluded_products`),
		qm.WhereIn(`shipping_method_excluded_products.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_method_excluded_products")
	}

	var resultSlice []*ShippingMethodExcludedProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_method_excluded_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_method_excluded_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_method_excluded_products")
	}

	if len(shippingMethodExcludedProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidShippingMethodExcludedProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodExcludedProductR{}
			}
			foreign.R.ProductidProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidShippingMethodExcludedProducts = append(local.R.ProductidShippingMethodExcludedProducts, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodExcludedProductR{}
				}
				foreign.R.ProductidProduct = local
				break
			}
		}
	}

	return nil
}

// LoadProductidVoucherProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productL) LoadProductidVoucherProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProduct interface{}, mods queries.Applicator) error {
	var slice []*Product
	var object *Product

	if singular {
		var ok bool
		object, ok = maybeProduct.(*Product)
		if !ok {
			object = new(Product)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProduct))
			}
		}
	} else {
		s, ok := maybeProduct.(*[]*Product)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voucher_products`),
		qm.WhereIn(`voucher_products.productid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_products")
	}

	var resultSlice []*VoucherProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_products")
	}

	if len(voucherProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ProductidVoucherProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherProductR{}
			}
			foreign.R.ProductidProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Productid) {
				local.R.ProductidVoucherProducts = append(local.R.ProductidVoucherProducts, foreign)
				if foreign.R == nil {
					foreign.R = &voucherProductR{}
				}
				foreign.R.ProductidProduct = local
				break
			}
		}
	}

	return nil
}

// AddProductidAssignedProductAttributes adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductidAssignedProductAttributes.
// Sets related.R.ProductidProduct appropriately.
func (o *Product) AddProductidAssignedProductAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedProductAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_product_attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, assignedProductAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductidAssignedProductAttributes: related,
		}
	} else {
		o.R.ProductidAssignedProductAttributes = append(o.R.ProductidAssignedProductAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedProductAttributeR{
				ProductidProduct: o,
			}
		} else {
			rel.R.ProductidProduct = o
		}
	}
	return nil
}

// SetProductidAssignedProductAttributes removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProduct's ProductidAssignedProductAttributes accordingly.
// Replaces o.R.ProductidAssignedProductAttributes with related.
// Sets related.R.ProductidProduct's ProductidAssignedProductAttributes accordingly.
func (o *Product) SetProductidAssignedProductAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedProductAttribute) error {
	query := "update \"assigned_product_attributes\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidAssignedProductAttributes {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProduct = nil
		}
		o.R.ProductidAssignedProductAttributes = nil
	}

	return o.AddProductidAssignedProductAttributes(ctx, exec, insert, related...)
}

// RemoveProductidAssignedProductAttributes relationships from objects passed in.
// Removes related items from R.ProductidAssignedProductAttributes (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProduct.
func (o *Product) RemoveProductidAssignedProductAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*AssignedProductAttribute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidAssignedProductAttributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidAssignedProductAttributes)
			if ln > 1 && i < ln-1 {
				o.R.ProductidAssignedProductAttributes[i] = o.R.ProductidAssignedProductAttributes[ln-1]
			}
			o.R.ProductidAssignedProductAttributes = o.R.ProductidAssignedProductAttributes[:ln-1]
			break
		}
	}

	return nil
}

// AddProductidGiftcards adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductidGiftcards.
// Sets related.R.ProductidProduct appropriately.
func (o *Product) AddProductidGiftcards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Giftcard) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"giftcards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, giftcardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductidGiftcards: related,
		}
	} else {
		o.R.ProductidGiftcards = append(o.R.ProductidGiftcards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &giftcardR{
				ProductidProduct: o,
			}
		} else {
			rel.R.ProductidProduct = o
		}
	}
	return nil
}

// SetProductidGiftcards removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProduct's ProductidGiftcards accordingly.
// Replaces o.R.ProductidGiftcards with related.
// Sets related.R.ProductidProduct's ProductidGiftcards accordingly.
func (o *Product) SetProductidGiftcards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Giftcard) error {
	query := "update \"giftcards\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidGiftcards {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProduct = nil
		}
		o.R.ProductidGiftcards = nil
	}

	return o.AddProductidGiftcards(ctx, exec, insert, related...)
}

// RemoveProductidGiftcards relationships from objects passed in.
// Removes related items from R.ProductidGiftcards (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProduct.
func (o *Product) RemoveProductidGiftcards(ctx context.Context, exec boil.ContextExecutor, related ...*Giftcard) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidGiftcards {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidGiftcards)
			if ln > 1 && i < ln-1 {
				o.R.ProductidGiftcards[i] = o.R.ProductidGiftcards[ln-1]
			}
			o.R.ProductidGiftcards = o.R.ProductidGiftcards[:ln-1]
			break
		}
	}

	return nil
}

// AddProductidProductChannelListings adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductidProductChannelListings.
// Sets related.R.ProductidProduct appropriately.
func (o *Product) AddProductidProductChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, productChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductidProductChannelListings: related,
		}
	} else {
		o.R.ProductidProductChannelListings = append(o.R.ProductidProductChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productChannelListingR{
				ProductidProduct: o,
			}
		} else {
			rel.R.ProductidProduct = o
		}
	}
	return nil
}

// SetProductidProductChannelListings removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProduct's ProductidProductChannelListings accordingly.
// Replaces o.R.ProductidProductChannelListings with related.
// Sets related.R.ProductidProduct's ProductidProductChannelListings accordingly.
func (o *Product) SetProductidProductChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductChannelListing) error {
	query := "update \"product_channel_listings\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidProductChannelListings {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProduct = nil
		}
		o.R.ProductidProductChannelListings = nil
	}

	return o.AddProductidProductChannelListings(ctx, exec, insert, related...)
}

// RemoveProductidProductChannelListings relationships from objects passed in.
// Removes related items from R.ProductidProductChannelListings (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProduct.
func (o *Product) RemoveProductidProductChannelListings(ctx context.Context, exec boil.ContextExecutor, related ...*ProductChannelListing) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidProductChannelListings {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidProductChannelListings)
			if ln > 1 && i < ln-1 {
				o.R.ProductidProductChannelListings[i] = o.R.ProductidProductChannelListings[ln-1]
			}
			o.R.ProductidProductChannelListings = o.R.ProductidProductChannelListings[:ln-1]
			break
		}
	}

	return nil
}

// AddProductidProductCollections adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductidProductCollections.
// Sets related.R.ProductidProduct appropriately.
func (o *Product) AddProductidProductCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductCollection) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_collections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, productCollectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductidProductCollections: related,
		}
	} else {
		o.R.ProductidProductCollections = append(o.R.ProductidProductCollections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productCollectionR{
				ProductidProduct: o,
			}
		} else {
			rel.R.ProductidProduct = o
		}
	}
	return nil
}

// SetProductidProductCollections removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProduct's ProductidProductCollections accordingly.
// Replaces o.R.ProductidProductCollections with related.
// Sets related.R.ProductidProduct's ProductidProductCollections accordingly.
func (o *Product) SetProductidProductCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductCollection) error {
	query := "update \"product_collections\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidProductCollections {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProduct = nil
		}
		o.R.ProductidProductCollections = nil
	}

	return o.AddProductidProductCollections(ctx, exec, insert, related...)
}

// RemoveProductidProductCollections relationships from objects passed in.
// Removes related items from R.ProductidProductCollections (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProduct.
func (o *Product) RemoveProductidProductCollections(ctx context.Context, exec boil.ContextExecutor, related ...*ProductCollection) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidProductCollections {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidProductCollections)
			if ln > 1 && i < ln-1 {
				o.R.ProductidProductCollections[i] = o.R.ProductidProductCollections[ln-1]
			}
			o.R.ProductidProductCollections = o.R.ProductidProductCollections[:ln-1]
			break
		}
	}

	return nil
}

// AddProductidProductMedia adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductidProductMedia.
// Sets related.R.ProductidProduct appropriately.
func (o *Product) AddProductidProductMedia(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductMedium) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_media\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, productMediumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductidProductMedia: related,
		}
	} else {
		o.R.ProductidProductMedia = append(o.R.ProductidProductMedia, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productMediumR{
				ProductidProduct: o,
			}
		} else {
			rel.R.ProductidProduct = o
		}
	}
	return nil
}

// SetProductidProductMedia removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProduct's ProductidProductMedia accordingly.
// Replaces o.R.ProductidProductMedia with related.
// Sets related.R.ProductidProduct's ProductidProductMedia accordingly.
func (o *Product) SetProductidProductMedia(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductMedium) error {
	query := "update \"product_media\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidProductMedia {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProduct = nil
		}
		o.R.ProductidProductMedia = nil
	}

	return o.AddProductidProductMedia(ctx, exec, insert, related...)
}

// RemoveProductidProductMedia relationships from objects passed in.
// Removes related items from R.ProductidProductMedia (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProduct.
func (o *Product) RemoveProductidProductMedia(ctx context.Context, exec boil.ContextExecutor, related ...*ProductMedium) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidProductMedia {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidProductMedia)
			if ln > 1 && i < ln-1 {
				o.R.ProductidProductMedia[i] = o.R.ProductidProductMedia[ln-1]
			}
			o.R.ProductidProductMedia = o.R.ProductidProductMedia[:ln-1]
			break
		}
	}

	return nil
}

// AddProductidProductTranslations adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductidProductTranslations.
// Sets related.R.ProductidProduct appropriately.
func (o *Product) AddProductidProductTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductTranslation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_translations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, productTranslationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductidProductTranslations: related,
		}
	} else {
		o.R.ProductidProductTranslations = append(o.R.ProductidProductTranslations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productTranslationR{
				ProductidProduct: o,
			}
		} else {
			rel.R.ProductidProduct = o
		}
	}
	return nil
}

// SetProductidProductTranslations removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProduct's ProductidProductTranslations accordingly.
// Replaces o.R.ProductidProductTranslations with related.
// Sets related.R.ProductidProduct's ProductidProductTranslations accordingly.
func (o *Product) SetProductidProductTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductTranslation) error {
	query := "update \"product_translations\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidProductTranslations {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProduct = nil
		}
		o.R.ProductidProductTranslations = nil
	}

	return o.AddProductidProductTranslations(ctx, exec, insert, related...)
}

// RemoveProductidProductTranslations relationships from objects passed in.
// Removes related items from R.ProductidProductTranslations (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProduct.
func (o *Product) RemoveProductidProductTranslations(ctx context.Context, exec boil.ContextExecutor, related ...*ProductTranslation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidProductTranslations {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidProductTranslations)
			if ln > 1 && i < ln-1 {
				o.R.ProductidProductTranslations[i] = o.R.ProductidProductTranslations[ln-1]
			}
			o.R.ProductidProductTranslations = o.R.ProductidProductTranslations[:ln-1]
			break
		}
	}

	return nil
}

// AddProductidProductVariants adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductidProductVariants.
// Sets related.R.ProductidProduct appropriately.
func (o *Product) AddProductidProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_variants\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, productVariantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductidProductVariants: related,
		}
	} else {
		o.R.ProductidProductVariants = append(o.R.ProductidProductVariants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productVariantR{
				ProductidProduct: o,
			}
		} else {
			rel.R.ProductidProduct = o
		}
	}
	return nil
}

// SetProductidProductVariants removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProduct's ProductidProductVariants accordingly.
// Replaces o.R.ProductidProductVariants with related.
// Sets related.R.ProductidProduct's ProductidProductVariants accordingly.
func (o *Product) SetProductidProductVariants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariant) error {
	query := "update \"product_variants\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidProductVariants {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProduct = nil
		}
		o.R.ProductidProductVariants = nil
	}

	return o.AddProductidProductVariants(ctx, exec, insert, related...)
}

// RemoveProductidProductVariants relationships from objects passed in.
// Removes related items from R.ProductidProductVariants (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProduct.
func (o *Product) RemoveProductidProductVariants(ctx context.Context, exec boil.ContextExecutor, related ...*ProductVariant) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidProductVariants {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidProductVariants)
			if ln > 1 && i < ln-1 {
				o.R.ProductidProductVariants[i] = o.R.ProductidProductVariants[ln-1]
			}
			o.R.ProductidProductVariants = o.R.ProductidProductVariants[:ln-1]
			break
		}
	}

	return nil
}

// AddProductidSaleProducts adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductidSaleProducts.
// Sets related.R.ProductidProduct appropriately.
func (o *Product) AddProductidSaleProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, saleProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductidSaleProducts: related,
		}
	} else {
		o.R.ProductidSaleProducts = append(o.R.ProductidSaleProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &saleProductR{
				ProductidProduct: o,
			}
		} else {
			rel.R.ProductidProduct = o
		}
	}
	return nil
}

// SetProductidSaleProducts removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProduct's ProductidSaleProducts accordingly.
// Replaces o.R.ProductidSaleProducts with related.
// Sets related.R.ProductidProduct's ProductidSaleProducts accordingly.
func (o *Product) SetProductidSaleProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleProduct) error {
	query := "update \"sale_products\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidSaleProducts {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProduct = nil
		}
		o.R.ProductidSaleProducts = nil
	}

	return o.AddProductidSaleProducts(ctx, exec, insert, related...)
}

// RemoveProductidSaleProducts relationships from objects passed in.
// Removes related items from R.ProductidSaleProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProduct.
func (o *Product) RemoveProductidSaleProducts(ctx context.Context, exec boil.ContextExecutor, related ...*SaleProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidSaleProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidSaleProducts)
			if ln > 1 && i < ln-1 {
				o.R.ProductidSaleProducts[i] = o.R.ProductidSaleProducts[ln-1]
			}
			o.R.ProductidSaleProducts = o.R.ProductidSaleProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddProductidShippingMethodExcludedProducts adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductidShippingMethodExcludedProducts.
// Sets related.R.ProductidProduct appropriately.
func (o *Product) AddProductidShippingMethodExcludedProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodExcludedProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodExcludedProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductidShippingMethodExcludedProducts: related,
		}
	} else {
		o.R.ProductidShippingMethodExcludedProducts = append(o.R.ProductidShippingMethodExcludedProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodExcludedProductR{
				ProductidProduct: o,
			}
		} else {
			rel.R.ProductidProduct = o
		}
	}
	return nil
}

// SetProductidShippingMethodExcludedProducts removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProduct's ProductidShippingMethodExcludedProducts accordingly.
// Replaces o.R.ProductidShippingMethodExcludedProducts with related.
// Sets related.R.ProductidProduct's ProductidShippingMethodExcludedProducts accordingly.
func (o *Product) SetProductidShippingMethodExcludedProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodExcludedProduct) error {
	query := "update \"shipping_method_excluded_products\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidShippingMethodExcludedProducts {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProduct = nil
		}
		o.R.ProductidShippingMethodExcludedProducts = nil
	}

	return o.AddProductidShippingMethodExcludedProducts(ctx, exec, insert, related...)
}

// RemoveProductidShippingMethodExcludedProducts relationships from objects passed in.
// Removes related items from R.ProductidShippingMethodExcludedProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProduct.
func (o *Product) RemoveProductidShippingMethodExcludedProducts(ctx context.Context, exec boil.ContextExecutor, related ...*ShippingMethodExcludedProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidShippingMethodExcludedProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidShippingMethodExcludedProducts)
			if ln > 1 && i < ln-1 {
				o.R.ProductidShippingMethodExcludedProducts[i] = o.R.ProductidShippingMethodExcludedProducts[ln-1]
			}
			o.R.ProductidShippingMethodExcludedProducts = o.R.ProductidShippingMethodExcludedProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddProductidVoucherProducts adds the given related objects to the existing relationships
// of the product, optionally inserting them as new records.
// Appends related to o.R.ProductidVoucherProducts.
// Sets related.R.ProductidProduct appropriately.
func (o *Product) AddProductidVoucherProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Productid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
				strmangle.WhereClause("\"", "\"", 2, voucherProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Productid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productR{
			ProductidVoucherProducts: related,
		}
	} else {
		o.R.ProductidVoucherProducts = append(o.R.ProductidVoucherProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherProductR{
				ProductidProduct: o,
			}
		} else {
			rel.R.ProductidProduct = o
		}
	}
	return nil
}

// SetProductidVoucherProducts removes all previously related items of the
// product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ProductidProduct's ProductidVoucherProducts accordingly.
// Replaces o.R.ProductidVoucherProducts with related.
// Sets related.R.ProductidProduct's ProductidVoucherProducts accordingly.
func (o *Product) SetProductidVoucherProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherProduct) error {
	query := "update \"voucher_products\" set \"productid\" = null where \"productid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ProductidVoucherProducts {
			queries.SetScanner(&rel.Productid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ProductidProduct = nil
		}
		o.R.ProductidVoucherProducts = nil
	}

	return o.AddProductidVoucherProducts(ctx, exec, insert, related...)
}

// RemoveProductidVoucherProducts relationships from objects passed in.
// Removes related items from R.ProductidVoucherProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.ProductidProduct.
func (o *Product) RemoveProductidVoucherProducts(ctx context.Context, exec boil.ContextExecutor, related ...*VoucherProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Productid, nil)
		if rel.R != nil {
			rel.R.ProductidProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ProductidVoucherProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.ProductidVoucherProducts)
			if ln > 1 && i < ln-1 {
				o.R.ProductidVoucherProducts[i] = o.R.ProductidVoucherProducts[ln-1]
			}
			o.R.ProductidVoucherProducts = o.R.ProductidVoucherProducts[:ln-1]
			break
		}
	}

	return nil
}

// Products retrieves all the records using an executor.
func Products(mods ...qm.QueryMod) productQuery {
	mods = append(mods, qm.From("\"products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"products\".*"})
	}

	return productQuery{q}
}

// FindProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProduct(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Product, error) {
	productObj := &Product{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from products")
	}

	if err = productObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productObj, err
	}

	return productObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Product) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productInsertCacheMut.RLock()
	cache, cached := productInsertCache[key]
	productInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productAllColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productType, productMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into products")
	}

	if !cached {
		productInsertCacheMut.Lock()
		productInsertCache[key] = cache
		productInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Product.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Product) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productUpdateCacheMut.RLock()
	cache, cached := productUpdateCache[key]
	productUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productAllColumns,
			productPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productType, productMapping, append(wl, productPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for products")
	}

	if !cached {
		productUpdateCacheMut.Lock()
		productUpdateCache[key] = cache
		productUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all product")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Product) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productUpsertCacheMut.RLock()
	cache, cached := productUpsertCache[key]
	productUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productAllColumns,
			productColumnsWithDefault,
			productColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productAllColumns,
			productPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productPrimaryKeyColumns))
			copy(conflict, productPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productType, productMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productType, productMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert products")
	}

	if !cached {
		productUpsertCacheMut.Lock()
		productUpsertCache[key] = cache
		productUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Product record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Product) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Product provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productPrimaryKeyMapping)
	sql := "DELETE FROM \"products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for products")
	}

	if len(productAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Product) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"products\".* FROM \"products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductSlice")
	}

	*o = slice

	return nil
}

// ProductExists checks if the Product row exists.
func ProductExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if products exists")
	}

	return exists, nil
}

// Exists checks if the Product row exists.
func (o *Product) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductExists(ctx, exec, o.ID)
}
