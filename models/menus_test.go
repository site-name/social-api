// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMenus(t *testing.T) {
	t.Parallel()

	query := Menus()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMenusDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Menus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMenusQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Menus().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Menus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMenusSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MenuSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Menus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMenusExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MenuExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Menu exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MenuExists to return true, but got false.")
	}
}

func testMenusFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	menuFound, err := FindMenu(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if menuFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMenusBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Menus().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMenusOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Menus().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMenusAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	menuOne := &Menu{}
	menuTwo := &Menu{}
	if err = randomize.Struct(seed, menuOne, menuDBTypes, false, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}
	if err = randomize.Struct(seed, menuTwo, menuDBTypes, false, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = menuOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = menuTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Menus().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMenusCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	menuOne := &Menu{}
	menuTwo := &Menu{}
	if err = randomize.Struct(seed, menuOne, menuDBTypes, false, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}
	if err = randomize.Struct(seed, menuTwo, menuDBTypes, false, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = menuOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = menuTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Menus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func menuBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Menu) error {
	*o = Menu{}
	return nil
}

func menuAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Menu) error {
	*o = Menu{}
	return nil
}

func menuAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Menu) error {
	*o = Menu{}
	return nil
}

func menuBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Menu) error {
	*o = Menu{}
	return nil
}

func menuAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Menu) error {
	*o = Menu{}
	return nil
}

func menuBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Menu) error {
	*o = Menu{}
	return nil
}

func menuAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Menu) error {
	*o = Menu{}
	return nil
}

func menuBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Menu) error {
	*o = Menu{}
	return nil
}

func menuAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Menu) error {
	*o = Menu{}
	return nil
}

func testMenusHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Menu{}
	o := &Menu{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, menuDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Menu object: %s", err)
	}

	AddMenuHook(boil.BeforeInsertHook, menuBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	menuBeforeInsertHooks = []MenuHook{}

	AddMenuHook(boil.AfterInsertHook, menuAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	menuAfterInsertHooks = []MenuHook{}

	AddMenuHook(boil.AfterSelectHook, menuAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	menuAfterSelectHooks = []MenuHook{}

	AddMenuHook(boil.BeforeUpdateHook, menuBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	menuBeforeUpdateHooks = []MenuHook{}

	AddMenuHook(boil.AfterUpdateHook, menuAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	menuAfterUpdateHooks = []MenuHook{}

	AddMenuHook(boil.BeforeDeleteHook, menuBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	menuBeforeDeleteHooks = []MenuHook{}

	AddMenuHook(boil.AfterDeleteHook, menuAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	menuAfterDeleteHooks = []MenuHook{}

	AddMenuHook(boil.BeforeUpsertHook, menuBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	menuBeforeUpsertHooks = []MenuHook{}

	AddMenuHook(boil.AfterUpsertHook, menuAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	menuAfterUpsertHooks = []MenuHook{}
}

func testMenusInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Menus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMenusInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(menuColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Menus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMenuToManyMenuidMenuItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Menu
	var b, c MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Menuid, a.ID)
	queries.Assign(&c.Menuid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MenuidMenuItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Menuid, b.Menuid) {
			bFound = true
		}
		if queries.Equal(v.Menuid, c.Menuid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MenuSlice{&a}
	if err = a.L.LoadMenuidMenuItems(ctx, tx, false, (*[]*Menu)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MenuidMenuItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MenuidMenuItems = nil
	if err = a.L.LoadMenuidMenuItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MenuidMenuItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMenuToManyTopmenuidShops(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Menu
	var b, c Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Topmenuid, a.ID)
	queries.Assign(&c.Topmenuid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TopmenuidShops().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Topmenuid, b.Topmenuid) {
			bFound = true
		}
		if queries.Equal(v.Topmenuid, c.Topmenuid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MenuSlice{&a}
	if err = a.L.LoadTopmenuidShops(ctx, tx, false, (*[]*Menu)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TopmenuidShops); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TopmenuidShops = nil
	if err = a.L.LoadTopmenuidShops(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TopmenuidShops); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testMenuToManyAddOpMenuidMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Menu
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MenuItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMenuidMenuItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Menuid) {
			t.Error("foreign key was wrong value", a.ID, first.Menuid)
		}
		if !queries.Equal(a.ID, second.Menuid) {
			t.Error("foreign key was wrong value", a.ID, second.Menuid)
		}

		if first.R.MenuidMenu != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.MenuidMenu != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MenuidMenuItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MenuidMenuItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MenuidMenuItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMenuToManySetOpMenuidMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Menu
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMenuidMenuItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MenuidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMenuidMenuItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MenuidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Menuid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Menuid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Menuid) {
		t.Error("foreign key was wrong value", a.ID, d.Menuid)
	}
	if !queries.Equal(a.ID, e.Menuid) {
		t.Error("foreign key was wrong value", a.ID, e.Menuid)
	}

	if b.R.MenuidMenu != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MenuidMenu != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MenuidMenu != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.MenuidMenu != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MenuidMenuItems[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MenuidMenuItems[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMenuToManyRemoveOpMenuidMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Menu
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMenuidMenuItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MenuidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMenuidMenuItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MenuidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Menuid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Menuid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.MenuidMenu != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.MenuidMenu != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.MenuidMenu != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.MenuidMenu != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MenuidMenuItems) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MenuidMenuItems[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MenuidMenuItems[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMenuToManyAddOpTopmenuidShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Menu
	var b, c, d, e Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Shop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Shop{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTopmenuidShops(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Topmenuid) {
			t.Error("foreign key was wrong value", a.ID, first.Topmenuid)
		}
		if !queries.Equal(a.ID, second.Topmenuid) {
			t.Error("foreign key was wrong value", a.ID, second.Topmenuid)
		}

		if first.R.TopmenuidMenu != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TopmenuidMenu != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TopmenuidShops[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TopmenuidShops[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TopmenuidShops().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMenuToManySetOpTopmenuidShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Menu
	var b, c, d, e Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Shop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTopmenuidShops(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TopmenuidShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTopmenuidShops(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TopmenuidShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Topmenuid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Topmenuid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Topmenuid) {
		t.Error("foreign key was wrong value", a.ID, d.Topmenuid)
	}
	if !queries.Equal(a.ID, e.Topmenuid) {
		t.Error("foreign key was wrong value", a.ID, e.Topmenuid)
	}

	if b.R.TopmenuidMenu != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TopmenuidMenu != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TopmenuidMenu != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.TopmenuidMenu != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TopmenuidShops[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TopmenuidShops[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMenuToManyRemoveOpTopmenuidShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Menu
	var b, c, d, e Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, menuDBTypes, false, strmangle.SetComplement(menuPrimaryKeyColumns, menuColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Shop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTopmenuidShops(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TopmenuidShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTopmenuidShops(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TopmenuidShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Topmenuid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Topmenuid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.TopmenuidMenu != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TopmenuidMenu != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TopmenuidMenu != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.TopmenuidMenu != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TopmenuidShops) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TopmenuidShops[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TopmenuidShops[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMenusReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMenusReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MenuSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMenusSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Menus().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	menuDBTypes = map[string]string{`ID`: `character varying`, `Name`: `character varying`, `Slug`: `character varying`, `Createat`: `bigint`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`}
	_           = bytes.MinRead
)

func testMenusUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(menuPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(menuAllColumns) == len(menuPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Menus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, menuDBTypes, true, menuPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMenusSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(menuAllColumns) == len(menuPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Menu{}
	if err = randomize.Struct(seed, o, menuDBTypes, true, menuColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Menus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, menuDBTypes, true, menuPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(menuAllColumns, menuPrimaryKeyColumns) {
		fields = menuAllColumns
	} else {
		fields = strmangle.SetComplement(
			menuAllColumns,
			menuPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MenuSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMenusUpsert(t *testing.T) {
	t.Parallel()

	if len(menuAllColumns) == len(menuPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Menu{}
	if err = randomize.Struct(seed, &o, menuDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Menu: %s", err)
	}

	count, err := Menus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, menuDBTypes, false, menuPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Menu struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Menu: %s", err)
	}

	count, err = Menus().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
