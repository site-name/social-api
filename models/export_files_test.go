// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testExportFiles(t *testing.T) {
	t.Parallel()

	query := ExportFiles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testExportFilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExportFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExportFilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ExportFiles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExportFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExportFilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExportFileSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ExportFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExportFilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ExportFileExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ExportFile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExportFileExists to return true, but got false.")
	}
}

func testExportFilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	exportFileFound, err := FindExportFile(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if exportFileFound == nil {
		t.Error("want a record, got nil")
	}
}

func testExportFilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ExportFiles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testExportFilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ExportFiles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExportFilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exportFileOne := &ExportFile{}
	exportFileTwo := &ExportFile{}
	if err = randomize.Struct(seed, exportFileOne, exportFileDBTypes, false, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}
	if err = randomize.Struct(seed, exportFileTwo, exportFileDBTypes, false, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = exportFileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = exportFileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExportFiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExportFilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	exportFileOne := &ExportFile{}
	exportFileTwo := &ExportFile{}
	if err = randomize.Struct(seed, exportFileOne, exportFileDBTypes, false, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}
	if err = randomize.Struct(seed, exportFileTwo, exportFileDBTypes, false, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = exportFileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = exportFileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExportFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func exportFileBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExportFile) error {
	*o = ExportFile{}
	return nil
}

func exportFileAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ExportFile) error {
	*o = ExportFile{}
	return nil
}

func exportFileAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ExportFile) error {
	*o = ExportFile{}
	return nil
}

func exportFileBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExportFile) error {
	*o = ExportFile{}
	return nil
}

func exportFileAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ExportFile) error {
	*o = ExportFile{}
	return nil
}

func exportFileBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExportFile) error {
	*o = ExportFile{}
	return nil
}

func exportFileAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ExportFile) error {
	*o = ExportFile{}
	return nil
}

func exportFileBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExportFile) error {
	*o = ExportFile{}
	return nil
}

func exportFileAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ExportFile) error {
	*o = ExportFile{}
	return nil
}

func testExportFilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ExportFile{}
	o := &ExportFile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, exportFileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ExportFile object: %s", err)
	}

	AddExportFileHook(boil.BeforeInsertHook, exportFileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	exportFileBeforeInsertHooks = []ExportFileHook{}

	AddExportFileHook(boil.AfterInsertHook, exportFileAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	exportFileAfterInsertHooks = []ExportFileHook{}

	AddExportFileHook(boil.AfterSelectHook, exportFileAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	exportFileAfterSelectHooks = []ExportFileHook{}

	AddExportFileHook(boil.BeforeUpdateHook, exportFileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	exportFileBeforeUpdateHooks = []ExportFileHook{}

	AddExportFileHook(boil.AfterUpdateHook, exportFileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	exportFileAfterUpdateHooks = []ExportFileHook{}

	AddExportFileHook(boil.BeforeDeleteHook, exportFileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	exportFileBeforeDeleteHooks = []ExportFileHook{}

	AddExportFileHook(boil.AfterDeleteHook, exportFileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	exportFileAfterDeleteHooks = []ExportFileHook{}

	AddExportFileHook(boil.BeforeUpsertHook, exportFileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	exportFileBeforeUpsertHooks = []ExportFileHook{}

	AddExportFileHook(boil.AfterUpsertHook, exportFileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	exportFileAfterUpsertHooks = []ExportFileHook{}
}

func testExportFilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExportFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExportFilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(exportFileColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ExportFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExportFileToManyExportEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExportFile
	var b, c ExportEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, exportEventDBTypes, false, exportEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, exportEventDBTypes, false, exportEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ExportFileID = a.ID
	c.ExportFileID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ExportEvents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ExportFileID == b.ExportFileID {
			bFound = true
		}
		if v.ExportFileID == c.ExportFileID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ExportFileSlice{&a}
	if err = a.L.LoadExportEvents(ctx, tx, false, (*[]*ExportFile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ExportEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ExportEvents = nil
	if err = a.L.LoadExportEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ExportEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testExportFileToManyAddOpExportEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExportFile
	var b, c, d, e ExportEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, exportFileDBTypes, false, strmangle.SetComplement(exportFilePrimaryKeyColumns, exportFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ExportEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, exportEventDBTypes, false, strmangle.SetComplement(exportEventPrimaryKeyColumns, exportEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ExportEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddExportEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ExportFileID {
			t.Error("foreign key was wrong value", a.ID, first.ExportFileID)
		}
		if a.ID != second.ExportFileID {
			t.Error("foreign key was wrong value", a.ID, second.ExportFileID)
		}

		if first.R.ExportFile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ExportFile != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ExportEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ExportEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ExportEvents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testExportFileToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ExportFile
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ExportFileSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*ExportFile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testExportFileToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExportFile
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, exportFileDBTypes, false, strmangle.SetComplement(exportFilePrimaryKeyColumns, exportFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ExportFiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testExportFileToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ExportFile
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, exportFileDBTypes, false, strmangle.SetComplement(exportFilePrimaryKeyColumns, exportFileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ExportFiles) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testExportFilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExportFilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ExportFileSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testExportFilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ExportFiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	exportFileDBTypes = map[string]string{`ID`: `uuid`, `UserID`: `uuid`, `ContentFile`: `text`, `CreatedAt`: `bigint`, `UpdatedAt`: `bigint`}
	_                 = bytes.MinRead
)

func testExportFilesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(exportFilePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(exportFileAllColumns) == len(exportFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExportFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testExportFilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(exportFileAllColumns) == len(exportFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ExportFile{}
	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ExportFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, exportFileDBTypes, true, exportFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(exportFileAllColumns, exportFilePrimaryKeyColumns) {
		fields = exportFileAllColumns
	} else {
		fields = strmangle.SetComplement(
			exportFileAllColumns,
			exportFilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ExportFileSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testExportFilesUpsert(t *testing.T) {
	t.Parallel()

	if len(exportFileAllColumns) == len(exportFilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ExportFile{}
	if err = randomize.Struct(seed, &o, exportFileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExportFile: %s", err)
	}

	count, err := ExportFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, exportFileDBTypes, false, exportFilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExportFile struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ExportFile: %s", err)
	}

	count, err = ExportFiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
