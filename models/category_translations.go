// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CategoryTranslation is an object representing the database table.
type CategoryTranslation struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageCode   string      `boil:"language_code" json:"language_code" toml:"language_code" yaml:"language_code"`
	CategoryID     string      `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	Name           string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description    string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	SeoTitle       null.String `boil:"seo_title" json:"seo_title,omitempty" toml:"seo_title" yaml:"seo_title,omitempty"`
	SeoDescription null.String `boil:"seo_description" json:"seo_description,omitempty" toml:"seo_description" yaml:"seo_description,omitempty"`

	R *categoryTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoryTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CategoryTranslationColumns = struct {
	ID             string
	LanguageCode   string
	CategoryID     string
	Name           string
	Description    string
	SeoTitle       string
	SeoDescription string
}{
	ID:             "id",
	LanguageCode:   "language_code",
	CategoryID:     "category_id",
	Name:           "name",
	Description:    "description",
	SeoTitle:       "seo_title",
	SeoDescription: "seo_description",
}

var CategoryTranslationTableColumns = struct {
	ID             string
	LanguageCode   string
	CategoryID     string
	Name           string
	Description    string
	SeoTitle       string
	SeoDescription string
}{
	ID:             "category_translations.id",
	LanguageCode:   "category_translations.language_code",
	CategoryID:     "category_translations.category_id",
	Name:           "category_translations.name",
	Description:    "category_translations.description",
	SeoTitle:       "category_translations.seo_title",
	SeoDescription: "category_translations.seo_description",
}

// Generated where

var CategoryTranslationWhere = struct {
	ID             whereHelperstring
	LanguageCode   whereHelperstring
	CategoryID     whereHelperstring
	Name           whereHelperstring
	Description    whereHelperstring
	SeoTitle       whereHelpernull_String
	SeoDescription whereHelpernull_String
}{
	ID:             whereHelperstring{field: "\"category_translations\".\"id\""},
	LanguageCode:   whereHelperstring{field: "\"category_translations\".\"language_code\""},
	CategoryID:     whereHelperstring{field: "\"category_translations\".\"category_id\""},
	Name:           whereHelperstring{field: "\"category_translations\".\"name\""},
	Description:    whereHelperstring{field: "\"category_translations\".\"description\""},
	SeoTitle:       whereHelpernull_String{field: "\"category_translations\".\"seo_title\""},
	SeoDescription: whereHelpernull_String{field: "\"category_translations\".\"seo_description\""},
}

// CategoryTranslationRels is where relationship names are stored.
var CategoryTranslationRels = struct {
}{}

// categoryTranslationR is where relationships are stored.
type categoryTranslationR struct {
}

// NewStruct creates a new relationship struct
func (*categoryTranslationR) NewStruct() *categoryTranslationR {
	return &categoryTranslationR{}
}

// categoryTranslationL is where Load methods for each relationship are stored.
type categoryTranslationL struct{}

var (
	categoryTranslationAllColumns            = []string{"id", "language_code", "category_id", "name", "description", "seo_title", "seo_description"}
	categoryTranslationColumnsWithoutDefault = []string{"language_code", "category_id", "name", "description"}
	categoryTranslationColumnsWithDefault    = []string{"id", "seo_title", "seo_description"}
	categoryTranslationPrimaryKeyColumns     = []string{"id"}
	categoryTranslationGeneratedColumns      = []string{}
)

type (
	// CategoryTranslationSlice is an alias for a slice of pointers to CategoryTranslation.
	// This should almost always be used instead of []CategoryTranslation.
	CategoryTranslationSlice []*CategoryTranslation

	categoryTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoryTranslationType                 = reflect.TypeOf(&CategoryTranslation{})
	categoryTranslationMapping              = queries.MakeStructMapping(categoryTranslationType)
	categoryTranslationPrimaryKeyMapping, _ = queries.BindMapping(categoryTranslationType, categoryTranslationMapping, categoryTranslationPrimaryKeyColumns)
	categoryTranslationInsertCacheMut       sync.RWMutex
	categoryTranslationInsertCache          = make(map[string]insertCache)
	categoryTranslationUpdateCacheMut       sync.RWMutex
	categoryTranslationUpdateCache          = make(map[string]updateCache)
	categoryTranslationUpsertCacheMut       sync.RWMutex
	categoryTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single categoryTranslation record from the query.
func (q categoryTranslationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CategoryTranslation, error) {
	o := &CategoryTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for category_translations")
	}

	return o, nil
}

// All returns all CategoryTranslation records from the query.
func (q categoryTranslationQuery) All(ctx context.Context, exec boil.ContextExecutor) (CategoryTranslationSlice, error) {
	var o []*CategoryTranslation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CategoryTranslation slice")
	}

	return o, nil
}

// Count returns the count of all CategoryTranslation records in the query.
func (q categoryTranslationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count category_translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q categoryTranslationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if category_translations exists")
	}

	return count > 0, nil
}

// CategoryTranslations retrieves all the records using an executor.
func CategoryTranslations(mods ...qm.QueryMod) categoryTranslationQuery {
	mods = append(mods, qm.From("\"category_translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"category_translations\".*"})
	}

	return categoryTranslationQuery{q}
}

// FindCategoryTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategoryTranslation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CategoryTranslation, error) {
	categoryTranslationObj := &CategoryTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"category_translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, categoryTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from category_translations")
	}

	return categoryTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CategoryTranslation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no category_translations provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(categoryTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	categoryTranslationInsertCacheMut.RLock()
	cache, cached := categoryTranslationInsertCache[key]
	categoryTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			categoryTranslationAllColumns,
			categoryTranslationColumnsWithDefault,
			categoryTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(categoryTranslationType, categoryTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoryTranslationType, categoryTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"category_translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"category_translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into category_translations")
	}

	if !cached {
		categoryTranslationInsertCacheMut.Lock()
		categoryTranslationInsertCache[key] = cache
		categoryTranslationInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CategoryTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CategoryTranslation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	categoryTranslationUpdateCacheMut.RLock()
	cache, cached := categoryTranslationUpdateCache[key]
	categoryTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			categoryTranslationAllColumns,
			categoryTranslationPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update category_translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"category_translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, categoryTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoryTranslationType, categoryTranslationMapping, append(wl, categoryTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update category_translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for category_translations")
	}

	if !cached {
		categoryTranslationUpdateCacheMut.Lock()
		categoryTranslationUpdateCache[key] = cache
		categoryTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q categoryTranslationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for category_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for category_translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategoryTranslationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"category_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, categoryTranslationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in categoryTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all categoryTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CategoryTranslation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no category_translations provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(categoryTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoryTranslationUpsertCacheMut.RLock()
	cache, cached := categoryTranslationUpsertCache[key]
	categoryTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			categoryTranslationAllColumns,
			categoryTranslationColumnsWithDefault,
			categoryTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			categoryTranslationAllColumns,
			categoryTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert category_translations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(categoryTranslationPrimaryKeyColumns))
			copy(conflict, categoryTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"category_translations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(categoryTranslationType, categoryTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoryTranslationType, categoryTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert category_translations")
	}

	if !cached {
		categoryTranslationUpsertCacheMut.Lock()
		categoryTranslationUpsertCache[key] = cache
		categoryTranslationUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CategoryTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CategoryTranslation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CategoryTranslation provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoryTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"category_translations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from category_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for category_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q categoryTranslationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no categoryTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from category_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for category_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategoryTranslationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"category_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoryTranslationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from categoryTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for category_translations")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CategoryTranslation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCategoryTranslation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategoryTranslationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CategoryTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"category_translations\".* FROM \"category_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoryTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CategoryTranslationSlice")
	}

	*o = slice

	return nil
}

// CategoryTranslationExists checks if the CategoryTranslation row exists.
func CategoryTranslationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"category_translations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if category_translations exists")
	}

	return exists, nil
}

// Exists checks if the CategoryTranslation row exists.
func (o *CategoryTranslation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CategoryTranslationExists(ctx, exec, o.ID)
}
