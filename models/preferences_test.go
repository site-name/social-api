// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPreferences(t *testing.T) {
	t.Parallel()

	query := Preferences()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPreferencesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Preferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPreferencesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Preferences().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Preferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPreferencesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PreferenceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Preferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPreferencesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PreferenceExists(ctx, tx, o.Userid)
	if err != nil {
		t.Errorf("Unable to check if Preference exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PreferenceExists to return true, but got false.")
	}
}

func testPreferencesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	preferenceFound, err := FindPreference(ctx, tx, o.Userid)
	if err != nil {
		t.Error(err)
	}

	if preferenceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPreferencesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Preferences().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPreferencesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Preferences().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPreferencesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	preferenceOne := &Preference{}
	preferenceTwo := &Preference{}
	if err = randomize.Struct(seed, preferenceOne, preferenceDBTypes, false, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}
	if err = randomize.Struct(seed, preferenceTwo, preferenceDBTypes, false, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = preferenceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = preferenceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Preferences().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPreferencesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	preferenceOne := &Preference{}
	preferenceTwo := &Preference{}
	if err = randomize.Struct(seed, preferenceOne, preferenceDBTypes, false, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}
	if err = randomize.Struct(seed, preferenceTwo, preferenceDBTypes, false, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = preferenceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = preferenceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Preferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func preferenceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Preference) error {
	*o = Preference{}
	return nil
}

func preferenceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Preference) error {
	*o = Preference{}
	return nil
}

func testPreferencesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Preference{}
	o := &Preference{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, preferenceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Preference object: %s", err)
	}

	AddPreferenceHook(boil.BeforeInsertHook, preferenceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	preferenceBeforeInsertHooks = []PreferenceHook{}

	AddPreferenceHook(boil.AfterInsertHook, preferenceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	preferenceAfterInsertHooks = []PreferenceHook{}

	AddPreferenceHook(boil.AfterSelectHook, preferenceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	preferenceAfterSelectHooks = []PreferenceHook{}

	AddPreferenceHook(boil.BeforeUpdateHook, preferenceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	preferenceBeforeUpdateHooks = []PreferenceHook{}

	AddPreferenceHook(boil.AfterUpdateHook, preferenceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	preferenceAfterUpdateHooks = []PreferenceHook{}

	AddPreferenceHook(boil.BeforeDeleteHook, preferenceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	preferenceBeforeDeleteHooks = []PreferenceHook{}

	AddPreferenceHook(boil.AfterDeleteHook, preferenceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	preferenceAfterDeleteHooks = []PreferenceHook{}

	AddPreferenceHook(boil.BeforeUpsertHook, preferenceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	preferenceBeforeUpsertHooks = []PreferenceHook{}

	AddPreferenceHook(boil.AfterUpsertHook, preferenceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	preferenceAfterUpsertHooks = []PreferenceHook{}
}

func testPreferencesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Preferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPreferencesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(preferenceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Preferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPreferencesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPreferencesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PreferenceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPreferencesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Preferences().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	preferenceDBTypes = map[string]string{`Userid`: `character varying`, `Category`: `character varying`, `Name`: `character varying`, `Value`: `character varying`}
	_                 = bytes.MinRead
)

func testPreferencesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(preferencePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(preferenceAllColumns) == len(preferencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Preferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPreferencesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(preferenceAllColumns) == len(preferencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Preference{}
	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferenceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Preferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, preferenceDBTypes, true, preferencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(preferenceAllColumns, preferencePrimaryKeyColumns) {
		fields = preferenceAllColumns
	} else {
		fields = strmangle.SetComplement(
			preferenceAllColumns,
			preferencePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PreferenceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPreferencesUpsert(t *testing.T) {
	t.Parallel()

	if len(preferenceAllColumns) == len(preferencePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Preference{}
	if err = randomize.Struct(seed, &o, preferenceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Preference: %s", err)
	}

	count, err := Preferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, preferenceDBTypes, false, preferencePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Preference struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Preference: %s", err)
	}

	count, err = Preferences().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
