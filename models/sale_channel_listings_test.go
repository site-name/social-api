// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSaleChannelListings(t *testing.T) {
	t.Parallel()

	query := SaleChannelListings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSaleChannelListingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSaleChannelListingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SaleChannelListings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSaleChannelListingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SaleChannelListingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSaleChannelListingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SaleChannelListingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SaleChannelListing exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SaleChannelListingExists to return true, but got false.")
	}
}

func testSaleChannelListingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	saleChannelListingFound, err := FindSaleChannelListing(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if saleChannelListingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSaleChannelListingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SaleChannelListings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSaleChannelListingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SaleChannelListings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSaleChannelListingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	saleChannelListingOne := &SaleChannelListing{}
	saleChannelListingTwo := &SaleChannelListing{}
	if err = randomize.Struct(seed, saleChannelListingOne, saleChannelListingDBTypes, false, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}
	if err = randomize.Struct(seed, saleChannelListingTwo, saleChannelListingDBTypes, false, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = saleChannelListingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = saleChannelListingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SaleChannelListings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSaleChannelListingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	saleChannelListingOne := &SaleChannelListing{}
	saleChannelListingTwo := &SaleChannelListing{}
	if err = randomize.Struct(seed, saleChannelListingOne, saleChannelListingDBTypes, false, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}
	if err = randomize.Struct(seed, saleChannelListingTwo, saleChannelListingDBTypes, false, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = saleChannelListingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = saleChannelListingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func saleChannelListingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SaleChannelListing) error {
	*o = SaleChannelListing{}
	return nil
}

func saleChannelListingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SaleChannelListing) error {
	*o = SaleChannelListing{}
	return nil
}

func saleChannelListingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SaleChannelListing) error {
	*o = SaleChannelListing{}
	return nil
}

func saleChannelListingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SaleChannelListing) error {
	*o = SaleChannelListing{}
	return nil
}

func saleChannelListingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SaleChannelListing) error {
	*o = SaleChannelListing{}
	return nil
}

func saleChannelListingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SaleChannelListing) error {
	*o = SaleChannelListing{}
	return nil
}

func saleChannelListingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SaleChannelListing) error {
	*o = SaleChannelListing{}
	return nil
}

func saleChannelListingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SaleChannelListing) error {
	*o = SaleChannelListing{}
	return nil
}

func saleChannelListingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SaleChannelListing) error {
	*o = SaleChannelListing{}
	return nil
}

func testSaleChannelListingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SaleChannelListing{}
	o := &SaleChannelListing{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing object: %s", err)
	}

	AddSaleChannelListingHook(boil.BeforeInsertHook, saleChannelListingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	saleChannelListingBeforeInsertHooks = []SaleChannelListingHook{}

	AddSaleChannelListingHook(boil.AfterInsertHook, saleChannelListingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	saleChannelListingAfterInsertHooks = []SaleChannelListingHook{}

	AddSaleChannelListingHook(boil.AfterSelectHook, saleChannelListingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	saleChannelListingAfterSelectHooks = []SaleChannelListingHook{}

	AddSaleChannelListingHook(boil.BeforeUpdateHook, saleChannelListingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	saleChannelListingBeforeUpdateHooks = []SaleChannelListingHook{}

	AddSaleChannelListingHook(boil.AfterUpdateHook, saleChannelListingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	saleChannelListingAfterUpdateHooks = []SaleChannelListingHook{}

	AddSaleChannelListingHook(boil.BeforeDeleteHook, saleChannelListingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	saleChannelListingBeforeDeleteHooks = []SaleChannelListingHook{}

	AddSaleChannelListingHook(boil.AfterDeleteHook, saleChannelListingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	saleChannelListingAfterDeleteHooks = []SaleChannelListingHook{}

	AddSaleChannelListingHook(boil.BeforeUpsertHook, saleChannelListingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	saleChannelListingBeforeUpsertHooks = []SaleChannelListingHook{}

	AddSaleChannelListingHook(boil.AfterUpsertHook, saleChannelListingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	saleChannelListingAfterUpsertHooks = []SaleChannelListingHook{}
}

func testSaleChannelListingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSaleChannelListingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(saleChannelListingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSaleChannelListingToOneChannelUsingChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SaleChannelListing
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, saleChannelListingDBTypes, false, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChannelID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Channel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddChannelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SaleChannelListingSlice{&local}
	if err = local.L.LoadChannel(ctx, tx, false, (*[]*SaleChannelListing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Channel = nil
	if err = local.L.LoadChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSaleChannelListingToOneSaleUsingSale(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SaleChannelListing
	var foreign Sale

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, saleChannelListingDBTypes, false, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, saleDBTypes, false, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SaleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sale().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddSaleHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := SaleChannelListingSlice{&local}
	if err = local.L.LoadSale(ctx, tx, false, (*[]*SaleChannelListing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sale == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sale = nil
	if err = local.L.LoadSale(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sale == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testSaleChannelListingToOneSetOpChannelUsingChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SaleChannelListing
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleChannelListingDBTypes, false, strmangle.SetComplement(saleChannelListingPrimaryKeyColumns, saleChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Channel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SaleChannelListings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChannelID != x.ID {
			t.Error("foreign key was wrong value", a.ChannelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChannelID))
		reflect.Indirect(reflect.ValueOf(&a.ChannelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ChannelID != x.ID {
			t.Error("foreign key was wrong value", a.ChannelID, x.ID)
		}
	}
}
func testSaleChannelListingToOneSetOpSaleUsingSale(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SaleChannelListing
	var b, c Sale

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleChannelListingDBTypes, false, strmangle.SetComplement(saleChannelListingPrimaryKeyColumns, saleChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Sale{&b, &c} {
		err = a.SetSale(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sale != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SaleChannelListings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SaleID != x.ID {
			t.Error("foreign key was wrong value", a.SaleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SaleID))
		reflect.Indirect(reflect.ValueOf(&a.SaleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SaleID != x.ID {
			t.Error("foreign key was wrong value", a.SaleID, x.ID)
		}
	}
}

func testSaleChannelListingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSaleChannelListingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SaleChannelListingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSaleChannelListingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SaleChannelListings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	saleChannelListingDBTypes = map[string]string{`ID`: `uuid`, `SaleID`: `uuid`, `ChannelID`: `uuid`, `DiscountValue`: `numeric`, `Currency`: `character varying`, `CreatedAt`: `bigint`}
	_                         = bytes.MinRead
)

func testSaleChannelListingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(saleChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(saleChannelListingAllColumns) == len(saleChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSaleChannelListingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(saleChannelListingAllColumns) == len(saleChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SaleChannelListing{}
	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, saleChannelListingDBTypes, true, saleChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(saleChannelListingAllColumns, saleChannelListingPrimaryKeyColumns) {
		fields = saleChannelListingAllColumns
	} else {
		fields = strmangle.SetComplement(
			saleChannelListingAllColumns,
			saleChannelListingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SaleChannelListingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSaleChannelListingsUpsert(t *testing.T) {
	t.Parallel()

	if len(saleChannelListingAllColumns) == len(saleChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SaleChannelListing{}
	if err = randomize.Struct(seed, &o, saleChannelListingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SaleChannelListing: %s", err)
	}

	count, err := SaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, saleChannelListingDBTypes, false, saleChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SaleChannelListing struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SaleChannelListing: %s", err)
	}

	count, err = SaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
