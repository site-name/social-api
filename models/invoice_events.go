// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InvoiceEvent is an object representing the database table.
type InvoiceEvent struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Createat   null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Type       null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Invoiceid  null.String `boil:"invoiceid" json:"invoiceid,omitempty" toml:"invoiceid" yaml:"invoiceid,omitempty"`
	Orderid    null.String `boil:"orderid" json:"orderid,omitempty" toml:"orderid" yaml:"orderid,omitempty"`
	Userid     null.String `boil:"userid" json:"userid,omitempty" toml:"userid" yaml:"userid,omitempty"`
	Parameters null.String `boil:"parameters" json:"parameters,omitempty" toml:"parameters" yaml:"parameters,omitempty"`

	R *invoiceEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L invoiceEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InvoiceEventColumns = struct {
	ID         string
	Createat   string
	Type       string
	Invoiceid  string
	Orderid    string
	Userid     string
	Parameters string
}{
	ID:         "id",
	Createat:   "createat",
	Type:       "type",
	Invoiceid:  "invoiceid",
	Orderid:    "orderid",
	Userid:     "userid",
	Parameters: "parameters",
}

var InvoiceEventTableColumns = struct {
	ID         string
	Createat   string
	Type       string
	Invoiceid  string
	Orderid    string
	Userid     string
	Parameters string
}{
	ID:         "invoice_events.id",
	Createat:   "invoice_events.createat",
	Type:       "invoice_events.type",
	Invoiceid:  "invoice_events.invoiceid",
	Orderid:    "invoice_events.orderid",
	Userid:     "invoice_events.userid",
	Parameters: "invoice_events.parameters",
}

// Generated where

var InvoiceEventWhere = struct {
	ID         whereHelperstring
	Createat   whereHelpernull_Int64
	Type       whereHelpernull_String
	Invoiceid  whereHelpernull_String
	Orderid    whereHelpernull_String
	Userid     whereHelpernull_String
	Parameters whereHelpernull_String
}{
	ID:         whereHelperstring{field: "\"invoice_events\".\"id\""},
	Createat:   whereHelpernull_Int64{field: "\"invoice_events\".\"createat\""},
	Type:       whereHelpernull_String{field: "\"invoice_events\".\"type\""},
	Invoiceid:  whereHelpernull_String{field: "\"invoice_events\".\"invoiceid\""},
	Orderid:    whereHelpernull_String{field: "\"invoice_events\".\"orderid\""},
	Userid:     whereHelpernull_String{field: "\"invoice_events\".\"userid\""},
	Parameters: whereHelpernull_String{field: "\"invoice_events\".\"parameters\""},
}

// InvoiceEventRels is where relationship names are stored.
var InvoiceEventRels = struct {
	InvoiceidInvoice string
	OrderidOrder     string
	UseridUser       string
}{
	InvoiceidInvoice: "InvoiceidInvoice",
	OrderidOrder:     "OrderidOrder",
	UseridUser:       "UseridUser",
}

// invoiceEventR is where relationships are stored.
type invoiceEventR struct {
	InvoiceidInvoice *Invoice `boil:"InvoiceidInvoice" json:"InvoiceidInvoice" toml:"InvoiceidInvoice" yaml:"InvoiceidInvoice"`
	OrderidOrder     *Order   `boil:"OrderidOrder" json:"OrderidOrder" toml:"OrderidOrder" yaml:"OrderidOrder"`
	UseridUser       *User    `boil:"UseridUser" json:"UseridUser" toml:"UseridUser" yaml:"UseridUser"`
}

// NewStruct creates a new relationship struct
func (*invoiceEventR) NewStruct() *invoiceEventR {
	return &invoiceEventR{}
}

func (r *invoiceEventR) GetInvoiceidInvoice() *Invoice {
	if r == nil {
		return nil
	}
	return r.InvoiceidInvoice
}

func (r *invoiceEventR) GetOrderidOrder() *Order {
	if r == nil {
		return nil
	}
	return r.OrderidOrder
}

func (r *invoiceEventR) GetUseridUser() *User {
	if r == nil {
		return nil
	}
	return r.UseridUser
}

// invoiceEventL is where Load methods for each relationship are stored.
type invoiceEventL struct{}

var (
	invoiceEventAllColumns            = []string{"id", "createat", "type", "invoiceid", "orderid", "userid", "parameters"}
	invoiceEventColumnsWithoutDefault = []string{"id"}
	invoiceEventColumnsWithDefault    = []string{"createat", "type", "invoiceid", "orderid", "userid", "parameters"}
	invoiceEventPrimaryKeyColumns     = []string{"id"}
	invoiceEventGeneratedColumns      = []string{}
)

type (
	// InvoiceEventSlice is an alias for a slice of pointers to InvoiceEvent.
	// This should almost always be used instead of []InvoiceEvent.
	InvoiceEventSlice []*InvoiceEvent
	// InvoiceEventHook is the signature for custom InvoiceEvent hook methods
	InvoiceEventHook func(context.Context, boil.ContextExecutor, *InvoiceEvent) error

	invoiceEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	invoiceEventType                 = reflect.TypeOf(&InvoiceEvent{})
	invoiceEventMapping              = queries.MakeStructMapping(invoiceEventType)
	invoiceEventPrimaryKeyMapping, _ = queries.BindMapping(invoiceEventType, invoiceEventMapping, invoiceEventPrimaryKeyColumns)
	invoiceEventInsertCacheMut       sync.RWMutex
	invoiceEventInsertCache          = make(map[string]insertCache)
	invoiceEventUpdateCacheMut       sync.RWMutex
	invoiceEventUpdateCache          = make(map[string]updateCache)
	invoiceEventUpsertCacheMut       sync.RWMutex
	invoiceEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var invoiceEventAfterSelectHooks []InvoiceEventHook

var invoiceEventBeforeInsertHooks []InvoiceEventHook
var invoiceEventAfterInsertHooks []InvoiceEventHook

var invoiceEventBeforeUpdateHooks []InvoiceEventHook
var invoiceEventAfterUpdateHooks []InvoiceEventHook

var invoiceEventBeforeDeleteHooks []InvoiceEventHook
var invoiceEventAfterDeleteHooks []InvoiceEventHook

var invoiceEventBeforeUpsertHooks []InvoiceEventHook
var invoiceEventAfterUpsertHooks []InvoiceEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InvoiceEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InvoiceEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InvoiceEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InvoiceEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InvoiceEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InvoiceEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InvoiceEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InvoiceEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InvoiceEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range invoiceEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInvoiceEventHook registers your hook function for all future operations.
func AddInvoiceEventHook(hookPoint boil.HookPoint, invoiceEventHook InvoiceEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		invoiceEventAfterSelectHooks = append(invoiceEventAfterSelectHooks, invoiceEventHook)
	case boil.BeforeInsertHook:
		invoiceEventBeforeInsertHooks = append(invoiceEventBeforeInsertHooks, invoiceEventHook)
	case boil.AfterInsertHook:
		invoiceEventAfterInsertHooks = append(invoiceEventAfterInsertHooks, invoiceEventHook)
	case boil.BeforeUpdateHook:
		invoiceEventBeforeUpdateHooks = append(invoiceEventBeforeUpdateHooks, invoiceEventHook)
	case boil.AfterUpdateHook:
		invoiceEventAfterUpdateHooks = append(invoiceEventAfterUpdateHooks, invoiceEventHook)
	case boil.BeforeDeleteHook:
		invoiceEventBeforeDeleteHooks = append(invoiceEventBeforeDeleteHooks, invoiceEventHook)
	case boil.AfterDeleteHook:
		invoiceEventAfterDeleteHooks = append(invoiceEventAfterDeleteHooks, invoiceEventHook)
	case boil.BeforeUpsertHook:
		invoiceEventBeforeUpsertHooks = append(invoiceEventBeforeUpsertHooks, invoiceEventHook)
	case boil.AfterUpsertHook:
		invoiceEventAfterUpsertHooks = append(invoiceEventAfterUpsertHooks, invoiceEventHook)
	}
}

// One returns a single invoiceEvent record from the query.
func (q invoiceEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InvoiceEvent, error) {
	o := &InvoiceEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invoice_events")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InvoiceEvent records from the query.
func (q invoiceEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (InvoiceEventSlice, error) {
	var o []*InvoiceEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InvoiceEvent slice")
	}

	if len(invoiceEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InvoiceEvent records in the query.
func (q invoiceEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invoice_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q invoiceEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invoice_events exists")
	}

	return count > 0, nil
}

// InvoiceidInvoice pointed to by the foreign key.
func (o *InvoiceEvent) InvoiceidInvoice(mods ...qm.QueryMod) invoiceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Invoiceid),
	}

	queryMods = append(queryMods, mods...)

	return Invoices(queryMods...)
}

// OrderidOrder pointed to by the foreign key.
func (o *InvoiceEvent) OrderidOrder(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Orderid),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// UseridUser pointed to by the foreign key.
func (o *InvoiceEvent) UseridUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Userid),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadInvoiceidInvoice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (invoiceEventL) LoadInvoiceidInvoice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoiceEvent interface{}, mods queries.Applicator) error {
	var slice []*InvoiceEvent
	var object *InvoiceEvent

	if singular {
		var ok bool
		object, ok = maybeInvoiceEvent.(*InvoiceEvent)
		if !ok {
			object = new(InvoiceEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoiceEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoiceEvent))
			}
		}
	} else {
		s, ok := maybeInvoiceEvent.(*[]*InvoiceEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoiceEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoiceEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &invoiceEventR{}
		}
		if !queries.IsNil(object.Invoiceid) {
			args = append(args, object.Invoiceid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Invoiceid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Invoiceid) {
				args = append(args, obj.Invoiceid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`invoices`),
		qm.WhereIn(`invoices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Invoice")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Invoice")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for invoices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoices")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.InvoiceidInvoice = foreign
		if foreign.R == nil {
			foreign.R = &invoiceR{}
		}
		foreign.R.InvoiceidInvoiceEvents = append(foreign.R.InvoiceidInvoiceEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Invoiceid, foreign.ID) {
				local.R.InvoiceidInvoice = foreign
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.InvoiceidInvoiceEvents = append(foreign.R.InvoiceidInvoiceEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderidOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (invoiceEventL) LoadOrderidOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoiceEvent interface{}, mods queries.Applicator) error {
	var slice []*InvoiceEvent
	var object *InvoiceEvent

	if singular {
		var ok bool
		object, ok = maybeInvoiceEvent.(*InvoiceEvent)
		if !ok {
			object = new(InvoiceEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoiceEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoiceEvent))
			}
		}
	} else {
		s, ok := maybeInvoiceEvent.(*[]*InvoiceEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoiceEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoiceEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &invoiceEventR{}
		}
		if !queries.IsNil(object.Orderid) {
			args = append(args, object.Orderid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Orderid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Orderid) {
				args = append(args, obj.Orderid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderidOrder = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderidInvoiceEvents = append(foreign.R.OrderidInvoiceEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Orderid, foreign.ID) {
				local.R.OrderidOrder = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderidInvoiceEvents = append(foreign.R.OrderidInvoiceEvents, local)
				break
			}
		}
	}

	return nil
}

// LoadUseridUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (invoiceEventL) LoadUseridUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeInvoiceEvent interface{}, mods queries.Applicator) error {
	var slice []*InvoiceEvent
	var object *InvoiceEvent

	if singular {
		var ok bool
		object, ok = maybeInvoiceEvent.(*InvoiceEvent)
		if !ok {
			object = new(InvoiceEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeInvoiceEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeInvoiceEvent))
			}
		}
	} else {
		s, ok := maybeInvoiceEvent.(*[]*InvoiceEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeInvoiceEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeInvoiceEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &invoiceEventR{}
		}
		if !queries.IsNil(object.Userid) {
			args = append(args, object.Userid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &invoiceEventR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Userid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Userid) {
				args = append(args, obj.Userid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UseridInvoiceEvents = append(foreign.R.UseridInvoiceEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Userid, foreign.ID) {
				local.R.UseridUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UseridInvoiceEvents = append(foreign.R.UseridInvoiceEvents, local)
				break
			}
		}
	}

	return nil
}

// SetInvoiceidInvoice of the invoiceEvent to the related item.
// Sets o.R.InvoiceidInvoice to related.
// Adds o to related.R.InvoiceidInvoiceEvents.
func (o *InvoiceEvent) SetInvoiceidInvoice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Invoice) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"invoiceid"}),
		strmangle.WhereClause("\"", "\"", 2, invoiceEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Invoiceid, related.ID)
	if o.R == nil {
		o.R = &invoiceEventR{
			InvoiceidInvoice: related,
		}
	} else {
		o.R.InvoiceidInvoice = related
	}

	if related.R == nil {
		related.R = &invoiceR{
			InvoiceidInvoiceEvents: InvoiceEventSlice{o},
		}
	} else {
		related.R.InvoiceidInvoiceEvents = append(related.R.InvoiceidInvoiceEvents, o)
	}

	return nil
}

// RemoveInvoiceidInvoice relationship.
// Sets o.R.InvoiceidInvoice to nil.
// Removes o from all passed in related items' relationships struct.
func (o *InvoiceEvent) RemoveInvoiceidInvoice(ctx context.Context, exec boil.ContextExecutor, related *Invoice) error {
	var err error

	queries.SetScanner(&o.Invoiceid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("invoiceid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.InvoiceidInvoice = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.InvoiceidInvoiceEvents {
		if queries.Equal(o.Invoiceid, ri.Invoiceid) {
			continue
		}

		ln := len(related.R.InvoiceidInvoiceEvents)
		if ln > 1 && i < ln-1 {
			related.R.InvoiceidInvoiceEvents[i] = related.R.InvoiceidInvoiceEvents[ln-1]
		}
		related.R.InvoiceidInvoiceEvents = related.R.InvoiceidInvoiceEvents[:ln-1]
		break
	}
	return nil
}

// SetOrderidOrder of the invoiceEvent to the related item.
// Sets o.R.OrderidOrder to related.
// Adds o to related.R.OrderidInvoiceEvents.
func (o *InvoiceEvent) SetOrderidOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
		strmangle.WhereClause("\"", "\"", 2, invoiceEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Orderid, related.ID)
	if o.R == nil {
		o.R = &invoiceEventR{
			OrderidOrder: related,
		}
	} else {
		o.R.OrderidOrder = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderidInvoiceEvents: InvoiceEventSlice{o},
		}
	} else {
		related.R.OrderidInvoiceEvents = append(related.R.OrderidInvoiceEvents, o)
	}

	return nil
}

// RemoveOrderidOrder relationship.
// Sets o.R.OrderidOrder to nil.
// Removes o from all passed in related items' relationships struct.
func (o *InvoiceEvent) RemoveOrderidOrder(ctx context.Context, exec boil.ContextExecutor, related *Order) error {
	var err error

	queries.SetScanner(&o.Orderid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderidOrder = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderidInvoiceEvents {
		if queries.Equal(o.Orderid, ri.Orderid) {
			continue
		}

		ln := len(related.R.OrderidInvoiceEvents)
		if ln > 1 && i < ln-1 {
			related.R.OrderidInvoiceEvents[i] = related.R.OrderidInvoiceEvents[ln-1]
		}
		related.R.OrderidInvoiceEvents = related.R.OrderidInvoiceEvents[:ln-1]
		break
	}
	return nil
}

// SetUseridUser of the invoiceEvent to the related item.
// Sets o.R.UseridUser to related.
// Adds o to related.R.UseridInvoiceEvents.
func (o *InvoiceEvent) SetUseridUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"invoice_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
		strmangle.WhereClause("\"", "\"", 2, invoiceEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Userid, related.ID)
	if o.R == nil {
		o.R = &invoiceEventR{
			UseridUser: related,
		}
	} else {
		o.R.UseridUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UseridInvoiceEvents: InvoiceEventSlice{o},
		}
	} else {
		related.R.UseridInvoiceEvents = append(related.R.UseridInvoiceEvents, o)
	}

	return nil
}

// RemoveUseridUser relationship.
// Sets o.R.UseridUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *InvoiceEvent) RemoveUseridUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.Userid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("userid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UseridUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UseridInvoiceEvents {
		if queries.Equal(o.Userid, ri.Userid) {
			continue
		}

		ln := len(related.R.UseridInvoiceEvents)
		if ln > 1 && i < ln-1 {
			related.R.UseridInvoiceEvents[i] = related.R.UseridInvoiceEvents[ln-1]
		}
		related.R.UseridInvoiceEvents = related.R.UseridInvoiceEvents[:ln-1]
		break
	}
	return nil
}

// InvoiceEvents retrieves all the records using an executor.
func InvoiceEvents(mods ...qm.QueryMod) invoiceEventQuery {
	mods = append(mods, qm.From("\"invoice_events\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"invoice_events\".*"})
	}

	return invoiceEventQuery{q}
}

// FindInvoiceEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInvoiceEvent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*InvoiceEvent, error) {
	invoiceEventObj := &InvoiceEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"invoice_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, invoiceEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invoice_events")
	}

	if err = invoiceEventObj.doAfterSelectHooks(ctx, exec); err != nil {
		return invoiceEventObj, err
	}

	return invoiceEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InvoiceEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoice_events provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	invoiceEventInsertCacheMut.RLock()
	cache, cached := invoiceEventInsertCache[key]
	invoiceEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			invoiceEventAllColumns,
			invoiceEventColumnsWithDefault,
			invoiceEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(invoiceEventType, invoiceEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(invoiceEventType, invoiceEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"invoice_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"invoice_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invoice_events")
	}

	if !cached {
		invoiceEventInsertCacheMut.Lock()
		invoiceEventInsertCache[key] = cache
		invoiceEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InvoiceEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InvoiceEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	invoiceEventUpdateCacheMut.RLock()
	cache, cached := invoiceEventUpdateCache[key]
	invoiceEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			invoiceEventAllColumns,
			invoiceEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invoice_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"invoice_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, invoiceEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(invoiceEventType, invoiceEventMapping, append(wl, invoiceEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invoice_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invoice_events")
	}

	if !cached {
		invoiceEventUpdateCacheMut.Lock()
		invoiceEventUpdateCache[key] = cache
		invoiceEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q invoiceEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invoice_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invoice_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InvoiceEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"invoice_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, invoiceEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in invoiceEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all invoiceEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InvoiceEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invoice_events provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(invoiceEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	invoiceEventUpsertCacheMut.RLock()
	cache, cached := invoiceEventUpsertCache[key]
	invoiceEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			invoiceEventAllColumns,
			invoiceEventColumnsWithDefault,
			invoiceEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			invoiceEventAllColumns,
			invoiceEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert invoice_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(invoiceEventPrimaryKeyColumns))
			copy(conflict, invoiceEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"invoice_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(invoiceEventType, invoiceEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(invoiceEventType, invoiceEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert invoice_events")
	}

	if !cached {
		invoiceEventUpsertCacheMut.Lock()
		invoiceEventUpsertCache[key] = cache
		invoiceEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InvoiceEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InvoiceEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InvoiceEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), invoiceEventPrimaryKeyMapping)
	sql := "DELETE FROM \"invoice_events\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invoice_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invoice_events")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q invoiceEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no invoiceEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoice_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoice_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InvoiceEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(invoiceEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"invoice_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoiceEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invoiceEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invoice_events")
	}

	if len(invoiceEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InvoiceEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInvoiceEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InvoiceEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InvoiceEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), invoiceEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"invoice_events\".* FROM \"invoice_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, invoiceEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InvoiceEventSlice")
	}

	*o = slice

	return nil
}

// InvoiceEventExists checks if the InvoiceEvent row exists.
func InvoiceEventExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"invoice_events\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invoice_events exists")
	}

	return exists, nil
}

// Exists checks if the InvoiceEvent row exists.
func (o *InvoiceEvent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InvoiceEventExists(ctx, exec, o.ID)
}
