// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVoucherproductVariants(t *testing.T) {
	t.Parallel()

	query := VoucherproductVariants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVoucherproductVariantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherproductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherproductVariantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VoucherproductVariants().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherproductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherproductVariantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherproductVariantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherproductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherproductVariantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VoucherproductVariantExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if VoucherproductVariant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VoucherproductVariantExists to return true, but got false.")
	}
}

func testVoucherproductVariantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	voucherproductVariantFound, err := FindVoucherproductVariant(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if voucherproductVariantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVoucherproductVariantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VoucherproductVariants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVoucherproductVariantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VoucherproductVariants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVoucherproductVariantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	voucherproductVariantOne := &VoucherproductVariant{}
	voucherproductVariantTwo := &VoucherproductVariant{}
	if err = randomize.Struct(seed, voucherproductVariantOne, voucherproductVariantDBTypes, false, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherproductVariantTwo, voucherproductVariantDBTypes, false, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherproductVariantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherproductVariantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoucherproductVariants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVoucherproductVariantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	voucherproductVariantOne := &VoucherproductVariant{}
	voucherproductVariantTwo := &VoucherproductVariant{}
	if err = randomize.Struct(seed, voucherproductVariantOne, voucherproductVariantDBTypes, false, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherproductVariantTwo, voucherproductVariantDBTypes, false, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherproductVariantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherproductVariantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherproductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func voucherproductVariantBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherproductVariant) error {
	*o = VoucherproductVariant{}
	return nil
}

func voucherproductVariantAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherproductVariant) error {
	*o = VoucherproductVariant{}
	return nil
}

func voucherproductVariantAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VoucherproductVariant) error {
	*o = VoucherproductVariant{}
	return nil
}

func voucherproductVariantBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoucherproductVariant) error {
	*o = VoucherproductVariant{}
	return nil
}

func voucherproductVariantAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoucherproductVariant) error {
	*o = VoucherproductVariant{}
	return nil
}

func voucherproductVariantBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoucherproductVariant) error {
	*o = VoucherproductVariant{}
	return nil
}

func voucherproductVariantAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoucherproductVariant) error {
	*o = VoucherproductVariant{}
	return nil
}

func voucherproductVariantBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherproductVariant) error {
	*o = VoucherproductVariant{}
	return nil
}

func voucherproductVariantAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherproductVariant) error {
	*o = VoucherproductVariant{}
	return nil
}

func testVoucherproductVariantsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VoucherproductVariant{}
	o := &VoucherproductVariant{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant object: %s", err)
	}

	AddVoucherproductVariantHook(boil.BeforeInsertHook, voucherproductVariantBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	voucherproductVariantBeforeInsertHooks = []VoucherproductVariantHook{}

	AddVoucherproductVariantHook(boil.AfterInsertHook, voucherproductVariantAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	voucherproductVariantAfterInsertHooks = []VoucherproductVariantHook{}

	AddVoucherproductVariantHook(boil.AfterSelectHook, voucherproductVariantAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	voucherproductVariantAfterSelectHooks = []VoucherproductVariantHook{}

	AddVoucherproductVariantHook(boil.BeforeUpdateHook, voucherproductVariantBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	voucherproductVariantBeforeUpdateHooks = []VoucherproductVariantHook{}

	AddVoucherproductVariantHook(boil.AfterUpdateHook, voucherproductVariantAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	voucherproductVariantAfterUpdateHooks = []VoucherproductVariantHook{}

	AddVoucherproductVariantHook(boil.BeforeDeleteHook, voucherproductVariantBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	voucherproductVariantBeforeDeleteHooks = []VoucherproductVariantHook{}

	AddVoucherproductVariantHook(boil.AfterDeleteHook, voucherproductVariantAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	voucherproductVariantAfterDeleteHooks = []VoucherproductVariantHook{}

	AddVoucherproductVariantHook(boil.BeforeUpsertHook, voucherproductVariantBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	voucherproductVariantBeforeUpsertHooks = []VoucherproductVariantHook{}

	AddVoucherproductVariantHook(boil.AfterUpsertHook, voucherproductVariantAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	voucherproductVariantAfterUpsertHooks = []VoucherproductVariantHook{}
}

func testVoucherproductVariantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherproductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherproductVariantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(voucherproductVariantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VoucherproductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherproductVariantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoucherproductVariantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherproductVariantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoucherproductVariantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoucherproductVariants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	voucherproductVariantDBTypes = map[string]string{`ID`: `character varying`, `Voucherid`: `character varying`, `Productvariantid`: `character varying`, `Createat`: `bigint`}
	_                            = bytes.MinRead
)

func testVoucherproductVariantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(voucherproductVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(voucherproductVariantAllColumns) == len(voucherproductVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherproductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVoucherproductVariantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(voucherproductVariantAllColumns) == len(voucherproductVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoucherproductVariant{}
	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherproductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherproductVariantDBTypes, true, voucherproductVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(voucherproductVariantAllColumns, voucherproductVariantPrimaryKeyColumns) {
		fields = voucherproductVariantAllColumns
	} else {
		fields = strmangle.SetComplement(
			voucherproductVariantAllColumns,
			voucherproductVariantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VoucherproductVariantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVoucherproductVariantsUpsert(t *testing.T) {
	t.Parallel()

	if len(voucherproductVariantAllColumns) == len(voucherproductVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VoucherproductVariant{}
	if err = randomize.Struct(seed, &o, voucherproductVariantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoucherproductVariant: %s", err)
	}

	count, err := VoucherproductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, voucherproductVariantDBTypes, false, voucherproductVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherproductVariant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoucherproductVariant: %s", err)
	}

	count, err = VoucherproductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
