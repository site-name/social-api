// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MenuItem is an object representing the database table.
type MenuItem struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Menuid          null.String `boil:"menuid" json:"menuid,omitempty" toml:"menuid" yaml:"menuid,omitempty"`
	Name            null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Parentid        null.String `boil:"parentid" json:"parentid,omitempty" toml:"parentid" yaml:"parentid,omitempty"`
	URL             null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	Categoryid      null.String `boil:"categoryid" json:"categoryid,omitempty" toml:"categoryid" yaml:"categoryid,omitempty"`
	Collectionid    null.String `boil:"collectionid" json:"collectionid,omitempty" toml:"collectionid" yaml:"collectionid,omitempty"`
	Pageid          null.String `boil:"pageid" json:"pageid,omitempty" toml:"pageid" yaml:"pageid,omitempty"`
	Metadata        null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata null.JSON   `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`
	Sortorder       null.Int    `boil:"sortorder" json:"sortorder,omitempty" toml:"sortorder" yaml:"sortorder,omitempty"`

	R *menuItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuItemColumns = struct {
	ID              string
	Menuid          string
	Name            string
	Parentid        string
	URL             string
	Categoryid      string
	Collectionid    string
	Pageid          string
	Metadata        string
	Privatemetadata string
	Sortorder       string
}{
	ID:              "id",
	Menuid:          "menuid",
	Name:            "name",
	Parentid:        "parentid",
	URL:             "url",
	Categoryid:      "categoryid",
	Collectionid:    "collectionid",
	Pageid:          "pageid",
	Metadata:        "metadata",
	Privatemetadata: "privatemetadata",
	Sortorder:       "sortorder",
}

var MenuItemTableColumns = struct {
	ID              string
	Menuid          string
	Name            string
	Parentid        string
	URL             string
	Categoryid      string
	Collectionid    string
	Pageid          string
	Metadata        string
	Privatemetadata string
	Sortorder       string
}{
	ID:              "menu_items.id",
	Menuid:          "menu_items.menuid",
	Name:            "menu_items.name",
	Parentid:        "menu_items.parentid",
	URL:             "menu_items.url",
	Categoryid:      "menu_items.categoryid",
	Collectionid:    "menu_items.collectionid",
	Pageid:          "menu_items.pageid",
	Metadata:        "menu_items.metadata",
	Privatemetadata: "menu_items.privatemetadata",
	Sortorder:       "menu_items.sortorder",
}

// Generated where

var MenuItemWhere = struct {
	ID              whereHelperstring
	Menuid          whereHelpernull_String
	Name            whereHelpernull_String
	Parentid        whereHelpernull_String
	URL             whereHelpernull_String
	Categoryid      whereHelpernull_String
	Collectionid    whereHelpernull_String
	Pageid          whereHelpernull_String
	Metadata        whereHelpernull_JSON
	Privatemetadata whereHelpernull_JSON
	Sortorder       whereHelpernull_Int
}{
	ID:              whereHelperstring{field: "\"menu_items\".\"id\""},
	Menuid:          whereHelpernull_String{field: "\"menu_items\".\"menuid\""},
	Name:            whereHelpernull_String{field: "\"menu_items\".\"name\""},
	Parentid:        whereHelpernull_String{field: "\"menu_items\".\"parentid\""},
	URL:             whereHelpernull_String{field: "\"menu_items\".\"url\""},
	Categoryid:      whereHelpernull_String{field: "\"menu_items\".\"categoryid\""},
	Collectionid:    whereHelpernull_String{field: "\"menu_items\".\"collectionid\""},
	Pageid:          whereHelpernull_String{field: "\"menu_items\".\"pageid\""},
	Metadata:        whereHelpernull_JSON{field: "\"menu_items\".\"metadata\""},
	Privatemetadata: whereHelpernull_JSON{field: "\"menu_items\".\"privatemetadata\""},
	Sortorder:       whereHelpernull_Int{field: "\"menu_items\".\"sortorder\""},
}

// MenuItemRels is where relationship names are stored.
var MenuItemRels = struct {
	CategoryidCategory             string
	CollectionidCollection         string
	ParentidMenuItem               string
	MenuidMenu                     string
	PageidPage                     string
	MenuitemidMenuItemTranslations string
	ParentidMenuItems              string
}{
	CategoryidCategory:             "CategoryidCategory",
	CollectionidCollection:         "CollectionidCollection",
	ParentidMenuItem:               "ParentidMenuItem",
	MenuidMenu:                     "MenuidMenu",
	PageidPage:                     "PageidPage",
	MenuitemidMenuItemTranslations: "MenuitemidMenuItemTranslations",
	ParentidMenuItems:              "ParentidMenuItems",
}

// menuItemR is where relationships are stored.
type menuItemR struct {
	CategoryidCategory             *Category                `boil:"CategoryidCategory" json:"CategoryidCategory" toml:"CategoryidCategory" yaml:"CategoryidCategory"`
	CollectionidCollection         *Collection              `boil:"CollectionidCollection" json:"CollectionidCollection" toml:"CollectionidCollection" yaml:"CollectionidCollection"`
	ParentidMenuItem               *MenuItem                `boil:"ParentidMenuItem" json:"ParentidMenuItem" toml:"ParentidMenuItem" yaml:"ParentidMenuItem"`
	MenuidMenu                     *Menu                    `boil:"MenuidMenu" json:"MenuidMenu" toml:"MenuidMenu" yaml:"MenuidMenu"`
	PageidPage                     *Page                    `boil:"PageidPage" json:"PageidPage" toml:"PageidPage" yaml:"PageidPage"`
	MenuitemidMenuItemTranslations MenuItemTranslationSlice `boil:"MenuitemidMenuItemTranslations" json:"MenuitemidMenuItemTranslations" toml:"MenuitemidMenuItemTranslations" yaml:"MenuitemidMenuItemTranslations"`
	ParentidMenuItems              MenuItemSlice            `boil:"ParentidMenuItems" json:"ParentidMenuItems" toml:"ParentidMenuItems" yaml:"ParentidMenuItems"`
}

// NewStruct creates a new relationship struct
func (*menuItemR) NewStruct() *menuItemR {
	return &menuItemR{}
}

func (r *menuItemR) GetCategoryidCategory() *Category {
	if r == nil {
		return nil
	}
	return r.CategoryidCategory
}

func (r *menuItemR) GetCollectionidCollection() *Collection {
	if r == nil {
		return nil
	}
	return r.CollectionidCollection
}

func (r *menuItemR) GetParentidMenuItem() *MenuItem {
	if r == nil {
		return nil
	}
	return r.ParentidMenuItem
}

func (r *menuItemR) GetMenuidMenu() *Menu {
	if r == nil {
		return nil
	}
	return r.MenuidMenu
}

func (r *menuItemR) GetPageidPage() *Page {
	if r == nil {
		return nil
	}
	return r.PageidPage
}

func (r *menuItemR) GetMenuitemidMenuItemTranslations() MenuItemTranslationSlice {
	if r == nil {
		return nil
	}
	return r.MenuitemidMenuItemTranslations
}

func (r *menuItemR) GetParentidMenuItems() MenuItemSlice {
	if r == nil {
		return nil
	}
	return r.ParentidMenuItems
}

// menuItemL is where Load methods for each relationship are stored.
type menuItemL struct{}

var (
	menuItemAllColumns            = []string{"id", "menuid", "name", "parentid", "url", "categoryid", "collectionid", "pageid", "metadata", "privatemetadata", "sortorder"}
	menuItemColumnsWithoutDefault = []string{"id"}
	menuItemColumnsWithDefault    = []string{"menuid", "name", "parentid", "url", "categoryid", "collectionid", "pageid", "metadata", "privatemetadata", "sortorder"}
	menuItemPrimaryKeyColumns     = []string{"id"}
	menuItemGeneratedColumns      = []string{}
)

type (
	// MenuItemSlice is an alias for a slice of pointers to MenuItem.
	// This should almost always be used instead of []MenuItem.
	MenuItemSlice []*MenuItem
	// MenuItemHook is the signature for custom MenuItem hook methods
	MenuItemHook func(context.Context, boil.ContextExecutor, *MenuItem) error

	menuItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuItemType                 = reflect.TypeOf(&MenuItem{})
	menuItemMapping              = queries.MakeStructMapping(menuItemType)
	menuItemPrimaryKeyMapping, _ = queries.BindMapping(menuItemType, menuItemMapping, menuItemPrimaryKeyColumns)
	menuItemInsertCacheMut       sync.RWMutex
	menuItemInsertCache          = make(map[string]insertCache)
	menuItemUpdateCacheMut       sync.RWMutex
	menuItemUpdateCache          = make(map[string]updateCache)
	menuItemUpsertCacheMut       sync.RWMutex
	menuItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var menuItemAfterSelectHooks []MenuItemHook

var menuItemBeforeInsertHooks []MenuItemHook
var menuItemAfterInsertHooks []MenuItemHook

var menuItemBeforeUpdateHooks []MenuItemHook
var menuItemAfterUpdateHooks []MenuItemHook

var menuItemBeforeDeleteHooks []MenuItemHook
var menuItemAfterDeleteHooks []MenuItemHook

var menuItemBeforeUpsertHooks []MenuItemHook
var menuItemAfterUpsertHooks []MenuItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MenuItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MenuItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MenuItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MenuItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MenuItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MenuItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MenuItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MenuItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MenuItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMenuItemHook registers your hook function for all future operations.
func AddMenuItemHook(hookPoint boil.HookPoint, menuItemHook MenuItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		menuItemAfterSelectHooks = append(menuItemAfterSelectHooks, menuItemHook)
	case boil.BeforeInsertHook:
		menuItemBeforeInsertHooks = append(menuItemBeforeInsertHooks, menuItemHook)
	case boil.AfterInsertHook:
		menuItemAfterInsertHooks = append(menuItemAfterInsertHooks, menuItemHook)
	case boil.BeforeUpdateHook:
		menuItemBeforeUpdateHooks = append(menuItemBeforeUpdateHooks, menuItemHook)
	case boil.AfterUpdateHook:
		menuItemAfterUpdateHooks = append(menuItemAfterUpdateHooks, menuItemHook)
	case boil.BeforeDeleteHook:
		menuItemBeforeDeleteHooks = append(menuItemBeforeDeleteHooks, menuItemHook)
	case boil.AfterDeleteHook:
		menuItemAfterDeleteHooks = append(menuItemAfterDeleteHooks, menuItemHook)
	case boil.BeforeUpsertHook:
		menuItemBeforeUpsertHooks = append(menuItemBeforeUpsertHooks, menuItemHook)
	case boil.AfterUpsertHook:
		menuItemAfterUpsertHooks = append(menuItemAfterUpsertHooks, menuItemHook)
	}
}

// One returns a single menuItem record from the query.
func (q menuItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MenuItem, error) {
	o := &MenuItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for menu_items")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MenuItem records from the query.
func (q menuItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (MenuItemSlice, error) {
	var o []*MenuItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MenuItem slice")
	}

	if len(menuItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MenuItem records in the query.
func (q menuItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count menu_items rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q menuItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if menu_items exists")
	}

	return count > 0, nil
}

// CategoryidCategory pointed to by the foreign key.
func (o *MenuItem) CategoryidCategory(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Categoryid),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// CollectionidCollection pointed to by the foreign key.
func (o *MenuItem) CollectionidCollection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Collectionid),
	}

	queryMods = append(queryMods, mods...)

	return Collections(queryMods...)
}

// ParentidMenuItem pointed to by the foreign key.
func (o *MenuItem) ParentidMenuItem(mods ...qm.QueryMod) menuItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Parentid),
	}

	queryMods = append(queryMods, mods...)

	return MenuItems(queryMods...)
}

// MenuidMenu pointed to by the foreign key.
func (o *MenuItem) MenuidMenu(mods ...qm.QueryMod) menuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Menuid),
	}

	queryMods = append(queryMods, mods...)

	return Menus(queryMods...)
}

// PageidPage pointed to by the foreign key.
func (o *MenuItem) PageidPage(mods ...qm.QueryMod) pageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Pageid),
	}

	queryMods = append(queryMods, mods...)

	return Pages(queryMods...)
}

// MenuitemidMenuItemTranslations retrieves all the menu_item_translation's MenuItemTranslations with an executor via menuitemid column.
func (o *MenuItem) MenuitemidMenuItemTranslations(mods ...qm.QueryMod) menuItemTranslationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"menu_item_translations\".\"menuitemid\"=?", o.ID),
	)

	return MenuItemTranslations(queryMods...)
}

// ParentidMenuItems retrieves all the menu_item's MenuItems with an executor via parentid column.
func (o *MenuItem) ParentidMenuItems(mods ...qm.QueryMod) menuItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"menu_items\".\"parentid\"=?", o.ID),
	)

	return MenuItems(queryMods...)
}

// LoadCategoryidCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadCategoryidCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		if !queries.IsNil(object.Categoryid) {
			args = append(args, object.Categoryid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Categoryid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Categoryid) {
				args = append(args, obj.Categoryid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CategoryidCategory = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.CategoryidMenuItems = append(foreign.R.CategoryidMenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Categoryid, foreign.ID) {
				local.R.CategoryidCategory = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.CategoryidMenuItems = append(foreign.R.CategoryidMenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionidCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadCollectionidCollection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		if !queries.IsNil(object.Collectionid) {
			args = append(args, object.Collectionid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Collectionid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Collectionid) {
				args = append(args, obj.Collectionid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(collectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionidCollection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.CollectionidMenuItems = append(foreign.R.CollectionidMenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Collectionid, foreign.ID) {
				local.R.CollectionidCollection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.CollectionidMenuItems = append(foreign.R.CollectionidMenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadParentidMenuItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadParentidMenuItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		if !queries.IsNil(object.Parentid) {
			args = append(args, object.Parentid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Parentid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Parentid) {
				args = append(args, obj.Parentid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menu_items`),
		qm.WhereIn(`menu_items.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MenuItem")
	}

	var resultSlice []*MenuItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MenuItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menu_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_items")
	}

	if len(menuItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentidMenuItem = foreign
		if foreign.R == nil {
			foreign.R = &menuItemR{}
		}
		foreign.R.ParentidMenuItems = append(foreign.R.ParentidMenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Parentid, foreign.ID) {
				local.R.ParentidMenuItem = foreign
				if foreign.R == nil {
					foreign.R = &menuItemR{}
				}
				foreign.R.ParentidMenuItems = append(foreign.R.ParentidMenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadMenuidMenu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadMenuidMenu(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		if !queries.IsNil(object.Menuid) {
			args = append(args, object.Menuid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Menuid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Menuid) {
				args = append(args, obj.Menuid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menus`),
		qm.WhereIn(`menus.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Menu")
	}

	var resultSlice []*Menu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menus")
	}

	if len(menuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MenuidMenu = foreign
		if foreign.R == nil {
			foreign.R = &menuR{}
		}
		foreign.R.MenuidMenuItems = append(foreign.R.MenuidMenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Menuid, foreign.ID) {
				local.R.MenuidMenu = foreign
				if foreign.R == nil {
					foreign.R = &menuR{}
				}
				foreign.R.MenuidMenuItems = append(foreign.R.MenuidMenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadPageidPage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemL) LoadPageidPage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		if !queries.IsNil(object.Pageid) {
			args = append(args, object.Pageid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Pageid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Pageid) {
				args = append(args, obj.Pageid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pages`),
		qm.WhereIn(`pages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Page")
	}

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Page")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pages")
	}

	if len(pageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PageidPage = foreign
		if foreign.R == nil {
			foreign.R = &pageR{}
		}
		foreign.R.PageidMenuItems = append(foreign.R.PageidMenuItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Pageid, foreign.ID) {
				local.R.PageidPage = foreign
				if foreign.R == nil {
					foreign.R = &pageR{}
				}
				foreign.R.PageidMenuItems = append(foreign.R.PageidMenuItems, local)
				break
			}
		}
	}

	return nil
}

// LoadMenuitemidMenuItemTranslations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuItemL) LoadMenuitemidMenuItemTranslations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menu_item_translations`),
		qm.WhereIn(`menu_item_translations.menuitemid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_item_translations")
	}

	var resultSlice []*MenuItemTranslation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_item_translations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_item_translations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_item_translations")
	}

	if len(menuItemTranslationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MenuitemidMenuItemTranslations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuItemTranslationR{}
			}
			foreign.R.MenuitemidMenuItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Menuitemid) {
				local.R.MenuitemidMenuItemTranslations = append(local.R.MenuitemidMenuItemTranslations, foreign)
				if foreign.R == nil {
					foreign.R = &menuItemTranslationR{}
				}
				foreign.R.MenuitemidMenuItem = local
				break
			}
		}
	}

	return nil
}

// LoadParentidMenuItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuItemL) LoadParentidMenuItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItem interface{}, mods queries.Applicator) error {
	var slice []*MenuItem
	var object *MenuItem

	if singular {
		var ok bool
		object, ok = maybeMenuItem.(*MenuItem)
		if !ok {
			object = new(MenuItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItem))
			}
		}
	} else {
		s, ok := maybeMenuItem.(*[]*MenuItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItem))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuItemR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menu_items`),
		qm.WhereIn(`menu_items.parentid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_items")
	}

	var resultSlice []*MenuItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_items")
	}

	if len(menuItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentidMenuItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuItemR{}
			}
			foreign.R.ParentidMenuItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Parentid) {
				local.R.ParentidMenuItems = append(local.R.ParentidMenuItems, foreign)
				if foreign.R == nil {
					foreign.R = &menuItemR{}
				}
				foreign.R.ParentidMenuItem = local
				break
			}
		}
	}

	return nil
}

// SetCategoryidCategory of the menuItem to the related item.
// Sets o.R.CategoryidCategory to related.
// Adds o to related.R.CategoryidMenuItems.
func (o *MenuItem) SetCategoryidCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"categoryid"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Categoryid, related.ID)
	if o.R == nil {
		o.R = &menuItemR{
			CategoryidCategory: related,
		}
	} else {
		o.R.CategoryidCategory = related
	}

	if related.R == nil {
		related.R = &categoryR{
			CategoryidMenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.CategoryidMenuItems = append(related.R.CategoryidMenuItems, o)
	}

	return nil
}

// RemoveCategoryidCategory relationship.
// Sets o.R.CategoryidCategory to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuItem) RemoveCategoryidCategory(ctx context.Context, exec boil.ContextExecutor, related *Category) error {
	var err error

	queries.SetScanner(&o.Categoryid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("categoryid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CategoryidCategory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CategoryidMenuItems {
		if queries.Equal(o.Categoryid, ri.Categoryid) {
			continue
		}

		ln := len(related.R.CategoryidMenuItems)
		if ln > 1 && i < ln-1 {
			related.R.CategoryidMenuItems[i] = related.R.CategoryidMenuItems[ln-1]
		}
		related.R.CategoryidMenuItems = related.R.CategoryidMenuItems[:ln-1]
		break
	}
	return nil
}

// SetCollectionidCollection of the menuItem to the related item.
// Sets o.R.CollectionidCollection to related.
// Adds o to related.R.CollectionidMenuItems.
func (o *MenuItem) SetCollectionidCollection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collectionid"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Collectionid, related.ID)
	if o.R == nil {
		o.R = &menuItemR{
			CollectionidCollection: related,
		}
	} else {
		o.R.CollectionidCollection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			CollectionidMenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.CollectionidMenuItems = append(related.R.CollectionidMenuItems, o)
	}

	return nil
}

// RemoveCollectionidCollection relationship.
// Sets o.R.CollectionidCollection to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuItem) RemoveCollectionidCollection(ctx context.Context, exec boil.ContextExecutor, related *Collection) error {
	var err error

	queries.SetScanner(&o.Collectionid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("collectionid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CollectionidCollection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CollectionidMenuItems {
		if queries.Equal(o.Collectionid, ri.Collectionid) {
			continue
		}

		ln := len(related.R.CollectionidMenuItems)
		if ln > 1 && i < ln-1 {
			related.R.CollectionidMenuItems[i] = related.R.CollectionidMenuItems[ln-1]
		}
		related.R.CollectionidMenuItems = related.R.CollectionidMenuItems[:ln-1]
		break
	}
	return nil
}

// SetParentidMenuItem of the menuItem to the related item.
// Sets o.R.ParentidMenuItem to related.
// Adds o to related.R.ParentidMenuItems.
func (o *MenuItem) SetParentidMenuItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MenuItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parentid"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Parentid, related.ID)
	if o.R == nil {
		o.R = &menuItemR{
			ParentidMenuItem: related,
		}
	} else {
		o.R.ParentidMenuItem = related
	}

	if related.R == nil {
		related.R = &menuItemR{
			ParentidMenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.ParentidMenuItems = append(related.R.ParentidMenuItems, o)
	}

	return nil
}

// RemoveParentidMenuItem relationship.
// Sets o.R.ParentidMenuItem to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuItem) RemoveParentidMenuItem(ctx context.Context, exec boil.ContextExecutor, related *MenuItem) error {
	var err error

	queries.SetScanner(&o.Parentid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parentid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ParentidMenuItem = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentidMenuItems {
		if queries.Equal(o.Parentid, ri.Parentid) {
			continue
		}

		ln := len(related.R.ParentidMenuItems)
		if ln > 1 && i < ln-1 {
			related.R.ParentidMenuItems[i] = related.R.ParentidMenuItems[ln-1]
		}
		related.R.ParentidMenuItems = related.R.ParentidMenuItems[:ln-1]
		break
	}
	return nil
}

// SetMenuidMenu of the menuItem to the related item.
// Sets o.R.MenuidMenu to related.
// Adds o to related.R.MenuidMenuItems.
func (o *MenuItem) SetMenuidMenu(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Menu) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"menuid"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Menuid, related.ID)
	if o.R == nil {
		o.R = &menuItemR{
			MenuidMenu: related,
		}
	} else {
		o.R.MenuidMenu = related
	}

	if related.R == nil {
		related.R = &menuR{
			MenuidMenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.MenuidMenuItems = append(related.R.MenuidMenuItems, o)
	}

	return nil
}

// RemoveMenuidMenu relationship.
// Sets o.R.MenuidMenu to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuItem) RemoveMenuidMenu(ctx context.Context, exec boil.ContextExecutor, related *Menu) error {
	var err error

	queries.SetScanner(&o.Menuid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("menuid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MenuidMenu = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MenuidMenuItems {
		if queries.Equal(o.Menuid, ri.Menuid) {
			continue
		}

		ln := len(related.R.MenuidMenuItems)
		if ln > 1 && i < ln-1 {
			related.R.MenuidMenuItems[i] = related.R.MenuidMenuItems[ln-1]
		}
		related.R.MenuidMenuItems = related.R.MenuidMenuItems[:ln-1]
		break
	}
	return nil
}

// SetPageidPage of the menuItem to the related item.
// Sets o.R.PageidPage to related.
// Adds o to related.R.PageidMenuItems.
func (o *MenuItem) SetPageidPage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Page) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pageid"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Pageid, related.ID)
	if o.R == nil {
		o.R = &menuItemR{
			PageidPage: related,
		}
	} else {
		o.R.PageidPage = related
	}

	if related.R == nil {
		related.R = &pageR{
			PageidMenuItems: MenuItemSlice{o},
		}
	} else {
		related.R.PageidMenuItems = append(related.R.PageidMenuItems, o)
	}

	return nil
}

// RemovePageidPage relationship.
// Sets o.R.PageidPage to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuItem) RemovePageidPage(ctx context.Context, exec boil.ContextExecutor, related *Page) error {
	var err error

	queries.SetScanner(&o.Pageid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("pageid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PageidPage = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PageidMenuItems {
		if queries.Equal(o.Pageid, ri.Pageid) {
			continue
		}

		ln := len(related.R.PageidMenuItems)
		if ln > 1 && i < ln-1 {
			related.R.PageidMenuItems[i] = related.R.PageidMenuItems[ln-1]
		}
		related.R.PageidMenuItems = related.R.PageidMenuItems[:ln-1]
		break
	}
	return nil
}

// AddMenuitemidMenuItemTranslations adds the given related objects to the existing relationships
// of the menu_item, optionally inserting them as new records.
// Appends related to o.R.MenuitemidMenuItemTranslations.
// Sets related.R.MenuitemidMenuItem appropriately.
func (o *MenuItem) AddMenuitemidMenuItemTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItemTranslation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Menuitemid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"menu_item_translations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"menuitemid"}),
				strmangle.WhereClause("\"", "\"", 2, menuItemTranslationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Menuitemid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &menuItemR{
			MenuitemidMenuItemTranslations: related,
		}
	} else {
		o.R.MenuitemidMenuItemTranslations = append(o.R.MenuitemidMenuItemTranslations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuItemTranslationR{
				MenuitemidMenuItem: o,
			}
		} else {
			rel.R.MenuitemidMenuItem = o
		}
	}
	return nil
}

// SetMenuitemidMenuItemTranslations removes all previously related items of the
// menu_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MenuitemidMenuItem's MenuitemidMenuItemTranslations accordingly.
// Replaces o.R.MenuitemidMenuItemTranslations with related.
// Sets related.R.MenuitemidMenuItem's MenuitemidMenuItemTranslations accordingly.
func (o *MenuItem) SetMenuitemidMenuItemTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItemTranslation) error {
	query := "update \"menu_item_translations\" set \"menuitemid\" = null where \"menuitemid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MenuitemidMenuItemTranslations {
			queries.SetScanner(&rel.Menuitemid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MenuitemidMenuItem = nil
		}
		o.R.MenuitemidMenuItemTranslations = nil
	}

	return o.AddMenuitemidMenuItemTranslations(ctx, exec, insert, related...)
}

// RemoveMenuitemidMenuItemTranslations relationships from objects passed in.
// Removes related items from R.MenuitemidMenuItemTranslations (uses pointer comparison, removal does not keep order)
// Sets related.R.MenuitemidMenuItem.
func (o *MenuItem) RemoveMenuitemidMenuItemTranslations(ctx context.Context, exec boil.ContextExecutor, related ...*MenuItemTranslation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Menuitemid, nil)
		if rel.R != nil {
			rel.R.MenuitemidMenuItem = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("menuitemid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MenuitemidMenuItemTranslations {
			if rel != ri {
				continue
			}

			ln := len(o.R.MenuitemidMenuItemTranslations)
			if ln > 1 && i < ln-1 {
				o.R.MenuitemidMenuItemTranslations[i] = o.R.MenuitemidMenuItemTranslations[ln-1]
			}
			o.R.MenuitemidMenuItemTranslations = o.R.MenuitemidMenuItemTranslations[:ln-1]
			break
		}
	}

	return nil
}

// AddParentidMenuItems adds the given related objects to the existing relationships
// of the menu_item, optionally inserting them as new records.
// Appends related to o.R.ParentidMenuItems.
// Sets related.R.ParentidMenuItem appropriately.
func (o *MenuItem) AddParentidMenuItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Parentid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"menu_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parentid"}),
				strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Parentid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &menuItemR{
			ParentidMenuItems: related,
		}
	} else {
		o.R.ParentidMenuItems = append(o.R.ParentidMenuItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuItemR{
				ParentidMenuItem: o,
			}
		} else {
			rel.R.ParentidMenuItem = o
		}
	}
	return nil
}

// SetParentidMenuItems removes all previously related items of the
// menu_item replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentidMenuItem's ParentidMenuItems accordingly.
// Replaces o.R.ParentidMenuItems with related.
// Sets related.R.ParentidMenuItem's ParentidMenuItems accordingly.
func (o *MenuItem) SetParentidMenuItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItem) error {
	query := "update \"menu_items\" set \"parentid\" = null where \"parentid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentidMenuItems {
			queries.SetScanner(&rel.Parentid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentidMenuItem = nil
		}
		o.R.ParentidMenuItems = nil
	}

	return o.AddParentidMenuItems(ctx, exec, insert, related...)
}

// RemoveParentidMenuItems relationships from objects passed in.
// Removes related items from R.ParentidMenuItems (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentidMenuItem.
func (o *MenuItem) RemoveParentidMenuItems(ctx context.Context, exec boil.ContextExecutor, related ...*MenuItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Parentid, nil)
		if rel.R != nil {
			rel.R.ParentidMenuItem = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parentid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentidMenuItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentidMenuItems)
			if ln > 1 && i < ln-1 {
				o.R.ParentidMenuItems[i] = o.R.ParentidMenuItems[ln-1]
			}
			o.R.ParentidMenuItems = o.R.ParentidMenuItems[:ln-1]
			break
		}
	}

	return nil
}

// MenuItems retrieves all the records using an executor.
func MenuItems(mods ...qm.QueryMod) menuItemQuery {
	mods = append(mods, qm.From("\"menu_items\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"menu_items\".*"})
	}

	return menuItemQuery{q}
}

// FindMenuItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenuItem(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MenuItem, error) {
	menuItemObj := &MenuItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"menu_items\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, menuItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from menu_items")
	}

	if err = menuItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return menuItemObj, err
	}

	return menuItemObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MenuItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menu_items provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuItemInsertCacheMut.RLock()
	cache, cached := menuItemInsertCache[key]
	menuItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuItemAllColumns,
			menuItemColumnsWithDefault,
			menuItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuItemType, menuItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"menu_items\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"menu_items\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into menu_items")
	}

	if !cached {
		menuItemInsertCacheMut.Lock()
		menuItemInsertCache[key] = cache
		menuItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MenuItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MenuItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	menuItemUpdateCacheMut.RLock()
	cache, cached := menuItemUpdateCache[key]
	menuItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuItemAllColumns,
			menuItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update menu_items, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"menu_items\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, menuItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, append(wl, menuItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update menu_items row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for menu_items")
	}

	if !cached {
		menuItemUpdateCacheMut.Lock()
		menuItemUpdateCache[key] = cache
		menuItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q menuItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for menu_items")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"menu_items\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, menuItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in menuItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all menuItem")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MenuItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menu_items provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuItemUpsertCacheMut.RLock()
	cache, cached := menuItemUpsertCache[key]
	menuItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			menuItemAllColumns,
			menuItemColumnsWithDefault,
			menuItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuItemAllColumns,
			menuItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert menu_items, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(menuItemPrimaryKeyColumns))
			copy(conflict, menuItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"menu_items\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(menuItemType, menuItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuItemType, menuItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert menu_items")
	}

	if !cached {
		menuItemUpsertCacheMut.Lock()
		menuItemUpsertCache[key] = cache
		menuItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MenuItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MenuItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MenuItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuItemPrimaryKeyMapping)
	sql := "DELETE FROM \"menu_items\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for menu_items")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q menuItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no menuItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menu_items")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menu_items")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(menuItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"menu_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menuItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menu_items")
	}

	if len(menuItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MenuItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMenuItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"menu_items\".* FROM \"menu_items\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MenuItemSlice")
	}

	*o = slice

	return nil
}

// MenuItemExists checks if the MenuItem row exists.
func MenuItemExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"menu_items\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if menu_items exists")
	}

	return exists, nil
}

// Exists checks if the MenuItem row exists.
func (o *MenuItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MenuItemExists(ctx, exec, o.ID)
}
