// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Allocation is an object representing the database table.
type Allocation struct {
	ID                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Createat          null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Orderlineid       null.String `boil:"orderlineid" json:"orderlineid,omitempty" toml:"orderlineid" yaml:"orderlineid,omitempty"`
	Stockid           null.String `boil:"stockid" json:"stockid,omitempty" toml:"stockid" yaml:"stockid,omitempty"`
	Quantityallocated null.Int    `boil:"quantityallocated" json:"quantityallocated,omitempty" toml:"quantityallocated" yaml:"quantityallocated,omitempty"`

	R *allocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L allocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AllocationColumns = struct {
	ID                string
	Createat          string
	Orderlineid       string
	Stockid           string
	Quantityallocated string
}{
	ID:                "id",
	Createat:          "createat",
	Orderlineid:       "orderlineid",
	Stockid:           "stockid",
	Quantityallocated: "quantityallocated",
}

var AllocationTableColumns = struct {
	ID                string
	Createat          string
	Orderlineid       string
	Stockid           string
	Quantityallocated string
}{
	ID:                "allocations.id",
	Createat:          "allocations.createat",
	Orderlineid:       "allocations.orderlineid",
	Stockid:           "allocations.stockid",
	Quantityallocated: "allocations.quantityallocated",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AllocationWhere = struct {
	ID                whereHelperstring
	Createat          whereHelpernull_Int64
	Orderlineid       whereHelpernull_String
	Stockid           whereHelpernull_String
	Quantityallocated whereHelpernull_Int
}{
	ID:                whereHelperstring{field: "\"allocations\".\"id\""},
	Createat:          whereHelpernull_Int64{field: "\"allocations\".\"createat\""},
	Orderlineid:       whereHelpernull_String{field: "\"allocations\".\"orderlineid\""},
	Stockid:           whereHelpernull_String{field: "\"allocations\".\"stockid\""},
	Quantityallocated: whereHelpernull_Int{field: "\"allocations\".\"quantityallocated\""},
}

// AllocationRels is where relationship names are stored.
var AllocationRels = struct {
	OrderlineidOrderLine string
	StockidStock         string
}{
	OrderlineidOrderLine: "OrderlineidOrderLine",
	StockidStock:         "StockidStock",
}

// allocationR is where relationships are stored.
type allocationR struct {
	OrderlineidOrderLine *OrderLine `boil:"OrderlineidOrderLine" json:"OrderlineidOrderLine" toml:"OrderlineidOrderLine" yaml:"OrderlineidOrderLine"`
	StockidStock         *Stock     `boil:"StockidStock" json:"StockidStock" toml:"StockidStock" yaml:"StockidStock"`
}

// NewStruct creates a new relationship struct
func (*allocationR) NewStruct() *allocationR {
	return &allocationR{}
}

func (r *allocationR) GetOrderlineidOrderLine() *OrderLine {
	if r == nil {
		return nil
	}
	return r.OrderlineidOrderLine
}

func (r *allocationR) GetStockidStock() *Stock {
	if r == nil {
		return nil
	}
	return r.StockidStock
}

// allocationL is where Load methods for each relationship are stored.
type allocationL struct{}

var (
	allocationAllColumns            = []string{"id", "createat", "orderlineid", "stockid", "quantityallocated"}
	allocationColumnsWithoutDefault = []string{"id"}
	allocationColumnsWithDefault    = []string{"createat", "orderlineid", "stockid", "quantityallocated"}
	allocationPrimaryKeyColumns     = []string{"id"}
	allocationGeneratedColumns      = []string{}
)

type (
	// AllocationSlice is an alias for a slice of pointers to Allocation.
	// This should almost always be used instead of []Allocation.
	AllocationSlice []*Allocation
	// AllocationHook is the signature for custom Allocation hook methods
	AllocationHook func(context.Context, boil.ContextExecutor, *Allocation) error

	allocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	allocationType                 = reflect.TypeOf(&Allocation{})
	allocationMapping              = queries.MakeStructMapping(allocationType)
	allocationPrimaryKeyMapping, _ = queries.BindMapping(allocationType, allocationMapping, allocationPrimaryKeyColumns)
	allocationInsertCacheMut       sync.RWMutex
	allocationInsertCache          = make(map[string]insertCache)
	allocationUpdateCacheMut       sync.RWMutex
	allocationUpdateCache          = make(map[string]updateCache)
	allocationUpsertCacheMut       sync.RWMutex
	allocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var allocationAfterSelectHooks []AllocationHook

var allocationBeforeInsertHooks []AllocationHook
var allocationAfterInsertHooks []AllocationHook

var allocationBeforeUpdateHooks []AllocationHook
var allocationAfterUpdateHooks []AllocationHook

var allocationBeforeDeleteHooks []AllocationHook
var allocationAfterDeleteHooks []AllocationHook

var allocationBeforeUpsertHooks []AllocationHook
var allocationAfterUpsertHooks []AllocationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Allocation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Allocation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Allocation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Allocation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Allocation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Allocation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Allocation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Allocation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Allocation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range allocationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAllocationHook registers your hook function for all future operations.
func AddAllocationHook(hookPoint boil.HookPoint, allocationHook AllocationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		allocationAfterSelectHooks = append(allocationAfterSelectHooks, allocationHook)
	case boil.BeforeInsertHook:
		allocationBeforeInsertHooks = append(allocationBeforeInsertHooks, allocationHook)
	case boil.AfterInsertHook:
		allocationAfterInsertHooks = append(allocationAfterInsertHooks, allocationHook)
	case boil.BeforeUpdateHook:
		allocationBeforeUpdateHooks = append(allocationBeforeUpdateHooks, allocationHook)
	case boil.AfterUpdateHook:
		allocationAfterUpdateHooks = append(allocationAfterUpdateHooks, allocationHook)
	case boil.BeforeDeleteHook:
		allocationBeforeDeleteHooks = append(allocationBeforeDeleteHooks, allocationHook)
	case boil.AfterDeleteHook:
		allocationAfterDeleteHooks = append(allocationAfterDeleteHooks, allocationHook)
	case boil.BeforeUpsertHook:
		allocationBeforeUpsertHooks = append(allocationBeforeUpsertHooks, allocationHook)
	case boil.AfterUpsertHook:
		allocationAfterUpsertHooks = append(allocationAfterUpsertHooks, allocationHook)
	}
}

// One returns a single allocation record from the query.
func (q allocationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Allocation, error) {
	o := &Allocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for allocations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Allocation records from the query.
func (q allocationQuery) All(ctx context.Context, exec boil.ContextExecutor) (AllocationSlice, error) {
	var o []*Allocation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Allocation slice")
	}

	if len(allocationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Allocation records in the query.
func (q allocationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count allocations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q allocationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if allocations exists")
	}

	return count > 0, nil
}

// OrderlineidOrderLine pointed to by the foreign key.
func (o *Allocation) OrderlineidOrderLine(mods ...qm.QueryMod) orderLineQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Orderlineid),
	}

	queryMods = append(queryMods, mods...)

	return OrderLines(queryMods...)
}

// StockidStock pointed to by the foreign key.
func (o *Allocation) StockidStock(mods ...qm.QueryMod) stockQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Stockid),
	}

	queryMods = append(queryMods, mods...)

	return Stocks(queryMods...)
}

// LoadOrderlineidOrderLine allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (allocationL) LoadOrderlineidOrderLine(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAllocation interface{}, mods queries.Applicator) error {
	var slice []*Allocation
	var object *Allocation

	if singular {
		var ok bool
		object, ok = maybeAllocation.(*Allocation)
		if !ok {
			object = new(Allocation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAllocation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAllocation))
			}
		}
	} else {
		s, ok := maybeAllocation.(*[]*Allocation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAllocation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAllocation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &allocationR{}
		}
		if !queries.IsNil(object.Orderlineid) {
			args = append(args, object.Orderlineid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &allocationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Orderlineid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Orderlineid) {
				args = append(args, obj.Orderlineid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_lines`),
		qm.WhereIn(`order_lines.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load OrderLine")
	}

	var resultSlice []*OrderLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice OrderLine")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for order_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_lines")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderlineidOrderLine = foreign
		if foreign.R == nil {
			foreign.R = &orderLineR{}
		}
		foreign.R.OrderlineidAllocations = append(foreign.R.OrderlineidAllocations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Orderlineid, foreign.ID) {
				local.R.OrderlineidOrderLine = foreign
				if foreign.R == nil {
					foreign.R = &orderLineR{}
				}
				foreign.R.OrderlineidAllocations = append(foreign.R.OrderlineidAllocations, local)
				break
			}
		}
	}

	return nil
}

// LoadStockidStock allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (allocationL) LoadStockidStock(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAllocation interface{}, mods queries.Applicator) error {
	var slice []*Allocation
	var object *Allocation

	if singular {
		var ok bool
		object, ok = maybeAllocation.(*Allocation)
		if !ok {
			object = new(Allocation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAllocation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAllocation))
			}
		}
	} else {
		s, ok := maybeAllocation.(*[]*Allocation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAllocation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAllocation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &allocationR{}
		}
		if !queries.IsNil(object.Stockid) {
			args = append(args, object.Stockid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &allocationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Stockid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Stockid) {
				args = append(args, obj.Stockid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stocks`),
		qm.WhereIn(`stocks.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Stock")
	}

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Stock")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for stocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stocks")
	}

	if len(stockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StockidStock = foreign
		if foreign.R == nil {
			foreign.R = &stockR{}
		}
		foreign.R.StockidAllocations = append(foreign.R.StockidAllocations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Stockid, foreign.ID) {
				local.R.StockidStock = foreign
				if foreign.R == nil {
					foreign.R = &stockR{}
				}
				foreign.R.StockidAllocations = append(foreign.R.StockidAllocations, local)
				break
			}
		}
	}

	return nil
}

// SetOrderlineidOrderLine of the allocation to the related item.
// Sets o.R.OrderlineidOrderLine to related.
// Adds o to related.R.OrderlineidAllocations.
func (o *Allocation) SetOrderlineidOrderLine(ctx context.Context, exec boil.ContextExecutor, insert bool, related *OrderLine) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"allocations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"orderlineid"}),
		strmangle.WhereClause("\"", "\"", 2, allocationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Orderlineid, related.ID)
	if o.R == nil {
		o.R = &allocationR{
			OrderlineidOrderLine: related,
		}
	} else {
		o.R.OrderlineidOrderLine = related
	}

	if related.R == nil {
		related.R = &orderLineR{
			OrderlineidAllocations: AllocationSlice{o},
		}
	} else {
		related.R.OrderlineidAllocations = append(related.R.OrderlineidAllocations, o)
	}

	return nil
}

// RemoveOrderlineidOrderLine relationship.
// Sets o.R.OrderlineidOrderLine to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Allocation) RemoveOrderlineidOrderLine(ctx context.Context, exec boil.ContextExecutor, related *OrderLine) error {
	var err error

	queries.SetScanner(&o.Orderlineid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("orderlineid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderlineidOrderLine = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderlineidAllocations {
		if queries.Equal(o.Orderlineid, ri.Orderlineid) {
			continue
		}

		ln := len(related.R.OrderlineidAllocations)
		if ln > 1 && i < ln-1 {
			related.R.OrderlineidAllocations[i] = related.R.OrderlineidAllocations[ln-1]
		}
		related.R.OrderlineidAllocations = related.R.OrderlineidAllocations[:ln-1]
		break
	}
	return nil
}

// SetStockidStock of the allocation to the related item.
// Sets o.R.StockidStock to related.
// Adds o to related.R.StockidAllocations.
func (o *Allocation) SetStockidStock(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Stock) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"allocations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"stockid"}),
		strmangle.WhereClause("\"", "\"", 2, allocationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Stockid, related.ID)
	if o.R == nil {
		o.R = &allocationR{
			StockidStock: related,
		}
	} else {
		o.R.StockidStock = related
	}

	if related.R == nil {
		related.R = &stockR{
			StockidAllocations: AllocationSlice{o},
		}
	} else {
		related.R.StockidAllocations = append(related.R.StockidAllocations, o)
	}

	return nil
}

// RemoveStockidStock relationship.
// Sets o.R.StockidStock to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Allocation) RemoveStockidStock(ctx context.Context, exec boil.ContextExecutor, related *Stock) error {
	var err error

	queries.SetScanner(&o.Stockid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("stockid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.StockidStock = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StockidAllocations {
		if queries.Equal(o.Stockid, ri.Stockid) {
			continue
		}

		ln := len(related.R.StockidAllocations)
		if ln > 1 && i < ln-1 {
			related.R.StockidAllocations[i] = related.R.StockidAllocations[ln-1]
		}
		related.R.StockidAllocations = related.R.StockidAllocations[:ln-1]
		break
	}
	return nil
}

// Allocations retrieves all the records using an executor.
func Allocations(mods ...qm.QueryMod) allocationQuery {
	mods = append(mods, qm.From("\"allocations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"allocations\".*"})
	}

	return allocationQuery{q}
}

// FindAllocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAllocation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Allocation, error) {
	allocationObj := &Allocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"allocations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, allocationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from allocations")
	}

	if err = allocationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return allocationObj, err
	}

	return allocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Allocation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no allocations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(allocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	allocationInsertCacheMut.RLock()
	cache, cached := allocationInsertCache[key]
	allocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			allocationAllColumns,
			allocationColumnsWithDefault,
			allocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(allocationType, allocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(allocationType, allocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"allocations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"allocations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into allocations")
	}

	if !cached {
		allocationInsertCacheMut.Lock()
		allocationInsertCache[key] = cache
		allocationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Allocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Allocation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	allocationUpdateCacheMut.RLock()
	cache, cached := allocationUpdateCache[key]
	allocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			allocationAllColumns,
			allocationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update allocations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"allocations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, allocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(allocationType, allocationMapping, append(wl, allocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update allocations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for allocations")
	}

	if !cached {
		allocationUpdateCacheMut.Lock()
		allocationUpdateCache[key] = cache
		allocationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q allocationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for allocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for allocations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AllocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), allocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"allocations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, allocationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in allocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all allocation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Allocation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no allocations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(allocationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	allocationUpsertCacheMut.RLock()
	cache, cached := allocationUpsertCache[key]
	allocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			allocationAllColumns,
			allocationColumnsWithDefault,
			allocationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			allocationAllColumns,
			allocationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert allocations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(allocationPrimaryKeyColumns))
			copy(conflict, allocationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"allocations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(allocationType, allocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(allocationType, allocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert allocations")
	}

	if !cached {
		allocationUpsertCacheMut.Lock()
		allocationUpsertCache[key] = cache
		allocationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Allocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Allocation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Allocation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), allocationPrimaryKeyMapping)
	sql := "DELETE FROM \"allocations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from allocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for allocations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q allocationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no allocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from allocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for allocations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AllocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(allocationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), allocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"allocations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, allocationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from allocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for allocations")
	}

	if len(allocationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Allocation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAllocation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AllocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AllocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), allocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"allocations\".* FROM \"allocations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, allocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AllocationSlice")
	}

	*o = slice

	return nil
}

// AllocationExists checks if the Allocation row exists.
func AllocationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"allocations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if allocations exists")
	}

	return exists, nil
}

// Exists checks if the Allocation row exists.
func (o *Allocation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AllocationExists(ctx, exec, o.ID)
}
