// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInvoices(t *testing.T) {
	t.Parallel()

	query := Invoices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInvoicesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invoices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoicesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Invoices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invoices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoicesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Invoices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoicesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InvoiceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Invoice exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InvoiceExists to return true, but got false.")
	}
}

func testInvoicesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	invoiceFound, err := FindInvoice(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if invoiceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInvoicesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Invoices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInvoicesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Invoices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInvoicesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoiceOne := &Invoice{}
	invoiceTwo := &Invoice{}
	if err = randomize.Struct(seed, invoiceOne, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceTwo, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Invoices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInvoicesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	invoiceOne := &Invoice{}
	invoiceTwo := &Invoice{}
	if err = randomize.Struct(seed, invoiceOne, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceTwo, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invoices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func invoiceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func invoiceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
	*o = Invoice{}
	return nil
}

func testInvoicesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Invoice{}
	o := &Invoice{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, invoiceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Invoice object: %s", err)
	}

	AddInvoiceHook(boil.BeforeInsertHook, invoiceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	invoiceBeforeInsertHooks = []InvoiceHook{}

	AddInvoiceHook(boil.AfterInsertHook, invoiceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	invoiceAfterInsertHooks = []InvoiceHook{}

	AddInvoiceHook(boil.AfterSelectHook, invoiceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	invoiceAfterSelectHooks = []InvoiceHook{}

	AddInvoiceHook(boil.BeforeUpdateHook, invoiceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceBeforeUpdateHooks = []InvoiceHook{}

	AddInvoiceHook(boil.AfterUpdateHook, invoiceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceAfterUpdateHooks = []InvoiceHook{}

	AddInvoiceHook(boil.BeforeDeleteHook, invoiceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceBeforeDeleteHooks = []InvoiceHook{}

	AddInvoiceHook(boil.AfterDeleteHook, invoiceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceAfterDeleteHooks = []InvoiceHook{}

	AddInvoiceHook(boil.BeforeUpsertHook, invoiceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceBeforeUpsertHooks = []InvoiceHook{}

	AddInvoiceHook(boil.AfterUpsertHook, invoiceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceAfterUpsertHooks = []InvoiceHook{}
}

func testInvoicesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invoices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoicesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(invoiceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Invoices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceToManyInvoiceEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invoice
	var b, c InvoiceEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, invoiceEventDBTypes, false, invoiceEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, invoiceEventDBTypes, false, invoiceEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.InvoiceID, a.ID)
	queries.Assign(&c.InvoiceID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.InvoiceEvents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.InvoiceID, b.InvoiceID) {
			bFound = true
		}
		if queries.Equal(v.InvoiceID, c.InvoiceID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := InvoiceSlice{&a}
	if err = a.L.LoadInvoiceEvents(ctx, tx, false, (*[]*Invoice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InvoiceEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.InvoiceEvents = nil
	if err = a.L.LoadInvoiceEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.InvoiceEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testInvoiceToManyAddOpInvoiceEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invoice
	var b, c, d, e InvoiceEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*InvoiceEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*InvoiceEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddInvoiceEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.InvoiceID) {
			t.Error("foreign key was wrong value", a.ID, first.InvoiceID)
		}
		if !queries.Equal(a.ID, second.InvoiceID) {
			t.Error("foreign key was wrong value", a.ID, second.InvoiceID)
		}

		if first.R.Invoice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Invoice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.InvoiceEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.InvoiceEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.InvoiceEvents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testInvoiceToManySetOpInvoiceEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invoice
	var b, c, d, e InvoiceEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*InvoiceEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetInvoiceEvents(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetInvoiceEvents(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.InvoiceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.InvoiceID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.InvoiceID) {
		t.Error("foreign key was wrong value", a.ID, d.InvoiceID)
	}
	if !queries.Equal(a.ID, e.InvoiceID) {
		t.Error("foreign key was wrong value", a.ID, e.InvoiceID)
	}

	if b.R.Invoice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Invoice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Invoice != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Invoice != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.InvoiceEvents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.InvoiceEvents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testInvoiceToManyRemoveOpInvoiceEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invoice
	var b, c, d, e InvoiceEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*InvoiceEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddInvoiceEvents(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveInvoiceEvents(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.InvoiceID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.InvoiceID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Invoice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Invoice != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Invoice != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Invoice != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.InvoiceEvents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.InvoiceEvents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.InvoiceEvents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testInvoiceToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Invoice
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Order) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := InvoiceSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*Invoice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testInvoiceToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invoice
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Invoices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testInvoiceToOneRemoveOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Invoice
	var b Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Order().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Order != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrderID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Invoices) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testInvoicesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoicesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoicesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Invoices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	invoiceDBTypes = map[string]string{`ID`: `uuid`, `OrderID`: `uuid`, `Number`: `character varying`, `CreatedAt`: `bigint`, `ExternalURL`: `character varying`, `Status`: `character varying`, `Message`: `character varying`, `UpdatedAt`: `bigint`, `InvoiceFile`: `uuid`, `Metadata`: `jsonb`, `PrivateMetadata`: `jsonb`}
	_              = bytes.MinRead
)

func testInvoicesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(invoicePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(invoiceAllColumns) == len(invoicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invoices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInvoicesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(invoiceAllColumns) == len(invoicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Invoice{}
	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Invoices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceDBTypes, true, invoicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(invoiceAllColumns, invoicePrimaryKeyColumns) {
		fields = invoiceAllColumns
	} else {
		fields = strmangle.SetComplement(
			invoiceAllColumns,
			invoicePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InvoiceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInvoicesUpsert(t *testing.T) {
	t.Parallel()

	if len(invoiceAllColumns) == len(invoicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Invoice{}
	if err = randomize.Struct(seed, &o, invoiceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Invoice: %s", err)
	}

	count, err := Invoices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, invoiceDBTypes, false, invoicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Invoice: %s", err)
	}

	count, err = Invoices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
