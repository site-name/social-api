// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVouchers(t *testing.T) {
	t.Parallel()

	query := Vouchers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVouchersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vouchers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVouchersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Vouchers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vouchers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVouchersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vouchers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVouchersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VoucherExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Voucher exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VoucherExists to return true, but got false.")
	}
}

func testVouchersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	voucherFound, err := FindVoucher(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if voucherFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVouchersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Vouchers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVouchersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Vouchers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVouchersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	voucherOne := &Voucher{}
	voucherTwo := &Voucher{}
	if err = randomize.Struct(seed, voucherOne, voucherDBTypes, false, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherTwo, voucherDBTypes, false, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Vouchers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVouchersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	voucherOne := &Voucher{}
	voucherTwo := &Voucher{}
	if err = randomize.Struct(seed, voucherOne, voucherDBTypes, false, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherTwo, voucherDBTypes, false, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vouchers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func voucherBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
	*o = Voucher{}
	return nil
}

func voucherAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
	*o = Voucher{}
	return nil
}

func voucherAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
	*o = Voucher{}
	return nil
}

func voucherBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
	*o = Voucher{}
	return nil
}

func voucherAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
	*o = Voucher{}
	return nil
}

func voucherBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
	*o = Voucher{}
	return nil
}

func voucherAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
	*o = Voucher{}
	return nil
}

func voucherBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
	*o = Voucher{}
	return nil
}

func voucherAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
	*o = Voucher{}
	return nil
}

func testVouchersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Voucher{}
	o := &Voucher{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, voucherDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Voucher object: %s", err)
	}

	AddVoucherHook(boil.BeforeInsertHook, voucherBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	voucherBeforeInsertHooks = []VoucherHook{}

	AddVoucherHook(boil.AfterInsertHook, voucherAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	voucherAfterInsertHooks = []VoucherHook{}

	AddVoucherHook(boil.AfterSelectHook, voucherAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	voucherAfterSelectHooks = []VoucherHook{}

	AddVoucherHook(boil.BeforeUpdateHook, voucherBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	voucherBeforeUpdateHooks = []VoucherHook{}

	AddVoucherHook(boil.AfterUpdateHook, voucherAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	voucherAfterUpdateHooks = []VoucherHook{}

	AddVoucherHook(boil.BeforeDeleteHook, voucherBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	voucherBeforeDeleteHooks = []VoucherHook{}

	AddVoucherHook(boil.AfterDeleteHook, voucherAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	voucherAfterDeleteHooks = []VoucherHook{}

	AddVoucherHook(boil.BeforeUpsertHook, voucherBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	voucherBeforeUpsertHooks = []VoucherHook{}

	AddVoucherHook(boil.AfterUpsertHook, voucherAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	voucherAfterUpsertHooks = []VoucherHook{}
}

func testVouchersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vouchers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVouchersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(voucherColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Vouchers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherToManyVoucheridOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Voucherid, a.ID)
	queries.Assign(&c.Voucherid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VoucheridOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Voucherid, b.Voucherid) {
			bFound = true
		}
		if queries.Equal(v.Voucherid, c.Voucherid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VoucherSlice{&a}
	if err = a.L.LoadVoucheridOrders(ctx, tx, false, (*[]*Voucher)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VoucheridOrders = nil
	if err = a.L.LoadVoucheridOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVoucherToManyVoucheridVoucherCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c VoucherCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voucherCategoryDBTypes, false, voucherCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherCategoryDBTypes, false, voucherCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Voucherid, a.ID)
	queries.Assign(&c.Voucherid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VoucheridVoucherCategories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Voucherid, b.Voucherid) {
			bFound = true
		}
		if queries.Equal(v.Voucherid, c.Voucherid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VoucherSlice{&a}
	if err = a.L.LoadVoucheridVoucherCategories(ctx, tx, false, (*[]*Voucher)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VoucheridVoucherCategories = nil
	if err = a.L.LoadVoucheridVoucherCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVoucherToManyVoucheridVoucherChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c VoucherChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voucherChannelListingDBTypes, false, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherChannelListingDBTypes, false, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Voucherid = a.ID
	c.Voucherid = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VoucheridVoucherChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Voucherid == b.Voucherid {
			bFound = true
		}
		if v.Voucherid == c.Voucherid {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VoucherSlice{&a}
	if err = a.L.LoadVoucheridVoucherChannelListings(ctx, tx, false, (*[]*Voucher)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VoucheridVoucherChannelListings = nil
	if err = a.L.LoadVoucheridVoucherChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVoucherToManyVoucheridVoucherCollections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c VoucherCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voucherCollectionDBTypes, false, voucherCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherCollectionDBTypes, false, voucherCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Voucherid, a.ID)
	queries.Assign(&c.Voucherid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VoucheridVoucherCollections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Voucherid, b.Voucherid) {
			bFound = true
		}
		if queries.Equal(v.Voucherid, c.Voucherid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VoucherSlice{&a}
	if err = a.L.LoadVoucheridVoucherCollections(ctx, tx, false, (*[]*Voucher)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VoucheridVoucherCollections = nil
	if err = a.L.LoadVoucheridVoucherCollections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVoucherToManyVoucheridVoucherCustomers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c VoucherCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voucherCustomerDBTypes, false, voucherCustomerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherCustomerDBTypes, false, voucherCustomerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Voucherid, a.ID)
	queries.Assign(&c.Voucherid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VoucheridVoucherCustomers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Voucherid, b.Voucherid) {
			bFound = true
		}
		if queries.Equal(v.Voucherid, c.Voucherid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VoucherSlice{&a}
	if err = a.L.LoadVoucheridVoucherCustomers(ctx, tx, false, (*[]*Voucher)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherCustomers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VoucheridVoucherCustomers = nil
	if err = a.L.LoadVoucheridVoucherCustomers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherCustomers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVoucherToManyVoucheridVoucherProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c VoucherProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voucherProductDBTypes, false, voucherProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherProductDBTypes, false, voucherProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Voucherid, a.ID)
	queries.Assign(&c.Voucherid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VoucheridVoucherProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Voucherid, b.Voucherid) {
			bFound = true
		}
		if queries.Equal(v.Voucherid, c.Voucherid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VoucherSlice{&a}
	if err = a.L.LoadVoucheridVoucherProducts(ctx, tx, false, (*[]*Voucher)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VoucheridVoucherProducts = nil
	if err = a.L.LoadVoucheridVoucherProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVoucherToManyVoucheridVoucherTranslations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c VoucherTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voucherTranslationDBTypes, false, voucherTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherTranslationDBTypes, false, voucherTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Voucherid, a.ID)
	queries.Assign(&c.Voucherid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VoucheridVoucherTranslations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Voucherid, b.Voucherid) {
			bFound = true
		}
		if queries.Equal(v.Voucherid, c.Voucherid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VoucherSlice{&a}
	if err = a.L.LoadVoucheridVoucherTranslations(ctx, tx, false, (*[]*Voucher)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VoucheridVoucherTranslations = nil
	if err = a.L.LoadVoucheridVoucherTranslations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucheridVoucherTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testVoucherToManyAddOpVoucheridOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVoucheridOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, first.Voucherid)
		}
		if !queries.Equal(a.ID, second.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, second.Voucherid)
		}

		if first.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VoucheridOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VoucheridOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VoucheridOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testVoucherToManySetOpVoucheridOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVoucheridOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVoucheridOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, d.Voucherid)
	}
	if !queries.Equal(a.ID, e.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, e.Voucherid)
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VoucheridOrders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VoucheridOrders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testVoucherToManyRemoveOpVoucheridOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVoucheridOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVoucheridOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VoucheridOrders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VoucheridOrders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VoucheridOrders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testVoucherToManyAddOpVoucheridVoucherCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCategoryDBTypes, false, strmangle.SetComplement(voucherCategoryPrimaryKeyColumns, voucherCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VoucherCategory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVoucheridVoucherCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, first.Voucherid)
		}
		if !queries.Equal(a.ID, second.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, second.Voucherid)
		}

		if first.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VoucheridVoucherCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VoucheridVoucherCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VoucheridVoucherCategories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testVoucherToManySetOpVoucheridVoucherCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCategoryDBTypes, false, strmangle.SetComplement(voucherCategoryPrimaryKeyColumns, voucherCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVoucheridVoucherCategories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridVoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVoucheridVoucherCategories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridVoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, d.Voucherid)
	}
	if !queries.Equal(a.ID, e.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, e.Voucherid)
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VoucheridVoucherCategories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VoucheridVoucherCategories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testVoucherToManyRemoveOpVoucheridVoucherCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCategoryDBTypes, false, strmangle.SetComplement(voucherCategoryPrimaryKeyColumns, voucherCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVoucheridVoucherCategories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridVoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVoucheridVoucherCategories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridVoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VoucheridVoucherCategories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VoucheridVoucherCategories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VoucheridVoucherCategories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testVoucherToManyAddOpVoucheridVoucherChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherChannelListingDBTypes, false, strmangle.SetComplement(voucherChannelListingPrimaryKeyColumns, voucherChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VoucherChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVoucheridVoucherChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Voucherid {
			t.Error("foreign key was wrong value", a.ID, first.Voucherid)
		}
		if a.ID != second.Voucherid {
			t.Error("foreign key was wrong value", a.ID, second.Voucherid)
		}

		if first.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VoucheridVoucherChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VoucheridVoucherChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VoucheridVoucherChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVoucherToManyAddOpVoucheridVoucherCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCollectionDBTypes, false, strmangle.SetComplement(voucherCollectionPrimaryKeyColumns, voucherCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VoucherCollection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVoucheridVoucherCollections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, first.Voucherid)
		}
		if !queries.Equal(a.ID, second.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, second.Voucherid)
		}

		if first.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VoucheridVoucherCollections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VoucheridVoucherCollections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VoucheridVoucherCollections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testVoucherToManySetOpVoucheridVoucherCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCollectionDBTypes, false, strmangle.SetComplement(voucherCollectionPrimaryKeyColumns, voucherCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVoucheridVoucherCollections(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridVoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVoucheridVoucherCollections(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridVoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, d.Voucherid)
	}
	if !queries.Equal(a.ID, e.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, e.Voucherid)
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VoucheridVoucherCollections[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VoucheridVoucherCollections[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testVoucherToManyRemoveOpVoucheridVoucherCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCollectionDBTypes, false, strmangle.SetComplement(voucherCollectionPrimaryKeyColumns, voucherCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVoucheridVoucherCollections(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridVoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVoucheridVoucherCollections(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridVoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VoucheridVoucherCollections) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VoucheridVoucherCollections[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VoucheridVoucherCollections[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testVoucherToManyAddOpVoucheridVoucherCustomers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCustomer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCustomerDBTypes, false, strmangle.SetComplement(voucherCustomerPrimaryKeyColumns, voucherCustomerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VoucherCustomer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVoucheridVoucherCustomers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, first.Voucherid)
		}
		if !queries.Equal(a.ID, second.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, second.Voucherid)
		}

		if first.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VoucheridVoucherCustomers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VoucheridVoucherCustomers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VoucheridVoucherCustomers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testVoucherToManySetOpVoucheridVoucherCustomers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCustomer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCustomerDBTypes, false, strmangle.SetComplement(voucherCustomerPrimaryKeyColumns, voucherCustomerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVoucheridVoucherCustomers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridVoucherCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVoucheridVoucherCustomers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridVoucherCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, d.Voucherid)
	}
	if !queries.Equal(a.ID, e.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, e.Voucherid)
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VoucheridVoucherCustomers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VoucheridVoucherCustomers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testVoucherToManyRemoveOpVoucheridVoucherCustomers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherCustomer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCustomer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCustomerDBTypes, false, strmangle.SetComplement(voucherCustomerPrimaryKeyColumns, voucherCustomerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVoucheridVoucherCustomers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridVoucherCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVoucheridVoucherCustomers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridVoucherCustomers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VoucheridVoucherCustomers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VoucheridVoucherCustomers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VoucheridVoucherCustomers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testVoucherToManyAddOpVoucheridVoucherProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherProductDBTypes, false, strmangle.SetComplement(voucherProductPrimaryKeyColumns, voucherProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VoucherProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVoucheridVoucherProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, first.Voucherid)
		}
		if !queries.Equal(a.ID, second.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, second.Voucherid)
		}

		if first.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VoucheridVoucherProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VoucheridVoucherProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VoucheridVoucherProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testVoucherToManySetOpVoucheridVoucherProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherProductDBTypes, false, strmangle.SetComplement(voucherProductPrimaryKeyColumns, voucherProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVoucheridVoucherProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridVoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVoucheridVoucherProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridVoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, d.Voucherid)
	}
	if !queries.Equal(a.ID, e.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, e.Voucherid)
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VoucheridVoucherProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VoucheridVoucherProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testVoucherToManyRemoveOpVoucheridVoucherProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherProductDBTypes, false, strmangle.SetComplement(voucherProductPrimaryKeyColumns, voucherProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVoucheridVoucherProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridVoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVoucheridVoucherProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridVoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VoucheridVoucherProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VoucheridVoucherProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VoucheridVoucherProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testVoucherToManyAddOpVoucheridVoucherTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherTranslationDBTypes, false, strmangle.SetComplement(voucherTranslationPrimaryKeyColumns, voucherTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VoucherTranslation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVoucheridVoucherTranslations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, first.Voucherid)
		}
		if !queries.Equal(a.ID, second.Voucherid) {
			t.Error("foreign key was wrong value", a.ID, second.Voucherid)
		}

		if first.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VoucheridVoucher != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VoucheridVoucherTranslations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VoucheridVoucherTranslations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VoucheridVoucherTranslations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testVoucherToManySetOpVoucheridVoucherTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherTranslationDBTypes, false, strmangle.SetComplement(voucherTranslationPrimaryKeyColumns, voucherTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVoucheridVoucherTranslations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridVoucherTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVoucheridVoucherTranslations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridVoucherTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, d.Voucherid)
	}
	if !queries.Equal(a.ID, e.Voucherid) {
		t.Error("foreign key was wrong value", a.ID, e.Voucherid)
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VoucheridVoucherTranslations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VoucheridVoucherTranslations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testVoucherToManyRemoveOpVoucheridVoucherTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Voucher
	var b, c, d, e VoucherTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherTranslationDBTypes, false, strmangle.SetComplement(voucherTranslationPrimaryKeyColumns, voucherTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVoucheridVoucherTranslations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VoucheridVoucherTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVoucheridVoucherTranslations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VoucheridVoucherTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Voucherid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Voucherid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VoucheridVoucher != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.VoucheridVoucher != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VoucheridVoucherTranslations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VoucheridVoucherTranslations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VoucheridVoucherTranslations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testVouchersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVouchersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVouchersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Vouchers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	voucherDBTypes = map[string]string{`ID`: `character varying`, `Type`: `character varying`, `Name`: `character varying`, `Code`: `character varying`, `Usagelimit`: `integer`, `Used`: `integer`, `Startdate`: `bigint`, `Enddate`: `bigint`, `Applyonceperorder`: `boolean`, `Applyoncepercustomer`: `boolean`, `Onlyforstaff`: `boolean`, `Discountvaluetype`: `character varying`, `Countries`: `character varying`, `Mincheckoutitemsquantity`: `integer`, `Createat`: `bigint`, `Updateat`: `bigint`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`}
	_              = bytes.MinRead
)

func testVouchersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(voucherPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(voucherAllColumns) == len(voucherPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vouchers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVouchersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(voucherAllColumns) == len(voucherPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Voucher{}
	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vouchers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherDBTypes, true, voucherPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(voucherAllColumns, voucherPrimaryKeyColumns) {
		fields = voucherAllColumns
	} else {
		fields = strmangle.SetComplement(
			voucherAllColumns,
			voucherPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VoucherSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVouchersUpsert(t *testing.T) {
	t.Parallel()

	if len(voucherAllColumns) == len(voucherPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Voucher{}
	if err = randomize.Struct(seed, &o, voucherDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Voucher: %s", err)
	}

	count, err := Vouchers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, voucherDBTypes, false, voucherPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Voucher: %s", err)
	}

	count, err = Vouchers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
