// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVoucherCollections(t *testing.T) {
	t.Parallel()

	query := VoucherCollections()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVoucherCollectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherCollectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VoucherCollections().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherCollectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherCollectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherCollectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VoucherCollectionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if VoucherCollection exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VoucherCollectionExists to return true, but got false.")
	}
}

func testVoucherCollectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	voucherCollectionFound, err := FindVoucherCollection(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if voucherCollectionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVoucherCollectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VoucherCollections().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVoucherCollectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VoucherCollections().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVoucherCollectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	voucherCollectionOne := &VoucherCollection{}
	voucherCollectionTwo := &VoucherCollection{}
	if err = randomize.Struct(seed, voucherCollectionOne, voucherCollectionDBTypes, false, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherCollectionTwo, voucherCollectionDBTypes, false, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherCollectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherCollectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoucherCollections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVoucherCollectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	voucherCollectionOne := &VoucherCollection{}
	voucherCollectionTwo := &VoucherCollection{}
	if err = randomize.Struct(seed, voucherCollectionOne, voucherCollectionDBTypes, false, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherCollectionTwo, voucherCollectionDBTypes, false, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherCollectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherCollectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func voucherCollectionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCollection) error {
	*o = VoucherCollection{}
	return nil
}

func voucherCollectionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCollection) error {
	*o = VoucherCollection{}
	return nil
}

func voucherCollectionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCollection) error {
	*o = VoucherCollection{}
	return nil
}

func voucherCollectionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCollection) error {
	*o = VoucherCollection{}
	return nil
}

func voucherCollectionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCollection) error {
	*o = VoucherCollection{}
	return nil
}

func voucherCollectionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCollection) error {
	*o = VoucherCollection{}
	return nil
}

func voucherCollectionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCollection) error {
	*o = VoucherCollection{}
	return nil
}

func voucherCollectionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCollection) error {
	*o = VoucherCollection{}
	return nil
}

func voucherCollectionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCollection) error {
	*o = VoucherCollection{}
	return nil
}

func testVoucherCollectionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VoucherCollection{}
	o := &VoucherCollection{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VoucherCollection object: %s", err)
	}

	AddVoucherCollectionHook(boil.BeforeInsertHook, voucherCollectionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	voucherCollectionBeforeInsertHooks = []VoucherCollectionHook{}

	AddVoucherCollectionHook(boil.AfterInsertHook, voucherCollectionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	voucherCollectionAfterInsertHooks = []VoucherCollectionHook{}

	AddVoucherCollectionHook(boil.AfterSelectHook, voucherCollectionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	voucherCollectionAfterSelectHooks = []VoucherCollectionHook{}

	AddVoucherCollectionHook(boil.BeforeUpdateHook, voucherCollectionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	voucherCollectionBeforeUpdateHooks = []VoucherCollectionHook{}

	AddVoucherCollectionHook(boil.AfterUpdateHook, voucherCollectionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	voucherCollectionAfterUpdateHooks = []VoucherCollectionHook{}

	AddVoucherCollectionHook(boil.BeforeDeleteHook, voucherCollectionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	voucherCollectionBeforeDeleteHooks = []VoucherCollectionHook{}

	AddVoucherCollectionHook(boil.AfterDeleteHook, voucherCollectionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	voucherCollectionAfterDeleteHooks = []VoucherCollectionHook{}

	AddVoucherCollectionHook(boil.BeforeUpsertHook, voucherCollectionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	voucherCollectionBeforeUpsertHooks = []VoucherCollectionHook{}

	AddVoucherCollectionHook(boil.AfterUpsertHook, voucherCollectionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	voucherCollectionAfterUpsertHooks = []VoucherCollectionHook{}
}

func testVoucherCollectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherCollectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(voucherCollectionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherCollectionToOneCollectionUsingCollection(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VoucherCollection
	var foreign Collection

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, collectionDBTypes, false, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CollectionID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Collection().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCollectionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VoucherCollectionSlice{&local}
	if err = local.L.LoadCollection(ctx, tx, false, (*[]*VoucherCollection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Collection == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Collection = nil
	if err = local.L.LoadCollection(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Collection == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVoucherCollectionToOneVoucherUsingVoucher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VoucherCollection
	var foreign Voucher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, voucherDBTypes, false, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.VoucherID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Voucher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddVoucherHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VoucherCollectionSlice{&local}
	if err = local.L.LoadVoucher(ctx, tx, false, (*[]*VoucherCollection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Voucher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Voucher = nil
	if err = local.L.LoadVoucher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Voucher == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVoucherCollectionToOneSetOpCollectionUsingCollection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherCollection
	var b, c Collection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherCollectionDBTypes, false, strmangle.SetComplement(voucherCollectionPrimaryKeyColumns, voucherCollectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Collection{&b, &c} {
		err = a.SetCollection(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Collection != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VoucherCollections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CollectionID, x.ID) {
			t.Error("foreign key was wrong value", a.CollectionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CollectionID))
		reflect.Indirect(reflect.ValueOf(&a.CollectionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CollectionID, x.ID) {
			t.Error("foreign key was wrong value", a.CollectionID, x.ID)
		}
	}
}

func testVoucherCollectionToOneRemoveOpCollectionUsingCollection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherCollection
	var b Collection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherCollectionDBTypes, false, strmangle.SetComplement(voucherCollectionPrimaryKeyColumns, voucherCollectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCollection(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCollection(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Collection().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Collection != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CollectionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VoucherCollections) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVoucherCollectionToOneSetOpVoucherUsingVoucher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherCollection
	var b, c Voucher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherCollectionDBTypes, false, strmangle.SetComplement(voucherCollectionPrimaryKeyColumns, voucherCollectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Voucher{&b, &c} {
		err = a.SetVoucher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Voucher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VoucherCollections[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.VoucherID, x.ID) {
			t.Error("foreign key was wrong value", a.VoucherID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VoucherID))
		reflect.Indirect(reflect.ValueOf(&a.VoucherID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.VoucherID, x.ID) {
			t.Error("foreign key was wrong value", a.VoucherID, x.ID)
		}
	}
}

func testVoucherCollectionToOneRemoveOpVoucherUsingVoucher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherCollection
	var b Voucher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherCollectionDBTypes, false, strmangle.SetComplement(voucherCollectionPrimaryKeyColumns, voucherCollectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetVoucher(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveVoucher(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Voucher().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Voucher != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.VoucherID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VoucherCollections) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVoucherCollectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoucherCollectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherCollectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoucherCollectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoucherCollections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	voucherCollectionDBTypes = map[string]string{`ID`: `character varying`, `VoucherID`: `character varying`, `CollectionID`: `character varying`}
	_                        = bytes.MinRead
)

func testVoucherCollectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(voucherCollectionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(voucherCollectionAllColumns) == len(voucherCollectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVoucherCollectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(voucherCollectionAllColumns) == len(voucherCollectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCollection{}
	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherCollectionDBTypes, true, voucherCollectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(voucherCollectionAllColumns, voucherCollectionPrimaryKeyColumns) {
		fields = voucherCollectionAllColumns
	} else {
		fields = strmangle.SetComplement(
			voucherCollectionAllColumns,
			voucherCollectionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VoucherCollectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVoucherCollectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(voucherCollectionAllColumns) == len(voucherCollectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VoucherCollection{}
	if err = randomize.Struct(seed, &o, voucherCollectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoucherCollection: %s", err)
	}

	count, err := VoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, voucherCollectionDBTypes, false, voucherCollectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherCollection struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoucherCollection: %s", err)
	}

	count, err = VoucherCollections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
