// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttributePages(t *testing.T) {
	t.Parallel()

	query := AttributePages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttributePagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributePages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributePagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AttributePages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributePages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributePagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributePageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributePages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributePagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttributePageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AttributePage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttributePageExists to return true, but got false.")
	}
}

func testAttributePagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attributePageFound, err := FindAttributePage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attributePageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttributePagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AttributePages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttributePagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AttributePages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttributePagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attributePageOne := &AttributePage{}
	attributePageTwo := &AttributePage{}
	if err = randomize.Struct(seed, attributePageOne, attributePageDBTypes, false, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}
	if err = randomize.Struct(seed, attributePageTwo, attributePageDBTypes, false, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributePageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributePageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttributePages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttributePagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attributePageOne := &AttributePage{}
	attributePageTwo := &AttributePage{}
	if err = randomize.Struct(seed, attributePageOne, attributePageDBTypes, false, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}
	if err = randomize.Struct(seed, attributePageTwo, attributePageDBTypes, false, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributePageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributePageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributePages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attributePageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributePage) error {
	*o = AttributePage{}
	return nil
}

func attributePageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributePage) error {
	*o = AttributePage{}
	return nil
}

func attributePageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AttributePage) error {
	*o = AttributePage{}
	return nil
}

func attributePageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttributePage) error {
	*o = AttributePage{}
	return nil
}

func attributePageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttributePage) error {
	*o = AttributePage{}
	return nil
}

func attributePageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttributePage) error {
	*o = AttributePage{}
	return nil
}

func attributePageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttributePage) error {
	*o = AttributePage{}
	return nil
}

func attributePageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributePage) error {
	*o = AttributePage{}
	return nil
}

func attributePageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributePage) error {
	*o = AttributePage{}
	return nil
}

func testAttributePagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AttributePage{}
	o := &AttributePage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attributePageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AttributePage object: %s", err)
	}

	AddAttributePageHook(boil.BeforeInsertHook, attributePageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attributePageBeforeInsertHooks = []AttributePageHook{}

	AddAttributePageHook(boil.AfterInsertHook, attributePageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attributePageAfterInsertHooks = []AttributePageHook{}

	AddAttributePageHook(boil.AfterSelectHook, attributePageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attributePageAfterSelectHooks = []AttributePageHook{}

	AddAttributePageHook(boil.BeforeUpdateHook, attributePageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attributePageBeforeUpdateHooks = []AttributePageHook{}

	AddAttributePageHook(boil.AfterUpdateHook, attributePageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attributePageAfterUpdateHooks = []AttributePageHook{}

	AddAttributePageHook(boil.BeforeDeleteHook, attributePageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attributePageBeforeDeleteHooks = []AttributePageHook{}

	AddAttributePageHook(boil.AfterDeleteHook, attributePageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attributePageAfterDeleteHooks = []AttributePageHook{}

	AddAttributePageHook(boil.BeforeUpsertHook, attributePageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attributePageBeforeUpsertHooks = []AttributePageHook{}

	AddAttributePageHook(boil.AfterUpsertHook, attributePageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attributePageAfterUpsertHooks = []AttributePageHook{}
}

func testAttributePagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributePages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributePagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(attributePageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AttributePages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributePageToManyAssignmentidAssignedPageAttributes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributePage
	var b, c AssignedPageAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Assignmentid, a.ID)
	queries.Assign(&c.Assignmentid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AssignmentidAssignedPageAttributes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Assignmentid, b.Assignmentid) {
			bFound = true
		}
		if queries.Equal(v.Assignmentid, c.Assignmentid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributePageSlice{&a}
	if err = a.L.LoadAssignmentidAssignedPageAttributes(ctx, tx, false, (*[]*AttributePage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignmentidAssignedPageAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AssignmentidAssignedPageAttributes = nil
	if err = a.L.LoadAssignmentidAssignedPageAttributes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignmentidAssignedPageAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAttributePageToManyAddOpAssignmentidAssignedPageAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributePage
	var b, c, d, e AssignedPageAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributePageDBTypes, false, strmangle.SetComplement(attributePagePrimaryKeyColumns, attributePageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPageAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedPageAttribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssignmentidAssignedPageAttributes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Assignmentid) {
			t.Error("foreign key was wrong value", a.ID, first.Assignmentid)
		}
		if !queries.Equal(a.ID, second.Assignmentid) {
			t.Error("foreign key was wrong value", a.ID, second.Assignmentid)
		}

		if first.R.AssignmentidAttributePage != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AssignmentidAttributePage != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AssignmentidAssignedPageAttributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AssignmentidAssignedPageAttributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AssignmentidAssignedPageAttributes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAttributePageToManySetOpAssignmentidAssignedPageAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributePage
	var b, c, d, e AssignedPageAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributePageDBTypes, false, strmangle.SetComplement(attributePagePrimaryKeyColumns, attributePageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPageAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAssignmentidAssignedPageAttributes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AssignmentidAssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAssignmentidAssignedPageAttributes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AssignmentidAssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Assignmentid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Assignmentid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Assignmentid) {
		t.Error("foreign key was wrong value", a.ID, d.Assignmentid)
	}
	if !queries.Equal(a.ID, e.Assignmentid) {
		t.Error("foreign key was wrong value", a.ID, e.Assignmentid)
	}

	if b.R.AssignmentidAttributePage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AssignmentidAttributePage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AssignmentidAttributePage != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AssignmentidAttributePage != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AssignmentidAssignedPageAttributes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AssignmentidAssignedPageAttributes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAttributePageToManyRemoveOpAssignmentidAssignedPageAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributePage
	var b, c, d, e AssignedPageAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributePageDBTypes, false, strmangle.SetComplement(attributePagePrimaryKeyColumns, attributePageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPageAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAssignmentidAssignedPageAttributes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AssignmentidAssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAssignmentidAssignedPageAttributes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AssignmentidAssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Assignmentid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Assignmentid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AssignmentidAttributePage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AssignmentidAttributePage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AssignmentidAttributePage != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AssignmentidAttributePage != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AssignmentidAssignedPageAttributes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AssignmentidAssignedPageAttributes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AssignmentidAssignedPageAttributes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAttributePageToOnePageTypeUsingPagetypeidPageType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AttributePage
	var foreign PageType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pageTypeDBTypes, false, pageTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Pagetypeid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PagetypeidPageType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPageTypeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *PageType) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AttributePageSlice{&local}
	if err = local.L.LoadPagetypeidPageType(ctx, tx, false, (*[]*AttributePage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PagetypeidPageType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PagetypeidPageType = nil
	if err = local.L.LoadPagetypeidPageType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PagetypeidPageType == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAttributePageToOneSetOpPageTypeUsingPagetypeidPageType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributePage
	var b, c PageType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributePageDBTypes, false, strmangle.SetComplement(attributePagePrimaryKeyColumns, attributePageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageTypeDBTypes, false, strmangle.SetComplement(pageTypePrimaryKeyColumns, pageTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageTypeDBTypes, false, strmangle.SetComplement(pageTypePrimaryKeyColumns, pageTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PageType{&b, &c} {
		err = a.SetPagetypeidPageType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PagetypeidPageType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PagetypeidAttributePages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Pagetypeid, x.ID) {
			t.Error("foreign key was wrong value", a.Pagetypeid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Pagetypeid))
		reflect.Indirect(reflect.ValueOf(&a.Pagetypeid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Pagetypeid, x.ID) {
			t.Error("foreign key was wrong value", a.Pagetypeid, x.ID)
		}
	}
}

func testAttributePageToOneRemoveOpPageTypeUsingPagetypeidPageType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributePage
	var b PageType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributePageDBTypes, false, strmangle.SetComplement(attributePagePrimaryKeyColumns, attributePageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageTypeDBTypes, false, strmangle.SetComplement(pageTypePrimaryKeyColumns, pageTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPagetypeidPageType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePagetypeidPageType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.PagetypeidPageType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.PagetypeidPageType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Pagetypeid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PagetypeidAttributePages) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAttributePagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributePagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributePageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributePagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttributePages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attributePageDBTypes = map[string]string{`ID`: `character varying`, `Attributeid`: `character varying`, `Pagetypeid`: `character varying`, `Sortorder`: `integer`}
	_                    = bytes.MinRead
)

func testAttributePagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attributePagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attributePageAllColumns) == len(attributePagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributePages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttributePagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attributePageAllColumns) == len(attributePagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttributePage{}
	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributePages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributePageDBTypes, true, attributePagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attributePageAllColumns, attributePagePrimaryKeyColumns) {
		fields = attributePageAllColumns
	} else {
		fields = strmangle.SetComplement(
			attributePageAllColumns,
			attributePagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttributePageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAttributePagesUpsert(t *testing.T) {
	t.Parallel()

	if len(attributePageAllColumns) == len(attributePagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AttributePage{}
	if err = randomize.Struct(seed, &o, attributePageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttributePage: %s", err)
	}

	count, err := AttributePages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attributePageDBTypes, false, attributePagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttributePage: %s", err)
	}

	count, err = AttributePages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
