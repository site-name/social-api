// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShopStaff is an object representing the database table.
type ShopStaff struct {
	ID             string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Staffid        null.String  `boil:"staffid" json:"staffid,omitempty" toml:"staffid" yaml:"staffid,omitempty"`
	Createat       null.Int64   `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Endat          null.Int64   `boil:"endat" json:"endat,omitempty" toml:"endat" yaml:"endat,omitempty"`
	Salaryperiod   null.String  `boil:"salaryperiod" json:"salaryperiod,omitempty" toml:"salaryperiod" yaml:"salaryperiod,omitempty"`
	Slary          null.Float64 `boil:"slary" json:"slary,omitempty" toml:"slary" yaml:"slary,omitempty"`
	Salarycurrency null.String  `boil:"salarycurrency" json:"salarycurrency,omitempty" toml:"salarycurrency" yaml:"salarycurrency,omitempty"`

	R *shopStaffR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shopStaffL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShopStaffColumns = struct {
	ID             string
	Staffid        string
	Createat       string
	Endat          string
	Salaryperiod   string
	Slary          string
	Salarycurrency string
}{
	ID:             "id",
	Staffid:        "staffid",
	Createat:       "createat",
	Endat:          "endat",
	Salaryperiod:   "salaryperiod",
	Slary:          "slary",
	Salarycurrency: "salarycurrency",
}

var ShopStaffTableColumns = struct {
	ID             string
	Staffid        string
	Createat       string
	Endat          string
	Salaryperiod   string
	Slary          string
	Salarycurrency string
}{
	ID:             "shop_staffs.id",
	Staffid:        "shop_staffs.staffid",
	Createat:       "shop_staffs.createat",
	Endat:          "shop_staffs.endat",
	Salaryperiod:   "shop_staffs.salaryperiod",
	Slary:          "shop_staffs.slary",
	Salarycurrency: "shop_staffs.salarycurrency",
}

// Generated where

var ShopStaffWhere = struct {
	ID             whereHelperstring
	Staffid        whereHelpernull_String
	Createat       whereHelpernull_Int64
	Endat          whereHelpernull_Int64
	Salaryperiod   whereHelpernull_String
	Slary          whereHelpernull_Float64
	Salarycurrency whereHelpernull_String
}{
	ID:             whereHelperstring{field: "\"shop_staffs\".\"id\""},
	Staffid:        whereHelpernull_String{field: "\"shop_staffs\".\"staffid\""},
	Createat:       whereHelpernull_Int64{field: "\"shop_staffs\".\"createat\""},
	Endat:          whereHelpernull_Int64{field: "\"shop_staffs\".\"endat\""},
	Salaryperiod:   whereHelpernull_String{field: "\"shop_staffs\".\"salaryperiod\""},
	Slary:          whereHelpernull_Float64{field: "\"shop_staffs\".\"slary\""},
	Salarycurrency: whereHelpernull_String{field: "\"shop_staffs\".\"salarycurrency\""},
}

// ShopStaffRels is where relationship names are stored.
var ShopStaffRels = struct {
	StaffidUser string
}{
	StaffidUser: "StaffidUser",
}

// shopStaffR is where relationships are stored.
type shopStaffR struct {
	StaffidUser *User `boil:"StaffidUser" json:"StaffidUser" toml:"StaffidUser" yaml:"StaffidUser"`
}

// NewStruct creates a new relationship struct
func (*shopStaffR) NewStruct() *shopStaffR {
	return &shopStaffR{}
}

func (r *shopStaffR) GetStaffidUser() *User {
	if r == nil {
		return nil
	}
	return r.StaffidUser
}

// shopStaffL is where Load methods for each relationship are stored.
type shopStaffL struct{}

var (
	shopStaffAllColumns            = []string{"id", "staffid", "createat", "endat", "salaryperiod", "slary", "salarycurrency"}
	shopStaffColumnsWithoutDefault = []string{"id"}
	shopStaffColumnsWithDefault    = []string{"staffid", "createat", "endat", "salaryperiod", "slary", "salarycurrency"}
	shopStaffPrimaryKeyColumns     = []string{"id"}
	shopStaffGeneratedColumns      = []string{}
)

type (
	// ShopStaffSlice is an alias for a slice of pointers to ShopStaff.
	// This should almost always be used instead of []ShopStaff.
	ShopStaffSlice []*ShopStaff
	// ShopStaffHook is the signature for custom ShopStaff hook methods
	ShopStaffHook func(context.Context, boil.ContextExecutor, *ShopStaff) error

	shopStaffQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shopStaffType                 = reflect.TypeOf(&ShopStaff{})
	shopStaffMapping              = queries.MakeStructMapping(shopStaffType)
	shopStaffPrimaryKeyMapping, _ = queries.BindMapping(shopStaffType, shopStaffMapping, shopStaffPrimaryKeyColumns)
	shopStaffInsertCacheMut       sync.RWMutex
	shopStaffInsertCache          = make(map[string]insertCache)
	shopStaffUpdateCacheMut       sync.RWMutex
	shopStaffUpdateCache          = make(map[string]updateCache)
	shopStaffUpsertCacheMut       sync.RWMutex
	shopStaffUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shopStaffAfterSelectHooks []ShopStaffHook

var shopStaffBeforeInsertHooks []ShopStaffHook
var shopStaffAfterInsertHooks []ShopStaffHook

var shopStaffBeforeUpdateHooks []ShopStaffHook
var shopStaffAfterUpdateHooks []ShopStaffHook

var shopStaffBeforeDeleteHooks []ShopStaffHook
var shopStaffAfterDeleteHooks []ShopStaffHook

var shopStaffBeforeUpsertHooks []ShopStaffHook
var shopStaffAfterUpsertHooks []ShopStaffHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShopStaff) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopStaffAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShopStaff) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopStaffBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShopStaff) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopStaffAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShopStaff) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopStaffBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShopStaff) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopStaffAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShopStaff) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopStaffBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShopStaff) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopStaffAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShopStaff) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopStaffBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShopStaff) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopStaffAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShopStaffHook registers your hook function for all future operations.
func AddShopStaffHook(hookPoint boil.HookPoint, shopStaffHook ShopStaffHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shopStaffAfterSelectHooks = append(shopStaffAfterSelectHooks, shopStaffHook)
	case boil.BeforeInsertHook:
		shopStaffBeforeInsertHooks = append(shopStaffBeforeInsertHooks, shopStaffHook)
	case boil.AfterInsertHook:
		shopStaffAfterInsertHooks = append(shopStaffAfterInsertHooks, shopStaffHook)
	case boil.BeforeUpdateHook:
		shopStaffBeforeUpdateHooks = append(shopStaffBeforeUpdateHooks, shopStaffHook)
	case boil.AfterUpdateHook:
		shopStaffAfterUpdateHooks = append(shopStaffAfterUpdateHooks, shopStaffHook)
	case boil.BeforeDeleteHook:
		shopStaffBeforeDeleteHooks = append(shopStaffBeforeDeleteHooks, shopStaffHook)
	case boil.AfterDeleteHook:
		shopStaffAfterDeleteHooks = append(shopStaffAfterDeleteHooks, shopStaffHook)
	case boil.BeforeUpsertHook:
		shopStaffBeforeUpsertHooks = append(shopStaffBeforeUpsertHooks, shopStaffHook)
	case boil.AfterUpsertHook:
		shopStaffAfterUpsertHooks = append(shopStaffAfterUpsertHooks, shopStaffHook)
	}
}

// One returns a single shopStaff record from the query.
func (q shopStaffQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShopStaff, error) {
	o := &ShopStaff{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shop_staffs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShopStaff records from the query.
func (q shopStaffQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShopStaffSlice, error) {
	var o []*ShopStaff

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShopStaff slice")
	}

	if len(shopStaffAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShopStaff records in the query.
func (q shopStaffQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shop_staffs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shopStaffQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shop_staffs exists")
	}

	return count > 0, nil
}

// StaffidUser pointed to by the foreign key.
func (o *ShopStaff) StaffidUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Staffid),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadStaffidUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shopStaffL) LoadStaffidUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShopStaff interface{}, mods queries.Applicator) error {
	var slice []*ShopStaff
	var object *ShopStaff

	if singular {
		var ok bool
		object, ok = maybeShopStaff.(*ShopStaff)
		if !ok {
			object = new(ShopStaff)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShopStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShopStaff))
			}
		}
	} else {
		s, ok := maybeShopStaff.(*[]*ShopStaff)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShopStaff)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShopStaff))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shopStaffR{}
		}
		if !queries.IsNil(object.Staffid) {
			args = append(args, object.Staffid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shopStaffR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Staffid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Staffid) {
				args = append(args, obj.Staffid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.StaffidUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.StaffidShopStaffs = append(foreign.R.StaffidShopStaffs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Staffid, foreign.ID) {
				local.R.StaffidUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.StaffidShopStaffs = append(foreign.R.StaffidShopStaffs, local)
				break
			}
		}
	}

	return nil
}

// SetStaffidUser of the shopStaff to the related item.
// Sets o.R.StaffidUser to related.
// Adds o to related.R.StaffidShopStaffs.
func (o *ShopStaff) SetStaffidUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shop_staffs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"staffid"}),
		strmangle.WhereClause("\"", "\"", 2, shopStaffPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Staffid, related.ID)
	if o.R == nil {
		o.R = &shopStaffR{
			StaffidUser: related,
		}
	} else {
		o.R.StaffidUser = related
	}

	if related.R == nil {
		related.R = &userR{
			StaffidShopStaffs: ShopStaffSlice{o},
		}
	} else {
		related.R.StaffidShopStaffs = append(related.R.StaffidShopStaffs, o)
	}

	return nil
}

// RemoveStaffidUser relationship.
// Sets o.R.StaffidUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ShopStaff) RemoveStaffidUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.Staffid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("staffid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.StaffidUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StaffidShopStaffs {
		if queries.Equal(o.Staffid, ri.Staffid) {
			continue
		}

		ln := len(related.R.StaffidShopStaffs)
		if ln > 1 && i < ln-1 {
			related.R.StaffidShopStaffs[i] = related.R.StaffidShopStaffs[ln-1]
		}
		related.R.StaffidShopStaffs = related.R.StaffidShopStaffs[:ln-1]
		break
	}
	return nil
}

// ShopStaffs retrieves all the records using an executor.
func ShopStaffs(mods ...qm.QueryMod) shopStaffQuery {
	mods = append(mods, qm.From("\"shop_staffs\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shop_staffs\".*"})
	}

	return shopStaffQuery{q}
}

// FindShopStaff retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShopStaff(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ShopStaff, error) {
	shopStaffObj := &ShopStaff{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shop_staffs\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shopStaffObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shop_staffs")
	}

	if err = shopStaffObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shopStaffObj, err
	}

	return shopStaffObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShopStaff) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shop_staffs provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopStaffColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shopStaffInsertCacheMut.RLock()
	cache, cached := shopStaffInsertCache[key]
	shopStaffInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shopStaffAllColumns,
			shopStaffColumnsWithDefault,
			shopStaffColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shopStaffType, shopStaffMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shopStaffType, shopStaffMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shop_staffs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shop_staffs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shop_staffs")
	}

	if !cached {
		shopStaffInsertCacheMut.Lock()
		shopStaffInsertCache[key] = cache
		shopStaffInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShopStaff.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShopStaff) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shopStaffUpdateCacheMut.RLock()
	cache, cached := shopStaffUpdateCache[key]
	shopStaffUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shopStaffAllColumns,
			shopStaffPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shop_staffs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shop_staffs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shopStaffPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shopStaffType, shopStaffMapping, append(wl, shopStaffPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shop_staffs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shop_staffs")
	}

	if !cached {
		shopStaffUpdateCacheMut.Lock()
		shopStaffUpdateCache[key] = cache
		shopStaffUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shopStaffQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shop_staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shop_staffs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShopStaffSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopStaffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shop_staffs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shopStaffPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shopStaff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shopStaff")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShopStaff) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shop_staffs provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopStaffColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shopStaffUpsertCacheMut.RLock()
	cache, cached := shopStaffUpsertCache[key]
	shopStaffUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shopStaffAllColumns,
			shopStaffColumnsWithDefault,
			shopStaffColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shopStaffAllColumns,
			shopStaffPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shop_staffs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shopStaffPrimaryKeyColumns))
			copy(conflict, shopStaffPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shop_staffs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shopStaffType, shopStaffMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shopStaffType, shopStaffMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shop_staffs")
	}

	if !cached {
		shopStaffUpsertCacheMut.Lock()
		shopStaffUpsertCache[key] = cache
		shopStaffUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShopStaff record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShopStaff) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShopStaff provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shopStaffPrimaryKeyMapping)
	sql := "DELETE FROM \"shop_staffs\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shop_staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shop_staffs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shopStaffQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shopStaffQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shop_staffs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shop_staffs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShopStaffSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shopStaffBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopStaffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shop_staffs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopStaffPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shopStaff slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shop_staffs")
	}

	if len(shopStaffAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShopStaff) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShopStaff(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShopStaffSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShopStaffSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopStaffPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shop_staffs\".* FROM \"shop_staffs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopStaffPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShopStaffSlice")
	}

	*o = slice

	return nil
}

// ShopStaffExists checks if the ShopStaff row exists.
func ShopStaffExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shop_staffs\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shop_staffs exists")
	}

	return exists, nil
}

// Exists checks if the ShopStaff row exists.
func (o *ShopStaff) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShopStaffExists(ctx, exec, o.ID)
}
