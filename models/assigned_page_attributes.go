// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssignedPageAttribute is an object representing the database table.
type AssignedPageAttribute struct {
	ID           string `boil:"id" json:"id" toml:"id" yaml:"id"`
	PageID       string `boil:"page_id" json:"page_id" toml:"page_id" yaml:"page_id"`
	AssignmentID string `boil:"assignment_id" json:"assignment_id" toml:"assignment_id" yaml:"assignment_id"`

	R *assignedPageAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignedPageAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignedPageAttributeColumns = struct {
	ID           string
	PageID       string
	AssignmentID string
}{
	ID:           "id",
	PageID:       "page_id",
	AssignmentID: "assignment_id",
}

var AssignedPageAttributeTableColumns = struct {
	ID           string
	PageID       string
	AssignmentID string
}{
	ID:           "assigned_page_attributes.id",
	PageID:       "assigned_page_attributes.page_id",
	AssignmentID: "assigned_page_attributes.assignment_id",
}

// Generated where

var AssignedPageAttributeWhere = struct {
	ID           whereHelperstring
	PageID       whereHelperstring
	AssignmentID whereHelperstring
}{
	ID:           whereHelperstring{field: "\"assigned_page_attributes\".\"id\""},
	PageID:       whereHelperstring{field: "\"assigned_page_attributes\".\"page_id\""},
	AssignmentID: whereHelperstring{field: "\"assigned_page_attributes\".\"assignment_id\""},
}

// AssignedPageAttributeRels is where relationship names are stored.
var AssignedPageAttributeRels = struct {
	Assignment                            string
	Page                                  string
	AssignmentAssignedPageAttributeValues string
}{
	Assignment:                            "Assignment",
	Page:                                  "Page",
	AssignmentAssignedPageAttributeValues: "AssignmentAssignedPageAttributeValues",
}

// assignedPageAttributeR is where relationships are stored.
type assignedPageAttributeR struct {
	Assignment                            *AttributePage                  `boil:"Assignment" json:"Assignment" toml:"Assignment" yaml:"Assignment"`
	Page                                  *Page                           `boil:"Page" json:"Page" toml:"Page" yaml:"Page"`
	AssignmentAssignedPageAttributeValues AssignedPageAttributeValueSlice `boil:"AssignmentAssignedPageAttributeValues" json:"AssignmentAssignedPageAttributeValues" toml:"AssignmentAssignedPageAttributeValues" yaml:"AssignmentAssignedPageAttributeValues"`
}

// NewStruct creates a new relationship struct
func (*assignedPageAttributeR) NewStruct() *assignedPageAttributeR {
	return &assignedPageAttributeR{}
}

func (r *assignedPageAttributeR) GetAssignment() *AttributePage {
	if r == nil {
		return nil
	}
	return r.Assignment
}

func (r *assignedPageAttributeR) GetPage() *Page {
	if r == nil {
		return nil
	}
	return r.Page
}

func (r *assignedPageAttributeR) GetAssignmentAssignedPageAttributeValues() AssignedPageAttributeValueSlice {
	if r == nil {
		return nil
	}
	return r.AssignmentAssignedPageAttributeValues
}

// assignedPageAttributeL is where Load methods for each relationship are stored.
type assignedPageAttributeL struct{}

var (
	assignedPageAttributeAllColumns            = []string{"id", "page_id", "assignment_id"}
	assignedPageAttributeColumnsWithoutDefault = []string{"page_id", "assignment_id"}
	assignedPageAttributeColumnsWithDefault    = []string{"id"}
	assignedPageAttributePrimaryKeyColumns     = []string{"id"}
	assignedPageAttributeGeneratedColumns      = []string{}
)

type (
	// AssignedPageAttributeSlice is an alias for a slice of pointers to AssignedPageAttribute.
	// This should almost always be used instead of []AssignedPageAttribute.
	AssignedPageAttributeSlice []*AssignedPageAttribute
	// AssignedPageAttributeHook is the signature for custom AssignedPageAttribute hook methods
	AssignedPageAttributeHook func(context.Context, boil.ContextExecutor, *AssignedPageAttribute) error

	assignedPageAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignedPageAttributeType                 = reflect.TypeOf(&AssignedPageAttribute{})
	assignedPageAttributeMapping              = queries.MakeStructMapping(assignedPageAttributeType)
	assignedPageAttributePrimaryKeyMapping, _ = queries.BindMapping(assignedPageAttributeType, assignedPageAttributeMapping, assignedPageAttributePrimaryKeyColumns)
	assignedPageAttributeInsertCacheMut       sync.RWMutex
	assignedPageAttributeInsertCache          = make(map[string]insertCache)
	assignedPageAttributeUpdateCacheMut       sync.RWMutex
	assignedPageAttributeUpdateCache          = make(map[string]updateCache)
	assignedPageAttributeUpsertCacheMut       sync.RWMutex
	assignedPageAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assignedPageAttributeAfterSelectHooks []AssignedPageAttributeHook

var assignedPageAttributeBeforeInsertHooks []AssignedPageAttributeHook
var assignedPageAttributeAfterInsertHooks []AssignedPageAttributeHook

var assignedPageAttributeBeforeUpdateHooks []AssignedPageAttributeHook
var assignedPageAttributeAfterUpdateHooks []AssignedPageAttributeHook

var assignedPageAttributeBeforeDeleteHooks []AssignedPageAttributeHook
var assignedPageAttributeAfterDeleteHooks []AssignedPageAttributeHook

var assignedPageAttributeBeforeUpsertHooks []AssignedPageAttributeHook
var assignedPageAttributeAfterUpsertHooks []AssignedPageAttributeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssignedPageAttribute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssignedPageAttribute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssignedPageAttribute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssignedPageAttribute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssignedPageAttribute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssignedPageAttribute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssignedPageAttribute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssignedPageAttribute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssignedPageAttribute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssignedPageAttributeHook registers your hook function for all future operations.
func AddAssignedPageAttributeHook(hookPoint boil.HookPoint, assignedPageAttributeHook AssignedPageAttributeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assignedPageAttributeAfterSelectHooks = append(assignedPageAttributeAfterSelectHooks, assignedPageAttributeHook)
	case boil.BeforeInsertHook:
		assignedPageAttributeBeforeInsertHooks = append(assignedPageAttributeBeforeInsertHooks, assignedPageAttributeHook)
	case boil.AfterInsertHook:
		assignedPageAttributeAfterInsertHooks = append(assignedPageAttributeAfterInsertHooks, assignedPageAttributeHook)
	case boil.BeforeUpdateHook:
		assignedPageAttributeBeforeUpdateHooks = append(assignedPageAttributeBeforeUpdateHooks, assignedPageAttributeHook)
	case boil.AfterUpdateHook:
		assignedPageAttributeAfterUpdateHooks = append(assignedPageAttributeAfterUpdateHooks, assignedPageAttributeHook)
	case boil.BeforeDeleteHook:
		assignedPageAttributeBeforeDeleteHooks = append(assignedPageAttributeBeforeDeleteHooks, assignedPageAttributeHook)
	case boil.AfterDeleteHook:
		assignedPageAttributeAfterDeleteHooks = append(assignedPageAttributeAfterDeleteHooks, assignedPageAttributeHook)
	case boil.BeforeUpsertHook:
		assignedPageAttributeBeforeUpsertHooks = append(assignedPageAttributeBeforeUpsertHooks, assignedPageAttributeHook)
	case boil.AfterUpsertHook:
		assignedPageAttributeAfterUpsertHooks = append(assignedPageAttributeAfterUpsertHooks, assignedPageAttributeHook)
	}
}

// One returns a single assignedPageAttribute record from the query.
func (q assignedPageAttributeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssignedPageAttribute, error) {
	o := &AssignedPageAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for assigned_page_attributes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssignedPageAttribute records from the query.
func (q assignedPageAttributeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssignedPageAttributeSlice, error) {
	var o []*AssignedPageAttribute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssignedPageAttribute slice")
	}

	if len(assignedPageAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssignedPageAttribute records in the query.
func (q assignedPageAttributeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assigned_page_attributes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignedPageAttributeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assigned_page_attributes exists")
	}

	return count > 0, nil
}

// Assignment pointed to by the foreign key.
func (o *AssignedPageAttribute) Assignment(mods ...qm.QueryMod) attributePageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AssignmentID),
	}

	queryMods = append(queryMods, mods...)

	return AttributePages(queryMods...)
}

// Page pointed to by the foreign key.
func (o *AssignedPageAttribute) Page(mods ...qm.QueryMod) pageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PageID),
	}

	queryMods = append(queryMods, mods...)

	return Pages(queryMods...)
}

// AssignmentAssignedPageAttributeValues retrieves all the assigned_page_attribute_value's AssignedPageAttributeValues with an executor via assignment_id column.
func (o *AssignedPageAttribute) AssignmentAssignedPageAttributeValues(mods ...qm.QueryMod) assignedPageAttributeValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_page_attribute_values\".\"assignment_id\"=?", o.ID),
	)

	return AssignedPageAttributeValues(queryMods...)
}

// LoadAssignment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedPageAttributeL) LoadAssignment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedPageAttribute interface{}, mods queries.Applicator) error {
	var slice []*AssignedPageAttribute
	var object *AssignedPageAttribute

	if singular {
		var ok bool
		object, ok = maybeAssignedPageAttribute.(*AssignedPageAttribute)
		if !ok {
			object = new(AssignedPageAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedPageAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedPageAttribute))
			}
		}
	} else {
		s, ok := maybeAssignedPageAttribute.(*[]*AssignedPageAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedPageAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedPageAttribute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedPageAttributeR{}
		}
		args = append(args, object.AssignmentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedPageAttributeR{}
			}

			for _, a := range args {
				if a == obj.AssignmentID {
					continue Outer
				}
			}

			args = append(args, obj.AssignmentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attribute_pages`),
		qm.WhereIn(`attribute_pages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AttributePage")
	}

	var resultSlice []*AttributePage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AttributePage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attribute_pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_pages")
	}

	if len(attributePageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Assignment = foreign
		if foreign.R == nil {
			foreign.R = &attributePageR{}
		}
		foreign.R.AssignmentAssignedPageAttributes = append(foreign.R.AssignmentAssignedPageAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssignmentID == foreign.ID {
				local.R.Assignment = foreign
				if foreign.R == nil {
					foreign.R = &attributePageR{}
				}
				foreign.R.AssignmentAssignedPageAttributes = append(foreign.R.AssignmentAssignedPageAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadPage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedPageAttributeL) LoadPage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedPageAttribute interface{}, mods queries.Applicator) error {
	var slice []*AssignedPageAttribute
	var object *AssignedPageAttribute

	if singular {
		var ok bool
		object, ok = maybeAssignedPageAttribute.(*AssignedPageAttribute)
		if !ok {
			object = new(AssignedPageAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedPageAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedPageAttribute))
			}
		}
	} else {
		s, ok := maybeAssignedPageAttribute.(*[]*AssignedPageAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedPageAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedPageAttribute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedPageAttributeR{}
		}
		args = append(args, object.PageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedPageAttributeR{}
			}

			for _, a := range args {
				if a == obj.PageID {
					continue Outer
				}
			}

			args = append(args, obj.PageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pages`),
		qm.WhereIn(`pages.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Page")
	}

	var resultSlice []*Page
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Page")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pages")
	}

	if len(pageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Page = foreign
		if foreign.R == nil {
			foreign.R = &pageR{}
		}
		foreign.R.AssignedPageAttributes = append(foreign.R.AssignedPageAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PageID == foreign.ID {
				local.R.Page = foreign
				if foreign.R == nil {
					foreign.R = &pageR{}
				}
				foreign.R.AssignedPageAttributes = append(foreign.R.AssignedPageAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignmentAssignedPageAttributeValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assignedPageAttributeL) LoadAssignmentAssignedPageAttributeValues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedPageAttribute interface{}, mods queries.Applicator) error {
	var slice []*AssignedPageAttribute
	var object *AssignedPageAttribute

	if singular {
		var ok bool
		object, ok = maybeAssignedPageAttribute.(*AssignedPageAttribute)
		if !ok {
			object = new(AssignedPageAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedPageAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedPageAttribute))
			}
		}
	} else {
		s, ok := maybeAssignedPageAttribute.(*[]*AssignedPageAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedPageAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedPageAttribute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedPageAttributeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedPageAttributeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_page_attribute_values`),
		qm.WhereIn(`assigned_page_attribute_values.assignment_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_page_attribute_values")
	}

	var resultSlice []*AssignedPageAttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_page_attribute_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_page_attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_page_attribute_values")
	}

	if len(assignedPageAttributeValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignmentAssignedPageAttributeValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedPageAttributeValueR{}
			}
			foreign.R.Assignment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AssignmentID {
				local.R.AssignmentAssignedPageAttributeValues = append(local.R.AssignmentAssignedPageAttributeValues, foreign)
				if foreign.R == nil {
					foreign.R = &assignedPageAttributeValueR{}
				}
				foreign.R.Assignment = local
				break
			}
		}
	}

	return nil
}

// SetAssignment of the assignedPageAttribute to the related item.
// Sets o.R.Assignment to related.
// Adds o to related.R.AssignmentAssignedPageAttributes.
func (o *AssignedPageAttribute) SetAssignment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AttributePage) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_page_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"assignment_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedPageAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssignmentID = related.ID
	if o.R == nil {
		o.R = &assignedPageAttributeR{
			Assignment: related,
		}
	} else {
		o.R.Assignment = related
	}

	if related.R == nil {
		related.R = &attributePageR{
			AssignmentAssignedPageAttributes: AssignedPageAttributeSlice{o},
		}
	} else {
		related.R.AssignmentAssignedPageAttributes = append(related.R.AssignmentAssignedPageAttributes, o)
	}

	return nil
}

// SetPage of the assignedPageAttribute to the related item.
// Sets o.R.Page to related.
// Adds o to related.R.AssignedPageAttributes.
func (o *AssignedPageAttribute) SetPage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Page) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_page_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"page_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedPageAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PageID = related.ID
	if o.R == nil {
		o.R = &assignedPageAttributeR{
			Page: related,
		}
	} else {
		o.R.Page = related
	}

	if related.R == nil {
		related.R = &pageR{
			AssignedPageAttributes: AssignedPageAttributeSlice{o},
		}
	} else {
		related.R.AssignedPageAttributes = append(related.R.AssignedPageAttributes, o)
	}

	return nil
}

// AddAssignmentAssignedPageAttributeValues adds the given related objects to the existing relationships
// of the assigned_page_attribute, optionally inserting them as new records.
// Appends related to o.R.AssignmentAssignedPageAttributeValues.
// Sets related.R.Assignment appropriately.
func (o *AssignedPageAttribute) AddAssignmentAssignedPageAttributeValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedPageAttributeValue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssignmentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_page_attribute_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assignment_id"}),
				strmangle.WhereClause("\"", "\"", 2, assignedPageAttributeValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssignmentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &assignedPageAttributeR{
			AssignmentAssignedPageAttributeValues: related,
		}
	} else {
		o.R.AssignmentAssignedPageAttributeValues = append(o.R.AssignmentAssignedPageAttributeValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedPageAttributeValueR{
				Assignment: o,
			}
		} else {
			rel.R.Assignment = o
		}
	}
	return nil
}

// AssignedPageAttributes retrieves all the records using an executor.
func AssignedPageAttributes(mods ...qm.QueryMod) assignedPageAttributeQuery {
	mods = append(mods, qm.From("\"assigned_page_attributes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assigned_page_attributes\".*"})
	}

	return assignedPageAttributeQuery{q}
}

// FindAssignedPageAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignedPageAttribute(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AssignedPageAttribute, error) {
	assignedPageAttributeObj := &AssignedPageAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assigned_page_attributes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assignedPageAttributeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from assigned_page_attributes")
	}

	if err = assignedPageAttributeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assignedPageAttributeObj, err
	}

	return assignedPageAttributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssignedPageAttribute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assigned_page_attributes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedPageAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignedPageAttributeInsertCacheMut.RLock()
	cache, cached := assignedPageAttributeInsertCache[key]
	assignedPageAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignedPageAttributeAllColumns,
			assignedPageAttributeColumnsWithDefault,
			assignedPageAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assignedPageAttributeType, assignedPageAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignedPageAttributeType, assignedPageAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assigned_page_attributes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assigned_page_attributes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assigned_page_attributes")
	}

	if !cached {
		assignedPageAttributeInsertCacheMut.Lock()
		assignedPageAttributeInsertCache[key] = cache
		assignedPageAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssignedPageAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssignedPageAttribute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assignedPageAttributeUpdateCacheMut.RLock()
	cache, cached := assignedPageAttributeUpdateCache[key]
	assignedPageAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignedPageAttributeAllColumns,
			assignedPageAttributePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assigned_page_attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assigned_page_attributes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignedPageAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignedPageAttributeType, assignedPageAttributeMapping, append(wl, assignedPageAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assigned_page_attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assigned_page_attributes")
	}

	if !cached {
		assignedPageAttributeUpdateCacheMut.Lock()
		assignedPageAttributeUpdateCache[key] = cache
		assignedPageAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assignedPageAttributeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assigned_page_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assigned_page_attributes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignedPageAttributeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPageAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assigned_page_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignedPageAttributePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assignedPageAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assignedPageAttribute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssignedPageAttribute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assigned_page_attributes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedPageAttributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignedPageAttributeUpsertCacheMut.RLock()
	cache, cached := assignedPageAttributeUpsertCache[key]
	assignedPageAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assignedPageAttributeAllColumns,
			assignedPageAttributeColumnsWithDefault,
			assignedPageAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignedPageAttributeAllColumns,
			assignedPageAttributePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assigned_page_attributes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assignedPageAttributePrimaryKeyColumns))
			copy(conflict, assignedPageAttributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"assigned_page_attributes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assignedPageAttributeType, assignedPageAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignedPageAttributeType, assignedPageAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assigned_page_attributes")
	}

	if !cached {
		assignedPageAttributeUpsertCacheMut.Lock()
		assignedPageAttributeUpsertCache[key] = cache
		assignedPageAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssignedPageAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssignedPageAttribute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssignedPageAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignedPageAttributePrimaryKeyMapping)
	sql := "DELETE FROM \"assigned_page_attributes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assigned_page_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assigned_page_attributes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignedPageAttributeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assignedPageAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assigned_page_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assigned_page_attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignedPageAttributeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assignedPageAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPageAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assigned_page_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedPageAttributePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignedPageAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assigned_page_attributes")
	}

	if len(assignedPageAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssignedPageAttribute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssignedPageAttribute(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignedPageAttributeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignedPageAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPageAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assigned_page_attributes\".* FROM \"assigned_page_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedPageAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssignedPageAttributeSlice")
	}

	*o = slice

	return nil
}

// AssignedPageAttributeExists checks if the AssignedPageAttribute row exists.
func AssignedPageAttributeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assigned_page_attributes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assigned_page_attributes exists")
	}

	return exists, nil
}

// Exists checks if the AssignedPageAttribute row exists.
func (o *AssignedPageAttribute) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssignedPageAttributeExists(ctx, exec, o.ID)
}
