// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVoucherCategories(t *testing.T) {
	t.Parallel()

	query := VoucherCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVoucherCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VoucherCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VoucherCategoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if VoucherCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VoucherCategoryExists to return true, but got false.")
	}
}

func testVoucherCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	voucherCategoryFound, err := FindVoucherCategory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if voucherCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVoucherCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VoucherCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVoucherCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VoucherCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVoucherCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	voucherCategoryOne := &VoucherCategory{}
	voucherCategoryTwo := &VoucherCategory{}
	if err = randomize.Struct(seed, voucherCategoryOne, voucherCategoryDBTypes, false, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherCategoryTwo, voucherCategoryDBTypes, false, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoucherCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVoucherCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	voucherCategoryOne := &VoucherCategory{}
	voucherCategoryTwo := &VoucherCategory{}
	if err = randomize.Struct(seed, voucherCategoryOne, voucherCategoryDBTypes, false, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherCategoryTwo, voucherCategoryDBTypes, false, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func voucherCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCategory) error {
	*o = VoucherCategory{}
	return nil
}

func voucherCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCategory) error {
	*o = VoucherCategory{}
	return nil
}

func voucherCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCategory) error {
	*o = VoucherCategory{}
	return nil
}

func voucherCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCategory) error {
	*o = VoucherCategory{}
	return nil
}

func voucherCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCategory) error {
	*o = VoucherCategory{}
	return nil
}

func voucherCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCategory) error {
	*o = VoucherCategory{}
	return nil
}

func voucherCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCategory) error {
	*o = VoucherCategory{}
	return nil
}

func voucherCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCategory) error {
	*o = VoucherCategory{}
	return nil
}

func voucherCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherCategory) error {
	*o = VoucherCategory{}
	return nil
}

func testVoucherCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VoucherCategory{}
	o := &VoucherCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VoucherCategory object: %s", err)
	}

	AddVoucherCategoryHook(boil.BeforeInsertHook, voucherCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	voucherCategoryBeforeInsertHooks = []VoucherCategoryHook{}

	AddVoucherCategoryHook(boil.AfterInsertHook, voucherCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	voucherCategoryAfterInsertHooks = []VoucherCategoryHook{}

	AddVoucherCategoryHook(boil.AfterSelectHook, voucherCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	voucherCategoryAfterSelectHooks = []VoucherCategoryHook{}

	AddVoucherCategoryHook(boil.BeforeUpdateHook, voucherCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	voucherCategoryBeforeUpdateHooks = []VoucherCategoryHook{}

	AddVoucherCategoryHook(boil.AfterUpdateHook, voucherCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	voucherCategoryAfterUpdateHooks = []VoucherCategoryHook{}

	AddVoucherCategoryHook(boil.BeforeDeleteHook, voucherCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	voucherCategoryBeforeDeleteHooks = []VoucherCategoryHook{}

	AddVoucherCategoryHook(boil.AfterDeleteHook, voucherCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	voucherCategoryAfterDeleteHooks = []VoucherCategoryHook{}

	AddVoucherCategoryHook(boil.BeforeUpsertHook, voucherCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	voucherCategoryBeforeUpsertHooks = []VoucherCategoryHook{}

	AddVoucherCategoryHook(boil.AfterUpsertHook, voucherCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	voucherCategoryAfterUpsertHooks = []VoucherCategoryHook{}
}

func testVoucherCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(voucherCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherCategoryToOneCategoryUsingCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VoucherCategory
	var foreign Category

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CategoryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Category().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCategoryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Category) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VoucherCategorySlice{&local}
	if err = local.L.LoadCategory(ctx, tx, false, (*[]*VoucherCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVoucherCategoryToOneVoucherUsingVoucher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VoucherCategory
	var foreign Voucher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, voucherDBTypes, false, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.VoucherID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Voucher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddVoucherHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VoucherCategorySlice{&local}
	if err = local.L.LoadVoucher(ctx, tx, false, (*[]*VoucherCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Voucher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Voucher = nil
	if err = local.L.LoadVoucher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Voucher == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVoucherCategoryToOneSetOpCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherCategory
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherCategoryDBTypes, false, strmangle.SetComplement(voucherCategoryPrimaryKeyColumns, voucherCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VoucherCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.CategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CategoryID))
		reflect.Indirect(reflect.ValueOf(&a.CategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.CategoryID, x.ID)
		}
	}
}

func testVoucherCategoryToOneRemoveOpCategoryUsingCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherCategory
	var b Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherCategoryDBTypes, false, strmangle.SetComplement(voucherCategoryPrimaryKeyColumns, voucherCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCategory(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCategory(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Category().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Category != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CategoryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VoucherCategories) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVoucherCategoryToOneSetOpVoucherUsingVoucher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherCategory
	var b, c Voucher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherCategoryDBTypes, false, strmangle.SetComplement(voucherCategoryPrimaryKeyColumns, voucherCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Voucher{&b, &c} {
		err = a.SetVoucher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Voucher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VoucherCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.VoucherID, x.ID) {
			t.Error("foreign key was wrong value", a.VoucherID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VoucherID))
		reflect.Indirect(reflect.ValueOf(&a.VoucherID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.VoucherID, x.ID) {
			t.Error("foreign key was wrong value", a.VoucherID, x.ID)
		}
	}
}

func testVoucherCategoryToOneRemoveOpVoucherUsingVoucher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherCategory
	var b Voucher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherCategoryDBTypes, false, strmangle.SetComplement(voucherCategoryPrimaryKeyColumns, voucherCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetVoucher(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveVoucher(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Voucher().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Voucher != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.VoucherID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VoucherCategories) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testVoucherCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoucherCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoucherCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoucherCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	voucherCategoryDBTypes = map[string]string{`ID`: `character varying`, `VoucherID`: `character varying`, `CategoryID`: `character varying`, `CreateAt`: `bigint`}
	_                      = bytes.MinRead
)

func testVoucherCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(voucherCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(voucherCategoryAllColumns) == len(voucherCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVoucherCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(voucherCategoryAllColumns) == len(voucherCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoucherCategory{}
	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherCategoryDBTypes, true, voucherCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(voucherCategoryAllColumns, voucherCategoryPrimaryKeyColumns) {
		fields = voucherCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			voucherCategoryAllColumns,
			voucherCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VoucherCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVoucherCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(voucherCategoryAllColumns) == len(voucherCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VoucherCategory{}
	if err = randomize.Struct(seed, &o, voucherCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoucherCategory: %s", err)
	}

	count, err := VoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, voucherCategoryDBTypes, false, voucherCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoucherCategory: %s", err)
	}

	count, err = VoucherCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
