// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWarehouseShippingZones(t *testing.T) {
	t.Parallel()

	query := WarehouseShippingZones()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWarehouseShippingZonesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWarehouseShippingZonesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := WarehouseShippingZones().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWarehouseShippingZonesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WarehouseShippingZoneSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWarehouseShippingZonesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WarehouseShippingZoneExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if WarehouseShippingZone exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WarehouseShippingZoneExists to return true, but got false.")
	}
}

func testWarehouseShippingZonesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	warehouseShippingZoneFound, err := FindWarehouseShippingZone(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if warehouseShippingZoneFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWarehouseShippingZonesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = WarehouseShippingZones().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWarehouseShippingZonesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := WarehouseShippingZones().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWarehouseShippingZonesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	warehouseShippingZoneOne := &WarehouseShippingZone{}
	warehouseShippingZoneTwo := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, warehouseShippingZoneOne, warehouseShippingZoneDBTypes, false, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}
	if err = randomize.Struct(seed, warehouseShippingZoneTwo, warehouseShippingZoneDBTypes, false, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = warehouseShippingZoneOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = warehouseShippingZoneTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WarehouseShippingZones().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWarehouseShippingZonesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	warehouseShippingZoneOne := &WarehouseShippingZone{}
	warehouseShippingZoneTwo := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, warehouseShippingZoneOne, warehouseShippingZoneDBTypes, false, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}
	if err = randomize.Struct(seed, warehouseShippingZoneTwo, warehouseShippingZoneDBTypes, false, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = warehouseShippingZoneOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = warehouseShippingZoneTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func warehouseShippingZoneBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *WarehouseShippingZone) error {
	*o = WarehouseShippingZone{}
	return nil
}

func warehouseShippingZoneAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *WarehouseShippingZone) error {
	*o = WarehouseShippingZone{}
	return nil
}

func warehouseShippingZoneAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *WarehouseShippingZone) error {
	*o = WarehouseShippingZone{}
	return nil
}

func warehouseShippingZoneBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WarehouseShippingZone) error {
	*o = WarehouseShippingZone{}
	return nil
}

func warehouseShippingZoneAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WarehouseShippingZone) error {
	*o = WarehouseShippingZone{}
	return nil
}

func warehouseShippingZoneBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WarehouseShippingZone) error {
	*o = WarehouseShippingZone{}
	return nil
}

func warehouseShippingZoneAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WarehouseShippingZone) error {
	*o = WarehouseShippingZone{}
	return nil
}

func warehouseShippingZoneBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WarehouseShippingZone) error {
	*o = WarehouseShippingZone{}
	return nil
}

func warehouseShippingZoneAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WarehouseShippingZone) error {
	*o = WarehouseShippingZone{}
	return nil
}

func testWarehouseShippingZonesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &WarehouseShippingZone{}
	o := &WarehouseShippingZone{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone object: %s", err)
	}

	AddWarehouseShippingZoneHook(boil.BeforeInsertHook, warehouseShippingZoneBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	warehouseShippingZoneBeforeInsertHooks = []WarehouseShippingZoneHook{}

	AddWarehouseShippingZoneHook(boil.AfterInsertHook, warehouseShippingZoneAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	warehouseShippingZoneAfterInsertHooks = []WarehouseShippingZoneHook{}

	AddWarehouseShippingZoneHook(boil.AfterSelectHook, warehouseShippingZoneAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	warehouseShippingZoneAfterSelectHooks = []WarehouseShippingZoneHook{}

	AddWarehouseShippingZoneHook(boil.BeforeUpdateHook, warehouseShippingZoneBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	warehouseShippingZoneBeforeUpdateHooks = []WarehouseShippingZoneHook{}

	AddWarehouseShippingZoneHook(boil.AfterUpdateHook, warehouseShippingZoneAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	warehouseShippingZoneAfterUpdateHooks = []WarehouseShippingZoneHook{}

	AddWarehouseShippingZoneHook(boil.BeforeDeleteHook, warehouseShippingZoneBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	warehouseShippingZoneBeforeDeleteHooks = []WarehouseShippingZoneHook{}

	AddWarehouseShippingZoneHook(boil.AfterDeleteHook, warehouseShippingZoneAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	warehouseShippingZoneAfterDeleteHooks = []WarehouseShippingZoneHook{}

	AddWarehouseShippingZoneHook(boil.BeforeUpsertHook, warehouseShippingZoneBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	warehouseShippingZoneBeforeUpsertHooks = []WarehouseShippingZoneHook{}

	AddWarehouseShippingZoneHook(boil.AfterUpsertHook, warehouseShippingZoneAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	warehouseShippingZoneAfterUpsertHooks = []WarehouseShippingZoneHook{}
}

func testWarehouseShippingZonesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWarehouseShippingZonesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(warehouseShippingZoneColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := WarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWarehouseShippingZoneToOneShippingZoneUsingShippingzoneidShippingZone(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WarehouseShippingZone
	var foreign ShippingZone

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shippingZoneDBTypes, false, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Shippingzoneid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShippingzoneidShippingZone().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShippingZoneHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := WarehouseShippingZoneSlice{&local}
	if err = local.L.LoadShippingzoneidShippingZone(ctx, tx, false, (*[]*WarehouseShippingZone)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingzoneidShippingZone == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShippingzoneidShippingZone = nil
	if err = local.L.LoadShippingzoneidShippingZone(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingzoneidShippingZone == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testWarehouseShippingZoneToOneWarehouseUsingWarehouseidWarehouse(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WarehouseShippingZone
	var foreign Warehouse

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Warehouseid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.WarehouseidWarehouse().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddWarehouseHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := WarehouseShippingZoneSlice{&local}
	if err = local.L.LoadWarehouseidWarehouse(ctx, tx, false, (*[]*WarehouseShippingZone)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WarehouseidWarehouse == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.WarehouseidWarehouse = nil
	if err = local.L.LoadWarehouseidWarehouse(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WarehouseidWarehouse == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testWarehouseShippingZoneToOneSetOpShippingZoneUsingShippingzoneidShippingZone(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WarehouseShippingZone
	var b, c ShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseShippingZoneDBTypes, false, strmangle.SetComplement(warehouseShippingZonePrimaryKeyColumns, warehouseShippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShippingZone{&b, &c} {
		err = a.SetShippingzoneidShippingZone(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShippingzoneidShippingZone != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShippingzoneidWarehouseShippingZones[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Shippingzoneid, x.ID) {
			t.Error("foreign key was wrong value", a.Shippingzoneid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Shippingzoneid))
		reflect.Indirect(reflect.ValueOf(&a.Shippingzoneid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Shippingzoneid, x.ID) {
			t.Error("foreign key was wrong value", a.Shippingzoneid, x.ID)
		}
	}
}

func testWarehouseShippingZoneToOneRemoveOpShippingZoneUsingShippingzoneidShippingZone(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WarehouseShippingZone
	var b ShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseShippingZoneDBTypes, false, strmangle.SetComplement(warehouseShippingZonePrimaryKeyColumns, warehouseShippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetShippingzoneidShippingZone(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveShippingzoneidShippingZone(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ShippingzoneidShippingZone().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ShippingzoneidShippingZone != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Shippingzoneid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ShippingzoneidWarehouseShippingZones) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWarehouseShippingZoneToOneSetOpWarehouseUsingWarehouseidWarehouse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WarehouseShippingZone
	var b, c Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseShippingZoneDBTypes, false, strmangle.SetComplement(warehouseShippingZonePrimaryKeyColumns, warehouseShippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Warehouse{&b, &c} {
		err = a.SetWarehouseidWarehouse(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.WarehouseidWarehouse != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WarehouseidWarehouseShippingZones[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Warehouseid, x.ID) {
			t.Error("foreign key was wrong value", a.Warehouseid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Warehouseid))
		reflect.Indirect(reflect.ValueOf(&a.Warehouseid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Warehouseid, x.ID) {
			t.Error("foreign key was wrong value", a.Warehouseid, x.ID)
		}
	}
}

func testWarehouseShippingZoneToOneRemoveOpWarehouseUsingWarehouseidWarehouse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WarehouseShippingZone
	var b Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseShippingZoneDBTypes, false, strmangle.SetComplement(warehouseShippingZonePrimaryKeyColumns, warehouseShippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetWarehouseidWarehouse(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveWarehouseidWarehouse(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.WarehouseidWarehouse().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.WarehouseidWarehouse != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Warehouseid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.WarehouseidWarehouseShippingZones) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWarehouseShippingZonesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWarehouseShippingZonesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WarehouseShippingZoneSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWarehouseShippingZonesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WarehouseShippingZones().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	warehouseShippingZoneDBTypes = map[string]string{`ID`: `character varying`, `Warehouseid`: `character varying`, `Shippingzoneid`: `character varying`}
	_                            = bytes.MinRead
)

func testWarehouseShippingZonesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(warehouseShippingZonePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(warehouseShippingZoneAllColumns) == len(warehouseShippingZonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWarehouseShippingZonesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(warehouseShippingZoneAllColumns) == len(warehouseShippingZonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WarehouseShippingZone{}
	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, warehouseShippingZoneDBTypes, true, warehouseShippingZonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(warehouseShippingZoneAllColumns, warehouseShippingZonePrimaryKeyColumns) {
		fields = warehouseShippingZoneAllColumns
	} else {
		fields = strmangle.SetComplement(
			warehouseShippingZoneAllColumns,
			warehouseShippingZonePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WarehouseShippingZoneSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWarehouseShippingZonesUpsert(t *testing.T) {
	t.Parallel()

	if len(warehouseShippingZoneAllColumns) == len(warehouseShippingZonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := WarehouseShippingZone{}
	if err = randomize.Struct(seed, &o, warehouseShippingZoneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WarehouseShippingZone: %s", err)
	}

	count, err := WarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, warehouseShippingZoneDBTypes, false, warehouseShippingZonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WarehouseShippingZone struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WarehouseShippingZone: %s", err)
	}

	count, err = WarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
