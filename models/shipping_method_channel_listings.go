// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingMethodChannelListing is an object representing the database table.
type ShippingMethodChannelListing struct {
	ID                      string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Shippingmethodid        null.String  `boil:"shippingmethodid" json:"shippingmethodid,omitempty" toml:"shippingmethodid" yaml:"shippingmethodid,omitempty"`
	Channelid               null.String  `boil:"channelid" json:"channelid,omitempty" toml:"channelid" yaml:"channelid,omitempty"`
	Minimumorderpriceamount null.Float64 `boil:"minimumorderpriceamount" json:"minimumorderpriceamount,omitempty" toml:"minimumorderpriceamount" yaml:"minimumorderpriceamount,omitempty"`
	Currency                null.String  `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	Maximumorderpriceamount null.Float64 `boil:"maximumorderpriceamount" json:"maximumorderpriceamount,omitempty" toml:"maximumorderpriceamount" yaml:"maximumorderpriceamount,omitempty"`
	Priceamount             null.Float64 `boil:"priceamount" json:"priceamount,omitempty" toml:"priceamount" yaml:"priceamount,omitempty"`
	Createat                null.Int64   `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`

	R *shippingMethodChannelListingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingMethodChannelListingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingMethodChannelListingColumns = struct {
	ID                      string
	Shippingmethodid        string
	Channelid               string
	Minimumorderpriceamount string
	Currency                string
	Maximumorderpriceamount string
	Priceamount             string
	Createat                string
}{
	ID:                      "id",
	Shippingmethodid:        "shippingmethodid",
	Channelid:               "channelid",
	Minimumorderpriceamount: "minimumorderpriceamount",
	Currency:                "currency",
	Maximumorderpriceamount: "maximumorderpriceamount",
	Priceamount:             "priceamount",
	Createat:                "createat",
}

var ShippingMethodChannelListingTableColumns = struct {
	ID                      string
	Shippingmethodid        string
	Channelid               string
	Minimumorderpriceamount string
	Currency                string
	Maximumorderpriceamount string
	Priceamount             string
	Createat                string
}{
	ID:                      "shipping_method_channel_listings.id",
	Shippingmethodid:        "shipping_method_channel_listings.shippingmethodid",
	Channelid:               "shipping_method_channel_listings.channelid",
	Minimumorderpriceamount: "shipping_method_channel_listings.minimumorderpriceamount",
	Currency:                "shipping_method_channel_listings.currency",
	Maximumorderpriceamount: "shipping_method_channel_listings.maximumorderpriceamount",
	Priceamount:             "shipping_method_channel_listings.priceamount",
	Createat:                "shipping_method_channel_listings.createat",
}

// Generated where

var ShippingMethodChannelListingWhere = struct {
	ID                      whereHelperstring
	Shippingmethodid        whereHelpernull_String
	Channelid               whereHelpernull_String
	Minimumorderpriceamount whereHelpernull_Float64
	Currency                whereHelpernull_String
	Maximumorderpriceamount whereHelpernull_Float64
	Priceamount             whereHelpernull_Float64
	Createat                whereHelpernull_Int64
}{
	ID:                      whereHelperstring{field: "\"shipping_method_channel_listings\".\"id\""},
	Shippingmethodid:        whereHelpernull_String{field: "\"shipping_method_channel_listings\".\"shippingmethodid\""},
	Channelid:               whereHelpernull_String{field: "\"shipping_method_channel_listings\".\"channelid\""},
	Minimumorderpriceamount: whereHelpernull_Float64{field: "\"shipping_method_channel_listings\".\"minimumorderpriceamount\""},
	Currency:                whereHelpernull_String{field: "\"shipping_method_channel_listings\".\"currency\""},
	Maximumorderpriceamount: whereHelpernull_Float64{field: "\"shipping_method_channel_listings\".\"maximumorderpriceamount\""},
	Priceamount:             whereHelpernull_Float64{field: "\"shipping_method_channel_listings\".\"priceamount\""},
	Createat:                whereHelpernull_Int64{field: "\"shipping_method_channel_listings\".\"createat\""},
}

// ShippingMethodChannelListingRels is where relationship names are stored.
var ShippingMethodChannelListingRels = struct {
	ChannelidChannel               string
	ShippingmethodidShippingMethod string
}{
	ChannelidChannel:               "ChannelidChannel",
	ShippingmethodidShippingMethod: "ShippingmethodidShippingMethod",
}

// shippingMethodChannelListingR is where relationships are stored.
type shippingMethodChannelListingR struct {
	ChannelidChannel               *Channel        `boil:"ChannelidChannel" json:"ChannelidChannel" toml:"ChannelidChannel" yaml:"ChannelidChannel"`
	ShippingmethodidShippingMethod *ShippingMethod `boil:"ShippingmethodidShippingMethod" json:"ShippingmethodidShippingMethod" toml:"ShippingmethodidShippingMethod" yaml:"ShippingmethodidShippingMethod"`
}

// NewStruct creates a new relationship struct
func (*shippingMethodChannelListingR) NewStruct() *shippingMethodChannelListingR {
	return &shippingMethodChannelListingR{}
}

func (r *shippingMethodChannelListingR) GetChannelidChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.ChannelidChannel
}

func (r *shippingMethodChannelListingR) GetShippingmethodidShippingMethod() *ShippingMethod {
	if r == nil {
		return nil
	}
	return r.ShippingmethodidShippingMethod
}

// shippingMethodChannelListingL is where Load methods for each relationship are stored.
type shippingMethodChannelListingL struct{}

var (
	shippingMethodChannelListingAllColumns            = []string{"id", "shippingmethodid", "channelid", "minimumorderpriceamount", "currency", "maximumorderpriceamount", "priceamount", "createat"}
	shippingMethodChannelListingColumnsWithoutDefault = []string{"id"}
	shippingMethodChannelListingColumnsWithDefault    = []string{"shippingmethodid", "channelid", "minimumorderpriceamount", "currency", "maximumorderpriceamount", "priceamount", "createat"}
	shippingMethodChannelListingPrimaryKeyColumns     = []string{"id"}
	shippingMethodChannelListingGeneratedColumns      = []string{}
)

type (
	// ShippingMethodChannelListingSlice is an alias for a slice of pointers to ShippingMethodChannelListing.
	// This should almost always be used instead of []ShippingMethodChannelListing.
	ShippingMethodChannelListingSlice []*ShippingMethodChannelListing
	// ShippingMethodChannelListingHook is the signature for custom ShippingMethodChannelListing hook methods
	ShippingMethodChannelListingHook func(context.Context, boil.ContextExecutor, *ShippingMethodChannelListing) error

	shippingMethodChannelListingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingMethodChannelListingType                 = reflect.TypeOf(&ShippingMethodChannelListing{})
	shippingMethodChannelListingMapping              = queries.MakeStructMapping(shippingMethodChannelListingType)
	shippingMethodChannelListingPrimaryKeyMapping, _ = queries.BindMapping(shippingMethodChannelListingType, shippingMethodChannelListingMapping, shippingMethodChannelListingPrimaryKeyColumns)
	shippingMethodChannelListingInsertCacheMut       sync.RWMutex
	shippingMethodChannelListingInsertCache          = make(map[string]insertCache)
	shippingMethodChannelListingUpdateCacheMut       sync.RWMutex
	shippingMethodChannelListingUpdateCache          = make(map[string]updateCache)
	shippingMethodChannelListingUpsertCacheMut       sync.RWMutex
	shippingMethodChannelListingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shippingMethodChannelListingAfterSelectHooks []ShippingMethodChannelListingHook

var shippingMethodChannelListingBeforeInsertHooks []ShippingMethodChannelListingHook
var shippingMethodChannelListingAfterInsertHooks []ShippingMethodChannelListingHook

var shippingMethodChannelListingBeforeUpdateHooks []ShippingMethodChannelListingHook
var shippingMethodChannelListingAfterUpdateHooks []ShippingMethodChannelListingHook

var shippingMethodChannelListingBeforeDeleteHooks []ShippingMethodChannelListingHook
var shippingMethodChannelListingAfterDeleteHooks []ShippingMethodChannelListingHook

var shippingMethodChannelListingBeforeUpsertHooks []ShippingMethodChannelListingHook
var shippingMethodChannelListingAfterUpsertHooks []ShippingMethodChannelListingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShippingMethodChannelListing) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodChannelListingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShippingMethodChannelListing) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodChannelListingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShippingMethodChannelListing) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodChannelListingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShippingMethodChannelListing) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodChannelListingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShippingMethodChannelListing) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodChannelListingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShippingMethodChannelListing) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodChannelListingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShippingMethodChannelListing) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodChannelListingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShippingMethodChannelListing) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodChannelListingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShippingMethodChannelListing) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodChannelListingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShippingMethodChannelListingHook registers your hook function for all future operations.
func AddShippingMethodChannelListingHook(hookPoint boil.HookPoint, shippingMethodChannelListingHook ShippingMethodChannelListingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shippingMethodChannelListingAfterSelectHooks = append(shippingMethodChannelListingAfterSelectHooks, shippingMethodChannelListingHook)
	case boil.BeforeInsertHook:
		shippingMethodChannelListingBeforeInsertHooks = append(shippingMethodChannelListingBeforeInsertHooks, shippingMethodChannelListingHook)
	case boil.AfterInsertHook:
		shippingMethodChannelListingAfterInsertHooks = append(shippingMethodChannelListingAfterInsertHooks, shippingMethodChannelListingHook)
	case boil.BeforeUpdateHook:
		shippingMethodChannelListingBeforeUpdateHooks = append(shippingMethodChannelListingBeforeUpdateHooks, shippingMethodChannelListingHook)
	case boil.AfterUpdateHook:
		shippingMethodChannelListingAfterUpdateHooks = append(shippingMethodChannelListingAfterUpdateHooks, shippingMethodChannelListingHook)
	case boil.BeforeDeleteHook:
		shippingMethodChannelListingBeforeDeleteHooks = append(shippingMethodChannelListingBeforeDeleteHooks, shippingMethodChannelListingHook)
	case boil.AfterDeleteHook:
		shippingMethodChannelListingAfterDeleteHooks = append(shippingMethodChannelListingAfterDeleteHooks, shippingMethodChannelListingHook)
	case boil.BeforeUpsertHook:
		shippingMethodChannelListingBeforeUpsertHooks = append(shippingMethodChannelListingBeforeUpsertHooks, shippingMethodChannelListingHook)
	case boil.AfterUpsertHook:
		shippingMethodChannelListingAfterUpsertHooks = append(shippingMethodChannelListingAfterUpsertHooks, shippingMethodChannelListingHook)
	}
}

// One returns a single shippingMethodChannelListing record from the query.
func (q shippingMethodChannelListingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShippingMethodChannelListing, error) {
	o := &ShippingMethodChannelListing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shipping_method_channel_listings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShippingMethodChannelListing records from the query.
func (q shippingMethodChannelListingQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShippingMethodChannelListingSlice, error) {
	var o []*ShippingMethodChannelListing

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShippingMethodChannelListing slice")
	}

	if len(shippingMethodChannelListingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShippingMethodChannelListing records in the query.
func (q shippingMethodChannelListingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shipping_method_channel_listings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingMethodChannelListingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shipping_method_channel_listings exists")
	}

	return count > 0, nil
}

// ChannelidChannel pointed to by the foreign key.
func (o *ShippingMethodChannelListing) ChannelidChannel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Channelid),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// ShippingmethodidShippingMethod pointed to by the foreign key.
func (o *ShippingMethodChannelListing) ShippingmethodidShippingMethod(mods ...qm.QueryMod) shippingMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Shippingmethodid),
	}

	queryMods = append(queryMods, mods...)

	return ShippingMethods(queryMods...)
}

// LoadChannelidChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shippingMethodChannelListingL) LoadChannelidChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethodChannelListing interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethodChannelListing
	var object *ShippingMethodChannelListing

	if singular {
		var ok bool
		object, ok = maybeShippingMethodChannelListing.(*ShippingMethodChannelListing)
		if !ok {
			object = new(ShippingMethodChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethodChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethodChannelListing))
			}
		}
	} else {
		s, ok := maybeShippingMethodChannelListing.(*[]*ShippingMethodChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethodChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethodChannelListing))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodChannelListingR{}
		}
		if !queries.IsNil(object.Channelid) {
			args = append(args, object.Channelid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodChannelListingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Channelid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Channelid) {
				args = append(args, obj.Channelid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChannelidChannel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.ChannelidShippingMethodChannelListings = append(foreign.R.ChannelidShippingMethodChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Channelid, foreign.ID) {
				local.R.ChannelidChannel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.ChannelidShippingMethodChannelListings = append(foreign.R.ChannelidShippingMethodChannelListings, local)
				break
			}
		}
	}

	return nil
}

// LoadShippingmethodidShippingMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shippingMethodChannelListingL) LoadShippingmethodidShippingMethod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethodChannelListing interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethodChannelListing
	var object *ShippingMethodChannelListing

	if singular {
		var ok bool
		object, ok = maybeShippingMethodChannelListing.(*ShippingMethodChannelListing)
		if !ok {
			object = new(ShippingMethodChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethodChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethodChannelListing))
			}
		}
	} else {
		s, ok := maybeShippingMethodChannelListing.(*[]*ShippingMethodChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethodChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethodChannelListing))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodChannelListingR{}
		}
		if !queries.IsNil(object.Shippingmethodid) {
			args = append(args, object.Shippingmethodid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodChannelListingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Shippingmethodid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Shippingmethodid) {
				args = append(args, obj.Shippingmethodid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_methods`),
		qm.WhereIn(`shipping_methods.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingMethod")
	}

	var resultSlice []*ShippingMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_methods")
	}

	if len(shippingMethodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingmethodidShippingMethod = foreign
		if foreign.R == nil {
			foreign.R = &shippingMethodR{}
		}
		foreign.R.ShippingmethodidShippingMethodChannelListings = append(foreign.R.ShippingmethodidShippingMethodChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Shippingmethodid, foreign.ID) {
				local.R.ShippingmethodidShippingMethod = foreign
				if foreign.R == nil {
					foreign.R = &shippingMethodR{}
				}
				foreign.R.ShippingmethodidShippingMethodChannelListings = append(foreign.R.ShippingmethodidShippingMethodChannelListings, local)
				break
			}
		}
	}

	return nil
}

// SetChannelidChannel of the shippingMethodChannelListing to the related item.
// Sets o.R.ChannelidChannel to related.
// Adds o to related.R.ChannelidShippingMethodChannelListings.
func (o *ShippingMethodChannelListing) SetChannelidChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shipping_method_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
		strmangle.WhereClause("\"", "\"", 2, shippingMethodChannelListingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Channelid, related.ID)
	if o.R == nil {
		o.R = &shippingMethodChannelListingR{
			ChannelidChannel: related,
		}
	} else {
		o.R.ChannelidChannel = related
	}

	if related.R == nil {
		related.R = &channelR{
			ChannelidShippingMethodChannelListings: ShippingMethodChannelListingSlice{o},
		}
	} else {
		related.R.ChannelidShippingMethodChannelListings = append(related.R.ChannelidShippingMethodChannelListings, o)
	}

	return nil
}

// RemoveChannelidChannel relationship.
// Sets o.R.ChannelidChannel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ShippingMethodChannelListing) RemoveChannelidChannel(ctx context.Context, exec boil.ContextExecutor, related *Channel) error {
	var err error

	queries.SetScanner(&o.Channelid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ChannelidChannel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChannelidShippingMethodChannelListings {
		if queries.Equal(o.Channelid, ri.Channelid) {
			continue
		}

		ln := len(related.R.ChannelidShippingMethodChannelListings)
		if ln > 1 && i < ln-1 {
			related.R.ChannelidShippingMethodChannelListings[i] = related.R.ChannelidShippingMethodChannelListings[ln-1]
		}
		related.R.ChannelidShippingMethodChannelListings = related.R.ChannelidShippingMethodChannelListings[:ln-1]
		break
	}
	return nil
}

// SetShippingmethodidShippingMethod of the shippingMethodChannelListing to the related item.
// Sets o.R.ShippingmethodidShippingMethod to related.
// Adds o to related.R.ShippingmethodidShippingMethodChannelListings.
func (o *ShippingMethodChannelListing) SetShippingmethodidShippingMethod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShippingMethod) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shipping_method_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shippingmethodid"}),
		strmangle.WhereClause("\"", "\"", 2, shippingMethodChannelListingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Shippingmethodid, related.ID)
	if o.R == nil {
		o.R = &shippingMethodChannelListingR{
			ShippingmethodidShippingMethod: related,
		}
	} else {
		o.R.ShippingmethodidShippingMethod = related
	}

	if related.R == nil {
		related.R = &shippingMethodR{
			ShippingmethodidShippingMethodChannelListings: ShippingMethodChannelListingSlice{o},
		}
	} else {
		related.R.ShippingmethodidShippingMethodChannelListings = append(related.R.ShippingmethodidShippingMethodChannelListings, o)
	}

	return nil
}

// RemoveShippingmethodidShippingMethod relationship.
// Sets o.R.ShippingmethodidShippingMethod to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ShippingMethodChannelListing) RemoveShippingmethodidShippingMethod(ctx context.Context, exec boil.ContextExecutor, related *ShippingMethod) error {
	var err error

	queries.SetScanner(&o.Shippingmethodid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("shippingmethodid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ShippingmethodidShippingMethod = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ShippingmethodidShippingMethodChannelListings {
		if queries.Equal(o.Shippingmethodid, ri.Shippingmethodid) {
			continue
		}

		ln := len(related.R.ShippingmethodidShippingMethodChannelListings)
		if ln > 1 && i < ln-1 {
			related.R.ShippingmethodidShippingMethodChannelListings[i] = related.R.ShippingmethodidShippingMethodChannelListings[ln-1]
		}
		related.R.ShippingmethodidShippingMethodChannelListings = related.R.ShippingmethodidShippingMethodChannelListings[:ln-1]
		break
	}
	return nil
}

// ShippingMethodChannelListings retrieves all the records using an executor.
func ShippingMethodChannelListings(mods ...qm.QueryMod) shippingMethodChannelListingQuery {
	mods = append(mods, qm.From("\"shipping_method_channel_listings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_method_channel_listings\".*"})
	}

	return shippingMethodChannelListingQuery{q}
}

// FindShippingMethodChannelListing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingMethodChannelListing(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ShippingMethodChannelListing, error) {
	shippingMethodChannelListingObj := &ShippingMethodChannelListing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_method_channel_listings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shippingMethodChannelListingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shipping_method_channel_listings")
	}

	if err = shippingMethodChannelListingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shippingMethodChannelListingObj, err
	}

	return shippingMethodChannelListingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingMethodChannelListing) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shipping_method_channel_listings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodChannelListingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingMethodChannelListingInsertCacheMut.RLock()
	cache, cached := shippingMethodChannelListingInsertCache[key]
	shippingMethodChannelListingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingMethodChannelListingAllColumns,
			shippingMethodChannelListingColumnsWithDefault,
			shippingMethodChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingMethodChannelListingType, shippingMethodChannelListingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingMethodChannelListingType, shippingMethodChannelListingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_method_channel_listings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_method_channel_listings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shipping_method_channel_listings")
	}

	if !cached {
		shippingMethodChannelListingInsertCacheMut.Lock()
		shippingMethodChannelListingInsertCache[key] = cache
		shippingMethodChannelListingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShippingMethodChannelListing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingMethodChannelListing) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shippingMethodChannelListingUpdateCacheMut.RLock()
	cache, cached := shippingMethodChannelListingUpdateCache[key]
	shippingMethodChannelListingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingMethodChannelListingAllColumns,
			shippingMethodChannelListingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shipping_method_channel_listings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_method_channel_listings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingMethodChannelListingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingMethodChannelListingType, shippingMethodChannelListingMapping, append(wl, shippingMethodChannelListingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shipping_method_channel_listings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shipping_method_channel_listings")
	}

	if !cached {
		shippingMethodChannelListingUpdateCacheMut.Lock()
		shippingMethodChannelListingUpdateCache[key] = cache
		shippingMethodChannelListingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shippingMethodChannelListingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shipping_method_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shipping_method_channel_listings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingMethodChannelListingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_method_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingMethodChannelListingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shippingMethodChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shippingMethodChannelListing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingMethodChannelListing) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shipping_method_channel_listings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodChannelListingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingMethodChannelListingUpsertCacheMut.RLock()
	cache, cached := shippingMethodChannelListingUpsertCache[key]
	shippingMethodChannelListingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shippingMethodChannelListingAllColumns,
			shippingMethodChannelListingColumnsWithDefault,
			shippingMethodChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingMethodChannelListingAllColumns,
			shippingMethodChannelListingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shipping_method_channel_listings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shippingMethodChannelListingPrimaryKeyColumns))
			copy(conflict, shippingMethodChannelListingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_method_channel_listings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shippingMethodChannelListingType, shippingMethodChannelListingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingMethodChannelListingType, shippingMethodChannelListingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shipping_method_channel_listings")
	}

	if !cached {
		shippingMethodChannelListingUpsertCacheMut.Lock()
		shippingMethodChannelListingUpsertCache[key] = cache
		shippingMethodChannelListingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShippingMethodChannelListing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingMethodChannelListing) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShippingMethodChannelListing provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingMethodChannelListingPrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_method_channel_listings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shipping_method_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shipping_method_channel_listings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingMethodChannelListingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shippingMethodChannelListingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shipping_method_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shipping_method_channel_listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingMethodChannelListingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shippingMethodChannelListingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_method_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodChannelListingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shippingMethodChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shipping_method_channel_listings")
	}

	if len(shippingMethodChannelListingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingMethodChannelListing) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShippingMethodChannelListing(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingMethodChannelListingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingMethodChannelListingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_method_channel_listings\".* FROM \"shipping_method_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodChannelListingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShippingMethodChannelListingSlice")
	}

	*o = slice

	return nil
}

// ShippingMethodChannelListingExists checks if the ShippingMethodChannelListing row exists.
func ShippingMethodChannelListingExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_method_channel_listings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shipping_method_channel_listings exists")
	}

	return exists, nil
}

// Exists checks if the ShippingMethodChannelListing row exists.
func (o *ShippingMethodChannelListing) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShippingMethodChannelListingExists(ctx, exec, o.ID)
}
