// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DigitalContent is an object representing the database table.
type DigitalContent struct {
	ID                   string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Usedefaultsettings   null.Bool   `boil:"usedefaultsettings" json:"usedefaultsettings,omitempty" toml:"usedefaultsettings" yaml:"usedefaultsettings,omitempty"`
	Automaticfulfillment null.Bool   `boil:"automaticfulfillment" json:"automaticfulfillment,omitempty" toml:"automaticfulfillment" yaml:"automaticfulfillment,omitempty"`
	Contenttype          null.String `boil:"contenttype" json:"contenttype,omitempty" toml:"contenttype" yaml:"contenttype,omitempty"`
	Productvariantid     null.String `boil:"productvariantid" json:"productvariantid,omitempty" toml:"productvariantid" yaml:"productvariantid,omitempty"`
	Contentfile          null.String `boil:"contentfile" json:"contentfile,omitempty" toml:"contentfile" yaml:"contentfile,omitempty"`
	Maxdownloads         null.Int    `boil:"maxdownloads" json:"maxdownloads,omitempty" toml:"maxdownloads" yaml:"maxdownloads,omitempty"`
	Urlvaliddays         null.Int    `boil:"urlvaliddays" json:"urlvaliddays,omitempty" toml:"urlvaliddays" yaml:"urlvaliddays,omitempty"`
	Metadata             null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata      null.JSON   `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *digitalContentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L digitalContentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DigitalContentColumns = struct {
	ID                   string
	Usedefaultsettings   string
	Automaticfulfillment string
	Contenttype          string
	Productvariantid     string
	Contentfile          string
	Maxdownloads         string
	Urlvaliddays         string
	Metadata             string
	Privatemetadata      string
}{
	ID:                   "id",
	Usedefaultsettings:   "usedefaultsettings",
	Automaticfulfillment: "automaticfulfillment",
	Contenttype:          "contenttype",
	Productvariantid:     "productvariantid",
	Contentfile:          "contentfile",
	Maxdownloads:         "maxdownloads",
	Urlvaliddays:         "urlvaliddays",
	Metadata:             "metadata",
	Privatemetadata:      "privatemetadata",
}

var DigitalContentTableColumns = struct {
	ID                   string
	Usedefaultsettings   string
	Automaticfulfillment string
	Contenttype          string
	Productvariantid     string
	Contentfile          string
	Maxdownloads         string
	Urlvaliddays         string
	Metadata             string
	Privatemetadata      string
}{
	ID:                   "digital_contents.id",
	Usedefaultsettings:   "digital_contents.usedefaultsettings",
	Automaticfulfillment: "digital_contents.automaticfulfillment",
	Contenttype:          "digital_contents.contenttype",
	Productvariantid:     "digital_contents.productvariantid",
	Contentfile:          "digital_contents.contentfile",
	Maxdownloads:         "digital_contents.maxdownloads",
	Urlvaliddays:         "digital_contents.urlvaliddays",
	Metadata:             "digital_contents.metadata",
	Privatemetadata:      "digital_contents.privatemetadata",
}

// Generated where

var DigitalContentWhere = struct {
	ID                   whereHelperstring
	Usedefaultsettings   whereHelpernull_Bool
	Automaticfulfillment whereHelpernull_Bool
	Contenttype          whereHelpernull_String
	Productvariantid     whereHelpernull_String
	Contentfile          whereHelpernull_String
	Maxdownloads         whereHelpernull_Int
	Urlvaliddays         whereHelpernull_Int
	Metadata             whereHelpernull_JSON
	Privatemetadata      whereHelpernull_JSON
}{
	ID:                   whereHelperstring{field: "\"digital_contents\".\"id\""},
	Usedefaultsettings:   whereHelpernull_Bool{field: "\"digital_contents\".\"usedefaultsettings\""},
	Automaticfulfillment: whereHelpernull_Bool{field: "\"digital_contents\".\"automaticfulfillment\""},
	Contenttype:          whereHelpernull_String{field: "\"digital_contents\".\"contenttype\""},
	Productvariantid:     whereHelpernull_String{field: "\"digital_contents\".\"productvariantid\""},
	Contentfile:          whereHelpernull_String{field: "\"digital_contents\".\"contentfile\""},
	Maxdownloads:         whereHelpernull_Int{field: "\"digital_contents\".\"maxdownloads\""},
	Urlvaliddays:         whereHelpernull_Int{field: "\"digital_contents\".\"urlvaliddays\""},
	Metadata:             whereHelpernull_JSON{field: "\"digital_contents\".\"metadata\""},
	Privatemetadata:      whereHelpernull_JSON{field: "\"digital_contents\".\"privatemetadata\""},
}

// DigitalContentRels is where relationship names are stored.
var DigitalContentRels = struct {
	ProductvariantidProductVariant string
	ContentidDigitalContentUrls    string
}{
	ProductvariantidProductVariant: "ProductvariantidProductVariant",
	ContentidDigitalContentUrls:    "ContentidDigitalContentUrls",
}

// digitalContentR is where relationships are stored.
type digitalContentR struct {
	ProductvariantidProductVariant *ProductVariant        `boil:"ProductvariantidProductVariant" json:"ProductvariantidProductVariant" toml:"ProductvariantidProductVariant" yaml:"ProductvariantidProductVariant"`
	ContentidDigitalContentUrls    DigitalContentURLSlice `boil:"ContentidDigitalContentUrls" json:"ContentidDigitalContentUrls" toml:"ContentidDigitalContentUrls" yaml:"ContentidDigitalContentUrls"`
}

// NewStruct creates a new relationship struct
func (*digitalContentR) NewStruct() *digitalContentR {
	return &digitalContentR{}
}

func (r *digitalContentR) GetProductvariantidProductVariant() *ProductVariant {
	if r == nil {
		return nil
	}
	return r.ProductvariantidProductVariant
}

func (r *digitalContentR) GetContentidDigitalContentUrls() DigitalContentURLSlice {
	if r == nil {
		return nil
	}
	return r.ContentidDigitalContentUrls
}

// digitalContentL is where Load methods for each relationship are stored.
type digitalContentL struct{}

var (
	digitalContentAllColumns            = []string{"id", "usedefaultsettings", "automaticfulfillment", "contenttype", "productvariantid", "contentfile", "maxdownloads", "urlvaliddays", "metadata", "privatemetadata"}
	digitalContentColumnsWithoutDefault = []string{"id"}
	digitalContentColumnsWithDefault    = []string{"usedefaultsettings", "automaticfulfillment", "contenttype", "productvariantid", "contentfile", "maxdownloads", "urlvaliddays", "metadata", "privatemetadata"}
	digitalContentPrimaryKeyColumns     = []string{"id"}
	digitalContentGeneratedColumns      = []string{}
)

type (
	// DigitalContentSlice is an alias for a slice of pointers to DigitalContent.
	// This should almost always be used instead of []DigitalContent.
	DigitalContentSlice []*DigitalContent
	// DigitalContentHook is the signature for custom DigitalContent hook methods
	DigitalContentHook func(context.Context, boil.ContextExecutor, *DigitalContent) error

	digitalContentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	digitalContentType                 = reflect.TypeOf(&DigitalContent{})
	digitalContentMapping              = queries.MakeStructMapping(digitalContentType)
	digitalContentPrimaryKeyMapping, _ = queries.BindMapping(digitalContentType, digitalContentMapping, digitalContentPrimaryKeyColumns)
	digitalContentInsertCacheMut       sync.RWMutex
	digitalContentInsertCache          = make(map[string]insertCache)
	digitalContentUpdateCacheMut       sync.RWMutex
	digitalContentUpdateCache          = make(map[string]updateCache)
	digitalContentUpsertCacheMut       sync.RWMutex
	digitalContentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var digitalContentAfterSelectHooks []DigitalContentHook

var digitalContentBeforeInsertHooks []DigitalContentHook
var digitalContentAfterInsertHooks []DigitalContentHook

var digitalContentBeforeUpdateHooks []DigitalContentHook
var digitalContentAfterUpdateHooks []DigitalContentHook

var digitalContentBeforeDeleteHooks []DigitalContentHook
var digitalContentAfterDeleteHooks []DigitalContentHook

var digitalContentBeforeUpsertHooks []DigitalContentHook
var digitalContentAfterUpsertHooks []DigitalContentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DigitalContent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DigitalContent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DigitalContent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DigitalContent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DigitalContent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DigitalContent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DigitalContent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DigitalContent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DigitalContent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range digitalContentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDigitalContentHook registers your hook function for all future operations.
func AddDigitalContentHook(hookPoint boil.HookPoint, digitalContentHook DigitalContentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		digitalContentAfterSelectHooks = append(digitalContentAfterSelectHooks, digitalContentHook)
	case boil.BeforeInsertHook:
		digitalContentBeforeInsertHooks = append(digitalContentBeforeInsertHooks, digitalContentHook)
	case boil.AfterInsertHook:
		digitalContentAfterInsertHooks = append(digitalContentAfterInsertHooks, digitalContentHook)
	case boil.BeforeUpdateHook:
		digitalContentBeforeUpdateHooks = append(digitalContentBeforeUpdateHooks, digitalContentHook)
	case boil.AfterUpdateHook:
		digitalContentAfterUpdateHooks = append(digitalContentAfterUpdateHooks, digitalContentHook)
	case boil.BeforeDeleteHook:
		digitalContentBeforeDeleteHooks = append(digitalContentBeforeDeleteHooks, digitalContentHook)
	case boil.AfterDeleteHook:
		digitalContentAfterDeleteHooks = append(digitalContentAfterDeleteHooks, digitalContentHook)
	case boil.BeforeUpsertHook:
		digitalContentBeforeUpsertHooks = append(digitalContentBeforeUpsertHooks, digitalContentHook)
	case boil.AfterUpsertHook:
		digitalContentAfterUpsertHooks = append(digitalContentAfterUpsertHooks, digitalContentHook)
	}
}

// One returns a single digitalContent record from the query.
func (q digitalContentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DigitalContent, error) {
	o := &DigitalContent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for digital_contents")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DigitalContent records from the query.
func (q digitalContentQuery) All(ctx context.Context, exec boil.ContextExecutor) (DigitalContentSlice, error) {
	var o []*DigitalContent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DigitalContent slice")
	}

	if len(digitalContentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DigitalContent records in the query.
func (q digitalContentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count digital_contents rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q digitalContentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if digital_contents exists")
	}

	return count > 0, nil
}

// ProductvariantidProductVariant pointed to by the foreign key.
func (o *DigitalContent) ProductvariantidProductVariant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Productvariantid),
	}

	queryMods = append(queryMods, mods...)

	return ProductVariants(queryMods...)
}

// ContentidDigitalContentUrls retrieves all the digital_content_url's DigitalContentUrls with an executor via contentid column.
func (o *DigitalContent) ContentidDigitalContentUrls(mods ...qm.QueryMod) digitalContentURLQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"digital_content_urls\".\"contentid\"=?", o.ID),
	)

	return DigitalContentUrls(queryMods...)
}

// LoadProductvariantidProductVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (digitalContentL) LoadProductvariantidProductVariant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDigitalContent interface{}, mods queries.Applicator) error {
	var slice []*DigitalContent
	var object *DigitalContent

	if singular {
		var ok bool
		object, ok = maybeDigitalContent.(*DigitalContent)
		if !ok {
			object = new(DigitalContent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDigitalContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDigitalContent))
			}
		}
	} else {
		s, ok := maybeDigitalContent.(*[]*DigitalContent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDigitalContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDigitalContent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &digitalContentR{}
		}
		if !queries.IsNil(object.Productvariantid) {
			args = append(args, object.Productvariantid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &digitalContentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Productvariantid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Productvariantid) {
				args = append(args, obj.Productvariantid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductvariantidProductVariant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.ProductvariantidDigitalContents = append(foreign.R.ProductvariantidDigitalContents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Productvariantid, foreign.ID) {
				local.R.ProductvariantidProductVariant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.ProductvariantidDigitalContents = append(foreign.R.ProductvariantidDigitalContents, local)
				break
			}
		}
	}

	return nil
}

// LoadContentidDigitalContentUrls allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (digitalContentL) LoadContentidDigitalContentUrls(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDigitalContent interface{}, mods queries.Applicator) error {
	var slice []*DigitalContent
	var object *DigitalContent

	if singular {
		var ok bool
		object, ok = maybeDigitalContent.(*DigitalContent)
		if !ok {
			object = new(DigitalContent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDigitalContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDigitalContent))
			}
		}
	} else {
		s, ok := maybeDigitalContent.(*[]*DigitalContent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDigitalContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDigitalContent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &digitalContentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &digitalContentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`digital_content_urls`),
		qm.WhereIn(`digital_content_urls.contentid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load digital_content_urls")
	}

	var resultSlice []*DigitalContentURL
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice digital_content_urls")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on digital_content_urls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for digital_content_urls")
	}

	if len(digitalContentURLAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ContentidDigitalContentUrls = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &digitalContentURLR{}
			}
			foreign.R.ContentidDigitalContent = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Contentid) {
				local.R.ContentidDigitalContentUrls = append(local.R.ContentidDigitalContentUrls, foreign)
				if foreign.R == nil {
					foreign.R = &digitalContentURLR{}
				}
				foreign.R.ContentidDigitalContent = local
				break
			}
		}
	}

	return nil
}

// SetProductvariantidProductVariant of the digitalContent to the related item.
// Sets o.R.ProductvariantidProductVariant to related.
// Adds o to related.R.ProductvariantidDigitalContents.
func (o *DigitalContent) SetProductvariantidProductVariant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"digital_contents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productvariantid"}),
		strmangle.WhereClause("\"", "\"", 2, digitalContentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Productvariantid, related.ID)
	if o.R == nil {
		o.R = &digitalContentR{
			ProductvariantidProductVariant: related,
		}
	} else {
		o.R.ProductvariantidProductVariant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			ProductvariantidDigitalContents: DigitalContentSlice{o},
		}
	} else {
		related.R.ProductvariantidDigitalContents = append(related.R.ProductvariantidDigitalContents, o)
	}

	return nil
}

// RemoveProductvariantidProductVariant relationship.
// Sets o.R.ProductvariantidProductVariant to nil.
// Removes o from all passed in related items' relationships struct.
func (o *DigitalContent) RemoveProductvariantidProductVariant(ctx context.Context, exec boil.ContextExecutor, related *ProductVariant) error {
	var err error

	queries.SetScanner(&o.Productvariantid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("productvariantid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductvariantidProductVariant = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductvariantidDigitalContents {
		if queries.Equal(o.Productvariantid, ri.Productvariantid) {
			continue
		}

		ln := len(related.R.ProductvariantidDigitalContents)
		if ln > 1 && i < ln-1 {
			related.R.ProductvariantidDigitalContents[i] = related.R.ProductvariantidDigitalContents[ln-1]
		}
		related.R.ProductvariantidDigitalContents = related.R.ProductvariantidDigitalContents[:ln-1]
		break
	}
	return nil
}

// AddContentidDigitalContentUrls adds the given related objects to the existing relationships
// of the digital_content, optionally inserting them as new records.
// Appends related to o.R.ContentidDigitalContentUrls.
// Sets related.R.ContentidDigitalContent appropriately.
func (o *DigitalContent) AddContentidDigitalContentUrls(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DigitalContentURL) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Contentid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"digital_content_urls\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"contentid"}),
				strmangle.WhereClause("\"", "\"", 2, digitalContentURLPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Contentid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &digitalContentR{
			ContentidDigitalContentUrls: related,
		}
	} else {
		o.R.ContentidDigitalContentUrls = append(o.R.ContentidDigitalContentUrls, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &digitalContentURLR{
				ContentidDigitalContent: o,
			}
		} else {
			rel.R.ContentidDigitalContent = o
		}
	}
	return nil
}

// SetContentidDigitalContentUrls removes all previously related items of the
// digital_content replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ContentidDigitalContent's ContentidDigitalContentUrls accordingly.
// Replaces o.R.ContentidDigitalContentUrls with related.
// Sets related.R.ContentidDigitalContent's ContentidDigitalContentUrls accordingly.
func (o *DigitalContent) SetContentidDigitalContentUrls(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DigitalContentURL) error {
	query := "update \"digital_content_urls\" set \"contentid\" = null where \"contentid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ContentidDigitalContentUrls {
			queries.SetScanner(&rel.Contentid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ContentidDigitalContent = nil
		}
		o.R.ContentidDigitalContentUrls = nil
	}

	return o.AddContentidDigitalContentUrls(ctx, exec, insert, related...)
}

// RemoveContentidDigitalContentUrls relationships from objects passed in.
// Removes related items from R.ContentidDigitalContentUrls (uses pointer comparison, removal does not keep order)
// Sets related.R.ContentidDigitalContent.
func (o *DigitalContent) RemoveContentidDigitalContentUrls(ctx context.Context, exec boil.ContextExecutor, related ...*DigitalContentURL) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Contentid, nil)
		if rel.R != nil {
			rel.R.ContentidDigitalContent = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("contentid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ContentidDigitalContentUrls {
			if rel != ri {
				continue
			}

			ln := len(o.R.ContentidDigitalContentUrls)
			if ln > 1 && i < ln-1 {
				o.R.ContentidDigitalContentUrls[i] = o.R.ContentidDigitalContentUrls[ln-1]
			}
			o.R.ContentidDigitalContentUrls = o.R.ContentidDigitalContentUrls[:ln-1]
			break
		}
	}

	return nil
}

// DigitalContents retrieves all the records using an executor.
func DigitalContents(mods ...qm.QueryMod) digitalContentQuery {
	mods = append(mods, qm.From("\"digital_contents\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"digital_contents\".*"})
	}

	return digitalContentQuery{q}
}

// FindDigitalContent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDigitalContent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DigitalContent, error) {
	digitalContentObj := &DigitalContent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"digital_contents\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, digitalContentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from digital_contents")
	}

	if err = digitalContentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return digitalContentObj, err
	}

	return digitalContentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DigitalContent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no digital_contents provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(digitalContentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	digitalContentInsertCacheMut.RLock()
	cache, cached := digitalContentInsertCache[key]
	digitalContentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			digitalContentAllColumns,
			digitalContentColumnsWithDefault,
			digitalContentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(digitalContentType, digitalContentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(digitalContentType, digitalContentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"digital_contents\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"digital_contents\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into digital_contents")
	}

	if !cached {
		digitalContentInsertCacheMut.Lock()
		digitalContentInsertCache[key] = cache
		digitalContentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DigitalContent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DigitalContent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	digitalContentUpdateCacheMut.RLock()
	cache, cached := digitalContentUpdateCache[key]
	digitalContentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			digitalContentAllColumns,
			digitalContentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update digital_contents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"digital_contents\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, digitalContentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(digitalContentType, digitalContentMapping, append(wl, digitalContentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update digital_contents row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for digital_contents")
	}

	if !cached {
		digitalContentUpdateCacheMut.Lock()
		digitalContentUpdateCache[key] = cache
		digitalContentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q digitalContentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for digital_contents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for digital_contents")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DigitalContentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), digitalContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"digital_contents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, digitalContentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in digitalContent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all digitalContent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DigitalContent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no digital_contents provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(digitalContentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	digitalContentUpsertCacheMut.RLock()
	cache, cached := digitalContentUpsertCache[key]
	digitalContentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			digitalContentAllColumns,
			digitalContentColumnsWithDefault,
			digitalContentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			digitalContentAllColumns,
			digitalContentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert digital_contents, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(digitalContentPrimaryKeyColumns))
			copy(conflict, digitalContentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"digital_contents\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(digitalContentType, digitalContentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(digitalContentType, digitalContentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert digital_contents")
	}

	if !cached {
		digitalContentUpsertCacheMut.Lock()
		digitalContentUpsertCache[key] = cache
		digitalContentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DigitalContent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DigitalContent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DigitalContent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), digitalContentPrimaryKeyMapping)
	sql := "DELETE FROM \"digital_contents\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from digital_contents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for digital_contents")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q digitalContentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no digitalContentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from digital_contents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for digital_contents")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DigitalContentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(digitalContentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), digitalContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"digital_contents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, digitalContentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from digitalContent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for digital_contents")
	}

	if len(digitalContentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DigitalContent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDigitalContent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DigitalContentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DigitalContentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), digitalContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"digital_contents\".* FROM \"digital_contents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, digitalContentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DigitalContentSlice")
	}

	*o = slice

	return nil
}

// DigitalContentExists checks if the DigitalContent row exists.
func DigitalContentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"digital_contents\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if digital_contents exists")
	}

	return exists, nil
}

// Exists checks if the DigitalContent row exists.
func (o *DigitalContent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DigitalContentExists(ctx, exec, o.ID)
}
