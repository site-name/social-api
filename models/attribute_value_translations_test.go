// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttributeValueTranslations(t *testing.T) {
	t.Parallel()

	query := AttributeValueTranslations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttributeValueTranslationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributeValueTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributeValueTranslationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AttributeValueTranslations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributeValueTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributeValueTranslationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributeValueTranslationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributeValueTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributeValueTranslationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttributeValueTranslationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AttributeValueTranslation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttributeValueTranslationExists to return true, but got false.")
	}
}

func testAttributeValueTranslationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attributeValueTranslationFound, err := FindAttributeValueTranslation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attributeValueTranslationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttributeValueTranslationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AttributeValueTranslations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttributeValueTranslationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AttributeValueTranslations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttributeValueTranslationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attributeValueTranslationOne := &AttributeValueTranslation{}
	attributeValueTranslationTwo := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, attributeValueTranslationOne, attributeValueTranslationDBTypes, false, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}
	if err = randomize.Struct(seed, attributeValueTranslationTwo, attributeValueTranslationDBTypes, false, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributeValueTranslationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributeValueTranslationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttributeValueTranslations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttributeValueTranslationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attributeValueTranslationOne := &AttributeValueTranslation{}
	attributeValueTranslationTwo := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, attributeValueTranslationOne, attributeValueTranslationDBTypes, false, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}
	if err = randomize.Struct(seed, attributeValueTranslationTwo, attributeValueTranslationDBTypes, false, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributeValueTranslationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributeValueTranslationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeValueTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attributeValueTranslationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValueTranslation) error {
	*o = AttributeValueTranslation{}
	return nil
}

func attributeValueTranslationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValueTranslation) error {
	*o = AttributeValueTranslation{}
	return nil
}

func attributeValueTranslationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValueTranslation) error {
	*o = AttributeValueTranslation{}
	return nil
}

func attributeValueTranslationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValueTranslation) error {
	*o = AttributeValueTranslation{}
	return nil
}

func attributeValueTranslationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValueTranslation) error {
	*o = AttributeValueTranslation{}
	return nil
}

func attributeValueTranslationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValueTranslation) error {
	*o = AttributeValueTranslation{}
	return nil
}

func attributeValueTranslationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValueTranslation) error {
	*o = AttributeValueTranslation{}
	return nil
}

func attributeValueTranslationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValueTranslation) error {
	*o = AttributeValueTranslation{}
	return nil
}

func attributeValueTranslationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValueTranslation) error {
	*o = AttributeValueTranslation{}
	return nil
}

func testAttributeValueTranslationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AttributeValueTranslation{}
	o := &AttributeValueTranslation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation object: %s", err)
	}

	AddAttributeValueTranslationHook(boil.BeforeInsertHook, attributeValueTranslationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attributeValueTranslationBeforeInsertHooks = []AttributeValueTranslationHook{}

	AddAttributeValueTranslationHook(boil.AfterInsertHook, attributeValueTranslationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attributeValueTranslationAfterInsertHooks = []AttributeValueTranslationHook{}

	AddAttributeValueTranslationHook(boil.AfterSelectHook, attributeValueTranslationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attributeValueTranslationAfterSelectHooks = []AttributeValueTranslationHook{}

	AddAttributeValueTranslationHook(boil.BeforeUpdateHook, attributeValueTranslationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attributeValueTranslationBeforeUpdateHooks = []AttributeValueTranslationHook{}

	AddAttributeValueTranslationHook(boil.AfterUpdateHook, attributeValueTranslationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attributeValueTranslationAfterUpdateHooks = []AttributeValueTranslationHook{}

	AddAttributeValueTranslationHook(boil.BeforeDeleteHook, attributeValueTranslationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attributeValueTranslationBeforeDeleteHooks = []AttributeValueTranslationHook{}

	AddAttributeValueTranslationHook(boil.AfterDeleteHook, attributeValueTranslationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attributeValueTranslationAfterDeleteHooks = []AttributeValueTranslationHook{}

	AddAttributeValueTranslationHook(boil.BeforeUpsertHook, attributeValueTranslationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attributeValueTranslationBeforeUpsertHooks = []AttributeValueTranslationHook{}

	AddAttributeValueTranslationHook(boil.AfterUpsertHook, attributeValueTranslationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attributeValueTranslationAfterUpsertHooks = []AttributeValueTranslationHook{}
}

func testAttributeValueTranslationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeValueTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributeValueTranslationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(attributeValueTranslationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AttributeValueTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributeValueTranslationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributeValueTranslationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributeValueTranslationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributeValueTranslationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttributeValueTranslations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attributeValueTranslationDBTypes = map[string]string{`ID`: `character varying`, `Languagecode`: `character varying`, `Attributevalueid`: `character varying`, `Name`: `character varying`, `Richtext`: `text`}
	_                                = bytes.MinRead
)

func testAttributeValueTranslationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attributeValueTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attributeValueTranslationAllColumns) == len(attributeValueTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeValueTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttributeValueTranslationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attributeValueTranslationAllColumns) == len(attributeValueTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValueTranslation{}
	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeValueTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributeValueTranslationDBTypes, true, attributeValueTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attributeValueTranslationAllColumns, attributeValueTranslationPrimaryKeyColumns) {
		fields = attributeValueTranslationAllColumns
	} else {
		fields = strmangle.SetComplement(
			attributeValueTranslationAllColumns,
			attributeValueTranslationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttributeValueTranslationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAttributeValueTranslationsUpsert(t *testing.T) {
	t.Parallel()

	if len(attributeValueTranslationAllColumns) == len(attributeValueTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AttributeValueTranslation{}
	if err = randomize.Struct(seed, &o, attributeValueTranslationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttributeValueTranslation: %s", err)
	}

	count, err := AttributeValueTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attributeValueTranslationDBTypes, false, attributeValueTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributeValueTranslation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttributeValueTranslation: %s", err)
	}

	count, err = AttributeValueTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
