// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAssignedVariantAttributeValues(t *testing.T) {
	t.Parallel()

	query := AssignedVariantAttributeValues()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAssignedVariantAttributeValuesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedVariantAttributeValuesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AssignedVariantAttributeValues().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedVariantAttributeValuesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedVariantAttributeValueSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedVariantAttributeValuesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AssignedVariantAttributeValueExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AssignedVariantAttributeValue exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AssignedVariantAttributeValueExists to return true, but got false.")
	}
}

func testAssignedVariantAttributeValuesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	assignedVariantAttributeValueFound, err := FindAssignedVariantAttributeValue(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if assignedVariantAttributeValueFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAssignedVariantAttributeValuesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AssignedVariantAttributeValues().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAssignedVariantAttributeValuesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AssignedVariantAttributeValues().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAssignedVariantAttributeValuesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	assignedVariantAttributeValueOne := &AssignedVariantAttributeValue{}
	assignedVariantAttributeValueTwo := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, assignedVariantAttributeValueOne, assignedVariantAttributeValueDBTypes, false, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedVariantAttributeValueTwo, assignedVariantAttributeValueDBTypes, false, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignedVariantAttributeValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedVariantAttributeValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedVariantAttributeValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAssignedVariantAttributeValuesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	assignedVariantAttributeValueOne := &AssignedVariantAttributeValue{}
	assignedVariantAttributeValueTwo := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, assignedVariantAttributeValueOne, assignedVariantAttributeValueDBTypes, false, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedVariantAttributeValueTwo, assignedVariantAttributeValueDBTypes, false, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignedVariantAttributeValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedVariantAttributeValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func assignedVariantAttributeValueBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttributeValue) error {
	*o = AssignedVariantAttributeValue{}
	return nil
}

func assignedVariantAttributeValueAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttributeValue) error {
	*o = AssignedVariantAttributeValue{}
	return nil
}

func assignedVariantAttributeValueAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttributeValue) error {
	*o = AssignedVariantAttributeValue{}
	return nil
}

func assignedVariantAttributeValueBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttributeValue) error {
	*o = AssignedVariantAttributeValue{}
	return nil
}

func assignedVariantAttributeValueAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttributeValue) error {
	*o = AssignedVariantAttributeValue{}
	return nil
}

func assignedVariantAttributeValueBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttributeValue) error {
	*o = AssignedVariantAttributeValue{}
	return nil
}

func assignedVariantAttributeValueAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttributeValue) error {
	*o = AssignedVariantAttributeValue{}
	return nil
}

func assignedVariantAttributeValueBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttributeValue) error {
	*o = AssignedVariantAttributeValue{}
	return nil
}

func assignedVariantAttributeValueAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttributeValue) error {
	*o = AssignedVariantAttributeValue{}
	return nil
}

func testAssignedVariantAttributeValuesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AssignedVariantAttributeValue{}
	o := &AssignedVariantAttributeValue{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue object: %s", err)
	}

	AddAssignedVariantAttributeValueHook(boil.BeforeInsertHook, assignedVariantAttributeValueBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeValueBeforeInsertHooks = []AssignedVariantAttributeValueHook{}

	AddAssignedVariantAttributeValueHook(boil.AfterInsertHook, assignedVariantAttributeValueAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeValueAfterInsertHooks = []AssignedVariantAttributeValueHook{}

	AddAssignedVariantAttributeValueHook(boil.AfterSelectHook, assignedVariantAttributeValueAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeValueAfterSelectHooks = []AssignedVariantAttributeValueHook{}

	AddAssignedVariantAttributeValueHook(boil.BeforeUpdateHook, assignedVariantAttributeValueBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeValueBeforeUpdateHooks = []AssignedVariantAttributeValueHook{}

	AddAssignedVariantAttributeValueHook(boil.AfterUpdateHook, assignedVariantAttributeValueAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeValueAfterUpdateHooks = []AssignedVariantAttributeValueHook{}

	AddAssignedVariantAttributeValueHook(boil.BeforeDeleteHook, assignedVariantAttributeValueBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeValueBeforeDeleteHooks = []AssignedVariantAttributeValueHook{}

	AddAssignedVariantAttributeValueHook(boil.AfterDeleteHook, assignedVariantAttributeValueAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeValueAfterDeleteHooks = []AssignedVariantAttributeValueHook{}

	AddAssignedVariantAttributeValueHook(boil.BeforeUpsertHook, assignedVariantAttributeValueBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeValueBeforeUpsertHooks = []AssignedVariantAttributeValueHook{}

	AddAssignedVariantAttributeValueHook(boil.AfterUpsertHook, assignedVariantAttributeValueAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeValueAfterUpsertHooks = []AssignedVariantAttributeValueHook{}
}

func testAssignedVariantAttributeValuesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedVariantAttributeValuesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(assignedVariantAttributeValueColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedVariantAttributeValueToOneAssignedVariantAttributeUsingAssignmentidAssignedVariantAttribute(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AssignedVariantAttributeValue
	var foreign AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, assignedVariantAttributeDBTypes, false, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Assignmentid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AssignmentidAssignedVariantAttribute().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAssignedVariantAttributeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttribute) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AssignedVariantAttributeValueSlice{&local}
	if err = local.L.LoadAssignmentidAssignedVariantAttribute(ctx, tx, false, (*[]*AssignedVariantAttributeValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AssignmentidAssignedVariantAttribute == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AssignmentidAssignedVariantAttribute = nil
	if err = local.L.LoadAssignmentidAssignedVariantAttribute(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AssignmentidAssignedVariantAttribute == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAssignedVariantAttributeValueToOneAttributeValueUsingValueidAttributeValue(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AssignedVariantAttributeValue
	var foreign AttributeValue

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributeValueDBTypes, false, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Valueid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ValueidAttributeValue().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAttributeValueHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AssignedVariantAttributeValueSlice{&local}
	if err = local.L.LoadValueidAttributeValue(ctx, tx, false, (*[]*AssignedVariantAttributeValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ValueidAttributeValue == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ValueidAttributeValue = nil
	if err = local.L.LoadValueidAttributeValue(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ValueidAttributeValue == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAssignedVariantAttributeValueToOneSetOpAssignedVariantAttributeUsingAssignmentidAssignedVariantAttribute(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttributeValue
	var b, c AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeValueDBTypes, false, strmangle.SetComplement(assignedVariantAttributeValuePrimaryKeyColumns, assignedVariantAttributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AssignedVariantAttribute{&b, &c} {
		err = a.SetAssignmentidAssignedVariantAttribute(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AssignmentidAssignedVariantAttribute != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssignmentidAssignedVariantAttributeValues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Assignmentid, x.ID) {
			t.Error("foreign key was wrong value", a.Assignmentid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Assignmentid))
		reflect.Indirect(reflect.ValueOf(&a.Assignmentid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Assignmentid, x.ID) {
			t.Error("foreign key was wrong value", a.Assignmentid, x.ID)
		}
	}
}

func testAssignedVariantAttributeValueToOneRemoveOpAssignedVariantAttributeUsingAssignmentidAssignedVariantAttribute(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttributeValue
	var b AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeValueDBTypes, false, strmangle.SetComplement(assignedVariantAttributeValuePrimaryKeyColumns, assignedVariantAttributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAssignmentidAssignedVariantAttribute(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAssignmentidAssignedVariantAttribute(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AssignmentidAssignedVariantAttribute().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.AssignmentidAssignedVariantAttribute != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Assignmentid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AssignmentidAssignedVariantAttributeValues) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAssignedVariantAttributeValueToOneSetOpAttributeValueUsingValueidAttributeValue(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttributeValue
	var b, c AttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeValueDBTypes, false, strmangle.SetComplement(assignedVariantAttributeValuePrimaryKeyColumns, assignedVariantAttributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AttributeValue{&b, &c} {
		err = a.SetValueidAttributeValue(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ValueidAttributeValue != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ValueidAssignedVariantAttributeValues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Valueid, x.ID) {
			t.Error("foreign key was wrong value", a.Valueid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Valueid))
		reflect.Indirect(reflect.ValueOf(&a.Valueid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Valueid, x.ID) {
			t.Error("foreign key was wrong value", a.Valueid, x.ID)
		}
	}
}

func testAssignedVariantAttributeValueToOneRemoveOpAttributeValueUsingValueidAttributeValue(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttributeValue
	var b AttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeValueDBTypes, false, strmangle.SetComplement(assignedVariantAttributeValuePrimaryKeyColumns, assignedVariantAttributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetValueidAttributeValue(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveValueidAttributeValue(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ValueidAttributeValue().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ValueidAttributeValue != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Valueid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ValueidAssignedVariantAttributeValues) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAssignedVariantAttributeValuesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignedVariantAttributeValuesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedVariantAttributeValueSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignedVariantAttributeValuesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedVariantAttributeValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	assignedVariantAttributeValueDBTypes = map[string]string{`ID`: `character varying`, `Valueid`: `character varying`, `Assignmentid`: `character varying`, `Sortorder`: `integer`}
	_                                    = bytes.MinRead
)

func testAssignedVariantAttributeValuesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(assignedVariantAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(assignedVariantAttributeValueAllColumns) == len(assignedVariantAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAssignedVariantAttributeValuesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(assignedVariantAttributeValueAllColumns) == len(assignedVariantAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedVariantAttributeValueDBTypes, true, assignedVariantAttributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(assignedVariantAttributeValueAllColumns, assignedVariantAttributeValuePrimaryKeyColumns) {
		fields = assignedVariantAttributeValueAllColumns
	} else {
		fields = strmangle.SetComplement(
			assignedVariantAttributeValueAllColumns,
			assignedVariantAttributeValuePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AssignedVariantAttributeValueSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAssignedVariantAttributeValuesUpsert(t *testing.T) {
	t.Parallel()

	if len(assignedVariantAttributeValueAllColumns) == len(assignedVariantAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AssignedVariantAttributeValue{}
	if err = randomize.Struct(seed, &o, assignedVariantAttributeValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedVariantAttributeValue: %s", err)
	}

	count, err := AssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, assignedVariantAttributeValueDBTypes, false, assignedVariantAttributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttributeValue struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedVariantAttributeValue: %s", err)
	}

	count, err = AssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
