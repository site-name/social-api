// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGiftcardCheckouts(t *testing.T) {
	t.Parallel()

	query := GiftcardCheckouts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGiftcardCheckoutsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGiftcardCheckoutsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GiftcardCheckouts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGiftcardCheckoutsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GiftcardCheckoutSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGiftcardCheckoutsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GiftcardCheckoutExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GiftcardCheckout exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GiftcardCheckoutExists to return true, but got false.")
	}
}

func testGiftcardCheckoutsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	giftcardCheckoutFound, err := FindGiftcardCheckout(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if giftcardCheckoutFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGiftcardCheckoutsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GiftcardCheckouts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGiftcardCheckoutsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GiftcardCheckouts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGiftcardCheckoutsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	giftcardCheckoutOne := &GiftcardCheckout{}
	giftcardCheckoutTwo := &GiftcardCheckout{}
	if err = randomize.Struct(seed, giftcardCheckoutOne, giftcardCheckoutDBTypes, false, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}
	if err = randomize.Struct(seed, giftcardCheckoutTwo, giftcardCheckoutDBTypes, false, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = giftcardCheckoutOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = giftcardCheckoutTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GiftcardCheckouts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGiftcardCheckoutsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	giftcardCheckoutOne := &GiftcardCheckout{}
	giftcardCheckoutTwo := &GiftcardCheckout{}
	if err = randomize.Struct(seed, giftcardCheckoutOne, giftcardCheckoutDBTypes, false, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}
	if err = randomize.Struct(seed, giftcardCheckoutTwo, giftcardCheckoutDBTypes, false, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = giftcardCheckoutOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = giftcardCheckoutTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func giftcardCheckoutBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GiftcardCheckout) error {
	*o = GiftcardCheckout{}
	return nil
}

func giftcardCheckoutAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GiftcardCheckout) error {
	*o = GiftcardCheckout{}
	return nil
}

func giftcardCheckoutAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GiftcardCheckout) error {
	*o = GiftcardCheckout{}
	return nil
}

func giftcardCheckoutBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GiftcardCheckout) error {
	*o = GiftcardCheckout{}
	return nil
}

func giftcardCheckoutAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GiftcardCheckout) error {
	*o = GiftcardCheckout{}
	return nil
}

func giftcardCheckoutBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GiftcardCheckout) error {
	*o = GiftcardCheckout{}
	return nil
}

func giftcardCheckoutAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GiftcardCheckout) error {
	*o = GiftcardCheckout{}
	return nil
}

func giftcardCheckoutBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GiftcardCheckout) error {
	*o = GiftcardCheckout{}
	return nil
}

func giftcardCheckoutAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GiftcardCheckout) error {
	*o = GiftcardCheckout{}
	return nil
}

func testGiftcardCheckoutsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GiftcardCheckout{}
	o := &GiftcardCheckout{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout object: %s", err)
	}

	AddGiftcardCheckoutHook(boil.BeforeInsertHook, giftcardCheckoutBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	giftcardCheckoutBeforeInsertHooks = []GiftcardCheckoutHook{}

	AddGiftcardCheckoutHook(boil.AfterInsertHook, giftcardCheckoutAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	giftcardCheckoutAfterInsertHooks = []GiftcardCheckoutHook{}

	AddGiftcardCheckoutHook(boil.AfterSelectHook, giftcardCheckoutAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	giftcardCheckoutAfterSelectHooks = []GiftcardCheckoutHook{}

	AddGiftcardCheckoutHook(boil.BeforeUpdateHook, giftcardCheckoutBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	giftcardCheckoutBeforeUpdateHooks = []GiftcardCheckoutHook{}

	AddGiftcardCheckoutHook(boil.AfterUpdateHook, giftcardCheckoutAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	giftcardCheckoutAfterUpdateHooks = []GiftcardCheckoutHook{}

	AddGiftcardCheckoutHook(boil.BeforeDeleteHook, giftcardCheckoutBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	giftcardCheckoutBeforeDeleteHooks = []GiftcardCheckoutHook{}

	AddGiftcardCheckoutHook(boil.AfterDeleteHook, giftcardCheckoutAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	giftcardCheckoutAfterDeleteHooks = []GiftcardCheckoutHook{}

	AddGiftcardCheckoutHook(boil.BeforeUpsertHook, giftcardCheckoutBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	giftcardCheckoutBeforeUpsertHooks = []GiftcardCheckoutHook{}

	AddGiftcardCheckoutHook(boil.AfterUpsertHook, giftcardCheckoutAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	giftcardCheckoutAfterUpsertHooks = []GiftcardCheckoutHook{}
}

func testGiftcardCheckoutsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGiftcardCheckoutsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(giftcardCheckoutColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGiftcardCheckoutToOneCheckoutUsingCheckout(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GiftcardCheckout
	var foreign Checkout

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CheckoutID, foreign.Token)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Checkout().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Token, foreign.Token) {
		t.Errorf("want: %v, got %v", foreign.Token, check.Token)
	}

	ranAfterSelectHook := false
	AddCheckoutHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GiftcardCheckoutSlice{&local}
	if err = local.L.LoadCheckout(ctx, tx, false, (*[]*GiftcardCheckout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Checkout == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Checkout = nil
	if err = local.L.LoadCheckout(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Checkout == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGiftcardCheckoutToOneGiftcardUsingGiftcard(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GiftcardCheckout
	var foreign Giftcard

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.GiftcardID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Giftcard().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddGiftcardHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := GiftcardCheckoutSlice{&local}
	if err = local.L.LoadGiftcard(ctx, tx, false, (*[]*GiftcardCheckout)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Giftcard == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Giftcard = nil
	if err = local.L.LoadGiftcard(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Giftcard == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testGiftcardCheckoutToOneSetOpCheckoutUsingCheckout(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GiftcardCheckout
	var b, c Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Checkout{&b, &c} {
		err = a.SetCheckout(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Checkout != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GiftcardCheckouts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CheckoutID, x.Token) {
			t.Error("foreign key was wrong value", a.CheckoutID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CheckoutID))
		reflect.Indirect(reflect.ValueOf(&a.CheckoutID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CheckoutID, x.Token) {
			t.Error("foreign key was wrong value", a.CheckoutID, x.Token)
		}
	}
}

func testGiftcardCheckoutToOneRemoveOpCheckoutUsingCheckout(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GiftcardCheckout
	var b Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCheckout(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCheckout(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Checkout().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Checkout != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CheckoutID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GiftcardCheckouts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGiftcardCheckoutToOneSetOpGiftcardUsingGiftcard(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GiftcardCheckout
	var b, c Giftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Giftcard{&b, &c} {
		err = a.SetGiftcard(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Giftcard != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GiftcardCheckouts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.GiftcardID, x.ID) {
			t.Error("foreign key was wrong value", a.GiftcardID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GiftcardID))
		reflect.Indirect(reflect.ValueOf(&a.GiftcardID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.GiftcardID, x.ID) {
			t.Error("foreign key was wrong value", a.GiftcardID, x.ID)
		}
	}
}

func testGiftcardCheckoutToOneRemoveOpGiftcardUsingGiftcard(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GiftcardCheckout
	var b Giftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, giftcardCheckoutDBTypes, false, strmangle.SetComplement(giftcardCheckoutPrimaryKeyColumns, giftcardCheckoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetGiftcard(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveGiftcard(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Giftcard().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Giftcard != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.GiftcardID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GiftcardCheckouts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGiftcardCheckoutsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGiftcardCheckoutsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GiftcardCheckoutSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGiftcardCheckoutsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GiftcardCheckouts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	giftcardCheckoutDBTypes = map[string]string{`ID`: `character varying`, `GiftcardID`: `character varying`, `CheckoutID`: `character varying`}
	_                       = bytes.MinRead
)

func testGiftcardCheckoutsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(giftcardCheckoutPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(giftcardCheckoutAllColumns) == len(giftcardCheckoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGiftcardCheckoutsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(giftcardCheckoutAllColumns) == len(giftcardCheckoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GiftcardCheckout{}
	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, giftcardCheckoutDBTypes, true, giftcardCheckoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(giftcardCheckoutAllColumns, giftcardCheckoutPrimaryKeyColumns) {
		fields = giftcardCheckoutAllColumns
	} else {
		fields = strmangle.SetComplement(
			giftcardCheckoutAllColumns,
			giftcardCheckoutPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GiftcardCheckoutSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGiftcardCheckoutsUpsert(t *testing.T) {
	t.Parallel()

	if len(giftcardCheckoutAllColumns) == len(giftcardCheckoutPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GiftcardCheckout{}
	if err = randomize.Struct(seed, &o, giftcardCheckoutDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GiftcardCheckout: %s", err)
	}

	count, err := GiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, giftcardCheckoutDBTypes, false, giftcardCheckoutPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GiftcardCheckout struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GiftcardCheckout: %s", err)
	}

	count, err = GiftcardCheckouts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
