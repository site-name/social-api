// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AttributeProduct is an object representing the database table.
type AttributeProduct struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Attributeid   null.String `boil:"attributeid" json:"attributeid,omitempty" toml:"attributeid" yaml:"attributeid,omitempty"`
	Producttypeid null.String `boil:"producttypeid" json:"producttypeid,omitempty" toml:"producttypeid" yaml:"producttypeid,omitempty"`
	Sortorder     null.Int    `boil:"sortorder" json:"sortorder,omitempty" toml:"sortorder" yaml:"sortorder,omitempty"`

	R *attributeProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributeProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributeProductColumns = struct {
	ID            string
	Attributeid   string
	Producttypeid string
	Sortorder     string
}{
	ID:            "id",
	Attributeid:   "attributeid",
	Producttypeid: "producttypeid",
	Sortorder:     "sortorder",
}

var AttributeProductTableColumns = struct {
	ID            string
	Attributeid   string
	Producttypeid string
	Sortorder     string
}{
	ID:            "attribute_products.id",
	Attributeid:   "attribute_products.attributeid",
	Producttypeid: "attribute_products.producttypeid",
	Sortorder:     "attribute_products.sortorder",
}

// Generated where

var AttributeProductWhere = struct {
	ID            whereHelperstring
	Attributeid   whereHelpernull_String
	Producttypeid whereHelpernull_String
	Sortorder     whereHelpernull_Int
}{
	ID:            whereHelperstring{field: "\"attribute_products\".\"id\""},
	Attributeid:   whereHelpernull_String{field: "\"attribute_products\".\"attributeid\""},
	Producttypeid: whereHelpernull_String{field: "\"attribute_products\".\"producttypeid\""},
	Sortorder:     whereHelpernull_Int{field: "\"attribute_products\".\"sortorder\""},
}

// AttributeProductRels is where relationship names are stored.
var AttributeProductRels = struct {
	AttributeidAttribute                  string
	ProducttypeidProductType              string
	AssignmentidAssignedProductAttributes string
}{
	AttributeidAttribute:                  "AttributeidAttribute",
	ProducttypeidProductType:              "ProducttypeidProductType",
	AssignmentidAssignedProductAttributes: "AssignmentidAssignedProductAttributes",
}

// attributeProductR is where relationships are stored.
type attributeProductR struct {
	AttributeidAttribute                  *Attribute                    `boil:"AttributeidAttribute" json:"AttributeidAttribute" toml:"AttributeidAttribute" yaml:"AttributeidAttribute"`
	ProducttypeidProductType              *ProductType                  `boil:"ProducttypeidProductType" json:"ProducttypeidProductType" toml:"ProducttypeidProductType" yaml:"ProducttypeidProductType"`
	AssignmentidAssignedProductAttributes AssignedProductAttributeSlice `boil:"AssignmentidAssignedProductAttributes" json:"AssignmentidAssignedProductAttributes" toml:"AssignmentidAssignedProductAttributes" yaml:"AssignmentidAssignedProductAttributes"`
}

// NewStruct creates a new relationship struct
func (*attributeProductR) NewStruct() *attributeProductR {
	return &attributeProductR{}
}

func (r *attributeProductR) GetAttributeidAttribute() *Attribute {
	if r == nil {
		return nil
	}
	return r.AttributeidAttribute
}

func (r *attributeProductR) GetProducttypeidProductType() *ProductType {
	if r == nil {
		return nil
	}
	return r.ProducttypeidProductType
}

func (r *attributeProductR) GetAssignmentidAssignedProductAttributes() AssignedProductAttributeSlice {
	if r == nil {
		return nil
	}
	return r.AssignmentidAssignedProductAttributes
}

// attributeProductL is where Load methods for each relationship are stored.
type attributeProductL struct{}

var (
	attributeProductAllColumns            = []string{"id", "attributeid", "producttypeid", "sortorder"}
	attributeProductColumnsWithoutDefault = []string{"id"}
	attributeProductColumnsWithDefault    = []string{"attributeid", "producttypeid", "sortorder"}
	attributeProductPrimaryKeyColumns     = []string{"id"}
	attributeProductGeneratedColumns      = []string{}
)

type (
	// AttributeProductSlice is an alias for a slice of pointers to AttributeProduct.
	// This should almost always be used instead of []AttributeProduct.
	AttributeProductSlice []*AttributeProduct
	// AttributeProductHook is the signature for custom AttributeProduct hook methods
	AttributeProductHook func(context.Context, boil.ContextExecutor, *AttributeProduct) error

	attributeProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributeProductType                 = reflect.TypeOf(&AttributeProduct{})
	attributeProductMapping              = queries.MakeStructMapping(attributeProductType)
	attributeProductPrimaryKeyMapping, _ = queries.BindMapping(attributeProductType, attributeProductMapping, attributeProductPrimaryKeyColumns)
	attributeProductInsertCacheMut       sync.RWMutex
	attributeProductInsertCache          = make(map[string]insertCache)
	attributeProductUpdateCacheMut       sync.RWMutex
	attributeProductUpdateCache          = make(map[string]updateCache)
	attributeProductUpsertCacheMut       sync.RWMutex
	attributeProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var attributeProductAfterSelectHooks []AttributeProductHook

var attributeProductBeforeInsertHooks []AttributeProductHook
var attributeProductAfterInsertHooks []AttributeProductHook

var attributeProductBeforeUpdateHooks []AttributeProductHook
var attributeProductAfterUpdateHooks []AttributeProductHook

var attributeProductBeforeDeleteHooks []AttributeProductHook
var attributeProductAfterDeleteHooks []AttributeProductHook

var attributeProductBeforeUpsertHooks []AttributeProductHook
var attributeProductAfterUpsertHooks []AttributeProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AttributeProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AttributeProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AttributeProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AttributeProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AttributeProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AttributeProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AttributeProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AttributeProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AttributeProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAttributeProductHook registers your hook function for all future operations.
func AddAttributeProductHook(hookPoint boil.HookPoint, attributeProductHook AttributeProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		attributeProductAfterSelectHooks = append(attributeProductAfterSelectHooks, attributeProductHook)
	case boil.BeforeInsertHook:
		attributeProductBeforeInsertHooks = append(attributeProductBeforeInsertHooks, attributeProductHook)
	case boil.AfterInsertHook:
		attributeProductAfterInsertHooks = append(attributeProductAfterInsertHooks, attributeProductHook)
	case boil.BeforeUpdateHook:
		attributeProductBeforeUpdateHooks = append(attributeProductBeforeUpdateHooks, attributeProductHook)
	case boil.AfterUpdateHook:
		attributeProductAfterUpdateHooks = append(attributeProductAfterUpdateHooks, attributeProductHook)
	case boil.BeforeDeleteHook:
		attributeProductBeforeDeleteHooks = append(attributeProductBeforeDeleteHooks, attributeProductHook)
	case boil.AfterDeleteHook:
		attributeProductAfterDeleteHooks = append(attributeProductAfterDeleteHooks, attributeProductHook)
	case boil.BeforeUpsertHook:
		attributeProductBeforeUpsertHooks = append(attributeProductBeforeUpsertHooks, attributeProductHook)
	case boil.AfterUpsertHook:
		attributeProductAfterUpsertHooks = append(attributeProductAfterUpsertHooks, attributeProductHook)
	}
}

// One returns a single attributeProduct record from the query.
func (q attributeProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AttributeProduct, error) {
	o := &AttributeProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for attribute_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AttributeProduct records from the query.
func (q attributeProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (AttributeProductSlice, error) {
	var o []*AttributeProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AttributeProduct slice")
	}

	if len(attributeProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AttributeProduct records in the query.
func (q attributeProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count attribute_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attributeProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if attribute_products exists")
	}

	return count > 0, nil
}

// AttributeidAttribute pointed to by the foreign key.
func (o *AttributeProduct) AttributeidAttribute(mods ...qm.QueryMod) attributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Attributeid),
	}

	queryMods = append(queryMods, mods...)

	return Attributes(queryMods...)
}

// ProducttypeidProductType pointed to by the foreign key.
func (o *AttributeProduct) ProducttypeidProductType(mods ...qm.QueryMod) productTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Producttypeid),
	}

	queryMods = append(queryMods, mods...)

	return ProductTypes(queryMods...)
}

// AssignmentidAssignedProductAttributes retrieves all the assigned_product_attribute's AssignedProductAttributes with an executor via assignmentid column.
func (o *AttributeProduct) AssignmentidAssignedProductAttributes(mods ...qm.QueryMod) assignedProductAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_product_attributes\".\"assignmentid\"=?", o.ID),
	)

	return AssignedProductAttributes(queryMods...)
}

// LoadAttributeidAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attributeProductL) LoadAttributeidAttribute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeProduct interface{}, mods queries.Applicator) error {
	var slice []*AttributeProduct
	var object *AttributeProduct

	if singular {
		var ok bool
		object, ok = maybeAttributeProduct.(*AttributeProduct)
		if !ok {
			object = new(AttributeProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeProduct))
			}
		}
	} else {
		s, ok := maybeAttributeProduct.(*[]*AttributeProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeProductR{}
		}
		if !queries.IsNil(object.Attributeid) {
			args = append(args, object.Attributeid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Attributeid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Attributeid) {
				args = append(args, obj.Attributeid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attributes`),
		qm.WhereIn(`attributes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Attribute")
	}

	var resultSlice []*Attribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Attribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attributes")
	}

	if len(attributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AttributeidAttribute = foreign
		if foreign.R == nil {
			foreign.R = &attributeR{}
		}
		foreign.R.AttributeidAttributeProducts = append(foreign.R.AttributeidAttributeProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Attributeid, foreign.ID) {
				local.R.AttributeidAttribute = foreign
				if foreign.R == nil {
					foreign.R = &attributeR{}
				}
				foreign.R.AttributeidAttributeProducts = append(foreign.R.AttributeidAttributeProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadProducttypeidProductType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attributeProductL) LoadProducttypeidProductType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeProduct interface{}, mods queries.Applicator) error {
	var slice []*AttributeProduct
	var object *AttributeProduct

	if singular {
		var ok bool
		object, ok = maybeAttributeProduct.(*AttributeProduct)
		if !ok {
			object = new(AttributeProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeProduct))
			}
		}
	} else {
		s, ok := maybeAttributeProduct.(*[]*AttributeProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeProductR{}
		}
		if !queries.IsNil(object.Producttypeid) {
			args = append(args, object.Producttypeid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Producttypeid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Producttypeid) {
				args = append(args, obj.Producttypeid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_types`),
		qm.WhereIn(`product_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductType")
	}

	var resultSlice []*ProductType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_types")
	}

	if len(productTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProducttypeidProductType = foreign
		if foreign.R == nil {
			foreign.R = &productTypeR{}
		}
		foreign.R.ProducttypeidAttributeProducts = append(foreign.R.ProducttypeidAttributeProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Producttypeid, foreign.ID) {
				local.R.ProducttypeidProductType = foreign
				if foreign.R == nil {
					foreign.R = &productTypeR{}
				}
				foreign.R.ProducttypeidAttributeProducts = append(foreign.R.ProducttypeidAttributeProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignmentidAssignedProductAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeProductL) LoadAssignmentidAssignedProductAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeProduct interface{}, mods queries.Applicator) error {
	var slice []*AttributeProduct
	var object *AttributeProduct

	if singular {
		var ok bool
		object, ok = maybeAttributeProduct.(*AttributeProduct)
		if !ok {
			object = new(AttributeProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeProduct))
			}
		}
	} else {
		s, ok := maybeAttributeProduct.(*[]*AttributeProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_product_attributes`),
		qm.WhereIn(`assigned_product_attributes.assignmentid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_product_attributes")
	}

	var resultSlice []*AssignedProductAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_product_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_product_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_product_attributes")
	}

	if len(assignedProductAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignmentidAssignedProductAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedProductAttributeR{}
			}
			foreign.R.AssignmentidAttributeProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Assignmentid) {
				local.R.AssignmentidAssignedProductAttributes = append(local.R.AssignmentidAssignedProductAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &assignedProductAttributeR{}
				}
				foreign.R.AssignmentidAttributeProduct = local
				break
			}
		}
	}

	return nil
}

// SetAttributeidAttribute of the attributeProduct to the related item.
// Sets o.R.AttributeidAttribute to related.
// Adds o to related.R.AttributeidAttributeProducts.
func (o *AttributeProduct) SetAttributeidAttribute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Attribute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attribute_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"attributeid"}),
		strmangle.WhereClause("\"", "\"", 2, attributeProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Attributeid, related.ID)
	if o.R == nil {
		o.R = &attributeProductR{
			AttributeidAttribute: related,
		}
	} else {
		o.R.AttributeidAttribute = related
	}

	if related.R == nil {
		related.R = &attributeR{
			AttributeidAttributeProducts: AttributeProductSlice{o},
		}
	} else {
		related.R.AttributeidAttributeProducts = append(related.R.AttributeidAttributeProducts, o)
	}

	return nil
}

// RemoveAttributeidAttribute relationship.
// Sets o.R.AttributeidAttribute to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AttributeProduct) RemoveAttributeidAttribute(ctx context.Context, exec boil.ContextExecutor, related *Attribute) error {
	var err error

	queries.SetScanner(&o.Attributeid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("attributeid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AttributeidAttribute = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AttributeidAttributeProducts {
		if queries.Equal(o.Attributeid, ri.Attributeid) {
			continue
		}

		ln := len(related.R.AttributeidAttributeProducts)
		if ln > 1 && i < ln-1 {
			related.R.AttributeidAttributeProducts[i] = related.R.AttributeidAttributeProducts[ln-1]
		}
		related.R.AttributeidAttributeProducts = related.R.AttributeidAttributeProducts[:ln-1]
		break
	}
	return nil
}

// SetProducttypeidProductType of the attributeProduct to the related item.
// Sets o.R.ProducttypeidProductType to related.
// Adds o to related.R.ProducttypeidAttributeProducts.
func (o *AttributeProduct) SetProducttypeidProductType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attribute_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"producttypeid"}),
		strmangle.WhereClause("\"", "\"", 2, attributeProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Producttypeid, related.ID)
	if o.R == nil {
		o.R = &attributeProductR{
			ProducttypeidProductType: related,
		}
	} else {
		o.R.ProducttypeidProductType = related
	}

	if related.R == nil {
		related.R = &productTypeR{
			ProducttypeidAttributeProducts: AttributeProductSlice{o},
		}
	} else {
		related.R.ProducttypeidAttributeProducts = append(related.R.ProducttypeidAttributeProducts, o)
	}

	return nil
}

// RemoveProducttypeidProductType relationship.
// Sets o.R.ProducttypeidProductType to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AttributeProduct) RemoveProducttypeidProductType(ctx context.Context, exec boil.ContextExecutor, related *ProductType) error {
	var err error

	queries.SetScanner(&o.Producttypeid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("producttypeid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProducttypeidProductType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProducttypeidAttributeProducts {
		if queries.Equal(o.Producttypeid, ri.Producttypeid) {
			continue
		}

		ln := len(related.R.ProducttypeidAttributeProducts)
		if ln > 1 && i < ln-1 {
			related.R.ProducttypeidAttributeProducts[i] = related.R.ProducttypeidAttributeProducts[ln-1]
		}
		related.R.ProducttypeidAttributeProducts = related.R.ProducttypeidAttributeProducts[:ln-1]
		break
	}
	return nil
}

// AddAssignmentidAssignedProductAttributes adds the given related objects to the existing relationships
// of the attribute_product, optionally inserting them as new records.
// Appends related to o.R.AssignmentidAssignedProductAttributes.
// Sets related.R.AssignmentidAttributeProduct appropriately.
func (o *AttributeProduct) AddAssignmentidAssignedProductAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedProductAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Assignmentid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_product_attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assignmentid"}),
				strmangle.WhereClause("\"", "\"", 2, assignedProductAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Assignmentid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &attributeProductR{
			AssignmentidAssignedProductAttributes: related,
		}
	} else {
		o.R.AssignmentidAssignedProductAttributes = append(o.R.AssignmentidAssignedProductAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedProductAttributeR{
				AssignmentidAttributeProduct: o,
			}
		} else {
			rel.R.AssignmentidAttributeProduct = o
		}
	}
	return nil
}

// SetAssignmentidAssignedProductAttributes removes all previously related items of the
// attribute_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssignmentidAttributeProduct's AssignmentidAssignedProductAttributes accordingly.
// Replaces o.R.AssignmentidAssignedProductAttributes with related.
// Sets related.R.AssignmentidAttributeProduct's AssignmentidAssignedProductAttributes accordingly.
func (o *AttributeProduct) SetAssignmentidAssignedProductAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedProductAttribute) error {
	query := "update \"assigned_product_attributes\" set \"assignmentid\" = null where \"assignmentid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssignmentidAssignedProductAttributes {
			queries.SetScanner(&rel.Assignmentid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssignmentidAttributeProduct = nil
		}
		o.R.AssignmentidAssignedProductAttributes = nil
	}

	return o.AddAssignmentidAssignedProductAttributes(ctx, exec, insert, related...)
}

// RemoveAssignmentidAssignedProductAttributes relationships from objects passed in.
// Removes related items from R.AssignmentidAssignedProductAttributes (uses pointer comparison, removal does not keep order)
// Sets related.R.AssignmentidAttributeProduct.
func (o *AttributeProduct) RemoveAssignmentidAssignedProductAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*AssignedProductAttribute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Assignmentid, nil)
		if rel.R != nil {
			rel.R.AssignmentidAttributeProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("assignmentid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssignmentidAssignedProductAttributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssignmentidAssignedProductAttributes)
			if ln > 1 && i < ln-1 {
				o.R.AssignmentidAssignedProductAttributes[i] = o.R.AssignmentidAssignedProductAttributes[ln-1]
			}
			o.R.AssignmentidAssignedProductAttributes = o.R.AssignmentidAssignedProductAttributes[:ln-1]
			break
		}
	}

	return nil
}

// AttributeProducts retrieves all the records using an executor.
func AttributeProducts(mods ...qm.QueryMod) attributeProductQuery {
	mods = append(mods, qm.From("\"attribute_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"attribute_products\".*"})
	}

	return attributeProductQuery{q}
}

// FindAttributeProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttributeProduct(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AttributeProduct, error) {
	attributeProductObj := &AttributeProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attribute_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, attributeProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from attribute_products")
	}

	if err = attributeProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return attributeProductObj, err
	}

	return attributeProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AttributeProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attribute_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributeProductInsertCacheMut.RLock()
	cache, cached := attributeProductInsertCache[key]
	attributeProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributeProductAllColumns,
			attributeProductColumnsWithDefault,
			attributeProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributeProductType, attributeProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributeProductType, attributeProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attribute_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attribute_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into attribute_products")
	}

	if !cached {
		attributeProductInsertCacheMut.Lock()
		attributeProductInsertCache[key] = cache
		attributeProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AttributeProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AttributeProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	attributeProductUpdateCacheMut.RLock()
	cache, cached := attributeProductUpdateCache[key]
	attributeProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributeProductAllColumns,
			attributeProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update attribute_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attribute_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributeProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributeProductType, attributeProductMapping, append(wl, attributeProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update attribute_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for attribute_products")
	}

	if !cached {
		attributeProductUpdateCacheMut.Lock()
		attributeProductUpdateCache[key] = cache
		attributeProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q attributeProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for attribute_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for attribute_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributeProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attribute_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributeProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in attributeProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all attributeProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AttributeProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attribute_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributeProductUpsertCacheMut.RLock()
	cache, cached := attributeProductUpsertCache[key]
	attributeProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attributeProductAllColumns,
			attributeProductColumnsWithDefault,
			attributeProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			attributeProductAllColumns,
			attributeProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert attribute_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(attributeProductPrimaryKeyColumns))
			copy(conflict, attributeProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"attribute_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(attributeProductType, attributeProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributeProductType, attributeProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert attribute_products")
	}

	if !cached {
		attributeProductUpsertCacheMut.Lock()
		attributeProductUpsertCache[key] = cache
		attributeProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AttributeProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AttributeProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AttributeProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributeProductPrimaryKeyMapping)
	sql := "DELETE FROM \"attribute_products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from attribute_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for attribute_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attributeProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no attributeProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attribute_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attribute_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributeProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(attributeProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attribute_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attributeProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attribute_products")
	}

	if len(attributeProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AttributeProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAttributeProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributeProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributeProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attribute_products\".* FROM \"attribute_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AttributeProductSlice")
	}

	*o = slice

	return nil
}

// AttributeProductExists checks if the AttributeProduct row exists.
func AttributeProductExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attribute_products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if attribute_products exists")
	}

	return exists, nil
}

// Exists checks if the AttributeProduct row exists.
func (o *AttributeProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AttributeProductExists(ctx, exec, o.ID)
}
