// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AttributeProduct is an object representing the database table.
type AttributeProduct struct {
	ID            string   `boil:"id" json:"id" toml:"id" yaml:"id"`
	AttributeID   string   `boil:"attribute_id" json:"attribute_id" toml:"attribute_id" yaml:"attribute_id"`
	ProductTypeID string   `boil:"product_type_id" json:"product_type_id" toml:"product_type_id" yaml:"product_type_id"`
	SortOrder     null.Int `boil:"sort_order" json:"sort_order,omitempty" toml:"sort_order" yaml:"sort_order,omitempty"`

	R *attributeProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributeProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributeProductColumns = struct {
	ID            string
	AttributeID   string
	ProductTypeID string
	SortOrder     string
}{
	ID:            "id",
	AttributeID:   "attribute_id",
	ProductTypeID: "product_type_id",
	SortOrder:     "sort_order",
}

var AttributeProductTableColumns = struct {
	ID            string
	AttributeID   string
	ProductTypeID string
	SortOrder     string
}{
	ID:            "attribute_products.id",
	AttributeID:   "attribute_products.attribute_id",
	ProductTypeID: "attribute_products.product_type_id",
	SortOrder:     "attribute_products.sort_order",
}

// Generated where

var AttributeProductWhere = struct {
	ID            whereHelperstring
	AttributeID   whereHelperstring
	ProductTypeID whereHelperstring
	SortOrder     whereHelpernull_Int
}{
	ID:            whereHelperstring{field: "\"attribute_products\".\"id\""},
	AttributeID:   whereHelperstring{field: "\"attribute_products\".\"attribute_id\""},
	ProductTypeID: whereHelperstring{field: "\"attribute_products\".\"product_type_id\""},
	SortOrder:     whereHelpernull_Int{field: "\"attribute_products\".\"sort_order\""},
}

// AttributeProductRels is where relationship names are stored.
var AttributeProductRels = struct {
	Attribute                           string
	ProductType                         string
	AssignmentAssignedProductAttributes string
}{
	Attribute:                           "Attribute",
	ProductType:                         "ProductType",
	AssignmentAssignedProductAttributes: "AssignmentAssignedProductAttributes",
}

// attributeProductR is where relationships are stored.
type attributeProductR struct {
	Attribute                           *Attribute                    `boil:"Attribute" json:"Attribute" toml:"Attribute" yaml:"Attribute"`
	ProductType                         *ProductType                  `boil:"ProductType" json:"ProductType" toml:"ProductType" yaml:"ProductType"`
	AssignmentAssignedProductAttributes AssignedProductAttributeSlice `boil:"AssignmentAssignedProductAttributes" json:"AssignmentAssignedProductAttributes" toml:"AssignmentAssignedProductAttributes" yaml:"AssignmentAssignedProductAttributes"`
}

// NewStruct creates a new relationship struct
func (*attributeProductR) NewStruct() *attributeProductR {
	return &attributeProductR{}
}

func (r *attributeProductR) GetAttribute() *Attribute {
	if r == nil {
		return nil
	}
	return r.Attribute
}

func (r *attributeProductR) GetProductType() *ProductType {
	if r == nil {
		return nil
	}
	return r.ProductType
}

func (r *attributeProductR) GetAssignmentAssignedProductAttributes() AssignedProductAttributeSlice {
	if r == nil {
		return nil
	}
	return r.AssignmentAssignedProductAttributes
}

// attributeProductL is where Load methods for each relationship are stored.
type attributeProductL struct{}

var (
	attributeProductAllColumns            = []string{"id", "attribute_id", "product_type_id", "sort_order"}
	attributeProductColumnsWithoutDefault = []string{"attribute_id", "product_type_id"}
	attributeProductColumnsWithDefault    = []string{"id", "sort_order"}
	attributeProductPrimaryKeyColumns     = []string{"id"}
	attributeProductGeneratedColumns      = []string{}
)

type (
	// AttributeProductSlice is an alias for a slice of pointers to AttributeProduct.
	// This should almost always be used instead of []AttributeProduct.
	AttributeProductSlice []*AttributeProduct

	attributeProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributeProductType                 = reflect.TypeOf(&AttributeProduct{})
	attributeProductMapping              = queries.MakeStructMapping(attributeProductType)
	attributeProductPrimaryKeyMapping, _ = queries.BindMapping(attributeProductType, attributeProductMapping, attributeProductPrimaryKeyColumns)
	attributeProductInsertCacheMut       sync.RWMutex
	attributeProductInsertCache          = make(map[string]insertCache)
	attributeProductUpdateCacheMut       sync.RWMutex
	attributeProductUpdateCache          = make(map[string]updateCache)
	attributeProductUpsertCacheMut       sync.RWMutex
	attributeProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single attributeProduct record from the query.
func (q attributeProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AttributeProduct, error) {
	o := &AttributeProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for attribute_products")
	}

	return o, nil
}

// All returns all AttributeProduct records from the query.
func (q attributeProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (AttributeProductSlice, error) {
	var o []*AttributeProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AttributeProduct slice")
	}

	return o, nil
}

// Count returns the count of all AttributeProduct records in the query.
func (q attributeProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count attribute_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attributeProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if attribute_products exists")
	}

	return count > 0, nil
}

// Attribute pointed to by the foreign key.
func (o *AttributeProduct) Attribute(mods ...qm.QueryMod) attributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AttributeID),
	}

	queryMods = append(queryMods, mods...)

	return Attributes(queryMods...)
}

// ProductType pointed to by the foreign key.
func (o *AttributeProduct) ProductType(mods ...qm.QueryMod) productTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductTypeID),
	}

	queryMods = append(queryMods, mods...)

	return ProductTypes(queryMods...)
}

// AssignmentAssignedProductAttributes retrieves all the assigned_product_attribute's AssignedProductAttributes with an executor via assignment_id column.
func (o *AttributeProduct) AssignmentAssignedProductAttributes(mods ...qm.QueryMod) assignedProductAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_product_attributes\".\"assignment_id\"=?", o.ID),
	)

	return AssignedProductAttributes(queryMods...)
}

// LoadAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attributeProductL) LoadAttribute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeProduct interface{}, mods queries.Applicator) error {
	var slice []*AttributeProduct
	var object *AttributeProduct

	if singular {
		var ok bool
		object, ok = maybeAttributeProduct.(*AttributeProduct)
		if !ok {
			object = new(AttributeProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeProduct))
			}
		}
	} else {
		s, ok := maybeAttributeProduct.(*[]*AttributeProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeProductR{}
		}
		args = append(args, object.AttributeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeProductR{}
			}

			for _, a := range args {
				if a == obj.AttributeID {
					continue Outer
				}
			}

			args = append(args, obj.AttributeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attributes`),
		qm.WhereIn(`attributes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Attribute")
	}

	var resultSlice []*Attribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Attribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attributes")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Attribute = foreign
		if foreign.R == nil {
			foreign.R = &attributeR{}
		}
		foreign.R.AttributeProducts = append(foreign.R.AttributeProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AttributeID == foreign.ID {
				local.R.Attribute = foreign
				if foreign.R == nil {
					foreign.R = &attributeR{}
				}
				foreign.R.AttributeProducts = append(foreign.R.AttributeProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadProductType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attributeProductL) LoadProductType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeProduct interface{}, mods queries.Applicator) error {
	var slice []*AttributeProduct
	var object *AttributeProduct

	if singular {
		var ok bool
		object, ok = maybeAttributeProduct.(*AttributeProduct)
		if !ok {
			object = new(AttributeProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeProduct))
			}
		}
	} else {
		s, ok := maybeAttributeProduct.(*[]*AttributeProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeProductR{}
		}
		args = append(args, object.ProductTypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeProductR{}
			}

			for _, a := range args {
				if a == obj.ProductTypeID {
					continue Outer
				}
			}

			args = append(args, obj.ProductTypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_types`),
		qm.WhereIn(`product_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductType")
	}

	var resultSlice []*ProductType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_types")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductType = foreign
		if foreign.R == nil {
			foreign.R = &productTypeR{}
		}
		foreign.R.AttributeProducts = append(foreign.R.AttributeProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProductTypeID == foreign.ID {
				local.R.ProductType = foreign
				if foreign.R == nil {
					foreign.R = &productTypeR{}
				}
				foreign.R.AttributeProducts = append(foreign.R.AttributeProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignmentAssignedProductAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeProductL) LoadAssignmentAssignedProductAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeProduct interface{}, mods queries.Applicator) error {
	var slice []*AttributeProduct
	var object *AttributeProduct

	if singular {
		var ok bool
		object, ok = maybeAttributeProduct.(*AttributeProduct)
		if !ok {
			object = new(AttributeProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeProduct))
			}
		}
	} else {
		s, ok := maybeAttributeProduct.(*[]*AttributeProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeProductR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_product_attributes`),
		qm.WhereIn(`assigned_product_attributes.assignment_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_product_attributes")
	}

	var resultSlice []*AssignedProductAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_product_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_product_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_product_attributes")
	}

	if singular {
		object.R.AssignmentAssignedProductAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedProductAttributeR{}
			}
			foreign.R.Assignment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AssignmentID {
				local.R.AssignmentAssignedProductAttributes = append(local.R.AssignmentAssignedProductAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &assignedProductAttributeR{}
				}
				foreign.R.Assignment = local
				break
			}
		}
	}

	return nil
}

// SetAttribute of the attributeProduct to the related item.
// Sets o.R.Attribute to related.
// Adds o to related.R.AttributeProducts.
func (o *AttributeProduct) SetAttribute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Attribute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attribute_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"attribute_id"}),
		strmangle.WhereClause("\"", "\"", 2, attributeProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AttributeID = related.ID
	if o.R == nil {
		o.R = &attributeProductR{
			Attribute: related,
		}
	} else {
		o.R.Attribute = related
	}

	if related.R == nil {
		related.R = &attributeR{
			AttributeProducts: AttributeProductSlice{o},
		}
	} else {
		related.R.AttributeProducts = append(related.R.AttributeProducts, o)
	}

	return nil
}

// SetProductType of the attributeProduct to the related item.
// Sets o.R.ProductType to related.
// Adds o to related.R.AttributeProducts.
func (o *AttributeProduct) SetProductType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attribute_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, attributeProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProductTypeID = related.ID
	if o.R == nil {
		o.R = &attributeProductR{
			ProductType: related,
		}
	} else {
		o.R.ProductType = related
	}

	if related.R == nil {
		related.R = &productTypeR{
			AttributeProducts: AttributeProductSlice{o},
		}
	} else {
		related.R.AttributeProducts = append(related.R.AttributeProducts, o)
	}

	return nil
}

// AddAssignmentAssignedProductAttributes adds the given related objects to the existing relationships
// of the attribute_product, optionally inserting them as new records.
// Appends related to o.R.AssignmentAssignedProductAttributes.
// Sets related.R.Assignment appropriately.
func (o *AttributeProduct) AddAssignmentAssignedProductAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedProductAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AssignmentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_product_attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assignment_id"}),
				strmangle.WhereClause("\"", "\"", 2, assignedProductAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AssignmentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &attributeProductR{
			AssignmentAssignedProductAttributes: related,
		}
	} else {
		o.R.AssignmentAssignedProductAttributes = append(o.R.AssignmentAssignedProductAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedProductAttributeR{
				Assignment: o,
			}
		} else {
			rel.R.Assignment = o
		}
	}
	return nil
}

// AttributeProducts retrieves all the records using an executor.
func AttributeProducts(mods ...qm.QueryMod) attributeProductQuery {
	mods = append(mods, qm.From("\"attribute_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"attribute_products\".*"})
	}

	return attributeProductQuery{q}
}

// FindAttributeProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttributeProduct(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AttributeProduct, error) {
	attributeProductObj := &AttributeProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attribute_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, attributeProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from attribute_products")
	}

	return attributeProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AttributeProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attribute_products provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(attributeProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributeProductInsertCacheMut.RLock()
	cache, cached := attributeProductInsertCache[key]
	attributeProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributeProductAllColumns,
			attributeProductColumnsWithDefault,
			attributeProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributeProductType, attributeProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributeProductType, attributeProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attribute_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attribute_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into attribute_products")
	}

	if !cached {
		attributeProductInsertCacheMut.Lock()
		attributeProductInsertCache[key] = cache
		attributeProductInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AttributeProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AttributeProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	attributeProductUpdateCacheMut.RLock()
	cache, cached := attributeProductUpdateCache[key]
	attributeProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributeProductAllColumns,
			attributeProductPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update attribute_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attribute_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributeProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributeProductType, attributeProductMapping, append(wl, attributeProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update attribute_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for attribute_products")
	}

	if !cached {
		attributeProductUpdateCacheMut.Lock()
		attributeProductUpdateCache[key] = cache
		attributeProductUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q attributeProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for attribute_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for attribute_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributeProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attribute_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributeProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in attributeProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all attributeProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AttributeProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attribute_products provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributeProductUpsertCacheMut.RLock()
	cache, cached := attributeProductUpsertCache[key]
	attributeProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attributeProductAllColumns,
			attributeProductColumnsWithDefault,
			attributeProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			attributeProductAllColumns,
			attributeProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert attribute_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(attributeProductPrimaryKeyColumns))
			copy(conflict, attributeProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"attribute_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(attributeProductType, attributeProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributeProductType, attributeProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert attribute_products")
	}

	if !cached {
		attributeProductUpsertCacheMut.Lock()
		attributeProductUpsertCache[key] = cache
		attributeProductUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AttributeProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AttributeProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AttributeProduct provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributeProductPrimaryKeyMapping)
	sql := "DELETE FROM \"attribute_products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from attribute_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for attribute_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attributeProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no attributeProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attribute_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attribute_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributeProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attribute_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attributeProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attribute_products")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AttributeProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAttributeProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributeProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributeProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attribute_products\".* FROM \"attribute_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AttributeProductSlice")
	}

	*o = slice

	return nil
}

// AttributeProductExists checks if the AttributeProduct row exists.
func AttributeProductExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attribute_products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if attribute_products exists")
	}

	return exists, nil
}

// Exists checks if the AttributeProduct row exists.
func (o *AttributeProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AttributeProductExists(ctx, exec, o.ID)
}
