// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VoucherCollection is an object representing the database table.
type VoucherCollection struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Voucherid    null.String `boil:"voucherid" json:"voucherid,omitempty" toml:"voucherid" yaml:"voucherid,omitempty"`
	Collectionid null.String `boil:"collectionid" json:"collectionid,omitempty" toml:"collectionid" yaml:"collectionid,omitempty"`

	R *voucherCollectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voucherCollectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoucherCollectionColumns = struct {
	ID           string
	Voucherid    string
	Collectionid string
}{
	ID:           "id",
	Voucherid:    "voucherid",
	Collectionid: "collectionid",
}

var VoucherCollectionTableColumns = struct {
	ID           string
	Voucherid    string
	Collectionid string
}{
	ID:           "voucher_collections.id",
	Voucherid:    "voucher_collections.voucherid",
	Collectionid: "voucher_collections.collectionid",
}

// Generated where

var VoucherCollectionWhere = struct {
	ID           whereHelperstring
	Voucherid    whereHelpernull_String
	Collectionid whereHelpernull_String
}{
	ID:           whereHelperstring{field: "\"voucher_collections\".\"id\""},
	Voucherid:    whereHelpernull_String{field: "\"voucher_collections\".\"voucherid\""},
	Collectionid: whereHelpernull_String{field: "\"voucher_collections\".\"collectionid\""},
}

// VoucherCollectionRels is where relationship names are stored.
var VoucherCollectionRels = struct {
	CollectionidCollection string
	VoucheridVoucher       string
}{
	CollectionidCollection: "CollectionidCollection",
	VoucheridVoucher:       "VoucheridVoucher",
}

// voucherCollectionR is where relationships are stored.
type voucherCollectionR struct {
	CollectionidCollection *Collection `boil:"CollectionidCollection" json:"CollectionidCollection" toml:"CollectionidCollection" yaml:"CollectionidCollection"`
	VoucheridVoucher       *Voucher    `boil:"VoucheridVoucher" json:"VoucheridVoucher" toml:"VoucheridVoucher" yaml:"VoucheridVoucher"`
}

// NewStruct creates a new relationship struct
func (*voucherCollectionR) NewStruct() *voucherCollectionR {
	return &voucherCollectionR{}
}

func (r *voucherCollectionR) GetCollectionidCollection() *Collection {
	if r == nil {
		return nil
	}
	return r.CollectionidCollection
}

func (r *voucherCollectionR) GetVoucheridVoucher() *Voucher {
	if r == nil {
		return nil
	}
	return r.VoucheridVoucher
}

// voucherCollectionL is where Load methods for each relationship are stored.
type voucherCollectionL struct{}

var (
	voucherCollectionAllColumns            = []string{"id", "voucherid", "collectionid"}
	voucherCollectionColumnsWithoutDefault = []string{"id"}
	voucherCollectionColumnsWithDefault    = []string{"voucherid", "collectionid"}
	voucherCollectionPrimaryKeyColumns     = []string{"id"}
	voucherCollectionGeneratedColumns      = []string{}
)

type (
	// VoucherCollectionSlice is an alias for a slice of pointers to VoucherCollection.
	// This should almost always be used instead of []VoucherCollection.
	VoucherCollectionSlice []*VoucherCollection
	// VoucherCollectionHook is the signature for custom VoucherCollection hook methods
	VoucherCollectionHook func(context.Context, boil.ContextExecutor, *VoucherCollection) error

	voucherCollectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voucherCollectionType                 = reflect.TypeOf(&VoucherCollection{})
	voucherCollectionMapping              = queries.MakeStructMapping(voucherCollectionType)
	voucherCollectionPrimaryKeyMapping, _ = queries.BindMapping(voucherCollectionType, voucherCollectionMapping, voucherCollectionPrimaryKeyColumns)
	voucherCollectionInsertCacheMut       sync.RWMutex
	voucherCollectionInsertCache          = make(map[string]insertCache)
	voucherCollectionUpdateCacheMut       sync.RWMutex
	voucherCollectionUpdateCache          = make(map[string]updateCache)
	voucherCollectionUpsertCacheMut       sync.RWMutex
	voucherCollectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var voucherCollectionAfterSelectHooks []VoucherCollectionHook

var voucherCollectionBeforeInsertHooks []VoucherCollectionHook
var voucherCollectionAfterInsertHooks []VoucherCollectionHook

var voucherCollectionBeforeUpdateHooks []VoucherCollectionHook
var voucherCollectionAfterUpdateHooks []VoucherCollectionHook

var voucherCollectionBeforeDeleteHooks []VoucherCollectionHook
var voucherCollectionAfterDeleteHooks []VoucherCollectionHook

var voucherCollectionBeforeUpsertHooks []VoucherCollectionHook
var voucherCollectionAfterUpsertHooks []VoucherCollectionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VoucherCollection) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCollectionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VoucherCollection) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCollectionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VoucherCollection) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCollectionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VoucherCollection) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCollectionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VoucherCollection) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCollectionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VoucherCollection) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCollectionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VoucherCollection) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCollectionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VoucherCollection) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCollectionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VoucherCollection) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCollectionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVoucherCollectionHook registers your hook function for all future operations.
func AddVoucherCollectionHook(hookPoint boil.HookPoint, voucherCollectionHook VoucherCollectionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		voucherCollectionAfterSelectHooks = append(voucherCollectionAfterSelectHooks, voucherCollectionHook)
	case boil.BeforeInsertHook:
		voucherCollectionBeforeInsertHooks = append(voucherCollectionBeforeInsertHooks, voucherCollectionHook)
	case boil.AfterInsertHook:
		voucherCollectionAfterInsertHooks = append(voucherCollectionAfterInsertHooks, voucherCollectionHook)
	case boil.BeforeUpdateHook:
		voucherCollectionBeforeUpdateHooks = append(voucherCollectionBeforeUpdateHooks, voucherCollectionHook)
	case boil.AfterUpdateHook:
		voucherCollectionAfterUpdateHooks = append(voucherCollectionAfterUpdateHooks, voucherCollectionHook)
	case boil.BeforeDeleteHook:
		voucherCollectionBeforeDeleteHooks = append(voucherCollectionBeforeDeleteHooks, voucherCollectionHook)
	case boil.AfterDeleteHook:
		voucherCollectionAfterDeleteHooks = append(voucherCollectionAfterDeleteHooks, voucherCollectionHook)
	case boil.BeforeUpsertHook:
		voucherCollectionBeforeUpsertHooks = append(voucherCollectionBeforeUpsertHooks, voucherCollectionHook)
	case boil.AfterUpsertHook:
		voucherCollectionAfterUpsertHooks = append(voucherCollectionAfterUpsertHooks, voucherCollectionHook)
	}
}

// One returns a single voucherCollection record from the query.
func (q voucherCollectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VoucherCollection, error) {
	o := &VoucherCollection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for voucher_collections")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VoucherCollection records from the query.
func (q voucherCollectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (VoucherCollectionSlice, error) {
	var o []*VoucherCollection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VoucherCollection slice")
	}

	if len(voucherCollectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VoucherCollection records in the query.
func (q voucherCollectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count voucher_collections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voucherCollectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if voucher_collections exists")
	}

	return count > 0, nil
}

// CollectionidCollection pointed to by the foreign key.
func (o *VoucherCollection) CollectionidCollection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Collectionid),
	}

	queryMods = append(queryMods, mods...)

	return Collections(queryMods...)
}

// VoucheridVoucher pointed to by the foreign key.
func (o *VoucherCollection) VoucheridVoucher(mods ...qm.QueryMod) voucherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Voucherid),
	}

	queryMods = append(queryMods, mods...)

	return Vouchers(queryMods...)
}

// LoadCollectionidCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voucherCollectionL) LoadCollectionidCollection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucherCollection interface{}, mods queries.Applicator) error {
	var slice []*VoucherCollection
	var object *VoucherCollection

	if singular {
		var ok bool
		object, ok = maybeVoucherCollection.(*VoucherCollection)
		if !ok {
			object = new(VoucherCollection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucherCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucherCollection))
			}
		}
	} else {
		s, ok := maybeVoucherCollection.(*[]*VoucherCollection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucherCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucherCollection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherCollectionR{}
		}
		if !queries.IsNil(object.Collectionid) {
			args = append(args, object.Collectionid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherCollectionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Collectionid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Collectionid) {
				args = append(args, obj.Collectionid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(collectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionidCollection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.CollectionidVoucherCollections = append(foreign.R.CollectionidVoucherCollections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Collectionid, foreign.ID) {
				local.R.CollectionidCollection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.CollectionidVoucherCollections = append(foreign.R.CollectionidVoucherCollections, local)
				break
			}
		}
	}

	return nil
}

// LoadVoucheridVoucher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voucherCollectionL) LoadVoucheridVoucher(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucherCollection interface{}, mods queries.Applicator) error {
	var slice []*VoucherCollection
	var object *VoucherCollection

	if singular {
		var ok bool
		object, ok = maybeVoucherCollection.(*VoucherCollection)
		if !ok {
			object = new(VoucherCollection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucherCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucherCollection))
			}
		}
	} else {
		s, ok := maybeVoucherCollection.(*[]*VoucherCollection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucherCollection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucherCollection))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherCollectionR{}
		}
		if !queries.IsNil(object.Voucherid) {
			args = append(args, object.Voucherid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherCollectionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Voucherid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Voucherid) {
				args = append(args, obj.Voucherid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vouchers`),
		qm.WhereIn(`vouchers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Voucher")
	}

	var resultSlice []*Voucher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Voucher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vouchers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vouchers")
	}

	if len(voucherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VoucheridVoucher = foreign
		if foreign.R == nil {
			foreign.R = &voucherR{}
		}
		foreign.R.VoucheridVoucherCollections = append(foreign.R.VoucheridVoucherCollections, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Voucherid, foreign.ID) {
				local.R.VoucheridVoucher = foreign
				if foreign.R == nil {
					foreign.R = &voucherR{}
				}
				foreign.R.VoucheridVoucherCollections = append(foreign.R.VoucheridVoucherCollections, local)
				break
			}
		}
	}

	return nil
}

// SetCollectionidCollection of the voucherCollection to the related item.
// Sets o.R.CollectionidCollection to related.
// Adds o to related.R.CollectionidVoucherCollections.
func (o *VoucherCollection) SetCollectionidCollection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"voucher_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collectionid"}),
		strmangle.WhereClause("\"", "\"", 2, voucherCollectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Collectionid, related.ID)
	if o.R == nil {
		o.R = &voucherCollectionR{
			CollectionidCollection: related,
		}
	} else {
		o.R.CollectionidCollection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			CollectionidVoucherCollections: VoucherCollectionSlice{o},
		}
	} else {
		related.R.CollectionidVoucherCollections = append(related.R.CollectionidVoucherCollections, o)
	}

	return nil
}

// RemoveCollectionidCollection relationship.
// Sets o.R.CollectionidCollection to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VoucherCollection) RemoveCollectionidCollection(ctx context.Context, exec boil.ContextExecutor, related *Collection) error {
	var err error

	queries.SetScanner(&o.Collectionid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("collectionid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CollectionidCollection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CollectionidVoucherCollections {
		if queries.Equal(o.Collectionid, ri.Collectionid) {
			continue
		}

		ln := len(related.R.CollectionidVoucherCollections)
		if ln > 1 && i < ln-1 {
			related.R.CollectionidVoucherCollections[i] = related.R.CollectionidVoucherCollections[ln-1]
		}
		related.R.CollectionidVoucherCollections = related.R.CollectionidVoucherCollections[:ln-1]
		break
	}
	return nil
}

// SetVoucheridVoucher of the voucherCollection to the related item.
// Sets o.R.VoucheridVoucher to related.
// Adds o to related.R.VoucheridVoucherCollections.
func (o *VoucherCollection) SetVoucheridVoucher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Voucher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"voucher_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
		strmangle.WhereClause("\"", "\"", 2, voucherCollectionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Voucherid, related.ID)
	if o.R == nil {
		o.R = &voucherCollectionR{
			VoucheridVoucher: related,
		}
	} else {
		o.R.VoucheridVoucher = related
	}

	if related.R == nil {
		related.R = &voucherR{
			VoucheridVoucherCollections: VoucherCollectionSlice{o},
		}
	} else {
		related.R.VoucheridVoucherCollections = append(related.R.VoucheridVoucherCollections, o)
	}

	return nil
}

// RemoveVoucheridVoucher relationship.
// Sets o.R.VoucheridVoucher to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VoucherCollection) RemoveVoucheridVoucher(ctx context.Context, exec boil.ContextExecutor, related *Voucher) error {
	var err error

	queries.SetScanner(&o.Voucherid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("voucherid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.VoucheridVoucher = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VoucheridVoucherCollections {
		if queries.Equal(o.Voucherid, ri.Voucherid) {
			continue
		}

		ln := len(related.R.VoucheridVoucherCollections)
		if ln > 1 && i < ln-1 {
			related.R.VoucheridVoucherCollections[i] = related.R.VoucheridVoucherCollections[ln-1]
		}
		related.R.VoucheridVoucherCollections = related.R.VoucheridVoucherCollections[:ln-1]
		break
	}
	return nil
}

// VoucherCollections retrieves all the records using an executor.
func VoucherCollections(mods ...qm.QueryMod) voucherCollectionQuery {
	mods = append(mods, qm.From("\"voucher_collections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"voucher_collections\".*"})
	}

	return voucherCollectionQuery{q}
}

// FindVoucherCollection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoucherCollection(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*VoucherCollection, error) {
	voucherCollectionObj := &VoucherCollection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"voucher_collections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, voucherCollectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from voucher_collections")
	}

	if err = voucherCollectionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return voucherCollectionObj, err
	}

	return voucherCollectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VoucherCollection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no voucher_collections provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherCollectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voucherCollectionInsertCacheMut.RLock()
	cache, cached := voucherCollectionInsertCache[key]
	voucherCollectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voucherCollectionAllColumns,
			voucherCollectionColumnsWithDefault,
			voucherCollectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voucherCollectionType, voucherCollectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voucherCollectionType, voucherCollectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"voucher_collections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"voucher_collections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into voucher_collections")
	}

	if !cached {
		voucherCollectionInsertCacheMut.Lock()
		voucherCollectionInsertCache[key] = cache
		voucherCollectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VoucherCollection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VoucherCollection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	voucherCollectionUpdateCacheMut.RLock()
	cache, cached := voucherCollectionUpdateCache[key]
	voucherCollectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voucherCollectionAllColumns,
			voucherCollectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update voucher_collections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"voucher_collections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, voucherCollectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voucherCollectionType, voucherCollectionMapping, append(wl, voucherCollectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update voucher_collections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for voucher_collections")
	}

	if !cached {
		voucherCollectionUpdateCacheMut.Lock()
		voucherCollectionUpdateCache[key] = cache
		voucherCollectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q voucherCollectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for voucher_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for voucher_collections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoucherCollectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"voucher_collections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, voucherCollectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in voucherCollection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all voucherCollection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VoucherCollection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no voucher_collections provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherCollectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voucherCollectionUpsertCacheMut.RLock()
	cache, cached := voucherCollectionUpsertCache[key]
	voucherCollectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			voucherCollectionAllColumns,
			voucherCollectionColumnsWithDefault,
			voucherCollectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voucherCollectionAllColumns,
			voucherCollectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert voucher_collections, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(voucherCollectionPrimaryKeyColumns))
			copy(conflict, voucherCollectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"voucher_collections\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(voucherCollectionType, voucherCollectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voucherCollectionType, voucherCollectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert voucher_collections")
	}

	if !cached {
		voucherCollectionUpsertCacheMut.Lock()
		voucherCollectionUpsertCache[key] = cache
		voucherCollectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VoucherCollection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VoucherCollection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VoucherCollection provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voucherCollectionPrimaryKeyMapping)
	sql := "DELETE FROM \"voucher_collections\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from voucher_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for voucher_collections")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voucherCollectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no voucherCollectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from voucher_collections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for voucher_collections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoucherCollectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(voucherCollectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"voucher_collections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherCollectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from voucherCollection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for voucher_collections")
	}

	if len(voucherCollectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VoucherCollection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVoucherCollection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoucherCollectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoucherCollectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherCollectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"voucher_collections\".* FROM \"voucher_collections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherCollectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VoucherCollectionSlice")
	}

	*o = slice

	return nil
}

// VoucherCollectionExists checks if the VoucherCollection row exists.
func VoucherCollectionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"voucher_collections\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if voucher_collections exists")
	}

	return exists, nil
}

// Exists checks if the VoucherCollection row exists.
func (o *VoucherCollection) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VoucherCollectionExists(ctx, exec, o.ID)
}
