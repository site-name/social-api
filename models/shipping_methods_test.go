// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShippingMethods(t *testing.T) {
	t.Parallel()

	query := ShippingMethods()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShippingMethodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingMethodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShippingMethods().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingMethodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShippingMethodSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShippingMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShippingMethodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShippingMethodExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShippingMethod exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShippingMethodExists to return true, but got false.")
	}
}

func testShippingMethodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shippingMethodFound, err := FindShippingMethod(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shippingMethodFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShippingMethodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShippingMethods().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShippingMethodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShippingMethods().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShippingMethodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shippingMethodOne := &ShippingMethod{}
	shippingMethodTwo := &ShippingMethod{}
	if err = randomize.Struct(seed, shippingMethodOne, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}
	if err = randomize.Struct(seed, shippingMethodTwo, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shippingMethodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shippingMethodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShippingMethods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShippingMethodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shippingMethodOne := &ShippingMethod{}
	shippingMethodTwo := &ShippingMethod{}
	if err = randomize.Struct(seed, shippingMethodOne, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}
	if err = randomize.Struct(seed, shippingMethodTwo, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shippingMethodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shippingMethodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shippingMethodBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
	*o = ShippingMethod{}
	return nil
}

func shippingMethodAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
	*o = ShippingMethod{}
	return nil
}

func shippingMethodAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
	*o = ShippingMethod{}
	return nil
}

func shippingMethodBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
	*o = ShippingMethod{}
	return nil
}

func shippingMethodAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
	*o = ShippingMethod{}
	return nil
}

func shippingMethodBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
	*o = ShippingMethod{}
	return nil
}

func shippingMethodAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
	*o = ShippingMethod{}
	return nil
}

func shippingMethodBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
	*o = ShippingMethod{}
	return nil
}

func shippingMethodAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
	*o = ShippingMethod{}
	return nil
}

func testShippingMethodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShippingMethod{}
	o := &ShippingMethod{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShippingMethod object: %s", err)
	}

	AddShippingMethodHook(boil.BeforeInsertHook, shippingMethodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodBeforeInsertHooks = []ShippingMethodHook{}

	AddShippingMethodHook(boil.AfterInsertHook, shippingMethodAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodAfterInsertHooks = []ShippingMethodHook{}

	AddShippingMethodHook(boil.AfterSelectHook, shippingMethodAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shippingMethodAfterSelectHooks = []ShippingMethodHook{}

	AddShippingMethodHook(boil.BeforeUpdateHook, shippingMethodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shippingMethodBeforeUpdateHooks = []ShippingMethodHook{}

	AddShippingMethodHook(boil.AfterUpdateHook, shippingMethodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shippingMethodAfterUpdateHooks = []ShippingMethodHook{}

	AddShippingMethodHook(boil.BeforeDeleteHook, shippingMethodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shippingMethodBeforeDeleteHooks = []ShippingMethodHook{}

	AddShippingMethodHook(boil.AfterDeleteHook, shippingMethodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shippingMethodAfterDeleteHooks = []ShippingMethodHook{}

	AddShippingMethodHook(boil.BeforeUpsertHook, shippingMethodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodBeforeUpsertHooks = []ShippingMethodHook{}

	AddShippingMethodHook(boil.AfterUpsertHook, shippingMethodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shippingMethodAfterUpsertHooks = []ShippingMethodHook{}
}

func testShippingMethodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShippingMethodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shippingMethodColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShippingMethodToManyCheckouts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ShippingMethodID, a.ID)
	queries.Assign(&c.ShippingMethodID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Checkouts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ShippingMethodID, b.ShippingMethodID) {
			bFound = true
		}
		if queries.Equal(v.ShippingMethodID, c.ShippingMethodID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShippingMethodSlice{&a}
	if err = a.L.LoadCheckouts(ctx, tx, false, (*[]*ShippingMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Checkouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Checkouts = nil
	if err = a.L.LoadCheckouts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Checkouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShippingMethodToManyOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ShippingMethodID, a.ID)
	queries.Assign(&c.ShippingMethodID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Orders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ShippingMethodID, b.ShippingMethodID) {
			bFound = true
		}
		if queries.Equal(v.ShippingMethodID, c.ShippingMethodID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShippingMethodSlice{&a}
	if err = a.L.LoadOrders(ctx, tx, false, (*[]*ShippingMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Orders = nil
	if err = a.L.LoadOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Orders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShippingMethodToManyShippingMethodChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c ShippingMethodChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shippingMethodChannelListingDBTypes, false, shippingMethodChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingMethodChannelListingDBTypes, false, shippingMethodChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShippingMethodID = a.ID
	c.ShippingMethodID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShippingMethodChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShippingMethodID == b.ShippingMethodID {
			bFound = true
		}
		if v.ShippingMethodID == c.ShippingMethodID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShippingMethodSlice{&a}
	if err = a.L.LoadShippingMethodChannelListings(ctx, tx, false, (*[]*ShippingMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingMethodChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShippingMethodChannelListings = nil
	if err = a.L.LoadShippingMethodChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingMethodChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShippingMethodToManyShippingMethodExcludedProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c ShippingMethodExcludedProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShippingMethodID = a.ID
	c.ShippingMethodID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShippingMethodExcludedProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShippingMethodID == b.ShippingMethodID {
			bFound = true
		}
		if v.ShippingMethodID == c.ShippingMethodID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShippingMethodSlice{&a}
	if err = a.L.LoadShippingMethodExcludedProducts(ctx, tx, false, (*[]*ShippingMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingMethodExcludedProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShippingMethodExcludedProducts = nil
	if err = a.L.LoadShippingMethodExcludedProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingMethodExcludedProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShippingMethodToManyShippingMethodPostalCodeRules(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c ShippingMethodPostalCodeRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shippingMethodPostalCodeRuleDBTypes, false, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingMethodPostalCodeRuleDBTypes, false, shippingMethodPostalCodeRuleColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShippingMethodID = a.ID
	c.ShippingMethodID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ShippingMethodPostalCodeRules().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShippingMethodID == b.ShippingMethodID {
			bFound = true
		}
		if v.ShippingMethodID == c.ShippingMethodID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShippingMethodSlice{&a}
	if err = a.L.LoadShippingMethodPostalCodeRules(ctx, tx, false, (*[]*ShippingMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingMethodPostalCodeRules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ShippingMethodPostalCodeRules = nil
	if err = a.L.LoadShippingMethodPostalCodeRules(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ShippingMethodPostalCodeRules); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShippingMethodToManyAddOpCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Checkout{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCheckouts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ShippingMethodID) {
			t.Error("foreign key was wrong value", a.ID, first.ShippingMethodID)
		}
		if !queries.Equal(a.ID, second.ShippingMethodID) {
			t.Error("foreign key was wrong value", a.ID, second.ShippingMethodID)
		}

		if first.R.ShippingMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShippingMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Checkouts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Checkouts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Checkouts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testShippingMethodToManySetOpCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCheckouts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCheckouts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ShippingMethodID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ShippingMethodID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ShippingMethodID) {
		t.Error("foreign key was wrong value", a.ID, d.ShippingMethodID)
	}
	if !queries.Equal(a.ID, e.ShippingMethodID) {
		t.Error("foreign key was wrong value", a.ID, e.ShippingMethodID)
	}

	if b.R.ShippingMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ShippingMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ShippingMethod != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ShippingMethod != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Checkouts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Checkouts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testShippingMethodToManyRemoveOpCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCheckouts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCheckouts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ShippingMethodID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ShippingMethodID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ShippingMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ShippingMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ShippingMethod != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ShippingMethod != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Checkouts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Checkouts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Checkouts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testShippingMethodToManyAddOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ShippingMethodID) {
			t.Error("foreign key was wrong value", a.ID, first.ShippingMethodID)
		}
		if !queries.Equal(a.ID, second.ShippingMethodID) {
			t.Error("foreign key was wrong value", a.ID, second.ShippingMethodID)
		}

		if first.R.ShippingMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShippingMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Orders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Orders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Orders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testShippingMethodToManySetOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ShippingMethodID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ShippingMethodID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ShippingMethodID) {
		t.Error("foreign key was wrong value", a.ID, d.ShippingMethodID)
	}
	if !queries.Equal(a.ID, e.ShippingMethodID) {
		t.Error("foreign key was wrong value", a.ID, e.ShippingMethodID)
	}

	if b.R.ShippingMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ShippingMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ShippingMethod != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ShippingMethod != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Orders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Orders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testShippingMethodToManyRemoveOpOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Orders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ShippingMethodID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ShippingMethodID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ShippingMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ShippingMethod != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ShippingMethod != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ShippingMethod != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Orders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Orders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Orders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testShippingMethodToManyAddOpShippingMethodChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c, d, e ShippingMethodChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingMethodChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingMethodChannelListingDBTypes, false, strmangle.SetComplement(shippingMethodChannelListingPrimaryKeyColumns, shippingMethodChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShippingMethodChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShippingMethodChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShippingMethodID {
			t.Error("foreign key was wrong value", a.ID, first.ShippingMethodID)
		}
		if a.ID != second.ShippingMethodID {
			t.Error("foreign key was wrong value", a.ID, second.ShippingMethodID)
		}

		if first.R.ShippingMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShippingMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShippingMethodChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShippingMethodChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShippingMethodChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testShippingMethodToManyAddOpShippingMethodExcludedProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c, d, e ShippingMethodExcludedProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingMethodExcludedProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingMethodExcludedProductDBTypes, false, strmangle.SetComplement(shippingMethodExcludedProductPrimaryKeyColumns, shippingMethodExcludedProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShippingMethodExcludedProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShippingMethodExcludedProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShippingMethodID {
			t.Error("foreign key was wrong value", a.ID, first.ShippingMethodID)
		}
		if a.ID != second.ShippingMethodID {
			t.Error("foreign key was wrong value", a.ID, second.ShippingMethodID)
		}

		if first.R.ShippingMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShippingMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShippingMethodExcludedProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShippingMethodExcludedProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShippingMethodExcludedProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testShippingMethodToManyAddOpShippingMethodPostalCodeRules(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c, d, e ShippingMethodPostalCodeRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingMethodPostalCodeRule{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingMethodPostalCodeRuleDBTypes, false, strmangle.SetComplement(shippingMethodPostalCodeRulePrimaryKeyColumns, shippingMethodPostalCodeRuleColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShippingMethodPostalCodeRule{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddShippingMethodPostalCodeRules(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShippingMethodID {
			t.Error("foreign key was wrong value", a.ID, first.ShippingMethodID)
		}
		if a.ID != second.ShippingMethodID {
			t.Error("foreign key was wrong value", a.ID, second.ShippingMethodID)
		}

		if first.R.ShippingMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShippingMethod != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ShippingMethodPostalCodeRules[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ShippingMethodPostalCodeRules[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ShippingMethodPostalCodeRules().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testShippingMethodToOneShippingZoneUsingShippingZone(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShippingMethod
	var foreign ShippingZone

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shippingZoneDBTypes, false, shippingZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingZone struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ShippingZoneID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShippingZone().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShippingZoneHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ShippingZone) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShippingMethodSlice{&local}
	if err = local.L.LoadShippingZone(ctx, tx, false, (*[]*ShippingMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingZone == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShippingZone = nil
	if err = local.L.LoadShippingZone(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingZone == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShippingMethodToOneSetOpShippingZoneUsingShippingZone(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShippingMethod
	var b, c ShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingZoneDBTypes, false, strmangle.SetComplement(shippingZonePrimaryKeyColumns, shippingZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShippingZone{&b, &c} {
		err = a.SetShippingZone(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShippingZone != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShippingMethods[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ShippingZoneID != x.ID {
			t.Error("foreign key was wrong value", a.ShippingZoneID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShippingZoneID))
		reflect.Indirect(reflect.ValueOf(&a.ShippingZoneID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ShippingZoneID != x.ID {
			t.Error("foreign key was wrong value", a.ShippingZoneID, x.ID)
		}
	}
}

func testShippingMethodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShippingMethodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShippingMethodSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShippingMethodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShippingMethods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shippingMethodDBTypes = map[string]string{`ID`: `uuid`, `Name`: `character varying`, `Type`: `character varying`, `ShippingZoneID`: `uuid`, `MinimumOrderWeight`: `real`, `MaximumOrderWeight`: `real`, `WeightUnit`: `character varying`, `MaximumDeliveryDays`: `integer`, `MinimumDeliveryDays`: `integer`, `Description`: `jsonb`, `Metadata`: `jsonb`, `PrivateMetadata`: `jsonb`}
	_                     = bytes.MinRead
)

func testShippingMethodsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shippingMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shippingMethodAllColumns) == len(shippingMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShippingMethodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shippingMethodAllColumns) == len(shippingMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShippingMethod{}
	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShippingMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shippingMethodDBTypes, true, shippingMethodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shippingMethodAllColumns, shippingMethodPrimaryKeyColumns) {
		fields = shippingMethodAllColumns
	} else {
		fields = strmangle.SetComplement(
			shippingMethodAllColumns,
			shippingMethodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShippingMethodSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShippingMethodsUpsert(t *testing.T) {
	t.Parallel()

	if len(shippingMethodAllColumns) == len(shippingMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShippingMethod{}
	if err = randomize.Struct(seed, &o, shippingMethodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShippingMethod: %s", err)
	}

	count, err := ShippingMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shippingMethodDBTypes, false, shippingMethodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShippingMethod: %s", err)
	}

	count, err = ShippingMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
