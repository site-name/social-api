// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CollectionChannelListing is an object representing the database table.
type CollectionChannelListing struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Createat        null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Collectionid    null.String `boil:"collectionid" json:"collectionid,omitempty" toml:"collectionid" yaml:"collectionid,omitempty"`
	Channelid       null.String `boil:"channelid" json:"channelid,omitempty" toml:"channelid" yaml:"channelid,omitempty"`
	Publicationdate null.Time   `boil:"publicationdate" json:"publicationdate,omitempty" toml:"publicationdate" yaml:"publicationdate,omitempty"`
	Ispublished     null.Bool   `boil:"ispublished" json:"ispublished,omitempty" toml:"ispublished" yaml:"ispublished,omitempty"`

	R *collectionChannelListingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L collectionChannelListingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CollectionChannelListingColumns = struct {
	ID              string
	Createat        string
	Collectionid    string
	Channelid       string
	Publicationdate string
	Ispublished     string
}{
	ID:              "id",
	Createat:        "createat",
	Collectionid:    "collectionid",
	Channelid:       "channelid",
	Publicationdate: "publicationdate",
	Ispublished:     "ispublished",
}

var CollectionChannelListingTableColumns = struct {
	ID              string
	Createat        string
	Collectionid    string
	Channelid       string
	Publicationdate string
	Ispublished     string
}{
	ID:              "collection_channel_listings.id",
	Createat:        "collection_channel_listings.createat",
	Collectionid:    "collection_channel_listings.collectionid",
	Channelid:       "collection_channel_listings.channelid",
	Publicationdate: "collection_channel_listings.publicationdate",
	Ispublished:     "collection_channel_listings.ispublished",
}

// Generated where

var CollectionChannelListingWhere = struct {
	ID              whereHelperstring
	Createat        whereHelpernull_Int64
	Collectionid    whereHelpernull_String
	Channelid       whereHelpernull_String
	Publicationdate whereHelpernull_Time
	Ispublished     whereHelpernull_Bool
}{
	ID:              whereHelperstring{field: "\"collection_channel_listings\".\"id\""},
	Createat:        whereHelpernull_Int64{field: "\"collection_channel_listings\".\"createat\""},
	Collectionid:    whereHelpernull_String{field: "\"collection_channel_listings\".\"collectionid\""},
	Channelid:       whereHelpernull_String{field: "\"collection_channel_listings\".\"channelid\""},
	Publicationdate: whereHelpernull_Time{field: "\"collection_channel_listings\".\"publicationdate\""},
	Ispublished:     whereHelpernull_Bool{field: "\"collection_channel_listings\".\"ispublished\""},
}

// CollectionChannelListingRels is where relationship names are stored.
var CollectionChannelListingRels = struct {
	ChannelidChannel       string
	CollectionidCollection string
}{
	ChannelidChannel:       "ChannelidChannel",
	CollectionidCollection: "CollectionidCollection",
}

// collectionChannelListingR is where relationships are stored.
type collectionChannelListingR struct {
	ChannelidChannel       *Channel    `boil:"ChannelidChannel" json:"ChannelidChannel" toml:"ChannelidChannel" yaml:"ChannelidChannel"`
	CollectionidCollection *Collection `boil:"CollectionidCollection" json:"CollectionidCollection" toml:"CollectionidCollection" yaml:"CollectionidCollection"`
}

// NewStruct creates a new relationship struct
func (*collectionChannelListingR) NewStruct() *collectionChannelListingR {
	return &collectionChannelListingR{}
}

func (r *collectionChannelListingR) GetChannelidChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.ChannelidChannel
}

func (r *collectionChannelListingR) GetCollectionidCollection() *Collection {
	if r == nil {
		return nil
	}
	return r.CollectionidCollection
}

// collectionChannelListingL is where Load methods for each relationship are stored.
type collectionChannelListingL struct{}

var (
	collectionChannelListingAllColumns            = []string{"id", "createat", "collectionid", "channelid", "publicationdate", "ispublished"}
	collectionChannelListingColumnsWithoutDefault = []string{"id"}
	collectionChannelListingColumnsWithDefault    = []string{"createat", "collectionid", "channelid", "publicationdate", "ispublished"}
	collectionChannelListingPrimaryKeyColumns     = []string{"id"}
	collectionChannelListingGeneratedColumns      = []string{}
)

type (
	// CollectionChannelListingSlice is an alias for a slice of pointers to CollectionChannelListing.
	// This should almost always be used instead of []CollectionChannelListing.
	CollectionChannelListingSlice []*CollectionChannelListing
	// CollectionChannelListingHook is the signature for custom CollectionChannelListing hook methods
	CollectionChannelListingHook func(context.Context, boil.ContextExecutor, *CollectionChannelListing) error

	collectionChannelListingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	collectionChannelListingType                 = reflect.TypeOf(&CollectionChannelListing{})
	collectionChannelListingMapping              = queries.MakeStructMapping(collectionChannelListingType)
	collectionChannelListingPrimaryKeyMapping, _ = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, collectionChannelListingPrimaryKeyColumns)
	collectionChannelListingInsertCacheMut       sync.RWMutex
	collectionChannelListingInsertCache          = make(map[string]insertCache)
	collectionChannelListingUpdateCacheMut       sync.RWMutex
	collectionChannelListingUpdateCache          = make(map[string]updateCache)
	collectionChannelListingUpsertCacheMut       sync.RWMutex
	collectionChannelListingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var collectionChannelListingAfterSelectHooks []CollectionChannelListingHook

var collectionChannelListingBeforeInsertHooks []CollectionChannelListingHook
var collectionChannelListingAfterInsertHooks []CollectionChannelListingHook

var collectionChannelListingBeforeUpdateHooks []CollectionChannelListingHook
var collectionChannelListingAfterUpdateHooks []CollectionChannelListingHook

var collectionChannelListingBeforeDeleteHooks []CollectionChannelListingHook
var collectionChannelListingAfterDeleteHooks []CollectionChannelListingHook

var collectionChannelListingBeforeUpsertHooks []CollectionChannelListingHook
var collectionChannelListingAfterUpsertHooks []CollectionChannelListingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CollectionChannelListing) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collectionChannelListingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CollectionChannelListing) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collectionChannelListingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CollectionChannelListing) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collectionChannelListingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CollectionChannelListing) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collectionChannelListingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CollectionChannelListing) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collectionChannelListingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CollectionChannelListing) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collectionChannelListingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CollectionChannelListing) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collectionChannelListingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CollectionChannelListing) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collectionChannelListingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CollectionChannelListing) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range collectionChannelListingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCollectionChannelListingHook registers your hook function for all future operations.
func AddCollectionChannelListingHook(hookPoint boil.HookPoint, collectionChannelListingHook CollectionChannelListingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		collectionChannelListingAfterSelectHooks = append(collectionChannelListingAfterSelectHooks, collectionChannelListingHook)
	case boil.BeforeInsertHook:
		collectionChannelListingBeforeInsertHooks = append(collectionChannelListingBeforeInsertHooks, collectionChannelListingHook)
	case boil.AfterInsertHook:
		collectionChannelListingAfterInsertHooks = append(collectionChannelListingAfterInsertHooks, collectionChannelListingHook)
	case boil.BeforeUpdateHook:
		collectionChannelListingBeforeUpdateHooks = append(collectionChannelListingBeforeUpdateHooks, collectionChannelListingHook)
	case boil.AfterUpdateHook:
		collectionChannelListingAfterUpdateHooks = append(collectionChannelListingAfterUpdateHooks, collectionChannelListingHook)
	case boil.BeforeDeleteHook:
		collectionChannelListingBeforeDeleteHooks = append(collectionChannelListingBeforeDeleteHooks, collectionChannelListingHook)
	case boil.AfterDeleteHook:
		collectionChannelListingAfterDeleteHooks = append(collectionChannelListingAfterDeleteHooks, collectionChannelListingHook)
	case boil.BeforeUpsertHook:
		collectionChannelListingBeforeUpsertHooks = append(collectionChannelListingBeforeUpsertHooks, collectionChannelListingHook)
	case boil.AfterUpsertHook:
		collectionChannelListingAfterUpsertHooks = append(collectionChannelListingAfterUpsertHooks, collectionChannelListingHook)
	}
}

// One returns a single collectionChannelListing record from the query.
func (q collectionChannelListingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CollectionChannelListing, error) {
	o := &CollectionChannelListing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for collection_channel_listings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CollectionChannelListing records from the query.
func (q collectionChannelListingQuery) All(ctx context.Context, exec boil.ContextExecutor) (CollectionChannelListingSlice, error) {
	var o []*CollectionChannelListing

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CollectionChannelListing slice")
	}

	if len(collectionChannelListingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CollectionChannelListing records in the query.
func (q collectionChannelListingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count collection_channel_listings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q collectionChannelListingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if collection_channel_listings exists")
	}

	return count > 0, nil
}

// ChannelidChannel pointed to by the foreign key.
func (o *CollectionChannelListing) ChannelidChannel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Channelid),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// CollectionidCollection pointed to by the foreign key.
func (o *CollectionChannelListing) CollectionidCollection(mods ...qm.QueryMod) collectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Collectionid),
	}

	queryMods = append(queryMods, mods...)

	return Collections(queryMods...)
}

// LoadChannelidChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collectionChannelListingL) LoadChannelidChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollectionChannelListing interface{}, mods queries.Applicator) error {
	var slice []*CollectionChannelListing
	var object *CollectionChannelListing

	if singular {
		var ok bool
		object, ok = maybeCollectionChannelListing.(*CollectionChannelListing)
		if !ok {
			object = new(CollectionChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollectionChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollectionChannelListing))
			}
		}
	} else {
		s, ok := maybeCollectionChannelListing.(*[]*CollectionChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollectionChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollectionChannelListing))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collectionChannelListingR{}
		}
		if !queries.IsNil(object.Channelid) {
			args = append(args, object.Channelid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionChannelListingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Channelid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Channelid) {
				args = append(args, obj.Channelid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChannelidChannel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.ChannelidCollectionChannelListings = append(foreign.R.ChannelidCollectionChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Channelid, foreign.ID) {
				local.R.ChannelidChannel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.ChannelidCollectionChannelListings = append(foreign.R.ChannelidCollectionChannelListings, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionidCollection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (collectionChannelListingL) LoadCollectionidCollection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCollectionChannelListing interface{}, mods queries.Applicator) error {
	var slice []*CollectionChannelListing
	var object *CollectionChannelListing

	if singular {
		var ok bool
		object, ok = maybeCollectionChannelListing.(*CollectionChannelListing)
		if !ok {
			object = new(CollectionChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCollectionChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCollectionChannelListing))
			}
		}
	} else {
		s, ok := maybeCollectionChannelListing.(*[]*CollectionChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCollectionChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCollectionChannelListing))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &collectionChannelListingR{}
		}
		if !queries.IsNil(object.Collectionid) {
			args = append(args, object.Collectionid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &collectionChannelListingR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Collectionid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Collectionid) {
				args = append(args, obj.Collectionid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collections`),
		qm.WhereIn(`collections.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collections")
	}

	if len(collectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionidCollection = foreign
		if foreign.R == nil {
			foreign.R = &collectionR{}
		}
		foreign.R.CollectionidCollectionChannelListings = append(foreign.R.CollectionidCollectionChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Collectionid, foreign.ID) {
				local.R.CollectionidCollection = foreign
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.CollectionidCollectionChannelListings = append(foreign.R.CollectionidCollectionChannelListings, local)
				break
			}
		}
	}

	return nil
}

// SetChannelidChannel of the collectionChannelListing to the related item.
// Sets o.R.ChannelidChannel to related.
// Adds o to related.R.ChannelidCollectionChannelListings.
func (o *CollectionChannelListing) SetChannelidChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"collection_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
		strmangle.WhereClause("\"", "\"", 2, collectionChannelListingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Channelid, related.ID)
	if o.R == nil {
		o.R = &collectionChannelListingR{
			ChannelidChannel: related,
		}
	} else {
		o.R.ChannelidChannel = related
	}

	if related.R == nil {
		related.R = &channelR{
			ChannelidCollectionChannelListings: CollectionChannelListingSlice{o},
		}
	} else {
		related.R.ChannelidCollectionChannelListings = append(related.R.ChannelidCollectionChannelListings, o)
	}

	return nil
}

// RemoveChannelidChannel relationship.
// Sets o.R.ChannelidChannel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CollectionChannelListing) RemoveChannelidChannel(ctx context.Context, exec boil.ContextExecutor, related *Channel) error {
	var err error

	queries.SetScanner(&o.Channelid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ChannelidChannel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChannelidCollectionChannelListings {
		if queries.Equal(o.Channelid, ri.Channelid) {
			continue
		}

		ln := len(related.R.ChannelidCollectionChannelListings)
		if ln > 1 && i < ln-1 {
			related.R.ChannelidCollectionChannelListings[i] = related.R.ChannelidCollectionChannelListings[ln-1]
		}
		related.R.ChannelidCollectionChannelListings = related.R.ChannelidCollectionChannelListings[:ln-1]
		break
	}
	return nil
}

// SetCollectionidCollection of the collectionChannelListing to the related item.
// Sets o.R.CollectionidCollection to related.
// Adds o to related.R.CollectionidCollectionChannelListings.
func (o *CollectionChannelListing) SetCollectionidCollection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Collection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"collection_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collectionid"}),
		strmangle.WhereClause("\"", "\"", 2, collectionChannelListingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Collectionid, related.ID)
	if o.R == nil {
		o.R = &collectionChannelListingR{
			CollectionidCollection: related,
		}
	} else {
		o.R.CollectionidCollection = related
	}

	if related.R == nil {
		related.R = &collectionR{
			CollectionidCollectionChannelListings: CollectionChannelListingSlice{o},
		}
	} else {
		related.R.CollectionidCollectionChannelListings = append(related.R.CollectionidCollectionChannelListings, o)
	}

	return nil
}

// RemoveCollectionidCollection relationship.
// Sets o.R.CollectionidCollection to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CollectionChannelListing) RemoveCollectionidCollection(ctx context.Context, exec boil.ContextExecutor, related *Collection) error {
	var err error

	queries.SetScanner(&o.Collectionid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("collectionid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CollectionidCollection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CollectionidCollectionChannelListings {
		if queries.Equal(o.Collectionid, ri.Collectionid) {
			continue
		}

		ln := len(related.R.CollectionidCollectionChannelListings)
		if ln > 1 && i < ln-1 {
			related.R.CollectionidCollectionChannelListings[i] = related.R.CollectionidCollectionChannelListings[ln-1]
		}
		related.R.CollectionidCollectionChannelListings = related.R.CollectionidCollectionChannelListings[:ln-1]
		break
	}
	return nil
}

// CollectionChannelListings retrieves all the records using an executor.
func CollectionChannelListings(mods ...qm.QueryMod) collectionChannelListingQuery {
	mods = append(mods, qm.From("\"collection_channel_listings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"collection_channel_listings\".*"})
	}

	return collectionChannelListingQuery{q}
}

// FindCollectionChannelListing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCollectionChannelListing(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CollectionChannelListing, error) {
	collectionChannelListingObj := &CollectionChannelListing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"collection_channel_listings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, collectionChannelListingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from collection_channel_listings")
	}

	if err = collectionChannelListingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return collectionChannelListingObj, err
	}

	return collectionChannelListingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CollectionChannelListing) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no collection_channel_listings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(collectionChannelListingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	collectionChannelListingInsertCacheMut.RLock()
	cache, cached := collectionChannelListingInsertCache[key]
	collectionChannelListingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			collectionChannelListingAllColumns,
			collectionChannelListingColumnsWithDefault,
			collectionChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"collection_channel_listings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"collection_channel_listings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into collection_channel_listings")
	}

	if !cached {
		collectionChannelListingInsertCacheMut.Lock()
		collectionChannelListingInsertCache[key] = cache
		collectionChannelListingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CollectionChannelListing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CollectionChannelListing) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	collectionChannelListingUpdateCacheMut.RLock()
	cache, cached := collectionChannelListingUpdateCache[key]
	collectionChannelListingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			collectionChannelListingAllColumns,
			collectionChannelListingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update collection_channel_listings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"collection_channel_listings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, collectionChannelListingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, append(wl, collectionChannelListingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update collection_channel_listings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for collection_channel_listings")
	}

	if !cached {
		collectionChannelListingUpdateCacheMut.Lock()
		collectionChannelListingUpdateCache[key] = cache
		collectionChannelListingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q collectionChannelListingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for collection_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for collection_channel_listings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CollectionChannelListingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"collection_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, collectionChannelListingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in collectionChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all collectionChannelListing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CollectionChannelListing) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no collection_channel_listings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(collectionChannelListingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	collectionChannelListingUpsertCacheMut.RLock()
	cache, cached := collectionChannelListingUpsertCache[key]
	collectionChannelListingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			collectionChannelListingAllColumns,
			collectionChannelListingColumnsWithDefault,
			collectionChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			collectionChannelListingAllColumns,
			collectionChannelListingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert collection_channel_listings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(collectionChannelListingPrimaryKeyColumns))
			copy(conflict, collectionChannelListingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"collection_channel_listings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(collectionChannelListingType, collectionChannelListingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert collection_channel_listings")
	}

	if !cached {
		collectionChannelListingUpsertCacheMut.Lock()
		collectionChannelListingUpsertCache[key] = cache
		collectionChannelListingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CollectionChannelListing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CollectionChannelListing) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CollectionChannelListing provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), collectionChannelListingPrimaryKeyMapping)
	sql := "DELETE FROM \"collection_channel_listings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from collection_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for collection_channel_listings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q collectionChannelListingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no collectionChannelListingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from collection_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for collection_channel_listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CollectionChannelListingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(collectionChannelListingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"collection_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, collectionChannelListingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from collectionChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for collection_channel_listings")
	}

	if len(collectionChannelListingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CollectionChannelListing) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCollectionChannelListing(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CollectionChannelListingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CollectionChannelListingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), collectionChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"collection_channel_listings\".* FROM \"collection_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, collectionChannelListingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CollectionChannelListingSlice")
	}

	*o = slice

	return nil
}

// CollectionChannelListingExists checks if the CollectionChannelListing row exists.
func CollectionChannelListingExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"collection_channel_listings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if collection_channel_listings exists")
	}

	return exists, nil
}

// Exists checks if the CollectionChannelListing row exists.
func (o *CollectionChannelListing) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CollectionChannelListingExists(ctx, exec, o.ID)
}
