// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttributes(t *testing.T) {
	t.Parallel()

	query := Attributes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttributesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Attributes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttributeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Attribute exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttributeExists to return true, but got false.")
	}
}

func testAttributesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attributeFound, err := FindAttribute(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attributeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttributesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Attributes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttributesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Attributes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttributesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attributeOne := &Attribute{}
	attributeTwo := &Attribute{}
	if err = randomize.Struct(seed, attributeOne, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}
	if err = randomize.Struct(seed, attributeTwo, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Attributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttributesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attributeOne := &Attribute{}
	attributeTwo := &Attribute{}
	if err = randomize.Struct(seed, attributeOne, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}
	if err = randomize.Struct(seed, attributeTwo, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attributeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func testAttributesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Attribute{}
	o := &Attribute{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Attribute object: %s", err)
	}

	AddAttributeHook(boil.BeforeInsertHook, attributeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attributeBeforeInsertHooks = []AttributeHook{}

	AddAttributeHook(boil.AfterInsertHook, attributeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attributeAfterInsertHooks = []AttributeHook{}

	AddAttributeHook(boil.AfterSelectHook, attributeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attributeAfterSelectHooks = []AttributeHook{}

	AddAttributeHook(boil.BeforeUpdateHook, attributeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attributeBeforeUpdateHooks = []AttributeHook{}

	AddAttributeHook(boil.AfterUpdateHook, attributeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attributeAfterUpdateHooks = []AttributeHook{}

	AddAttributeHook(boil.BeforeDeleteHook, attributeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attributeBeforeDeleteHooks = []AttributeHook{}

	AddAttributeHook(boil.AfterDeleteHook, attributeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attributeAfterDeleteHooks = []AttributeHook{}

	AddAttributeHook(boil.BeforeUpsertHook, attributeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attributeBeforeUpsertHooks = []AttributeHook{}

	AddAttributeHook(boil.AfterUpsertHook, attributeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attributeAfterUpsertHooks = []AttributeHook{}
}

func testAttributesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(attributeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Attributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributeToManyAttributeProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c AttributeProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, attributeProductDBTypes, false, attributeProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeProductDBTypes, false, attributeProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AttributeID = a.ID
	c.AttributeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AttributeProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AttributeID == b.AttributeID {
			bFound = true
		}
		if v.AttributeID == c.AttributeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributeSlice{&a}
	if err = a.L.LoadAttributeProducts(ctx, tx, false, (*[]*Attribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AttributeProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AttributeProducts = nil
	if err = a.L.LoadAttributeProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AttributeProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAttributeToManyAttributeValues(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c AttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, attributeValueDBTypes, false, attributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeValueDBTypes, false, attributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AttributeID = a.ID
	c.AttributeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AttributeValues().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AttributeID == b.AttributeID {
			bFound = true
		}
		if v.AttributeID == c.AttributeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributeSlice{&a}
	if err = a.L.LoadAttributeValues(ctx, tx, false, (*[]*Attribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AttributeValues = nil
	if err = a.L.LoadAttributeValues(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAttributeToManyAttributeVariants(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c AttributeVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, attributeVariantDBTypes, false, attributeVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeVariantDBTypes, false, attributeVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AttributeID = a.ID
	c.AttributeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AttributeVariants().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AttributeID == b.AttributeID {
			bFound = true
		}
		if v.AttributeID == c.AttributeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributeSlice{&a}
	if err = a.L.LoadAttributeVariants(ctx, tx, false, (*[]*Attribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AttributeVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AttributeVariants = nil
	if err = a.L.LoadAttributeVariants(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AttributeVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAttributeToManyAddOpAttributeProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e AttributeProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AttributeProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attributeProductDBTypes, false, strmangle.SetComplement(attributeProductPrimaryKeyColumns, attributeProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AttributeProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAttributeProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AttributeID {
			t.Error("foreign key was wrong value", a.ID, first.AttributeID)
		}
		if a.ID != second.AttributeID {
			t.Error("foreign key was wrong value", a.ID, second.AttributeID)
		}

		if first.R.Attribute != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Attribute != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AttributeProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AttributeProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AttributeProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAttributeToManyAddOpAttributeValues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e AttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AttributeValue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AttributeValue{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAttributeValues(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AttributeID {
			t.Error("foreign key was wrong value", a.ID, first.AttributeID)
		}
		if a.ID != second.AttributeID {
			t.Error("foreign key was wrong value", a.ID, second.AttributeID)
		}

		if first.R.Attribute != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Attribute != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AttributeValues[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AttributeValues[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AttributeValues().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAttributeToManyAddOpAttributeVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e AttributeVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AttributeVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AttributeVariant{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAttributeVariants(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AttributeID {
			t.Error("foreign key was wrong value", a.ID, first.AttributeID)
		}
		if a.ID != second.AttributeID {
			t.Error("foreign key was wrong value", a.ID, second.AttributeID)
		}

		if first.R.Attribute != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Attribute != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AttributeVariants[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AttributeVariants[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AttributeVariants().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAttributesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Attributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attributeDBTypes = map[string]string{`ID`: `uuid`, `Slug`: `character varying`, `Name`: `character varying`, `Type`: `character varying`, `InputType`: `character varying`, `EntityType`: `character varying`, `Unit`: `character varying`, `ValueRequired`: `boolean`, `IsVariantOnly`: `boolean`, `VisibleInStorefront`: `boolean`, `FilterableInStorefront`: `boolean`, `FilterableInDashboard`: `boolean`, `StorefrontSearchPosition`: `integer`, `AvailableInGrid`: `boolean`, `Metadata`: `jsonb`, `PrivateMetadata`: `jsonb`}
	_                = bytes.MinRead
)

func testAttributesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attributePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attributeAllColumns) == len(attributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttributesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attributeAllColumns) == len(attributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attributeAllColumns, attributePrimaryKeyColumns) {
		fields = attributeAllColumns
	} else {
		fields = strmangle.SetComplement(
			attributeAllColumns,
			attributePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttributeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAttributesUpsert(t *testing.T) {
	t.Parallel()

	if len(attributeAllColumns) == len(attributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Attribute{}
	if err = randomize.Struct(seed, &o, attributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Attribute: %s", err)
	}

	count, err := Attributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attributeDBTypes, false, attributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Attribute: %s", err)
	}

	count, err = Attributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
