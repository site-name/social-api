// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VoucherProduct is an object representing the database table.
type VoucherProduct struct {
	ID        string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Voucherid null.String `boil:"voucherid" json:"voucherid,omitempty" toml:"voucherid" yaml:"voucherid,omitempty"`
	Productid null.String `boil:"productid" json:"productid,omitempty" toml:"productid" yaml:"productid,omitempty"`

	R *voucherProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voucherProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoucherProductColumns = struct {
	ID        string
	Voucherid string
	Productid string
}{
	ID:        "id",
	Voucherid: "voucherid",
	Productid: "productid",
}

var VoucherProductTableColumns = struct {
	ID        string
	Voucherid string
	Productid string
}{
	ID:        "voucher_products.id",
	Voucherid: "voucher_products.voucherid",
	Productid: "voucher_products.productid",
}

// Generated where

var VoucherProductWhere = struct {
	ID        whereHelperstring
	Voucherid whereHelpernull_String
	Productid whereHelpernull_String
}{
	ID:        whereHelperstring{field: "\"voucher_products\".\"id\""},
	Voucherid: whereHelpernull_String{field: "\"voucher_products\".\"voucherid\""},
	Productid: whereHelpernull_String{field: "\"voucher_products\".\"productid\""},
}

// VoucherProductRels is where relationship names are stored.
var VoucherProductRels = struct {
	ProductidProduct string
	VoucheridVoucher string
}{
	ProductidProduct: "ProductidProduct",
	VoucheridVoucher: "VoucheridVoucher",
}

// voucherProductR is where relationships are stored.
type voucherProductR struct {
	ProductidProduct *Product `boil:"ProductidProduct" json:"ProductidProduct" toml:"ProductidProduct" yaml:"ProductidProduct"`
	VoucheridVoucher *Voucher `boil:"VoucheridVoucher" json:"VoucheridVoucher" toml:"VoucheridVoucher" yaml:"VoucheridVoucher"`
}

// NewStruct creates a new relationship struct
func (*voucherProductR) NewStruct() *voucherProductR {
	return &voucherProductR{}
}

func (r *voucherProductR) GetProductidProduct() *Product {
	if r == nil {
		return nil
	}
	return r.ProductidProduct
}

func (r *voucherProductR) GetVoucheridVoucher() *Voucher {
	if r == nil {
		return nil
	}
	return r.VoucheridVoucher
}

// voucherProductL is where Load methods for each relationship are stored.
type voucherProductL struct{}

var (
	voucherProductAllColumns            = []string{"id", "voucherid", "productid"}
	voucherProductColumnsWithoutDefault = []string{"id"}
	voucherProductColumnsWithDefault    = []string{"voucherid", "productid"}
	voucherProductPrimaryKeyColumns     = []string{"id"}
	voucherProductGeneratedColumns      = []string{}
)

type (
	// VoucherProductSlice is an alias for a slice of pointers to VoucherProduct.
	// This should almost always be used instead of []VoucherProduct.
	VoucherProductSlice []*VoucherProduct
	// VoucherProductHook is the signature for custom VoucherProduct hook methods
	VoucherProductHook func(context.Context, boil.ContextExecutor, *VoucherProduct) error

	voucherProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voucherProductType                 = reflect.TypeOf(&VoucherProduct{})
	voucherProductMapping              = queries.MakeStructMapping(voucherProductType)
	voucherProductPrimaryKeyMapping, _ = queries.BindMapping(voucherProductType, voucherProductMapping, voucherProductPrimaryKeyColumns)
	voucherProductInsertCacheMut       sync.RWMutex
	voucherProductInsertCache          = make(map[string]insertCache)
	voucherProductUpdateCacheMut       sync.RWMutex
	voucherProductUpdateCache          = make(map[string]updateCache)
	voucherProductUpsertCacheMut       sync.RWMutex
	voucherProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var voucherProductAfterSelectHooks []VoucherProductHook

var voucherProductBeforeInsertHooks []VoucherProductHook
var voucherProductAfterInsertHooks []VoucherProductHook

var voucherProductBeforeUpdateHooks []VoucherProductHook
var voucherProductAfterUpdateHooks []VoucherProductHook

var voucherProductBeforeDeleteHooks []VoucherProductHook
var voucherProductAfterDeleteHooks []VoucherProductHook

var voucherProductBeforeUpsertHooks []VoucherProductHook
var voucherProductAfterUpsertHooks []VoucherProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VoucherProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VoucherProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VoucherProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VoucherProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VoucherProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VoucherProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VoucherProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VoucherProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VoucherProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVoucherProductHook registers your hook function for all future operations.
func AddVoucherProductHook(hookPoint boil.HookPoint, voucherProductHook VoucherProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		voucherProductAfterSelectHooks = append(voucherProductAfterSelectHooks, voucherProductHook)
	case boil.BeforeInsertHook:
		voucherProductBeforeInsertHooks = append(voucherProductBeforeInsertHooks, voucherProductHook)
	case boil.AfterInsertHook:
		voucherProductAfterInsertHooks = append(voucherProductAfterInsertHooks, voucherProductHook)
	case boil.BeforeUpdateHook:
		voucherProductBeforeUpdateHooks = append(voucherProductBeforeUpdateHooks, voucherProductHook)
	case boil.AfterUpdateHook:
		voucherProductAfterUpdateHooks = append(voucherProductAfterUpdateHooks, voucherProductHook)
	case boil.BeforeDeleteHook:
		voucherProductBeforeDeleteHooks = append(voucherProductBeforeDeleteHooks, voucherProductHook)
	case boil.AfterDeleteHook:
		voucherProductAfterDeleteHooks = append(voucherProductAfterDeleteHooks, voucherProductHook)
	case boil.BeforeUpsertHook:
		voucherProductBeforeUpsertHooks = append(voucherProductBeforeUpsertHooks, voucherProductHook)
	case boil.AfterUpsertHook:
		voucherProductAfterUpsertHooks = append(voucherProductAfterUpsertHooks, voucherProductHook)
	}
}

// One returns a single voucherProduct record from the query.
func (q voucherProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VoucherProduct, error) {
	o := &VoucherProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for voucher_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VoucherProduct records from the query.
func (q voucherProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (VoucherProductSlice, error) {
	var o []*VoucherProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VoucherProduct slice")
	}

	if len(voucherProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VoucherProduct records in the query.
func (q voucherProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count voucher_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voucherProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if voucher_products exists")
	}

	return count > 0, nil
}

// ProductidProduct pointed to by the foreign key.
func (o *VoucherProduct) ProductidProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Productid),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// VoucheridVoucher pointed to by the foreign key.
func (o *VoucherProduct) VoucheridVoucher(mods ...qm.QueryMod) voucherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Voucherid),
	}

	queryMods = append(queryMods, mods...)

	return Vouchers(queryMods...)
}

// LoadProductidProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voucherProductL) LoadProductidProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucherProduct interface{}, mods queries.Applicator) error {
	var slice []*VoucherProduct
	var object *VoucherProduct

	if singular {
		var ok bool
		object, ok = maybeVoucherProduct.(*VoucherProduct)
		if !ok {
			object = new(VoucherProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucherProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucherProduct))
			}
		}
	} else {
		s, ok := maybeVoucherProduct.(*[]*VoucherProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucherProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucherProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherProductR{}
		}
		if !queries.IsNil(object.Productid) {
			args = append(args, object.Productid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Productid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Productid) {
				args = append(args, obj.Productid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductidProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductidVoucherProducts = append(foreign.R.ProductidVoucherProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Productid, foreign.ID) {
				local.R.ProductidProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductidVoucherProducts = append(foreign.R.ProductidVoucherProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadVoucheridVoucher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voucherProductL) LoadVoucheridVoucher(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucherProduct interface{}, mods queries.Applicator) error {
	var slice []*VoucherProduct
	var object *VoucherProduct

	if singular {
		var ok bool
		object, ok = maybeVoucherProduct.(*VoucherProduct)
		if !ok {
			object = new(VoucherProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucherProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucherProduct))
			}
		}
	} else {
		s, ok := maybeVoucherProduct.(*[]*VoucherProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucherProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucherProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherProductR{}
		}
		if !queries.IsNil(object.Voucherid) {
			args = append(args, object.Voucherid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Voucherid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Voucherid) {
				args = append(args, obj.Voucherid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vouchers`),
		qm.WhereIn(`vouchers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Voucher")
	}

	var resultSlice []*Voucher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Voucher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vouchers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vouchers")
	}

	if len(voucherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VoucheridVoucher = foreign
		if foreign.R == nil {
			foreign.R = &voucherR{}
		}
		foreign.R.VoucheridVoucherProducts = append(foreign.R.VoucheridVoucherProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Voucherid, foreign.ID) {
				local.R.VoucheridVoucher = foreign
				if foreign.R == nil {
					foreign.R = &voucherR{}
				}
				foreign.R.VoucheridVoucherProducts = append(foreign.R.VoucheridVoucherProducts, local)
				break
			}
		}
	}

	return nil
}

// SetProductidProduct of the voucherProduct to the related item.
// Sets o.R.ProductidProduct to related.
// Adds o to related.R.ProductidVoucherProducts.
func (o *VoucherProduct) SetProductidProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"voucher_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
		strmangle.WhereClause("\"", "\"", 2, voucherProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Productid, related.ID)
	if o.R == nil {
		o.R = &voucherProductR{
			ProductidProduct: related,
		}
	} else {
		o.R.ProductidProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductidVoucherProducts: VoucherProductSlice{o},
		}
	} else {
		related.R.ProductidVoucherProducts = append(related.R.ProductidVoucherProducts, o)
	}

	return nil
}

// RemoveProductidProduct relationship.
// Sets o.R.ProductidProduct to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VoucherProduct) RemoveProductidProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.Productid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductidProduct = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductidVoucherProducts {
		if queries.Equal(o.Productid, ri.Productid) {
			continue
		}

		ln := len(related.R.ProductidVoucherProducts)
		if ln > 1 && i < ln-1 {
			related.R.ProductidVoucherProducts[i] = related.R.ProductidVoucherProducts[ln-1]
		}
		related.R.ProductidVoucherProducts = related.R.ProductidVoucherProducts[:ln-1]
		break
	}
	return nil
}

// SetVoucheridVoucher of the voucherProduct to the related item.
// Sets o.R.VoucheridVoucher to related.
// Adds o to related.R.VoucheridVoucherProducts.
func (o *VoucherProduct) SetVoucheridVoucher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Voucher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"voucher_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
		strmangle.WhereClause("\"", "\"", 2, voucherProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Voucherid, related.ID)
	if o.R == nil {
		o.R = &voucherProductR{
			VoucheridVoucher: related,
		}
	} else {
		o.R.VoucheridVoucher = related
	}

	if related.R == nil {
		related.R = &voucherR{
			VoucheridVoucherProducts: VoucherProductSlice{o},
		}
	} else {
		related.R.VoucheridVoucherProducts = append(related.R.VoucheridVoucherProducts, o)
	}

	return nil
}

// RemoveVoucheridVoucher relationship.
// Sets o.R.VoucheridVoucher to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VoucherProduct) RemoveVoucheridVoucher(ctx context.Context, exec boil.ContextExecutor, related *Voucher) error {
	var err error

	queries.SetScanner(&o.Voucherid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("voucherid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.VoucheridVoucher = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VoucheridVoucherProducts {
		if queries.Equal(o.Voucherid, ri.Voucherid) {
			continue
		}

		ln := len(related.R.VoucheridVoucherProducts)
		if ln > 1 && i < ln-1 {
			related.R.VoucheridVoucherProducts[i] = related.R.VoucheridVoucherProducts[ln-1]
		}
		related.R.VoucheridVoucherProducts = related.R.VoucheridVoucherProducts[:ln-1]
		break
	}
	return nil
}

// VoucherProducts retrieves all the records using an executor.
func VoucherProducts(mods ...qm.QueryMod) voucherProductQuery {
	mods = append(mods, qm.From("\"voucher_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"voucher_products\".*"})
	}

	return voucherProductQuery{q}
}

// FindVoucherProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoucherProduct(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*VoucherProduct, error) {
	voucherProductObj := &VoucherProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"voucher_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, voucherProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from voucher_products")
	}

	if err = voucherProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return voucherProductObj, err
	}

	return voucherProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VoucherProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no voucher_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voucherProductInsertCacheMut.RLock()
	cache, cached := voucherProductInsertCache[key]
	voucherProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voucherProductAllColumns,
			voucherProductColumnsWithDefault,
			voucherProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voucherProductType, voucherProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voucherProductType, voucherProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"voucher_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"voucher_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into voucher_products")
	}

	if !cached {
		voucherProductInsertCacheMut.Lock()
		voucherProductInsertCache[key] = cache
		voucherProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VoucherProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VoucherProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	voucherProductUpdateCacheMut.RLock()
	cache, cached := voucherProductUpdateCache[key]
	voucherProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voucherProductAllColumns,
			voucherProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update voucher_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"voucher_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, voucherProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voucherProductType, voucherProductMapping, append(wl, voucherProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update voucher_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for voucher_products")
	}

	if !cached {
		voucherProductUpdateCacheMut.Lock()
		voucherProductUpdateCache[key] = cache
		voucherProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q voucherProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for voucher_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for voucher_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoucherProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"voucher_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, voucherProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in voucherProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all voucherProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VoucherProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no voucher_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voucherProductUpsertCacheMut.RLock()
	cache, cached := voucherProductUpsertCache[key]
	voucherProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			voucherProductAllColumns,
			voucherProductColumnsWithDefault,
			voucherProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voucherProductAllColumns,
			voucherProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert voucher_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(voucherProductPrimaryKeyColumns))
			copy(conflict, voucherProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"voucher_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(voucherProductType, voucherProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voucherProductType, voucherProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert voucher_products")
	}

	if !cached {
		voucherProductUpsertCacheMut.Lock()
		voucherProductUpsertCache[key] = cache
		voucherProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VoucherProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VoucherProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VoucherProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voucherProductPrimaryKeyMapping)
	sql := "DELETE FROM \"voucher_products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from voucher_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for voucher_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voucherProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no voucherProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from voucher_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for voucher_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoucherProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(voucherProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"voucher_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from voucherProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for voucher_products")
	}

	if len(voucherProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VoucherProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVoucherProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoucherProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoucherProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"voucher_products\".* FROM \"voucher_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VoucherProductSlice")
	}

	*o = slice

	return nil
}

// VoucherProductExists checks if the VoucherProduct row exists.
func VoucherProductExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"voucher_products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if voucher_products exists")
	}

	return exists, nil
}

// Exists checks if the VoucherProduct row exists.
func (o *VoucherProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VoucherProductExists(ctx, exec, o.ID)
}
