// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Giftcard is an object representing the database table.
type Giftcard struct {
	ID                   string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code                 string       `boil:"code" json:"code" toml:"code" yaml:"code"`
	CreatedByID          null.String  `boil:"created_by_id" json:"created_by_id,omitempty" toml:"created_by_id" yaml:"created_by_id,omitempty"`
	UsedByID             null.String  `boil:"used_by_id" json:"used_by_id,omitempty" toml:"used_by_id" yaml:"used_by_id,omitempty"`
	CreatedByEmail       null.String  `boil:"created_by_email" json:"created_by_email,omitempty" toml:"created_by_email" yaml:"created_by_email,omitempty"`
	UsedByEmail          null.String  `boil:"used_by_email" json:"used_by_email,omitempty" toml:"used_by_email" yaml:"used_by_email,omitempty"`
	CreatedAt            int64        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	StartDate            null.Time    `boil:"start_date" json:"start_date,omitempty" toml:"start_date" yaml:"start_date,omitempty"`
	ExpiryDate           null.Time    `boil:"expiry_date" json:"expiry_date,omitempty" toml:"expiry_date" yaml:"expiry_date,omitempty"`
	Tag                  null.String  `boil:"tag" json:"tag,omitempty" toml:"tag" yaml:"tag,omitempty"`
	ProductID            null.String  `boil:"product_id" json:"product_id,omitempty" toml:"product_id" yaml:"product_id,omitempty"`
	LastUsedOn           null.Int64   `boil:"last_used_on" json:"last_used_on,omitempty" toml:"last_used_on" yaml:"last_used_on,omitempty"`
	IsActive             null.Bool    `boil:"is_active" json:"is_active,omitempty" toml:"is_active" yaml:"is_active,omitempty"`
	Currency             string       `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	InitialBalanceAmount null.Float64 `boil:"initial_balance_amount" json:"initial_balance_amount,omitempty" toml:"initial_balance_amount" yaml:"initial_balance_amount,omitempty"`
	CurrentBalanceAmount null.Float64 `boil:"current_balance_amount" json:"current_balance_amount,omitempty" toml:"current_balance_amount" yaml:"current_balance_amount,omitempty"`
	Metadata             null.JSON    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata      null.JSON    `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *giftcardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L giftcardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GiftcardColumns = struct {
	ID                   string
	Code                 string
	CreatedByID          string
	UsedByID             string
	CreatedByEmail       string
	UsedByEmail          string
	CreatedAt            string
	StartDate            string
	ExpiryDate           string
	Tag                  string
	ProductID            string
	LastUsedOn           string
	IsActive             string
	Currency             string
	InitialBalanceAmount string
	CurrentBalanceAmount string
	Metadata             string
	PrivateMetadata      string
}{
	ID:                   "id",
	Code:                 "code",
	CreatedByID:          "created_by_id",
	UsedByID:             "used_by_id",
	CreatedByEmail:       "created_by_email",
	UsedByEmail:          "used_by_email",
	CreatedAt:            "created_at",
	StartDate:            "start_date",
	ExpiryDate:           "expiry_date",
	Tag:                  "tag",
	ProductID:            "product_id",
	LastUsedOn:           "last_used_on",
	IsActive:             "is_active",
	Currency:             "currency",
	InitialBalanceAmount: "initial_balance_amount",
	CurrentBalanceAmount: "current_balance_amount",
	Metadata:             "metadata",
	PrivateMetadata:      "private_metadata",
}

var GiftcardTableColumns = struct {
	ID                   string
	Code                 string
	CreatedByID          string
	UsedByID             string
	CreatedByEmail       string
	UsedByEmail          string
	CreatedAt            string
	StartDate            string
	ExpiryDate           string
	Tag                  string
	ProductID            string
	LastUsedOn           string
	IsActive             string
	Currency             string
	InitialBalanceAmount string
	CurrentBalanceAmount string
	Metadata             string
	PrivateMetadata      string
}{
	ID:                   "giftcards.id",
	Code:                 "giftcards.code",
	CreatedByID:          "giftcards.created_by_id",
	UsedByID:             "giftcards.used_by_id",
	CreatedByEmail:       "giftcards.created_by_email",
	UsedByEmail:          "giftcards.used_by_email",
	CreatedAt:            "giftcards.created_at",
	StartDate:            "giftcards.start_date",
	ExpiryDate:           "giftcards.expiry_date",
	Tag:                  "giftcards.tag",
	ProductID:            "giftcards.product_id",
	LastUsedOn:           "giftcards.last_used_on",
	IsActive:             "giftcards.is_active",
	Currency:             "giftcards.currency",
	InitialBalanceAmount: "giftcards.initial_balance_amount",
	CurrentBalanceAmount: "giftcards.current_balance_amount",
	Metadata:             "giftcards.metadata",
	PrivateMetadata:      "giftcards.private_metadata",
}

// Generated where

var GiftcardWhere = struct {
	ID                   whereHelperstring
	Code                 whereHelperstring
	CreatedByID          whereHelpernull_String
	UsedByID             whereHelpernull_String
	CreatedByEmail       whereHelpernull_String
	UsedByEmail          whereHelpernull_String
	CreatedAt            whereHelperint64
	StartDate            whereHelpernull_Time
	ExpiryDate           whereHelpernull_Time
	Tag                  whereHelpernull_String
	ProductID            whereHelpernull_String
	LastUsedOn           whereHelpernull_Int64
	IsActive             whereHelpernull_Bool
	Currency             whereHelperstring
	InitialBalanceAmount whereHelpernull_Float64
	CurrentBalanceAmount whereHelpernull_Float64
	Metadata             whereHelpernull_JSON
	PrivateMetadata      whereHelpernull_JSON
}{
	ID:                   whereHelperstring{field: "\"giftcards\".\"id\""},
	Code:                 whereHelperstring{field: "\"giftcards\".\"code\""},
	CreatedByID:          whereHelpernull_String{field: "\"giftcards\".\"created_by_id\""},
	UsedByID:             whereHelpernull_String{field: "\"giftcards\".\"used_by_id\""},
	CreatedByEmail:       whereHelpernull_String{field: "\"giftcards\".\"created_by_email\""},
	UsedByEmail:          whereHelpernull_String{field: "\"giftcards\".\"used_by_email\""},
	CreatedAt:            whereHelperint64{field: "\"giftcards\".\"created_at\""},
	StartDate:            whereHelpernull_Time{field: "\"giftcards\".\"start_date\""},
	ExpiryDate:           whereHelpernull_Time{field: "\"giftcards\".\"expiry_date\""},
	Tag:                  whereHelpernull_String{field: "\"giftcards\".\"tag\""},
	ProductID:            whereHelpernull_String{field: "\"giftcards\".\"product_id\""},
	LastUsedOn:           whereHelpernull_Int64{field: "\"giftcards\".\"last_used_on\""},
	IsActive:             whereHelpernull_Bool{field: "\"giftcards\".\"is_active\""},
	Currency:             whereHelperstring{field: "\"giftcards\".\"currency\""},
	InitialBalanceAmount: whereHelpernull_Float64{field: "\"giftcards\".\"initial_balance_amount\""},
	CurrentBalanceAmount: whereHelpernull_Float64{field: "\"giftcards\".\"current_balance_amount\""},
	Metadata:             whereHelpernull_JSON{field: "\"giftcards\".\"metadata\""},
	PrivateMetadata:      whereHelpernull_JSON{field: "\"giftcards\".\"private_metadata\""},
}

// GiftcardRels is where relationship names are stored.
var GiftcardRels = struct {
	Product           string
	UsedBy            string
	CreatedBy         string
	GiftcardCheckouts string
	GiftcardEvents    string
	OrderGiftcards    string
}{
	Product:           "Product",
	UsedBy:            "UsedBy",
	CreatedBy:         "CreatedBy",
	GiftcardCheckouts: "GiftcardCheckouts",
	GiftcardEvents:    "GiftcardEvents",
	OrderGiftcards:    "OrderGiftcards",
}

// giftcardR is where relationships are stored.
type giftcardR struct {
	Product           *Product              `boil:"Product" json:"Product" toml:"Product" yaml:"Product"`
	UsedBy            *User                 `boil:"UsedBy" json:"UsedBy" toml:"UsedBy" yaml:"UsedBy"`
	CreatedBy         *User                 `boil:"CreatedBy" json:"CreatedBy" toml:"CreatedBy" yaml:"CreatedBy"`
	GiftcardCheckouts GiftcardCheckoutSlice `boil:"GiftcardCheckouts" json:"GiftcardCheckouts" toml:"GiftcardCheckouts" yaml:"GiftcardCheckouts"`
	GiftcardEvents    GiftcardEventSlice    `boil:"GiftcardEvents" json:"GiftcardEvents" toml:"GiftcardEvents" yaml:"GiftcardEvents"`
	OrderGiftcards    OrderGiftcardSlice    `boil:"OrderGiftcards" json:"OrderGiftcards" toml:"OrderGiftcards" yaml:"OrderGiftcards"`
}

// NewStruct creates a new relationship struct
func (*giftcardR) NewStruct() *giftcardR {
	return &giftcardR{}
}

func (r *giftcardR) GetProduct() *Product {
	if r == nil {
		return nil
	}
	return r.Product
}

func (r *giftcardR) GetUsedBy() *User {
	if r == nil {
		return nil
	}
	return r.UsedBy
}

func (r *giftcardR) GetCreatedBy() *User {
	if r == nil {
		return nil
	}
	return r.CreatedBy
}

func (r *giftcardR) GetGiftcardCheckouts() GiftcardCheckoutSlice {
	if r == nil {
		return nil
	}
	return r.GiftcardCheckouts
}

func (r *giftcardR) GetGiftcardEvents() GiftcardEventSlice {
	if r == nil {
		return nil
	}
	return r.GiftcardEvents
}

func (r *giftcardR) GetOrderGiftcards() OrderGiftcardSlice {
	if r == nil {
		return nil
	}
	return r.OrderGiftcards
}

// giftcardL is where Load methods for each relationship are stored.
type giftcardL struct{}

var (
	giftcardAllColumns            = []string{"id", "code", "created_by_id", "used_by_id", "created_by_email", "used_by_email", "created_at", "start_date", "expiry_date", "tag", "product_id", "last_used_on", "is_active", "currency", "initial_balance_amount", "current_balance_amount", "metadata", "private_metadata"}
	giftcardColumnsWithoutDefault = []string{"code", "created_at", "currency"}
	giftcardColumnsWithDefault    = []string{"id", "created_by_id", "used_by_id", "created_by_email", "used_by_email", "start_date", "expiry_date", "tag", "product_id", "last_used_on", "is_active", "initial_balance_amount", "current_balance_amount", "metadata", "private_metadata"}
	giftcardPrimaryKeyColumns     = []string{"id"}
	giftcardGeneratedColumns      = []string{}
)

type (
	// GiftcardSlice is an alias for a slice of pointers to Giftcard.
	// This should almost always be used instead of []Giftcard.
	GiftcardSlice []*Giftcard
	// GiftcardHook is the signature for custom Giftcard hook methods
	GiftcardHook func(context.Context, boil.ContextExecutor, *Giftcard) error

	giftcardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	giftcardType                 = reflect.TypeOf(&Giftcard{})
	giftcardMapping              = queries.MakeStructMapping(giftcardType)
	giftcardPrimaryKeyMapping, _ = queries.BindMapping(giftcardType, giftcardMapping, giftcardPrimaryKeyColumns)
	giftcardInsertCacheMut       sync.RWMutex
	giftcardInsertCache          = make(map[string]insertCache)
	giftcardUpdateCacheMut       sync.RWMutex
	giftcardUpdateCache          = make(map[string]updateCache)
	giftcardUpsertCacheMut       sync.RWMutex
	giftcardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var giftcardAfterSelectHooks []GiftcardHook

var giftcardBeforeInsertHooks []GiftcardHook
var giftcardAfterInsertHooks []GiftcardHook

var giftcardBeforeUpdateHooks []GiftcardHook
var giftcardAfterUpdateHooks []GiftcardHook

var giftcardBeforeDeleteHooks []GiftcardHook
var giftcardAfterDeleteHooks []GiftcardHook

var giftcardBeforeUpsertHooks []GiftcardHook
var giftcardAfterUpsertHooks []GiftcardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Giftcard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Giftcard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Giftcard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Giftcard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Giftcard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Giftcard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Giftcard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Giftcard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Giftcard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGiftcardHook registers your hook function for all future operations.
func AddGiftcardHook(hookPoint boil.HookPoint, giftcardHook GiftcardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		giftcardAfterSelectHooks = append(giftcardAfterSelectHooks, giftcardHook)
	case boil.BeforeInsertHook:
		giftcardBeforeInsertHooks = append(giftcardBeforeInsertHooks, giftcardHook)
	case boil.AfterInsertHook:
		giftcardAfterInsertHooks = append(giftcardAfterInsertHooks, giftcardHook)
	case boil.BeforeUpdateHook:
		giftcardBeforeUpdateHooks = append(giftcardBeforeUpdateHooks, giftcardHook)
	case boil.AfterUpdateHook:
		giftcardAfterUpdateHooks = append(giftcardAfterUpdateHooks, giftcardHook)
	case boil.BeforeDeleteHook:
		giftcardBeforeDeleteHooks = append(giftcardBeforeDeleteHooks, giftcardHook)
	case boil.AfterDeleteHook:
		giftcardAfterDeleteHooks = append(giftcardAfterDeleteHooks, giftcardHook)
	case boil.BeforeUpsertHook:
		giftcardBeforeUpsertHooks = append(giftcardBeforeUpsertHooks, giftcardHook)
	case boil.AfterUpsertHook:
		giftcardAfterUpsertHooks = append(giftcardAfterUpsertHooks, giftcardHook)
	}
}

// One returns a single giftcard record from the query.
func (q giftcardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Giftcard, error) {
	o := &Giftcard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for giftcards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Giftcard records from the query.
func (q giftcardQuery) All(ctx context.Context, exec boil.ContextExecutor) (GiftcardSlice, error) {
	var o []*Giftcard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Giftcard slice")
	}

	if len(giftcardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Giftcard records in the query.
func (q giftcardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count giftcards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q giftcardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if giftcards exists")
	}

	return count > 0, nil
}

// Product pointed to by the foreign key.
func (o *Giftcard) Product(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ProductID),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// UsedBy pointed to by the foreign key.
func (o *Giftcard) UsedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UsedByID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// CreatedBy pointed to by the foreign key.
func (o *Giftcard) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// GiftcardCheckouts retrieves all the giftcard_checkout's GiftcardCheckouts with an executor.
func (o *Giftcard) GiftcardCheckouts(mods ...qm.QueryMod) giftcardCheckoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"giftcard_checkouts\".\"giftcard_id\"=?", o.ID),
	)

	return GiftcardCheckouts(queryMods...)
}

// GiftcardEvents retrieves all the giftcard_event's GiftcardEvents with an executor.
func (o *Giftcard) GiftcardEvents(mods ...qm.QueryMod) giftcardEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"giftcard_events\".\"giftcard_id\"=?", o.ID),
	)

	return GiftcardEvents(queryMods...)
}

// OrderGiftcards retrieves all the order_giftcard's OrderGiftcards with an executor.
func (o *Giftcard) OrderGiftcards(mods ...qm.QueryMod) orderGiftcardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_giftcards\".\"giftcard_id\"=?", o.ID),
	)

	return OrderGiftcards(queryMods...)
}

// LoadProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (giftcardL) LoadProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGiftcard interface{}, mods queries.Applicator) error {
	var slice []*Giftcard
	var object *Giftcard

	if singular {
		var ok bool
		object, ok = maybeGiftcard.(*Giftcard)
		if !ok {
			object = new(Giftcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGiftcard))
			}
		}
	} else {
		s, ok := maybeGiftcard.(*[]*Giftcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGiftcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &giftcardR{}
		}
		if !queries.IsNil(object.ProductID) {
			args = append(args, object.ProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &giftcardR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ProductID) {
				args = append(args, obj.ProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Product = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.Giftcards = append(foreign.R.Giftcards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ProductID, foreign.ID) {
				local.R.Product = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.Giftcards = append(foreign.R.Giftcards, local)
				break
			}
		}
	}

	return nil
}

// LoadUsedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (giftcardL) LoadUsedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGiftcard interface{}, mods queries.Applicator) error {
	var slice []*Giftcard
	var object *Giftcard

	if singular {
		var ok bool
		object, ok = maybeGiftcard.(*Giftcard)
		if !ok {
			object = new(Giftcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGiftcard))
			}
		}
	} else {
		s, ok := maybeGiftcard.(*[]*Giftcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGiftcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &giftcardR{}
		}
		if !queries.IsNil(object.UsedByID) {
			args = append(args, object.UsedByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &giftcardR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UsedByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UsedByID) {
				args = append(args, obj.UsedByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UsedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UsedByGiftcards = append(foreign.R.UsedByGiftcards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UsedByID, foreign.ID) {
				local.R.UsedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UsedByGiftcards = append(foreign.R.UsedByGiftcards, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (giftcardL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGiftcard interface{}, mods queries.Applicator) error {
	var slice []*Giftcard
	var object *Giftcard

	if singular {
		var ok bool
		object, ok = maybeGiftcard.(*Giftcard)
		if !ok {
			object = new(Giftcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGiftcard))
			}
		}
	} else {
		s, ok := maybeGiftcard.(*[]*Giftcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGiftcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &giftcardR{}
		}
		if !queries.IsNil(object.CreatedByID) {
			args = append(args, object.CreatedByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &giftcardR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatedByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatedByID) {
				args = append(args, obj.CreatedByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByGiftcards = append(foreign.R.CreatedByGiftcards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedByID, foreign.ID) {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByGiftcards = append(foreign.R.CreatedByGiftcards, local)
				break
			}
		}
	}

	return nil
}

// LoadGiftcardCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (giftcardL) LoadGiftcardCheckouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGiftcard interface{}, mods queries.Applicator) error {
	var slice []*Giftcard
	var object *Giftcard

	if singular {
		var ok bool
		object, ok = maybeGiftcard.(*Giftcard)
		if !ok {
			object = new(Giftcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGiftcard))
			}
		}
	} else {
		s, ok := maybeGiftcard.(*[]*Giftcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGiftcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &giftcardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &giftcardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`giftcard_checkouts`),
		qm.WhereIn(`giftcard_checkouts.giftcard_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load giftcard_checkouts")
	}

	var resultSlice []*GiftcardCheckout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice giftcard_checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on giftcard_checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for giftcard_checkouts")
	}

	if len(giftcardCheckoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GiftcardCheckouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &giftcardCheckoutR{}
			}
			foreign.R.Giftcard = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GiftcardID {
				local.R.GiftcardCheckouts = append(local.R.GiftcardCheckouts, foreign)
				if foreign.R == nil {
					foreign.R = &giftcardCheckoutR{}
				}
				foreign.R.Giftcard = local
				break
			}
		}
	}

	return nil
}

// LoadGiftcardEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (giftcardL) LoadGiftcardEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGiftcard interface{}, mods queries.Applicator) error {
	var slice []*Giftcard
	var object *Giftcard

	if singular {
		var ok bool
		object, ok = maybeGiftcard.(*Giftcard)
		if !ok {
			object = new(Giftcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGiftcard))
			}
		}
	} else {
		s, ok := maybeGiftcard.(*[]*Giftcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGiftcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &giftcardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &giftcardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`giftcard_events`),
		qm.WhereIn(`giftcard_events.giftcard_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load giftcard_events")
	}

	var resultSlice []*GiftcardEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice giftcard_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on giftcard_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for giftcard_events")
	}

	if len(giftcardEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GiftcardEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &giftcardEventR{}
			}
			foreign.R.Giftcard = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GiftcardID {
				local.R.GiftcardEvents = append(local.R.GiftcardEvents, foreign)
				if foreign.R == nil {
					foreign.R = &giftcardEventR{}
				}
				foreign.R.Giftcard = local
				break
			}
		}
	}

	return nil
}

// LoadOrderGiftcards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (giftcardL) LoadOrderGiftcards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGiftcard interface{}, mods queries.Applicator) error {
	var slice []*Giftcard
	var object *Giftcard

	if singular {
		var ok bool
		object, ok = maybeGiftcard.(*Giftcard)
		if !ok {
			object = new(Giftcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGiftcard))
			}
		}
	} else {
		s, ok := maybeGiftcard.(*[]*Giftcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGiftcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &giftcardR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &giftcardR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_giftcards`),
		qm.WhereIn(`order_giftcards.giftcard_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_giftcards")
	}

	var resultSlice []*OrderGiftcard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_giftcards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_giftcards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_giftcards")
	}

	if len(orderGiftcardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderGiftcards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderGiftcardR{}
			}
			foreign.R.Giftcard = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GiftcardID {
				local.R.OrderGiftcards = append(local.R.OrderGiftcards, foreign)
				if foreign.R == nil {
					foreign.R = &orderGiftcardR{}
				}
				foreign.R.Giftcard = local
				break
			}
		}
	}

	return nil
}

// SetProduct of the giftcard to the related item.
// Sets o.R.Product to related.
// Adds o to related.R.Giftcards.
func (o *Giftcard) SetProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"giftcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"product_id"}),
		strmangle.WhereClause("\"", "\"", 2, giftcardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ProductID, related.ID)
	if o.R == nil {
		o.R = &giftcardR{
			Product: related,
		}
	} else {
		o.R.Product = related
	}

	if related.R == nil {
		related.R = &productR{
			Giftcards: GiftcardSlice{o},
		}
	} else {
		related.R.Giftcards = append(related.R.Giftcards, o)
	}

	return nil
}

// RemoveProduct relationship.
// Sets o.R.Product to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Giftcard) RemoveProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.ProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Product = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Giftcards {
		if queries.Equal(o.ProductID, ri.ProductID) {
			continue
		}

		ln := len(related.R.Giftcards)
		if ln > 1 && i < ln-1 {
			related.R.Giftcards[i] = related.R.Giftcards[ln-1]
		}
		related.R.Giftcards = related.R.Giftcards[:ln-1]
		break
	}
	return nil
}

// SetUsedBy of the giftcard to the related item.
// Sets o.R.UsedBy to related.
// Adds o to related.R.UsedByGiftcards.
func (o *Giftcard) SetUsedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"giftcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"used_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, giftcardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UsedByID, related.ID)
	if o.R == nil {
		o.R = &giftcardR{
			UsedBy: related,
		}
	} else {
		o.R.UsedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UsedByGiftcards: GiftcardSlice{o},
		}
	} else {
		related.R.UsedByGiftcards = append(related.R.UsedByGiftcards, o)
	}

	return nil
}

// RemoveUsedBy relationship.
// Sets o.R.UsedBy to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Giftcard) RemoveUsedBy(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UsedByID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("used_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UsedBy = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UsedByGiftcards {
		if queries.Equal(o.UsedByID, ri.UsedByID) {
			continue
		}

		ln := len(related.R.UsedByGiftcards)
		if ln > 1 && i < ln-1 {
			related.R.UsedByGiftcards[i] = related.R.UsedByGiftcards[ln-1]
		}
		related.R.UsedByGiftcards = related.R.UsedByGiftcards[:ln-1]
		break
	}
	return nil
}

// SetCreatedBy of the giftcard to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedByGiftcards.
func (o *Giftcard) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"giftcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, giftcardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedByID, related.ID)
	if o.R == nil {
		o.R = &giftcardR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByGiftcards: GiftcardSlice{o},
		}
	} else {
		related.R.CreatedByGiftcards = append(related.R.CreatedByGiftcards, o)
	}

	return nil
}

// RemoveCreatedBy relationship.
// Sets o.R.CreatedBy to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Giftcard) RemoveCreatedBy(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.CreatedByID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedBy = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByGiftcards {
		if queries.Equal(o.CreatedByID, ri.CreatedByID) {
			continue
		}

		ln := len(related.R.CreatedByGiftcards)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByGiftcards[i] = related.R.CreatedByGiftcards[ln-1]
		}
		related.R.CreatedByGiftcards = related.R.CreatedByGiftcards[:ln-1]
		break
	}
	return nil
}

// AddGiftcardCheckouts adds the given related objects to the existing relationships
// of the giftcard, optionally inserting them as new records.
// Appends related to o.R.GiftcardCheckouts.
// Sets related.R.Giftcard appropriately.
func (o *Giftcard) AddGiftcardCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GiftcardCheckout) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GiftcardID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"giftcard_checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"giftcard_id"}),
				strmangle.WhereClause("\"", "\"", 2, giftcardCheckoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GiftcardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &giftcardR{
			GiftcardCheckouts: related,
		}
	} else {
		o.R.GiftcardCheckouts = append(o.R.GiftcardCheckouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &giftcardCheckoutR{
				Giftcard: o,
			}
		} else {
			rel.R.Giftcard = o
		}
	}
	return nil
}

// AddGiftcardEvents adds the given related objects to the existing relationships
// of the giftcard, optionally inserting them as new records.
// Appends related to o.R.GiftcardEvents.
// Sets related.R.Giftcard appropriately.
func (o *Giftcard) AddGiftcardEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GiftcardEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GiftcardID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"giftcard_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"giftcard_id"}),
				strmangle.WhereClause("\"", "\"", 2, giftcardEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GiftcardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &giftcardR{
			GiftcardEvents: related,
		}
	} else {
		o.R.GiftcardEvents = append(o.R.GiftcardEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &giftcardEventR{
				Giftcard: o,
			}
		} else {
			rel.R.Giftcard = o
		}
	}
	return nil
}

// AddOrderGiftcards adds the given related objects to the existing relationships
// of the giftcard, optionally inserting them as new records.
// Appends related to o.R.OrderGiftcards.
// Sets related.R.Giftcard appropriately.
func (o *Giftcard) AddOrderGiftcards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderGiftcard) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GiftcardID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_giftcards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"giftcard_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderGiftcardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GiftcardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &giftcardR{
			OrderGiftcards: related,
		}
	} else {
		o.R.OrderGiftcards = append(o.R.OrderGiftcards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderGiftcardR{
				Giftcard: o,
			}
		} else {
			rel.R.Giftcard = o
		}
	}
	return nil
}

// Giftcards retrieves all the records using an executor.
func Giftcards(mods ...qm.QueryMod) giftcardQuery {
	mods = append(mods, qm.From("\"giftcards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"giftcards\".*"})
	}

	return giftcardQuery{q}
}

// FindGiftcard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGiftcard(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Giftcard, error) {
	giftcardObj := &Giftcard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"giftcards\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, giftcardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from giftcards")
	}

	if err = giftcardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return giftcardObj, err
	}

	return giftcardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Giftcard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no giftcards provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(giftcardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	giftcardInsertCacheMut.RLock()
	cache, cached := giftcardInsertCache[key]
	giftcardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			giftcardAllColumns,
			giftcardColumnsWithDefault,
			giftcardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(giftcardType, giftcardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(giftcardType, giftcardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"giftcards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"giftcards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into giftcards")
	}

	if !cached {
		giftcardInsertCacheMut.Lock()
		giftcardInsertCache[key] = cache
		giftcardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Giftcard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Giftcard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	giftcardUpdateCacheMut.RLock()
	cache, cached := giftcardUpdateCache[key]
	giftcardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			giftcardAllColumns,
			giftcardPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update giftcards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"giftcards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, giftcardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(giftcardType, giftcardMapping, append(wl, giftcardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update giftcards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for giftcards")
	}

	if !cached {
		giftcardUpdateCacheMut.Lock()
		giftcardUpdateCache[key] = cache
		giftcardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q giftcardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for giftcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for giftcards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GiftcardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giftcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"giftcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, giftcardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in giftcard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all giftcard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Giftcard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no giftcards provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(giftcardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	giftcardUpsertCacheMut.RLock()
	cache, cached := giftcardUpsertCache[key]
	giftcardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			giftcardAllColumns,
			giftcardColumnsWithDefault,
			giftcardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			giftcardAllColumns,
			giftcardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert giftcards, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(giftcardPrimaryKeyColumns))
			copy(conflict, giftcardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"giftcards\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(giftcardType, giftcardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(giftcardType, giftcardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert giftcards")
	}

	if !cached {
		giftcardUpsertCacheMut.Lock()
		giftcardUpsertCache[key] = cache
		giftcardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Giftcard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Giftcard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Giftcard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), giftcardPrimaryKeyMapping)
	sql := "DELETE FROM \"giftcards\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from giftcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for giftcards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q giftcardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no giftcardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from giftcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for giftcards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GiftcardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(giftcardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giftcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"giftcards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, giftcardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from giftcard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for giftcards")
	}

	if len(giftcardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Giftcard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGiftcard(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GiftcardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GiftcardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giftcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"giftcards\".* FROM \"giftcards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, giftcardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GiftcardSlice")
	}

	*o = slice

	return nil
}

// GiftcardExists checks if the Giftcard row exists.
func GiftcardExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"giftcards\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if giftcards exists")
	}

	return exists, nil
}

// Exists checks if the Giftcard row exists.
func (o *Giftcard) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GiftcardExists(ctx, exec, o.ID)
}
