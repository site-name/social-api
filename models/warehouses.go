// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Warehouse is an object representing the database table.
type Warehouse struct {
	ID                    string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                  null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Slug                  null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	Addressid             null.String `boil:"addressid" json:"addressid,omitempty" toml:"addressid" yaml:"addressid,omitempty"`
	Email                 null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Clickandcollectoption null.String `boil:"clickandcollectoption" json:"clickandcollectoption,omitempty" toml:"clickandcollectoption" yaml:"clickandcollectoption,omitempty"`
	Isprivate             null.Bool   `boil:"isprivate" json:"isprivate,omitempty" toml:"isprivate" yaml:"isprivate,omitempty"`
	Metadata              null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata       null.JSON   `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *warehouseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L warehouseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WarehouseColumns = struct {
	ID                    string
	Name                  string
	Slug                  string
	Addressid             string
	Email                 string
	Clickandcollectoption string
	Isprivate             string
	Metadata              string
	Privatemetadata       string
}{
	ID:                    "id",
	Name:                  "name",
	Slug:                  "slug",
	Addressid:             "addressid",
	Email:                 "email",
	Clickandcollectoption: "clickandcollectoption",
	Isprivate:             "isprivate",
	Metadata:              "metadata",
	Privatemetadata:       "privatemetadata",
}

var WarehouseTableColumns = struct {
	ID                    string
	Name                  string
	Slug                  string
	Addressid             string
	Email                 string
	Clickandcollectoption string
	Isprivate             string
	Metadata              string
	Privatemetadata       string
}{
	ID:                    "warehouses.id",
	Name:                  "warehouses.name",
	Slug:                  "warehouses.slug",
	Addressid:             "warehouses.addressid",
	Email:                 "warehouses.email",
	Clickandcollectoption: "warehouses.clickandcollectoption",
	Isprivate:             "warehouses.isprivate",
	Metadata:              "warehouses.metadata",
	Privatemetadata:       "warehouses.privatemetadata",
}

// Generated where

var WarehouseWhere = struct {
	ID                    whereHelperstring
	Name                  whereHelpernull_String
	Slug                  whereHelpernull_String
	Addressid             whereHelpernull_String
	Email                 whereHelpernull_String
	Clickandcollectoption whereHelpernull_String
	Isprivate             whereHelpernull_Bool
	Metadata              whereHelpernull_JSON
	Privatemetadata       whereHelpernull_JSON
}{
	ID:                    whereHelperstring{field: "\"warehouses\".\"id\""},
	Name:                  whereHelpernull_String{field: "\"warehouses\".\"name\""},
	Slug:                  whereHelpernull_String{field: "\"warehouses\".\"slug\""},
	Addressid:             whereHelpernull_String{field: "\"warehouses\".\"addressid\""},
	Email:                 whereHelpernull_String{field: "\"warehouses\".\"email\""},
	Clickandcollectoption: whereHelpernull_String{field: "\"warehouses\".\"clickandcollectoption\""},
	Isprivate:             whereHelpernull_Bool{field: "\"warehouses\".\"isprivate\""},
	Metadata:              whereHelpernull_JSON{field: "\"warehouses\".\"metadata\""},
	Privatemetadata:       whereHelpernull_JSON{field: "\"warehouses\".\"privatemetadata\""},
}

// WarehouseRels is where relationship names are stored.
var WarehouseRels = struct {
	AddressidAddress                  string
	CollectionpointidCheckouts        string
	CollectionpointidOrders           string
	WarehouseidStocks                 string
	WarehouseidWarehouseShippingZones string
}{
	AddressidAddress:                  "AddressidAddress",
	CollectionpointidCheckouts:        "CollectionpointidCheckouts",
	CollectionpointidOrders:           "CollectionpointidOrders",
	WarehouseidStocks:                 "WarehouseidStocks",
	WarehouseidWarehouseShippingZones: "WarehouseidWarehouseShippingZones",
}

// warehouseR is where relationships are stored.
type warehouseR struct {
	AddressidAddress                  *Address                   `boil:"AddressidAddress" json:"AddressidAddress" toml:"AddressidAddress" yaml:"AddressidAddress"`
	CollectionpointidCheckouts        CheckoutSlice              `boil:"CollectionpointidCheckouts" json:"CollectionpointidCheckouts" toml:"CollectionpointidCheckouts" yaml:"CollectionpointidCheckouts"`
	CollectionpointidOrders           OrderSlice                 `boil:"CollectionpointidOrders" json:"CollectionpointidOrders" toml:"CollectionpointidOrders" yaml:"CollectionpointidOrders"`
	WarehouseidStocks                 StockSlice                 `boil:"WarehouseidStocks" json:"WarehouseidStocks" toml:"WarehouseidStocks" yaml:"WarehouseidStocks"`
	WarehouseidWarehouseShippingZones WarehouseShippingZoneSlice `boil:"WarehouseidWarehouseShippingZones" json:"WarehouseidWarehouseShippingZones" toml:"WarehouseidWarehouseShippingZones" yaml:"WarehouseidWarehouseShippingZones"`
}

// NewStruct creates a new relationship struct
func (*warehouseR) NewStruct() *warehouseR {
	return &warehouseR{}
}

func (r *warehouseR) GetAddressidAddress() *Address {
	if r == nil {
		return nil
	}
	return r.AddressidAddress
}

func (r *warehouseR) GetCollectionpointidCheckouts() CheckoutSlice {
	if r == nil {
		return nil
	}
	return r.CollectionpointidCheckouts
}

func (r *warehouseR) GetCollectionpointidOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.CollectionpointidOrders
}

func (r *warehouseR) GetWarehouseidStocks() StockSlice {
	if r == nil {
		return nil
	}
	return r.WarehouseidStocks
}

func (r *warehouseR) GetWarehouseidWarehouseShippingZones() WarehouseShippingZoneSlice {
	if r == nil {
		return nil
	}
	return r.WarehouseidWarehouseShippingZones
}

// warehouseL is where Load methods for each relationship are stored.
type warehouseL struct{}

var (
	warehouseAllColumns            = []string{"id", "name", "slug", "addressid", "email", "clickandcollectoption", "isprivate", "metadata", "privatemetadata"}
	warehouseColumnsWithoutDefault = []string{"id"}
	warehouseColumnsWithDefault    = []string{"name", "slug", "addressid", "email", "clickandcollectoption", "isprivate", "metadata", "privatemetadata"}
	warehousePrimaryKeyColumns     = []string{"id"}
	warehouseGeneratedColumns      = []string{}
)

type (
	// WarehouseSlice is an alias for a slice of pointers to Warehouse.
	// This should almost always be used instead of []Warehouse.
	WarehouseSlice []*Warehouse
	// WarehouseHook is the signature for custom Warehouse hook methods
	WarehouseHook func(context.Context, boil.ContextExecutor, *Warehouse) error

	warehouseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	warehouseType                 = reflect.TypeOf(&Warehouse{})
	warehouseMapping              = queries.MakeStructMapping(warehouseType)
	warehousePrimaryKeyMapping, _ = queries.BindMapping(warehouseType, warehouseMapping, warehousePrimaryKeyColumns)
	warehouseInsertCacheMut       sync.RWMutex
	warehouseInsertCache          = make(map[string]insertCache)
	warehouseUpdateCacheMut       sync.RWMutex
	warehouseUpdateCache          = make(map[string]updateCache)
	warehouseUpsertCacheMut       sync.RWMutex
	warehouseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var warehouseAfterSelectHooks []WarehouseHook

var warehouseBeforeInsertHooks []WarehouseHook
var warehouseAfterInsertHooks []WarehouseHook

var warehouseBeforeUpdateHooks []WarehouseHook
var warehouseAfterUpdateHooks []WarehouseHook

var warehouseBeforeDeleteHooks []WarehouseHook
var warehouseAfterDeleteHooks []WarehouseHook

var warehouseBeforeUpsertHooks []WarehouseHook
var warehouseAfterUpsertHooks []WarehouseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Warehouse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Warehouse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Warehouse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Warehouse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Warehouse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Warehouse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Warehouse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Warehouse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Warehouse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range warehouseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWarehouseHook registers your hook function for all future operations.
func AddWarehouseHook(hookPoint boil.HookPoint, warehouseHook WarehouseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		warehouseAfterSelectHooks = append(warehouseAfterSelectHooks, warehouseHook)
	case boil.BeforeInsertHook:
		warehouseBeforeInsertHooks = append(warehouseBeforeInsertHooks, warehouseHook)
	case boil.AfterInsertHook:
		warehouseAfterInsertHooks = append(warehouseAfterInsertHooks, warehouseHook)
	case boil.BeforeUpdateHook:
		warehouseBeforeUpdateHooks = append(warehouseBeforeUpdateHooks, warehouseHook)
	case boil.AfterUpdateHook:
		warehouseAfterUpdateHooks = append(warehouseAfterUpdateHooks, warehouseHook)
	case boil.BeforeDeleteHook:
		warehouseBeforeDeleteHooks = append(warehouseBeforeDeleteHooks, warehouseHook)
	case boil.AfterDeleteHook:
		warehouseAfterDeleteHooks = append(warehouseAfterDeleteHooks, warehouseHook)
	case boil.BeforeUpsertHook:
		warehouseBeforeUpsertHooks = append(warehouseBeforeUpsertHooks, warehouseHook)
	case boil.AfterUpsertHook:
		warehouseAfterUpsertHooks = append(warehouseAfterUpsertHooks, warehouseHook)
	}
}

// One returns a single warehouse record from the query.
func (q warehouseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Warehouse, error) {
	o := &Warehouse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for warehouses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Warehouse records from the query.
func (q warehouseQuery) All(ctx context.Context, exec boil.ContextExecutor) (WarehouseSlice, error) {
	var o []*Warehouse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Warehouse slice")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Warehouse records in the query.
func (q warehouseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count warehouses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q warehouseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if warehouses exists")
	}

	return count > 0, nil
}

// AddressidAddress pointed to by the foreign key.
func (o *Warehouse) AddressidAddress(mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Addressid),
	}

	queryMods = append(queryMods, mods...)

	return Addresses(queryMods...)
}

// CollectionpointidCheckouts retrieves all the checkout's Checkouts with an executor via collectionpointid column.
func (o *Warehouse) CollectionpointidCheckouts(mods ...qm.QueryMod) checkoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkouts\".\"collectionpointid\"=?", o.ID),
	)

	return Checkouts(queryMods...)
}

// CollectionpointidOrders retrieves all the order's Orders with an executor via collectionpointid column.
func (o *Warehouse) CollectionpointidOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"collectionpointid\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// WarehouseidStocks retrieves all the stock's Stocks with an executor via warehouseid column.
func (o *Warehouse) WarehouseidStocks(mods ...qm.QueryMod) stockQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"stocks\".\"warehouseid\"=?", o.ID),
	)

	return Stocks(queryMods...)
}

// WarehouseidWarehouseShippingZones retrieves all the warehouse_shipping_zone's WarehouseShippingZones with an executor via warehouseid column.
func (o *Warehouse) WarehouseidWarehouseShippingZones(mods ...qm.QueryMod) warehouseShippingZoneQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"warehouse_shipping_zones\".\"warehouseid\"=?", o.ID),
	)

	return WarehouseShippingZones(queryMods...)
}

// LoadAddressidAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (warehouseL) LoadAddressidAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		if !queries.IsNil(object.Addressid) {
			args = append(args, object.Addressid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Addressid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Addressid) {
				args = append(args, obj.Addressid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`addresses`),
		qm.WhereIn(`addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for addresses")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AddressidAddress = foreign
		if foreign.R == nil {
			foreign.R = &addressR{}
		}
		foreign.R.AddressidWarehouses = append(foreign.R.AddressidWarehouses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Addressid, foreign.ID) {
				local.R.AddressidAddress = foreign
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.AddressidWarehouses = append(foreign.R.AddressidWarehouses, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionpointidCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadCollectionpointidCheckouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.collectionpointid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkouts")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CollectionpointidCheckouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutR{}
			}
			foreign.R.CollectionpointidWarehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Collectionpointid) {
				local.R.CollectionpointidCheckouts = append(local.R.CollectionpointidCheckouts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.CollectionpointidWarehouse = local
				break
			}
		}
	}

	return nil
}

// LoadCollectionpointidOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadCollectionpointidOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.collectionpointid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CollectionpointidOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.CollectionpointidWarehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Collectionpointid) {
				local.R.CollectionpointidOrders = append(local.R.CollectionpointidOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.CollectionpointidWarehouse = local
				break
			}
		}
	}

	return nil
}

// LoadWarehouseidStocks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadWarehouseidStocks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`stocks`),
		qm.WhereIn(`stocks.warehouseid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load stocks")
	}

	var resultSlice []*Stock
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice stocks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on stocks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for stocks")
	}

	if len(stockAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WarehouseidStocks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &stockR{}
			}
			foreign.R.WarehouseidWarehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Warehouseid) {
				local.R.WarehouseidStocks = append(local.R.WarehouseidStocks, foreign)
				if foreign.R == nil {
					foreign.R = &stockR{}
				}
				foreign.R.WarehouseidWarehouse = local
				break
			}
		}
	}

	return nil
}

// LoadWarehouseidWarehouseShippingZones allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (warehouseL) LoadWarehouseidWarehouseShippingZones(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWarehouse interface{}, mods queries.Applicator) error {
	var slice []*Warehouse
	var object *Warehouse

	if singular {
		var ok bool
		object, ok = maybeWarehouse.(*Warehouse)
		if !ok {
			object = new(Warehouse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWarehouse))
			}
		}
	} else {
		s, ok := maybeWarehouse.(*[]*Warehouse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWarehouse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWarehouse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &warehouseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &warehouseR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`warehouse_shipping_zones`),
		qm.WhereIn(`warehouse_shipping_zones.warehouseid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load warehouse_shipping_zones")
	}

	var resultSlice []*WarehouseShippingZone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice warehouse_shipping_zones")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on warehouse_shipping_zones")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouse_shipping_zones")
	}

	if len(warehouseShippingZoneAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WarehouseidWarehouseShippingZones = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &warehouseShippingZoneR{}
			}
			foreign.R.WarehouseidWarehouse = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Warehouseid) {
				local.R.WarehouseidWarehouseShippingZones = append(local.R.WarehouseidWarehouseShippingZones, foreign)
				if foreign.R == nil {
					foreign.R = &warehouseShippingZoneR{}
				}
				foreign.R.WarehouseidWarehouse = local
				break
			}
		}
	}

	return nil
}

// SetAddressidAddress of the warehouse to the related item.
// Sets o.R.AddressidAddress to related.
// Adds o to related.R.AddressidWarehouses.
func (o *Warehouse) SetAddressidAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"warehouses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"addressid"}),
		strmangle.WhereClause("\"", "\"", 2, warehousePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Addressid, related.ID)
	if o.R == nil {
		o.R = &warehouseR{
			AddressidAddress: related,
		}
	} else {
		o.R.AddressidAddress = related
	}

	if related.R == nil {
		related.R = &addressR{
			AddressidWarehouses: WarehouseSlice{o},
		}
	} else {
		related.R.AddressidWarehouses = append(related.R.AddressidWarehouses, o)
	}

	return nil
}

// RemoveAddressidAddress relationship.
// Sets o.R.AddressidAddress to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Warehouse) RemoveAddressidAddress(ctx context.Context, exec boil.ContextExecutor, related *Address) error {
	var err error

	queries.SetScanner(&o.Addressid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("addressid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AddressidAddress = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AddressidWarehouses {
		if queries.Equal(o.Addressid, ri.Addressid) {
			continue
		}

		ln := len(related.R.AddressidWarehouses)
		if ln > 1 && i < ln-1 {
			related.R.AddressidWarehouses[i] = related.R.AddressidWarehouses[ln-1]
		}
		related.R.AddressidWarehouses = related.R.AddressidWarehouses[:ln-1]
		break
	}
	return nil
}

// AddCollectionpointidCheckouts adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.CollectionpointidCheckouts.
// Sets related.R.CollectionpointidWarehouse appropriately.
func (o *Warehouse) AddCollectionpointidCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Collectionpointid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collectionpointid"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Collectionpointid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			CollectionpointidCheckouts: related,
		}
	} else {
		o.R.CollectionpointidCheckouts = append(o.R.CollectionpointidCheckouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutR{
				CollectionpointidWarehouse: o,
			}
		} else {
			rel.R.CollectionpointidWarehouse = o
		}
	}
	return nil
}

// SetCollectionpointidCheckouts removes all previously related items of the
// warehouse replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CollectionpointidWarehouse's CollectionpointidCheckouts accordingly.
// Replaces o.R.CollectionpointidCheckouts with related.
// Sets related.R.CollectionpointidWarehouse's CollectionpointidCheckouts accordingly.
func (o *Warehouse) SetCollectionpointidCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	query := "update \"checkouts\" set \"collectionpointid\" = null where \"collectionpointid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CollectionpointidCheckouts {
			queries.SetScanner(&rel.Collectionpointid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CollectionpointidWarehouse = nil
		}
		o.R.CollectionpointidCheckouts = nil
	}

	return o.AddCollectionpointidCheckouts(ctx, exec, insert, related...)
}

// RemoveCollectionpointidCheckouts relationships from objects passed in.
// Removes related items from R.CollectionpointidCheckouts (uses pointer comparison, removal does not keep order)
// Sets related.R.CollectionpointidWarehouse.
func (o *Warehouse) RemoveCollectionpointidCheckouts(ctx context.Context, exec boil.ContextExecutor, related ...*Checkout) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Collectionpointid, nil)
		if rel.R != nil {
			rel.R.CollectionpointidWarehouse = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("collectionpointid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CollectionpointidCheckouts {
			if rel != ri {
				continue
			}

			ln := len(o.R.CollectionpointidCheckouts)
			if ln > 1 && i < ln-1 {
				o.R.CollectionpointidCheckouts[i] = o.R.CollectionpointidCheckouts[ln-1]
			}
			o.R.CollectionpointidCheckouts = o.R.CollectionpointidCheckouts[:ln-1]
			break
		}
	}

	return nil
}

// AddCollectionpointidOrders adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.CollectionpointidOrders.
// Sets related.R.CollectionpointidWarehouse appropriately.
func (o *Warehouse) AddCollectionpointidOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Collectionpointid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"collectionpointid"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Collectionpointid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			CollectionpointidOrders: related,
		}
	} else {
		o.R.CollectionpointidOrders = append(o.R.CollectionpointidOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				CollectionpointidWarehouse: o,
			}
		} else {
			rel.R.CollectionpointidWarehouse = o
		}
	}
	return nil
}

// SetCollectionpointidOrders removes all previously related items of the
// warehouse replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CollectionpointidWarehouse's CollectionpointidOrders accordingly.
// Replaces o.R.CollectionpointidOrders with related.
// Sets related.R.CollectionpointidWarehouse's CollectionpointidOrders accordingly.
func (o *Warehouse) SetCollectionpointidOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"collectionpointid\" = null where \"collectionpointid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CollectionpointidOrders {
			queries.SetScanner(&rel.Collectionpointid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CollectionpointidWarehouse = nil
		}
		o.R.CollectionpointidOrders = nil
	}

	return o.AddCollectionpointidOrders(ctx, exec, insert, related...)
}

// RemoveCollectionpointidOrders relationships from objects passed in.
// Removes related items from R.CollectionpointidOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.CollectionpointidWarehouse.
func (o *Warehouse) RemoveCollectionpointidOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Collectionpointid, nil)
		if rel.R != nil {
			rel.R.CollectionpointidWarehouse = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("collectionpointid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CollectionpointidOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.CollectionpointidOrders)
			if ln > 1 && i < ln-1 {
				o.R.CollectionpointidOrders[i] = o.R.CollectionpointidOrders[ln-1]
			}
			o.R.CollectionpointidOrders = o.R.CollectionpointidOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddWarehouseidStocks adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.WarehouseidStocks.
// Sets related.R.WarehouseidWarehouse appropriately.
func (o *Warehouse) AddWarehouseidStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stock) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Warehouseid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"stocks\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"warehouseid"}),
				strmangle.WhereClause("\"", "\"", 2, stockPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Warehouseid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			WarehouseidStocks: related,
		}
	} else {
		o.R.WarehouseidStocks = append(o.R.WarehouseidStocks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &stockR{
				WarehouseidWarehouse: o,
			}
		} else {
			rel.R.WarehouseidWarehouse = o
		}
	}
	return nil
}

// SetWarehouseidStocks removes all previously related items of the
// warehouse replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WarehouseidWarehouse's WarehouseidStocks accordingly.
// Replaces o.R.WarehouseidStocks with related.
// Sets related.R.WarehouseidWarehouse's WarehouseidStocks accordingly.
func (o *Warehouse) SetWarehouseidStocks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Stock) error {
	query := "update \"stocks\" set \"warehouseid\" = null where \"warehouseid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WarehouseidStocks {
			queries.SetScanner(&rel.Warehouseid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WarehouseidWarehouse = nil
		}
		o.R.WarehouseidStocks = nil
	}

	return o.AddWarehouseidStocks(ctx, exec, insert, related...)
}

// RemoveWarehouseidStocks relationships from objects passed in.
// Removes related items from R.WarehouseidStocks (uses pointer comparison, removal does not keep order)
// Sets related.R.WarehouseidWarehouse.
func (o *Warehouse) RemoveWarehouseidStocks(ctx context.Context, exec boil.ContextExecutor, related ...*Stock) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Warehouseid, nil)
		if rel.R != nil {
			rel.R.WarehouseidWarehouse = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("warehouseid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WarehouseidStocks {
			if rel != ri {
				continue
			}

			ln := len(o.R.WarehouseidStocks)
			if ln > 1 && i < ln-1 {
				o.R.WarehouseidStocks[i] = o.R.WarehouseidStocks[ln-1]
			}
			o.R.WarehouseidStocks = o.R.WarehouseidStocks[:ln-1]
			break
		}
	}

	return nil
}

// AddWarehouseidWarehouseShippingZones adds the given related objects to the existing relationships
// of the warehouse, optionally inserting them as new records.
// Appends related to o.R.WarehouseidWarehouseShippingZones.
// Sets related.R.WarehouseidWarehouse appropriately.
func (o *Warehouse) AddWarehouseidWarehouseShippingZones(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WarehouseShippingZone) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Warehouseid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"warehouse_shipping_zones\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"warehouseid"}),
				strmangle.WhereClause("\"", "\"", 2, warehouseShippingZonePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Warehouseid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &warehouseR{
			WarehouseidWarehouseShippingZones: related,
		}
	} else {
		o.R.WarehouseidWarehouseShippingZones = append(o.R.WarehouseidWarehouseShippingZones, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &warehouseShippingZoneR{
				WarehouseidWarehouse: o,
			}
		} else {
			rel.R.WarehouseidWarehouse = o
		}
	}
	return nil
}

// SetWarehouseidWarehouseShippingZones removes all previously related items of the
// warehouse replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WarehouseidWarehouse's WarehouseidWarehouseShippingZones accordingly.
// Replaces o.R.WarehouseidWarehouseShippingZones with related.
// Sets related.R.WarehouseidWarehouse's WarehouseidWarehouseShippingZones accordingly.
func (o *Warehouse) SetWarehouseidWarehouseShippingZones(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WarehouseShippingZone) error {
	query := "update \"warehouse_shipping_zones\" set \"warehouseid\" = null where \"warehouseid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WarehouseidWarehouseShippingZones {
			queries.SetScanner(&rel.Warehouseid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WarehouseidWarehouse = nil
		}
		o.R.WarehouseidWarehouseShippingZones = nil
	}

	return o.AddWarehouseidWarehouseShippingZones(ctx, exec, insert, related...)
}

// RemoveWarehouseidWarehouseShippingZones relationships from objects passed in.
// Removes related items from R.WarehouseidWarehouseShippingZones (uses pointer comparison, removal does not keep order)
// Sets related.R.WarehouseidWarehouse.
func (o *Warehouse) RemoveWarehouseidWarehouseShippingZones(ctx context.Context, exec boil.ContextExecutor, related ...*WarehouseShippingZone) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Warehouseid, nil)
		if rel.R != nil {
			rel.R.WarehouseidWarehouse = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("warehouseid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WarehouseidWarehouseShippingZones {
			if rel != ri {
				continue
			}

			ln := len(o.R.WarehouseidWarehouseShippingZones)
			if ln > 1 && i < ln-1 {
				o.R.WarehouseidWarehouseShippingZones[i] = o.R.WarehouseidWarehouseShippingZones[ln-1]
			}
			o.R.WarehouseidWarehouseShippingZones = o.R.WarehouseidWarehouseShippingZones[:ln-1]
			break
		}
	}

	return nil
}

// Warehouses retrieves all the records using an executor.
func Warehouses(mods ...qm.QueryMod) warehouseQuery {
	mods = append(mods, qm.From("\"warehouses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"warehouses\".*"})
	}

	return warehouseQuery{q}
}

// FindWarehouse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWarehouse(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Warehouse, error) {
	warehouseObj := &Warehouse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"warehouses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, warehouseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from warehouses")
	}

	if err = warehouseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return warehouseObj, err
	}

	return warehouseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Warehouse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no warehouses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	warehouseInsertCacheMut.RLock()
	cache, cached := warehouseInsertCache[key]
	warehouseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			warehouseAllColumns,
			warehouseColumnsWithDefault,
			warehouseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(warehouseType, warehouseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"warehouses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"warehouses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into warehouses")
	}

	if !cached {
		warehouseInsertCacheMut.Lock()
		warehouseInsertCache[key] = cache
		warehouseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Warehouse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Warehouse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	warehouseUpdateCacheMut.RLock()
	cache, cached := warehouseUpdateCache[key]
	warehouseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update warehouses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"warehouses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, warehousePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, append(wl, warehousePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update warehouses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for warehouses")
	}

	if !cached {
		warehouseUpdateCacheMut.Lock()
		warehouseUpdateCache[key] = cache
		warehouseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q warehouseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for warehouses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WarehouseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"warehouses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, warehousePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in warehouse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all warehouse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Warehouse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no warehouses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(warehouseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	warehouseUpsertCacheMut.RLock()
	cache, cached := warehouseUpsertCache[key]
	warehouseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			warehouseAllColumns,
			warehouseColumnsWithDefault,
			warehouseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert warehouses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(warehousePrimaryKeyColumns))
			copy(conflict, warehousePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"warehouses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(warehouseType, warehouseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(warehouseType, warehouseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert warehouses")
	}

	if !cached {
		warehouseUpsertCacheMut.Lock()
		warehouseUpsertCache[key] = cache
		warehouseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Warehouse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Warehouse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Warehouse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), warehousePrimaryKeyMapping)
	sql := "DELETE FROM \"warehouses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for warehouses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q warehouseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no warehouseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from warehouses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for warehouses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WarehouseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(warehouseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"warehouses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehousePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from warehouse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for warehouses")
	}

	if len(warehouseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Warehouse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWarehouse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WarehouseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WarehouseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), warehousePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"warehouses\".* FROM \"warehouses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, warehousePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WarehouseSlice")
	}

	*o = slice

	return nil
}

// WarehouseExists checks if the Warehouse row exists.
func WarehouseExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"warehouses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if warehouses exists")
	}

	return exists, nil
}

// Exists checks if the Warehouse row exists.
func (o *Warehouse) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WarehouseExists(ctx, exec, o.ID)
}
