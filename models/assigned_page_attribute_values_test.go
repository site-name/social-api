// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAssignedPageAttributeValues(t *testing.T) {
	t.Parallel()

	query := AssignedPageAttributeValues()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAssignedPageAttributeValuesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedPageAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedPageAttributeValuesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AssignedPageAttributeValues().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedPageAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedPageAttributeValuesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedPageAttributeValueSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedPageAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedPageAttributeValuesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AssignedPageAttributeValueExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AssignedPageAttributeValue exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AssignedPageAttributeValueExists to return true, but got false.")
	}
}

func testAssignedPageAttributeValuesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	assignedPageAttributeValueFound, err := FindAssignedPageAttributeValue(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if assignedPageAttributeValueFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAssignedPageAttributeValuesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AssignedPageAttributeValues().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAssignedPageAttributeValuesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AssignedPageAttributeValues().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAssignedPageAttributeValuesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	assignedPageAttributeValueOne := &AssignedPageAttributeValue{}
	assignedPageAttributeValueTwo := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, assignedPageAttributeValueOne, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedPageAttributeValueTwo, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignedPageAttributeValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedPageAttributeValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedPageAttributeValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAssignedPageAttributeValuesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	assignedPageAttributeValueOne := &AssignedPageAttributeValue{}
	assignedPageAttributeValueTwo := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, assignedPageAttributeValueOne, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedPageAttributeValueTwo, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignedPageAttributeValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedPageAttributeValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPageAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func assignedPageAttributeValueBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttributeValue) error {
	*o = AssignedPageAttributeValue{}
	return nil
}

func assignedPageAttributeValueAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttributeValue) error {
	*o = AssignedPageAttributeValue{}
	return nil
}

func assignedPageAttributeValueAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttributeValue) error {
	*o = AssignedPageAttributeValue{}
	return nil
}

func assignedPageAttributeValueBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttributeValue) error {
	*o = AssignedPageAttributeValue{}
	return nil
}

func assignedPageAttributeValueAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttributeValue) error {
	*o = AssignedPageAttributeValue{}
	return nil
}

func assignedPageAttributeValueBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttributeValue) error {
	*o = AssignedPageAttributeValue{}
	return nil
}

func assignedPageAttributeValueAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttributeValue) error {
	*o = AssignedPageAttributeValue{}
	return nil
}

func assignedPageAttributeValueBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttributeValue) error {
	*o = AssignedPageAttributeValue{}
	return nil
}

func assignedPageAttributeValueAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttributeValue) error {
	*o = AssignedPageAttributeValue{}
	return nil
}

func testAssignedPageAttributeValuesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AssignedPageAttributeValue{}
	o := &AssignedPageAttributeValue{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue object: %s", err)
	}

	AddAssignedPageAttributeValueHook(boil.BeforeInsertHook, assignedPageAttributeValueBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeValueBeforeInsertHooks = []AssignedPageAttributeValueHook{}

	AddAssignedPageAttributeValueHook(boil.AfterInsertHook, assignedPageAttributeValueAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeValueAfterInsertHooks = []AssignedPageAttributeValueHook{}

	AddAssignedPageAttributeValueHook(boil.AfterSelectHook, assignedPageAttributeValueAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeValueAfterSelectHooks = []AssignedPageAttributeValueHook{}

	AddAssignedPageAttributeValueHook(boil.BeforeUpdateHook, assignedPageAttributeValueBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeValueBeforeUpdateHooks = []AssignedPageAttributeValueHook{}

	AddAssignedPageAttributeValueHook(boil.AfterUpdateHook, assignedPageAttributeValueAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeValueAfterUpdateHooks = []AssignedPageAttributeValueHook{}

	AddAssignedPageAttributeValueHook(boil.BeforeDeleteHook, assignedPageAttributeValueBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeValueBeforeDeleteHooks = []AssignedPageAttributeValueHook{}

	AddAssignedPageAttributeValueHook(boil.AfterDeleteHook, assignedPageAttributeValueAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeValueAfterDeleteHooks = []AssignedPageAttributeValueHook{}

	AddAssignedPageAttributeValueHook(boil.BeforeUpsertHook, assignedPageAttributeValueBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeValueBeforeUpsertHooks = []AssignedPageAttributeValueHook{}

	AddAssignedPageAttributeValueHook(boil.AfterUpsertHook, assignedPageAttributeValueAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeValueAfterUpsertHooks = []AssignedPageAttributeValueHook{}
}

func testAssignedPageAttributeValuesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPageAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedPageAttributeValuesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(assignedPageAttributeValueColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AssignedPageAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedPageAttributeValueToOneAssignedPageAttributeUsingAssignment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AssignedPageAttributeValue
	var foreign AssignedPageAttribute

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AssignmentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Assignment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAssignedPageAttributeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttribute) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AssignedPageAttributeValueSlice{&local}
	if err = local.L.LoadAssignment(ctx, tx, false, (*[]*AssignedPageAttributeValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Assignment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Assignment = nil
	if err = local.L.LoadAssignment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Assignment == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAssignedPageAttributeValueToOneAttributeValueUsingValue(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AssignedPageAttributeValue
	var foreign AttributeValue

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributeValueDBTypes, false, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ValueID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Value().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAttributeValueHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AssignedPageAttributeValueSlice{&local}
	if err = local.L.LoadValue(ctx, tx, false, (*[]*AssignedPageAttributeValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Value == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Value = nil
	if err = local.L.LoadValue(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Value == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAssignedPageAttributeValueToOneSetOpAssignedPageAttributeUsingAssignment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedPageAttributeValue
	var b, c AssignedPageAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPageAttributeValueDBTypes, false, strmangle.SetComplement(assignedPageAttributeValuePrimaryKeyColumns, assignedPageAttributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AssignedPageAttribute{&b, &c} {
		err = a.SetAssignment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Assignment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssignmentAssignedPageAttributeValues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AssignmentID != x.ID {
			t.Error("foreign key was wrong value", a.AssignmentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AssignmentID))
		reflect.Indirect(reflect.ValueOf(&a.AssignmentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AssignmentID != x.ID {
			t.Error("foreign key was wrong value", a.AssignmentID, x.ID)
		}
	}
}
func testAssignedPageAttributeValueToOneSetOpAttributeValueUsingValue(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedPageAttributeValue
	var b, c AttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPageAttributeValueDBTypes, false, strmangle.SetComplement(assignedPageAttributeValuePrimaryKeyColumns, assignedPageAttributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AttributeValue{&b, &c} {
		err = a.SetValue(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Value != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ValueAssignedPageAttributeValues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ValueID != x.ID {
			t.Error("foreign key was wrong value", a.ValueID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ValueID))
		reflect.Indirect(reflect.ValueOf(&a.ValueID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ValueID != x.ID {
			t.Error("foreign key was wrong value", a.ValueID, x.ID)
		}
	}
}

func testAssignedPageAttributeValuesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignedPageAttributeValuesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedPageAttributeValueSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignedPageAttributeValuesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedPageAttributeValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	assignedPageAttributeValueDBTypes = map[string]string{`ID`: `uuid`, `ValueID`: `uuid`, `AssignmentID`: `uuid`, `SortOrder`: `integer`}
	_                                 = bytes.MinRead
)

func testAssignedPageAttributeValuesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(assignedPageAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(assignedPageAttributeValueAllColumns) == len(assignedPageAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPageAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAssignedPageAttributeValuesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(assignedPageAttributeValueAllColumns) == len(assignedPageAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPageAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedPageAttributeValueDBTypes, true, assignedPageAttributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(assignedPageAttributeValueAllColumns, assignedPageAttributeValuePrimaryKeyColumns) {
		fields = assignedPageAttributeValueAllColumns
	} else {
		fields = strmangle.SetComplement(
			assignedPageAttributeValueAllColumns,
			assignedPageAttributeValuePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AssignedPageAttributeValueSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAssignedPageAttributeValuesUpsert(t *testing.T) {
	t.Parallel()

	if len(assignedPageAttributeValueAllColumns) == len(assignedPageAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AssignedPageAttributeValue{}
	if err = randomize.Struct(seed, &o, assignedPageAttributeValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedPageAttributeValue: %s", err)
	}

	count, err := AssignedPageAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttributeValue struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedPageAttributeValue: %s", err)
	}

	count, err = AssignedPageAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
