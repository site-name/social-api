// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDigitalContentUrls(t *testing.T) {
	t.Parallel()

	query := DigitalContentUrls()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDigitalContentUrlsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DigitalContentUrls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDigitalContentUrlsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DigitalContentUrls().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DigitalContentUrls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDigitalContentUrlsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DigitalContentURLSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DigitalContentUrls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDigitalContentUrlsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DigitalContentURLExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DigitalContentURL exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DigitalContentURLExists to return true, but got false.")
	}
}

func testDigitalContentUrlsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	digitalContentURLFound, err := FindDigitalContentURL(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if digitalContentURLFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDigitalContentUrlsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DigitalContentUrls().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDigitalContentUrlsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DigitalContentUrls().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDigitalContentUrlsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	digitalContentURLOne := &DigitalContentURL{}
	digitalContentURLTwo := &DigitalContentURL{}
	if err = randomize.Struct(seed, digitalContentURLOne, digitalContentURLDBTypes, false, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}
	if err = randomize.Struct(seed, digitalContentURLTwo, digitalContentURLDBTypes, false, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = digitalContentURLOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = digitalContentURLTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DigitalContentUrls().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDigitalContentUrlsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	digitalContentURLOne := &DigitalContentURL{}
	digitalContentURLTwo := &DigitalContentURL{}
	if err = randomize.Struct(seed, digitalContentURLOne, digitalContentURLDBTypes, false, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}
	if err = randomize.Struct(seed, digitalContentURLTwo, digitalContentURLDBTypes, false, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = digitalContentURLOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = digitalContentURLTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DigitalContentUrls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func digitalContentURLBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DigitalContentURL) error {
	*o = DigitalContentURL{}
	return nil
}

func digitalContentURLAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DigitalContentURL) error {
	*o = DigitalContentURL{}
	return nil
}

func digitalContentURLAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DigitalContentURL) error {
	*o = DigitalContentURL{}
	return nil
}

func digitalContentURLBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DigitalContentURL) error {
	*o = DigitalContentURL{}
	return nil
}

func digitalContentURLAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DigitalContentURL) error {
	*o = DigitalContentURL{}
	return nil
}

func digitalContentURLBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DigitalContentURL) error {
	*o = DigitalContentURL{}
	return nil
}

func digitalContentURLAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DigitalContentURL) error {
	*o = DigitalContentURL{}
	return nil
}

func digitalContentURLBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DigitalContentURL) error {
	*o = DigitalContentURL{}
	return nil
}

func digitalContentURLAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DigitalContentURL) error {
	*o = DigitalContentURL{}
	return nil
}

func testDigitalContentUrlsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DigitalContentURL{}
	o := &DigitalContentURL{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL object: %s", err)
	}

	AddDigitalContentURLHook(boil.BeforeInsertHook, digitalContentURLBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	digitalContentURLBeforeInsertHooks = []DigitalContentURLHook{}

	AddDigitalContentURLHook(boil.AfterInsertHook, digitalContentURLAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	digitalContentURLAfterInsertHooks = []DigitalContentURLHook{}

	AddDigitalContentURLHook(boil.AfterSelectHook, digitalContentURLAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	digitalContentURLAfterSelectHooks = []DigitalContentURLHook{}

	AddDigitalContentURLHook(boil.BeforeUpdateHook, digitalContentURLBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	digitalContentURLBeforeUpdateHooks = []DigitalContentURLHook{}

	AddDigitalContentURLHook(boil.AfterUpdateHook, digitalContentURLAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	digitalContentURLAfterUpdateHooks = []DigitalContentURLHook{}

	AddDigitalContentURLHook(boil.BeforeDeleteHook, digitalContentURLBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	digitalContentURLBeforeDeleteHooks = []DigitalContentURLHook{}

	AddDigitalContentURLHook(boil.AfterDeleteHook, digitalContentURLAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	digitalContentURLAfterDeleteHooks = []DigitalContentURLHook{}

	AddDigitalContentURLHook(boil.BeforeUpsertHook, digitalContentURLBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	digitalContentURLBeforeUpsertHooks = []DigitalContentURLHook{}

	AddDigitalContentURLHook(boil.AfterUpsertHook, digitalContentURLAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	digitalContentURLAfterUpsertHooks = []DigitalContentURLHook{}
}

func testDigitalContentUrlsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DigitalContentUrls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDigitalContentUrlsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(digitalContentURLColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DigitalContentUrls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDigitalContentURLToOneDigitalContentUsingContentidDigitalContent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DigitalContentURL
	var foreign DigitalContent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, digitalContentDBTypes, false, digitalContentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Contentid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContentidDigitalContent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddDigitalContentHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *DigitalContent) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DigitalContentURLSlice{&local}
	if err = local.L.LoadContentidDigitalContent(ctx, tx, false, (*[]*DigitalContentURL)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContentidDigitalContent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ContentidDigitalContent = nil
	if err = local.L.LoadContentidDigitalContent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContentidDigitalContent == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDigitalContentURLToOneOrderLineUsingLineidOrderLine(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DigitalContentURL
	var foreign OrderLine

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Lineid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LineidOrderLine().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderLineHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := DigitalContentURLSlice{&local}
	if err = local.L.LoadLineidOrderLine(ctx, tx, false, (*[]*DigitalContentURL)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LineidOrderLine == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LineidOrderLine = nil
	if err = local.L.LoadLineidOrderLine(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LineidOrderLine == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testDigitalContentURLToOneSetOpDigitalContentUsingContentidDigitalContent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DigitalContentURL
	var b, c DigitalContent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, digitalContentURLDBTypes, false, strmangle.SetComplement(digitalContentURLPrimaryKeyColumns, digitalContentURLColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, digitalContentDBTypes, false, strmangle.SetComplement(digitalContentPrimaryKeyColumns, digitalContentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, digitalContentDBTypes, false, strmangle.SetComplement(digitalContentPrimaryKeyColumns, digitalContentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DigitalContent{&b, &c} {
		err = a.SetContentidDigitalContent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ContentidDigitalContent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ContentidDigitalContentUrls[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Contentid, x.ID) {
			t.Error("foreign key was wrong value", a.Contentid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Contentid))
		reflect.Indirect(reflect.ValueOf(&a.Contentid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Contentid, x.ID) {
			t.Error("foreign key was wrong value", a.Contentid, x.ID)
		}
	}
}

func testDigitalContentURLToOneRemoveOpDigitalContentUsingContentidDigitalContent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DigitalContentURL
	var b DigitalContent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, digitalContentURLDBTypes, false, strmangle.SetComplement(digitalContentURLPrimaryKeyColumns, digitalContentURLColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, digitalContentDBTypes, false, strmangle.SetComplement(digitalContentPrimaryKeyColumns, digitalContentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetContentidDigitalContent(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveContentidDigitalContent(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ContentidDigitalContent().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ContentidDigitalContent != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Contentid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ContentidDigitalContentUrls) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDigitalContentURLToOneSetOpOrderLineUsingLineidOrderLine(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DigitalContentURL
	var b, c OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, digitalContentURLDBTypes, false, strmangle.SetComplement(digitalContentURLPrimaryKeyColumns, digitalContentURLColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrderLine{&b, &c} {
		err = a.SetLineidOrderLine(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LineidOrderLine != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LineidDigitalContentURL != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Lineid, x.ID) {
			t.Error("foreign key was wrong value", a.Lineid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Lineid))
		reflect.Indirect(reflect.ValueOf(&a.Lineid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Lineid, x.ID) {
			t.Error("foreign key was wrong value", a.Lineid, x.ID)
		}
	}
}

func testDigitalContentURLToOneRemoveOpOrderLineUsingLineidOrderLine(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DigitalContentURL
	var b OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, digitalContentURLDBTypes, false, strmangle.SetComplement(digitalContentURLPrimaryKeyColumns, digitalContentURLColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLineidOrderLine(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLineidOrderLine(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.LineidOrderLine().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.LineidOrderLine != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Lineid) {
		t.Error("foreign key value should be nil")
	}

	if b.R.LineidDigitalContentURL != nil {
		t.Error("failed to remove a from b's relationships")
	}

}

func testDigitalContentUrlsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDigitalContentUrlsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DigitalContentURLSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDigitalContentUrlsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DigitalContentUrls().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	digitalContentURLDBTypes = map[string]string{`ID`: `character varying`, `Token`: `character varying`, `Contentid`: `character varying`, `Createat`: `bigint`, `Downloadnum`: `integer`, `Lineid`: `character varying`}
	_                        = bytes.MinRead
)

func testDigitalContentUrlsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(digitalContentURLPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(digitalContentURLAllColumns) == len(digitalContentURLPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DigitalContentUrls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDigitalContentUrlsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(digitalContentURLAllColumns) == len(digitalContentURLPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DigitalContentURL{}
	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DigitalContentUrls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, digitalContentURLDBTypes, true, digitalContentURLPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(digitalContentURLAllColumns, digitalContentURLPrimaryKeyColumns) {
		fields = digitalContentURLAllColumns
	} else {
		fields = strmangle.SetComplement(
			digitalContentURLAllColumns,
			digitalContentURLPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DigitalContentURLSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDigitalContentUrlsUpsert(t *testing.T) {
	t.Parallel()

	if len(digitalContentURLAllColumns) == len(digitalContentURLPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DigitalContentURL{}
	if err = randomize.Struct(seed, &o, digitalContentURLDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DigitalContentURL: %s", err)
	}

	count, err := DigitalContentUrls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, digitalContentURLDBTypes, false, digitalContentURLPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DigitalContentURL: %s", err)
	}

	count, err = DigitalContentUrls().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
