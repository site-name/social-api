// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrderDiscounts(t *testing.T) {
	t.Parallel()

	query := OrderDiscounts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrderDiscountsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderDiscountsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrderDiscounts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderDiscountsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderDiscountSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderDiscountsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderDiscountExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrderDiscount exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderDiscountExists to return true, but got false.")
	}
}

func testOrderDiscountsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderDiscountFound, err := FindOrderDiscount(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orderDiscountFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrderDiscountsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrderDiscounts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrderDiscountsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrderDiscounts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrderDiscountsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderDiscountOne := &OrderDiscount{}
	orderDiscountTwo := &OrderDiscount{}
	if err = randomize.Struct(seed, orderDiscountOne, orderDiscountDBTypes, false, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}
	if err = randomize.Struct(seed, orderDiscountTwo, orderDiscountDBTypes, false, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderDiscountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderDiscountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderDiscounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrderDiscountsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderDiscountOne := &OrderDiscount{}
	orderDiscountTwo := &OrderDiscount{}
	if err = randomize.Struct(seed, orderDiscountOne, orderDiscountDBTypes, false, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}
	if err = randomize.Struct(seed, orderDiscountTwo, orderDiscountDBTypes, false, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderDiscountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderDiscountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orderDiscountBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderDiscount) error {
	*o = OrderDiscount{}
	return nil
}

func orderDiscountAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderDiscount) error {
	*o = OrderDiscount{}
	return nil
}

func orderDiscountAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrderDiscount) error {
	*o = OrderDiscount{}
	return nil
}

func orderDiscountBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderDiscount) error {
	*o = OrderDiscount{}
	return nil
}

func orderDiscountAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderDiscount) error {
	*o = OrderDiscount{}
	return nil
}

func orderDiscountBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderDiscount) error {
	*o = OrderDiscount{}
	return nil
}

func orderDiscountAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderDiscount) error {
	*o = OrderDiscount{}
	return nil
}

func orderDiscountBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderDiscount) error {
	*o = OrderDiscount{}
	return nil
}

func orderDiscountAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderDiscount) error {
	*o = OrderDiscount{}
	return nil
}

func testOrderDiscountsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrderDiscount{}
	o := &OrderDiscount{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrderDiscount object: %s", err)
	}

	AddOrderDiscountHook(boil.BeforeInsertHook, orderDiscountBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orderDiscountBeforeInsertHooks = []OrderDiscountHook{}

	AddOrderDiscountHook(boil.AfterInsertHook, orderDiscountAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orderDiscountAfterInsertHooks = []OrderDiscountHook{}

	AddOrderDiscountHook(boil.AfterSelectHook, orderDiscountAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orderDiscountAfterSelectHooks = []OrderDiscountHook{}

	AddOrderDiscountHook(boil.BeforeUpdateHook, orderDiscountBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orderDiscountBeforeUpdateHooks = []OrderDiscountHook{}

	AddOrderDiscountHook(boil.AfterUpdateHook, orderDiscountAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orderDiscountAfterUpdateHooks = []OrderDiscountHook{}

	AddOrderDiscountHook(boil.BeforeDeleteHook, orderDiscountBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orderDiscountBeforeDeleteHooks = []OrderDiscountHook{}

	AddOrderDiscountHook(boil.AfterDeleteHook, orderDiscountAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orderDiscountAfterDeleteHooks = []OrderDiscountHook{}

	AddOrderDiscountHook(boil.BeforeUpsertHook, orderDiscountBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orderDiscountBeforeUpsertHooks = []OrderDiscountHook{}

	AddOrderDiscountHook(boil.AfterUpsertHook, orderDiscountAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orderDiscountAfterUpsertHooks = []OrderDiscountHook{}
}

func testOrderDiscountsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderDiscountsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderDiscountColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderDiscountToOneOrderUsingOrderidOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderDiscount
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Orderid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrderidOrder().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Order) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderDiscountSlice{&local}
	if err = local.L.LoadOrderidOrder(ctx, tx, false, (*[]*OrderDiscount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrderidOrder == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrderidOrder = nil
	if err = local.L.LoadOrderidOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrderidOrder == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderDiscountToOneSetOpOrderUsingOrderidOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderDiscount
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDiscountDBTypes, false, strmangle.SetComplement(orderDiscountPrimaryKeyColumns, orderDiscountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrderidOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrderidOrder != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderidOrderDiscounts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Orderid, x.ID) {
			t.Error("foreign key was wrong value", a.Orderid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Orderid))
		reflect.Indirect(reflect.ValueOf(&a.Orderid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Orderid, x.ID) {
			t.Error("foreign key was wrong value", a.Orderid, x.ID)
		}
	}
}

func testOrderDiscountToOneRemoveOpOrderUsingOrderidOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderDiscount
	var b Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDiscountDBTypes, false, strmangle.SetComplement(orderDiscountPrimaryKeyColumns, orderDiscountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrderidOrder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrderidOrder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OrderidOrder().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OrderidOrder != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Orderid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OrderidOrderDiscounts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderDiscountsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderDiscountsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderDiscountSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderDiscountsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderDiscounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderDiscountDBTypes = map[string]string{`ID`: `character varying`, `Orderid`: `character varying`, `Type`: `character varying`, `Valuetype`: `character varying`, `Value`: `double precision`, `Amountvalue`: `double precision`, `Currency`: `text`, `Name`: `character varying`, `Translatedname`: `character varying`, `Reason`: `text`}
	_                    = bytes.MinRead
)

func testOrderDiscountsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderDiscountPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderDiscountAllColumns) == len(orderDiscountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrderDiscountsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderDiscountAllColumns) == len(orderDiscountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderDiscount{}
	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderDiscountDBTypes, true, orderDiscountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderDiscountAllColumns, orderDiscountPrimaryKeyColumns) {
		fields = orderDiscountAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderDiscountAllColumns,
			orderDiscountPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderDiscountSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrderDiscountsUpsert(t *testing.T) {
	t.Parallel()

	if len(orderDiscountAllColumns) == len(orderDiscountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrderDiscount{}
	if err = randomize.Struct(seed, &o, orderDiscountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderDiscount: %s", err)
	}

	count, err := OrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orderDiscountDBTypes, false, orderDiscountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderDiscount struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderDiscount: %s", err)
	}

	count, err = OrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
