// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProductMedia(t *testing.T) {
	t.Parallel()

	query := ProductMedia()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProductMediaDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductMediaQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProductMedia().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductMediaSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductMediumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductMediaExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProductMediumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProductMedium exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProductMediumExists to return true, but got false.")
	}
}

func testProductMediaFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	productMediumFound, err := FindProductMedium(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if productMediumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProductMediaBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProductMedia().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProductMediaOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProductMedia().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProductMediaAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	productMediumOne := &ProductMedium{}
	productMediumTwo := &ProductMedium{}
	if err = randomize.Struct(seed, productMediumOne, productMediumDBTypes, false, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}
	if err = randomize.Struct(seed, productMediumTwo, productMediumDBTypes, false, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productMediumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productMediumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductMedia().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProductMediaCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	productMediumOne := &ProductMedium{}
	productMediumTwo := &ProductMedium{}
	if err = randomize.Struct(seed, productMediumOne, productMediumDBTypes, false, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}
	if err = randomize.Struct(seed, productMediumTwo, productMediumDBTypes, false, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productMediumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productMediumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func productMediumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductMedium) error {
	*o = ProductMedium{}
	return nil
}

func productMediumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductMedium) error {
	*o = ProductMedium{}
	return nil
}

func productMediumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProductMedium) error {
	*o = ProductMedium{}
	return nil
}

func productMediumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductMedium) error {
	*o = ProductMedium{}
	return nil
}

func productMediumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductMedium) error {
	*o = ProductMedium{}
	return nil
}

func productMediumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductMedium) error {
	*o = ProductMedium{}
	return nil
}

func productMediumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductMedium) error {
	*o = ProductMedium{}
	return nil
}

func productMediumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductMedium) error {
	*o = ProductMedium{}
	return nil
}

func productMediumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductMedium) error {
	*o = ProductMedium{}
	return nil
}

func testProductMediaHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProductMedium{}
	o := &ProductMedium{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, productMediumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductMedium object: %s", err)
	}

	AddProductMediumHook(boil.BeforeInsertHook, productMediumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	productMediumBeforeInsertHooks = []ProductMediumHook{}

	AddProductMediumHook(boil.AfterInsertHook, productMediumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	productMediumAfterInsertHooks = []ProductMediumHook{}

	AddProductMediumHook(boil.AfterSelectHook, productMediumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	productMediumAfterSelectHooks = []ProductMediumHook{}

	AddProductMediumHook(boil.BeforeUpdateHook, productMediumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	productMediumBeforeUpdateHooks = []ProductMediumHook{}

	AddProductMediumHook(boil.AfterUpdateHook, productMediumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	productMediumAfterUpdateHooks = []ProductMediumHook{}

	AddProductMediumHook(boil.BeforeDeleteHook, productMediumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	productMediumBeforeDeleteHooks = []ProductMediumHook{}

	AddProductMediumHook(boil.AfterDeleteHook, productMediumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	productMediumAfterDeleteHooks = []ProductMediumHook{}

	AddProductMediumHook(boil.BeforeUpsertHook, productMediumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	productMediumBeforeUpsertHooks = []ProductMediumHook{}

	AddProductMediumHook(boil.AfterUpsertHook, productMediumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	productMediumAfterUpsertHooks = []ProductMediumHook{}
}

func testProductMediaInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductMediaInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(productMediumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProductMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductMediumToManyMediumVariantMedia(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductMedium
	var b, c VariantMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, variantMediumDBTypes, false, variantMediumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variantMediumDBTypes, false, variantMediumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.MediaID, a.ID)
	queries.Assign(&c.MediaID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MediumVariantMedia().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.MediaID, b.MediaID) {
			bFound = true
		}
		if queries.Equal(v.MediaID, c.MediaID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductMediumSlice{&a}
	if err = a.L.LoadMediumVariantMedia(ctx, tx, false, (*[]*ProductMedium)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MediumVariantMedia); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MediumVariantMedia = nil
	if err = a.L.LoadMediumVariantMedia(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MediumVariantMedia); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductMediumToManyAddOpMediumVariantMedia(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductMedium
	var b, c, d, e VariantMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productMediumDBTypes, false, strmangle.SetComplement(productMediumPrimaryKeyColumns, productMediumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VariantMedium{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variantMediumDBTypes, false, strmangle.SetComplement(variantMediumPrimaryKeyColumns, variantMediumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VariantMedium{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMediumVariantMedia(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.MediaID) {
			t.Error("foreign key was wrong value", a.ID, first.MediaID)
		}
		if !queries.Equal(a.ID, second.MediaID) {
			t.Error("foreign key was wrong value", a.ID, second.MediaID)
		}

		if first.R.Medium != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Medium != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MediumVariantMedia[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MediumVariantMedia[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MediumVariantMedia().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductMediumToManySetOpMediumVariantMedia(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductMedium
	var b, c, d, e VariantMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productMediumDBTypes, false, strmangle.SetComplement(productMediumPrimaryKeyColumns, productMediumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VariantMedium{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variantMediumDBTypes, false, strmangle.SetComplement(variantMediumPrimaryKeyColumns, variantMediumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMediumVariantMedia(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MediumVariantMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMediumVariantMedia(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MediumVariantMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MediaID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MediaID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.MediaID) {
		t.Error("foreign key was wrong value", a.ID, d.MediaID)
	}
	if !queries.Equal(a.ID, e.MediaID) {
		t.Error("foreign key was wrong value", a.ID, e.MediaID)
	}

	if b.R.Medium != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Medium != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Medium != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Medium != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MediumVariantMedia[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MediumVariantMedia[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductMediumToManyRemoveOpMediumVariantMedia(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductMedium
	var b, c, d, e VariantMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productMediumDBTypes, false, strmangle.SetComplement(productMediumPrimaryKeyColumns, productMediumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VariantMedium{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variantMediumDBTypes, false, strmangle.SetComplement(variantMediumPrimaryKeyColumns, variantMediumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMediumVariantMedia(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MediumVariantMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMediumVariantMedia(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MediumVariantMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.MediaID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.MediaID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Medium != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Medium != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Medium != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Medium != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MediumVariantMedia) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MediumVariantMedia[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MediumVariantMedia[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductMediumToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductMedium
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ProductMediumSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*ProductMedium)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testProductMediumToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductMedium
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productMediumDBTypes, false, strmangle.SetComplement(productMediumPrimaryKeyColumns, productMediumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductMedia[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ProductID, x.ID) {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}

func testProductMediumToOneRemoveOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductMedium
	var b Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productMediumDBTypes, false, strmangle.SetComplement(productMediumPrimaryKeyColumns, productMediumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Product().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Product != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductMedia) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProductMediaReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductMediaReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductMediumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductMediaSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductMedia().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	productMediumDBTypes = map[string]string{`ID`: `character varying`, `CreateAt`: `bigint`, `ProductID`: `character varying`, `Ppoi`: `character varying`, `Image`: `character varying`, `Alt`: `character varying`, `Type`: `character varying`, `ExternalURL`: `character varying`, `OembedData`: `text`, `SortOrder`: `integer`}
	_                    = bytes.MinRead
)

func testProductMediaUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(productMediumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(productMediumAllColumns) == len(productMediumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProductMediaSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(productMediumAllColumns) == len(productMediumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductMedium{}
	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productMediumDBTypes, true, productMediumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(productMediumAllColumns, productMediumPrimaryKeyColumns) {
		fields = productMediumAllColumns
	} else {
		fields = strmangle.SetComplement(
			productMediumAllColumns,
			productMediumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProductMediumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProductMediaUpsert(t *testing.T) {
	t.Parallel()

	if len(productMediumAllColumns) == len(productMediumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProductMedium{}
	if err = randomize.Struct(seed, &o, productMediumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductMedium: %s", err)
	}

	count, err := ProductMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, productMediumDBTypes, false, productMediumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductMedium: %s", err)
	}

	count, err = ProductMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
