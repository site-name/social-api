// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShopTranslations(t *testing.T) {
	t.Parallel()

	query := ShopTranslations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShopTranslationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopTranslationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShopTranslations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopTranslationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopTranslationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopTranslationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShopTranslationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShopTranslation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShopTranslationExists to return true, but got false.")
	}
}

func testShopTranslationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shopTranslationFound, err := FindShopTranslation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shopTranslationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShopTranslationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShopTranslations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShopTranslationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShopTranslations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShopTranslationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shopTranslationOne := &ShopTranslation{}
	shopTranslationTwo := &ShopTranslation{}
	if err = randomize.Struct(seed, shopTranslationOne, shopTranslationDBTypes, false, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}
	if err = randomize.Struct(seed, shopTranslationTwo, shopTranslationDBTypes, false, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopTranslationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopTranslationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShopTranslations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShopTranslationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shopTranslationOne := &ShopTranslation{}
	shopTranslationTwo := &ShopTranslation{}
	if err = randomize.Struct(seed, shopTranslationOne, shopTranslationDBTypes, false, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}
	if err = randomize.Struct(seed, shopTranslationTwo, shopTranslationDBTypes, false, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopTranslationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopTranslationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shopTranslationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopTranslation) error {
	*o = ShopTranslation{}
	return nil
}

func shopTranslationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopTranslation) error {
	*o = ShopTranslation{}
	return nil
}

func shopTranslationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShopTranslation) error {
	*o = ShopTranslation{}
	return nil
}

func shopTranslationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShopTranslation) error {
	*o = ShopTranslation{}
	return nil
}

func shopTranslationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShopTranslation) error {
	*o = ShopTranslation{}
	return nil
}

func shopTranslationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShopTranslation) error {
	*o = ShopTranslation{}
	return nil
}

func shopTranslationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShopTranslation) error {
	*o = ShopTranslation{}
	return nil
}

func shopTranslationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopTranslation) error {
	*o = ShopTranslation{}
	return nil
}

func shopTranslationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopTranslation) error {
	*o = ShopTranslation{}
	return nil
}

func testShopTranslationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShopTranslation{}
	o := &ShopTranslation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShopTranslation object: %s", err)
	}

	AddShopTranslationHook(boil.BeforeInsertHook, shopTranslationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shopTranslationBeforeInsertHooks = []ShopTranslationHook{}

	AddShopTranslationHook(boil.AfterInsertHook, shopTranslationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shopTranslationAfterInsertHooks = []ShopTranslationHook{}

	AddShopTranslationHook(boil.AfterSelectHook, shopTranslationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shopTranslationAfterSelectHooks = []ShopTranslationHook{}

	AddShopTranslationHook(boil.BeforeUpdateHook, shopTranslationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shopTranslationBeforeUpdateHooks = []ShopTranslationHook{}

	AddShopTranslationHook(boil.AfterUpdateHook, shopTranslationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shopTranslationAfterUpdateHooks = []ShopTranslationHook{}

	AddShopTranslationHook(boil.BeforeDeleteHook, shopTranslationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shopTranslationBeforeDeleteHooks = []ShopTranslationHook{}

	AddShopTranslationHook(boil.AfterDeleteHook, shopTranslationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shopTranslationAfterDeleteHooks = []ShopTranslationHook{}

	AddShopTranslationHook(boil.BeforeUpsertHook, shopTranslationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shopTranslationBeforeUpsertHooks = []ShopTranslationHook{}

	AddShopTranslationHook(boil.AfterUpsertHook, shopTranslationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shopTranslationAfterUpsertHooks = []ShopTranslationHook{}
}

func testShopTranslationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopTranslationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shopTranslationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShopTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopTranslationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopTranslationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopTranslationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopTranslationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShopTranslations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shopTranslationDBTypes = map[string]string{`ID`: `character varying`, `LanguageCode`: `character varying`, `Name`: `character varying`, `Description`: `character varying`, `CreateAt`: `bigint`, `UpdateAt`: `bigint`}
	_                      = bytes.MinRead
)

func testShopTranslationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shopTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shopTranslationAllColumns) == len(shopTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShopTranslationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shopTranslationAllColumns) == len(shopTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShopTranslation{}
	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopTranslationDBTypes, true, shopTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shopTranslationAllColumns, shopTranslationPrimaryKeyColumns) {
		fields = shopTranslationAllColumns
	} else {
		fields = strmangle.SetComplement(
			shopTranslationAllColumns,
			shopTranslationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShopTranslationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShopTranslationsUpsert(t *testing.T) {
	t.Parallel()

	if len(shopTranslationAllColumns) == len(shopTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShopTranslation{}
	if err = randomize.Struct(seed, &o, shopTranslationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShopTranslation: %s", err)
	}

	count, err := ShopTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shopTranslationDBTypes, false, shopTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopTranslation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShopTranslation: %s", err)
	}

	count, err = ShopTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
