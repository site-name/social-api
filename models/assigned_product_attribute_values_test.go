// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAssignedProductAttributeValues(t *testing.T) {
	t.Parallel()

	query := AssignedProductAttributeValues()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAssignedProductAttributeValuesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedProductAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedProductAttributeValuesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AssignedProductAttributeValues().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedProductAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedProductAttributeValuesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedProductAttributeValueSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedProductAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedProductAttributeValuesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AssignedProductAttributeValueExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AssignedProductAttributeValue exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AssignedProductAttributeValueExists to return true, but got false.")
	}
}

func testAssignedProductAttributeValuesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	assignedProductAttributeValueFound, err := FindAssignedProductAttributeValue(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if assignedProductAttributeValueFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAssignedProductAttributeValuesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AssignedProductAttributeValues().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAssignedProductAttributeValuesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AssignedProductAttributeValues().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAssignedProductAttributeValuesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	assignedProductAttributeValueOne := &AssignedProductAttributeValue{}
	assignedProductAttributeValueTwo := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, assignedProductAttributeValueOne, assignedProductAttributeValueDBTypes, false, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedProductAttributeValueTwo, assignedProductAttributeValueDBTypes, false, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignedProductAttributeValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedProductAttributeValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedProductAttributeValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAssignedProductAttributeValuesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	assignedProductAttributeValueOne := &AssignedProductAttributeValue{}
	assignedProductAttributeValueTwo := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, assignedProductAttributeValueOne, assignedProductAttributeValueDBTypes, false, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedProductAttributeValueTwo, assignedProductAttributeValueDBTypes, false, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignedProductAttributeValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedProductAttributeValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedProductAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func assignedProductAttributeValueBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedProductAttributeValue) error {
	*o = AssignedProductAttributeValue{}
	return nil
}

func assignedProductAttributeValueAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedProductAttributeValue) error {
	*o = AssignedProductAttributeValue{}
	return nil
}

func assignedProductAttributeValueAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AssignedProductAttributeValue) error {
	*o = AssignedProductAttributeValue{}
	return nil
}

func assignedProductAttributeValueBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AssignedProductAttributeValue) error {
	*o = AssignedProductAttributeValue{}
	return nil
}

func assignedProductAttributeValueAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AssignedProductAttributeValue) error {
	*o = AssignedProductAttributeValue{}
	return nil
}

func assignedProductAttributeValueBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AssignedProductAttributeValue) error {
	*o = AssignedProductAttributeValue{}
	return nil
}

func assignedProductAttributeValueAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AssignedProductAttributeValue) error {
	*o = AssignedProductAttributeValue{}
	return nil
}

func assignedProductAttributeValueBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedProductAttributeValue) error {
	*o = AssignedProductAttributeValue{}
	return nil
}

func assignedProductAttributeValueAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedProductAttributeValue) error {
	*o = AssignedProductAttributeValue{}
	return nil
}

func testAssignedProductAttributeValuesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AssignedProductAttributeValue{}
	o := &AssignedProductAttributeValue{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue object: %s", err)
	}

	AddAssignedProductAttributeValueHook(boil.BeforeInsertHook, assignedProductAttributeValueBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	assignedProductAttributeValueBeforeInsertHooks = []AssignedProductAttributeValueHook{}

	AddAssignedProductAttributeValueHook(boil.AfterInsertHook, assignedProductAttributeValueAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	assignedProductAttributeValueAfterInsertHooks = []AssignedProductAttributeValueHook{}

	AddAssignedProductAttributeValueHook(boil.AfterSelectHook, assignedProductAttributeValueAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	assignedProductAttributeValueAfterSelectHooks = []AssignedProductAttributeValueHook{}

	AddAssignedProductAttributeValueHook(boil.BeforeUpdateHook, assignedProductAttributeValueBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	assignedProductAttributeValueBeforeUpdateHooks = []AssignedProductAttributeValueHook{}

	AddAssignedProductAttributeValueHook(boil.AfterUpdateHook, assignedProductAttributeValueAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	assignedProductAttributeValueAfterUpdateHooks = []AssignedProductAttributeValueHook{}

	AddAssignedProductAttributeValueHook(boil.BeforeDeleteHook, assignedProductAttributeValueBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	assignedProductAttributeValueBeforeDeleteHooks = []AssignedProductAttributeValueHook{}

	AddAssignedProductAttributeValueHook(boil.AfterDeleteHook, assignedProductAttributeValueAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	assignedProductAttributeValueAfterDeleteHooks = []AssignedProductAttributeValueHook{}

	AddAssignedProductAttributeValueHook(boil.BeforeUpsertHook, assignedProductAttributeValueBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	assignedProductAttributeValueBeforeUpsertHooks = []AssignedProductAttributeValueHook{}

	AddAssignedProductAttributeValueHook(boil.AfterUpsertHook, assignedProductAttributeValueAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	assignedProductAttributeValueAfterUpsertHooks = []AssignedProductAttributeValueHook{}
}

func testAssignedProductAttributeValuesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedProductAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedProductAttributeValuesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(assignedProductAttributeValueColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AssignedProductAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedProductAttributeValueToOneAssignedProductAttributeUsingAssignment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AssignedProductAttributeValue
	var foreign AssignedProductAttribute

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedProductAttributeValueDBTypes, false, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, assignedProductAttributeDBTypes, false, assignedProductAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttribute struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AssignmentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Assignment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAssignedProductAttributeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AssignedProductAttribute) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AssignedProductAttributeValueSlice{&local}
	if err = local.L.LoadAssignment(ctx, tx, false, (*[]*AssignedProductAttributeValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Assignment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Assignment = nil
	if err = local.L.LoadAssignment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Assignment == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAssignedProductAttributeValueToOneAttributeValueUsingValue(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AssignedProductAttributeValue
	var foreign AttributeValue

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedProductAttributeValueDBTypes, false, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributeValueDBTypes, false, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ValueID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Value().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAttributeValueHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AssignedProductAttributeValueSlice{&local}
	if err = local.L.LoadValue(ctx, tx, false, (*[]*AssignedProductAttributeValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Value == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Value = nil
	if err = local.L.LoadValue(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Value == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAssignedProductAttributeValueToOneSetOpAssignedProductAttributeUsingAssignment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedProductAttributeValue
	var b, c AssignedProductAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedProductAttributeValueDBTypes, false, strmangle.SetComplement(assignedProductAttributeValuePrimaryKeyColumns, assignedProductAttributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, assignedProductAttributeDBTypes, false, strmangle.SetComplement(assignedProductAttributePrimaryKeyColumns, assignedProductAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedProductAttributeDBTypes, false, strmangle.SetComplement(assignedProductAttributePrimaryKeyColumns, assignedProductAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AssignedProductAttribute{&b, &c} {
		err = a.SetAssignment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Assignment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssignmentAssignedProductAttributeValues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AssignmentID != x.ID {
			t.Error("foreign key was wrong value", a.AssignmentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AssignmentID))
		reflect.Indirect(reflect.ValueOf(&a.AssignmentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AssignmentID != x.ID {
			t.Error("foreign key was wrong value", a.AssignmentID, x.ID)
		}
	}
}
func testAssignedProductAttributeValueToOneSetOpAttributeValueUsingValue(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedProductAttributeValue
	var b, c AttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedProductAttributeValueDBTypes, false, strmangle.SetComplement(assignedProductAttributeValuePrimaryKeyColumns, assignedProductAttributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AttributeValue{&b, &c} {
		err = a.SetValue(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Value != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ValueAssignedProductAttributeValues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ValueID != x.ID {
			t.Error("foreign key was wrong value", a.ValueID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ValueID))
		reflect.Indirect(reflect.ValueOf(&a.ValueID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ValueID != x.ID {
			t.Error("foreign key was wrong value", a.ValueID, x.ID)
		}
	}
}

func testAssignedProductAttributeValuesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignedProductAttributeValuesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedProductAttributeValueSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignedProductAttributeValuesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedProductAttributeValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	assignedProductAttributeValueDBTypes = map[string]string{`ID`: `character varying`, `ValueID`: `character varying`, `AssignmentID`: `character varying`, `SortOrder`: `integer`}
	_                                    = bytes.MinRead
)

func testAssignedProductAttributeValuesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(assignedProductAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(assignedProductAttributeValueAllColumns) == len(assignedProductAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedProductAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAssignedProductAttributeValuesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(assignedProductAttributeValueAllColumns) == len(assignedProductAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedProductAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedProductAttributeValueDBTypes, true, assignedProductAttributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(assignedProductAttributeValueAllColumns, assignedProductAttributeValuePrimaryKeyColumns) {
		fields = assignedProductAttributeValueAllColumns
	} else {
		fields = strmangle.SetComplement(
			assignedProductAttributeValueAllColumns,
			assignedProductAttributeValuePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AssignedProductAttributeValueSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAssignedProductAttributeValuesUpsert(t *testing.T) {
	t.Parallel()

	if len(assignedProductAttributeValueAllColumns) == len(assignedProductAttributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AssignedProductAttributeValue{}
	if err = randomize.Struct(seed, &o, assignedProductAttributeValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedProductAttributeValue: %s", err)
	}

	count, err := AssignedProductAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, assignedProductAttributeValueDBTypes, false, assignedProductAttributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedProductAttributeValue struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedProductAttributeValue: %s", err)
	}

	count, err = AssignedProductAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
