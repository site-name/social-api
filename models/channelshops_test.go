// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChannelshops(t *testing.T) {
	t.Parallel()

	query := Channelshops()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChannelshopsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Channelshops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChannelshopsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Channelshops().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Channelshops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChannelshopsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChannelshopSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Channelshops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChannelshopsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChannelshopExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Channelshop exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChannelshopExists to return true, but got false.")
	}
}

func testChannelshopsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	channelshopFound, err := FindChannelshop(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if channelshopFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChannelshopsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Channelshops().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChannelshopsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Channelshops().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChannelshopsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	channelshopOne := &Channelshop{}
	channelshopTwo := &Channelshop{}
	if err = randomize.Struct(seed, channelshopOne, channelshopDBTypes, false, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}
	if err = randomize.Struct(seed, channelshopTwo, channelshopDBTypes, false, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = channelshopOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = channelshopTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Channelshops().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChannelshopsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	channelshopOne := &Channelshop{}
	channelshopTwo := &Channelshop{}
	if err = randomize.Struct(seed, channelshopOne, channelshopDBTypes, false, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}
	if err = randomize.Struct(seed, channelshopTwo, channelshopDBTypes, false, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = channelshopOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = channelshopTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Channelshops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func channelshopBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Channelshop) error {
	*o = Channelshop{}
	return nil
}

func channelshopAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Channelshop) error {
	*o = Channelshop{}
	return nil
}

func channelshopAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Channelshop) error {
	*o = Channelshop{}
	return nil
}

func channelshopBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Channelshop) error {
	*o = Channelshop{}
	return nil
}

func channelshopAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Channelshop) error {
	*o = Channelshop{}
	return nil
}

func channelshopBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Channelshop) error {
	*o = Channelshop{}
	return nil
}

func channelshopAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Channelshop) error {
	*o = Channelshop{}
	return nil
}

func channelshopBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Channelshop) error {
	*o = Channelshop{}
	return nil
}

func channelshopAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Channelshop) error {
	*o = Channelshop{}
	return nil
}

func testChannelshopsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Channelshop{}
	o := &Channelshop{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, channelshopDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Channelshop object: %s", err)
	}

	AddChannelshopHook(boil.BeforeInsertHook, channelshopBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	channelshopBeforeInsertHooks = []ChannelshopHook{}

	AddChannelshopHook(boil.AfterInsertHook, channelshopAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	channelshopAfterInsertHooks = []ChannelshopHook{}

	AddChannelshopHook(boil.AfterSelectHook, channelshopAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	channelshopAfterSelectHooks = []ChannelshopHook{}

	AddChannelshopHook(boil.BeforeUpdateHook, channelshopBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	channelshopBeforeUpdateHooks = []ChannelshopHook{}

	AddChannelshopHook(boil.AfterUpdateHook, channelshopAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	channelshopAfterUpdateHooks = []ChannelshopHook{}

	AddChannelshopHook(boil.BeforeDeleteHook, channelshopBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	channelshopBeforeDeleteHooks = []ChannelshopHook{}

	AddChannelshopHook(boil.AfterDeleteHook, channelshopAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	channelshopAfterDeleteHooks = []ChannelshopHook{}

	AddChannelshopHook(boil.BeforeUpsertHook, channelshopBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	channelshopBeforeUpsertHooks = []ChannelshopHook{}

	AddChannelshopHook(boil.AfterUpsertHook, channelshopAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	channelshopAfterUpsertHooks = []ChannelshopHook{}
}

func testChannelshopsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Channelshops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChannelshopsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(channelshopColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Channelshops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChannelshopToOneChannelUsingChannelidChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Channelshop
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Channelid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ChannelidChannel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddChannelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ChannelshopSlice{&local}
	if err = local.L.LoadChannelidChannel(ctx, tx, false, (*[]*Channelshop)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelidChannel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ChannelidChannel = nil
	if err = local.L.LoadChannelidChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelidChannel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testChannelshopToOneSetOpChannelUsingChannelidChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channelshop
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelshopDBTypes, false, strmangle.SetComplement(channelshopPrimaryKeyColumns, channelshopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannelidChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ChannelidChannel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChannelidChannelshops[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Channelid, x.ID) {
			t.Error("foreign key was wrong value", a.Channelid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Channelid))
		reflect.Indirect(reflect.ValueOf(&a.Channelid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Channelid, x.ID) {
			t.Error("foreign key was wrong value", a.Channelid, x.ID)
		}
	}
}

func testChannelshopToOneRemoveOpChannelUsingChannelidChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Channelshop
	var b Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, channelshopDBTypes, false, strmangle.SetComplement(channelshopPrimaryKeyColumns, channelshopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetChannelidChannel(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveChannelidChannel(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ChannelidChannel().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ChannelidChannel != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Channelid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ChannelidChannelshops) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testChannelshopsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChannelshopsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChannelshopSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChannelshopsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Channelshops().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	channelshopDBTypes = map[string]string{`ID`: `character varying`, `Channelid`: `character varying`, `Createat`: `bigint`, `Endat`: `bigint`}
	_                  = bytes.MinRead
)

func testChannelshopsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(channelshopPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(channelshopAllColumns) == len(channelshopPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Channelshops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChannelshopsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(channelshopAllColumns) == len(channelshopPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Channelshop{}
	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Channelshops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, channelshopDBTypes, true, channelshopPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(channelshopAllColumns, channelshopPrimaryKeyColumns) {
		fields = channelshopAllColumns
	} else {
		fields = strmangle.SetComplement(
			channelshopAllColumns,
			channelshopPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChannelshopSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChannelshopsUpsert(t *testing.T) {
	t.Parallel()

	if len(channelshopAllColumns) == len(channelshopPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Channelshop{}
	if err = randomize.Struct(seed, &o, channelshopDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Channelshop: %s", err)
	}

	count, err := Channelshops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, channelshopDBTypes, false, channelshopPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Channelshop struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Channelshop: %s", err)
	}

	count, err = Channelshops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
