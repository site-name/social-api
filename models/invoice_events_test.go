// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInvoiceEvents(t *testing.T) {
	t.Parallel()

	query := InvoiceEvents()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInvoiceEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InvoiceEvents().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceEventSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInvoiceEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InvoiceEventExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if InvoiceEvent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InvoiceEventExists to return true, but got false.")
	}
}

func testInvoiceEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	invoiceEventFound, err := FindInvoiceEvent(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if invoiceEventFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInvoiceEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InvoiceEvents().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInvoiceEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InvoiceEvents().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInvoiceEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	invoiceEventOne := &InvoiceEvent{}
	invoiceEventTwo := &InvoiceEvent{}
	if err = randomize.Struct(seed, invoiceEventOne, invoiceEventDBTypes, false, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceEventTwo, invoiceEventDBTypes, false, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InvoiceEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInvoiceEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	invoiceEventOne := &InvoiceEvent{}
	invoiceEventTwo := &InvoiceEvent{}
	if err = randomize.Struct(seed, invoiceEventOne, invoiceEventDBTypes, false, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, invoiceEventTwo, invoiceEventDBTypes, false, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = invoiceEventOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = invoiceEventTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func invoiceEventBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceEvent) error {
	*o = InvoiceEvent{}
	return nil
}

func invoiceEventAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceEvent) error {
	*o = InvoiceEvent{}
	return nil
}

func invoiceEventAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceEvent) error {
	*o = InvoiceEvent{}
	return nil
}

func invoiceEventBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceEvent) error {
	*o = InvoiceEvent{}
	return nil
}

func invoiceEventAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceEvent) error {
	*o = InvoiceEvent{}
	return nil
}

func invoiceEventBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceEvent) error {
	*o = InvoiceEvent{}
	return nil
}

func invoiceEventAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceEvent) error {
	*o = InvoiceEvent{}
	return nil
}

func invoiceEventBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceEvent) error {
	*o = InvoiceEvent{}
	return nil
}

func invoiceEventAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InvoiceEvent) error {
	*o = InvoiceEvent{}
	return nil
}

func testInvoiceEventsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InvoiceEvent{}
	o := &InvoiceEvent{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent object: %s", err)
	}

	AddInvoiceEventHook(boil.BeforeInsertHook, invoiceEventBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	invoiceEventBeforeInsertHooks = []InvoiceEventHook{}

	AddInvoiceEventHook(boil.AfterInsertHook, invoiceEventAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	invoiceEventAfterInsertHooks = []InvoiceEventHook{}

	AddInvoiceEventHook(boil.AfterSelectHook, invoiceEventAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	invoiceEventAfterSelectHooks = []InvoiceEventHook{}

	AddInvoiceEventHook(boil.BeforeUpdateHook, invoiceEventBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceEventBeforeUpdateHooks = []InvoiceEventHook{}

	AddInvoiceEventHook(boil.AfterUpdateHook, invoiceEventAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	invoiceEventAfterUpdateHooks = []InvoiceEventHook{}

	AddInvoiceEventHook(boil.BeforeDeleteHook, invoiceEventBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceEventBeforeDeleteHooks = []InvoiceEventHook{}

	AddInvoiceEventHook(boil.AfterDeleteHook, invoiceEventAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	invoiceEventAfterDeleteHooks = []InvoiceEventHook{}

	AddInvoiceEventHook(boil.BeforeUpsertHook, invoiceEventBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceEventBeforeUpsertHooks = []InvoiceEventHook{}

	AddInvoiceEventHook(boil.AfterUpsertHook, invoiceEventAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	invoiceEventAfterUpsertHooks = []InvoiceEventHook{}
}

func testInvoiceEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(invoiceEventColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInvoiceEventToOneInvoiceUsingInvoice(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InvoiceEvent
	var foreign Invoice

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Invoice struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.InvoiceID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Invoice().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddInvoiceHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Invoice) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := InvoiceEventSlice{&local}
	if err = local.L.LoadInvoice(ctx, tx, false, (*[]*InvoiceEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Invoice == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Invoice = nil
	if err = local.L.LoadInvoice(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Invoice == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testInvoiceEventToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InvoiceEvent
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Order) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := InvoiceEventSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*InvoiceEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testInvoiceEventToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InvoiceEvent
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := InvoiceEventSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*InvoiceEvent)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testInvoiceEventToOneSetOpInvoiceUsingInvoice(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InvoiceEvent
	var b, c Invoice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Invoice{&b, &c} {
		err = a.SetInvoice(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Invoice != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InvoiceEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.InvoiceID, x.ID) {
			t.Error("foreign key was wrong value", a.InvoiceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.InvoiceID))
		reflect.Indirect(reflect.ValueOf(&a.InvoiceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.InvoiceID, x.ID) {
			t.Error("foreign key was wrong value", a.InvoiceID, x.ID)
		}
	}
}

func testInvoiceEventToOneRemoveOpInvoiceUsingInvoice(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InvoiceEvent
	var b Invoice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetInvoice(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveInvoice(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Invoice().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Invoice != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.InvoiceID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.InvoiceEvents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testInvoiceEventToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InvoiceEvent
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InvoiceEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testInvoiceEventToOneRemoveOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InvoiceEvent
	var b Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Order().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Order != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrderID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.InvoiceEvents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testInvoiceEventToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InvoiceEvent
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.InvoiceEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testInvoiceEventToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InvoiceEvent
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.InvoiceEvents) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testInvoiceEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoiceEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InvoiceEventSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInvoiceEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InvoiceEvents().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	invoiceEventDBTypes = map[string]string{`ID`: `character varying`, `CreateAt`: `bigint`, `Type`: `character varying`, `InvoiceID`: `character varying`, `OrderID`: `character varying`, `UserID`: `character varying`, `Parameters`: `text`}
	_                   = bytes.MinRead
)

func testInvoiceEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(invoiceEventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(invoiceEventAllColumns) == len(invoiceEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInvoiceEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(invoiceEventAllColumns) == len(invoiceEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InvoiceEvent{}
	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, invoiceEventDBTypes, true, invoiceEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(invoiceEventAllColumns, invoiceEventPrimaryKeyColumns) {
		fields = invoiceEventAllColumns
	} else {
		fields = strmangle.SetComplement(
			invoiceEventAllColumns,
			invoiceEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InvoiceEventSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInvoiceEventsUpsert(t *testing.T) {
	t.Parallel()

	if len(invoiceEventAllColumns) == len(invoiceEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InvoiceEvent{}
	if err = randomize.Struct(seed, &o, invoiceEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InvoiceEvent: %s", err)
	}

	count, err := InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, invoiceEventDBTypes, false, invoiceEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InvoiceEvent struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InvoiceEvent: %s", err)
	}

	count, err = InvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
