// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCollectionTranslations(t *testing.T) {
	t.Parallel()

	query := CollectionTranslations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCollectionTranslationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollectionTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollectionTranslationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CollectionTranslations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollectionTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollectionTranslationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CollectionTranslationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollectionTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollectionTranslationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CollectionTranslationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CollectionTranslation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CollectionTranslationExists to return true, but got false.")
	}
}

func testCollectionTranslationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	collectionTranslationFound, err := FindCollectionTranslation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if collectionTranslationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCollectionTranslationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CollectionTranslations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCollectionTranslationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CollectionTranslations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCollectionTranslationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	collectionTranslationOne := &CollectionTranslation{}
	collectionTranslationTwo := &CollectionTranslation{}
	if err = randomize.Struct(seed, collectionTranslationOne, collectionTranslationDBTypes, false, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}
	if err = randomize.Struct(seed, collectionTranslationTwo, collectionTranslationDBTypes, false, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = collectionTranslationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = collectionTranslationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CollectionTranslations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCollectionTranslationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	collectionTranslationOne := &CollectionTranslation{}
	collectionTranslationTwo := &CollectionTranslation{}
	if err = randomize.Struct(seed, collectionTranslationOne, collectionTranslationDBTypes, false, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}
	if err = randomize.Struct(seed, collectionTranslationTwo, collectionTranslationDBTypes, false, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = collectionTranslationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = collectionTranslationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollectionTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func collectionTranslationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CollectionTranslation) error {
	*o = CollectionTranslation{}
	return nil
}

func collectionTranslationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CollectionTranslation) error {
	*o = CollectionTranslation{}
	return nil
}

func collectionTranslationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CollectionTranslation) error {
	*o = CollectionTranslation{}
	return nil
}

func collectionTranslationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CollectionTranslation) error {
	*o = CollectionTranslation{}
	return nil
}

func collectionTranslationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CollectionTranslation) error {
	*o = CollectionTranslation{}
	return nil
}

func collectionTranslationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CollectionTranslation) error {
	*o = CollectionTranslation{}
	return nil
}

func collectionTranslationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CollectionTranslation) error {
	*o = CollectionTranslation{}
	return nil
}

func collectionTranslationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CollectionTranslation) error {
	*o = CollectionTranslation{}
	return nil
}

func collectionTranslationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CollectionTranslation) error {
	*o = CollectionTranslation{}
	return nil
}

func testCollectionTranslationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CollectionTranslation{}
	o := &CollectionTranslation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation object: %s", err)
	}

	AddCollectionTranslationHook(boil.BeforeInsertHook, collectionTranslationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	collectionTranslationBeforeInsertHooks = []CollectionTranslationHook{}

	AddCollectionTranslationHook(boil.AfterInsertHook, collectionTranslationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	collectionTranslationAfterInsertHooks = []CollectionTranslationHook{}

	AddCollectionTranslationHook(boil.AfterSelectHook, collectionTranslationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	collectionTranslationAfterSelectHooks = []CollectionTranslationHook{}

	AddCollectionTranslationHook(boil.BeforeUpdateHook, collectionTranslationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	collectionTranslationBeforeUpdateHooks = []CollectionTranslationHook{}

	AddCollectionTranslationHook(boil.AfterUpdateHook, collectionTranslationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	collectionTranslationAfterUpdateHooks = []CollectionTranslationHook{}

	AddCollectionTranslationHook(boil.BeforeDeleteHook, collectionTranslationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	collectionTranslationBeforeDeleteHooks = []CollectionTranslationHook{}

	AddCollectionTranslationHook(boil.AfterDeleteHook, collectionTranslationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	collectionTranslationAfterDeleteHooks = []CollectionTranslationHook{}

	AddCollectionTranslationHook(boil.BeforeUpsertHook, collectionTranslationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	collectionTranslationBeforeUpsertHooks = []CollectionTranslationHook{}

	AddCollectionTranslationHook(boil.AfterUpsertHook, collectionTranslationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	collectionTranslationAfterUpsertHooks = []CollectionTranslationHook{}
}

func testCollectionTranslationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollectionTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCollectionTranslationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(collectionTranslationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CollectionTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCollectionTranslationToOneCollectionUsingCollection(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CollectionTranslation
	var foreign Collection

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, collectionTranslationDBTypes, false, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, collectionDBTypes, false, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CollectionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Collection().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCollectionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CollectionTranslationSlice{&local}
	if err = local.L.LoadCollection(ctx, tx, false, (*[]*CollectionTranslation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Collection == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Collection = nil
	if err = local.L.LoadCollection(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Collection == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCollectionTranslationToOneSetOpCollectionUsingCollection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollectionTranslation
	var b, c Collection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionTranslationDBTypes, false, strmangle.SetComplement(collectionTranslationPrimaryKeyColumns, collectionTranslationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Collection{&b, &c} {
		err = a.SetCollection(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Collection != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CollectionTranslations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CollectionID != x.ID {
			t.Error("foreign key was wrong value", a.CollectionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CollectionID))
		reflect.Indirect(reflect.ValueOf(&a.CollectionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CollectionID != x.ID {
			t.Error("foreign key was wrong value", a.CollectionID, x.ID)
		}
	}
}

func testCollectionTranslationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCollectionTranslationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CollectionTranslationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCollectionTranslationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CollectionTranslations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	collectionTranslationDBTypes = map[string]string{`ID`: `uuid`, `LanguageCode`: `character varying`, `CollectionID`: `uuid`, `Name`: `character varying`, `Description`: `text`, `SeoTitle`: `character varying`, `SeoDescription`: `character varying`}
	_                            = bytes.MinRead
)

func testCollectionTranslationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(collectionTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(collectionTranslationAllColumns) == len(collectionTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollectionTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCollectionTranslationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(collectionTranslationAllColumns) == len(collectionTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CollectionTranslation{}
	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollectionTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, collectionTranslationDBTypes, true, collectionTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(collectionTranslationAllColumns, collectionTranslationPrimaryKeyColumns) {
		fields = collectionTranslationAllColumns
	} else {
		fields = strmangle.SetComplement(
			collectionTranslationAllColumns,
			collectionTranslationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CollectionTranslationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCollectionTranslationsUpsert(t *testing.T) {
	t.Parallel()

	if len(collectionTranslationAllColumns) == len(collectionTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CollectionTranslation{}
	if err = randomize.Struct(seed, &o, collectionTranslationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CollectionTranslation: %s", err)
	}

	count, err := CollectionTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, collectionTranslationDBTypes, false, collectionTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollectionTranslation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CollectionTranslation: %s", err)
	}

	count, err = CollectionTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
