// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Category is an object representing the database table.
type Category struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name               null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Slug               null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	Description        null.JSON   `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Parentid           null.String `boil:"parentid" json:"parentid,omitempty" toml:"parentid" yaml:"parentid,omitempty"`
	Level              null.Int16  `boil:"level" json:"level,omitempty" toml:"level" yaml:"level,omitempty"`
	Backgroundimage    null.String `boil:"backgroundimage" json:"backgroundimage,omitempty" toml:"backgroundimage" yaml:"backgroundimage,omitempty"`
	Backgroundimagealt null.String `boil:"backgroundimagealt" json:"backgroundimagealt,omitempty" toml:"backgroundimagealt" yaml:"backgroundimagealt,omitempty"`
	Images             null.String `boil:"images" json:"images,omitempty" toml:"images" yaml:"images,omitempty"`
	Seotitle           null.String `boil:"seotitle" json:"seotitle,omitempty" toml:"seotitle" yaml:"seotitle,omitempty"`
	Seodescription     null.String `boil:"seodescription" json:"seodescription,omitempty" toml:"seodescription" yaml:"seodescription,omitempty"`
	Nametranslation    null.JSON   `boil:"nametranslation" json:"nametranslation,omitempty" toml:"nametranslation" yaml:"nametranslation,omitempty"`
	Metadata           null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata    null.JSON   `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *categoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CategoryColumns = struct {
	ID                 string
	Name               string
	Slug               string
	Description        string
	Parentid           string
	Level              string
	Backgroundimage    string
	Backgroundimagealt string
	Images             string
	Seotitle           string
	Seodescription     string
	Nametranslation    string
	Metadata           string
	Privatemetadata    string
}{
	ID:                 "id",
	Name:               "name",
	Slug:               "slug",
	Description:        "description",
	Parentid:           "parentid",
	Level:              "level",
	Backgroundimage:    "backgroundimage",
	Backgroundimagealt: "backgroundimagealt",
	Images:             "images",
	Seotitle:           "seotitle",
	Seodescription:     "seodescription",
	Nametranslation:    "nametranslation",
	Metadata:           "metadata",
	Privatemetadata:    "privatemetadata",
}

var CategoryTableColumns = struct {
	ID                 string
	Name               string
	Slug               string
	Description        string
	Parentid           string
	Level              string
	Backgroundimage    string
	Backgroundimagealt string
	Images             string
	Seotitle           string
	Seodescription     string
	Nametranslation    string
	Metadata           string
	Privatemetadata    string
}{
	ID:                 "categories.id",
	Name:               "categories.name",
	Slug:               "categories.slug",
	Description:        "categories.description",
	Parentid:           "categories.parentid",
	Level:              "categories.level",
	Backgroundimage:    "categories.backgroundimage",
	Backgroundimagealt: "categories.backgroundimagealt",
	Images:             "categories.images",
	Seotitle:           "categories.seotitle",
	Seodescription:     "categories.seodescription",
	Nametranslation:    "categories.nametranslation",
	Metadata:           "categories.metadata",
	Privatemetadata:    "categories.privatemetadata",
}

// Generated where

type whereHelpernull_Int16 struct{ field string }

func (w whereHelpernull_Int16) EQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int16) NEQ(x null.Int16) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int16) LT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int16) LTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int16) GT(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int16) GTE(x null.Int16) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int16) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int16) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CategoryWhere = struct {
	ID                 whereHelperstring
	Name               whereHelpernull_String
	Slug               whereHelpernull_String
	Description        whereHelpernull_JSON
	Parentid           whereHelpernull_String
	Level              whereHelpernull_Int16
	Backgroundimage    whereHelpernull_String
	Backgroundimagealt whereHelpernull_String
	Images             whereHelpernull_String
	Seotitle           whereHelpernull_String
	Seodescription     whereHelpernull_String
	Nametranslation    whereHelpernull_JSON
	Metadata           whereHelpernull_JSON
	Privatemetadata    whereHelpernull_JSON
}{
	ID:                 whereHelperstring{field: "\"categories\".\"id\""},
	Name:               whereHelpernull_String{field: "\"categories\".\"name\""},
	Slug:               whereHelpernull_String{field: "\"categories\".\"slug\""},
	Description:        whereHelpernull_JSON{field: "\"categories\".\"description\""},
	Parentid:           whereHelpernull_String{field: "\"categories\".\"parentid\""},
	Level:              whereHelpernull_Int16{field: "\"categories\".\"level\""},
	Backgroundimage:    whereHelpernull_String{field: "\"categories\".\"backgroundimage\""},
	Backgroundimagealt: whereHelpernull_String{field: "\"categories\".\"backgroundimagealt\""},
	Images:             whereHelpernull_String{field: "\"categories\".\"images\""},
	Seotitle:           whereHelpernull_String{field: "\"categories\".\"seotitle\""},
	Seodescription:     whereHelpernull_String{field: "\"categories\".\"seodescription\""},
	Nametranslation:    whereHelpernull_JSON{field: "\"categories\".\"nametranslation\""},
	Metadata:           whereHelpernull_JSON{field: "\"categories\".\"metadata\""},
	Privatemetadata:    whereHelpernull_JSON{field: "\"categories\".\"privatemetadata\""},
}

// CategoryRels is where relationship names are stored.
var CategoryRels = struct {
	ParentidCategory            string
	ParentidCategories          string
	CategoryidMenuItems         string
	CategoryidSaleCategories    string
	CategoryidVoucherCategories string
}{
	ParentidCategory:            "ParentidCategory",
	ParentidCategories:          "ParentidCategories",
	CategoryidMenuItems:         "CategoryidMenuItems",
	CategoryidSaleCategories:    "CategoryidSaleCategories",
	CategoryidVoucherCategories: "CategoryidVoucherCategories",
}

// categoryR is where relationships are stored.
type categoryR struct {
	ParentidCategory            *Category            `boil:"ParentidCategory" json:"ParentidCategory" toml:"ParentidCategory" yaml:"ParentidCategory"`
	ParentidCategories          CategorySlice        `boil:"ParentidCategories" json:"ParentidCategories" toml:"ParentidCategories" yaml:"ParentidCategories"`
	CategoryidMenuItems         MenuItemSlice        `boil:"CategoryidMenuItems" json:"CategoryidMenuItems" toml:"CategoryidMenuItems" yaml:"CategoryidMenuItems"`
	CategoryidSaleCategories    SaleCategorySlice    `boil:"CategoryidSaleCategories" json:"CategoryidSaleCategories" toml:"CategoryidSaleCategories" yaml:"CategoryidSaleCategories"`
	CategoryidVoucherCategories VoucherCategorySlice `boil:"CategoryidVoucherCategories" json:"CategoryidVoucherCategories" toml:"CategoryidVoucherCategories" yaml:"CategoryidVoucherCategories"`
}

// NewStruct creates a new relationship struct
func (*categoryR) NewStruct() *categoryR {
	return &categoryR{}
}

func (r *categoryR) GetParentidCategory() *Category {
	if r == nil {
		return nil
	}
	return r.ParentidCategory
}

func (r *categoryR) GetParentidCategories() CategorySlice {
	if r == nil {
		return nil
	}
	return r.ParentidCategories
}

func (r *categoryR) GetCategoryidMenuItems() MenuItemSlice {
	if r == nil {
		return nil
	}
	return r.CategoryidMenuItems
}

func (r *categoryR) GetCategoryidSaleCategories() SaleCategorySlice {
	if r == nil {
		return nil
	}
	return r.CategoryidSaleCategories
}

func (r *categoryR) GetCategoryidVoucherCategories() VoucherCategorySlice {
	if r == nil {
		return nil
	}
	return r.CategoryidVoucherCategories
}

// categoryL is where Load methods for each relationship are stored.
type categoryL struct{}

var (
	categoryAllColumns            = []string{"id", "name", "slug", "description", "parentid", "level", "backgroundimage", "backgroundimagealt", "images", "seotitle", "seodescription", "nametranslation", "metadata", "privatemetadata"}
	categoryColumnsWithoutDefault = []string{"id"}
	categoryColumnsWithDefault    = []string{"name", "slug", "description", "parentid", "level", "backgroundimage", "backgroundimagealt", "images", "seotitle", "seodescription", "nametranslation", "metadata", "privatemetadata"}
	categoryPrimaryKeyColumns     = []string{"id"}
	categoryGeneratedColumns      = []string{}
)

type (
	// CategorySlice is an alias for a slice of pointers to Category.
	// This should almost always be used instead of []Category.
	CategorySlice []*Category
	// CategoryHook is the signature for custom Category hook methods
	CategoryHook func(context.Context, boil.ContextExecutor, *Category) error

	categoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoryType                 = reflect.TypeOf(&Category{})
	categoryMapping              = queries.MakeStructMapping(categoryType)
	categoryPrimaryKeyMapping, _ = queries.BindMapping(categoryType, categoryMapping, categoryPrimaryKeyColumns)
	categoryInsertCacheMut       sync.RWMutex
	categoryInsertCache          = make(map[string]insertCache)
	categoryUpdateCacheMut       sync.RWMutex
	categoryUpdateCache          = make(map[string]updateCache)
	categoryUpsertCacheMut       sync.RWMutex
	categoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var categoryAfterSelectHooks []CategoryHook

var categoryBeforeInsertHooks []CategoryHook
var categoryAfterInsertHooks []CategoryHook

var categoryBeforeUpdateHooks []CategoryHook
var categoryAfterUpdateHooks []CategoryHook

var categoryBeforeDeleteHooks []CategoryHook
var categoryAfterDeleteHooks []CategoryHook

var categoryBeforeUpsertHooks []CategoryHook
var categoryAfterUpsertHooks []CategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Category) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Category) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Category) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Category) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Category) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Category) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Category) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Category) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Category) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range categoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCategoryHook registers your hook function for all future operations.
func AddCategoryHook(hookPoint boil.HookPoint, categoryHook CategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		categoryAfterSelectHooks = append(categoryAfterSelectHooks, categoryHook)
	case boil.BeforeInsertHook:
		categoryBeforeInsertHooks = append(categoryBeforeInsertHooks, categoryHook)
	case boil.AfterInsertHook:
		categoryAfterInsertHooks = append(categoryAfterInsertHooks, categoryHook)
	case boil.BeforeUpdateHook:
		categoryBeforeUpdateHooks = append(categoryBeforeUpdateHooks, categoryHook)
	case boil.AfterUpdateHook:
		categoryAfterUpdateHooks = append(categoryAfterUpdateHooks, categoryHook)
	case boil.BeforeDeleteHook:
		categoryBeforeDeleteHooks = append(categoryBeforeDeleteHooks, categoryHook)
	case boil.AfterDeleteHook:
		categoryAfterDeleteHooks = append(categoryAfterDeleteHooks, categoryHook)
	case boil.BeforeUpsertHook:
		categoryBeforeUpsertHooks = append(categoryBeforeUpsertHooks, categoryHook)
	case boil.AfterUpsertHook:
		categoryAfterUpsertHooks = append(categoryAfterUpsertHooks, categoryHook)
	}
}

// One returns a single category record from the query.
func (q categoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Category, error) {
	o := &Category{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Category records from the query.
func (q categoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (CategorySlice, error) {
	var o []*Category

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Category slice")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Category records in the query.
func (q categoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q categoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if categories exists")
	}

	return count > 0, nil
}

// ParentidCategory pointed to by the foreign key.
func (o *Category) ParentidCategory(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Parentid),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// ParentidCategories retrieves all the category's Categories with an executor via parentid column.
func (o *Category) ParentidCategories(mods ...qm.QueryMod) categoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"categories\".\"parentid\"=?", o.ID),
	)

	return Categories(queryMods...)
}

// CategoryidMenuItems retrieves all the menu_item's MenuItems with an executor via categoryid column.
func (o *Category) CategoryidMenuItems(mods ...qm.QueryMod) menuItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"menu_items\".\"categoryid\"=?", o.ID),
	)

	return MenuItems(queryMods...)
}

// CategoryidSaleCategories retrieves all the sale_category's SaleCategories with an executor via categoryid column.
func (o *Category) CategoryidSaleCategories(mods ...qm.QueryMod) saleCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_categories\".\"categoryid\"=?", o.ID),
	)

	return SaleCategories(queryMods...)
}

// CategoryidVoucherCategories retrieves all the voucher_category's VoucherCategories with an executor via categoryid column.
func (o *Category) CategoryidVoucherCategories(mods ...qm.QueryMod) voucherCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_categories\".\"categoryid\"=?", o.ID),
	)

	return VoucherCategories(queryMods...)
}

// LoadParentidCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (categoryL) LoadParentidCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategory interface{}, mods queries.Applicator) error {
	var slice []*Category
	var object *Category

	if singular {
		var ok bool
		object, ok = maybeCategory.(*Category)
		if !ok {
			object = new(Category)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategory))
			}
		}
	} else {
		s, ok := maybeCategory.(*[]*Category)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		if !queries.IsNil(object.Parentid) {
			args = append(args, object.Parentid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Parentid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Parentid) {
				args = append(args, obj.Parentid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ParentidCategory = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.ParentidCategories = append(foreign.R.ParentidCategories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Parentid, foreign.ID) {
				local.R.ParentidCategory = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.ParentidCategories = append(foreign.R.ParentidCategories, local)
				break
			}
		}
	}

	return nil
}

// LoadParentidCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoryL) LoadParentidCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategory interface{}, mods queries.Applicator) error {
	var slice []*Category
	var object *Category

	if singular {
		var ok bool
		object, ok = maybeCategory.(*Category)
		if !ok {
			object = new(Category)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategory))
			}
		}
	} else {
		s, ok := maybeCategory.(*[]*Category)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.parentid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load categories")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentidCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoryR{}
			}
			foreign.R.ParentidCategory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Parentid) {
				local.R.ParentidCategories = append(local.R.ParentidCategories, foreign)
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.ParentidCategory = local
				break
			}
		}
	}

	return nil
}

// LoadCategoryidMenuItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoryL) LoadCategoryidMenuItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategory interface{}, mods queries.Applicator) error {
	var slice []*Category
	var object *Category

	if singular {
		var ok bool
		object, ok = maybeCategory.(*Category)
		if !ok {
			object = new(Category)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategory))
			}
		}
	} else {
		s, ok := maybeCategory.(*[]*Category)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menu_items`),
		qm.WhereIn(`menu_items.categoryid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load menu_items")
	}

	var resultSlice []*MenuItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice menu_items")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on menu_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_items")
	}

	if len(menuItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryidMenuItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &menuItemR{}
			}
			foreign.R.CategoryidCategory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Categoryid) {
				local.R.CategoryidMenuItems = append(local.R.CategoryidMenuItems, foreign)
				if foreign.R == nil {
					foreign.R = &menuItemR{}
				}
				foreign.R.CategoryidCategory = local
				break
			}
		}
	}

	return nil
}

// LoadCategoryidSaleCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoryL) LoadCategoryidSaleCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategory interface{}, mods queries.Applicator) error {
	var slice []*Category
	var object *Category

	if singular {
		var ok bool
		object, ok = maybeCategory.(*Category)
		if !ok {
			object = new(Category)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategory))
			}
		}
	} else {
		s, ok := maybeCategory.(*[]*Category)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sale_categories`),
		qm.WhereIn(`sale_categories.categoryid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_categories")
	}

	var resultSlice []*SaleCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_categories")
	}

	if len(saleCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryidSaleCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &saleCategoryR{}
			}
			foreign.R.CategoryidCategory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Categoryid) {
				local.R.CategoryidSaleCategories = append(local.R.CategoryidSaleCategories, foreign)
				if foreign.R == nil {
					foreign.R = &saleCategoryR{}
				}
				foreign.R.CategoryidCategory = local
				break
			}
		}
	}

	return nil
}

// LoadCategoryidVoucherCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (categoryL) LoadCategoryidVoucherCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategory interface{}, mods queries.Applicator) error {
	var slice []*Category
	var object *Category

	if singular {
		var ok bool
		object, ok = maybeCategory.(*Category)
		if !ok {
			object = new(Category)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategory))
			}
		}
	} else {
		s, ok := maybeCategory.(*[]*Category)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &categoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voucher_categories`),
		qm.WhereIn(`voucher_categories.categoryid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_categories")
	}

	var resultSlice []*VoucherCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_categories")
	}

	if len(voucherCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CategoryidVoucherCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherCategoryR{}
			}
			foreign.R.CategoryidCategory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Categoryid) {
				local.R.CategoryidVoucherCategories = append(local.R.CategoryidVoucherCategories, foreign)
				if foreign.R == nil {
					foreign.R = &voucherCategoryR{}
				}
				foreign.R.CategoryidCategory = local
				break
			}
		}
	}

	return nil
}

// SetParentidCategory of the category to the related item.
// Sets o.R.ParentidCategory to related.
// Adds o to related.R.ParentidCategories.
func (o *Category) SetParentidCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parentid"}),
		strmangle.WhereClause("\"", "\"", 2, categoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Parentid, related.ID)
	if o.R == nil {
		o.R = &categoryR{
			ParentidCategory: related,
		}
	} else {
		o.R.ParentidCategory = related
	}

	if related.R == nil {
		related.R = &categoryR{
			ParentidCategories: CategorySlice{o},
		}
	} else {
		related.R.ParentidCategories = append(related.R.ParentidCategories, o)
	}

	return nil
}

// RemoveParentidCategory relationship.
// Sets o.R.ParentidCategory to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Category) RemoveParentidCategory(ctx context.Context, exec boil.ContextExecutor, related *Category) error {
	var err error

	queries.SetScanner(&o.Parentid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("parentid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ParentidCategory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentidCategories {
		if queries.Equal(o.Parentid, ri.Parentid) {
			continue
		}

		ln := len(related.R.ParentidCategories)
		if ln > 1 && i < ln-1 {
			related.R.ParentidCategories[i] = related.R.ParentidCategories[ln-1]
		}
		related.R.ParentidCategories = related.R.ParentidCategories[:ln-1]
		break
	}
	return nil
}

// AddParentidCategories adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.ParentidCategories.
// Sets related.R.ParentidCategory appropriately.
func (o *Category) AddParentidCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Category) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Parentid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parentid"}),
				strmangle.WhereClause("\"", "\"", 2, categoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Parentid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &categoryR{
			ParentidCategories: related,
		}
	} else {
		o.R.ParentidCategories = append(o.R.ParentidCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoryR{
				ParentidCategory: o,
			}
		} else {
			rel.R.ParentidCategory = o
		}
	}
	return nil
}

// SetParentidCategories removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentidCategory's ParentidCategories accordingly.
// Replaces o.R.ParentidCategories with related.
// Sets related.R.ParentidCategory's ParentidCategories accordingly.
func (o *Category) SetParentidCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Category) error {
	query := "update \"categories\" set \"parentid\" = null where \"parentid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentidCategories {
			queries.SetScanner(&rel.Parentid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ParentidCategory = nil
		}
		o.R.ParentidCategories = nil
	}

	return o.AddParentidCategories(ctx, exec, insert, related...)
}

// RemoveParentidCategories relationships from objects passed in.
// Removes related items from R.ParentidCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentidCategory.
func (o *Category) RemoveParentidCategories(ctx context.Context, exec boil.ContextExecutor, related ...*Category) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Parentid, nil)
		if rel.R != nil {
			rel.R.ParentidCategory = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("parentid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentidCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentidCategories)
			if ln > 1 && i < ln-1 {
				o.R.ParentidCategories[i] = o.R.ParentidCategories[ln-1]
			}
			o.R.ParentidCategories = o.R.ParentidCategories[:ln-1]
			break
		}
	}

	return nil
}

// AddCategoryidMenuItems adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.CategoryidMenuItems.
// Sets related.R.CategoryidCategory appropriately.
func (o *Category) AddCategoryidMenuItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItem) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Categoryid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"menu_items\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"categoryid"}),
				strmangle.WhereClause("\"", "\"", 2, menuItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Categoryid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &categoryR{
			CategoryidMenuItems: related,
		}
	} else {
		o.R.CategoryidMenuItems = append(o.R.CategoryidMenuItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &menuItemR{
				CategoryidCategory: o,
			}
		} else {
			rel.R.CategoryidCategory = o
		}
	}
	return nil
}

// SetCategoryidMenuItems removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CategoryidCategory's CategoryidMenuItems accordingly.
// Replaces o.R.CategoryidMenuItems with related.
// Sets related.R.CategoryidCategory's CategoryidMenuItems accordingly.
func (o *Category) SetCategoryidMenuItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MenuItem) error {
	query := "update \"menu_items\" set \"categoryid\" = null where \"categoryid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CategoryidMenuItems {
			queries.SetScanner(&rel.Categoryid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CategoryidCategory = nil
		}
		o.R.CategoryidMenuItems = nil
	}

	return o.AddCategoryidMenuItems(ctx, exec, insert, related...)
}

// RemoveCategoryidMenuItems relationships from objects passed in.
// Removes related items from R.CategoryidMenuItems (uses pointer comparison, removal does not keep order)
// Sets related.R.CategoryidCategory.
func (o *Category) RemoveCategoryidMenuItems(ctx context.Context, exec boil.ContextExecutor, related ...*MenuItem) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Categoryid, nil)
		if rel.R != nil {
			rel.R.CategoryidCategory = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("categoryid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CategoryidMenuItems {
			if rel != ri {
				continue
			}

			ln := len(o.R.CategoryidMenuItems)
			if ln > 1 && i < ln-1 {
				o.R.CategoryidMenuItems[i] = o.R.CategoryidMenuItems[ln-1]
			}
			o.R.CategoryidMenuItems = o.R.CategoryidMenuItems[:ln-1]
			break
		}
	}

	return nil
}

// AddCategoryidSaleCategories adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.CategoryidSaleCategories.
// Sets related.R.CategoryidCategory appropriately.
func (o *Category) AddCategoryidSaleCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Categoryid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"categoryid"}),
				strmangle.WhereClause("\"", "\"", 2, saleCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Categoryid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &categoryR{
			CategoryidSaleCategories: related,
		}
	} else {
		o.R.CategoryidSaleCategories = append(o.R.CategoryidSaleCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &saleCategoryR{
				CategoryidCategory: o,
			}
		} else {
			rel.R.CategoryidCategory = o
		}
	}
	return nil
}

// SetCategoryidSaleCategories removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CategoryidCategory's CategoryidSaleCategories accordingly.
// Replaces o.R.CategoryidSaleCategories with related.
// Sets related.R.CategoryidCategory's CategoryidSaleCategories accordingly.
func (o *Category) SetCategoryidSaleCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleCategory) error {
	query := "update \"sale_categories\" set \"categoryid\" = null where \"categoryid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CategoryidSaleCategories {
			queries.SetScanner(&rel.Categoryid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CategoryidCategory = nil
		}
		o.R.CategoryidSaleCategories = nil
	}

	return o.AddCategoryidSaleCategories(ctx, exec, insert, related...)
}

// RemoveCategoryidSaleCategories relationships from objects passed in.
// Removes related items from R.CategoryidSaleCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.CategoryidCategory.
func (o *Category) RemoveCategoryidSaleCategories(ctx context.Context, exec boil.ContextExecutor, related ...*SaleCategory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Categoryid, nil)
		if rel.R != nil {
			rel.R.CategoryidCategory = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("categoryid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CategoryidSaleCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.CategoryidSaleCategories)
			if ln > 1 && i < ln-1 {
				o.R.CategoryidSaleCategories[i] = o.R.CategoryidSaleCategories[ln-1]
			}
			o.R.CategoryidSaleCategories = o.R.CategoryidSaleCategories[:ln-1]
			break
		}
	}

	return nil
}

// AddCategoryidVoucherCategories adds the given related objects to the existing relationships
// of the category, optionally inserting them as new records.
// Appends related to o.R.CategoryidVoucherCategories.
// Sets related.R.CategoryidCategory appropriately.
func (o *Category) AddCategoryidVoucherCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Categoryid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"categoryid"}),
				strmangle.WhereClause("\"", "\"", 2, voucherCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Categoryid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &categoryR{
			CategoryidVoucherCategories: related,
		}
	} else {
		o.R.CategoryidVoucherCategories = append(o.R.CategoryidVoucherCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherCategoryR{
				CategoryidCategory: o,
			}
		} else {
			rel.R.CategoryidCategory = o
		}
	}
	return nil
}

// SetCategoryidVoucherCategories removes all previously related items of the
// category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CategoryidCategory's CategoryidVoucherCategories accordingly.
// Replaces o.R.CategoryidVoucherCategories with related.
// Sets related.R.CategoryidCategory's CategoryidVoucherCategories accordingly.
func (o *Category) SetCategoryidVoucherCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherCategory) error {
	query := "update \"voucher_categories\" set \"categoryid\" = null where \"categoryid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CategoryidVoucherCategories {
			queries.SetScanner(&rel.Categoryid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CategoryidCategory = nil
		}
		o.R.CategoryidVoucherCategories = nil
	}

	return o.AddCategoryidVoucherCategories(ctx, exec, insert, related...)
}

// RemoveCategoryidVoucherCategories relationships from objects passed in.
// Removes related items from R.CategoryidVoucherCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.CategoryidCategory.
func (o *Category) RemoveCategoryidVoucherCategories(ctx context.Context, exec boil.ContextExecutor, related ...*VoucherCategory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Categoryid, nil)
		if rel.R != nil {
			rel.R.CategoryidCategory = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("categoryid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CategoryidVoucherCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.CategoryidVoucherCategories)
			if ln > 1 && i < ln-1 {
				o.R.CategoryidVoucherCategories[i] = o.R.CategoryidVoucherCategories[ln-1]
			}
			o.R.CategoryidVoucherCategories = o.R.CategoryidVoucherCategories[:ln-1]
			break
		}
	}

	return nil
}

// Categories retrieves all the records using an executor.
func Categories(mods ...qm.QueryMod) categoryQuery {
	mods = append(mods, qm.From("\"categories\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"categories\".*"})
	}

	return categoryQuery{q}
}

// FindCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Category, error) {
	categoryObj := &Category{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, categoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from categories")
	}

	if err = categoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return categoryObj, err
	}

	return categoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Category) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no categories provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	categoryInsertCacheMut.RLock()
	cache, cached := categoryInsertCache[key]
	categoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			categoryAllColumns,
			categoryColumnsWithDefault,
			categoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(categoryType, categoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoryType, categoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into categories")
	}

	if !cached {
		categoryInsertCacheMut.Lock()
		categoryInsertCache[key] = cache
		categoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Category.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Category) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	categoryUpdateCacheMut.RLock()
	cache, cached := categoryUpdateCache[key]
	categoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			categoryAllColumns,
			categoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, categoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoryType, categoryMapping, append(wl, categoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for categories")
	}

	if !cached {
		categoryUpdateCacheMut.Lock()
		categoryUpdateCache[key] = cache
		categoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q categoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, categoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in category slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all category")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Category) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no categories provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(categoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoryUpsertCacheMut.RLock()
	cache, cached := categoryUpsertCache[key]
	categoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			categoryAllColumns,
			categoryColumnsWithDefault,
			categoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			categoryAllColumns,
			categoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert categories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(categoryPrimaryKeyColumns))
			copy(conflict, categoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(categoryType, categoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoryType, categoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert categories")
	}

	if !cached {
		categoryUpsertCacheMut.Lock()
		categoryUpsertCache[key] = cache
		categoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Category record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Category) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Category provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoryPrimaryKeyMapping)
	sql := "DELETE FROM \"categories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q categoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no categoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(categoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from category slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for categories")
	}

	if len(categoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Category) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"categories\".* FROM \"categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CategorySlice")
	}

	*o = slice

	return nil
}

// CategoryExists checks if the Category row exists.
func CategoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"categories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if categories exists")
	}

	return exists, nil
}

// Exists checks if the Category row exists.
func (o *Category) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CategoryExists(ctx, exec, o.ID)
}
