// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssignedVariantAttributeValue is an object representing the database table.
type AssignedVariantAttributeValue struct {
	ID           string   `boil:"id" json:"id" toml:"id" yaml:"id"`
	ValueID      string   `boil:"value_id" json:"value_id" toml:"value_id" yaml:"value_id"`
	AssignmentID string   `boil:"assignment_id" json:"assignment_id" toml:"assignment_id" yaml:"assignment_id"`
	SortOrder    null.Int `boil:"sort_order" json:"sort_order,omitempty" toml:"sort_order" yaml:"sort_order,omitempty"`

	R *assignedVariantAttributeValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignedVariantAttributeValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignedVariantAttributeValueColumns = struct {
	ID           string
	ValueID      string
	AssignmentID string
	SortOrder    string
}{
	ID:           "id",
	ValueID:      "value_id",
	AssignmentID: "assignment_id",
	SortOrder:    "sort_order",
}

var AssignedVariantAttributeValueTableColumns = struct {
	ID           string
	ValueID      string
	AssignmentID string
	SortOrder    string
}{
	ID:           "assigned_variant_attribute_values.id",
	ValueID:      "assigned_variant_attribute_values.value_id",
	AssignmentID: "assigned_variant_attribute_values.assignment_id",
	SortOrder:    "assigned_variant_attribute_values.sort_order",
}

// Generated where

var AssignedVariantAttributeValueWhere = struct {
	ID           whereHelperstring
	ValueID      whereHelperstring
	AssignmentID whereHelperstring
	SortOrder    whereHelpernull_Int
}{
	ID:           whereHelperstring{field: "\"assigned_variant_attribute_values\".\"id\""},
	ValueID:      whereHelperstring{field: "\"assigned_variant_attribute_values\".\"value_id\""},
	AssignmentID: whereHelperstring{field: "\"assigned_variant_attribute_values\".\"assignment_id\""},
	SortOrder:    whereHelpernull_Int{field: "\"assigned_variant_attribute_values\".\"sort_order\""},
}

// AssignedVariantAttributeValueRels is where relationship names are stored.
var AssignedVariantAttributeValueRels = struct {
	Assignment string
	Value      string
}{
	Assignment: "Assignment",
	Value:      "Value",
}

// assignedVariantAttributeValueR is where relationships are stored.
type assignedVariantAttributeValueR struct {
	Assignment *AssignedVariantAttribute `boil:"Assignment" json:"Assignment" toml:"Assignment" yaml:"Assignment"`
	Value      *AttributeValue           `boil:"Value" json:"Value" toml:"Value" yaml:"Value"`
}

// NewStruct creates a new relationship struct
func (*assignedVariantAttributeValueR) NewStruct() *assignedVariantAttributeValueR {
	return &assignedVariantAttributeValueR{}
}

func (r *assignedVariantAttributeValueR) GetAssignment() *AssignedVariantAttribute {
	if r == nil {
		return nil
	}
	return r.Assignment
}

func (r *assignedVariantAttributeValueR) GetValue() *AttributeValue {
	if r == nil {
		return nil
	}
	return r.Value
}

// assignedVariantAttributeValueL is where Load methods for each relationship are stored.
type assignedVariantAttributeValueL struct{}

var (
	assignedVariantAttributeValueAllColumns            = []string{"id", "value_id", "assignment_id", "sort_order"}
	assignedVariantAttributeValueColumnsWithoutDefault = []string{"value_id", "assignment_id"}
	assignedVariantAttributeValueColumnsWithDefault    = []string{"id", "sort_order"}
	assignedVariantAttributeValuePrimaryKeyColumns     = []string{"id"}
	assignedVariantAttributeValueGeneratedColumns      = []string{}
)

type (
	// AssignedVariantAttributeValueSlice is an alias for a slice of pointers to AssignedVariantAttributeValue.
	// This should almost always be used instead of []AssignedVariantAttributeValue.
	AssignedVariantAttributeValueSlice []*AssignedVariantAttributeValue
	// AssignedVariantAttributeValueHook is the signature for custom AssignedVariantAttributeValue hook methods
	AssignedVariantAttributeValueHook func(context.Context, boil.ContextExecutor, *AssignedVariantAttributeValue) error

	assignedVariantAttributeValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignedVariantAttributeValueType                 = reflect.TypeOf(&AssignedVariantAttributeValue{})
	assignedVariantAttributeValueMapping              = queries.MakeStructMapping(assignedVariantAttributeValueType)
	assignedVariantAttributeValuePrimaryKeyMapping, _ = queries.BindMapping(assignedVariantAttributeValueType, assignedVariantAttributeValueMapping, assignedVariantAttributeValuePrimaryKeyColumns)
	assignedVariantAttributeValueInsertCacheMut       sync.RWMutex
	assignedVariantAttributeValueInsertCache          = make(map[string]insertCache)
	assignedVariantAttributeValueUpdateCacheMut       sync.RWMutex
	assignedVariantAttributeValueUpdateCache          = make(map[string]updateCache)
	assignedVariantAttributeValueUpsertCacheMut       sync.RWMutex
	assignedVariantAttributeValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assignedVariantAttributeValueAfterSelectHooks []AssignedVariantAttributeValueHook

var assignedVariantAttributeValueBeforeInsertHooks []AssignedVariantAttributeValueHook
var assignedVariantAttributeValueAfterInsertHooks []AssignedVariantAttributeValueHook

var assignedVariantAttributeValueBeforeUpdateHooks []AssignedVariantAttributeValueHook
var assignedVariantAttributeValueAfterUpdateHooks []AssignedVariantAttributeValueHook

var assignedVariantAttributeValueBeforeDeleteHooks []AssignedVariantAttributeValueHook
var assignedVariantAttributeValueAfterDeleteHooks []AssignedVariantAttributeValueHook

var assignedVariantAttributeValueBeforeUpsertHooks []AssignedVariantAttributeValueHook
var assignedVariantAttributeValueAfterUpsertHooks []AssignedVariantAttributeValueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssignedVariantAttributeValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedVariantAttributeValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssignedVariantAttributeValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedVariantAttributeValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssignedVariantAttributeValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedVariantAttributeValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssignedVariantAttributeValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedVariantAttributeValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssignedVariantAttributeValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedVariantAttributeValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssignedVariantAttributeValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedVariantAttributeValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssignedVariantAttributeValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedVariantAttributeValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssignedVariantAttributeValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedVariantAttributeValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssignedVariantAttributeValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedVariantAttributeValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssignedVariantAttributeValueHook registers your hook function for all future operations.
func AddAssignedVariantAttributeValueHook(hookPoint boil.HookPoint, assignedVariantAttributeValueHook AssignedVariantAttributeValueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assignedVariantAttributeValueAfterSelectHooks = append(assignedVariantAttributeValueAfterSelectHooks, assignedVariantAttributeValueHook)
	case boil.BeforeInsertHook:
		assignedVariantAttributeValueBeforeInsertHooks = append(assignedVariantAttributeValueBeforeInsertHooks, assignedVariantAttributeValueHook)
	case boil.AfterInsertHook:
		assignedVariantAttributeValueAfterInsertHooks = append(assignedVariantAttributeValueAfterInsertHooks, assignedVariantAttributeValueHook)
	case boil.BeforeUpdateHook:
		assignedVariantAttributeValueBeforeUpdateHooks = append(assignedVariantAttributeValueBeforeUpdateHooks, assignedVariantAttributeValueHook)
	case boil.AfterUpdateHook:
		assignedVariantAttributeValueAfterUpdateHooks = append(assignedVariantAttributeValueAfterUpdateHooks, assignedVariantAttributeValueHook)
	case boil.BeforeDeleteHook:
		assignedVariantAttributeValueBeforeDeleteHooks = append(assignedVariantAttributeValueBeforeDeleteHooks, assignedVariantAttributeValueHook)
	case boil.AfterDeleteHook:
		assignedVariantAttributeValueAfterDeleteHooks = append(assignedVariantAttributeValueAfterDeleteHooks, assignedVariantAttributeValueHook)
	case boil.BeforeUpsertHook:
		assignedVariantAttributeValueBeforeUpsertHooks = append(assignedVariantAttributeValueBeforeUpsertHooks, assignedVariantAttributeValueHook)
	case boil.AfterUpsertHook:
		assignedVariantAttributeValueAfterUpsertHooks = append(assignedVariantAttributeValueAfterUpsertHooks, assignedVariantAttributeValueHook)
	}
}

// One returns a single assignedVariantAttributeValue record from the query.
func (q assignedVariantAttributeValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssignedVariantAttributeValue, error) {
	o := &AssignedVariantAttributeValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for assigned_variant_attribute_values")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssignedVariantAttributeValue records from the query.
func (q assignedVariantAttributeValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssignedVariantAttributeValueSlice, error) {
	var o []*AssignedVariantAttributeValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssignedVariantAttributeValue slice")
	}

	if len(assignedVariantAttributeValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssignedVariantAttributeValue records in the query.
func (q assignedVariantAttributeValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assigned_variant_attribute_values rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignedVariantAttributeValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assigned_variant_attribute_values exists")
	}

	return count > 0, nil
}

// Assignment pointed to by the foreign key.
func (o *AssignedVariantAttributeValue) Assignment(mods ...qm.QueryMod) assignedVariantAttributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AssignmentID),
	}

	queryMods = append(queryMods, mods...)

	return AssignedVariantAttributes(queryMods...)
}

// Value pointed to by the foreign key.
func (o *AssignedVariantAttributeValue) Value(mods ...qm.QueryMod) attributeValueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ValueID),
	}

	queryMods = append(queryMods, mods...)

	return AttributeValues(queryMods...)
}

// LoadAssignment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedVariantAttributeValueL) LoadAssignment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedVariantAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AssignedVariantAttributeValue
	var object *AssignedVariantAttributeValue

	if singular {
		var ok bool
		object, ok = maybeAssignedVariantAttributeValue.(*AssignedVariantAttributeValue)
		if !ok {
			object = new(AssignedVariantAttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedVariantAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedVariantAttributeValue))
			}
		}
	} else {
		s, ok := maybeAssignedVariantAttributeValue.(*[]*AssignedVariantAttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedVariantAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedVariantAttributeValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedVariantAttributeValueR{}
		}
		args = append(args, object.AssignmentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedVariantAttributeValueR{}
			}

			for _, a := range args {
				if a == obj.AssignmentID {
					continue Outer
				}
			}

			args = append(args, obj.AssignmentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_variant_attributes`),
		qm.WhereIn(`assigned_variant_attributes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssignedVariantAttribute")
	}

	var resultSlice []*AssignedVariantAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssignedVariantAttribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assigned_variant_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_variant_attributes")
	}

	if len(assignedVariantAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Assignment = foreign
		if foreign.R == nil {
			foreign.R = &assignedVariantAttributeR{}
		}
		foreign.R.AssignmentAssignedVariantAttributeValues = append(foreign.R.AssignmentAssignedVariantAttributeValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AssignmentID == foreign.ID {
				local.R.Assignment = foreign
				if foreign.R == nil {
					foreign.R = &assignedVariantAttributeR{}
				}
				foreign.R.AssignmentAssignedVariantAttributeValues = append(foreign.R.AssignmentAssignedVariantAttributeValues, local)
				break
			}
		}
	}

	return nil
}

// LoadValue allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedVariantAttributeValueL) LoadValue(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedVariantAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AssignedVariantAttributeValue
	var object *AssignedVariantAttributeValue

	if singular {
		var ok bool
		object, ok = maybeAssignedVariantAttributeValue.(*AssignedVariantAttributeValue)
		if !ok {
			object = new(AssignedVariantAttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedVariantAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedVariantAttributeValue))
			}
		}
	} else {
		s, ok := maybeAssignedVariantAttributeValue.(*[]*AssignedVariantAttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedVariantAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedVariantAttributeValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedVariantAttributeValueR{}
		}
		args = append(args, object.ValueID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedVariantAttributeValueR{}
			}

			for _, a := range args {
				if a == obj.ValueID {
					continue Outer
				}
			}

			args = append(args, obj.ValueID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attribute_values`),
		qm.WhereIn(`attribute_values.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AttributeValue")
	}

	var resultSlice []*AttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AttributeValue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_values")
	}

	if len(attributeValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Value = foreign
		if foreign.R == nil {
			foreign.R = &attributeValueR{}
		}
		foreign.R.ValueAssignedVariantAttributeValues = append(foreign.R.ValueAssignedVariantAttributeValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ValueID == foreign.ID {
				local.R.Value = foreign
				if foreign.R == nil {
					foreign.R = &attributeValueR{}
				}
				foreign.R.ValueAssignedVariantAttributeValues = append(foreign.R.ValueAssignedVariantAttributeValues, local)
				break
			}
		}
	}

	return nil
}

// SetAssignment of the assignedVariantAttributeValue to the related item.
// Sets o.R.Assignment to related.
// Adds o to related.R.AssignmentAssignedVariantAttributeValues.
func (o *AssignedVariantAttributeValue) SetAssignment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AssignedVariantAttribute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_variant_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"assignment_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedVariantAttributeValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AssignmentID = related.ID
	if o.R == nil {
		o.R = &assignedVariantAttributeValueR{
			Assignment: related,
		}
	} else {
		o.R.Assignment = related
	}

	if related.R == nil {
		related.R = &assignedVariantAttributeR{
			AssignmentAssignedVariantAttributeValues: AssignedVariantAttributeValueSlice{o},
		}
	} else {
		related.R.AssignmentAssignedVariantAttributeValues = append(related.R.AssignmentAssignedVariantAttributeValues, o)
	}

	return nil
}

// SetValue of the assignedVariantAttributeValue to the related item.
// Sets o.R.Value to related.
// Adds o to related.R.ValueAssignedVariantAttributeValues.
func (o *AssignedVariantAttributeValue) SetValue(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AttributeValue) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_variant_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"value_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignedVariantAttributeValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ValueID = related.ID
	if o.R == nil {
		o.R = &assignedVariantAttributeValueR{
			Value: related,
		}
	} else {
		o.R.Value = related
	}

	if related.R == nil {
		related.R = &attributeValueR{
			ValueAssignedVariantAttributeValues: AssignedVariantAttributeValueSlice{o},
		}
	} else {
		related.R.ValueAssignedVariantAttributeValues = append(related.R.ValueAssignedVariantAttributeValues, o)
	}

	return nil
}

// AssignedVariantAttributeValues retrieves all the records using an executor.
func AssignedVariantAttributeValues(mods ...qm.QueryMod) assignedVariantAttributeValueQuery {
	mods = append(mods, qm.From("\"assigned_variant_attribute_values\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assigned_variant_attribute_values\".*"})
	}

	return assignedVariantAttributeValueQuery{q}
}

// FindAssignedVariantAttributeValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignedVariantAttributeValue(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AssignedVariantAttributeValue, error) {
	assignedVariantAttributeValueObj := &AssignedVariantAttributeValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assigned_variant_attribute_values\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assignedVariantAttributeValueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from assigned_variant_attribute_values")
	}

	if err = assignedVariantAttributeValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assignedVariantAttributeValueObj, err
	}

	return assignedVariantAttributeValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssignedVariantAttributeValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assigned_variant_attribute_values provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedVariantAttributeValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignedVariantAttributeValueInsertCacheMut.RLock()
	cache, cached := assignedVariantAttributeValueInsertCache[key]
	assignedVariantAttributeValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignedVariantAttributeValueAllColumns,
			assignedVariantAttributeValueColumnsWithDefault,
			assignedVariantAttributeValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assignedVariantAttributeValueType, assignedVariantAttributeValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignedVariantAttributeValueType, assignedVariantAttributeValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assigned_variant_attribute_values\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assigned_variant_attribute_values\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assigned_variant_attribute_values")
	}

	if !cached {
		assignedVariantAttributeValueInsertCacheMut.Lock()
		assignedVariantAttributeValueInsertCache[key] = cache
		assignedVariantAttributeValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssignedVariantAttributeValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssignedVariantAttributeValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assignedVariantAttributeValueUpdateCacheMut.RLock()
	cache, cached := assignedVariantAttributeValueUpdateCache[key]
	assignedVariantAttributeValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignedVariantAttributeValueAllColumns,
			assignedVariantAttributeValuePrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assigned_variant_attribute_values, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assigned_variant_attribute_values\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignedVariantAttributeValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignedVariantAttributeValueType, assignedVariantAttributeValueMapping, append(wl, assignedVariantAttributeValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assigned_variant_attribute_values row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assigned_variant_attribute_values")
	}

	if !cached {
		assignedVariantAttributeValueUpdateCacheMut.Lock()
		assignedVariantAttributeValueUpdateCache[key] = cache
		assignedVariantAttributeValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assignedVariantAttributeValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assigned_variant_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assigned_variant_attribute_values")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignedVariantAttributeValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedVariantAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assigned_variant_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignedVariantAttributeValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assignedVariantAttributeValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assignedVariantAttributeValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssignedVariantAttributeValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assigned_variant_attribute_values provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedVariantAttributeValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignedVariantAttributeValueUpsertCacheMut.RLock()
	cache, cached := assignedVariantAttributeValueUpsertCache[key]
	assignedVariantAttributeValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assignedVariantAttributeValueAllColumns,
			assignedVariantAttributeValueColumnsWithDefault,
			assignedVariantAttributeValueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignedVariantAttributeValueAllColumns,
			assignedVariantAttributeValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assigned_variant_attribute_values, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assignedVariantAttributeValuePrimaryKeyColumns))
			copy(conflict, assignedVariantAttributeValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"assigned_variant_attribute_values\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assignedVariantAttributeValueType, assignedVariantAttributeValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignedVariantAttributeValueType, assignedVariantAttributeValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assigned_variant_attribute_values")
	}

	if !cached {
		assignedVariantAttributeValueUpsertCacheMut.Lock()
		assignedVariantAttributeValueUpsertCache[key] = cache
		assignedVariantAttributeValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssignedVariantAttributeValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssignedVariantAttributeValue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssignedVariantAttributeValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignedVariantAttributeValuePrimaryKeyMapping)
	sql := "DELETE FROM \"assigned_variant_attribute_values\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assigned_variant_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assigned_variant_attribute_values")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignedVariantAttributeValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assignedVariantAttributeValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assigned_variant_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assigned_variant_attribute_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignedVariantAttributeValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assignedVariantAttributeValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedVariantAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assigned_variant_attribute_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedVariantAttributeValuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignedVariantAttributeValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assigned_variant_attribute_values")
	}

	if len(assignedVariantAttributeValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssignedVariantAttributeValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssignedVariantAttributeValue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignedVariantAttributeValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignedVariantAttributeValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedVariantAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assigned_variant_attribute_values\".* FROM \"assigned_variant_attribute_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedVariantAttributeValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssignedVariantAttributeValueSlice")
	}

	*o = slice

	return nil
}

// AssignedVariantAttributeValueExists checks if the AssignedVariantAttributeValue row exists.
func AssignedVariantAttributeValueExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assigned_variant_attribute_values\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assigned_variant_attribute_values exists")
	}

	return exists, nil
}

// Exists checks if the AssignedVariantAttributeValue row exists.
func (o *AssignedVariantAttributeValue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssignedVariantAttributeValueExists(ctx, exec, o.ID)
}
