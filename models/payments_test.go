// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPayments(t *testing.T) {
	t.Parallel()

	query := Payments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPaymentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Payments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Payments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Payments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PaymentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Payments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPaymentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PaymentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Payment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PaymentExists to return true, but got false.")
	}
}

func testPaymentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	paymentFound, err := FindPayment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if paymentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPaymentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Payments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPaymentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Payments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPaymentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	paymentOne := &Payment{}
	paymentTwo := &Payment{}
	if err = randomize.Struct(seed, paymentOne, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err = randomize.Struct(seed, paymentTwo, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = paymentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = paymentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Payments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPaymentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	paymentOne := &Payment{}
	paymentTwo := &Payment{}
	if err = randomize.Struct(seed, paymentOne, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err = randomize.Struct(seed, paymentTwo, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = paymentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = paymentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Payments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func paymentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Payment) error {
	*o = Payment{}
	return nil
}

func paymentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Payment) error {
	*o = Payment{}
	return nil
}

func testPaymentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Payment{}
	o := &Payment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, paymentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Payment object: %s", err)
	}

	AddPaymentHook(boil.BeforeInsertHook, paymentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	paymentBeforeInsertHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterInsertHook, paymentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	paymentAfterInsertHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterSelectHook, paymentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	paymentAfterSelectHooks = []PaymentHook{}

	AddPaymentHook(boil.BeforeUpdateHook, paymentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	paymentBeforeUpdateHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterUpdateHook, paymentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	paymentAfterUpdateHooks = []PaymentHook{}

	AddPaymentHook(boil.BeforeDeleteHook, paymentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	paymentBeforeDeleteHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterDeleteHook, paymentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	paymentAfterDeleteHooks = []PaymentHook{}

	AddPaymentHook(boil.BeforeUpsertHook, paymentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	paymentBeforeUpsertHooks = []PaymentHook{}

	AddPaymentHook(boil.AfterUpsertHook, paymentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	paymentAfterUpsertHooks = []PaymentHook{}
}

func testPaymentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Payments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPaymentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(paymentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Payments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPaymentToManyPaymentidTransactions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Payment
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Paymentid, a.ID)
	queries.Assign(&c.Paymentid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PaymentidTransactions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Paymentid, b.Paymentid) {
			bFound = true
		}
		if queries.Equal(v.Paymentid, c.Paymentid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PaymentSlice{&a}
	if err = a.L.LoadPaymentidTransactions(ctx, tx, false, (*[]*Payment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PaymentidTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PaymentidTransactions = nil
	if err = a.L.LoadPaymentidTransactions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PaymentidTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPaymentToManyAddOpPaymentidTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Payment
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPaymentidTransactions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Paymentid) {
			t.Error("foreign key was wrong value", a.ID, first.Paymentid)
		}
		if !queries.Equal(a.ID, second.Paymentid) {
			t.Error("foreign key was wrong value", a.ID, second.Paymentid)
		}

		if first.R.PaymentidPayment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PaymentidPayment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PaymentidTransactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PaymentidTransactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PaymentidTransactions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPaymentToManySetOpPaymentidTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Payment
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPaymentidTransactions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PaymentidTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPaymentidTransactions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PaymentidTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Paymentid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Paymentid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Paymentid) {
		t.Error("foreign key was wrong value", a.ID, d.Paymentid)
	}
	if !queries.Equal(a.ID, e.Paymentid) {
		t.Error("foreign key was wrong value", a.ID, e.Paymentid)
	}

	if b.R.PaymentidPayment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PaymentidPayment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PaymentidPayment != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.PaymentidPayment != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PaymentidTransactions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PaymentidTransactions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPaymentToManyRemoveOpPaymentidTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Payment
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPaymentidTransactions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PaymentidTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePaymentidTransactions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PaymentidTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Paymentid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Paymentid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.PaymentidPayment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PaymentidPayment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PaymentidPayment != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.PaymentidPayment != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PaymentidTransactions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PaymentidTransactions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PaymentidTransactions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPaymentToOneCheckoutUsingCheckoutidCheckout(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Payment
	var foreign Checkout

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Checkoutid, foreign.Token)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CheckoutidCheckout().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Token, foreign.Token) {
		t.Errorf("want: %v, got %v", foreign.Token, check.Token)
	}

	ranAfterSelectHook := false
	AddCheckoutHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PaymentSlice{&local}
	if err = local.L.LoadCheckoutidCheckout(ctx, tx, false, (*[]*Payment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CheckoutidCheckout == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CheckoutidCheckout = nil
	if err = local.L.LoadCheckoutidCheckout(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CheckoutidCheckout == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPaymentToOneOrderUsingOrderidOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Payment
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Orderid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrderidOrder().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Order) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PaymentSlice{&local}
	if err = local.L.LoadOrderidOrder(ctx, tx, false, (*[]*Payment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrderidOrder == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrderidOrder = nil
	if err = local.L.LoadOrderidOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrderidOrder == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPaymentToOneSetOpCheckoutUsingCheckoutidCheckout(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Payment
	var b, c Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Checkout{&b, &c} {
		err = a.SetCheckoutidCheckout(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CheckoutidCheckout != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CheckoutidPayments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Checkoutid, x.Token) {
			t.Error("foreign key was wrong value", a.Checkoutid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Checkoutid))
		reflect.Indirect(reflect.ValueOf(&a.Checkoutid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Checkoutid, x.Token) {
			t.Error("foreign key was wrong value", a.Checkoutid, x.Token)
		}
	}
}

func testPaymentToOneRemoveOpCheckoutUsingCheckoutidCheckout(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Payment
	var b Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCheckoutidCheckout(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCheckoutidCheckout(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CheckoutidCheckout().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CheckoutidCheckout != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Checkoutid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CheckoutidPayments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPaymentToOneSetOpOrderUsingOrderidOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Payment
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrderidOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrderidOrder != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderidPayments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Orderid, x.ID) {
			t.Error("foreign key was wrong value", a.Orderid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Orderid))
		reflect.Indirect(reflect.ValueOf(&a.Orderid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Orderid, x.ID) {
			t.Error("foreign key was wrong value", a.Orderid, x.ID)
		}
	}
}

func testPaymentToOneRemoveOpOrderUsingOrderidOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Payment
	var b Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrderidOrder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrderidOrder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OrderidOrder().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OrderidOrder != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Orderid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OrderidPayments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPaymentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPaymentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PaymentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPaymentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Payments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	paymentDBTypes = map[string]string{`ID`: `character varying`, `Gateway`: `character varying`, `Isactive`: `boolean`, `Toconfirm`: `boolean`, `Createat`: `bigint`, `Updateat`: `bigint`, `Chargestatus`: `character varying`, `Token`: `character varying`, `Total`: `double precision`, `Capturedamount`: `double precision`, `Currency`: `character varying`, `Checkoutid`: `character varying`, `Orderid`: `character varying`, `Billingemail`: `character varying`, `Billingfirstname`: `character varying`, `Billinglastname`: `character varying`, `Billingcompanyname`: `character varying`, `Billingaddress1`: `character varying`, `Billingaddress2`: `character varying`, `Billingcity`: `character varying`, `Billingcityarea`: `character varying`, `Billingpostalcode`: `character varying`, `Billingcountrycode`: `character varying`, `Billingcountryarea`: `character varying`, `Ccfirstdigits`: `character varying`, `Cclastdigits`: `character varying`, `Ccbrand`: `character varying`, `Ccexpmonth`: `integer`, `Ccexpyear`: `integer`, `Paymentmethodtype`: `character varying`, `Customeripaddress`: `character varying`, `Extradata`: `text`, `Returnurl`: `character varying`, `Pspreference`: `character varying`, `Storepaymentmethod`: `character varying`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`}
	_              = bytes.MinRead
)

func testPaymentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(paymentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(paymentAllColumns) == len(paymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Payments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPaymentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(paymentAllColumns) == len(paymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Payment{}
	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Payments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, paymentDBTypes, true, paymentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(paymentAllColumns, paymentPrimaryKeyColumns) {
		fields = paymentAllColumns
	} else {
		fields = strmangle.SetComplement(
			paymentAllColumns,
			paymentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PaymentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPaymentsUpsert(t *testing.T) {
	t.Parallel()

	if len(paymentAllColumns) == len(paymentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Payment{}
	if err = randomize.Struct(seed, &o, paymentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Payment: %s", err)
	}

	count, err := Payments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, paymentDBTypes, false, paymentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Payment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Payment: %s", err)
	}

	count, err = Payments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
