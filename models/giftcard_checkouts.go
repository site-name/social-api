// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GiftcardCheckout is an object representing the database table.
type GiftcardCheckout struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Giftcardid null.String `boil:"giftcardid" json:"giftcardid,omitempty" toml:"giftcardid" yaml:"giftcardid,omitempty"`
	Checkoutid null.String `boil:"checkoutid" json:"checkoutid,omitempty" toml:"checkoutid" yaml:"checkoutid,omitempty"`

	R *giftcardCheckoutR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L giftcardCheckoutL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GiftcardCheckoutColumns = struct {
	ID         string
	Giftcardid string
	Checkoutid string
}{
	ID:         "id",
	Giftcardid: "giftcardid",
	Checkoutid: "checkoutid",
}

var GiftcardCheckoutTableColumns = struct {
	ID         string
	Giftcardid string
	Checkoutid string
}{
	ID:         "giftcard_checkouts.id",
	Giftcardid: "giftcard_checkouts.giftcardid",
	Checkoutid: "giftcard_checkouts.checkoutid",
}

// Generated where

var GiftcardCheckoutWhere = struct {
	ID         whereHelperstring
	Giftcardid whereHelpernull_String
	Checkoutid whereHelpernull_String
}{
	ID:         whereHelperstring{field: "\"giftcard_checkouts\".\"id\""},
	Giftcardid: whereHelpernull_String{field: "\"giftcard_checkouts\".\"giftcardid\""},
	Checkoutid: whereHelpernull_String{field: "\"giftcard_checkouts\".\"checkoutid\""},
}

// GiftcardCheckoutRels is where relationship names are stored.
var GiftcardCheckoutRels = struct {
	CheckoutidCheckout string
	GiftcardidGiftcard string
}{
	CheckoutidCheckout: "CheckoutidCheckout",
	GiftcardidGiftcard: "GiftcardidGiftcard",
}

// giftcardCheckoutR is where relationships are stored.
type giftcardCheckoutR struct {
	CheckoutidCheckout *Checkout `boil:"CheckoutidCheckout" json:"CheckoutidCheckout" toml:"CheckoutidCheckout" yaml:"CheckoutidCheckout"`
	GiftcardidGiftcard *Giftcard `boil:"GiftcardidGiftcard" json:"GiftcardidGiftcard" toml:"GiftcardidGiftcard" yaml:"GiftcardidGiftcard"`
}

// NewStruct creates a new relationship struct
func (*giftcardCheckoutR) NewStruct() *giftcardCheckoutR {
	return &giftcardCheckoutR{}
}

func (r *giftcardCheckoutR) GetCheckoutidCheckout() *Checkout {
	if r == nil {
		return nil
	}
	return r.CheckoutidCheckout
}

func (r *giftcardCheckoutR) GetGiftcardidGiftcard() *Giftcard {
	if r == nil {
		return nil
	}
	return r.GiftcardidGiftcard
}

// giftcardCheckoutL is where Load methods for each relationship are stored.
type giftcardCheckoutL struct{}

var (
	giftcardCheckoutAllColumns            = []string{"id", "giftcardid", "checkoutid"}
	giftcardCheckoutColumnsWithoutDefault = []string{"id"}
	giftcardCheckoutColumnsWithDefault    = []string{"giftcardid", "checkoutid"}
	giftcardCheckoutPrimaryKeyColumns     = []string{"id"}
	giftcardCheckoutGeneratedColumns      = []string{}
)

type (
	// GiftcardCheckoutSlice is an alias for a slice of pointers to GiftcardCheckout.
	// This should almost always be used instead of []GiftcardCheckout.
	GiftcardCheckoutSlice []*GiftcardCheckout
	// GiftcardCheckoutHook is the signature for custom GiftcardCheckout hook methods
	GiftcardCheckoutHook func(context.Context, boil.ContextExecutor, *GiftcardCheckout) error

	giftcardCheckoutQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	giftcardCheckoutType                 = reflect.TypeOf(&GiftcardCheckout{})
	giftcardCheckoutMapping              = queries.MakeStructMapping(giftcardCheckoutType)
	giftcardCheckoutPrimaryKeyMapping, _ = queries.BindMapping(giftcardCheckoutType, giftcardCheckoutMapping, giftcardCheckoutPrimaryKeyColumns)
	giftcardCheckoutInsertCacheMut       sync.RWMutex
	giftcardCheckoutInsertCache          = make(map[string]insertCache)
	giftcardCheckoutUpdateCacheMut       sync.RWMutex
	giftcardCheckoutUpdateCache          = make(map[string]updateCache)
	giftcardCheckoutUpsertCacheMut       sync.RWMutex
	giftcardCheckoutUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var giftcardCheckoutAfterSelectHooks []GiftcardCheckoutHook

var giftcardCheckoutBeforeInsertHooks []GiftcardCheckoutHook
var giftcardCheckoutAfterInsertHooks []GiftcardCheckoutHook

var giftcardCheckoutBeforeUpdateHooks []GiftcardCheckoutHook
var giftcardCheckoutAfterUpdateHooks []GiftcardCheckoutHook

var giftcardCheckoutBeforeDeleteHooks []GiftcardCheckoutHook
var giftcardCheckoutAfterDeleteHooks []GiftcardCheckoutHook

var giftcardCheckoutBeforeUpsertHooks []GiftcardCheckoutHook
var giftcardCheckoutAfterUpsertHooks []GiftcardCheckoutHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GiftcardCheckout) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardCheckoutAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GiftcardCheckout) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardCheckoutBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GiftcardCheckout) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardCheckoutAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GiftcardCheckout) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardCheckoutBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GiftcardCheckout) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardCheckoutAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GiftcardCheckout) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardCheckoutBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GiftcardCheckout) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardCheckoutAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GiftcardCheckout) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardCheckoutBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GiftcardCheckout) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range giftcardCheckoutAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGiftcardCheckoutHook registers your hook function for all future operations.
func AddGiftcardCheckoutHook(hookPoint boil.HookPoint, giftcardCheckoutHook GiftcardCheckoutHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		giftcardCheckoutAfterSelectHooks = append(giftcardCheckoutAfterSelectHooks, giftcardCheckoutHook)
	case boil.BeforeInsertHook:
		giftcardCheckoutBeforeInsertHooks = append(giftcardCheckoutBeforeInsertHooks, giftcardCheckoutHook)
	case boil.AfterInsertHook:
		giftcardCheckoutAfterInsertHooks = append(giftcardCheckoutAfterInsertHooks, giftcardCheckoutHook)
	case boil.BeforeUpdateHook:
		giftcardCheckoutBeforeUpdateHooks = append(giftcardCheckoutBeforeUpdateHooks, giftcardCheckoutHook)
	case boil.AfterUpdateHook:
		giftcardCheckoutAfterUpdateHooks = append(giftcardCheckoutAfterUpdateHooks, giftcardCheckoutHook)
	case boil.BeforeDeleteHook:
		giftcardCheckoutBeforeDeleteHooks = append(giftcardCheckoutBeforeDeleteHooks, giftcardCheckoutHook)
	case boil.AfterDeleteHook:
		giftcardCheckoutAfterDeleteHooks = append(giftcardCheckoutAfterDeleteHooks, giftcardCheckoutHook)
	case boil.BeforeUpsertHook:
		giftcardCheckoutBeforeUpsertHooks = append(giftcardCheckoutBeforeUpsertHooks, giftcardCheckoutHook)
	case boil.AfterUpsertHook:
		giftcardCheckoutAfterUpsertHooks = append(giftcardCheckoutAfterUpsertHooks, giftcardCheckoutHook)
	}
}

// One returns a single giftcardCheckout record from the query.
func (q giftcardCheckoutQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GiftcardCheckout, error) {
	o := &GiftcardCheckout{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for giftcard_checkouts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GiftcardCheckout records from the query.
func (q giftcardCheckoutQuery) All(ctx context.Context, exec boil.ContextExecutor) (GiftcardCheckoutSlice, error) {
	var o []*GiftcardCheckout

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GiftcardCheckout slice")
	}

	if len(giftcardCheckoutAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GiftcardCheckout records in the query.
func (q giftcardCheckoutQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count giftcard_checkouts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q giftcardCheckoutQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if giftcard_checkouts exists")
	}

	return count > 0, nil
}

// CheckoutidCheckout pointed to by the foreign key.
func (o *GiftcardCheckout) CheckoutidCheckout(mods ...qm.QueryMod) checkoutQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"token\" = ?", o.Checkoutid),
	}

	queryMods = append(queryMods, mods...)

	return Checkouts(queryMods...)
}

// GiftcardidGiftcard pointed to by the foreign key.
func (o *GiftcardCheckout) GiftcardidGiftcard(mods ...qm.QueryMod) giftcardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Giftcardid),
	}

	queryMods = append(queryMods, mods...)

	return Giftcards(queryMods...)
}

// LoadCheckoutidCheckout allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (giftcardCheckoutL) LoadCheckoutidCheckout(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGiftcardCheckout interface{}, mods queries.Applicator) error {
	var slice []*GiftcardCheckout
	var object *GiftcardCheckout

	if singular {
		var ok bool
		object, ok = maybeGiftcardCheckout.(*GiftcardCheckout)
		if !ok {
			object = new(GiftcardCheckout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGiftcardCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGiftcardCheckout))
			}
		}
	} else {
		s, ok := maybeGiftcardCheckout.(*[]*GiftcardCheckout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGiftcardCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGiftcardCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &giftcardCheckoutR{}
		}
		if !queries.IsNil(object.Checkoutid) {
			args = append(args, object.Checkoutid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &giftcardCheckoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Checkoutid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Checkoutid) {
				args = append(args, obj.Checkoutid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.token in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Checkout")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Checkout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CheckoutidCheckout = foreign
		if foreign.R == nil {
			foreign.R = &checkoutR{}
		}
		foreign.R.CheckoutidGiftcardCheckouts = append(foreign.R.CheckoutidGiftcardCheckouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Checkoutid, foreign.Token) {
				local.R.CheckoutidCheckout = foreign
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.CheckoutidGiftcardCheckouts = append(foreign.R.CheckoutidGiftcardCheckouts, local)
				break
			}
		}
	}

	return nil
}

// LoadGiftcardidGiftcard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (giftcardCheckoutL) LoadGiftcardidGiftcard(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGiftcardCheckout interface{}, mods queries.Applicator) error {
	var slice []*GiftcardCheckout
	var object *GiftcardCheckout

	if singular {
		var ok bool
		object, ok = maybeGiftcardCheckout.(*GiftcardCheckout)
		if !ok {
			object = new(GiftcardCheckout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGiftcardCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGiftcardCheckout))
			}
		}
	} else {
		s, ok := maybeGiftcardCheckout.(*[]*GiftcardCheckout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGiftcardCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGiftcardCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &giftcardCheckoutR{}
		}
		if !queries.IsNil(object.Giftcardid) {
			args = append(args, object.Giftcardid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &giftcardCheckoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Giftcardid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Giftcardid) {
				args = append(args, obj.Giftcardid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`giftcards`),
		qm.WhereIn(`giftcards.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Giftcard")
	}

	var resultSlice []*Giftcard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Giftcard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for giftcards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for giftcards")
	}

	if len(giftcardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.GiftcardidGiftcard = foreign
		if foreign.R == nil {
			foreign.R = &giftcardR{}
		}
		foreign.R.GiftcardidGiftcardCheckouts = append(foreign.R.GiftcardidGiftcardCheckouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Giftcardid, foreign.ID) {
				local.R.GiftcardidGiftcard = foreign
				if foreign.R == nil {
					foreign.R = &giftcardR{}
				}
				foreign.R.GiftcardidGiftcardCheckouts = append(foreign.R.GiftcardidGiftcardCheckouts, local)
				break
			}
		}
	}

	return nil
}

// SetCheckoutidCheckout of the giftcardCheckout to the related item.
// Sets o.R.CheckoutidCheckout to related.
// Adds o to related.R.CheckoutidGiftcardCheckouts.
func (o *GiftcardCheckout) SetCheckoutidCheckout(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Checkout) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"giftcard_checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"checkoutid"}),
		strmangle.WhereClause("\"", "\"", 2, giftcardCheckoutPrimaryKeyColumns),
	)
	values := []interface{}{related.Token, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Checkoutid, related.Token)
	if o.R == nil {
		o.R = &giftcardCheckoutR{
			CheckoutidCheckout: related,
		}
	} else {
		o.R.CheckoutidCheckout = related
	}

	if related.R == nil {
		related.R = &checkoutR{
			CheckoutidGiftcardCheckouts: GiftcardCheckoutSlice{o},
		}
	} else {
		related.R.CheckoutidGiftcardCheckouts = append(related.R.CheckoutidGiftcardCheckouts, o)
	}

	return nil
}

// RemoveCheckoutidCheckout relationship.
// Sets o.R.CheckoutidCheckout to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GiftcardCheckout) RemoveCheckoutidCheckout(ctx context.Context, exec boil.ContextExecutor, related *Checkout) error {
	var err error

	queries.SetScanner(&o.Checkoutid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("checkoutid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CheckoutidCheckout = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CheckoutidGiftcardCheckouts {
		if queries.Equal(o.Checkoutid, ri.Checkoutid) {
			continue
		}

		ln := len(related.R.CheckoutidGiftcardCheckouts)
		if ln > 1 && i < ln-1 {
			related.R.CheckoutidGiftcardCheckouts[i] = related.R.CheckoutidGiftcardCheckouts[ln-1]
		}
		related.R.CheckoutidGiftcardCheckouts = related.R.CheckoutidGiftcardCheckouts[:ln-1]
		break
	}
	return nil
}

// SetGiftcardidGiftcard of the giftcardCheckout to the related item.
// Sets o.R.GiftcardidGiftcard to related.
// Adds o to related.R.GiftcardidGiftcardCheckouts.
func (o *GiftcardCheckout) SetGiftcardidGiftcard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Giftcard) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"giftcard_checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"giftcardid"}),
		strmangle.WhereClause("\"", "\"", 2, giftcardCheckoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Giftcardid, related.ID)
	if o.R == nil {
		o.R = &giftcardCheckoutR{
			GiftcardidGiftcard: related,
		}
	} else {
		o.R.GiftcardidGiftcard = related
	}

	if related.R == nil {
		related.R = &giftcardR{
			GiftcardidGiftcardCheckouts: GiftcardCheckoutSlice{o},
		}
	} else {
		related.R.GiftcardidGiftcardCheckouts = append(related.R.GiftcardidGiftcardCheckouts, o)
	}

	return nil
}

// RemoveGiftcardidGiftcard relationship.
// Sets o.R.GiftcardidGiftcard to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GiftcardCheckout) RemoveGiftcardidGiftcard(ctx context.Context, exec boil.ContextExecutor, related *Giftcard) error {
	var err error

	queries.SetScanner(&o.Giftcardid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("giftcardid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.GiftcardidGiftcard = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GiftcardidGiftcardCheckouts {
		if queries.Equal(o.Giftcardid, ri.Giftcardid) {
			continue
		}

		ln := len(related.R.GiftcardidGiftcardCheckouts)
		if ln > 1 && i < ln-1 {
			related.R.GiftcardidGiftcardCheckouts[i] = related.R.GiftcardidGiftcardCheckouts[ln-1]
		}
		related.R.GiftcardidGiftcardCheckouts = related.R.GiftcardidGiftcardCheckouts[:ln-1]
		break
	}
	return nil
}

// GiftcardCheckouts retrieves all the records using an executor.
func GiftcardCheckouts(mods ...qm.QueryMod) giftcardCheckoutQuery {
	mods = append(mods, qm.From("\"giftcard_checkouts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"giftcard_checkouts\".*"})
	}

	return giftcardCheckoutQuery{q}
}

// FindGiftcardCheckout retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGiftcardCheckout(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*GiftcardCheckout, error) {
	giftcardCheckoutObj := &GiftcardCheckout{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"giftcard_checkouts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, giftcardCheckoutObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from giftcard_checkouts")
	}

	if err = giftcardCheckoutObj.doAfterSelectHooks(ctx, exec); err != nil {
		return giftcardCheckoutObj, err
	}

	return giftcardCheckoutObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GiftcardCheckout) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no giftcard_checkouts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(giftcardCheckoutColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	giftcardCheckoutInsertCacheMut.RLock()
	cache, cached := giftcardCheckoutInsertCache[key]
	giftcardCheckoutInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			giftcardCheckoutAllColumns,
			giftcardCheckoutColumnsWithDefault,
			giftcardCheckoutColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(giftcardCheckoutType, giftcardCheckoutMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(giftcardCheckoutType, giftcardCheckoutMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"giftcard_checkouts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"giftcard_checkouts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into giftcard_checkouts")
	}

	if !cached {
		giftcardCheckoutInsertCacheMut.Lock()
		giftcardCheckoutInsertCache[key] = cache
		giftcardCheckoutInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GiftcardCheckout.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GiftcardCheckout) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	giftcardCheckoutUpdateCacheMut.RLock()
	cache, cached := giftcardCheckoutUpdateCache[key]
	giftcardCheckoutUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			giftcardCheckoutAllColumns,
			giftcardCheckoutPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update giftcard_checkouts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"giftcard_checkouts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, giftcardCheckoutPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(giftcardCheckoutType, giftcardCheckoutMapping, append(wl, giftcardCheckoutPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update giftcard_checkouts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for giftcard_checkouts")
	}

	if !cached {
		giftcardCheckoutUpdateCacheMut.Lock()
		giftcardCheckoutUpdateCache[key] = cache
		giftcardCheckoutUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q giftcardCheckoutQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for giftcard_checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for giftcard_checkouts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GiftcardCheckoutSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giftcardCheckoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"giftcard_checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, giftcardCheckoutPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in giftcardCheckout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all giftcardCheckout")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GiftcardCheckout) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no giftcard_checkouts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(giftcardCheckoutColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	giftcardCheckoutUpsertCacheMut.RLock()
	cache, cached := giftcardCheckoutUpsertCache[key]
	giftcardCheckoutUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			giftcardCheckoutAllColumns,
			giftcardCheckoutColumnsWithDefault,
			giftcardCheckoutColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			giftcardCheckoutAllColumns,
			giftcardCheckoutPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert giftcard_checkouts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(giftcardCheckoutPrimaryKeyColumns))
			copy(conflict, giftcardCheckoutPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"giftcard_checkouts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(giftcardCheckoutType, giftcardCheckoutMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(giftcardCheckoutType, giftcardCheckoutMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert giftcard_checkouts")
	}

	if !cached {
		giftcardCheckoutUpsertCacheMut.Lock()
		giftcardCheckoutUpsertCache[key] = cache
		giftcardCheckoutUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GiftcardCheckout record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GiftcardCheckout) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GiftcardCheckout provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), giftcardCheckoutPrimaryKeyMapping)
	sql := "DELETE FROM \"giftcard_checkouts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from giftcard_checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for giftcard_checkouts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q giftcardCheckoutQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no giftcardCheckoutQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from giftcard_checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for giftcard_checkouts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GiftcardCheckoutSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(giftcardCheckoutBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giftcardCheckoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"giftcard_checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, giftcardCheckoutPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from giftcardCheckout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for giftcard_checkouts")
	}

	if len(giftcardCheckoutAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GiftcardCheckout) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGiftcardCheckout(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GiftcardCheckoutSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GiftcardCheckoutSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), giftcardCheckoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"giftcard_checkouts\".* FROM \"giftcard_checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, giftcardCheckoutPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GiftcardCheckoutSlice")
	}

	*o = slice

	return nil
}

// GiftcardCheckoutExists checks if the GiftcardCheckout row exists.
func GiftcardCheckoutExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"giftcard_checkouts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if giftcard_checkouts exists")
	}

	return exists, nil
}

// Exists checks if the GiftcardCheckout row exists.
func (o *GiftcardCheckout) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GiftcardCheckoutExists(ctx, exec, o.ID)
}
