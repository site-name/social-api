// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VoucherCustomer is an object representing the database table.
type VoucherCustomer struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	VoucherID     null.String `boil:"voucher_id" json:"voucher_id,omitempty" toml:"voucher_id" yaml:"voucher_id,omitempty"`
	CustomerEmail null.String `boil:"customer_email" json:"customer_email,omitempty" toml:"customer_email" yaml:"customer_email,omitempty"`

	R *voucherCustomerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voucherCustomerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoucherCustomerColumns = struct {
	ID            string
	VoucherID     string
	CustomerEmail string
}{
	ID:            "id",
	VoucherID:     "voucher_id",
	CustomerEmail: "customer_email",
}

var VoucherCustomerTableColumns = struct {
	ID            string
	VoucherID     string
	CustomerEmail string
}{
	ID:            "voucher_customers.id",
	VoucherID:     "voucher_customers.voucher_id",
	CustomerEmail: "voucher_customers.customer_email",
}

// Generated where

var VoucherCustomerWhere = struct {
	ID            whereHelperstring
	VoucherID     whereHelpernull_String
	CustomerEmail whereHelpernull_String
}{
	ID:            whereHelperstring{field: "\"voucher_customers\".\"id\""},
	VoucherID:     whereHelpernull_String{field: "\"voucher_customers\".\"voucher_id\""},
	CustomerEmail: whereHelpernull_String{field: "\"voucher_customers\".\"customer_email\""},
}

// VoucherCustomerRels is where relationship names are stored.
var VoucherCustomerRels = struct {
	Voucher string
}{
	Voucher: "Voucher",
}

// voucherCustomerR is where relationships are stored.
type voucherCustomerR struct {
	Voucher *Voucher `boil:"Voucher" json:"Voucher" toml:"Voucher" yaml:"Voucher"`
}

// NewStruct creates a new relationship struct
func (*voucherCustomerR) NewStruct() *voucherCustomerR {
	return &voucherCustomerR{}
}

func (r *voucherCustomerR) GetVoucher() *Voucher {
	if r == nil {
		return nil
	}
	return r.Voucher
}

// voucherCustomerL is where Load methods for each relationship are stored.
type voucherCustomerL struct{}

var (
	voucherCustomerAllColumns            = []string{"id", "voucher_id", "customer_email"}
	voucherCustomerColumnsWithoutDefault = []string{"id"}
	voucherCustomerColumnsWithDefault    = []string{"voucher_id", "customer_email"}
	voucherCustomerPrimaryKeyColumns     = []string{"id"}
	voucherCustomerGeneratedColumns      = []string{}
)

type (
	// VoucherCustomerSlice is an alias for a slice of pointers to VoucherCustomer.
	// This should almost always be used instead of []VoucherCustomer.
	VoucherCustomerSlice []*VoucherCustomer
	// VoucherCustomerHook is the signature for custom VoucherCustomer hook methods
	VoucherCustomerHook func(context.Context, boil.ContextExecutor, *VoucherCustomer) error

	voucherCustomerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voucherCustomerType                 = reflect.TypeOf(&VoucherCustomer{})
	voucherCustomerMapping              = queries.MakeStructMapping(voucherCustomerType)
	voucherCustomerPrimaryKeyMapping, _ = queries.BindMapping(voucherCustomerType, voucherCustomerMapping, voucherCustomerPrimaryKeyColumns)
	voucherCustomerInsertCacheMut       sync.RWMutex
	voucherCustomerInsertCache          = make(map[string]insertCache)
	voucherCustomerUpdateCacheMut       sync.RWMutex
	voucherCustomerUpdateCache          = make(map[string]updateCache)
	voucherCustomerUpsertCacheMut       sync.RWMutex
	voucherCustomerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var voucherCustomerAfterSelectHooks []VoucherCustomerHook

var voucherCustomerBeforeInsertHooks []VoucherCustomerHook
var voucherCustomerAfterInsertHooks []VoucherCustomerHook

var voucherCustomerBeforeUpdateHooks []VoucherCustomerHook
var voucherCustomerAfterUpdateHooks []VoucherCustomerHook

var voucherCustomerBeforeDeleteHooks []VoucherCustomerHook
var voucherCustomerAfterDeleteHooks []VoucherCustomerHook

var voucherCustomerBeforeUpsertHooks []VoucherCustomerHook
var voucherCustomerAfterUpsertHooks []VoucherCustomerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VoucherCustomer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCustomerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VoucherCustomer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCustomerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VoucherCustomer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCustomerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VoucherCustomer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCustomerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VoucherCustomer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCustomerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VoucherCustomer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCustomerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VoucherCustomer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCustomerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VoucherCustomer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCustomerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VoucherCustomer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherCustomerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVoucherCustomerHook registers your hook function for all future operations.
func AddVoucherCustomerHook(hookPoint boil.HookPoint, voucherCustomerHook VoucherCustomerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		voucherCustomerAfterSelectHooks = append(voucherCustomerAfterSelectHooks, voucherCustomerHook)
	case boil.BeforeInsertHook:
		voucherCustomerBeforeInsertHooks = append(voucherCustomerBeforeInsertHooks, voucherCustomerHook)
	case boil.AfterInsertHook:
		voucherCustomerAfterInsertHooks = append(voucherCustomerAfterInsertHooks, voucherCustomerHook)
	case boil.BeforeUpdateHook:
		voucherCustomerBeforeUpdateHooks = append(voucherCustomerBeforeUpdateHooks, voucherCustomerHook)
	case boil.AfterUpdateHook:
		voucherCustomerAfterUpdateHooks = append(voucherCustomerAfterUpdateHooks, voucherCustomerHook)
	case boil.BeforeDeleteHook:
		voucherCustomerBeforeDeleteHooks = append(voucherCustomerBeforeDeleteHooks, voucherCustomerHook)
	case boil.AfterDeleteHook:
		voucherCustomerAfterDeleteHooks = append(voucherCustomerAfterDeleteHooks, voucherCustomerHook)
	case boil.BeforeUpsertHook:
		voucherCustomerBeforeUpsertHooks = append(voucherCustomerBeforeUpsertHooks, voucherCustomerHook)
	case boil.AfterUpsertHook:
		voucherCustomerAfterUpsertHooks = append(voucherCustomerAfterUpsertHooks, voucherCustomerHook)
	}
}

// One returns a single voucherCustomer record from the query.
func (q voucherCustomerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VoucherCustomer, error) {
	o := &VoucherCustomer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for voucher_customers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VoucherCustomer records from the query.
func (q voucherCustomerQuery) All(ctx context.Context, exec boil.ContextExecutor) (VoucherCustomerSlice, error) {
	var o []*VoucherCustomer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VoucherCustomer slice")
	}

	if len(voucherCustomerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VoucherCustomer records in the query.
func (q voucherCustomerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count voucher_customers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voucherCustomerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if voucher_customers exists")
	}

	return count > 0, nil
}

// Voucher pointed to by the foreign key.
func (o *VoucherCustomer) Voucher(mods ...qm.QueryMod) voucherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VoucherID),
	}

	queryMods = append(queryMods, mods...)

	return Vouchers(queryMods...)
}

// LoadVoucher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voucherCustomerL) LoadVoucher(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucherCustomer interface{}, mods queries.Applicator) error {
	var slice []*VoucherCustomer
	var object *VoucherCustomer

	if singular {
		var ok bool
		object, ok = maybeVoucherCustomer.(*VoucherCustomer)
		if !ok {
			object = new(VoucherCustomer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucherCustomer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucherCustomer))
			}
		}
	} else {
		s, ok := maybeVoucherCustomer.(*[]*VoucherCustomer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucherCustomer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucherCustomer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherCustomerR{}
		}
		if !queries.IsNil(object.VoucherID) {
			args = append(args, object.VoucherID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherCustomerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VoucherID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.VoucherID) {
				args = append(args, obj.VoucherID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vouchers`),
		qm.WhereIn(`vouchers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Voucher")
	}

	var resultSlice []*Voucher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Voucher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vouchers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vouchers")
	}

	if len(voucherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Voucher = foreign
		if foreign.R == nil {
			foreign.R = &voucherR{}
		}
		foreign.R.VoucherCustomers = append(foreign.R.VoucherCustomers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VoucherID, foreign.ID) {
				local.R.Voucher = foreign
				if foreign.R == nil {
					foreign.R = &voucherR{}
				}
				foreign.R.VoucherCustomers = append(foreign.R.VoucherCustomers, local)
				break
			}
		}
	}

	return nil
}

// SetVoucher of the voucherCustomer to the related item.
// Sets o.R.Voucher to related.
// Adds o to related.R.VoucherCustomers.
func (o *VoucherCustomer) SetVoucher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Voucher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"voucher_customers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voucher_id"}),
		strmangle.WhereClause("\"", "\"", 2, voucherCustomerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VoucherID, related.ID)
	if o.R == nil {
		o.R = &voucherCustomerR{
			Voucher: related,
		}
	} else {
		o.R.Voucher = related
	}

	if related.R == nil {
		related.R = &voucherR{
			VoucherCustomers: VoucherCustomerSlice{o},
		}
	} else {
		related.R.VoucherCustomers = append(related.R.VoucherCustomers, o)
	}

	return nil
}

// RemoveVoucher relationship.
// Sets o.R.Voucher to nil.
// Removes o from all passed in related items' relationships struct.
func (o *VoucherCustomer) RemoveVoucher(ctx context.Context, exec boil.ContextExecutor, related *Voucher) error {
	var err error

	queries.SetScanner(&o.VoucherID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("voucher_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Voucher = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VoucherCustomers {
		if queries.Equal(o.VoucherID, ri.VoucherID) {
			continue
		}

		ln := len(related.R.VoucherCustomers)
		if ln > 1 && i < ln-1 {
			related.R.VoucherCustomers[i] = related.R.VoucherCustomers[ln-1]
		}
		related.R.VoucherCustomers = related.R.VoucherCustomers[:ln-1]
		break
	}
	return nil
}

// VoucherCustomers retrieves all the records using an executor.
func VoucherCustomers(mods ...qm.QueryMod) voucherCustomerQuery {
	mods = append(mods, qm.From("\"voucher_customers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"voucher_customers\".*"})
	}

	return voucherCustomerQuery{q}
}

// FindVoucherCustomer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoucherCustomer(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*VoucherCustomer, error) {
	voucherCustomerObj := &VoucherCustomer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"voucher_customers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, voucherCustomerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from voucher_customers")
	}

	if err = voucherCustomerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return voucherCustomerObj, err
	}

	return voucherCustomerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VoucherCustomer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no voucher_customers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherCustomerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voucherCustomerInsertCacheMut.RLock()
	cache, cached := voucherCustomerInsertCache[key]
	voucherCustomerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voucherCustomerAllColumns,
			voucherCustomerColumnsWithDefault,
			voucherCustomerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voucherCustomerType, voucherCustomerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voucherCustomerType, voucherCustomerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"voucher_customers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"voucher_customers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into voucher_customers")
	}

	if !cached {
		voucherCustomerInsertCacheMut.Lock()
		voucherCustomerInsertCache[key] = cache
		voucherCustomerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VoucherCustomer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VoucherCustomer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	voucherCustomerUpdateCacheMut.RLock()
	cache, cached := voucherCustomerUpdateCache[key]
	voucherCustomerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voucherCustomerAllColumns,
			voucherCustomerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update voucher_customers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"voucher_customers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, voucherCustomerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voucherCustomerType, voucherCustomerMapping, append(wl, voucherCustomerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update voucher_customers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for voucher_customers")
	}

	if !cached {
		voucherCustomerUpdateCacheMut.Lock()
		voucherCustomerUpdateCache[key] = cache
		voucherCustomerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q voucherCustomerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for voucher_customers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for voucher_customers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoucherCustomerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherCustomerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"voucher_customers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, voucherCustomerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in voucherCustomer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all voucherCustomer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VoucherCustomer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no voucher_customers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherCustomerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voucherCustomerUpsertCacheMut.RLock()
	cache, cached := voucherCustomerUpsertCache[key]
	voucherCustomerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			voucherCustomerAllColumns,
			voucherCustomerColumnsWithDefault,
			voucherCustomerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voucherCustomerAllColumns,
			voucherCustomerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert voucher_customers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(voucherCustomerPrimaryKeyColumns))
			copy(conflict, voucherCustomerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"voucher_customers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(voucherCustomerType, voucherCustomerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voucherCustomerType, voucherCustomerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert voucher_customers")
	}

	if !cached {
		voucherCustomerUpsertCacheMut.Lock()
		voucherCustomerUpsertCache[key] = cache
		voucherCustomerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VoucherCustomer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VoucherCustomer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VoucherCustomer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voucherCustomerPrimaryKeyMapping)
	sql := "DELETE FROM \"voucher_customers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from voucher_customers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for voucher_customers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voucherCustomerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no voucherCustomerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from voucher_customers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for voucher_customers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoucherCustomerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(voucherCustomerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherCustomerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"voucher_customers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherCustomerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from voucherCustomer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for voucher_customers")
	}

	if len(voucherCustomerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VoucherCustomer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVoucherCustomer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoucherCustomerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoucherCustomerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherCustomerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"voucher_customers\".* FROM \"voucher_customers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherCustomerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VoucherCustomerSlice")
	}

	*o = slice

	return nil
}

// VoucherCustomerExists checks if the VoucherCustomer row exists.
func VoucherCustomerExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"voucher_customers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if voucher_customers exists")
	}

	return exists, nil
}

// Exists checks if the VoucherCustomer row exists.
func (o *VoucherCustomer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VoucherCustomerExists(ctx, exec, o.ID)
}
