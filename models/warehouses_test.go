// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWarehouses(t *testing.T) {
	t.Parallel()

	query := Warehouses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWarehousesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWarehousesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Warehouses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWarehousesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WarehouseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWarehousesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WarehouseExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Warehouse exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WarehouseExists to return true, but got false.")
	}
}

func testWarehousesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	warehouseFound, err := FindWarehouse(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if warehouseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWarehousesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Warehouses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWarehousesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Warehouses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWarehousesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	warehouseOne := &Warehouse{}
	warehouseTwo := &Warehouse{}
	if err = randomize.Struct(seed, warehouseOne, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}
	if err = randomize.Struct(seed, warehouseTwo, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = warehouseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = warehouseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Warehouses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWarehousesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	warehouseOne := &Warehouse{}
	warehouseTwo := &Warehouse{}
	if err = randomize.Struct(seed, warehouseOne, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}
	if err = randomize.Struct(seed, warehouseTwo, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = warehouseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = warehouseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func warehouseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func warehouseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
	*o = Warehouse{}
	return nil
}

func testWarehousesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Warehouse{}
	o := &Warehouse{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, warehouseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Warehouse object: %s", err)
	}

	AddWarehouseHook(boil.BeforeInsertHook, warehouseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	warehouseBeforeInsertHooks = []WarehouseHook{}

	AddWarehouseHook(boil.AfterInsertHook, warehouseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	warehouseAfterInsertHooks = []WarehouseHook{}

	AddWarehouseHook(boil.AfterSelectHook, warehouseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	warehouseAfterSelectHooks = []WarehouseHook{}

	AddWarehouseHook(boil.BeforeUpdateHook, warehouseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	warehouseBeforeUpdateHooks = []WarehouseHook{}

	AddWarehouseHook(boil.AfterUpdateHook, warehouseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	warehouseAfterUpdateHooks = []WarehouseHook{}

	AddWarehouseHook(boil.BeforeDeleteHook, warehouseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	warehouseBeforeDeleteHooks = []WarehouseHook{}

	AddWarehouseHook(boil.AfterDeleteHook, warehouseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	warehouseAfterDeleteHooks = []WarehouseHook{}

	AddWarehouseHook(boil.BeforeUpsertHook, warehouseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	warehouseBeforeUpsertHooks = []WarehouseHook{}

	AddWarehouseHook(boil.AfterUpsertHook, warehouseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	warehouseAfterUpsertHooks = []WarehouseHook{}
}

func testWarehousesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWarehousesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(warehouseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWarehouseToManyCollectionpointidCheckouts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Collectionpointid, a.ID)
	queries.Assign(&c.Collectionpointid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CollectionpointidCheckouts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Collectionpointid, b.Collectionpointid) {
			bFound = true
		}
		if queries.Equal(v.Collectionpointid, c.Collectionpointid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WarehouseSlice{&a}
	if err = a.L.LoadCollectionpointidCheckouts(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionpointidCheckouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CollectionpointidCheckouts = nil
	if err = a.L.LoadCollectionpointidCheckouts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionpointidCheckouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWarehouseToManyCollectionpointidOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Collectionpointid, a.ID)
	queries.Assign(&c.Collectionpointid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CollectionpointidOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Collectionpointid, b.Collectionpointid) {
			bFound = true
		}
		if queries.Equal(v.Collectionpointid, c.Collectionpointid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WarehouseSlice{&a}
	if err = a.L.LoadCollectionpointidOrders(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionpointidOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CollectionpointidOrders = nil
	if err = a.L.LoadCollectionpointidOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionpointidOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWarehouseToManyWarehouseidStocks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, stockDBTypes, false, stockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stockDBTypes, false, stockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Warehouseid, a.ID)
	queries.Assign(&c.Warehouseid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WarehouseidStocks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Warehouseid, b.Warehouseid) {
			bFound = true
		}
		if queries.Equal(v.Warehouseid, c.Warehouseid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WarehouseSlice{&a}
	if err = a.L.LoadWarehouseidStocks(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WarehouseidStocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WarehouseidStocks = nil
	if err = a.L.LoadWarehouseidStocks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WarehouseidStocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWarehouseToManyWarehouseidWarehouseShippingZones(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c WarehouseShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, warehouseShippingZoneDBTypes, false, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, warehouseShippingZoneDBTypes, false, warehouseShippingZoneColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Warehouseid, a.ID)
	queries.Assign(&c.Warehouseid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WarehouseidWarehouseShippingZones().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Warehouseid, b.Warehouseid) {
			bFound = true
		}
		if queries.Equal(v.Warehouseid, c.Warehouseid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WarehouseSlice{&a}
	if err = a.L.LoadWarehouseidWarehouseShippingZones(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WarehouseidWarehouseShippingZones); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WarehouseidWarehouseShippingZones = nil
	if err = a.L.LoadWarehouseidWarehouseShippingZones(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WarehouseidWarehouseShippingZones); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testWarehouseToManyAddOpCollectionpointidCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Checkout{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCollectionpointidCheckouts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Collectionpointid) {
			t.Error("foreign key was wrong value", a.ID, first.Collectionpointid)
		}
		if !queries.Equal(a.ID, second.Collectionpointid) {
			t.Error("foreign key was wrong value", a.ID, second.Collectionpointid)
		}

		if first.R.CollectionpointidWarehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CollectionpointidWarehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CollectionpointidCheckouts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CollectionpointidCheckouts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CollectionpointidCheckouts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testWarehouseToManySetOpCollectionpointidCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCollectionpointidCheckouts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CollectionpointidCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCollectionpointidCheckouts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CollectionpointidCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Collectionpointid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Collectionpointid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Collectionpointid) {
		t.Error("foreign key was wrong value", a.ID, d.Collectionpointid)
	}
	if !queries.Equal(a.ID, e.Collectionpointid) {
		t.Error("foreign key was wrong value", a.ID, e.Collectionpointid)
	}

	if b.R.CollectionpointidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CollectionpointidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CollectionpointidWarehouse != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CollectionpointidWarehouse != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CollectionpointidCheckouts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CollectionpointidCheckouts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testWarehouseToManyRemoveOpCollectionpointidCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCollectionpointidCheckouts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CollectionpointidCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCollectionpointidCheckouts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CollectionpointidCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Collectionpointid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Collectionpointid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CollectionpointidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CollectionpointidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CollectionpointidWarehouse != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CollectionpointidWarehouse != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CollectionpointidCheckouts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CollectionpointidCheckouts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CollectionpointidCheckouts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testWarehouseToManyAddOpCollectionpointidOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCollectionpointidOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Collectionpointid) {
			t.Error("foreign key was wrong value", a.ID, first.Collectionpointid)
		}
		if !queries.Equal(a.ID, second.Collectionpointid) {
			t.Error("foreign key was wrong value", a.ID, second.Collectionpointid)
		}

		if first.R.CollectionpointidWarehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CollectionpointidWarehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CollectionpointidOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CollectionpointidOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CollectionpointidOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testWarehouseToManySetOpCollectionpointidOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCollectionpointidOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CollectionpointidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCollectionpointidOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CollectionpointidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Collectionpointid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Collectionpointid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Collectionpointid) {
		t.Error("foreign key was wrong value", a.ID, d.Collectionpointid)
	}
	if !queries.Equal(a.ID, e.Collectionpointid) {
		t.Error("foreign key was wrong value", a.ID, e.Collectionpointid)
	}

	if b.R.CollectionpointidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CollectionpointidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CollectionpointidWarehouse != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CollectionpointidWarehouse != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CollectionpointidOrders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CollectionpointidOrders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testWarehouseToManyRemoveOpCollectionpointidOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCollectionpointidOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CollectionpointidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCollectionpointidOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CollectionpointidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Collectionpointid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Collectionpointid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CollectionpointidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CollectionpointidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CollectionpointidWarehouse != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CollectionpointidWarehouse != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CollectionpointidOrders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CollectionpointidOrders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CollectionpointidOrders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testWarehouseToManyAddOpWarehouseidStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Stock{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWarehouseidStocks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Warehouseid) {
			t.Error("foreign key was wrong value", a.ID, first.Warehouseid)
		}
		if !queries.Equal(a.ID, second.Warehouseid) {
			t.Error("foreign key was wrong value", a.ID, second.Warehouseid)
		}

		if first.R.WarehouseidWarehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.WarehouseidWarehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WarehouseidStocks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WarehouseidStocks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WarehouseidStocks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testWarehouseToManySetOpWarehouseidStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetWarehouseidStocks(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WarehouseidStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetWarehouseidStocks(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WarehouseidStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Warehouseid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Warehouseid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Warehouseid) {
		t.Error("foreign key was wrong value", a.ID, d.Warehouseid)
	}
	if !queries.Equal(a.ID, e.Warehouseid) {
		t.Error("foreign key was wrong value", a.ID, e.Warehouseid)
	}

	if b.R.WarehouseidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WarehouseidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WarehouseidWarehouse != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.WarehouseidWarehouse != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.WarehouseidStocks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.WarehouseidStocks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testWarehouseToManyRemoveOpWarehouseidStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddWarehouseidStocks(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WarehouseidStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveWarehouseidStocks(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WarehouseidStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Warehouseid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Warehouseid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.WarehouseidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WarehouseidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WarehouseidWarehouse != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.WarehouseidWarehouse != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.WarehouseidStocks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.WarehouseidStocks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.WarehouseidStocks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testWarehouseToManyAddOpWarehouseidWarehouseShippingZones(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e WarehouseShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WarehouseShippingZone{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, warehouseShippingZoneDBTypes, false, strmangle.SetComplement(warehouseShippingZonePrimaryKeyColumns, warehouseShippingZoneColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*WarehouseShippingZone{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWarehouseidWarehouseShippingZones(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Warehouseid) {
			t.Error("foreign key was wrong value", a.ID, first.Warehouseid)
		}
		if !queries.Equal(a.ID, second.Warehouseid) {
			t.Error("foreign key was wrong value", a.ID, second.Warehouseid)
		}

		if first.R.WarehouseidWarehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.WarehouseidWarehouse != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WarehouseidWarehouseShippingZones[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WarehouseidWarehouseShippingZones[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WarehouseidWarehouseShippingZones().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testWarehouseToManySetOpWarehouseidWarehouseShippingZones(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e WarehouseShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WarehouseShippingZone{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, warehouseShippingZoneDBTypes, false, strmangle.SetComplement(warehouseShippingZonePrimaryKeyColumns, warehouseShippingZoneColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetWarehouseidWarehouseShippingZones(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WarehouseidWarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetWarehouseidWarehouseShippingZones(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WarehouseidWarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Warehouseid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Warehouseid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Warehouseid) {
		t.Error("foreign key was wrong value", a.ID, d.Warehouseid)
	}
	if !queries.Equal(a.ID, e.Warehouseid) {
		t.Error("foreign key was wrong value", a.ID, e.Warehouseid)
	}

	if b.R.WarehouseidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WarehouseidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WarehouseidWarehouse != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.WarehouseidWarehouse != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.WarehouseidWarehouseShippingZones[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.WarehouseidWarehouseShippingZones[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testWarehouseToManyRemoveOpWarehouseidWarehouseShippingZones(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c, d, e WarehouseShippingZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WarehouseShippingZone{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, warehouseShippingZoneDBTypes, false, strmangle.SetComplement(warehouseShippingZonePrimaryKeyColumns, warehouseShippingZoneColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddWarehouseidWarehouseShippingZones(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WarehouseidWarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveWarehouseidWarehouseShippingZones(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WarehouseidWarehouseShippingZones().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Warehouseid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Warehouseid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.WarehouseidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WarehouseidWarehouse != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WarehouseidWarehouse != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.WarehouseidWarehouse != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.WarehouseidWarehouseShippingZones) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.WarehouseidWarehouseShippingZones[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.WarehouseidWarehouseShippingZones[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testWarehouseToOneAddressUsingAddressidAddress(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Warehouse
	var foreign Address

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Addressid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AddressidAddress().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAddressHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Address) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := WarehouseSlice{&local}
	if err = local.L.LoadAddressidAddress(ctx, tx, false, (*[]*Warehouse)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AddressidAddress == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AddressidAddress = nil
	if err = local.L.LoadAddressidAddress(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AddressidAddress == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testWarehouseToOneSetOpAddressUsingAddressidAddress(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b, c Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Address{&b, &c} {
		err = a.SetAddressidAddress(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AddressidAddress != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AddressidWarehouses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Addressid, x.ID) {
			t.Error("foreign key was wrong value", a.Addressid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Addressid))
		reflect.Indirect(reflect.ValueOf(&a.Addressid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Addressid, x.ID) {
			t.Error("foreign key was wrong value", a.Addressid, x.ID)
		}
	}
}

func testWarehouseToOneRemoveOpAddressUsingAddressidAddress(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Warehouse
	var b Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAddressidAddress(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAddressidAddress(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AddressidAddress().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.AddressidAddress != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Addressid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AddressidWarehouses) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWarehousesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWarehousesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WarehouseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWarehousesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Warehouses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	warehouseDBTypes = map[string]string{`ID`: `character varying`, `Name`: `character varying`, `Slug`: `character varying`, `Addressid`: `character varying`, `Email`: `character varying`, `Clickandcollectoption`: `character varying`, `Isprivate`: `boolean`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`}
	_                = bytes.MinRead
)

func testWarehousesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(warehousePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(warehouseAllColumns) == len(warehousePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehousePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWarehousesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(warehouseAllColumns) == len(warehousePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Warehouse{}
	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, warehouseDBTypes, true, warehousePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(warehouseAllColumns, warehousePrimaryKeyColumns) {
		fields = warehouseAllColumns
	} else {
		fields = strmangle.SetComplement(
			warehouseAllColumns,
			warehousePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WarehouseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWarehousesUpsert(t *testing.T) {
	t.Parallel()

	if len(warehouseAllColumns) == len(warehousePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Warehouse{}
	if err = randomize.Struct(seed, &o, warehouseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Warehouse: %s", err)
	}

	count, err := Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, warehouseDBTypes, false, warehousePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Warehouse: %s", err)
	}

	count, err = Warehouses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
