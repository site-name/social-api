// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AttributeVariant is an object representing the database table.
type AttributeVariant struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Attributeid      null.String `boil:"attributeid" json:"attributeid,omitempty" toml:"attributeid" yaml:"attributeid,omitempty"`
	Producttypeid    null.String `boil:"producttypeid" json:"producttypeid,omitempty" toml:"producttypeid" yaml:"producttypeid,omitempty"`
	Variantselection null.Bool   `boil:"variantselection" json:"variantselection,omitempty" toml:"variantselection" yaml:"variantselection,omitempty"`
	Sortorder        null.Int    `boil:"sortorder" json:"sortorder,omitempty" toml:"sortorder" yaml:"sortorder,omitempty"`

	R *attributeVariantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributeVariantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributeVariantColumns = struct {
	ID               string
	Attributeid      string
	Producttypeid    string
	Variantselection string
	Sortorder        string
}{
	ID:               "id",
	Attributeid:      "attributeid",
	Producttypeid:    "producttypeid",
	Variantselection: "variantselection",
	Sortorder:        "sortorder",
}

var AttributeVariantTableColumns = struct {
	ID               string
	Attributeid      string
	Producttypeid    string
	Variantselection string
	Sortorder        string
}{
	ID:               "attribute_variants.id",
	Attributeid:      "attribute_variants.attributeid",
	Producttypeid:    "attribute_variants.producttypeid",
	Variantselection: "attribute_variants.variantselection",
	Sortorder:        "attribute_variants.sortorder",
}

// Generated where

var AttributeVariantWhere = struct {
	ID               whereHelperstring
	Attributeid      whereHelpernull_String
	Producttypeid    whereHelpernull_String
	Variantselection whereHelpernull_Bool
	Sortorder        whereHelpernull_Int
}{
	ID:               whereHelperstring{field: "\"attribute_variants\".\"id\""},
	Attributeid:      whereHelpernull_String{field: "\"attribute_variants\".\"attributeid\""},
	Producttypeid:    whereHelpernull_String{field: "\"attribute_variants\".\"producttypeid\""},
	Variantselection: whereHelpernull_Bool{field: "\"attribute_variants\".\"variantselection\""},
	Sortorder:        whereHelpernull_Int{field: "\"attribute_variants\".\"sortorder\""},
}

// AttributeVariantRels is where relationship names are stored.
var AttributeVariantRels = struct {
	AttributeidAttribute                  string
	ProducttypeidProductType              string
	AssignmentidAssignedVariantAttributes string
}{
	AttributeidAttribute:                  "AttributeidAttribute",
	ProducttypeidProductType:              "ProducttypeidProductType",
	AssignmentidAssignedVariantAttributes: "AssignmentidAssignedVariantAttributes",
}

// attributeVariantR is where relationships are stored.
type attributeVariantR struct {
	AttributeidAttribute                  *Attribute                    `boil:"AttributeidAttribute" json:"AttributeidAttribute" toml:"AttributeidAttribute" yaml:"AttributeidAttribute"`
	ProducttypeidProductType              *ProductType                  `boil:"ProducttypeidProductType" json:"ProducttypeidProductType" toml:"ProducttypeidProductType" yaml:"ProducttypeidProductType"`
	AssignmentidAssignedVariantAttributes AssignedVariantAttributeSlice `boil:"AssignmentidAssignedVariantAttributes" json:"AssignmentidAssignedVariantAttributes" toml:"AssignmentidAssignedVariantAttributes" yaml:"AssignmentidAssignedVariantAttributes"`
}

// NewStruct creates a new relationship struct
func (*attributeVariantR) NewStruct() *attributeVariantR {
	return &attributeVariantR{}
}

func (r *attributeVariantR) GetAttributeidAttribute() *Attribute {
	if r == nil {
		return nil
	}
	return r.AttributeidAttribute
}

func (r *attributeVariantR) GetProducttypeidProductType() *ProductType {
	if r == nil {
		return nil
	}
	return r.ProducttypeidProductType
}

func (r *attributeVariantR) GetAssignmentidAssignedVariantAttributes() AssignedVariantAttributeSlice {
	if r == nil {
		return nil
	}
	return r.AssignmentidAssignedVariantAttributes
}

// attributeVariantL is where Load methods for each relationship are stored.
type attributeVariantL struct{}

var (
	attributeVariantAllColumns            = []string{"id", "attributeid", "producttypeid", "variantselection", "sortorder"}
	attributeVariantColumnsWithoutDefault = []string{"id"}
	attributeVariantColumnsWithDefault    = []string{"attributeid", "producttypeid", "variantselection", "sortorder"}
	attributeVariantPrimaryKeyColumns     = []string{"id"}
	attributeVariantGeneratedColumns      = []string{}
)

type (
	// AttributeVariantSlice is an alias for a slice of pointers to AttributeVariant.
	// This should almost always be used instead of []AttributeVariant.
	AttributeVariantSlice []*AttributeVariant
	// AttributeVariantHook is the signature for custom AttributeVariant hook methods
	AttributeVariantHook func(context.Context, boil.ContextExecutor, *AttributeVariant) error

	attributeVariantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributeVariantType                 = reflect.TypeOf(&AttributeVariant{})
	attributeVariantMapping              = queries.MakeStructMapping(attributeVariantType)
	attributeVariantPrimaryKeyMapping, _ = queries.BindMapping(attributeVariantType, attributeVariantMapping, attributeVariantPrimaryKeyColumns)
	attributeVariantInsertCacheMut       sync.RWMutex
	attributeVariantInsertCache          = make(map[string]insertCache)
	attributeVariantUpdateCacheMut       sync.RWMutex
	attributeVariantUpdateCache          = make(map[string]updateCache)
	attributeVariantUpsertCacheMut       sync.RWMutex
	attributeVariantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var attributeVariantAfterSelectHooks []AttributeVariantHook

var attributeVariantBeforeInsertHooks []AttributeVariantHook
var attributeVariantAfterInsertHooks []AttributeVariantHook

var attributeVariantBeforeUpdateHooks []AttributeVariantHook
var attributeVariantAfterUpdateHooks []AttributeVariantHook

var attributeVariantBeforeDeleteHooks []AttributeVariantHook
var attributeVariantAfterDeleteHooks []AttributeVariantHook

var attributeVariantBeforeUpsertHooks []AttributeVariantHook
var attributeVariantAfterUpsertHooks []AttributeVariantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AttributeVariant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeVariantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AttributeVariant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeVariantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AttributeVariant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeVariantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AttributeVariant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeVariantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AttributeVariant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeVariantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AttributeVariant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeVariantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AttributeVariant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeVariantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AttributeVariant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeVariantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AttributeVariant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeVariantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAttributeVariantHook registers your hook function for all future operations.
func AddAttributeVariantHook(hookPoint boil.HookPoint, attributeVariantHook AttributeVariantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		attributeVariantAfterSelectHooks = append(attributeVariantAfterSelectHooks, attributeVariantHook)
	case boil.BeforeInsertHook:
		attributeVariantBeforeInsertHooks = append(attributeVariantBeforeInsertHooks, attributeVariantHook)
	case boil.AfterInsertHook:
		attributeVariantAfterInsertHooks = append(attributeVariantAfterInsertHooks, attributeVariantHook)
	case boil.BeforeUpdateHook:
		attributeVariantBeforeUpdateHooks = append(attributeVariantBeforeUpdateHooks, attributeVariantHook)
	case boil.AfterUpdateHook:
		attributeVariantAfterUpdateHooks = append(attributeVariantAfterUpdateHooks, attributeVariantHook)
	case boil.BeforeDeleteHook:
		attributeVariantBeforeDeleteHooks = append(attributeVariantBeforeDeleteHooks, attributeVariantHook)
	case boil.AfterDeleteHook:
		attributeVariantAfterDeleteHooks = append(attributeVariantAfterDeleteHooks, attributeVariantHook)
	case boil.BeforeUpsertHook:
		attributeVariantBeforeUpsertHooks = append(attributeVariantBeforeUpsertHooks, attributeVariantHook)
	case boil.AfterUpsertHook:
		attributeVariantAfterUpsertHooks = append(attributeVariantAfterUpsertHooks, attributeVariantHook)
	}
}

// One returns a single attributeVariant record from the query.
func (q attributeVariantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AttributeVariant, error) {
	o := &AttributeVariant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for attribute_variants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AttributeVariant records from the query.
func (q attributeVariantQuery) All(ctx context.Context, exec boil.ContextExecutor) (AttributeVariantSlice, error) {
	var o []*AttributeVariant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AttributeVariant slice")
	}

	if len(attributeVariantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AttributeVariant records in the query.
func (q attributeVariantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count attribute_variants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attributeVariantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if attribute_variants exists")
	}

	return count > 0, nil
}

// AttributeidAttribute pointed to by the foreign key.
func (o *AttributeVariant) AttributeidAttribute(mods ...qm.QueryMod) attributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Attributeid),
	}

	queryMods = append(queryMods, mods...)

	return Attributes(queryMods...)
}

// ProducttypeidProductType pointed to by the foreign key.
func (o *AttributeVariant) ProducttypeidProductType(mods ...qm.QueryMod) productTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Producttypeid),
	}

	queryMods = append(queryMods, mods...)

	return ProductTypes(queryMods...)
}

// AssignmentidAssignedVariantAttributes retrieves all the assigned_variant_attribute's AssignedVariantAttributes with an executor via assignmentid column.
func (o *AttributeVariant) AssignmentidAssignedVariantAttributes(mods ...qm.QueryMod) assignedVariantAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_variant_attributes\".\"assignmentid\"=?", o.ID),
	)

	return AssignedVariantAttributes(queryMods...)
}

// LoadAttributeidAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attributeVariantL) LoadAttributeidAttribute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeVariant interface{}, mods queries.Applicator) error {
	var slice []*AttributeVariant
	var object *AttributeVariant

	if singular {
		var ok bool
		object, ok = maybeAttributeVariant.(*AttributeVariant)
		if !ok {
			object = new(AttributeVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeVariant))
			}
		}
	} else {
		s, ok := maybeAttributeVariant.(*[]*AttributeVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeVariantR{}
		}
		if !queries.IsNil(object.Attributeid) {
			args = append(args, object.Attributeid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Attributeid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Attributeid) {
				args = append(args, obj.Attributeid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attributes`),
		qm.WhereIn(`attributes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Attribute")
	}

	var resultSlice []*Attribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Attribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attributes")
	}

	if len(attributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AttributeidAttribute = foreign
		if foreign.R == nil {
			foreign.R = &attributeR{}
		}
		foreign.R.AttributeidAttributeVariants = append(foreign.R.AttributeidAttributeVariants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Attributeid, foreign.ID) {
				local.R.AttributeidAttribute = foreign
				if foreign.R == nil {
					foreign.R = &attributeR{}
				}
				foreign.R.AttributeidAttributeVariants = append(foreign.R.AttributeidAttributeVariants, local)
				break
			}
		}
	}

	return nil
}

// LoadProducttypeidProductType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attributeVariantL) LoadProducttypeidProductType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeVariant interface{}, mods queries.Applicator) error {
	var slice []*AttributeVariant
	var object *AttributeVariant

	if singular {
		var ok bool
		object, ok = maybeAttributeVariant.(*AttributeVariant)
		if !ok {
			object = new(AttributeVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeVariant))
			}
		}
	} else {
		s, ok := maybeAttributeVariant.(*[]*AttributeVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeVariantR{}
		}
		if !queries.IsNil(object.Producttypeid) {
			args = append(args, object.Producttypeid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Producttypeid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Producttypeid) {
				args = append(args, obj.Producttypeid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_types`),
		qm.WhereIn(`product_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductType")
	}

	var resultSlice []*ProductType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_types")
	}

	if len(productTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProducttypeidProductType = foreign
		if foreign.R == nil {
			foreign.R = &productTypeR{}
		}
		foreign.R.ProducttypeidAttributeVariants = append(foreign.R.ProducttypeidAttributeVariants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Producttypeid, foreign.ID) {
				local.R.ProducttypeidProductType = foreign
				if foreign.R == nil {
					foreign.R = &productTypeR{}
				}
				foreign.R.ProducttypeidAttributeVariants = append(foreign.R.ProducttypeidAttributeVariants, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignmentidAssignedVariantAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeVariantL) LoadAssignmentidAssignedVariantAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeVariant interface{}, mods queries.Applicator) error {
	var slice []*AttributeVariant
	var object *AttributeVariant

	if singular {
		var ok bool
		object, ok = maybeAttributeVariant.(*AttributeVariant)
		if !ok {
			object = new(AttributeVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeVariant))
			}
		}
	} else {
		s, ok := maybeAttributeVariant.(*[]*AttributeVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeVariantR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_variant_attributes`),
		qm.WhereIn(`assigned_variant_attributes.assignmentid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_variant_attributes")
	}

	var resultSlice []*AssignedVariantAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_variant_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_variant_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_variant_attributes")
	}

	if len(assignedVariantAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignmentidAssignedVariantAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedVariantAttributeR{}
			}
			foreign.R.AssignmentidAttributeVariant = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Assignmentid) {
				local.R.AssignmentidAssignedVariantAttributes = append(local.R.AssignmentidAssignedVariantAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &assignedVariantAttributeR{}
				}
				foreign.R.AssignmentidAttributeVariant = local
				break
			}
		}
	}

	return nil
}

// SetAttributeidAttribute of the attributeVariant to the related item.
// Sets o.R.AttributeidAttribute to related.
// Adds o to related.R.AttributeidAttributeVariants.
func (o *AttributeVariant) SetAttributeidAttribute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Attribute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attribute_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"attributeid"}),
		strmangle.WhereClause("\"", "\"", 2, attributeVariantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Attributeid, related.ID)
	if o.R == nil {
		o.R = &attributeVariantR{
			AttributeidAttribute: related,
		}
	} else {
		o.R.AttributeidAttribute = related
	}

	if related.R == nil {
		related.R = &attributeR{
			AttributeidAttributeVariants: AttributeVariantSlice{o},
		}
	} else {
		related.R.AttributeidAttributeVariants = append(related.R.AttributeidAttributeVariants, o)
	}

	return nil
}

// RemoveAttributeidAttribute relationship.
// Sets o.R.AttributeidAttribute to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AttributeVariant) RemoveAttributeidAttribute(ctx context.Context, exec boil.ContextExecutor, related *Attribute) error {
	var err error

	queries.SetScanner(&o.Attributeid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("attributeid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AttributeidAttribute = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AttributeidAttributeVariants {
		if queries.Equal(o.Attributeid, ri.Attributeid) {
			continue
		}

		ln := len(related.R.AttributeidAttributeVariants)
		if ln > 1 && i < ln-1 {
			related.R.AttributeidAttributeVariants[i] = related.R.AttributeidAttributeVariants[ln-1]
		}
		related.R.AttributeidAttributeVariants = related.R.AttributeidAttributeVariants[:ln-1]
		break
	}
	return nil
}

// SetProducttypeidProductType of the attributeVariant to the related item.
// Sets o.R.ProducttypeidProductType to related.
// Adds o to related.R.ProducttypeidAttributeVariants.
func (o *AttributeVariant) SetProducttypeidProductType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attribute_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"producttypeid"}),
		strmangle.WhereClause("\"", "\"", 2, attributeVariantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Producttypeid, related.ID)
	if o.R == nil {
		o.R = &attributeVariantR{
			ProducttypeidProductType: related,
		}
	} else {
		o.R.ProducttypeidProductType = related
	}

	if related.R == nil {
		related.R = &productTypeR{
			ProducttypeidAttributeVariants: AttributeVariantSlice{o},
		}
	} else {
		related.R.ProducttypeidAttributeVariants = append(related.R.ProducttypeidAttributeVariants, o)
	}

	return nil
}

// RemoveProducttypeidProductType relationship.
// Sets o.R.ProducttypeidProductType to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AttributeVariant) RemoveProducttypeidProductType(ctx context.Context, exec boil.ContextExecutor, related *ProductType) error {
	var err error

	queries.SetScanner(&o.Producttypeid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("producttypeid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProducttypeidProductType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProducttypeidAttributeVariants {
		if queries.Equal(o.Producttypeid, ri.Producttypeid) {
			continue
		}

		ln := len(related.R.ProducttypeidAttributeVariants)
		if ln > 1 && i < ln-1 {
			related.R.ProducttypeidAttributeVariants[i] = related.R.ProducttypeidAttributeVariants[ln-1]
		}
		related.R.ProducttypeidAttributeVariants = related.R.ProducttypeidAttributeVariants[:ln-1]
		break
	}
	return nil
}

// AddAssignmentidAssignedVariantAttributes adds the given related objects to the existing relationships
// of the attribute_variant, optionally inserting them as new records.
// Appends related to o.R.AssignmentidAssignedVariantAttributes.
// Sets related.R.AssignmentidAttributeVariant appropriately.
func (o *AttributeVariant) AddAssignmentidAssignedVariantAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedVariantAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Assignmentid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_variant_attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assignmentid"}),
				strmangle.WhereClause("\"", "\"", 2, assignedVariantAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Assignmentid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &attributeVariantR{
			AssignmentidAssignedVariantAttributes: related,
		}
	} else {
		o.R.AssignmentidAssignedVariantAttributes = append(o.R.AssignmentidAssignedVariantAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedVariantAttributeR{
				AssignmentidAttributeVariant: o,
			}
		} else {
			rel.R.AssignmentidAttributeVariant = o
		}
	}
	return nil
}

// SetAssignmentidAssignedVariantAttributes removes all previously related items of the
// attribute_variant replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssignmentidAttributeVariant's AssignmentidAssignedVariantAttributes accordingly.
// Replaces o.R.AssignmentidAssignedVariantAttributes with related.
// Sets related.R.AssignmentidAttributeVariant's AssignmentidAssignedVariantAttributes accordingly.
func (o *AttributeVariant) SetAssignmentidAssignedVariantAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedVariantAttribute) error {
	query := "update \"assigned_variant_attributes\" set \"assignmentid\" = null where \"assignmentid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssignmentidAssignedVariantAttributes {
			queries.SetScanner(&rel.Assignmentid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssignmentidAttributeVariant = nil
		}
		o.R.AssignmentidAssignedVariantAttributes = nil
	}

	return o.AddAssignmentidAssignedVariantAttributes(ctx, exec, insert, related...)
}

// RemoveAssignmentidAssignedVariantAttributes relationships from objects passed in.
// Removes related items from R.AssignmentidAssignedVariantAttributes (uses pointer comparison, removal does not keep order)
// Sets related.R.AssignmentidAttributeVariant.
func (o *AttributeVariant) RemoveAssignmentidAssignedVariantAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*AssignedVariantAttribute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Assignmentid, nil)
		if rel.R != nil {
			rel.R.AssignmentidAttributeVariant = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("assignmentid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssignmentidAssignedVariantAttributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssignmentidAssignedVariantAttributes)
			if ln > 1 && i < ln-1 {
				o.R.AssignmentidAssignedVariantAttributes[i] = o.R.AssignmentidAssignedVariantAttributes[ln-1]
			}
			o.R.AssignmentidAssignedVariantAttributes = o.R.AssignmentidAssignedVariantAttributes[:ln-1]
			break
		}
	}

	return nil
}

// AttributeVariants retrieves all the records using an executor.
func AttributeVariants(mods ...qm.QueryMod) attributeVariantQuery {
	mods = append(mods, qm.From("\"attribute_variants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"attribute_variants\".*"})
	}

	return attributeVariantQuery{q}
}

// FindAttributeVariant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttributeVariant(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AttributeVariant, error) {
	attributeVariantObj := &AttributeVariant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attribute_variants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, attributeVariantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from attribute_variants")
	}

	if err = attributeVariantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return attributeVariantObj, err
	}

	return attributeVariantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AttributeVariant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attribute_variants provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeVariantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributeVariantInsertCacheMut.RLock()
	cache, cached := attributeVariantInsertCache[key]
	attributeVariantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributeVariantAllColumns,
			attributeVariantColumnsWithDefault,
			attributeVariantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributeVariantType, attributeVariantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributeVariantType, attributeVariantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attribute_variants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attribute_variants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into attribute_variants")
	}

	if !cached {
		attributeVariantInsertCacheMut.Lock()
		attributeVariantInsertCache[key] = cache
		attributeVariantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AttributeVariant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AttributeVariant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	attributeVariantUpdateCacheMut.RLock()
	cache, cached := attributeVariantUpdateCache[key]
	attributeVariantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributeVariantAllColumns,
			attributeVariantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update attribute_variants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attribute_variants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributeVariantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributeVariantType, attributeVariantMapping, append(wl, attributeVariantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update attribute_variants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for attribute_variants")
	}

	if !cached {
		attributeVariantUpdateCacheMut.Lock()
		attributeVariantUpdateCache[key] = cache
		attributeVariantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q attributeVariantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for attribute_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for attribute_variants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributeVariantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attribute_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributeVariantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in attributeVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all attributeVariant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AttributeVariant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attribute_variants provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeVariantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributeVariantUpsertCacheMut.RLock()
	cache, cached := attributeVariantUpsertCache[key]
	attributeVariantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attributeVariantAllColumns,
			attributeVariantColumnsWithDefault,
			attributeVariantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			attributeVariantAllColumns,
			attributeVariantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert attribute_variants, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(attributeVariantPrimaryKeyColumns))
			copy(conflict, attributeVariantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"attribute_variants\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(attributeVariantType, attributeVariantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributeVariantType, attributeVariantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert attribute_variants")
	}

	if !cached {
		attributeVariantUpsertCacheMut.Lock()
		attributeVariantUpsertCache[key] = cache
		attributeVariantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AttributeVariant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AttributeVariant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AttributeVariant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributeVariantPrimaryKeyMapping)
	sql := "DELETE FROM \"attribute_variants\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from attribute_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for attribute_variants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attributeVariantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no attributeVariantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attribute_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attribute_variants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributeVariantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(attributeVariantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attribute_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeVariantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attributeVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attribute_variants")
	}

	if len(attributeVariantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AttributeVariant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAttributeVariant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributeVariantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributeVariantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attribute_variants\".* FROM \"attribute_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeVariantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AttributeVariantSlice")
	}

	*o = slice

	return nil
}

// AttributeVariantExists checks if the AttributeVariant row exists.
func AttributeVariantExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attribute_variants\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if attribute_variants exists")
	}

	return exists, nil
}

// Exists checks if the AttributeVariant row exists.
func (o *AttributeVariant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AttributeVariantExists(ctx, exec, o.ID)
}
