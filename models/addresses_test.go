// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAddresses(t *testing.T) {
	t.Parallel()

	query := Addresses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAddressesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Addresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddressesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Addresses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Addresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddressesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AddressSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Addresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddressesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AddressExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Address exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AddressExists to return true, but got false.")
	}
}

func testAddressesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	addressFound, err := FindAddress(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if addressFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAddressesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Addresses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAddressesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Addresses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAddressesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressOne := &Address{}
	addressTwo := &Address{}
	if err = randomize.Struct(seed, addressOne, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}
	if err = randomize.Struct(seed, addressTwo, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = addressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = addressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Addresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAddressesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	addressOne := &Address{}
	addressTwo := &Address{}
	if err = randomize.Struct(seed, addressOne, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}
	if err = randomize.Struct(seed, addressTwo, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = addressOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = addressTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Addresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func addressBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Address) error {
	*o = Address{}
	return nil
}

func addressAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Address) error {
	*o = Address{}
	return nil
}

func addressAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Address) error {
	*o = Address{}
	return nil
}

func addressBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Address) error {
	*o = Address{}
	return nil
}

func addressAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Address) error {
	*o = Address{}
	return nil
}

func addressBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Address) error {
	*o = Address{}
	return nil
}

func addressAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Address) error {
	*o = Address{}
	return nil
}

func addressBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Address) error {
	*o = Address{}
	return nil
}

func addressAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Address) error {
	*o = Address{}
	return nil
}

func testAddressesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Address{}
	o := &Address{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, addressDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Address object: %s", err)
	}

	AddAddressHook(boil.BeforeInsertHook, addressBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	addressBeforeInsertHooks = []AddressHook{}

	AddAddressHook(boil.AfterInsertHook, addressAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	addressAfterInsertHooks = []AddressHook{}

	AddAddressHook(boil.AfterSelectHook, addressAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	addressAfterSelectHooks = []AddressHook{}

	AddAddressHook(boil.BeforeUpdateHook, addressBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	addressBeforeUpdateHooks = []AddressHook{}

	AddAddressHook(boil.AfterUpdateHook, addressAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	addressAfterUpdateHooks = []AddressHook{}

	AddAddressHook(boil.BeforeDeleteHook, addressBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	addressBeforeDeleteHooks = []AddressHook{}

	AddAddressHook(boil.AfterDeleteHook, addressAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	addressAfterDeleteHooks = []AddressHook{}

	AddAddressHook(boil.BeforeUpsertHook, addressBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	addressBeforeUpsertHooks = []AddressHook{}

	AddAddressHook(boil.AfterUpsertHook, addressAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	addressAfterUpsertHooks = []AddressHook{}
}

func testAddressesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Addresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAddressesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(addressColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Addresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAddressToManyBillingaddressidCheckouts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Billingaddressid, a.ID)
	queries.Assign(&c.Billingaddressid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BillingaddressidCheckouts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Billingaddressid, b.Billingaddressid) {
			bFound = true
		}
		if queries.Equal(v.Billingaddressid, c.Billingaddressid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressSlice{&a}
	if err = a.L.LoadBillingaddressidCheckouts(ctx, tx, false, (*[]*Address)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BillingaddressidCheckouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BillingaddressidCheckouts = nil
	if err = a.L.LoadBillingaddressidCheckouts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BillingaddressidCheckouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAddressToManyBillingaddressidOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Billingaddressid, a.ID)
	queries.Assign(&c.Billingaddressid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BillingaddressidOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Billingaddressid, b.Billingaddressid) {
			bFound = true
		}
		if queries.Equal(v.Billingaddressid, c.Billingaddressid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressSlice{&a}
	if err = a.L.LoadBillingaddressidOrders(ctx, tx, false, (*[]*Address)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BillingaddressidOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BillingaddressidOrders = nil
	if err = a.L.LoadBillingaddressidOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BillingaddressidOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAddressToManyAddressidShops(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shopDBTypes, false, shopColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Addressid, a.ID)
	queries.Assign(&c.Addressid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AddressidShops().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Addressid, b.Addressid) {
			bFound = true
		}
		if queries.Equal(v.Addressid, c.Addressid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressSlice{&a}
	if err = a.L.LoadAddressidShops(ctx, tx, false, (*[]*Address)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AddressidShops); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AddressidShops = nil
	if err = a.L.LoadAddressidShops(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AddressidShops); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAddressToManyAddressidUserAddresses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c UserAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userAddressDBTypes, false, userAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userAddressDBTypes, false, userAddressColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Addressid, a.ID)
	queries.Assign(&c.Addressid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AddressidUserAddresses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Addressid, b.Addressid) {
			bFound = true
		}
		if queries.Equal(v.Addressid, c.Addressid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressSlice{&a}
	if err = a.L.LoadAddressidUserAddresses(ctx, tx, false, (*[]*Address)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AddressidUserAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AddressidUserAddresses = nil
	if err = a.L.LoadAddressidUserAddresses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AddressidUserAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAddressToManyDefaultshippingaddressidUsers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Defaultshippingaddressid, a.ID)
	queries.Assign(&c.Defaultshippingaddressid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DefaultshippingaddressidUsers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Defaultshippingaddressid, b.Defaultshippingaddressid) {
			bFound = true
		}
		if queries.Equal(v.Defaultshippingaddressid, c.Defaultshippingaddressid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressSlice{&a}
	if err = a.L.LoadDefaultshippingaddressidUsers(ctx, tx, false, (*[]*Address)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DefaultshippingaddressidUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DefaultshippingaddressidUsers = nil
	if err = a.L.LoadDefaultshippingaddressidUsers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DefaultshippingaddressidUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAddressToManyAddressidWarehouses(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Addressid, a.ID)
	queries.Assign(&c.Addressid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AddressidWarehouses().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Addressid, b.Addressid) {
			bFound = true
		}
		if queries.Equal(v.Addressid, c.Addressid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressSlice{&a}
	if err = a.L.LoadAddressidWarehouses(ctx, tx, false, (*[]*Address)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AddressidWarehouses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AddressidWarehouses = nil
	if err = a.L.LoadAddressidWarehouses(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AddressidWarehouses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAddressToManyAddOpBillingaddressidCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Checkout{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBillingaddressidCheckouts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Billingaddressid) {
			t.Error("foreign key was wrong value", a.ID, first.Billingaddressid)
		}
		if !queries.Equal(a.ID, second.Billingaddressid) {
			t.Error("foreign key was wrong value", a.ID, second.Billingaddressid)
		}

		if first.R.BillingaddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BillingaddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BillingaddressidCheckouts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BillingaddressidCheckouts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BillingaddressidCheckouts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressToManySetOpBillingaddressidCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetBillingaddressidCheckouts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.BillingaddressidCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetBillingaddressidCheckouts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.BillingaddressidCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Billingaddressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Billingaddressid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Billingaddressid) {
		t.Error("foreign key was wrong value", a.ID, d.Billingaddressid)
	}
	if !queries.Equal(a.ID, e.Billingaddressid) {
		t.Error("foreign key was wrong value", a.ID, e.Billingaddressid)
	}

	if b.R.BillingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BillingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BillingaddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.BillingaddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.BillingaddressidCheckouts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.BillingaddressidCheckouts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAddressToManyRemoveOpBillingaddressidCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddBillingaddressidCheckouts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.BillingaddressidCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveBillingaddressidCheckouts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.BillingaddressidCheckouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Billingaddressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Billingaddressid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.BillingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BillingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BillingaddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.BillingaddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.BillingaddressidCheckouts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.BillingaddressidCheckouts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.BillingaddressidCheckouts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAddressToManyAddOpBillingaddressidOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBillingaddressidOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Billingaddressid) {
			t.Error("foreign key was wrong value", a.ID, first.Billingaddressid)
		}
		if !queries.Equal(a.ID, second.Billingaddressid) {
			t.Error("foreign key was wrong value", a.ID, second.Billingaddressid)
		}

		if first.R.BillingaddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BillingaddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BillingaddressidOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BillingaddressidOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BillingaddressidOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressToManySetOpBillingaddressidOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetBillingaddressidOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.BillingaddressidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetBillingaddressidOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.BillingaddressidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Billingaddressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Billingaddressid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Billingaddressid) {
		t.Error("foreign key was wrong value", a.ID, d.Billingaddressid)
	}
	if !queries.Equal(a.ID, e.Billingaddressid) {
		t.Error("foreign key was wrong value", a.ID, e.Billingaddressid)
	}

	if b.R.BillingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BillingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BillingaddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.BillingaddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.BillingaddressidOrders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.BillingaddressidOrders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAddressToManyRemoveOpBillingaddressidOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddBillingaddressidOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.BillingaddressidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveBillingaddressidOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.BillingaddressidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Billingaddressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Billingaddressid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.BillingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.BillingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.BillingaddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.BillingaddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.BillingaddressidOrders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.BillingaddressidOrders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.BillingaddressidOrders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAddressToManyAddOpAddressidShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Shop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Shop{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAddressidShops(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Addressid) {
			t.Error("foreign key was wrong value", a.ID, first.Addressid)
		}
		if !queries.Equal(a.ID, second.Addressid) {
			t.Error("foreign key was wrong value", a.ID, second.Addressid)
		}

		if first.R.AddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AddressidShops[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AddressidShops[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AddressidShops().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressToManySetOpAddressidShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Shop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAddressidShops(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AddressidShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAddressidShops(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AddressidShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Addressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Addressid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Addressid) {
		t.Error("foreign key was wrong value", a.ID, d.Addressid)
	}
	if !queries.Equal(a.ID, e.Addressid) {
		t.Error("foreign key was wrong value", a.ID, e.Addressid)
	}

	if b.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AddressidShops[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AddressidShops[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAddressToManyRemoveOpAddressidShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Shop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Shop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shopDBTypes, false, strmangle.SetComplement(shopPrimaryKeyColumns, shopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAddressidShops(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AddressidShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAddressidShops(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AddressidShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Addressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Addressid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AddressidShops) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AddressidShops[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AddressidShops[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAddressToManyAddOpAddressidUserAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e UserAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userAddressDBTypes, false, strmangle.SetComplement(userAddressPrimaryKeyColumns, userAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserAddress{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAddressidUserAddresses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Addressid) {
			t.Error("foreign key was wrong value", a.ID, first.Addressid)
		}
		if !queries.Equal(a.ID, second.Addressid) {
			t.Error("foreign key was wrong value", a.ID, second.Addressid)
		}

		if first.R.AddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AddressidUserAddresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AddressidUserAddresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AddressidUserAddresses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressToManySetOpAddressidUserAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e UserAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userAddressDBTypes, false, strmangle.SetComplement(userAddressPrimaryKeyColumns, userAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAddressidUserAddresses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AddressidUserAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAddressidUserAddresses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AddressidUserAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Addressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Addressid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Addressid) {
		t.Error("foreign key was wrong value", a.ID, d.Addressid)
	}
	if !queries.Equal(a.ID, e.Addressid) {
		t.Error("foreign key was wrong value", a.ID, e.Addressid)
	}

	if b.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AddressidUserAddresses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AddressidUserAddresses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAddressToManyRemoveOpAddressidUserAddresses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e UserAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userAddressDBTypes, false, strmangle.SetComplement(userAddressPrimaryKeyColumns, userAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAddressidUserAddresses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AddressidUserAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAddressidUserAddresses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AddressidUserAddresses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Addressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Addressid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AddressidUserAddresses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AddressidUserAddresses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AddressidUserAddresses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAddressToManyAddOpDefaultshippingaddressidUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*User{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDefaultshippingaddressidUsers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Defaultshippingaddressid) {
			t.Error("foreign key was wrong value", a.ID, first.Defaultshippingaddressid)
		}
		if !queries.Equal(a.ID, second.Defaultshippingaddressid) {
			t.Error("foreign key was wrong value", a.ID, second.Defaultshippingaddressid)
		}

		if first.R.DefaultshippingaddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DefaultshippingaddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DefaultshippingaddressidUsers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DefaultshippingaddressidUsers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DefaultshippingaddressidUsers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressToManySetOpDefaultshippingaddressidUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDefaultshippingaddressidUsers(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DefaultshippingaddressidUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDefaultshippingaddressidUsers(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DefaultshippingaddressidUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Defaultshippingaddressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Defaultshippingaddressid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Defaultshippingaddressid) {
		t.Error("foreign key was wrong value", a.ID, d.Defaultshippingaddressid)
	}
	if !queries.Equal(a.ID, e.Defaultshippingaddressid) {
		t.Error("foreign key was wrong value", a.ID, e.Defaultshippingaddressid)
	}

	if b.R.DefaultshippingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DefaultshippingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DefaultshippingaddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.DefaultshippingaddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DefaultshippingaddressidUsers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DefaultshippingaddressidUsers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAddressToManyRemoveOpDefaultshippingaddressidUsers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*User{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDefaultshippingaddressidUsers(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DefaultshippingaddressidUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDefaultshippingaddressidUsers(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DefaultshippingaddressidUsers().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Defaultshippingaddressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Defaultshippingaddressid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.DefaultshippingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DefaultshippingaddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DefaultshippingaddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.DefaultshippingaddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DefaultshippingaddressidUsers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DefaultshippingaddressidUsers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DefaultshippingaddressidUsers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAddressToManyAddOpAddressidWarehouses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Warehouse{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Warehouse{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAddressidWarehouses(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Addressid) {
			t.Error("foreign key was wrong value", a.ID, first.Addressid)
		}
		if !queries.Equal(a.ID, second.Addressid) {
			t.Error("foreign key was wrong value", a.ID, second.Addressid)
		}

		if first.R.AddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AddressidAddress != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AddressidWarehouses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AddressidWarehouses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AddressidWarehouses().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressToManySetOpAddressidWarehouses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Warehouse{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAddressidWarehouses(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AddressidWarehouses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAddressidWarehouses(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AddressidWarehouses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Addressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Addressid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Addressid) {
		t.Error("foreign key was wrong value", a.ID, d.Addressid)
	}
	if !queries.Equal(a.ID, e.Addressid) {
		t.Error("foreign key was wrong value", a.ID, e.Addressid)
	}

	if b.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AddressidAddress != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AddressidWarehouses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AddressidWarehouses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAddressToManyRemoveOpAddressidWarehouses(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Address
	var b, c, d, e Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Warehouse{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAddressidWarehouses(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AddressidWarehouses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAddressidWarehouses(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AddressidWarehouses().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Addressid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Addressid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AddressidAddress != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AddressidAddress != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AddressidWarehouses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AddressidWarehouses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AddressidWarehouses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAddressesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAddressesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AddressSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAddressesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Addresses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	addressDBTypes = map[string]string{`ID`: `character varying`, `Firstname`: `character varying`, `Lastname`: `character varying`, `Companyname`: `character varying`, `Streetaddress1`: `character varying`, `Streetaddress2`: `character varying`, `City`: `character varying`, `Cityarea`: `character varying`, `Postalcode`: `character varying`, `Country`: `character varying`, `Countryarea`: `character varying`, `Phone`: `character varying`, `Createat`: `bigint`, `Updateat`: `bigint`}
	_              = bytes.MinRead
)

func testAddressesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(addressPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(addressAllColumns) == len(addressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Addresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, addressDBTypes, true, addressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAddressesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(addressAllColumns) == len(addressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Address{}
	if err = randomize.Struct(seed, o, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Addresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, addressDBTypes, true, addressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(addressAllColumns, addressPrimaryKeyColumns) {
		fields = addressAllColumns
	} else {
		fields = strmangle.SetComplement(
			addressAllColumns,
			addressPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AddressSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAddressesUpsert(t *testing.T) {
	t.Parallel()

	if len(addressAllColumns) == len(addressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Address{}
	if err = randomize.Struct(seed, &o, addressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Address: %s", err)
	}

	count, err := Addresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, addressDBTypes, false, addressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Address: %s", err)
	}

	count, err = Addresses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
