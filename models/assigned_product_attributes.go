// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssignedProductAttribute is an object representing the database table.
type AssignedProductAttribute struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Productid    null.String `boil:"productid" json:"productid,omitempty" toml:"productid" yaml:"productid,omitempty"`
	Assignmentid null.String `boil:"assignmentid" json:"assignmentid,omitempty" toml:"assignmentid" yaml:"assignmentid,omitempty"`

	R *assignedProductAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignedProductAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignedProductAttributeColumns = struct {
	ID           string
	Productid    string
	Assignmentid string
}{
	ID:           "id",
	Productid:    "productid",
	Assignmentid: "assignmentid",
}

var AssignedProductAttributeTableColumns = struct {
	ID           string
	Productid    string
	Assignmentid string
}{
	ID:           "assigned_product_attributes.id",
	Productid:    "assigned_product_attributes.productid",
	Assignmentid: "assigned_product_attributes.assignmentid",
}

// Generated where

var AssignedProductAttributeWhere = struct {
	ID           whereHelperstring
	Productid    whereHelpernull_String
	Assignmentid whereHelpernull_String
}{
	ID:           whereHelperstring{field: "\"assigned_product_attributes\".\"id\""},
	Productid:    whereHelpernull_String{field: "\"assigned_product_attributes\".\"productid\""},
	Assignmentid: whereHelpernull_String{field: "\"assigned_product_attributes\".\"assignmentid\""},
}

// AssignedProductAttributeRels is where relationship names are stored.
var AssignedProductAttributeRels = struct {
	AssignmentidAttributeProduct               string
	ProductidProduct                           string
	AssignmentidAssignedProductAttributeValues string
}{
	AssignmentidAttributeProduct:               "AssignmentidAttributeProduct",
	ProductidProduct:                           "ProductidProduct",
	AssignmentidAssignedProductAttributeValues: "AssignmentidAssignedProductAttributeValues",
}

// assignedProductAttributeR is where relationships are stored.
type assignedProductAttributeR struct {
	AssignmentidAttributeProduct               *AttributeProduct                  `boil:"AssignmentidAttributeProduct" json:"AssignmentidAttributeProduct" toml:"AssignmentidAttributeProduct" yaml:"AssignmentidAttributeProduct"`
	ProductidProduct                           *Product                           `boil:"ProductidProduct" json:"ProductidProduct" toml:"ProductidProduct" yaml:"ProductidProduct"`
	AssignmentidAssignedProductAttributeValues AssignedProductAttributeValueSlice `boil:"AssignmentidAssignedProductAttributeValues" json:"AssignmentidAssignedProductAttributeValues" toml:"AssignmentidAssignedProductAttributeValues" yaml:"AssignmentidAssignedProductAttributeValues"`
}

// NewStruct creates a new relationship struct
func (*assignedProductAttributeR) NewStruct() *assignedProductAttributeR {
	return &assignedProductAttributeR{}
}

func (r *assignedProductAttributeR) GetAssignmentidAttributeProduct() *AttributeProduct {
	if r == nil {
		return nil
	}
	return r.AssignmentidAttributeProduct
}

func (r *assignedProductAttributeR) GetProductidProduct() *Product {
	if r == nil {
		return nil
	}
	return r.ProductidProduct
}

func (r *assignedProductAttributeR) GetAssignmentidAssignedProductAttributeValues() AssignedProductAttributeValueSlice {
	if r == nil {
		return nil
	}
	return r.AssignmentidAssignedProductAttributeValues
}

// assignedProductAttributeL is where Load methods for each relationship are stored.
type assignedProductAttributeL struct{}

var (
	assignedProductAttributeAllColumns            = []string{"id", "productid", "assignmentid"}
	assignedProductAttributeColumnsWithoutDefault = []string{"id"}
	assignedProductAttributeColumnsWithDefault    = []string{"productid", "assignmentid"}
	assignedProductAttributePrimaryKeyColumns     = []string{"id"}
	assignedProductAttributeGeneratedColumns      = []string{}
)

type (
	// AssignedProductAttributeSlice is an alias for a slice of pointers to AssignedProductAttribute.
	// This should almost always be used instead of []AssignedProductAttribute.
	AssignedProductAttributeSlice []*AssignedProductAttribute
	// AssignedProductAttributeHook is the signature for custom AssignedProductAttribute hook methods
	AssignedProductAttributeHook func(context.Context, boil.ContextExecutor, *AssignedProductAttribute) error

	assignedProductAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignedProductAttributeType                 = reflect.TypeOf(&AssignedProductAttribute{})
	assignedProductAttributeMapping              = queries.MakeStructMapping(assignedProductAttributeType)
	assignedProductAttributePrimaryKeyMapping, _ = queries.BindMapping(assignedProductAttributeType, assignedProductAttributeMapping, assignedProductAttributePrimaryKeyColumns)
	assignedProductAttributeInsertCacheMut       sync.RWMutex
	assignedProductAttributeInsertCache          = make(map[string]insertCache)
	assignedProductAttributeUpdateCacheMut       sync.RWMutex
	assignedProductAttributeUpdateCache          = make(map[string]updateCache)
	assignedProductAttributeUpsertCacheMut       sync.RWMutex
	assignedProductAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assignedProductAttributeAfterSelectHooks []AssignedProductAttributeHook

var assignedProductAttributeBeforeInsertHooks []AssignedProductAttributeHook
var assignedProductAttributeAfterInsertHooks []AssignedProductAttributeHook

var assignedProductAttributeBeforeUpdateHooks []AssignedProductAttributeHook
var assignedProductAttributeAfterUpdateHooks []AssignedProductAttributeHook

var assignedProductAttributeBeforeDeleteHooks []AssignedProductAttributeHook
var assignedProductAttributeAfterDeleteHooks []AssignedProductAttributeHook

var assignedProductAttributeBeforeUpsertHooks []AssignedProductAttributeHook
var assignedProductAttributeAfterUpsertHooks []AssignedProductAttributeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssignedProductAttribute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssignedProductAttribute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssignedProductAttribute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssignedProductAttribute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssignedProductAttribute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssignedProductAttribute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssignedProductAttribute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssignedProductAttribute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssignedProductAttribute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssignedProductAttributeHook registers your hook function for all future operations.
func AddAssignedProductAttributeHook(hookPoint boil.HookPoint, assignedProductAttributeHook AssignedProductAttributeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assignedProductAttributeAfterSelectHooks = append(assignedProductAttributeAfterSelectHooks, assignedProductAttributeHook)
	case boil.BeforeInsertHook:
		assignedProductAttributeBeforeInsertHooks = append(assignedProductAttributeBeforeInsertHooks, assignedProductAttributeHook)
	case boil.AfterInsertHook:
		assignedProductAttributeAfterInsertHooks = append(assignedProductAttributeAfterInsertHooks, assignedProductAttributeHook)
	case boil.BeforeUpdateHook:
		assignedProductAttributeBeforeUpdateHooks = append(assignedProductAttributeBeforeUpdateHooks, assignedProductAttributeHook)
	case boil.AfterUpdateHook:
		assignedProductAttributeAfterUpdateHooks = append(assignedProductAttributeAfterUpdateHooks, assignedProductAttributeHook)
	case boil.BeforeDeleteHook:
		assignedProductAttributeBeforeDeleteHooks = append(assignedProductAttributeBeforeDeleteHooks, assignedProductAttributeHook)
	case boil.AfterDeleteHook:
		assignedProductAttributeAfterDeleteHooks = append(assignedProductAttributeAfterDeleteHooks, assignedProductAttributeHook)
	case boil.BeforeUpsertHook:
		assignedProductAttributeBeforeUpsertHooks = append(assignedProductAttributeBeforeUpsertHooks, assignedProductAttributeHook)
	case boil.AfterUpsertHook:
		assignedProductAttributeAfterUpsertHooks = append(assignedProductAttributeAfterUpsertHooks, assignedProductAttributeHook)
	}
}

// One returns a single assignedProductAttribute record from the query.
func (q assignedProductAttributeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssignedProductAttribute, error) {
	o := &AssignedProductAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for assigned_product_attributes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssignedProductAttribute records from the query.
func (q assignedProductAttributeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssignedProductAttributeSlice, error) {
	var o []*AssignedProductAttribute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssignedProductAttribute slice")
	}

	if len(assignedProductAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssignedProductAttribute records in the query.
func (q assignedProductAttributeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assigned_product_attributes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignedProductAttributeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assigned_product_attributes exists")
	}

	return count > 0, nil
}

// AssignmentidAttributeProduct pointed to by the foreign key.
func (o *AssignedProductAttribute) AssignmentidAttributeProduct(mods ...qm.QueryMod) attributeProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Assignmentid),
	}

	queryMods = append(queryMods, mods...)

	return AttributeProducts(queryMods...)
}

// ProductidProduct pointed to by the foreign key.
func (o *AssignedProductAttribute) ProductidProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Productid),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// AssignmentidAssignedProductAttributeValues retrieves all the assigned_product_attribute_value's AssignedProductAttributeValues with an executor via assignmentid column.
func (o *AssignedProductAttribute) AssignmentidAssignedProductAttributeValues(mods ...qm.QueryMod) assignedProductAttributeValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_product_attribute_values\".\"assignmentid\"=?", o.ID),
	)

	return AssignedProductAttributeValues(queryMods...)
}

// LoadAssignmentidAttributeProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedProductAttributeL) LoadAssignmentidAttributeProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedProductAttribute interface{}, mods queries.Applicator) error {
	var slice []*AssignedProductAttribute
	var object *AssignedProductAttribute

	if singular {
		var ok bool
		object, ok = maybeAssignedProductAttribute.(*AssignedProductAttribute)
		if !ok {
			object = new(AssignedProductAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedProductAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedProductAttribute))
			}
		}
	} else {
		s, ok := maybeAssignedProductAttribute.(*[]*AssignedProductAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedProductAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedProductAttribute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedProductAttributeR{}
		}
		if !queries.IsNil(object.Assignmentid) {
			args = append(args, object.Assignmentid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedProductAttributeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Assignmentid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Assignmentid) {
				args = append(args, obj.Assignmentid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attribute_products`),
		qm.WhereIn(`attribute_products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AttributeProduct")
	}

	var resultSlice []*AttributeProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AttributeProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attribute_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_products")
	}

	if len(attributeProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AssignmentidAttributeProduct = foreign
		if foreign.R == nil {
			foreign.R = &attributeProductR{}
		}
		foreign.R.AssignmentidAssignedProductAttributes = append(foreign.R.AssignmentidAssignedProductAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Assignmentid, foreign.ID) {
				local.R.AssignmentidAttributeProduct = foreign
				if foreign.R == nil {
					foreign.R = &attributeProductR{}
				}
				foreign.R.AssignmentidAssignedProductAttributes = append(foreign.R.AssignmentidAssignedProductAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadProductidProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedProductAttributeL) LoadProductidProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedProductAttribute interface{}, mods queries.Applicator) error {
	var slice []*AssignedProductAttribute
	var object *AssignedProductAttribute

	if singular {
		var ok bool
		object, ok = maybeAssignedProductAttribute.(*AssignedProductAttribute)
		if !ok {
			object = new(AssignedProductAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedProductAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedProductAttribute))
			}
		}
	} else {
		s, ok := maybeAssignedProductAttribute.(*[]*AssignedProductAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedProductAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedProductAttribute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedProductAttributeR{}
		}
		if !queries.IsNil(object.Productid) {
			args = append(args, object.Productid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedProductAttributeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Productid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Productid) {
				args = append(args, obj.Productid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductidProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductidAssignedProductAttributes = append(foreign.R.ProductidAssignedProductAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Productid, foreign.ID) {
				local.R.ProductidProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductidAssignedProductAttributes = append(foreign.R.ProductidAssignedProductAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignmentidAssignedProductAttributeValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assignedProductAttributeL) LoadAssignmentidAssignedProductAttributeValues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedProductAttribute interface{}, mods queries.Applicator) error {
	var slice []*AssignedProductAttribute
	var object *AssignedProductAttribute

	if singular {
		var ok bool
		object, ok = maybeAssignedProductAttribute.(*AssignedProductAttribute)
		if !ok {
			object = new(AssignedProductAttribute)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedProductAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedProductAttribute))
			}
		}
	} else {
		s, ok := maybeAssignedProductAttribute.(*[]*AssignedProductAttribute)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedProductAttribute)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedProductAttribute))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedProductAttributeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedProductAttributeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_product_attribute_values`),
		qm.WhereIn(`assigned_product_attribute_values.assignmentid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_product_attribute_values")
	}

	var resultSlice []*AssignedProductAttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_product_attribute_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_product_attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_product_attribute_values")
	}

	if len(assignedProductAttributeValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignmentidAssignedProductAttributeValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedProductAttributeValueR{}
			}
			foreign.R.AssignmentidAssignedProductAttribute = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Assignmentid) {
				local.R.AssignmentidAssignedProductAttributeValues = append(local.R.AssignmentidAssignedProductAttributeValues, foreign)
				if foreign.R == nil {
					foreign.R = &assignedProductAttributeValueR{}
				}
				foreign.R.AssignmentidAssignedProductAttribute = local
				break
			}
		}
	}

	return nil
}

// SetAssignmentidAttributeProduct of the assignedProductAttribute to the related item.
// Sets o.R.AssignmentidAttributeProduct to related.
// Adds o to related.R.AssignmentidAssignedProductAttributes.
func (o *AssignedProductAttribute) SetAssignmentidAttributeProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AttributeProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_product_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"assignmentid"}),
		strmangle.WhereClause("\"", "\"", 2, assignedProductAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Assignmentid, related.ID)
	if o.R == nil {
		o.R = &assignedProductAttributeR{
			AssignmentidAttributeProduct: related,
		}
	} else {
		o.R.AssignmentidAttributeProduct = related
	}

	if related.R == nil {
		related.R = &attributeProductR{
			AssignmentidAssignedProductAttributes: AssignedProductAttributeSlice{o},
		}
	} else {
		related.R.AssignmentidAssignedProductAttributes = append(related.R.AssignmentidAssignedProductAttributes, o)
	}

	return nil
}

// RemoveAssignmentidAttributeProduct relationship.
// Sets o.R.AssignmentidAttributeProduct to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AssignedProductAttribute) RemoveAssignmentidAttributeProduct(ctx context.Context, exec boil.ContextExecutor, related *AttributeProduct) error {
	var err error

	queries.SetScanner(&o.Assignmentid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("assignmentid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AssignmentidAttributeProduct = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AssignmentidAssignedProductAttributes {
		if queries.Equal(o.Assignmentid, ri.Assignmentid) {
			continue
		}

		ln := len(related.R.AssignmentidAssignedProductAttributes)
		if ln > 1 && i < ln-1 {
			related.R.AssignmentidAssignedProductAttributes[i] = related.R.AssignmentidAssignedProductAttributes[ln-1]
		}
		related.R.AssignmentidAssignedProductAttributes = related.R.AssignmentidAssignedProductAttributes[:ln-1]
		break
	}
	return nil
}

// SetProductidProduct of the assignedProductAttribute to the related item.
// Sets o.R.ProductidProduct to related.
// Adds o to related.R.ProductidAssignedProductAttributes.
func (o *AssignedProductAttribute) SetProductidProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_product_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
		strmangle.WhereClause("\"", "\"", 2, assignedProductAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Productid, related.ID)
	if o.R == nil {
		o.R = &assignedProductAttributeR{
			ProductidProduct: related,
		}
	} else {
		o.R.ProductidProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductidAssignedProductAttributes: AssignedProductAttributeSlice{o},
		}
	} else {
		related.R.ProductidAssignedProductAttributes = append(related.R.ProductidAssignedProductAttributes, o)
	}

	return nil
}

// RemoveProductidProduct relationship.
// Sets o.R.ProductidProduct to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AssignedProductAttribute) RemoveProductidProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.Productid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductidProduct = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductidAssignedProductAttributes {
		if queries.Equal(o.Productid, ri.Productid) {
			continue
		}

		ln := len(related.R.ProductidAssignedProductAttributes)
		if ln > 1 && i < ln-1 {
			related.R.ProductidAssignedProductAttributes[i] = related.R.ProductidAssignedProductAttributes[ln-1]
		}
		related.R.ProductidAssignedProductAttributes = related.R.ProductidAssignedProductAttributes[:ln-1]
		break
	}
	return nil
}

// AddAssignmentidAssignedProductAttributeValues adds the given related objects to the existing relationships
// of the assigned_product_attribute, optionally inserting them as new records.
// Appends related to o.R.AssignmentidAssignedProductAttributeValues.
// Sets related.R.AssignmentidAssignedProductAttribute appropriately.
func (o *AssignedProductAttribute) AddAssignmentidAssignedProductAttributeValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedProductAttributeValue) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Assignmentid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_product_attribute_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assignmentid"}),
				strmangle.WhereClause("\"", "\"", 2, assignedProductAttributeValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Assignmentid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &assignedProductAttributeR{
			AssignmentidAssignedProductAttributeValues: related,
		}
	} else {
		o.R.AssignmentidAssignedProductAttributeValues = append(o.R.AssignmentidAssignedProductAttributeValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedProductAttributeValueR{
				AssignmentidAssignedProductAttribute: o,
			}
		} else {
			rel.R.AssignmentidAssignedProductAttribute = o
		}
	}
	return nil
}

// SetAssignmentidAssignedProductAttributeValues removes all previously related items of the
// assigned_product_attribute replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssignmentidAssignedProductAttribute's AssignmentidAssignedProductAttributeValues accordingly.
// Replaces o.R.AssignmentidAssignedProductAttributeValues with related.
// Sets related.R.AssignmentidAssignedProductAttribute's AssignmentidAssignedProductAttributeValues accordingly.
func (o *AssignedProductAttribute) SetAssignmentidAssignedProductAttributeValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedProductAttributeValue) error {
	query := "update \"assigned_product_attribute_values\" set \"assignmentid\" = null where \"assignmentid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssignmentidAssignedProductAttributeValues {
			queries.SetScanner(&rel.Assignmentid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssignmentidAssignedProductAttribute = nil
		}
		o.R.AssignmentidAssignedProductAttributeValues = nil
	}

	return o.AddAssignmentidAssignedProductAttributeValues(ctx, exec, insert, related...)
}

// RemoveAssignmentidAssignedProductAttributeValues relationships from objects passed in.
// Removes related items from R.AssignmentidAssignedProductAttributeValues (uses pointer comparison, removal does not keep order)
// Sets related.R.AssignmentidAssignedProductAttribute.
func (o *AssignedProductAttribute) RemoveAssignmentidAssignedProductAttributeValues(ctx context.Context, exec boil.ContextExecutor, related ...*AssignedProductAttributeValue) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Assignmentid, nil)
		if rel.R != nil {
			rel.R.AssignmentidAssignedProductAttribute = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("assignmentid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssignmentidAssignedProductAttributeValues {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssignmentidAssignedProductAttributeValues)
			if ln > 1 && i < ln-1 {
				o.R.AssignmentidAssignedProductAttributeValues[i] = o.R.AssignmentidAssignedProductAttributeValues[ln-1]
			}
			o.R.AssignmentidAssignedProductAttributeValues = o.R.AssignmentidAssignedProductAttributeValues[:ln-1]
			break
		}
	}

	return nil
}

// AssignedProductAttributes retrieves all the records using an executor.
func AssignedProductAttributes(mods ...qm.QueryMod) assignedProductAttributeQuery {
	mods = append(mods, qm.From("\"assigned_product_attributes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assigned_product_attributes\".*"})
	}

	return assignedProductAttributeQuery{q}
}

// FindAssignedProductAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignedProductAttribute(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AssignedProductAttribute, error) {
	assignedProductAttributeObj := &AssignedProductAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assigned_product_attributes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assignedProductAttributeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from assigned_product_attributes")
	}

	if err = assignedProductAttributeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assignedProductAttributeObj, err
	}

	return assignedProductAttributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssignedProductAttribute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assigned_product_attributes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedProductAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignedProductAttributeInsertCacheMut.RLock()
	cache, cached := assignedProductAttributeInsertCache[key]
	assignedProductAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignedProductAttributeAllColumns,
			assignedProductAttributeColumnsWithDefault,
			assignedProductAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assignedProductAttributeType, assignedProductAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignedProductAttributeType, assignedProductAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assigned_product_attributes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assigned_product_attributes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assigned_product_attributes")
	}

	if !cached {
		assignedProductAttributeInsertCacheMut.Lock()
		assignedProductAttributeInsertCache[key] = cache
		assignedProductAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssignedProductAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssignedProductAttribute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assignedProductAttributeUpdateCacheMut.RLock()
	cache, cached := assignedProductAttributeUpdateCache[key]
	assignedProductAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignedProductAttributeAllColumns,
			assignedProductAttributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assigned_product_attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assigned_product_attributes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignedProductAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignedProductAttributeType, assignedProductAttributeMapping, append(wl, assignedProductAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assigned_product_attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assigned_product_attributes")
	}

	if !cached {
		assignedProductAttributeUpdateCacheMut.Lock()
		assignedProductAttributeUpdateCache[key] = cache
		assignedProductAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assignedProductAttributeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assigned_product_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assigned_product_attributes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignedProductAttributeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedProductAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assigned_product_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignedProductAttributePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assignedProductAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assignedProductAttribute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssignedProductAttribute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assigned_product_attributes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedProductAttributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignedProductAttributeUpsertCacheMut.RLock()
	cache, cached := assignedProductAttributeUpsertCache[key]
	assignedProductAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assignedProductAttributeAllColumns,
			assignedProductAttributeColumnsWithDefault,
			assignedProductAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignedProductAttributeAllColumns,
			assignedProductAttributePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assigned_product_attributes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assignedProductAttributePrimaryKeyColumns))
			copy(conflict, assignedProductAttributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"assigned_product_attributes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assignedProductAttributeType, assignedProductAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignedProductAttributeType, assignedProductAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assigned_product_attributes")
	}

	if !cached {
		assignedProductAttributeUpsertCacheMut.Lock()
		assignedProductAttributeUpsertCache[key] = cache
		assignedProductAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssignedProductAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssignedProductAttribute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssignedProductAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignedProductAttributePrimaryKeyMapping)
	sql := "DELETE FROM \"assigned_product_attributes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assigned_product_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assigned_product_attributes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignedProductAttributeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assignedProductAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assigned_product_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assigned_product_attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignedProductAttributeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assignedProductAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedProductAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assigned_product_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedProductAttributePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignedProductAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assigned_product_attributes")
	}

	if len(assignedProductAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssignedProductAttribute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssignedProductAttribute(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignedProductAttributeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignedProductAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedProductAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assigned_product_attributes\".* FROM \"assigned_product_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedProductAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssignedProductAttributeSlice")
	}

	*o = slice

	return nil
}

// AssignedProductAttributeExists checks if the AssignedProductAttribute row exists.
func AssignedProductAttributeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assigned_product_attributes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assigned_product_attributes exists")
	}

	return exists, nil
}

// Exists checks if the AssignedProductAttribute row exists.
func (o *AssignedProductAttribute) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssignedProductAttributeExists(ctx, exec, o.ID)
}
