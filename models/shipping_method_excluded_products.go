// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingMethodExcludedProduct is an object representing the database table.
type ShippingMethodExcludedProduct struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Shippingmethodid null.String `boil:"shippingmethodid" json:"shippingmethodid,omitempty" toml:"shippingmethodid" yaml:"shippingmethodid,omitempty"`
	Productid        null.String `boil:"productid" json:"productid,omitempty" toml:"productid" yaml:"productid,omitempty"`

	R *shippingMethodExcludedProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingMethodExcludedProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingMethodExcludedProductColumns = struct {
	ID               string
	Shippingmethodid string
	Productid        string
}{
	ID:               "id",
	Shippingmethodid: "shippingmethodid",
	Productid:        "productid",
}

var ShippingMethodExcludedProductTableColumns = struct {
	ID               string
	Shippingmethodid string
	Productid        string
}{
	ID:               "shipping_method_excluded_products.id",
	Shippingmethodid: "shipping_method_excluded_products.shippingmethodid",
	Productid:        "shipping_method_excluded_products.productid",
}

// Generated where

var ShippingMethodExcludedProductWhere = struct {
	ID               whereHelperstring
	Shippingmethodid whereHelpernull_String
	Productid        whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"shipping_method_excluded_products\".\"id\""},
	Shippingmethodid: whereHelpernull_String{field: "\"shipping_method_excluded_products\".\"shippingmethodid\""},
	Productid:        whereHelpernull_String{field: "\"shipping_method_excluded_products\".\"productid\""},
}

// ShippingMethodExcludedProductRels is where relationship names are stored.
var ShippingMethodExcludedProductRels = struct {
	ProductidProduct               string
	ShippingmethodidShippingMethod string
}{
	ProductidProduct:               "ProductidProduct",
	ShippingmethodidShippingMethod: "ShippingmethodidShippingMethod",
}

// shippingMethodExcludedProductR is where relationships are stored.
type shippingMethodExcludedProductR struct {
	ProductidProduct               *Product        `boil:"ProductidProduct" json:"ProductidProduct" toml:"ProductidProduct" yaml:"ProductidProduct"`
	ShippingmethodidShippingMethod *ShippingMethod `boil:"ShippingmethodidShippingMethod" json:"ShippingmethodidShippingMethod" toml:"ShippingmethodidShippingMethod" yaml:"ShippingmethodidShippingMethod"`
}

// NewStruct creates a new relationship struct
func (*shippingMethodExcludedProductR) NewStruct() *shippingMethodExcludedProductR {
	return &shippingMethodExcludedProductR{}
}

func (r *shippingMethodExcludedProductR) GetProductidProduct() *Product {
	if r == nil {
		return nil
	}
	return r.ProductidProduct
}

func (r *shippingMethodExcludedProductR) GetShippingmethodidShippingMethod() *ShippingMethod {
	if r == nil {
		return nil
	}
	return r.ShippingmethodidShippingMethod
}

// shippingMethodExcludedProductL is where Load methods for each relationship are stored.
type shippingMethodExcludedProductL struct{}

var (
	shippingMethodExcludedProductAllColumns            = []string{"id", "shippingmethodid", "productid"}
	shippingMethodExcludedProductColumnsWithoutDefault = []string{"id"}
	shippingMethodExcludedProductColumnsWithDefault    = []string{"shippingmethodid", "productid"}
	shippingMethodExcludedProductPrimaryKeyColumns     = []string{"id"}
	shippingMethodExcludedProductGeneratedColumns      = []string{}
)

type (
	// ShippingMethodExcludedProductSlice is an alias for a slice of pointers to ShippingMethodExcludedProduct.
	// This should almost always be used instead of []ShippingMethodExcludedProduct.
	ShippingMethodExcludedProductSlice []*ShippingMethodExcludedProduct
	// ShippingMethodExcludedProductHook is the signature for custom ShippingMethodExcludedProduct hook methods
	ShippingMethodExcludedProductHook func(context.Context, boil.ContextExecutor, *ShippingMethodExcludedProduct) error

	shippingMethodExcludedProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingMethodExcludedProductType                 = reflect.TypeOf(&ShippingMethodExcludedProduct{})
	shippingMethodExcludedProductMapping              = queries.MakeStructMapping(shippingMethodExcludedProductType)
	shippingMethodExcludedProductPrimaryKeyMapping, _ = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, shippingMethodExcludedProductPrimaryKeyColumns)
	shippingMethodExcludedProductInsertCacheMut       sync.RWMutex
	shippingMethodExcludedProductInsertCache          = make(map[string]insertCache)
	shippingMethodExcludedProductUpdateCacheMut       sync.RWMutex
	shippingMethodExcludedProductUpdateCache          = make(map[string]updateCache)
	shippingMethodExcludedProductUpsertCacheMut       sync.RWMutex
	shippingMethodExcludedProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shippingMethodExcludedProductAfterSelectHooks []ShippingMethodExcludedProductHook

var shippingMethodExcludedProductBeforeInsertHooks []ShippingMethodExcludedProductHook
var shippingMethodExcludedProductAfterInsertHooks []ShippingMethodExcludedProductHook

var shippingMethodExcludedProductBeforeUpdateHooks []ShippingMethodExcludedProductHook
var shippingMethodExcludedProductAfterUpdateHooks []ShippingMethodExcludedProductHook

var shippingMethodExcludedProductBeforeDeleteHooks []ShippingMethodExcludedProductHook
var shippingMethodExcludedProductAfterDeleteHooks []ShippingMethodExcludedProductHook

var shippingMethodExcludedProductBeforeUpsertHooks []ShippingMethodExcludedProductHook
var shippingMethodExcludedProductAfterUpsertHooks []ShippingMethodExcludedProductHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShippingMethodExcludedProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodExcludedProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShippingMethodExcludedProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodExcludedProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShippingMethodExcludedProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodExcludedProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShippingMethodExcludedProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodExcludedProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShippingMethodExcludedProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodExcludedProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShippingMethodExcludedProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodExcludedProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShippingMethodExcludedProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodExcludedProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShippingMethodExcludedProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodExcludedProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShippingMethodExcludedProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodExcludedProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShippingMethodExcludedProductHook registers your hook function for all future operations.
func AddShippingMethodExcludedProductHook(hookPoint boil.HookPoint, shippingMethodExcludedProductHook ShippingMethodExcludedProductHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shippingMethodExcludedProductAfterSelectHooks = append(shippingMethodExcludedProductAfterSelectHooks, shippingMethodExcludedProductHook)
	case boil.BeforeInsertHook:
		shippingMethodExcludedProductBeforeInsertHooks = append(shippingMethodExcludedProductBeforeInsertHooks, shippingMethodExcludedProductHook)
	case boil.AfterInsertHook:
		shippingMethodExcludedProductAfterInsertHooks = append(shippingMethodExcludedProductAfterInsertHooks, shippingMethodExcludedProductHook)
	case boil.BeforeUpdateHook:
		shippingMethodExcludedProductBeforeUpdateHooks = append(shippingMethodExcludedProductBeforeUpdateHooks, shippingMethodExcludedProductHook)
	case boil.AfterUpdateHook:
		shippingMethodExcludedProductAfterUpdateHooks = append(shippingMethodExcludedProductAfterUpdateHooks, shippingMethodExcludedProductHook)
	case boil.BeforeDeleteHook:
		shippingMethodExcludedProductBeforeDeleteHooks = append(shippingMethodExcludedProductBeforeDeleteHooks, shippingMethodExcludedProductHook)
	case boil.AfterDeleteHook:
		shippingMethodExcludedProductAfterDeleteHooks = append(shippingMethodExcludedProductAfterDeleteHooks, shippingMethodExcludedProductHook)
	case boil.BeforeUpsertHook:
		shippingMethodExcludedProductBeforeUpsertHooks = append(shippingMethodExcludedProductBeforeUpsertHooks, shippingMethodExcludedProductHook)
	case boil.AfterUpsertHook:
		shippingMethodExcludedProductAfterUpsertHooks = append(shippingMethodExcludedProductAfterUpsertHooks, shippingMethodExcludedProductHook)
	}
}

// One returns a single shippingMethodExcludedProduct record from the query.
func (q shippingMethodExcludedProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShippingMethodExcludedProduct, error) {
	o := &ShippingMethodExcludedProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shipping_method_excluded_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShippingMethodExcludedProduct records from the query.
func (q shippingMethodExcludedProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShippingMethodExcludedProductSlice, error) {
	var o []*ShippingMethodExcludedProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShippingMethodExcludedProduct slice")
	}

	if len(shippingMethodExcludedProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShippingMethodExcludedProduct records in the query.
func (q shippingMethodExcludedProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shipping_method_excluded_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingMethodExcludedProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shipping_method_excluded_products exists")
	}

	return count > 0, nil
}

// ProductidProduct pointed to by the foreign key.
func (o *ShippingMethodExcludedProduct) ProductidProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Productid),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// ShippingmethodidShippingMethod pointed to by the foreign key.
func (o *ShippingMethodExcludedProduct) ShippingmethodidShippingMethod(mods ...qm.QueryMod) shippingMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Shippingmethodid),
	}

	queryMods = append(queryMods, mods...)

	return ShippingMethods(queryMods...)
}

// LoadProductidProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shippingMethodExcludedProductL) LoadProductidProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethodExcludedProduct interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethodExcludedProduct
	var object *ShippingMethodExcludedProduct

	if singular {
		var ok bool
		object, ok = maybeShippingMethodExcludedProduct.(*ShippingMethodExcludedProduct)
		if !ok {
			object = new(ShippingMethodExcludedProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethodExcludedProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethodExcludedProduct))
			}
		}
	} else {
		s, ok := maybeShippingMethodExcludedProduct.(*[]*ShippingMethodExcludedProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethodExcludedProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethodExcludedProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodExcludedProductR{}
		}
		if !queries.IsNil(object.Productid) {
			args = append(args, object.Productid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodExcludedProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Productid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Productid) {
				args = append(args, obj.Productid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductidProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductidShippingMethodExcludedProducts = append(foreign.R.ProductidShippingMethodExcludedProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Productid, foreign.ID) {
				local.R.ProductidProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductidShippingMethodExcludedProducts = append(foreign.R.ProductidShippingMethodExcludedProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadShippingmethodidShippingMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shippingMethodExcludedProductL) LoadShippingmethodidShippingMethod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethodExcludedProduct interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethodExcludedProduct
	var object *ShippingMethodExcludedProduct

	if singular {
		var ok bool
		object, ok = maybeShippingMethodExcludedProduct.(*ShippingMethodExcludedProduct)
		if !ok {
			object = new(ShippingMethodExcludedProduct)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethodExcludedProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethodExcludedProduct))
			}
		}
	} else {
		s, ok := maybeShippingMethodExcludedProduct.(*[]*ShippingMethodExcludedProduct)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethodExcludedProduct)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethodExcludedProduct))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodExcludedProductR{}
		}
		if !queries.IsNil(object.Shippingmethodid) {
			args = append(args, object.Shippingmethodid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodExcludedProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Shippingmethodid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Shippingmethodid) {
				args = append(args, obj.Shippingmethodid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_methods`),
		qm.WhereIn(`shipping_methods.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingMethod")
	}

	var resultSlice []*ShippingMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_methods")
	}

	if len(shippingMethodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingmethodidShippingMethod = foreign
		if foreign.R == nil {
			foreign.R = &shippingMethodR{}
		}
		foreign.R.ShippingmethodidShippingMethodExcludedProducts = append(foreign.R.ShippingmethodidShippingMethodExcludedProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Shippingmethodid, foreign.ID) {
				local.R.ShippingmethodidShippingMethod = foreign
				if foreign.R == nil {
					foreign.R = &shippingMethodR{}
				}
				foreign.R.ShippingmethodidShippingMethodExcludedProducts = append(foreign.R.ShippingmethodidShippingMethodExcludedProducts, local)
				break
			}
		}
	}

	return nil
}

// SetProductidProduct of the shippingMethodExcludedProduct to the related item.
// Sets o.R.ProductidProduct to related.
// Adds o to related.R.ProductidShippingMethodExcludedProducts.
func (o *ShippingMethodExcludedProduct) SetProductidProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
		strmangle.WhereClause("\"", "\"", 2, shippingMethodExcludedProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Productid, related.ID)
	if o.R == nil {
		o.R = &shippingMethodExcludedProductR{
			ProductidProduct: related,
		}
	} else {
		o.R.ProductidProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductidShippingMethodExcludedProducts: ShippingMethodExcludedProductSlice{o},
		}
	} else {
		related.R.ProductidShippingMethodExcludedProducts = append(related.R.ProductidShippingMethodExcludedProducts, o)
	}

	return nil
}

// RemoveProductidProduct relationship.
// Sets o.R.ProductidProduct to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ShippingMethodExcludedProduct) RemoveProductidProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.Productid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductidProduct = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductidShippingMethodExcludedProducts {
		if queries.Equal(o.Productid, ri.Productid) {
			continue
		}

		ln := len(related.R.ProductidShippingMethodExcludedProducts)
		if ln > 1 && i < ln-1 {
			related.R.ProductidShippingMethodExcludedProducts[i] = related.R.ProductidShippingMethodExcludedProducts[ln-1]
		}
		related.R.ProductidShippingMethodExcludedProducts = related.R.ProductidShippingMethodExcludedProducts[:ln-1]
		break
	}
	return nil
}

// SetShippingmethodidShippingMethod of the shippingMethodExcludedProduct to the related item.
// Sets o.R.ShippingmethodidShippingMethod to related.
// Adds o to related.R.ShippingmethodidShippingMethodExcludedProducts.
func (o *ShippingMethodExcludedProduct) SetShippingmethodidShippingMethod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShippingMethod) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shippingmethodid"}),
		strmangle.WhereClause("\"", "\"", 2, shippingMethodExcludedProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Shippingmethodid, related.ID)
	if o.R == nil {
		o.R = &shippingMethodExcludedProductR{
			ShippingmethodidShippingMethod: related,
		}
	} else {
		o.R.ShippingmethodidShippingMethod = related
	}

	if related.R == nil {
		related.R = &shippingMethodR{
			ShippingmethodidShippingMethodExcludedProducts: ShippingMethodExcludedProductSlice{o},
		}
	} else {
		related.R.ShippingmethodidShippingMethodExcludedProducts = append(related.R.ShippingmethodidShippingMethodExcludedProducts, o)
	}

	return nil
}

// RemoveShippingmethodidShippingMethod relationship.
// Sets o.R.ShippingmethodidShippingMethod to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ShippingMethodExcludedProduct) RemoveShippingmethodidShippingMethod(ctx context.Context, exec boil.ContextExecutor, related *ShippingMethod) error {
	var err error

	queries.SetScanner(&o.Shippingmethodid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("shippingmethodid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ShippingmethodidShippingMethod = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ShippingmethodidShippingMethodExcludedProducts {
		if queries.Equal(o.Shippingmethodid, ri.Shippingmethodid) {
			continue
		}

		ln := len(related.R.ShippingmethodidShippingMethodExcludedProducts)
		if ln > 1 && i < ln-1 {
			related.R.ShippingmethodidShippingMethodExcludedProducts[i] = related.R.ShippingmethodidShippingMethodExcludedProducts[ln-1]
		}
		related.R.ShippingmethodidShippingMethodExcludedProducts = related.R.ShippingmethodidShippingMethodExcludedProducts[:ln-1]
		break
	}
	return nil
}

// ShippingMethodExcludedProducts retrieves all the records using an executor.
func ShippingMethodExcludedProducts(mods ...qm.QueryMod) shippingMethodExcludedProductQuery {
	mods = append(mods, qm.From("\"shipping_method_excluded_products\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_method_excluded_products\".*"})
	}

	return shippingMethodExcludedProductQuery{q}
}

// FindShippingMethodExcludedProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingMethodExcludedProduct(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ShippingMethodExcludedProduct, error) {
	shippingMethodExcludedProductObj := &ShippingMethodExcludedProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_method_excluded_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shippingMethodExcludedProductObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shipping_method_excluded_products")
	}

	if err = shippingMethodExcludedProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shippingMethodExcludedProductObj, err
	}

	return shippingMethodExcludedProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingMethodExcludedProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shipping_method_excluded_products provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodExcludedProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingMethodExcludedProductInsertCacheMut.RLock()
	cache, cached := shippingMethodExcludedProductInsertCache[key]
	shippingMethodExcludedProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingMethodExcludedProductAllColumns,
			shippingMethodExcludedProductColumnsWithDefault,
			shippingMethodExcludedProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_method_excluded_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_method_excluded_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shipping_method_excluded_products")
	}

	if !cached {
		shippingMethodExcludedProductInsertCacheMut.Lock()
		shippingMethodExcludedProductInsertCache[key] = cache
		shippingMethodExcludedProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShippingMethodExcludedProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingMethodExcludedProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shippingMethodExcludedProductUpdateCacheMut.RLock()
	cache, cached := shippingMethodExcludedProductUpdateCache[key]
	shippingMethodExcludedProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingMethodExcludedProductAllColumns,
			shippingMethodExcludedProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shipping_method_excluded_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingMethodExcludedProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, append(wl, shippingMethodExcludedProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shipping_method_excluded_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shipping_method_excluded_products")
	}

	if !cached {
		shippingMethodExcludedProductUpdateCacheMut.Lock()
		shippingMethodExcludedProductUpdateCache[key] = cache
		shippingMethodExcludedProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shippingMethodExcludedProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shipping_method_excluded_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shipping_method_excluded_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingMethodExcludedProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodExcludedProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingMethodExcludedProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shippingMethodExcludedProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shippingMethodExcludedProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingMethodExcludedProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shipping_method_excluded_products provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodExcludedProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingMethodExcludedProductUpsertCacheMut.RLock()
	cache, cached := shippingMethodExcludedProductUpsertCache[key]
	shippingMethodExcludedProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shippingMethodExcludedProductAllColumns,
			shippingMethodExcludedProductColumnsWithDefault,
			shippingMethodExcludedProductColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingMethodExcludedProductAllColumns,
			shippingMethodExcludedProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shipping_method_excluded_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shippingMethodExcludedProductPrimaryKeyColumns))
			copy(conflict, shippingMethodExcludedProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_method_excluded_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingMethodExcludedProductType, shippingMethodExcludedProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shipping_method_excluded_products")
	}

	if !cached {
		shippingMethodExcludedProductUpsertCacheMut.Lock()
		shippingMethodExcludedProductUpsertCache[key] = cache
		shippingMethodExcludedProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShippingMethodExcludedProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingMethodExcludedProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShippingMethodExcludedProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingMethodExcludedProductPrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_method_excluded_products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shipping_method_excluded_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shipping_method_excluded_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingMethodExcludedProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shippingMethodExcludedProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shipping_method_excluded_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shipping_method_excluded_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingMethodExcludedProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shippingMethodExcludedProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodExcludedProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_method_excluded_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodExcludedProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shippingMethodExcludedProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shipping_method_excluded_products")
	}

	if len(shippingMethodExcludedProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingMethodExcludedProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShippingMethodExcludedProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingMethodExcludedProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingMethodExcludedProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodExcludedProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_method_excluded_products\".* FROM \"shipping_method_excluded_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodExcludedProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShippingMethodExcludedProductSlice")
	}

	*o = slice

	return nil
}

// ShippingMethodExcludedProductExists checks if the ShippingMethodExcludedProduct row exists.
func ShippingMethodExcludedProductExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_method_excluded_products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shipping_method_excluded_products exists")
	}

	return exists, nil
}

// Exists checks if the ShippingMethodExcludedProduct row exists.
func (o *ShippingMethodExcludedProduct) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShippingMethodExcludedProductExists(ctx, exec, o.ID)
}
