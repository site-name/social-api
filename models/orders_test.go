// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrders(t *testing.T) {
	t.Parallel()

	query := Orders()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrdersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Orders().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrdersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Order exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderExists to return true, but got false.")
	}
}

func testOrdersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderFound, err := FindOrder(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orderFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrdersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Orders().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrdersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Orders().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrdersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderOne := &Order{}
	orderTwo := &Order{}
	if err = randomize.Struct(seed, orderOne, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err = randomize.Struct(seed, orderTwo, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Orders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrdersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderOne := &Order{}
	orderTwo := &Order{}
	if err = randomize.Struct(seed, orderOne, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err = randomize.Struct(seed, orderTwo, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orderBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func orderAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Order) error {
	*o = Order{}
	return nil
}

func testOrdersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Order{}
	o := &Order{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orderDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Order object: %s", err)
	}

	AddOrderHook(boil.BeforeInsertHook, orderBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orderBeforeInsertHooks = []OrderHook{}

	AddOrderHook(boil.AfterInsertHook, orderAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orderAfterInsertHooks = []OrderHook{}

	AddOrderHook(boil.AfterSelectHook, orderAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orderAfterSelectHooks = []OrderHook{}

	AddOrderHook(boil.BeforeUpdateHook, orderBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orderBeforeUpdateHooks = []OrderHook{}

	AddOrderHook(boil.AfterUpdateHook, orderAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orderAfterUpdateHooks = []OrderHook{}

	AddOrderHook(boil.BeforeDeleteHook, orderBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orderBeforeDeleteHooks = []OrderHook{}

	AddOrderHook(boil.AfterDeleteHook, orderAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orderAfterDeleteHooks = []OrderHook{}

	AddOrderHook(boil.BeforeUpsertHook, orderBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orderBeforeUpsertHooks = []OrderHook{}

	AddOrderHook(boil.AfterUpsertHook, orderAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orderAfterUpsertHooks = []OrderHook{}
}

func testOrdersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrdersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderToManyOrderidCustomerEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c CustomerEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, customerEventDBTypes, false, customerEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, customerEventDBTypes, false, customerEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Orderid, a.ID)
	queries.Assign(&c.Orderid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderidCustomerEvents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Orderid, b.Orderid) {
			bFound = true
		}
		if queries.Equal(v.Orderid, c.Orderid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOrderidCustomerEvents(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidCustomerEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderidCustomerEvents = nil
	if err = a.L.LoadOrderidCustomerEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidCustomerEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyOrderidFulfillments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Fulfillment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, fulfillmentDBTypes, false, fulfillmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fulfillmentDBTypes, false, fulfillmentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Orderid, a.ID)
	queries.Assign(&c.Orderid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderidFulfillments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Orderid, b.Orderid) {
			bFound = true
		}
		if queries.Equal(v.Orderid, c.Orderid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOrderidFulfillments(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidFulfillments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderidFulfillments = nil
	if err = a.L.LoadOrderidFulfillments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidFulfillments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyOrderidInvoiceEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c InvoiceEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, invoiceEventDBTypes, false, invoiceEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, invoiceEventDBTypes, false, invoiceEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Orderid, a.ID)
	queries.Assign(&c.Orderid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderidInvoiceEvents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Orderid, b.Orderid) {
			bFound = true
		}
		if queries.Equal(v.Orderid, c.Orderid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOrderidInvoiceEvents(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidInvoiceEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderidInvoiceEvents = nil
	if err = a.L.LoadOrderidInvoiceEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidInvoiceEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyOrderidInvoices(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Invoice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, invoiceDBTypes, false, invoiceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Orderid, a.ID)
	queries.Assign(&c.Orderid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderidInvoices().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Orderid, b.Orderid) {
			bFound = true
		}
		if queries.Equal(v.Orderid, c.Orderid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOrderidInvoices(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidInvoices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderidInvoices = nil
	if err = a.L.LoadOrderidInvoices(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidInvoices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyOrderidOrderDiscounts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c OrderDiscount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDiscountDBTypes, false, orderDiscountColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDiscountDBTypes, false, orderDiscountColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Orderid, a.ID)
	queries.Assign(&c.Orderid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderidOrderDiscounts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Orderid, b.Orderid) {
			bFound = true
		}
		if queries.Equal(v.Orderid, c.Orderid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOrderidOrderDiscounts(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidOrderDiscounts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderidOrderDiscounts = nil
	if err = a.L.LoadOrderidOrderDiscounts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidOrderDiscounts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyOrderidOrderEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c OrderEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderEventDBTypes, false, orderEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderEventDBTypes, false, orderEventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Orderid, a.ID)
	queries.Assign(&c.Orderid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderidOrderEvents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Orderid, b.Orderid) {
			bFound = true
		}
		if queries.Equal(v.Orderid, c.Orderid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOrderidOrderEvents(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidOrderEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderidOrderEvents = nil
	if err = a.L.LoadOrderidOrderEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidOrderEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyOrderidOrderGiftcards(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c OrderGiftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Orderid, a.ID)
	queries.Assign(&c.Orderid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderidOrderGiftcards().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Orderid, b.Orderid) {
			bFound = true
		}
		if queries.Equal(v.Orderid, c.Orderid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOrderidOrderGiftcards(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidOrderGiftcards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderidOrderGiftcards = nil
	if err = a.L.LoadOrderidOrderGiftcards(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidOrderGiftcards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyOrderidOrderLines(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Orderid, a.ID)
	queries.Assign(&c.Orderid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderidOrderLines().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Orderid, b.Orderid) {
			bFound = true
		}
		if queries.Equal(v.Orderid, c.Orderid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOrderidOrderLines(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidOrderLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderidOrderLines = nil
	if err = a.L.LoadOrderidOrderLines(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidOrderLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyOriginalidOrders(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Originalid, a.ID)
	queries.Assign(&c.Originalid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OriginalidOrders().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Originalid, b.Originalid) {
			bFound = true
		}
		if queries.Equal(v.Originalid, c.Originalid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOriginalidOrders(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginalidOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OriginalidOrders = nil
	if err = a.L.LoadOriginalidOrders(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OriginalidOrders); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyOrderidPayments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, paymentDBTypes, false, paymentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Orderid, a.ID)
	queries.Assign(&c.Orderid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OrderidPayments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Orderid, b.Orderid) {
			bFound = true
		}
		if queries.Equal(v.Orderid, c.Orderid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderSlice{&a}
	if err = a.L.LoadOrderidPayments(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidPayments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderidPayments = nil
	if err = a.L.LoadOrderidPayments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderidPayments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderToManyAddOpOrderidCustomerEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e CustomerEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CustomerEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, customerEventDBTypes, false, strmangle.SetComplement(customerEventPrimaryKeyColumns, customerEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CustomerEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderidCustomerEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Orderid) {
			t.Error("foreign key was wrong value", a.ID, first.Orderid)
		}
		if !queries.Equal(a.ID, second.Orderid) {
			t.Error("foreign key was wrong value", a.ID, second.Orderid)
		}

		if first.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderidCustomerEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderidCustomerEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderidCustomerEvents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderToManySetOpOrderidCustomerEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e CustomerEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CustomerEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, customerEventDBTypes, false, strmangle.SetComplement(customerEventPrimaryKeyColumns, customerEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderidCustomerEvents(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidCustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderidCustomerEvents(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidCustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Orderid) {
		t.Error("foreign key was wrong value", a.ID, d.Orderid)
	}
	if !queries.Equal(a.ID, e.Orderid) {
		t.Error("foreign key was wrong value", a.ID, e.Orderid)
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderidCustomerEvents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderidCustomerEvents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderToManyRemoveOpOrderidCustomerEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e CustomerEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CustomerEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, customerEventDBTypes, false, strmangle.SetComplement(customerEventPrimaryKeyColumns, customerEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderidCustomerEvents(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidCustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderidCustomerEvents(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidCustomerEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderidCustomerEvents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderidCustomerEvents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderidCustomerEvents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderToManyAddOpOrderidFulfillments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Fulfillment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Fulfillment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fulfillmentDBTypes, false, strmangle.SetComplement(fulfillmentPrimaryKeyColumns, fulfillmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Fulfillment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderidFulfillments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Orderid) {
			t.Error("foreign key was wrong value", a.ID, first.Orderid)
		}
		if !queries.Equal(a.ID, second.Orderid) {
			t.Error("foreign key was wrong value", a.ID, second.Orderid)
		}

		if first.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderidFulfillments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderidFulfillments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderidFulfillments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderToManySetOpOrderidFulfillments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Fulfillment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Fulfillment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fulfillmentDBTypes, false, strmangle.SetComplement(fulfillmentPrimaryKeyColumns, fulfillmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderidFulfillments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidFulfillments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderidFulfillments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidFulfillments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Orderid) {
		t.Error("foreign key was wrong value", a.ID, d.Orderid)
	}
	if !queries.Equal(a.ID, e.Orderid) {
		t.Error("foreign key was wrong value", a.ID, e.Orderid)
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderidFulfillments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderidFulfillments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderToManyRemoveOpOrderidFulfillments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Fulfillment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Fulfillment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fulfillmentDBTypes, false, strmangle.SetComplement(fulfillmentPrimaryKeyColumns, fulfillmentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderidFulfillments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidFulfillments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderidFulfillments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidFulfillments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderidFulfillments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderidFulfillments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderidFulfillments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderToManyAddOpOrderidInvoiceEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e InvoiceEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*InvoiceEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*InvoiceEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderidInvoiceEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Orderid) {
			t.Error("foreign key was wrong value", a.ID, first.Orderid)
		}
		if !queries.Equal(a.ID, second.Orderid) {
			t.Error("foreign key was wrong value", a.ID, second.Orderid)
		}

		if first.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderidInvoiceEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderidInvoiceEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderidInvoiceEvents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderToManySetOpOrderidInvoiceEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e InvoiceEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*InvoiceEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderidInvoiceEvents(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidInvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderidInvoiceEvents(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidInvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Orderid) {
		t.Error("foreign key was wrong value", a.ID, d.Orderid)
	}
	if !queries.Equal(a.ID, e.Orderid) {
		t.Error("foreign key was wrong value", a.ID, e.Orderid)
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderidInvoiceEvents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderidInvoiceEvents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderToManyRemoveOpOrderidInvoiceEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e InvoiceEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*InvoiceEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, invoiceEventDBTypes, false, strmangle.SetComplement(invoiceEventPrimaryKeyColumns, invoiceEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderidInvoiceEvents(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidInvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderidInvoiceEvents(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidInvoiceEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderidInvoiceEvents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderidInvoiceEvents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderidInvoiceEvents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderToManyAddOpOrderidInvoices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Invoice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Invoice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Invoice{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderidInvoices(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Orderid) {
			t.Error("foreign key was wrong value", a.ID, first.Orderid)
		}
		if !queries.Equal(a.ID, second.Orderid) {
			t.Error("foreign key was wrong value", a.ID, second.Orderid)
		}

		if first.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderidInvoices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderidInvoices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderidInvoices().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderToManySetOpOrderidInvoices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Invoice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Invoice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderidInvoices(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidInvoices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderidInvoices(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidInvoices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Orderid) {
		t.Error("foreign key was wrong value", a.ID, d.Orderid)
	}
	if !queries.Equal(a.ID, e.Orderid) {
		t.Error("foreign key was wrong value", a.ID, e.Orderid)
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderidInvoices[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderidInvoices[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderToManyRemoveOpOrderidInvoices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Invoice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Invoice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, invoiceDBTypes, false, strmangle.SetComplement(invoicePrimaryKeyColumns, invoiceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderidInvoices(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidInvoices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderidInvoices(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidInvoices().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderidInvoices) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderidInvoices[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderidInvoices[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderToManyAddOpOrderidOrderDiscounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderDiscount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderDiscount{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDiscountDBTypes, false, strmangle.SetComplement(orderDiscountPrimaryKeyColumns, orderDiscountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderDiscount{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderidOrderDiscounts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Orderid) {
			t.Error("foreign key was wrong value", a.ID, first.Orderid)
		}
		if !queries.Equal(a.ID, second.Orderid) {
			t.Error("foreign key was wrong value", a.ID, second.Orderid)
		}

		if first.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderidOrderDiscounts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderidOrderDiscounts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderidOrderDiscounts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderToManySetOpOrderidOrderDiscounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderDiscount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderDiscount{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDiscountDBTypes, false, strmangle.SetComplement(orderDiscountPrimaryKeyColumns, orderDiscountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderidOrderDiscounts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidOrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderidOrderDiscounts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidOrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Orderid) {
		t.Error("foreign key was wrong value", a.ID, d.Orderid)
	}
	if !queries.Equal(a.ID, e.Orderid) {
		t.Error("foreign key was wrong value", a.ID, e.Orderid)
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderidOrderDiscounts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderidOrderDiscounts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderToManyRemoveOpOrderidOrderDiscounts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderDiscount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderDiscount{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDiscountDBTypes, false, strmangle.SetComplement(orderDiscountPrimaryKeyColumns, orderDiscountColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderidOrderDiscounts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidOrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderidOrderDiscounts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidOrderDiscounts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderidOrderDiscounts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderidOrderDiscounts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderidOrderDiscounts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderToManyAddOpOrderidOrderEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderEventDBTypes, false, strmangle.SetComplement(orderEventPrimaryKeyColumns, orderEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderEvent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderidOrderEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Orderid) {
			t.Error("foreign key was wrong value", a.ID, first.Orderid)
		}
		if !queries.Equal(a.ID, second.Orderid) {
			t.Error("foreign key was wrong value", a.ID, second.Orderid)
		}

		if first.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderidOrderEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderidOrderEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderidOrderEvents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderToManySetOpOrderidOrderEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderEventDBTypes, false, strmangle.SetComplement(orderEventPrimaryKeyColumns, orderEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderidOrderEvents(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidOrderEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderidOrderEvents(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidOrderEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Orderid) {
		t.Error("foreign key was wrong value", a.ID, d.Orderid)
	}
	if !queries.Equal(a.ID, e.Orderid) {
		t.Error("foreign key was wrong value", a.ID, e.Orderid)
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderidOrderEvents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderidOrderEvents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderToManyRemoveOpOrderidOrderEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderEvent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderEvent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderEventDBTypes, false, strmangle.SetComplement(orderEventPrimaryKeyColumns, orderEventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderidOrderEvents(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidOrderEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderidOrderEvents(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidOrderEvents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderidOrderEvents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderidOrderEvents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderidOrderEvents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderToManyAddOpOrderidOrderGiftcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderGiftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderGiftcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderGiftcardDBTypes, false, strmangle.SetComplement(orderGiftcardPrimaryKeyColumns, orderGiftcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderGiftcard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderidOrderGiftcards(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Orderid) {
			t.Error("foreign key was wrong value", a.ID, first.Orderid)
		}
		if !queries.Equal(a.ID, second.Orderid) {
			t.Error("foreign key was wrong value", a.ID, second.Orderid)
		}

		if first.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderidOrderGiftcards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderidOrderGiftcards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderidOrderGiftcards().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderToManySetOpOrderidOrderGiftcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderGiftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderGiftcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderGiftcardDBTypes, false, strmangle.SetComplement(orderGiftcardPrimaryKeyColumns, orderGiftcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderidOrderGiftcards(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidOrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderidOrderGiftcards(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidOrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Orderid) {
		t.Error("foreign key was wrong value", a.ID, d.Orderid)
	}
	if !queries.Equal(a.ID, e.Orderid) {
		t.Error("foreign key was wrong value", a.ID, e.Orderid)
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderidOrderGiftcards[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderidOrderGiftcards[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderToManyRemoveOpOrderidOrderGiftcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderGiftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderGiftcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderGiftcardDBTypes, false, strmangle.SetComplement(orderGiftcardPrimaryKeyColumns, orderGiftcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderidOrderGiftcards(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidOrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderidOrderGiftcards(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidOrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderidOrderGiftcards) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderidOrderGiftcards[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderidOrderGiftcards[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderToManyAddOpOrderidOrderLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderLine{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderidOrderLines(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Orderid) {
			t.Error("foreign key was wrong value", a.ID, first.Orderid)
		}
		if !queries.Equal(a.ID, second.Orderid) {
			t.Error("foreign key was wrong value", a.ID, second.Orderid)
		}

		if first.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderidOrderLines[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderidOrderLines[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderidOrderLines().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderToManySetOpOrderidOrderLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderidOrderLines(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderidOrderLines(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Orderid) {
		t.Error("foreign key was wrong value", a.ID, d.Orderid)
	}
	if !queries.Equal(a.ID, e.Orderid) {
		t.Error("foreign key was wrong value", a.ID, e.Orderid)
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderidOrderLines[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderidOrderLines[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderToManyRemoveOpOrderidOrderLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderidOrderLines(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderidOrderLines(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderidOrderLines) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderidOrderLines[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderidOrderLines[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderToManyAddOpOriginalidOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Order{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOriginalidOrders(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Originalid) {
			t.Error("foreign key was wrong value", a.ID, first.Originalid)
		}
		if !queries.Equal(a.ID, second.Originalid) {
			t.Error("foreign key was wrong value", a.ID, second.Originalid)
		}

		if first.R.OriginalidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OriginalidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OriginalidOrders[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OriginalidOrders[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OriginalidOrders().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderToManySetOpOriginalidOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOriginalidOrders(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginalidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOriginalidOrders(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginalidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Originalid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Originalid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Originalid) {
		t.Error("foreign key was wrong value", a.ID, d.Originalid)
	}
	if !queries.Equal(a.ID, e.Originalid) {
		t.Error("foreign key was wrong value", a.ID, e.Originalid)
	}

	if b.R.OriginalidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OriginalidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OriginalidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OriginalidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OriginalidOrders[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OriginalidOrders[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderToManyRemoveOpOriginalidOrders(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Order{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOriginalidOrders(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OriginalidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOriginalidOrders(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OriginalidOrders().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Originalid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Originalid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OriginalidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OriginalidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OriginalidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OriginalidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OriginalidOrders) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OriginalidOrders[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OriginalidOrders[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderToManyAddOpOrderidPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Payment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderidPayments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Orderid) {
			t.Error("foreign key was wrong value", a.ID, first.Orderid)
		}
		if !queries.Equal(a.ID, second.Orderid) {
			t.Error("foreign key was wrong value", a.ID, second.Orderid)
		}

		if first.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderidOrder != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderidPayments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderidPayments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderidPayments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderToManySetOpOrderidPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetOrderidPayments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetOrderidPayments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Orderid) {
		t.Error("foreign key was wrong value", a.ID, d.Orderid)
	}
	if !queries.Equal(a.ID, e.Orderid) {
		t.Error("foreign key was wrong value", a.ID, e.Orderid)
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.OrderidPayments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.OrderidPayments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderToManyRemoveOpOrderidPayments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c, d, e Payment

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Payment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, paymentDBTypes, false, strmangle.SetComplement(paymentPrimaryKeyColumns, paymentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddOrderidPayments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.OrderidPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveOrderidPayments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.OrderidPayments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Orderid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Orderid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderidOrder != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OrderidOrder != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.OrderidPayments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.OrderidPayments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.OrderidPayments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderToOneAddressUsingBillingaddressidAddress(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign Address

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Billingaddressid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BillingaddressidAddress().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAddressHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Address) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadBillingaddressidAddress(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BillingaddressidAddress == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BillingaddressidAddress = nil
	if err = local.L.LoadBillingaddressidAddress(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BillingaddressidAddress == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneChannelUsingChannelidChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Channelid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ChannelidChannel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddChannelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadChannelidChannel(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelidChannel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ChannelidChannel = nil
	if err = local.L.LoadChannelidChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelidChannel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneOrderUsingOriginalidOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Originalid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OriginalidOrder().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Order) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadOriginalidOrder(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OriginalidOrder == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OriginalidOrder = nil
	if err = local.L.LoadOriginalidOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OriginalidOrder == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneShippingMethodUsingShippingmethodidShippingMethod(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign ShippingMethod

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shippingMethodDBTypes, false, shippingMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShippingMethod struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Shippingmethodid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShippingmethodidShippingMethod().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddShippingMethodHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ShippingMethod) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadShippingmethodidShippingMethod(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingmethodidShippingMethod == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShippingmethodidShippingMethod = nil
	if err = local.L.LoadShippingmethodidShippingMethod(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShippingmethodidShippingMethod == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneUserUsingUseridUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Userid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UseridUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadUseridUser(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UseridUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UseridUser = nil
	if err = local.L.LoadUseridUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UseridUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneVoucherUsingVoucheridVoucher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign Voucher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, voucherDBTypes, false, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Voucherid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.VoucheridVoucher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddVoucherHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadVoucheridVoucher(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VoucheridVoucher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VoucheridVoucher = nil
	if err = local.L.LoadVoucheridVoucher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VoucheridVoucher == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneWarehouseUsingCollectionpointidWarehouse(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Order
	var foreign Warehouse

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, warehouseDBTypes, false, warehouseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Warehouse struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Collectionpointid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CollectionpointidWarehouse().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddWarehouseHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Warehouse) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderSlice{&local}
	if err = local.L.LoadCollectionpointidWarehouse(ctx, tx, false, (*[]*Order)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CollectionpointidWarehouse == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CollectionpointidWarehouse = nil
	if err = local.L.LoadCollectionpointidWarehouse(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CollectionpointidWarehouse == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderToOneSetOpAddressUsingBillingaddressidAddress(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Address{&b, &c} {
		err = a.SetBillingaddressidAddress(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BillingaddressidAddress != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BillingaddressidOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Billingaddressid, x.ID) {
			t.Error("foreign key was wrong value", a.Billingaddressid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Billingaddressid))
		reflect.Indirect(reflect.ValueOf(&a.Billingaddressid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Billingaddressid, x.ID) {
			t.Error("foreign key was wrong value", a.Billingaddressid, x.ID)
		}
	}
}

func testOrderToOneRemoveOpAddressUsingBillingaddressidAddress(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBillingaddressidAddress(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBillingaddressidAddress(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.BillingaddressidAddress().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.BillingaddressidAddress != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Billingaddressid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.BillingaddressidOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderToOneSetOpChannelUsingChannelidChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannelidChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ChannelidChannel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChannelidOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Channelid, x.ID) {
			t.Error("foreign key was wrong value", a.Channelid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Channelid))
		reflect.Indirect(reflect.ValueOf(&a.Channelid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Channelid, x.ID) {
			t.Error("foreign key was wrong value", a.Channelid, x.ID)
		}
	}
}

func testOrderToOneRemoveOpChannelUsingChannelidChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetChannelidChannel(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveChannelidChannel(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ChannelidChannel().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ChannelidChannel != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Channelid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ChannelidOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderToOneSetOpOrderUsingOriginalidOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOriginalidOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OriginalidOrder != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OriginalidOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Originalid, x.ID) {
			t.Error("foreign key was wrong value", a.Originalid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Originalid))
		reflect.Indirect(reflect.ValueOf(&a.Originalid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Originalid, x.ID) {
			t.Error("foreign key was wrong value", a.Originalid, x.ID)
		}
	}
}

func testOrderToOneRemoveOpOrderUsingOriginalidOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOriginalidOrder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOriginalidOrder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OriginalidOrder().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OriginalidOrder != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Originalid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OriginalidOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderToOneSetOpShippingMethodUsingShippingmethodidShippingMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c ShippingMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShippingMethod{&b, &c} {
		err = a.SetShippingmethodidShippingMethod(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShippingmethodidShippingMethod != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ShippingmethodidOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Shippingmethodid, x.ID) {
			t.Error("foreign key was wrong value", a.Shippingmethodid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Shippingmethodid))
		reflect.Indirect(reflect.ValueOf(&a.Shippingmethodid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Shippingmethodid, x.ID) {
			t.Error("foreign key was wrong value", a.Shippingmethodid, x.ID)
		}
	}
}

func testOrderToOneRemoveOpShippingMethodUsingShippingmethodidShippingMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b ShippingMethod

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shippingMethodDBTypes, false, strmangle.SetComplement(shippingMethodPrimaryKeyColumns, shippingMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetShippingmethodidShippingMethod(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveShippingmethodidShippingMethod(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ShippingmethodidShippingMethod().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ShippingmethodidShippingMethod != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Shippingmethodid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ShippingmethodidOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderToOneSetOpUserUsingUseridUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUseridUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UseridUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UseridOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Userid, x.ID) {
			t.Error("foreign key was wrong value", a.Userid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Userid))
		reflect.Indirect(reflect.ValueOf(&a.Userid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Userid, x.ID) {
			t.Error("foreign key was wrong value", a.Userid, x.ID)
		}
	}
}

func testOrderToOneRemoveOpUserUsingUseridUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUseridUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUseridUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UseridUser().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UseridUser != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Userid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UseridOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderToOneSetOpVoucherUsingVoucheridVoucher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Voucher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Voucher{&b, &c} {
		err = a.SetVoucheridVoucher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VoucheridVoucher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VoucheridOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Voucherid, x.ID) {
			t.Error("foreign key was wrong value", a.Voucherid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Voucherid))
		reflect.Indirect(reflect.ValueOf(&a.Voucherid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Voucherid, x.ID) {
			t.Error("foreign key was wrong value", a.Voucherid, x.ID)
		}
	}
}

func testOrderToOneRemoveOpVoucherUsingVoucheridVoucher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b Voucher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetVoucheridVoucher(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveVoucheridVoucher(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.VoucheridVoucher().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.VoucheridVoucher != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Voucherid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VoucheridOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderToOneSetOpWarehouseUsingCollectionpointidWarehouse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b, c Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Warehouse{&b, &c} {
		err = a.SetCollectionpointidWarehouse(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CollectionpointidWarehouse != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CollectionpointidOrders[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Collectionpointid, x.ID) {
			t.Error("foreign key was wrong value", a.Collectionpointid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Collectionpointid))
		reflect.Indirect(reflect.ValueOf(&a.Collectionpointid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Collectionpointid, x.ID) {
			t.Error("foreign key was wrong value", a.Collectionpointid, x.ID)
		}
	}
}

func testOrderToOneRemoveOpWarehouseUsingCollectionpointidWarehouse(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Order
	var b Warehouse

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, warehouseDBTypes, false, strmangle.SetComplement(warehousePrimaryKeyColumns, warehouseColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCollectionpointidWarehouse(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCollectionpointidWarehouse(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CollectionpointidWarehouse().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CollectionpointidWarehouse != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Collectionpointid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CollectionpointidOrders) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrdersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrdersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrdersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Orders().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderDBTypes = map[string]string{`ID`: `character varying`, `Createat`: `bigint`, `Status`: `character varying`, `Userid`: `character varying`, `Languagecode`: `character varying`, `Trackingclientid`: `character varying`, `Billingaddressid`: `character varying`, `Shippingaddressid`: `character varying`, `Useremail`: `character varying`, `Originalid`: `character varying`, `Origin`: `character varying`, `Currency`: `character varying`, `Shippingmethodid`: `character varying`, `Collectionpointid`: `character varying`, `Shippingmethodname`: `character varying`, `Collectionpointname`: `character varying`, `Channelid`: `character varying`, `Shippingpricenetamount`: `double precision`, `Shippingpricegrossamount`: `double precision`, `Shippingtaxrate`: `double precision`, `Token`: `character varying`, `Checkouttoken`: `character varying`, `Totalnetamount`: `double precision`, `Undiscountedtotalnetamount`: `double precision`, `Totalgrossamount`: `double precision`, `Undiscountedtotalgrossamount`: `double precision`, `Totalpaidamount`: `double precision`, `Voucherid`: `character varying`, `Displaygrossprices`: `boolean`, `Customernote`: `text`, `Weightamount`: `real`, `Weightunit`: `text`, `Redirecturl`: `text`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`}
	_            = bytes.MinRead
)

func testOrdersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderAllColumns) == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderDBTypes, true, orderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrdersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderAllColumns) == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Order{}
	if err = randomize.Struct(seed, o, orderDBTypes, true, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderDBTypes, true, orderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderAllColumns, orderPrimaryKeyColumns) {
		fields = orderAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderAllColumns,
			orderPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrdersUpsert(t *testing.T) {
	t.Parallel()

	if len(orderAllColumns) == len(orderPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Order{}
	if err = randomize.Struct(seed, &o, orderDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Order: %s", err)
	}

	count, err := Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orderDBTypes, false, orderPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Order: %s", err)
	}

	count, err = Orders().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
