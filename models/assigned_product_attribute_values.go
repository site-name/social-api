// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssignedProductAttributeValue is an object representing the database table.
type AssignedProductAttributeValue struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Valueid      null.String `boil:"valueid" json:"valueid,omitempty" toml:"valueid" yaml:"valueid,omitempty"`
	Assignmentid null.String `boil:"assignmentid" json:"assignmentid,omitempty" toml:"assignmentid" yaml:"assignmentid,omitempty"`
	Sortorder    null.Int    `boil:"sortorder" json:"sortorder,omitempty" toml:"sortorder" yaml:"sortorder,omitempty"`

	R *assignedProductAttributeValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignedProductAttributeValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignedProductAttributeValueColumns = struct {
	ID           string
	Valueid      string
	Assignmentid string
	Sortorder    string
}{
	ID:           "id",
	Valueid:      "valueid",
	Assignmentid: "assignmentid",
	Sortorder:    "sortorder",
}

var AssignedProductAttributeValueTableColumns = struct {
	ID           string
	Valueid      string
	Assignmentid string
	Sortorder    string
}{
	ID:           "assigned_product_attribute_values.id",
	Valueid:      "assigned_product_attribute_values.valueid",
	Assignmentid: "assigned_product_attribute_values.assignmentid",
	Sortorder:    "assigned_product_attribute_values.sortorder",
}

// Generated where

var AssignedProductAttributeValueWhere = struct {
	ID           whereHelperstring
	Valueid      whereHelpernull_String
	Assignmentid whereHelpernull_String
	Sortorder    whereHelpernull_Int
}{
	ID:           whereHelperstring{field: "\"assigned_product_attribute_values\".\"id\""},
	Valueid:      whereHelpernull_String{field: "\"assigned_product_attribute_values\".\"valueid\""},
	Assignmentid: whereHelpernull_String{field: "\"assigned_product_attribute_values\".\"assignmentid\""},
	Sortorder:    whereHelpernull_Int{field: "\"assigned_product_attribute_values\".\"sortorder\""},
}

// AssignedProductAttributeValueRels is where relationship names are stored.
var AssignedProductAttributeValueRels = struct {
	AssignmentidAssignedProductAttribute string
	ValueidAttributeValue                string
}{
	AssignmentidAssignedProductAttribute: "AssignmentidAssignedProductAttribute",
	ValueidAttributeValue:                "ValueidAttributeValue",
}

// assignedProductAttributeValueR is where relationships are stored.
type assignedProductAttributeValueR struct {
	AssignmentidAssignedProductAttribute *AssignedProductAttribute `boil:"AssignmentidAssignedProductAttribute" json:"AssignmentidAssignedProductAttribute" toml:"AssignmentidAssignedProductAttribute" yaml:"AssignmentidAssignedProductAttribute"`
	ValueidAttributeValue                *AttributeValue           `boil:"ValueidAttributeValue" json:"ValueidAttributeValue" toml:"ValueidAttributeValue" yaml:"ValueidAttributeValue"`
}

// NewStruct creates a new relationship struct
func (*assignedProductAttributeValueR) NewStruct() *assignedProductAttributeValueR {
	return &assignedProductAttributeValueR{}
}

func (r *assignedProductAttributeValueR) GetAssignmentidAssignedProductAttribute() *AssignedProductAttribute {
	if r == nil {
		return nil
	}
	return r.AssignmentidAssignedProductAttribute
}

func (r *assignedProductAttributeValueR) GetValueidAttributeValue() *AttributeValue {
	if r == nil {
		return nil
	}
	return r.ValueidAttributeValue
}

// assignedProductAttributeValueL is where Load methods for each relationship are stored.
type assignedProductAttributeValueL struct{}

var (
	assignedProductAttributeValueAllColumns            = []string{"id", "valueid", "assignmentid", "sortorder"}
	assignedProductAttributeValueColumnsWithoutDefault = []string{"id"}
	assignedProductAttributeValueColumnsWithDefault    = []string{"valueid", "assignmentid", "sortorder"}
	assignedProductAttributeValuePrimaryKeyColumns     = []string{"id"}
	assignedProductAttributeValueGeneratedColumns      = []string{}
)

type (
	// AssignedProductAttributeValueSlice is an alias for a slice of pointers to AssignedProductAttributeValue.
	// This should almost always be used instead of []AssignedProductAttributeValue.
	AssignedProductAttributeValueSlice []*AssignedProductAttributeValue
	// AssignedProductAttributeValueHook is the signature for custom AssignedProductAttributeValue hook methods
	AssignedProductAttributeValueHook func(context.Context, boil.ContextExecutor, *AssignedProductAttributeValue) error

	assignedProductAttributeValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignedProductAttributeValueType                 = reflect.TypeOf(&AssignedProductAttributeValue{})
	assignedProductAttributeValueMapping              = queries.MakeStructMapping(assignedProductAttributeValueType)
	assignedProductAttributeValuePrimaryKeyMapping, _ = queries.BindMapping(assignedProductAttributeValueType, assignedProductAttributeValueMapping, assignedProductAttributeValuePrimaryKeyColumns)
	assignedProductAttributeValueInsertCacheMut       sync.RWMutex
	assignedProductAttributeValueInsertCache          = make(map[string]insertCache)
	assignedProductAttributeValueUpdateCacheMut       sync.RWMutex
	assignedProductAttributeValueUpdateCache          = make(map[string]updateCache)
	assignedProductAttributeValueUpsertCacheMut       sync.RWMutex
	assignedProductAttributeValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assignedProductAttributeValueAfterSelectHooks []AssignedProductAttributeValueHook

var assignedProductAttributeValueBeforeInsertHooks []AssignedProductAttributeValueHook
var assignedProductAttributeValueAfterInsertHooks []AssignedProductAttributeValueHook

var assignedProductAttributeValueBeforeUpdateHooks []AssignedProductAttributeValueHook
var assignedProductAttributeValueAfterUpdateHooks []AssignedProductAttributeValueHook

var assignedProductAttributeValueBeforeDeleteHooks []AssignedProductAttributeValueHook
var assignedProductAttributeValueAfterDeleteHooks []AssignedProductAttributeValueHook

var assignedProductAttributeValueBeforeUpsertHooks []AssignedProductAttributeValueHook
var assignedProductAttributeValueAfterUpsertHooks []AssignedProductAttributeValueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssignedProductAttributeValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssignedProductAttributeValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssignedProductAttributeValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssignedProductAttributeValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssignedProductAttributeValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssignedProductAttributeValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssignedProductAttributeValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssignedProductAttributeValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssignedProductAttributeValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedProductAttributeValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssignedProductAttributeValueHook registers your hook function for all future operations.
func AddAssignedProductAttributeValueHook(hookPoint boil.HookPoint, assignedProductAttributeValueHook AssignedProductAttributeValueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assignedProductAttributeValueAfterSelectHooks = append(assignedProductAttributeValueAfterSelectHooks, assignedProductAttributeValueHook)
	case boil.BeforeInsertHook:
		assignedProductAttributeValueBeforeInsertHooks = append(assignedProductAttributeValueBeforeInsertHooks, assignedProductAttributeValueHook)
	case boil.AfterInsertHook:
		assignedProductAttributeValueAfterInsertHooks = append(assignedProductAttributeValueAfterInsertHooks, assignedProductAttributeValueHook)
	case boil.BeforeUpdateHook:
		assignedProductAttributeValueBeforeUpdateHooks = append(assignedProductAttributeValueBeforeUpdateHooks, assignedProductAttributeValueHook)
	case boil.AfterUpdateHook:
		assignedProductAttributeValueAfterUpdateHooks = append(assignedProductAttributeValueAfterUpdateHooks, assignedProductAttributeValueHook)
	case boil.BeforeDeleteHook:
		assignedProductAttributeValueBeforeDeleteHooks = append(assignedProductAttributeValueBeforeDeleteHooks, assignedProductAttributeValueHook)
	case boil.AfterDeleteHook:
		assignedProductAttributeValueAfterDeleteHooks = append(assignedProductAttributeValueAfterDeleteHooks, assignedProductAttributeValueHook)
	case boil.BeforeUpsertHook:
		assignedProductAttributeValueBeforeUpsertHooks = append(assignedProductAttributeValueBeforeUpsertHooks, assignedProductAttributeValueHook)
	case boil.AfterUpsertHook:
		assignedProductAttributeValueAfterUpsertHooks = append(assignedProductAttributeValueAfterUpsertHooks, assignedProductAttributeValueHook)
	}
}

// One returns a single assignedProductAttributeValue record from the query.
func (q assignedProductAttributeValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssignedProductAttributeValue, error) {
	o := &AssignedProductAttributeValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for assigned_product_attribute_values")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssignedProductAttributeValue records from the query.
func (q assignedProductAttributeValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssignedProductAttributeValueSlice, error) {
	var o []*AssignedProductAttributeValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssignedProductAttributeValue slice")
	}

	if len(assignedProductAttributeValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssignedProductAttributeValue records in the query.
func (q assignedProductAttributeValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assigned_product_attribute_values rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignedProductAttributeValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assigned_product_attribute_values exists")
	}

	return count > 0, nil
}

// AssignmentidAssignedProductAttribute pointed to by the foreign key.
func (o *AssignedProductAttributeValue) AssignmentidAssignedProductAttribute(mods ...qm.QueryMod) assignedProductAttributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Assignmentid),
	}

	queryMods = append(queryMods, mods...)

	return AssignedProductAttributes(queryMods...)
}

// ValueidAttributeValue pointed to by the foreign key.
func (o *AssignedProductAttributeValue) ValueidAttributeValue(mods ...qm.QueryMod) attributeValueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Valueid),
	}

	queryMods = append(queryMods, mods...)

	return AttributeValues(queryMods...)
}

// LoadAssignmentidAssignedProductAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedProductAttributeValueL) LoadAssignmentidAssignedProductAttribute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedProductAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AssignedProductAttributeValue
	var object *AssignedProductAttributeValue

	if singular {
		var ok bool
		object, ok = maybeAssignedProductAttributeValue.(*AssignedProductAttributeValue)
		if !ok {
			object = new(AssignedProductAttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedProductAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedProductAttributeValue))
			}
		}
	} else {
		s, ok := maybeAssignedProductAttributeValue.(*[]*AssignedProductAttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedProductAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedProductAttributeValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedProductAttributeValueR{}
		}
		if !queries.IsNil(object.Assignmentid) {
			args = append(args, object.Assignmentid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedProductAttributeValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Assignmentid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Assignmentid) {
				args = append(args, obj.Assignmentid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_product_attributes`),
		qm.WhereIn(`assigned_product_attributes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssignedProductAttribute")
	}

	var resultSlice []*AssignedProductAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssignedProductAttribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assigned_product_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_product_attributes")
	}

	if len(assignedProductAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AssignmentidAssignedProductAttribute = foreign
		if foreign.R == nil {
			foreign.R = &assignedProductAttributeR{}
		}
		foreign.R.AssignmentidAssignedProductAttributeValues = append(foreign.R.AssignmentidAssignedProductAttributeValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Assignmentid, foreign.ID) {
				local.R.AssignmentidAssignedProductAttribute = foreign
				if foreign.R == nil {
					foreign.R = &assignedProductAttributeR{}
				}
				foreign.R.AssignmentidAssignedProductAttributeValues = append(foreign.R.AssignmentidAssignedProductAttributeValues, local)
				break
			}
		}
	}

	return nil
}

// LoadValueidAttributeValue allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedProductAttributeValueL) LoadValueidAttributeValue(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedProductAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AssignedProductAttributeValue
	var object *AssignedProductAttributeValue

	if singular {
		var ok bool
		object, ok = maybeAssignedProductAttributeValue.(*AssignedProductAttributeValue)
		if !ok {
			object = new(AssignedProductAttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedProductAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedProductAttributeValue))
			}
		}
	} else {
		s, ok := maybeAssignedProductAttributeValue.(*[]*AssignedProductAttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedProductAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedProductAttributeValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedProductAttributeValueR{}
		}
		if !queries.IsNil(object.Valueid) {
			args = append(args, object.Valueid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedProductAttributeValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Valueid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Valueid) {
				args = append(args, obj.Valueid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attribute_values`),
		qm.WhereIn(`attribute_values.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AttributeValue")
	}

	var resultSlice []*AttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AttributeValue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_values")
	}

	if len(attributeValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ValueidAttributeValue = foreign
		if foreign.R == nil {
			foreign.R = &attributeValueR{}
		}
		foreign.R.ValueidAssignedProductAttributeValues = append(foreign.R.ValueidAssignedProductAttributeValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Valueid, foreign.ID) {
				local.R.ValueidAttributeValue = foreign
				if foreign.R == nil {
					foreign.R = &attributeValueR{}
				}
				foreign.R.ValueidAssignedProductAttributeValues = append(foreign.R.ValueidAssignedProductAttributeValues, local)
				break
			}
		}
	}

	return nil
}

// SetAssignmentidAssignedProductAttribute of the assignedProductAttributeValue to the related item.
// Sets o.R.AssignmentidAssignedProductAttribute to related.
// Adds o to related.R.AssignmentidAssignedProductAttributeValues.
func (o *AssignedProductAttributeValue) SetAssignmentidAssignedProductAttribute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AssignedProductAttribute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_product_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"assignmentid"}),
		strmangle.WhereClause("\"", "\"", 2, assignedProductAttributeValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Assignmentid, related.ID)
	if o.R == nil {
		o.R = &assignedProductAttributeValueR{
			AssignmentidAssignedProductAttribute: related,
		}
	} else {
		o.R.AssignmentidAssignedProductAttribute = related
	}

	if related.R == nil {
		related.R = &assignedProductAttributeR{
			AssignmentidAssignedProductAttributeValues: AssignedProductAttributeValueSlice{o},
		}
	} else {
		related.R.AssignmentidAssignedProductAttributeValues = append(related.R.AssignmentidAssignedProductAttributeValues, o)
	}

	return nil
}

// RemoveAssignmentidAssignedProductAttribute relationship.
// Sets o.R.AssignmentidAssignedProductAttribute to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AssignedProductAttributeValue) RemoveAssignmentidAssignedProductAttribute(ctx context.Context, exec boil.ContextExecutor, related *AssignedProductAttribute) error {
	var err error

	queries.SetScanner(&o.Assignmentid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("assignmentid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AssignmentidAssignedProductAttribute = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AssignmentidAssignedProductAttributeValues {
		if queries.Equal(o.Assignmentid, ri.Assignmentid) {
			continue
		}

		ln := len(related.R.AssignmentidAssignedProductAttributeValues)
		if ln > 1 && i < ln-1 {
			related.R.AssignmentidAssignedProductAttributeValues[i] = related.R.AssignmentidAssignedProductAttributeValues[ln-1]
		}
		related.R.AssignmentidAssignedProductAttributeValues = related.R.AssignmentidAssignedProductAttributeValues[:ln-1]
		break
	}
	return nil
}

// SetValueidAttributeValue of the assignedProductAttributeValue to the related item.
// Sets o.R.ValueidAttributeValue to related.
// Adds o to related.R.ValueidAssignedProductAttributeValues.
func (o *AssignedProductAttributeValue) SetValueidAttributeValue(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AttributeValue) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_product_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"valueid"}),
		strmangle.WhereClause("\"", "\"", 2, assignedProductAttributeValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Valueid, related.ID)
	if o.R == nil {
		o.R = &assignedProductAttributeValueR{
			ValueidAttributeValue: related,
		}
	} else {
		o.R.ValueidAttributeValue = related
	}

	if related.R == nil {
		related.R = &attributeValueR{
			ValueidAssignedProductAttributeValues: AssignedProductAttributeValueSlice{o},
		}
	} else {
		related.R.ValueidAssignedProductAttributeValues = append(related.R.ValueidAssignedProductAttributeValues, o)
	}

	return nil
}

// RemoveValueidAttributeValue relationship.
// Sets o.R.ValueidAttributeValue to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AssignedProductAttributeValue) RemoveValueidAttributeValue(ctx context.Context, exec boil.ContextExecutor, related *AttributeValue) error {
	var err error

	queries.SetScanner(&o.Valueid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("valueid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ValueidAttributeValue = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ValueidAssignedProductAttributeValues {
		if queries.Equal(o.Valueid, ri.Valueid) {
			continue
		}

		ln := len(related.R.ValueidAssignedProductAttributeValues)
		if ln > 1 && i < ln-1 {
			related.R.ValueidAssignedProductAttributeValues[i] = related.R.ValueidAssignedProductAttributeValues[ln-1]
		}
		related.R.ValueidAssignedProductAttributeValues = related.R.ValueidAssignedProductAttributeValues[:ln-1]
		break
	}
	return nil
}

// AssignedProductAttributeValues retrieves all the records using an executor.
func AssignedProductAttributeValues(mods ...qm.QueryMod) assignedProductAttributeValueQuery {
	mods = append(mods, qm.From("\"assigned_product_attribute_values\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assigned_product_attribute_values\".*"})
	}

	return assignedProductAttributeValueQuery{q}
}

// FindAssignedProductAttributeValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignedProductAttributeValue(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AssignedProductAttributeValue, error) {
	assignedProductAttributeValueObj := &AssignedProductAttributeValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assigned_product_attribute_values\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assignedProductAttributeValueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from assigned_product_attribute_values")
	}

	if err = assignedProductAttributeValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assignedProductAttributeValueObj, err
	}

	return assignedProductAttributeValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssignedProductAttributeValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assigned_product_attribute_values provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedProductAttributeValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignedProductAttributeValueInsertCacheMut.RLock()
	cache, cached := assignedProductAttributeValueInsertCache[key]
	assignedProductAttributeValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignedProductAttributeValueAllColumns,
			assignedProductAttributeValueColumnsWithDefault,
			assignedProductAttributeValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assignedProductAttributeValueType, assignedProductAttributeValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignedProductAttributeValueType, assignedProductAttributeValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assigned_product_attribute_values\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assigned_product_attribute_values\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assigned_product_attribute_values")
	}

	if !cached {
		assignedProductAttributeValueInsertCacheMut.Lock()
		assignedProductAttributeValueInsertCache[key] = cache
		assignedProductAttributeValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssignedProductAttributeValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssignedProductAttributeValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assignedProductAttributeValueUpdateCacheMut.RLock()
	cache, cached := assignedProductAttributeValueUpdateCache[key]
	assignedProductAttributeValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignedProductAttributeValueAllColumns,
			assignedProductAttributeValuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assigned_product_attribute_values, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assigned_product_attribute_values\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignedProductAttributeValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignedProductAttributeValueType, assignedProductAttributeValueMapping, append(wl, assignedProductAttributeValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assigned_product_attribute_values row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assigned_product_attribute_values")
	}

	if !cached {
		assignedProductAttributeValueUpdateCacheMut.Lock()
		assignedProductAttributeValueUpdateCache[key] = cache
		assignedProductAttributeValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assignedProductAttributeValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assigned_product_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assigned_product_attribute_values")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignedProductAttributeValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedProductAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assigned_product_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignedProductAttributeValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assignedProductAttributeValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assignedProductAttributeValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssignedProductAttributeValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assigned_product_attribute_values provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedProductAttributeValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignedProductAttributeValueUpsertCacheMut.RLock()
	cache, cached := assignedProductAttributeValueUpsertCache[key]
	assignedProductAttributeValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assignedProductAttributeValueAllColumns,
			assignedProductAttributeValueColumnsWithDefault,
			assignedProductAttributeValueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignedProductAttributeValueAllColumns,
			assignedProductAttributeValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assigned_product_attribute_values, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assignedProductAttributeValuePrimaryKeyColumns))
			copy(conflict, assignedProductAttributeValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"assigned_product_attribute_values\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assignedProductAttributeValueType, assignedProductAttributeValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignedProductAttributeValueType, assignedProductAttributeValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assigned_product_attribute_values")
	}

	if !cached {
		assignedProductAttributeValueUpsertCacheMut.Lock()
		assignedProductAttributeValueUpsertCache[key] = cache
		assignedProductAttributeValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssignedProductAttributeValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssignedProductAttributeValue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssignedProductAttributeValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignedProductAttributeValuePrimaryKeyMapping)
	sql := "DELETE FROM \"assigned_product_attribute_values\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assigned_product_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assigned_product_attribute_values")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignedProductAttributeValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assignedProductAttributeValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assigned_product_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assigned_product_attribute_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignedProductAttributeValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assignedProductAttributeValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedProductAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assigned_product_attribute_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedProductAttributeValuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignedProductAttributeValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assigned_product_attribute_values")
	}

	if len(assignedProductAttributeValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssignedProductAttributeValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssignedProductAttributeValue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignedProductAttributeValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignedProductAttributeValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedProductAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assigned_product_attribute_values\".* FROM \"assigned_product_attribute_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedProductAttributeValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssignedProductAttributeValueSlice")
	}

	*o = slice

	return nil
}

// AssignedProductAttributeValueExists checks if the AssignedProductAttributeValue row exists.
func AssignedProductAttributeValueExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assigned_product_attribute_values\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assigned_product_attribute_values exists")
	}

	return exists, nil
}

// Exists checks if the AssignedProductAttributeValue row exists.
func (o *AssignedProductAttributeValue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssignedProductAttributeValueExists(ctx, exec, o.ID)
}
