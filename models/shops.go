// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Shop is an object representing the database table.
type Shop struct {
	ID                                       string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Createat                                 null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Updateat                                 null.Int64  `boil:"updateat" json:"updateat,omitempty" toml:"updateat" yaml:"updateat,omitempty"`
	Name                                     null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Description                              null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Topmenuid                                null.String `boil:"topmenuid" json:"topmenuid,omitempty" toml:"topmenuid" yaml:"topmenuid,omitempty"`
	Includetaxesinprice                      null.Bool   `boil:"includetaxesinprice" json:"includetaxesinprice,omitempty" toml:"includetaxesinprice" yaml:"includetaxesinprice,omitempty"`
	Displaygrossprices                       null.Bool   `boil:"displaygrossprices" json:"displaygrossprices,omitempty" toml:"displaygrossprices" yaml:"displaygrossprices,omitempty"`
	Chargetaxesonshipping                    null.Bool   `boil:"chargetaxesonshipping" json:"chargetaxesonshipping,omitempty" toml:"chargetaxesonshipping" yaml:"chargetaxesonshipping,omitempty"`
	Trackinventorybydefault                  null.Bool   `boil:"trackinventorybydefault" json:"trackinventorybydefault,omitempty" toml:"trackinventorybydefault" yaml:"trackinventorybydefault,omitempty"`
	Defaultweightunit                        null.String `boil:"defaultweightunit" json:"defaultweightunit,omitempty" toml:"defaultweightunit" yaml:"defaultweightunit,omitempty"`
	Automaticfulfillmentdigitalproducts      null.Bool   `boil:"automaticfulfillmentdigitalproducts" json:"automaticfulfillmentdigitalproducts,omitempty" toml:"automaticfulfillmentdigitalproducts" yaml:"automaticfulfillmentdigitalproducts,omitempty"`
	Defaultdigitalmaxdownloads               null.Int    `boil:"defaultdigitalmaxdownloads" json:"defaultdigitalmaxdownloads,omitempty" toml:"defaultdigitalmaxdownloads" yaml:"defaultdigitalmaxdownloads,omitempty"`
	Defaultdigitalurlvaliddays               null.Int    `boil:"defaultdigitalurlvaliddays" json:"defaultdigitalurlvaliddays,omitempty" toml:"defaultdigitalurlvaliddays" yaml:"defaultdigitalurlvaliddays,omitempty"`
	Addressid                                null.String `boil:"addressid" json:"addressid,omitempty" toml:"addressid" yaml:"addressid,omitempty"`
	Defaultmailsendername                    null.String `boil:"defaultmailsendername" json:"defaultmailsendername,omitempty" toml:"defaultmailsendername" yaml:"defaultmailsendername,omitempty"`
	Defaultmailsenderaddress                 null.String `boil:"defaultmailsenderaddress" json:"defaultmailsenderaddress,omitempty" toml:"defaultmailsenderaddress" yaml:"defaultmailsenderaddress,omitempty"`
	Customersetpasswordurl                   null.String `boil:"customersetpasswordurl" json:"customersetpasswordurl,omitempty" toml:"customersetpasswordurl" yaml:"customersetpasswordurl,omitempty"`
	Automaticallyconfirmallneworders         null.Bool   `boil:"automaticallyconfirmallneworders" json:"automaticallyconfirmallneworders,omitempty" toml:"automaticallyconfirmallneworders" yaml:"automaticallyconfirmallneworders,omitempty"`
	Fulfillmentautoapprove                   null.Bool   `boil:"fulfillmentautoapprove" json:"fulfillmentautoapprove,omitempty" toml:"fulfillmentautoapprove" yaml:"fulfillmentautoapprove,omitempty"`
	Fulfillmentallowunpaid                   null.Bool   `boil:"fulfillmentallowunpaid" json:"fulfillmentallowunpaid,omitempty" toml:"fulfillmentallowunpaid" yaml:"fulfillmentallowunpaid,omitempty"`
	Giftcardexpirytype                       null.String `boil:"giftcardexpirytype" json:"giftcardexpirytype,omitempty" toml:"giftcardexpirytype" yaml:"giftcardexpirytype,omitempty"`
	Giftcardexpiryperiodtype                 null.String `boil:"giftcardexpiryperiodtype" json:"giftcardexpiryperiodtype,omitempty" toml:"giftcardexpiryperiodtype" yaml:"giftcardexpiryperiodtype,omitempty"`
	Giftcardexpiryperiod                     null.Int    `boil:"giftcardexpiryperiod" json:"giftcardexpiryperiod,omitempty" toml:"giftcardexpiryperiod" yaml:"giftcardexpiryperiod,omitempty"`
	Automaticallyfulfillnonshippablegiftcard null.Bool   `boil:"automaticallyfulfillnonshippablegiftcard" json:"automaticallyfulfillnonshippablegiftcard,omitempty" toml:"automaticallyfulfillnonshippablegiftcard" yaml:"automaticallyfulfillnonshippablegiftcard,omitempty"`

	R *shopR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shopL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShopColumns = struct {
	ID                                       string
	Createat                                 string
	Updateat                                 string
	Name                                     string
	Description                              string
	Topmenuid                                string
	Includetaxesinprice                      string
	Displaygrossprices                       string
	Chargetaxesonshipping                    string
	Trackinventorybydefault                  string
	Defaultweightunit                        string
	Automaticfulfillmentdigitalproducts      string
	Defaultdigitalmaxdownloads               string
	Defaultdigitalurlvaliddays               string
	Addressid                                string
	Defaultmailsendername                    string
	Defaultmailsenderaddress                 string
	Customersetpasswordurl                   string
	Automaticallyconfirmallneworders         string
	Fulfillmentautoapprove                   string
	Fulfillmentallowunpaid                   string
	Giftcardexpirytype                       string
	Giftcardexpiryperiodtype                 string
	Giftcardexpiryperiod                     string
	Automaticallyfulfillnonshippablegiftcard string
}{
	ID:                                       "id",
	Createat:                                 "createat",
	Updateat:                                 "updateat",
	Name:                                     "name",
	Description:                              "description",
	Topmenuid:                                "topmenuid",
	Includetaxesinprice:                      "includetaxesinprice",
	Displaygrossprices:                       "displaygrossprices",
	Chargetaxesonshipping:                    "chargetaxesonshipping",
	Trackinventorybydefault:                  "trackinventorybydefault",
	Defaultweightunit:                        "defaultweightunit",
	Automaticfulfillmentdigitalproducts:      "automaticfulfillmentdigitalproducts",
	Defaultdigitalmaxdownloads:               "defaultdigitalmaxdownloads",
	Defaultdigitalurlvaliddays:               "defaultdigitalurlvaliddays",
	Addressid:                                "addressid",
	Defaultmailsendername:                    "defaultmailsendername",
	Defaultmailsenderaddress:                 "defaultmailsenderaddress",
	Customersetpasswordurl:                   "customersetpasswordurl",
	Automaticallyconfirmallneworders:         "automaticallyconfirmallneworders",
	Fulfillmentautoapprove:                   "fulfillmentautoapprove",
	Fulfillmentallowunpaid:                   "fulfillmentallowunpaid",
	Giftcardexpirytype:                       "giftcardexpirytype",
	Giftcardexpiryperiodtype:                 "giftcardexpiryperiodtype",
	Giftcardexpiryperiod:                     "giftcardexpiryperiod",
	Automaticallyfulfillnonshippablegiftcard: "automaticallyfulfillnonshippablegiftcard",
}

var ShopTableColumns = struct {
	ID                                       string
	Createat                                 string
	Updateat                                 string
	Name                                     string
	Description                              string
	Topmenuid                                string
	Includetaxesinprice                      string
	Displaygrossprices                       string
	Chargetaxesonshipping                    string
	Trackinventorybydefault                  string
	Defaultweightunit                        string
	Automaticfulfillmentdigitalproducts      string
	Defaultdigitalmaxdownloads               string
	Defaultdigitalurlvaliddays               string
	Addressid                                string
	Defaultmailsendername                    string
	Defaultmailsenderaddress                 string
	Customersetpasswordurl                   string
	Automaticallyconfirmallneworders         string
	Fulfillmentautoapprove                   string
	Fulfillmentallowunpaid                   string
	Giftcardexpirytype                       string
	Giftcardexpiryperiodtype                 string
	Giftcardexpiryperiod                     string
	Automaticallyfulfillnonshippablegiftcard string
}{
	ID:                                       "shops.id",
	Createat:                                 "shops.createat",
	Updateat:                                 "shops.updateat",
	Name:                                     "shops.name",
	Description:                              "shops.description",
	Topmenuid:                                "shops.topmenuid",
	Includetaxesinprice:                      "shops.includetaxesinprice",
	Displaygrossprices:                       "shops.displaygrossprices",
	Chargetaxesonshipping:                    "shops.chargetaxesonshipping",
	Trackinventorybydefault:                  "shops.trackinventorybydefault",
	Defaultweightunit:                        "shops.defaultweightunit",
	Automaticfulfillmentdigitalproducts:      "shops.automaticfulfillmentdigitalproducts",
	Defaultdigitalmaxdownloads:               "shops.defaultdigitalmaxdownloads",
	Defaultdigitalurlvaliddays:               "shops.defaultdigitalurlvaliddays",
	Addressid:                                "shops.addressid",
	Defaultmailsendername:                    "shops.defaultmailsendername",
	Defaultmailsenderaddress:                 "shops.defaultmailsenderaddress",
	Customersetpasswordurl:                   "shops.customersetpasswordurl",
	Automaticallyconfirmallneworders:         "shops.automaticallyconfirmallneworders",
	Fulfillmentautoapprove:                   "shops.fulfillmentautoapprove",
	Fulfillmentallowunpaid:                   "shops.fulfillmentallowunpaid",
	Giftcardexpirytype:                       "shops.giftcardexpirytype",
	Giftcardexpiryperiodtype:                 "shops.giftcardexpiryperiodtype",
	Giftcardexpiryperiod:                     "shops.giftcardexpiryperiod",
	Automaticallyfulfillnonshippablegiftcard: "shops.automaticallyfulfillnonshippablegiftcard",
}

// Generated where

var ShopWhere = struct {
	ID                                       whereHelperstring
	Createat                                 whereHelpernull_Int64
	Updateat                                 whereHelpernull_Int64
	Name                                     whereHelpernull_String
	Description                              whereHelpernull_String
	Topmenuid                                whereHelpernull_String
	Includetaxesinprice                      whereHelpernull_Bool
	Displaygrossprices                       whereHelpernull_Bool
	Chargetaxesonshipping                    whereHelpernull_Bool
	Trackinventorybydefault                  whereHelpernull_Bool
	Defaultweightunit                        whereHelpernull_String
	Automaticfulfillmentdigitalproducts      whereHelpernull_Bool
	Defaultdigitalmaxdownloads               whereHelpernull_Int
	Defaultdigitalurlvaliddays               whereHelpernull_Int
	Addressid                                whereHelpernull_String
	Defaultmailsendername                    whereHelpernull_String
	Defaultmailsenderaddress                 whereHelpernull_String
	Customersetpasswordurl                   whereHelpernull_String
	Automaticallyconfirmallneworders         whereHelpernull_Bool
	Fulfillmentautoapprove                   whereHelpernull_Bool
	Fulfillmentallowunpaid                   whereHelpernull_Bool
	Giftcardexpirytype                       whereHelpernull_String
	Giftcardexpiryperiodtype                 whereHelpernull_String
	Giftcardexpiryperiod                     whereHelpernull_Int
	Automaticallyfulfillnonshippablegiftcard whereHelpernull_Bool
}{
	ID:                                       whereHelperstring{field: "\"shops\".\"id\""},
	Createat:                                 whereHelpernull_Int64{field: "\"shops\".\"createat\""},
	Updateat:                                 whereHelpernull_Int64{field: "\"shops\".\"updateat\""},
	Name:                                     whereHelpernull_String{field: "\"shops\".\"name\""},
	Description:                              whereHelpernull_String{field: "\"shops\".\"description\""},
	Topmenuid:                                whereHelpernull_String{field: "\"shops\".\"topmenuid\""},
	Includetaxesinprice:                      whereHelpernull_Bool{field: "\"shops\".\"includetaxesinprice\""},
	Displaygrossprices:                       whereHelpernull_Bool{field: "\"shops\".\"displaygrossprices\""},
	Chargetaxesonshipping:                    whereHelpernull_Bool{field: "\"shops\".\"chargetaxesonshipping\""},
	Trackinventorybydefault:                  whereHelpernull_Bool{field: "\"shops\".\"trackinventorybydefault\""},
	Defaultweightunit:                        whereHelpernull_String{field: "\"shops\".\"defaultweightunit\""},
	Automaticfulfillmentdigitalproducts:      whereHelpernull_Bool{field: "\"shops\".\"automaticfulfillmentdigitalproducts\""},
	Defaultdigitalmaxdownloads:               whereHelpernull_Int{field: "\"shops\".\"defaultdigitalmaxdownloads\""},
	Defaultdigitalurlvaliddays:               whereHelpernull_Int{field: "\"shops\".\"defaultdigitalurlvaliddays\""},
	Addressid:                                whereHelpernull_String{field: "\"shops\".\"addressid\""},
	Defaultmailsendername:                    whereHelpernull_String{field: "\"shops\".\"defaultmailsendername\""},
	Defaultmailsenderaddress:                 whereHelpernull_String{field: "\"shops\".\"defaultmailsenderaddress\""},
	Customersetpasswordurl:                   whereHelpernull_String{field: "\"shops\".\"customersetpasswordurl\""},
	Automaticallyconfirmallneworders:         whereHelpernull_Bool{field: "\"shops\".\"automaticallyconfirmallneworders\""},
	Fulfillmentautoapprove:                   whereHelpernull_Bool{field: "\"shops\".\"fulfillmentautoapprove\""},
	Fulfillmentallowunpaid:                   whereHelpernull_Bool{field: "\"shops\".\"fulfillmentallowunpaid\""},
	Giftcardexpirytype:                       whereHelpernull_String{field: "\"shops\".\"giftcardexpirytype\""},
	Giftcardexpiryperiodtype:                 whereHelpernull_String{field: "\"shops\".\"giftcardexpiryperiodtype\""},
	Giftcardexpiryperiod:                     whereHelpernull_Int{field: "\"shops\".\"giftcardexpiryperiod\""},
	Automaticallyfulfillnonshippablegiftcard: whereHelpernull_Bool{field: "\"shops\".\"automaticallyfulfillnonshippablegiftcard\""},
}

// ShopRels is where relationship names are stored.
var ShopRels = struct {
	AddressidAddress string
	TopmenuidMenu    string
}{
	AddressidAddress: "AddressidAddress",
	TopmenuidMenu:    "TopmenuidMenu",
}

// shopR is where relationships are stored.
type shopR struct {
	AddressidAddress *Address `boil:"AddressidAddress" json:"AddressidAddress" toml:"AddressidAddress" yaml:"AddressidAddress"`
	TopmenuidMenu    *Menu    `boil:"TopmenuidMenu" json:"TopmenuidMenu" toml:"TopmenuidMenu" yaml:"TopmenuidMenu"`
}

// NewStruct creates a new relationship struct
func (*shopR) NewStruct() *shopR {
	return &shopR{}
}

func (r *shopR) GetAddressidAddress() *Address {
	if r == nil {
		return nil
	}
	return r.AddressidAddress
}

func (r *shopR) GetTopmenuidMenu() *Menu {
	if r == nil {
		return nil
	}
	return r.TopmenuidMenu
}

// shopL is where Load methods for each relationship are stored.
type shopL struct{}

var (
	shopAllColumns            = []string{"id", "createat", "updateat", "name", "description", "topmenuid", "includetaxesinprice", "displaygrossprices", "chargetaxesonshipping", "trackinventorybydefault", "defaultweightunit", "automaticfulfillmentdigitalproducts", "defaultdigitalmaxdownloads", "defaultdigitalurlvaliddays", "addressid", "defaultmailsendername", "defaultmailsenderaddress", "customersetpasswordurl", "automaticallyconfirmallneworders", "fulfillmentautoapprove", "fulfillmentallowunpaid", "giftcardexpirytype", "giftcardexpiryperiodtype", "giftcardexpiryperiod", "automaticallyfulfillnonshippablegiftcard"}
	shopColumnsWithoutDefault = []string{"id"}
	shopColumnsWithDefault    = []string{"createat", "updateat", "name", "description", "topmenuid", "includetaxesinprice", "displaygrossprices", "chargetaxesonshipping", "trackinventorybydefault", "defaultweightunit", "automaticfulfillmentdigitalproducts", "defaultdigitalmaxdownloads", "defaultdigitalurlvaliddays", "addressid", "defaultmailsendername", "defaultmailsenderaddress", "customersetpasswordurl", "automaticallyconfirmallneworders", "fulfillmentautoapprove", "fulfillmentallowunpaid", "giftcardexpirytype", "giftcardexpiryperiodtype", "giftcardexpiryperiod", "automaticallyfulfillnonshippablegiftcard"}
	shopPrimaryKeyColumns     = []string{"id"}
	shopGeneratedColumns      = []string{}
)

type (
	// ShopSlice is an alias for a slice of pointers to Shop.
	// This should almost always be used instead of []Shop.
	ShopSlice []*Shop
	// ShopHook is the signature for custom Shop hook methods
	ShopHook func(context.Context, boil.ContextExecutor, *Shop) error

	shopQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shopType                 = reflect.TypeOf(&Shop{})
	shopMapping              = queries.MakeStructMapping(shopType)
	shopPrimaryKeyMapping, _ = queries.BindMapping(shopType, shopMapping, shopPrimaryKeyColumns)
	shopInsertCacheMut       sync.RWMutex
	shopInsertCache          = make(map[string]insertCache)
	shopUpdateCacheMut       sync.RWMutex
	shopUpdateCache          = make(map[string]updateCache)
	shopUpsertCacheMut       sync.RWMutex
	shopUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shopAfterSelectHooks []ShopHook

var shopBeforeInsertHooks []ShopHook
var shopAfterInsertHooks []ShopHook

var shopBeforeUpdateHooks []ShopHook
var shopAfterUpdateHooks []ShopHook

var shopBeforeDeleteHooks []ShopHook
var shopAfterDeleteHooks []ShopHook

var shopBeforeUpsertHooks []ShopHook
var shopAfterUpsertHooks []ShopHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Shop) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Shop) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Shop) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Shop) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Shop) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Shop) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Shop) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Shop) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Shop) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShopHook registers your hook function for all future operations.
func AddShopHook(hookPoint boil.HookPoint, shopHook ShopHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shopAfterSelectHooks = append(shopAfterSelectHooks, shopHook)
	case boil.BeforeInsertHook:
		shopBeforeInsertHooks = append(shopBeforeInsertHooks, shopHook)
	case boil.AfterInsertHook:
		shopAfterInsertHooks = append(shopAfterInsertHooks, shopHook)
	case boil.BeforeUpdateHook:
		shopBeforeUpdateHooks = append(shopBeforeUpdateHooks, shopHook)
	case boil.AfterUpdateHook:
		shopAfterUpdateHooks = append(shopAfterUpdateHooks, shopHook)
	case boil.BeforeDeleteHook:
		shopBeforeDeleteHooks = append(shopBeforeDeleteHooks, shopHook)
	case boil.AfterDeleteHook:
		shopAfterDeleteHooks = append(shopAfterDeleteHooks, shopHook)
	case boil.BeforeUpsertHook:
		shopBeforeUpsertHooks = append(shopBeforeUpsertHooks, shopHook)
	case boil.AfterUpsertHook:
		shopAfterUpsertHooks = append(shopAfterUpsertHooks, shopHook)
	}
}

// One returns a single shop record from the query.
func (q shopQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Shop, error) {
	o := &Shop{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shops")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Shop records from the query.
func (q shopQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShopSlice, error) {
	var o []*Shop

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Shop slice")
	}

	if len(shopAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Shop records in the query.
func (q shopQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shops rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shopQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shops exists")
	}

	return count > 0, nil
}

// AddressidAddress pointed to by the foreign key.
func (o *Shop) AddressidAddress(mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Addressid),
	}

	queryMods = append(queryMods, mods...)

	return Addresses(queryMods...)
}

// TopmenuidMenu pointed to by the foreign key.
func (o *Shop) TopmenuidMenu(mods ...qm.QueryMod) menuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Topmenuid),
	}

	queryMods = append(queryMods, mods...)

	return Menus(queryMods...)
}

// LoadAddressidAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shopL) LoadAddressidAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShop interface{}, mods queries.Applicator) error {
	var slice []*Shop
	var object *Shop

	if singular {
		var ok bool
		object, ok = maybeShop.(*Shop)
		if !ok {
			object = new(Shop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShop))
			}
		}
	} else {
		s, ok := maybeShop.(*[]*Shop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shopR{}
		}
		if !queries.IsNil(object.Addressid) {
			args = append(args, object.Addressid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Addressid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Addressid) {
				args = append(args, obj.Addressid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`addresses`),
		qm.WhereIn(`addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for addresses")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AddressidAddress = foreign
		if foreign.R == nil {
			foreign.R = &addressR{}
		}
		foreign.R.AddressidShops = append(foreign.R.AddressidShops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Addressid, foreign.ID) {
				local.R.AddressidAddress = foreign
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.AddressidShops = append(foreign.R.AddressidShops, local)
				break
			}
		}
	}

	return nil
}

// LoadTopmenuidMenu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shopL) LoadTopmenuidMenu(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShop interface{}, mods queries.Applicator) error {
	var slice []*Shop
	var object *Shop

	if singular {
		var ok bool
		object, ok = maybeShop.(*Shop)
		if !ok {
			object = new(Shop)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShop))
			}
		}
	} else {
		s, ok := maybeShop.(*[]*Shop)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShop)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShop))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shopR{}
		}
		if !queries.IsNil(object.Topmenuid) {
			args = append(args, object.Topmenuid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Topmenuid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Topmenuid) {
				args = append(args, obj.Topmenuid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menus`),
		qm.WhereIn(`menus.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Menu")
	}

	var resultSlice []*Menu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menus")
	}

	if len(menuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TopmenuidMenu = foreign
		if foreign.R == nil {
			foreign.R = &menuR{}
		}
		foreign.R.TopmenuidShops = append(foreign.R.TopmenuidShops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Topmenuid, foreign.ID) {
				local.R.TopmenuidMenu = foreign
				if foreign.R == nil {
					foreign.R = &menuR{}
				}
				foreign.R.TopmenuidShops = append(foreign.R.TopmenuidShops, local)
				break
			}
		}
	}

	return nil
}

// SetAddressidAddress of the shop to the related item.
// Sets o.R.AddressidAddress to related.
// Adds o to related.R.AddressidShops.
func (o *Shop) SetAddressidAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"addressid"}),
		strmangle.WhereClause("\"", "\"", 2, shopPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Addressid, related.ID)
	if o.R == nil {
		o.R = &shopR{
			AddressidAddress: related,
		}
	} else {
		o.R.AddressidAddress = related
	}

	if related.R == nil {
		related.R = &addressR{
			AddressidShops: ShopSlice{o},
		}
	} else {
		related.R.AddressidShops = append(related.R.AddressidShops, o)
	}

	return nil
}

// RemoveAddressidAddress relationship.
// Sets o.R.AddressidAddress to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Shop) RemoveAddressidAddress(ctx context.Context, exec boil.ContextExecutor, related *Address) error {
	var err error

	queries.SetScanner(&o.Addressid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("addressid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AddressidAddress = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AddressidShops {
		if queries.Equal(o.Addressid, ri.Addressid) {
			continue
		}

		ln := len(related.R.AddressidShops)
		if ln > 1 && i < ln-1 {
			related.R.AddressidShops[i] = related.R.AddressidShops[ln-1]
		}
		related.R.AddressidShops = related.R.AddressidShops[:ln-1]
		break
	}
	return nil
}

// SetTopmenuidMenu of the shop to the related item.
// Sets o.R.TopmenuidMenu to related.
// Adds o to related.R.TopmenuidShops.
func (o *Shop) SetTopmenuidMenu(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Menu) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"topmenuid"}),
		strmangle.WhereClause("\"", "\"", 2, shopPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Topmenuid, related.ID)
	if o.R == nil {
		o.R = &shopR{
			TopmenuidMenu: related,
		}
	} else {
		o.R.TopmenuidMenu = related
	}

	if related.R == nil {
		related.R = &menuR{
			TopmenuidShops: ShopSlice{o},
		}
	} else {
		related.R.TopmenuidShops = append(related.R.TopmenuidShops, o)
	}

	return nil
}

// RemoveTopmenuidMenu relationship.
// Sets o.R.TopmenuidMenu to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Shop) RemoveTopmenuidMenu(ctx context.Context, exec boil.ContextExecutor, related *Menu) error {
	var err error

	queries.SetScanner(&o.Topmenuid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("topmenuid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TopmenuidMenu = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TopmenuidShops {
		if queries.Equal(o.Topmenuid, ri.Topmenuid) {
			continue
		}

		ln := len(related.R.TopmenuidShops)
		if ln > 1 && i < ln-1 {
			related.R.TopmenuidShops[i] = related.R.TopmenuidShops[ln-1]
		}
		related.R.TopmenuidShops = related.R.TopmenuidShops[:ln-1]
		break
	}
	return nil
}

// Shops retrieves all the records using an executor.
func Shops(mods ...qm.QueryMod) shopQuery {
	mods = append(mods, qm.From("\"shops\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shops\".*"})
	}

	return shopQuery{q}
}

// FindShop retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShop(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Shop, error) {
	shopObj := &Shop{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shops\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shopObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shops")
	}

	if err = shopObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shopObj, err
	}

	return shopObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Shop) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shops provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shopInsertCacheMut.RLock()
	cache, cached := shopInsertCache[key]
	shopInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shopAllColumns,
			shopColumnsWithDefault,
			shopColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shopType, shopMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shopType, shopMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shops\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shops\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shops")
	}

	if !cached {
		shopInsertCacheMut.Lock()
		shopInsertCache[key] = cache
		shopInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Shop.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Shop) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shopUpdateCacheMut.RLock()
	cache, cached := shopUpdateCache[key]
	shopUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shopAllColumns,
			shopPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shops, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shops\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shopPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shopType, shopMapping, append(wl, shopPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shops row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shops")
	}

	if !cached {
		shopUpdateCacheMut.Lock()
		shopUpdateCache[key] = cache
		shopUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shopQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shops")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShopSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shopPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shop")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Shop) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shops provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shopUpsertCacheMut.RLock()
	cache, cached := shopUpsertCache[key]
	shopUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shopAllColumns,
			shopColumnsWithDefault,
			shopColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shopAllColumns,
			shopPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shops, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shopPrimaryKeyColumns))
			copy(conflict, shopPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shops\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shopType, shopMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shopType, shopMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shops")
	}

	if !cached {
		shopUpsertCacheMut.Lock()
		shopUpsertCache[key] = cache
		shopUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Shop record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Shop) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Shop provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shopPrimaryKeyMapping)
	sql := "DELETE FROM \"shops\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shops")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shopQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shopQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shops")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShopSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shopBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shops\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shops")
	}

	if len(shopAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Shop) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShop(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShopSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShopSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shops\".* FROM \"shops\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShopSlice")
	}

	*o = slice

	return nil
}

// ShopExists checks if the Shop row exists.
func ShopExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shops\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shops exists")
	}

	return exists, nil
}

// Exists checks if the Shop row exists.
func (o *Shop) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShopExists(ctx, exec, o.ID)
}
