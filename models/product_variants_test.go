// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProductVariants(t *testing.T) {
	t.Parallel()

	query := ProductVariants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProductVariantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductVariantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProductVariants().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductVariantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductVariantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductVariantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProductVariantExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProductVariant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProductVariantExists to return true, but got false.")
	}
}

func testProductVariantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	productVariantFound, err := FindProductVariant(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if productVariantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProductVariantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProductVariants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProductVariantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProductVariants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProductVariantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	productVariantOne := &ProductVariant{}
	productVariantTwo := &ProductVariant{}
	if err = randomize.Struct(seed, productVariantOne, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err = randomize.Struct(seed, productVariantTwo, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productVariantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productVariantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductVariants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProductVariantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	productVariantOne := &ProductVariant{}
	productVariantTwo := &ProductVariant{}
	if err = randomize.Struct(seed, productVariantOne, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err = randomize.Struct(seed, productVariantTwo, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productVariantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productVariantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func productVariantBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func productVariantAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
	*o = ProductVariant{}
	return nil
}

func testProductVariantsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProductVariant{}
	o := &ProductVariant{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, productVariantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductVariant object: %s", err)
	}

	AddProductVariantHook(boil.BeforeInsertHook, productVariantBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	productVariantBeforeInsertHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.AfterInsertHook, productVariantAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	productVariantAfterInsertHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.AfterSelectHook, productVariantAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	productVariantAfterSelectHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.BeforeUpdateHook, productVariantBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	productVariantBeforeUpdateHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.AfterUpdateHook, productVariantAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	productVariantAfterUpdateHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.BeforeDeleteHook, productVariantBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	productVariantBeforeDeleteHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.AfterDeleteHook, productVariantAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	productVariantAfterDeleteHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.BeforeUpsertHook, productVariantBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	productVariantBeforeUpsertHooks = []ProductVariantHook{}

	AddProductVariantHook(boil.AfterUpsertHook, productVariantAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	productVariantAfterUpsertHooks = []ProductVariantHook{}
}

func testProductVariantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductVariantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(productVariantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductVariantToManyVariantidAssignedVariantAttributes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedVariantAttributeDBTypes, false, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedVariantAttributeDBTypes, false, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Variantid, a.ID)
	queries.Assign(&c.Variantid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VariantidAssignedVariantAttributes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Variantid, b.Variantid) {
			bFound = true
		}
		if queries.Equal(v.Variantid, c.Variantid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadVariantidAssignedVariantAttributes(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantidAssignedVariantAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VariantidAssignedVariantAttributes = nil
	if err = a.L.LoadVariantidAssignedVariantAttributes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantidAssignedVariantAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyVariantidCheckoutLines(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c CheckoutLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkoutLineDBTypes, false, checkoutLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutLineDBTypes, false, checkoutLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Variantid, a.ID)
	queries.Assign(&c.Variantid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VariantidCheckoutLines().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Variantid, b.Variantid) {
			bFound = true
		}
		if queries.Equal(v.Variantid, c.Variantid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadVariantidCheckoutLines(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantidCheckoutLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VariantidCheckoutLines = nil
	if err = a.L.LoadVariantidCheckoutLines(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantidCheckoutLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyProductvariantidDigitalContents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c DigitalContent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, digitalContentDBTypes, false, digitalContentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, digitalContentDBTypes, false, digitalContentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productvariantid, a.ID)
	queries.Assign(&c.Productvariantid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductvariantidDigitalContents().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productvariantid, b.Productvariantid) {
			bFound = true
		}
		if queries.Equal(v.Productvariantid, c.Productvariantid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadProductvariantidDigitalContents(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductvariantidDigitalContents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductvariantidDigitalContents = nil
	if err = a.L.LoadProductvariantidDigitalContents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductvariantidDigitalContents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyVariantidOrderLines(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Variantid, a.ID)
	queries.Assign(&c.Variantid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VariantidOrderLines().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Variantid, b.Variantid) {
			bFound = true
		}
		if queries.Equal(v.Variantid, c.Variantid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadVariantidOrderLines(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantidOrderLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VariantidOrderLines = nil
	if err = a.L.LoadVariantidOrderLines(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantidOrderLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyVariantidProductVariantChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c ProductVariantChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productVariantChannelListingDBTypes, false, productVariantChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantChannelListingDBTypes, false, productVariantChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Variantid = a.ID
	c.Variantid = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VariantidProductVariantChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Variantid == b.Variantid {
			bFound = true
		}
		if v.Variantid == c.Variantid {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadVariantidProductVariantChannelListings(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantidProductVariantChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VariantidProductVariantChannelListings = nil
	if err = a.L.LoadVariantidProductVariantChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantidProductVariantChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyProductvariantidProductVariantTranslations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c ProductVariantTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productVariantTranslationDBTypes, false, productVariantTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantTranslationDBTypes, false, productVariantTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productvariantid, a.ID)
	queries.Assign(&c.Productvariantid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductvariantidProductVariantTranslations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productvariantid, b.Productvariantid) {
			bFound = true
		}
		if queries.Equal(v.Productvariantid, c.Productvariantid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadProductvariantidProductVariantTranslations(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductvariantidProductVariantTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductvariantidProductVariantTranslations = nil
	if err = a.L.LoadProductvariantidProductVariantTranslations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductvariantidProductVariantTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyProductvariantidStocks(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, stockDBTypes, false, stockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stockDBTypes, false, stockColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productvariantid, a.ID)
	queries.Assign(&c.Productvariantid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductvariantidStocks().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productvariantid, b.Productvariantid) {
			bFound = true
		}
		if queries.Equal(v.Productvariantid, c.Productvariantid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadProductvariantidStocks(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductvariantidStocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductvariantidStocks = nil
	if err = a.L.LoadProductvariantidStocks(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductvariantidStocks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyVariantidVariantMedia(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c VariantMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, variantMediumDBTypes, false, variantMediumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, variantMediumDBTypes, false, variantMediumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Variantid, a.ID)
	queries.Assign(&c.Variantid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VariantidVariantMedia().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Variantid, b.Variantid) {
			bFound = true
		}
		if queries.Equal(v.Variantid, c.Variantid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadVariantidVariantMedia(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantidVariantMedia); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VariantidVariantMedia = nil
	if err = a.L.LoadVariantidVariantMedia(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VariantidVariantMedia); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyProductvariantidWishlistItemProductVariants(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c WishlistItemProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, wishlistItemProductVariantDBTypes, false, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, wishlistItemProductVariantDBTypes, false, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productvariantid, a.ID)
	queries.Assign(&c.Productvariantid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductvariantidWishlistItemProductVariants().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productvariantid, b.Productvariantid) {
			bFound = true
		}
		if queries.Equal(v.Productvariantid, c.Productvariantid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadProductvariantidWishlistItemProductVariants(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductvariantidWishlistItemProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductvariantidWishlistItemProductVariants = nil
	if err = a.L.LoadProductvariantidWishlistItemProductVariants(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductvariantidWishlistItemProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyProductidWishlistItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c WishlistItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, wishlistItemDBTypes, false, wishlistItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, wishlistItemDBTypes, false, wishlistItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidWishlistItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductVariantSlice{&a}
	if err = a.L.LoadProductidWishlistItems(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidWishlistItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidWishlistItems = nil
	if err = a.L.LoadProductidWishlistItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidWishlistItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductVariantToManyAddOpVariantidAssignedVariantAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedVariantAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedVariantAttribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVariantidAssignedVariantAttributes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Variantid) {
			t.Error("foreign key was wrong value", a.ID, first.Variantid)
		}
		if !queries.Equal(a.ID, second.Variantid) {
			t.Error("foreign key was wrong value", a.ID, second.Variantid)
		}

		if first.R.VariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VariantidAssignedVariantAttributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VariantidAssignedVariantAttributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VariantidAssignedVariantAttributes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductVariantToManySetOpVariantidAssignedVariantAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedVariantAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVariantidAssignedVariantAttributes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VariantidAssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVariantidAssignedVariantAttributes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VariantidAssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Variantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Variantid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Variantid) {
		t.Error("foreign key was wrong value", a.ID, d.Variantid)
	}
	if !queries.Equal(a.ID, e.Variantid) {
		t.Error("foreign key was wrong value", a.ID, e.Variantid)
	}

	if b.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.VariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VariantidAssignedVariantAttributes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VariantidAssignedVariantAttributes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductVariantToManyRemoveOpVariantidAssignedVariantAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedVariantAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVariantidAssignedVariantAttributes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VariantidAssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVariantidAssignedVariantAttributes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VariantidAssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Variantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Variantid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.VariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VariantidAssignedVariantAttributes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VariantidAssignedVariantAttributes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VariantidAssignedVariantAttributes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductVariantToManyAddOpVariantidCheckoutLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e CheckoutLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutLineDBTypes, false, strmangle.SetComplement(checkoutLinePrimaryKeyColumns, checkoutLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CheckoutLine{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVariantidCheckoutLines(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Variantid) {
			t.Error("foreign key was wrong value", a.ID, first.Variantid)
		}
		if !queries.Equal(a.ID, second.Variantid) {
			t.Error("foreign key was wrong value", a.ID, second.Variantid)
		}

		if first.R.VariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VariantidCheckoutLines[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VariantidCheckoutLines[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VariantidCheckoutLines().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductVariantToManySetOpVariantidCheckoutLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e CheckoutLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutLineDBTypes, false, strmangle.SetComplement(checkoutLinePrimaryKeyColumns, checkoutLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVariantidCheckoutLines(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VariantidCheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVariantidCheckoutLines(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VariantidCheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Variantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Variantid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Variantid) {
		t.Error("foreign key was wrong value", a.ID, d.Variantid)
	}
	if !queries.Equal(a.ID, e.Variantid) {
		t.Error("foreign key was wrong value", a.ID, e.Variantid)
	}

	if b.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.VariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VariantidCheckoutLines[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VariantidCheckoutLines[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductVariantToManyRemoveOpVariantidCheckoutLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e CheckoutLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutLineDBTypes, false, strmangle.SetComplement(checkoutLinePrimaryKeyColumns, checkoutLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVariantidCheckoutLines(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VariantidCheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVariantidCheckoutLines(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VariantidCheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Variantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Variantid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.VariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VariantidCheckoutLines) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VariantidCheckoutLines[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VariantidCheckoutLines[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductVariantToManyAddOpProductvariantidDigitalContents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e DigitalContent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DigitalContent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, digitalContentDBTypes, false, strmangle.SetComplement(digitalContentPrimaryKeyColumns, digitalContentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DigitalContent{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductvariantidDigitalContents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productvariantid) {
			t.Error("foreign key was wrong value", a.ID, first.Productvariantid)
		}
		if !queries.Equal(a.ID, second.Productvariantid) {
			t.Error("foreign key was wrong value", a.ID, second.Productvariantid)
		}

		if first.R.ProductvariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductvariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductvariantidDigitalContents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductvariantidDigitalContents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductvariantidDigitalContents().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductVariantToManySetOpProductvariantidDigitalContents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e DigitalContent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DigitalContent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, digitalContentDBTypes, false, strmangle.SetComplement(digitalContentPrimaryKeyColumns, digitalContentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductvariantidDigitalContents(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductvariantidDigitalContents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductvariantidDigitalContents(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductvariantidDigitalContents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productvariantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productvariantid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productvariantid) {
		t.Error("foreign key was wrong value", a.ID, d.Productvariantid)
	}
	if !queries.Equal(a.ID, e.Productvariantid) {
		t.Error("foreign key was wrong value", a.ID, e.Productvariantid)
	}

	if b.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductvariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductvariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductvariantidDigitalContents[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductvariantidDigitalContents[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductVariantToManyRemoveOpProductvariantidDigitalContents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e DigitalContent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DigitalContent{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, digitalContentDBTypes, false, strmangle.SetComplement(digitalContentPrimaryKeyColumns, digitalContentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductvariantidDigitalContents(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductvariantidDigitalContents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductvariantidDigitalContents(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductvariantidDigitalContents().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productvariantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productvariantid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductvariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductvariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductvariantidDigitalContents) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductvariantidDigitalContents[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductvariantidDigitalContents[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductVariantToManyAddOpVariantidOrderLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderLine{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVariantidOrderLines(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Variantid) {
			t.Error("foreign key was wrong value", a.ID, first.Variantid)
		}
		if !queries.Equal(a.ID, second.Variantid) {
			t.Error("foreign key was wrong value", a.ID, second.Variantid)
		}

		if first.R.VariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VariantidOrderLines[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VariantidOrderLines[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VariantidOrderLines().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductVariantToManySetOpVariantidOrderLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVariantidOrderLines(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VariantidOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVariantidOrderLines(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VariantidOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Variantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Variantid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Variantid) {
		t.Error("foreign key was wrong value", a.ID, d.Variantid)
	}
	if !queries.Equal(a.ID, e.Variantid) {
		t.Error("foreign key was wrong value", a.ID, e.Variantid)
	}

	if b.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.VariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VariantidOrderLines[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VariantidOrderLines[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductVariantToManyRemoveOpVariantidOrderLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVariantidOrderLines(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VariantidOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVariantidOrderLines(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VariantidOrderLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Variantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Variantid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.VariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VariantidOrderLines) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VariantidOrderLines[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VariantidOrderLines[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductVariantToManyAddOpVariantidProductVariantChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e ProductVariantChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariantChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantChannelListingDBTypes, false, strmangle.SetComplement(productVariantChannelListingPrimaryKeyColumns, productVariantChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductVariantChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVariantidProductVariantChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Variantid {
			t.Error("foreign key was wrong value", a.ID, first.Variantid)
		}
		if a.ID != second.Variantid {
			t.Error("foreign key was wrong value", a.ID, second.Variantid)
		}

		if first.R.VariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VariantidProductVariantChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VariantidProductVariantChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VariantidProductVariantChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testProductVariantToManyAddOpProductvariantidProductVariantTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e ProductVariantTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariantTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantTranslationDBTypes, false, strmangle.SetComplement(productVariantTranslationPrimaryKeyColumns, productVariantTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductVariantTranslation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductvariantidProductVariantTranslations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productvariantid) {
			t.Error("foreign key was wrong value", a.ID, first.Productvariantid)
		}
		if !queries.Equal(a.ID, second.Productvariantid) {
			t.Error("foreign key was wrong value", a.ID, second.Productvariantid)
		}

		if first.R.ProductvariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductvariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductvariantidProductVariantTranslations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductvariantidProductVariantTranslations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductvariantidProductVariantTranslations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductVariantToManySetOpProductvariantidProductVariantTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e ProductVariantTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariantTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantTranslationDBTypes, false, strmangle.SetComplement(productVariantTranslationPrimaryKeyColumns, productVariantTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductvariantidProductVariantTranslations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductvariantidProductVariantTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductvariantidProductVariantTranslations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductvariantidProductVariantTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productvariantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productvariantid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productvariantid) {
		t.Error("foreign key was wrong value", a.ID, d.Productvariantid)
	}
	if !queries.Equal(a.ID, e.Productvariantid) {
		t.Error("foreign key was wrong value", a.ID, e.Productvariantid)
	}

	if b.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductvariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductvariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductvariantidProductVariantTranslations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductvariantidProductVariantTranslations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductVariantToManyRemoveOpProductvariantidProductVariantTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e ProductVariantTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariantTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantTranslationDBTypes, false, strmangle.SetComplement(productVariantTranslationPrimaryKeyColumns, productVariantTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductvariantidProductVariantTranslations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductvariantidProductVariantTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductvariantidProductVariantTranslations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductvariantidProductVariantTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productvariantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productvariantid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductvariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductvariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductvariantidProductVariantTranslations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductvariantidProductVariantTranslations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductvariantidProductVariantTranslations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductVariantToManyAddOpProductvariantidStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Stock{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductvariantidStocks(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productvariantid) {
			t.Error("foreign key was wrong value", a.ID, first.Productvariantid)
		}
		if !queries.Equal(a.ID, second.Productvariantid) {
			t.Error("foreign key was wrong value", a.ID, second.Productvariantid)
		}

		if first.R.ProductvariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductvariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductvariantidStocks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductvariantidStocks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductvariantidStocks().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductVariantToManySetOpProductvariantidStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductvariantidStocks(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductvariantidStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductvariantidStocks(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductvariantidStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productvariantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productvariantid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productvariantid) {
		t.Error("foreign key was wrong value", a.ID, d.Productvariantid)
	}
	if !queries.Equal(a.ID, e.Productvariantid) {
		t.Error("foreign key was wrong value", a.ID, e.Productvariantid)
	}

	if b.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductvariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductvariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductvariantidStocks[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductvariantidStocks[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductVariantToManyRemoveOpProductvariantidStocks(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Stock{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductvariantidStocks(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductvariantidStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductvariantidStocks(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductvariantidStocks().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productvariantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productvariantid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductvariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductvariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductvariantidStocks) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductvariantidStocks[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductvariantidStocks[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductVariantToManyAddOpVariantidVariantMedia(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e VariantMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VariantMedium{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variantMediumDBTypes, false, strmangle.SetComplement(variantMediumPrimaryKeyColumns, variantMediumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VariantMedium{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVariantidVariantMedia(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Variantid) {
			t.Error("foreign key was wrong value", a.ID, first.Variantid)
		}
		if !queries.Equal(a.ID, second.Variantid) {
			t.Error("foreign key was wrong value", a.ID, second.Variantid)
		}

		if first.R.VariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.VariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VariantidVariantMedia[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VariantidVariantMedia[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VariantidVariantMedia().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductVariantToManySetOpVariantidVariantMedia(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e VariantMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VariantMedium{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variantMediumDBTypes, false, strmangle.SetComplement(variantMediumPrimaryKeyColumns, variantMediumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetVariantidVariantMedia(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VariantidVariantMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVariantidVariantMedia(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VariantidVariantMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Variantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Variantid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Variantid) {
		t.Error("foreign key was wrong value", a.ID, d.Variantid)
	}
	if !queries.Equal(a.ID, e.Variantid) {
		t.Error("foreign key was wrong value", a.ID, e.Variantid)
	}

	if b.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.VariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.VariantidVariantMedia[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.VariantidVariantMedia[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductVariantToManyRemoveOpVariantidVariantMedia(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e VariantMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VariantMedium{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, variantMediumDBTypes, false, strmangle.SetComplement(variantMediumPrimaryKeyColumns, variantMediumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddVariantidVariantMedia(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VariantidVariantMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVariantidVariantMedia(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VariantidVariantMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Variantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Variantid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.VariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.VariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.VariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.VariantidVariantMedia) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.VariantidVariantMedia[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.VariantidVariantMedia[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductVariantToManyAddOpProductvariantidWishlistItemProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e WishlistItemProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WishlistItemProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, wishlistItemProductVariantDBTypes, false, strmangle.SetComplement(wishlistItemProductVariantPrimaryKeyColumns, wishlistItemProductVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*WishlistItemProductVariant{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductvariantidWishlistItemProductVariants(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productvariantid) {
			t.Error("foreign key was wrong value", a.ID, first.Productvariantid)
		}
		if !queries.Equal(a.ID, second.Productvariantid) {
			t.Error("foreign key was wrong value", a.ID, second.Productvariantid)
		}

		if first.R.ProductvariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductvariantidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductvariantidWishlistItemProductVariants[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductvariantidWishlistItemProductVariants[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductvariantidWishlistItemProductVariants().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductVariantToManySetOpProductvariantidWishlistItemProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e WishlistItemProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WishlistItemProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, wishlistItemProductVariantDBTypes, false, strmangle.SetComplement(wishlistItemProductVariantPrimaryKeyColumns, wishlistItemProductVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductvariantidWishlistItemProductVariants(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductvariantidWishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductvariantidWishlistItemProductVariants(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductvariantidWishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productvariantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productvariantid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productvariantid) {
		t.Error("foreign key was wrong value", a.ID, d.Productvariantid)
	}
	if !queries.Equal(a.ID, e.Productvariantid) {
		t.Error("foreign key was wrong value", a.ID, e.Productvariantid)
	}

	if b.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductvariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductvariantidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductvariantidWishlistItemProductVariants[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductvariantidWishlistItemProductVariants[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductVariantToManyRemoveOpProductvariantidWishlistItemProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e WishlistItemProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WishlistItemProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, wishlistItemProductVariantDBTypes, false, strmangle.SetComplement(wishlistItemProductVariantPrimaryKeyColumns, wishlistItemProductVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductvariantidWishlistItemProductVariants(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductvariantidWishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductvariantidWishlistItemProductVariants(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductvariantidWishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productvariantid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productvariantid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductvariantidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductvariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductvariantidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductvariantidWishlistItemProductVariants) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductvariantidWishlistItemProductVariants[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductvariantidWishlistItemProductVariants[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductVariantToManyAddOpProductidWishlistItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e WishlistItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WishlistItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*WishlistItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidWishlistItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProductVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidWishlistItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidWishlistItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidWishlistItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductVariantToManySetOpProductidWishlistItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e WishlistItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WishlistItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidWishlistItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidWishlistItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidWishlistItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidWishlistItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProductVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidWishlistItems[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidWishlistItems[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductVariantToManyRemoveOpProductidWishlistItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c, d, e WishlistItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WishlistItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidWishlistItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidWishlistItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidWishlistItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidWishlistItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProductVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProductVariant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidWishlistItems) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidWishlistItems[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidWishlistItems[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductVariantToOneProductUsingProductidProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductVariant
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Productid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductidProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ProductVariantSlice{&local}
	if err = local.L.LoadProductidProduct(ctx, tx, false, (*[]*ProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductidProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductidProduct = nil
	if err = local.L.LoadProductidProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductidProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testProductVariantToOneSetOpProductUsingProductidProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProductidProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductidProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductidProductVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Productid, x.ID) {
			t.Error("foreign key was wrong value", a.Productid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Productid))
		reflect.Indirect(reflect.ValueOf(&a.Productid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Productid, x.ID) {
			t.Error("foreign key was wrong value", a.Productid, x.ID)
		}
	}
}

func testProductVariantToOneRemoveOpProductUsingProductidProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductVariant
	var b Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProductidProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProductidProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProductidProduct().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProductidProduct != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Productid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductidProductVariants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProductVariantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductVariantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductVariantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductVariantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductVariants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	productVariantDBTypes = map[string]string{`ID`: `character varying`, `Name`: `character varying`, `Productid`: `character varying`, `Sku`: `character varying`, `Weight`: `real`, `Weightunit`: `text`, `Trackinventory`: `boolean`, `Ispreorder`: `boolean`, `Preorderenddate`: `bigint`, `Preorderglobalthreshold`: `integer`, `Sortorder`: `integer`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`}
	_                     = bytes.MinRead
)

func testProductVariantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(productVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(productVariantAllColumns) == len(productVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProductVariantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(productVariantAllColumns) == len(productVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductVariant{}
	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productVariantDBTypes, true, productVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(productVariantAllColumns, productVariantPrimaryKeyColumns) {
		fields = productVariantAllColumns
	} else {
		fields = strmangle.SetComplement(
			productVariantAllColumns,
			productVariantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProductVariantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProductVariantsUpsert(t *testing.T) {
	t.Parallel()

	if len(productVariantAllColumns) == len(productVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProductVariant{}
	if err = randomize.Struct(seed, &o, productVariantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductVariant: %s", err)
	}

	count, err := ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, productVariantDBTypes, false, productVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductVariant: %s", err)
	}

	count, err = ProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
