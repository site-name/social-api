// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderLine is an object representing the database table.
type OrderLine struct {
	ID                                string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Createat                          null.Int64   `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Orderid                           null.String  `boil:"orderid" json:"orderid,omitempty" toml:"orderid" yaml:"orderid,omitempty"`
	Variantid                         null.String  `boil:"variantid" json:"variantid,omitempty" toml:"variantid" yaml:"variantid,omitempty"`
	Productname                       null.String  `boil:"productname" json:"productname,omitempty" toml:"productname" yaml:"productname,omitempty"`
	Variantname                       null.String  `boil:"variantname" json:"variantname,omitempty" toml:"variantname" yaml:"variantname,omitempty"`
	Translatedproductname             null.String  `boil:"translatedproductname" json:"translatedproductname,omitempty" toml:"translatedproductname" yaml:"translatedproductname,omitempty"`
	Translatedvariantname             null.String  `boil:"translatedvariantname" json:"translatedvariantname,omitempty" toml:"translatedvariantname" yaml:"translatedvariantname,omitempty"`
	Productsku                        null.String  `boil:"productsku" json:"productsku,omitempty" toml:"productsku" yaml:"productsku,omitempty"`
	Productvariantid                  null.String  `boil:"productvariantid" json:"productvariantid,omitempty" toml:"productvariantid" yaml:"productvariantid,omitempty"`
	Isshippingrequired                null.Bool    `boil:"isshippingrequired" json:"isshippingrequired,omitempty" toml:"isshippingrequired" yaml:"isshippingrequired,omitempty"`
	Isgiftcard                        null.Bool    `boil:"isgiftcard" json:"isgiftcard,omitempty" toml:"isgiftcard" yaml:"isgiftcard,omitempty"`
	Quantity                          null.Int     `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	Quantityfulfilled                 null.Int     `boil:"quantityfulfilled" json:"quantityfulfilled,omitempty" toml:"quantityfulfilled" yaml:"quantityfulfilled,omitempty"`
	Currency                          null.String  `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	Unitdiscountamount                null.Float64 `boil:"unitdiscountamount" json:"unitdiscountamount,omitempty" toml:"unitdiscountamount" yaml:"unitdiscountamount,omitempty"`
	Unitdiscounttype                  null.String  `boil:"unitdiscounttype" json:"unitdiscounttype,omitempty" toml:"unitdiscounttype" yaml:"unitdiscounttype,omitempty"`
	Unitdiscountreason                null.String  `boil:"unitdiscountreason" json:"unitdiscountreason,omitempty" toml:"unitdiscountreason" yaml:"unitdiscountreason,omitempty"`
	Unitpricenetamount                null.Float64 `boil:"unitpricenetamount" json:"unitpricenetamount,omitempty" toml:"unitpricenetamount" yaml:"unitpricenetamount,omitempty"`
	Unitdiscountvalue                 null.Float64 `boil:"unitdiscountvalue" json:"unitdiscountvalue,omitempty" toml:"unitdiscountvalue" yaml:"unitdiscountvalue,omitempty"`
	Unitpricegrossamount              null.Float64 `boil:"unitpricegrossamount" json:"unitpricegrossamount,omitempty" toml:"unitpricegrossamount" yaml:"unitpricegrossamount,omitempty"`
	Totalpricenetamount               null.Float64 `boil:"totalpricenetamount" json:"totalpricenetamount,omitempty" toml:"totalpricenetamount" yaml:"totalpricenetamount,omitempty"`
	Totalpricegrossamount             null.Float64 `boil:"totalpricegrossamount" json:"totalpricegrossamount,omitempty" toml:"totalpricegrossamount" yaml:"totalpricegrossamount,omitempty"`
	Undiscountedunitpricegrossamount  null.Float64 `boil:"undiscountedunitpricegrossamount" json:"undiscountedunitpricegrossamount,omitempty" toml:"undiscountedunitpricegrossamount" yaml:"undiscountedunitpricegrossamount,omitempty"`
	Undiscountedunitpricenetamount    null.Float64 `boil:"undiscountedunitpricenetamount" json:"undiscountedunitpricenetamount,omitempty" toml:"undiscountedunitpricenetamount" yaml:"undiscountedunitpricenetamount,omitempty"`
	Undiscountedtotalpricegrossamount null.Float64 `boil:"undiscountedtotalpricegrossamount" json:"undiscountedtotalpricegrossamount,omitempty" toml:"undiscountedtotalpricegrossamount" yaml:"undiscountedtotalpricegrossamount,omitempty"`
	Undiscountedtotalpricenetamount   null.Float64 `boil:"undiscountedtotalpricenetamount" json:"undiscountedtotalpricenetamount,omitempty" toml:"undiscountedtotalpricenetamount" yaml:"undiscountedtotalpricenetamount,omitempty"`
	Taxrate                           null.Float64 `boil:"taxrate" json:"taxrate,omitempty" toml:"taxrate" yaml:"taxrate,omitempty"`
	Allocations                       null.String  `boil:"allocations" json:"allocations,omitempty" toml:"allocations" yaml:"allocations,omitempty"`

	R *orderLineR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderLineL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderLineColumns = struct {
	ID                                string
	Createat                          string
	Orderid                           string
	Variantid                         string
	Productname                       string
	Variantname                       string
	Translatedproductname             string
	Translatedvariantname             string
	Productsku                        string
	Productvariantid                  string
	Isshippingrequired                string
	Isgiftcard                        string
	Quantity                          string
	Quantityfulfilled                 string
	Currency                          string
	Unitdiscountamount                string
	Unitdiscounttype                  string
	Unitdiscountreason                string
	Unitpricenetamount                string
	Unitdiscountvalue                 string
	Unitpricegrossamount              string
	Totalpricenetamount               string
	Totalpricegrossamount             string
	Undiscountedunitpricegrossamount  string
	Undiscountedunitpricenetamount    string
	Undiscountedtotalpricegrossamount string
	Undiscountedtotalpricenetamount   string
	Taxrate                           string
	Allocations                       string
}{
	ID:                                "id",
	Createat:                          "createat",
	Orderid:                           "orderid",
	Variantid:                         "variantid",
	Productname:                       "productname",
	Variantname:                       "variantname",
	Translatedproductname:             "translatedproductname",
	Translatedvariantname:             "translatedvariantname",
	Productsku:                        "productsku",
	Productvariantid:                  "productvariantid",
	Isshippingrequired:                "isshippingrequired",
	Isgiftcard:                        "isgiftcard",
	Quantity:                          "quantity",
	Quantityfulfilled:                 "quantityfulfilled",
	Currency:                          "currency",
	Unitdiscountamount:                "unitdiscountamount",
	Unitdiscounttype:                  "unitdiscounttype",
	Unitdiscountreason:                "unitdiscountreason",
	Unitpricenetamount:                "unitpricenetamount",
	Unitdiscountvalue:                 "unitdiscountvalue",
	Unitpricegrossamount:              "unitpricegrossamount",
	Totalpricenetamount:               "totalpricenetamount",
	Totalpricegrossamount:             "totalpricegrossamount",
	Undiscountedunitpricegrossamount:  "undiscountedunitpricegrossamount",
	Undiscountedunitpricenetamount:    "undiscountedunitpricenetamount",
	Undiscountedtotalpricegrossamount: "undiscountedtotalpricegrossamount",
	Undiscountedtotalpricenetamount:   "undiscountedtotalpricenetamount",
	Taxrate:                           "taxrate",
	Allocations:                       "allocations",
}

var OrderLineTableColumns = struct {
	ID                                string
	Createat                          string
	Orderid                           string
	Variantid                         string
	Productname                       string
	Variantname                       string
	Translatedproductname             string
	Translatedvariantname             string
	Productsku                        string
	Productvariantid                  string
	Isshippingrequired                string
	Isgiftcard                        string
	Quantity                          string
	Quantityfulfilled                 string
	Currency                          string
	Unitdiscountamount                string
	Unitdiscounttype                  string
	Unitdiscountreason                string
	Unitpricenetamount                string
	Unitdiscountvalue                 string
	Unitpricegrossamount              string
	Totalpricenetamount               string
	Totalpricegrossamount             string
	Undiscountedunitpricegrossamount  string
	Undiscountedunitpricenetamount    string
	Undiscountedtotalpricegrossamount string
	Undiscountedtotalpricenetamount   string
	Taxrate                           string
	Allocations                       string
}{
	ID:                                "order_lines.id",
	Createat:                          "order_lines.createat",
	Orderid:                           "order_lines.orderid",
	Variantid:                         "order_lines.variantid",
	Productname:                       "order_lines.productname",
	Variantname:                       "order_lines.variantname",
	Translatedproductname:             "order_lines.translatedproductname",
	Translatedvariantname:             "order_lines.translatedvariantname",
	Productsku:                        "order_lines.productsku",
	Productvariantid:                  "order_lines.productvariantid",
	Isshippingrequired:                "order_lines.isshippingrequired",
	Isgiftcard:                        "order_lines.isgiftcard",
	Quantity:                          "order_lines.quantity",
	Quantityfulfilled:                 "order_lines.quantityfulfilled",
	Currency:                          "order_lines.currency",
	Unitdiscountamount:                "order_lines.unitdiscountamount",
	Unitdiscounttype:                  "order_lines.unitdiscounttype",
	Unitdiscountreason:                "order_lines.unitdiscountreason",
	Unitpricenetamount:                "order_lines.unitpricenetamount",
	Unitdiscountvalue:                 "order_lines.unitdiscountvalue",
	Unitpricegrossamount:              "order_lines.unitpricegrossamount",
	Totalpricenetamount:               "order_lines.totalpricenetamount",
	Totalpricegrossamount:             "order_lines.totalpricegrossamount",
	Undiscountedunitpricegrossamount:  "order_lines.undiscountedunitpricegrossamount",
	Undiscountedunitpricenetamount:    "order_lines.undiscountedunitpricenetamount",
	Undiscountedtotalpricegrossamount: "order_lines.undiscountedtotalpricegrossamount",
	Undiscountedtotalpricenetamount:   "order_lines.undiscountedtotalpricenetamount",
	Taxrate:                           "order_lines.taxrate",
	Allocations:                       "order_lines.allocations",
}

// Generated where

var OrderLineWhere = struct {
	ID                                whereHelperstring
	Createat                          whereHelpernull_Int64
	Orderid                           whereHelpernull_String
	Variantid                         whereHelpernull_String
	Productname                       whereHelpernull_String
	Variantname                       whereHelpernull_String
	Translatedproductname             whereHelpernull_String
	Translatedvariantname             whereHelpernull_String
	Productsku                        whereHelpernull_String
	Productvariantid                  whereHelpernull_String
	Isshippingrequired                whereHelpernull_Bool
	Isgiftcard                        whereHelpernull_Bool
	Quantity                          whereHelpernull_Int
	Quantityfulfilled                 whereHelpernull_Int
	Currency                          whereHelpernull_String
	Unitdiscountamount                whereHelpernull_Float64
	Unitdiscounttype                  whereHelpernull_String
	Unitdiscountreason                whereHelpernull_String
	Unitpricenetamount                whereHelpernull_Float64
	Unitdiscountvalue                 whereHelpernull_Float64
	Unitpricegrossamount              whereHelpernull_Float64
	Totalpricenetamount               whereHelpernull_Float64
	Totalpricegrossamount             whereHelpernull_Float64
	Undiscountedunitpricegrossamount  whereHelpernull_Float64
	Undiscountedunitpricenetamount    whereHelpernull_Float64
	Undiscountedtotalpricegrossamount whereHelpernull_Float64
	Undiscountedtotalpricenetamount   whereHelpernull_Float64
	Taxrate                           whereHelpernull_Float64
	Allocations                       whereHelpernull_String
}{
	ID:                                whereHelperstring{field: "\"order_lines\".\"id\""},
	Createat:                          whereHelpernull_Int64{field: "\"order_lines\".\"createat\""},
	Orderid:                           whereHelpernull_String{field: "\"order_lines\".\"orderid\""},
	Variantid:                         whereHelpernull_String{field: "\"order_lines\".\"variantid\""},
	Productname:                       whereHelpernull_String{field: "\"order_lines\".\"productname\""},
	Variantname:                       whereHelpernull_String{field: "\"order_lines\".\"variantname\""},
	Translatedproductname:             whereHelpernull_String{field: "\"order_lines\".\"translatedproductname\""},
	Translatedvariantname:             whereHelpernull_String{field: "\"order_lines\".\"translatedvariantname\""},
	Productsku:                        whereHelpernull_String{field: "\"order_lines\".\"productsku\""},
	Productvariantid:                  whereHelpernull_String{field: "\"order_lines\".\"productvariantid\""},
	Isshippingrequired:                whereHelpernull_Bool{field: "\"order_lines\".\"isshippingrequired\""},
	Isgiftcard:                        whereHelpernull_Bool{field: "\"order_lines\".\"isgiftcard\""},
	Quantity:                          whereHelpernull_Int{field: "\"order_lines\".\"quantity\""},
	Quantityfulfilled:                 whereHelpernull_Int{field: "\"order_lines\".\"quantityfulfilled\""},
	Currency:                          whereHelpernull_String{field: "\"order_lines\".\"currency\""},
	Unitdiscountamount:                whereHelpernull_Float64{field: "\"order_lines\".\"unitdiscountamount\""},
	Unitdiscounttype:                  whereHelpernull_String{field: "\"order_lines\".\"unitdiscounttype\""},
	Unitdiscountreason:                whereHelpernull_String{field: "\"order_lines\".\"unitdiscountreason\""},
	Unitpricenetamount:                whereHelpernull_Float64{field: "\"order_lines\".\"unitpricenetamount\""},
	Unitdiscountvalue:                 whereHelpernull_Float64{field: "\"order_lines\".\"unitdiscountvalue\""},
	Unitpricegrossamount:              whereHelpernull_Float64{field: "\"order_lines\".\"unitpricegrossamount\""},
	Totalpricenetamount:               whereHelpernull_Float64{field: "\"order_lines\".\"totalpricenetamount\""},
	Totalpricegrossamount:             whereHelpernull_Float64{field: "\"order_lines\".\"totalpricegrossamount\""},
	Undiscountedunitpricegrossamount:  whereHelpernull_Float64{field: "\"order_lines\".\"undiscountedunitpricegrossamount\""},
	Undiscountedunitpricenetamount:    whereHelpernull_Float64{field: "\"order_lines\".\"undiscountedunitpricenetamount\""},
	Undiscountedtotalpricegrossamount: whereHelpernull_Float64{field: "\"order_lines\".\"undiscountedtotalpricegrossamount\""},
	Undiscountedtotalpricenetamount:   whereHelpernull_Float64{field: "\"order_lines\".\"undiscountedtotalpricenetamount\""},
	Taxrate:                           whereHelpernull_Float64{field: "\"order_lines\".\"taxrate\""},
	Allocations:                       whereHelpernull_String{field: "\"order_lines\".\"allocations\""},
}

// OrderLineRels is where relationship names are stored.
var OrderLineRels = struct {
	OrderidOrder                string
	VariantidProductVariant     string
	LineidDigitalContentURL     string
	OrderlineidAllocations      string
	OrderlineidFulfillmentLines string
}{
	OrderidOrder:                "OrderidOrder",
	VariantidProductVariant:     "VariantidProductVariant",
	LineidDigitalContentURL:     "LineidDigitalContentURL",
	OrderlineidAllocations:      "OrderlineidAllocations",
	OrderlineidFulfillmentLines: "OrderlineidFulfillmentLines",
}

// orderLineR is where relationships are stored.
type orderLineR struct {
	OrderidOrder                *Order               `boil:"OrderidOrder" json:"OrderidOrder" toml:"OrderidOrder" yaml:"OrderidOrder"`
	VariantidProductVariant     *ProductVariant      `boil:"VariantidProductVariant" json:"VariantidProductVariant" toml:"VariantidProductVariant" yaml:"VariantidProductVariant"`
	LineidDigitalContentURL     *DigitalContentURL   `boil:"LineidDigitalContentURL" json:"LineidDigitalContentURL" toml:"LineidDigitalContentURL" yaml:"LineidDigitalContentURL"`
	OrderlineidAllocations      AllocationSlice      `boil:"OrderlineidAllocations" json:"OrderlineidAllocations" toml:"OrderlineidAllocations" yaml:"OrderlineidAllocations"`
	OrderlineidFulfillmentLines FulfillmentLineSlice `boil:"OrderlineidFulfillmentLines" json:"OrderlineidFulfillmentLines" toml:"OrderlineidFulfillmentLines" yaml:"OrderlineidFulfillmentLines"`
}

// NewStruct creates a new relationship struct
func (*orderLineR) NewStruct() *orderLineR {
	return &orderLineR{}
}

func (r *orderLineR) GetOrderidOrder() *Order {
	if r == nil {
		return nil
	}
	return r.OrderidOrder
}

func (r *orderLineR) GetVariantidProductVariant() *ProductVariant {
	if r == nil {
		return nil
	}
	return r.VariantidProductVariant
}

func (r *orderLineR) GetLineidDigitalContentURL() *DigitalContentURL {
	if r == nil {
		return nil
	}
	return r.LineidDigitalContentURL
}

func (r *orderLineR) GetOrderlineidAllocations() AllocationSlice {
	if r == nil {
		return nil
	}
	return r.OrderlineidAllocations
}

func (r *orderLineR) GetOrderlineidFulfillmentLines() FulfillmentLineSlice {
	if r == nil {
		return nil
	}
	return r.OrderlineidFulfillmentLines
}

// orderLineL is where Load methods for each relationship are stored.
type orderLineL struct{}

var (
	orderLineAllColumns            = []string{"id", "createat", "orderid", "variantid", "productname", "variantname", "translatedproductname", "translatedvariantname", "productsku", "productvariantid", "isshippingrequired", "isgiftcard", "quantity", "quantityfulfilled", "currency", "unitdiscountamount", "unitdiscounttype", "unitdiscountreason", "unitpricenetamount", "unitdiscountvalue", "unitpricegrossamount", "totalpricenetamount", "totalpricegrossamount", "undiscountedunitpricegrossamount", "undiscountedunitpricenetamount", "undiscountedtotalpricegrossamount", "undiscountedtotalpricenetamount", "taxrate", "allocations"}
	orderLineColumnsWithoutDefault = []string{"id"}
	orderLineColumnsWithDefault    = []string{"createat", "orderid", "variantid", "productname", "variantname", "translatedproductname", "translatedvariantname", "productsku", "productvariantid", "isshippingrequired", "isgiftcard", "quantity", "quantityfulfilled", "currency", "unitdiscountamount", "unitdiscounttype", "unitdiscountreason", "unitpricenetamount", "unitdiscountvalue", "unitpricegrossamount", "totalpricenetamount", "totalpricegrossamount", "undiscountedunitpricegrossamount", "undiscountedunitpricenetamount", "undiscountedtotalpricegrossamount", "undiscountedtotalpricenetamount", "taxrate", "allocations"}
	orderLinePrimaryKeyColumns     = []string{"id"}
	orderLineGeneratedColumns      = []string{}
)

type (
	// OrderLineSlice is an alias for a slice of pointers to OrderLine.
	// This should almost always be used instead of []OrderLine.
	OrderLineSlice []*OrderLine
	// OrderLineHook is the signature for custom OrderLine hook methods
	OrderLineHook func(context.Context, boil.ContextExecutor, *OrderLine) error

	orderLineQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderLineType                 = reflect.TypeOf(&OrderLine{})
	orderLineMapping              = queries.MakeStructMapping(orderLineType)
	orderLinePrimaryKeyMapping, _ = queries.BindMapping(orderLineType, orderLineMapping, orderLinePrimaryKeyColumns)
	orderLineInsertCacheMut       sync.RWMutex
	orderLineInsertCache          = make(map[string]insertCache)
	orderLineUpdateCacheMut       sync.RWMutex
	orderLineUpdateCache          = make(map[string]updateCache)
	orderLineUpsertCacheMut       sync.RWMutex
	orderLineUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderLineAfterSelectHooks []OrderLineHook

var orderLineBeforeInsertHooks []OrderLineHook
var orderLineAfterInsertHooks []OrderLineHook

var orderLineBeforeUpdateHooks []OrderLineHook
var orderLineAfterUpdateHooks []OrderLineHook

var orderLineBeforeDeleteHooks []OrderLineHook
var orderLineAfterDeleteHooks []OrderLineHook

var orderLineBeforeUpsertHooks []OrderLineHook
var orderLineAfterUpsertHooks []OrderLineHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderLine) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderLine) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderLine) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderLine) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderLine) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderLine) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderLine) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderLine) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderLine) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderLineAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderLineHook registers your hook function for all future operations.
func AddOrderLineHook(hookPoint boil.HookPoint, orderLineHook OrderLineHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderLineAfterSelectHooks = append(orderLineAfterSelectHooks, orderLineHook)
	case boil.BeforeInsertHook:
		orderLineBeforeInsertHooks = append(orderLineBeforeInsertHooks, orderLineHook)
	case boil.AfterInsertHook:
		orderLineAfterInsertHooks = append(orderLineAfterInsertHooks, orderLineHook)
	case boil.BeforeUpdateHook:
		orderLineBeforeUpdateHooks = append(orderLineBeforeUpdateHooks, orderLineHook)
	case boil.AfterUpdateHook:
		orderLineAfterUpdateHooks = append(orderLineAfterUpdateHooks, orderLineHook)
	case boil.BeforeDeleteHook:
		orderLineBeforeDeleteHooks = append(orderLineBeforeDeleteHooks, orderLineHook)
	case boil.AfterDeleteHook:
		orderLineAfterDeleteHooks = append(orderLineAfterDeleteHooks, orderLineHook)
	case boil.BeforeUpsertHook:
		orderLineBeforeUpsertHooks = append(orderLineBeforeUpsertHooks, orderLineHook)
	case boil.AfterUpsertHook:
		orderLineAfterUpsertHooks = append(orderLineAfterUpsertHooks, orderLineHook)
	}
}

// One returns a single orderLine record from the query.
func (q orderLineQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderLine, error) {
	o := &OrderLine{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for order_lines")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderLine records from the query.
func (q orderLineQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderLineSlice, error) {
	var o []*OrderLine

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrderLine slice")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderLine records in the query.
func (q orderLineQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count order_lines rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderLineQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if order_lines exists")
	}

	return count > 0, nil
}

// OrderidOrder pointed to by the foreign key.
func (o *OrderLine) OrderidOrder(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Orderid),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// VariantidProductVariant pointed to by the foreign key.
func (o *OrderLine) VariantidProductVariant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Variantid),
	}

	queryMods = append(queryMods, mods...)

	return ProductVariants(queryMods...)
}

// LineidDigitalContentURL pointed to by the foreign key.
func (o *OrderLine) LineidDigitalContentURL(mods ...qm.QueryMod) digitalContentURLQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"lineid\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return DigitalContentUrls(queryMods...)
}

// OrderlineidAllocations retrieves all the allocation's Allocations with an executor via orderlineid column.
func (o *OrderLine) OrderlineidAllocations(mods ...qm.QueryMod) allocationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"allocations\".\"orderlineid\"=?", o.ID),
	)

	return Allocations(queryMods...)
}

// OrderlineidFulfillmentLines retrieves all the fulfillment_line's FulfillmentLines with an executor via orderlineid column.
func (o *OrderLine) OrderlineidFulfillmentLines(mods ...qm.QueryMod) fulfillmentLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"fulfillment_lines\".\"orderlineid\"=?", o.ID),
	)

	return FulfillmentLines(queryMods...)
}

// LoadOrderidOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderLineL) LoadOrderidOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderLine interface{}, mods queries.Applicator) error {
	var slice []*OrderLine
	var object *OrderLine

	if singular {
		var ok bool
		object, ok = maybeOrderLine.(*OrderLine)
		if !ok {
			object = new(OrderLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderLine))
			}
		}
	} else {
		s, ok := maybeOrderLine.(*[]*OrderLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderLine))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderLineR{}
		}
		if !queries.IsNil(object.Orderid) {
			args = append(args, object.Orderid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Orderid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Orderid) {
				args = append(args, obj.Orderid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderidOrder = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderidOrderLines = append(foreign.R.OrderidOrderLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Orderid, foreign.ID) {
				local.R.OrderidOrder = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderidOrderLines = append(foreign.R.OrderidOrderLines, local)
				break
			}
		}
	}

	return nil
}

// LoadVariantidProductVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderLineL) LoadVariantidProductVariant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderLine interface{}, mods queries.Applicator) error {
	var slice []*OrderLine
	var object *OrderLine

	if singular {
		var ok bool
		object, ok = maybeOrderLine.(*OrderLine)
		if !ok {
			object = new(OrderLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderLine))
			}
		}
	} else {
		s, ok := maybeOrderLine.(*[]*OrderLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderLine))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderLineR{}
		}
		if !queries.IsNil(object.Variantid) {
			args = append(args, object.Variantid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Variantid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Variantid) {
				args = append(args, obj.Variantid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VariantidProductVariant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.VariantidOrderLines = append(foreign.R.VariantidOrderLines, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Variantid, foreign.ID) {
				local.R.VariantidProductVariant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.VariantidOrderLines = append(foreign.R.VariantidOrderLines, local)
				break
			}
		}
	}

	return nil
}

// LoadLineidDigitalContentURL allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (orderLineL) LoadLineidDigitalContentURL(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderLine interface{}, mods queries.Applicator) error {
	var slice []*OrderLine
	var object *OrderLine

	if singular {
		var ok bool
		object, ok = maybeOrderLine.(*OrderLine)
		if !ok {
			object = new(OrderLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderLine))
			}
		}
	} else {
		s, ok := maybeOrderLine.(*[]*OrderLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderLine))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderLineR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`digital_content_urls`),
		qm.WhereIn(`digital_content_urls.lineid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DigitalContentURL")
	}

	var resultSlice []*DigitalContentURL
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DigitalContentURL")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for digital_content_urls")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for digital_content_urls")
	}

	if len(digitalContentURLAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LineidDigitalContentURL = foreign
		if foreign.R == nil {
			foreign.R = &digitalContentURLR{}
		}
		foreign.R.LineidOrderLine = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ID, foreign.Lineid) {
				local.R.LineidDigitalContentURL = foreign
				if foreign.R == nil {
					foreign.R = &digitalContentURLR{}
				}
				foreign.R.LineidOrderLine = local
				break
			}
		}
	}

	return nil
}

// LoadOrderlineidAllocations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderLineL) LoadOrderlineidAllocations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderLine interface{}, mods queries.Applicator) error {
	var slice []*OrderLine
	var object *OrderLine

	if singular {
		var ok bool
		object, ok = maybeOrderLine.(*OrderLine)
		if !ok {
			object = new(OrderLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderLine))
			}
		}
	} else {
		s, ok := maybeOrderLine.(*[]*OrderLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderLine))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderLineR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`allocations`),
		qm.WhereIn(`allocations.orderlineid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load allocations")
	}

	var resultSlice []*Allocation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice allocations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on allocations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for allocations")
	}

	if len(allocationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderlineidAllocations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &allocationR{}
			}
			foreign.R.OrderlineidOrderLine = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderlineid) {
				local.R.OrderlineidAllocations = append(local.R.OrderlineidAllocations, foreign)
				if foreign.R == nil {
					foreign.R = &allocationR{}
				}
				foreign.R.OrderlineidOrderLine = local
				break
			}
		}
	}

	return nil
}

// LoadOrderlineidFulfillmentLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderLineL) LoadOrderlineidFulfillmentLines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderLine interface{}, mods queries.Applicator) error {
	var slice []*OrderLine
	var object *OrderLine

	if singular {
		var ok bool
		object, ok = maybeOrderLine.(*OrderLine)
		if !ok {
			object = new(OrderLine)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderLine))
			}
		}
	} else {
		s, ok := maybeOrderLine.(*[]*OrderLine)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderLine)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderLine))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderLineR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderLineR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fulfillment_lines`),
		qm.WhereIn(`fulfillment_lines.orderlineid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load fulfillment_lines")
	}

	var resultSlice []*FulfillmentLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice fulfillment_lines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on fulfillment_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fulfillment_lines")
	}

	if len(fulfillmentLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderlineidFulfillmentLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fulfillmentLineR{}
			}
			foreign.R.OrderlineidOrderLine = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderlineid) {
				local.R.OrderlineidFulfillmentLines = append(local.R.OrderlineidFulfillmentLines, foreign)
				if foreign.R == nil {
					foreign.R = &fulfillmentLineR{}
				}
				foreign.R.OrderlineidOrderLine = local
				break
			}
		}
	}

	return nil
}

// SetOrderidOrder of the orderLine to the related item.
// Sets o.R.OrderidOrder to related.
// Adds o to related.R.OrderidOrderLines.
func (o *OrderLine) SetOrderidOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
		strmangle.WhereClause("\"", "\"", 2, orderLinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Orderid, related.ID)
	if o.R == nil {
		o.R = &orderLineR{
			OrderidOrder: related,
		}
	} else {
		o.R.OrderidOrder = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderidOrderLines: OrderLineSlice{o},
		}
	} else {
		related.R.OrderidOrderLines = append(related.R.OrderidOrderLines, o)
	}

	return nil
}

// RemoveOrderidOrder relationship.
// Sets o.R.OrderidOrder to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderLine) RemoveOrderidOrder(ctx context.Context, exec boil.ContextExecutor, related *Order) error {
	var err error

	queries.SetScanner(&o.Orderid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderidOrder = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderidOrderLines {
		if queries.Equal(o.Orderid, ri.Orderid) {
			continue
		}

		ln := len(related.R.OrderidOrderLines)
		if ln > 1 && i < ln-1 {
			related.R.OrderidOrderLines[i] = related.R.OrderidOrderLines[ln-1]
		}
		related.R.OrderidOrderLines = related.R.OrderidOrderLines[:ln-1]
		break
	}
	return nil
}

// SetVariantidProductVariant of the orderLine to the related item.
// Sets o.R.VariantidProductVariant to related.
// Adds o to related.R.VariantidOrderLines.
func (o *OrderLine) SetVariantidProductVariant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"variantid"}),
		strmangle.WhereClause("\"", "\"", 2, orderLinePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Variantid, related.ID)
	if o.R == nil {
		o.R = &orderLineR{
			VariantidProductVariant: related,
		}
	} else {
		o.R.VariantidProductVariant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			VariantidOrderLines: OrderLineSlice{o},
		}
	} else {
		related.R.VariantidOrderLines = append(related.R.VariantidOrderLines, o)
	}

	return nil
}

// RemoveVariantidProductVariant relationship.
// Sets o.R.VariantidProductVariant to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderLine) RemoveVariantidProductVariant(ctx context.Context, exec boil.ContextExecutor, related *ProductVariant) error {
	var err error

	queries.SetScanner(&o.Variantid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("variantid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.VariantidProductVariant = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VariantidOrderLines {
		if queries.Equal(o.Variantid, ri.Variantid) {
			continue
		}

		ln := len(related.R.VariantidOrderLines)
		if ln > 1 && i < ln-1 {
			related.R.VariantidOrderLines[i] = related.R.VariantidOrderLines[ln-1]
		}
		related.R.VariantidOrderLines = related.R.VariantidOrderLines[:ln-1]
		break
	}
	return nil
}

// SetLineidDigitalContentURL of the orderLine to the related item.
// Sets o.R.LineidDigitalContentURL to related.
// Adds o to related.R.LineidOrderLine.
func (o *OrderLine) SetLineidDigitalContentURL(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DigitalContentURL) error {
	var err error

	if insert {
		queries.Assign(&related.Lineid, o.ID)

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"digital_content_urls\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"lineid"}),
			strmangle.WhereClause("\"", "\"", 2, digitalContentURLPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		queries.Assign(&related.Lineid, o.ID)
	}

	if o.R == nil {
		o.R = &orderLineR{
			LineidDigitalContentURL: related,
		}
	} else {
		o.R.LineidDigitalContentURL = related
	}

	if related.R == nil {
		related.R = &digitalContentURLR{
			LineidOrderLine: o,
		}
	} else {
		related.R.LineidOrderLine = o
	}
	return nil
}

// RemoveLineidDigitalContentURL relationship.
// Sets o.R.LineidDigitalContentURL to nil.
// Removes o from all passed in related items' relationships struct.
func (o *OrderLine) RemoveLineidDigitalContentURL(ctx context.Context, exec boil.ContextExecutor, related *DigitalContentURL) error {
	var err error

	queries.SetScanner(&related.Lineid, nil)
	if _, err = related.Update(ctx, exec, boil.Whitelist("lineid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LineidDigitalContentURL = nil
	}

	if related == nil || related.R == nil {
		return nil
	}

	related.R.LineidOrderLine = nil

	return nil
}

// AddOrderlineidAllocations adds the given related objects to the existing relationships
// of the order_line, optionally inserting them as new records.
// Appends related to o.R.OrderlineidAllocations.
// Sets related.R.OrderlineidOrderLine appropriately.
func (o *OrderLine) AddOrderlineidAllocations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Allocation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderlineid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"allocations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderlineid"}),
				strmangle.WhereClause("\"", "\"", 2, allocationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderlineid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderLineR{
			OrderlineidAllocations: related,
		}
	} else {
		o.R.OrderlineidAllocations = append(o.R.OrderlineidAllocations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &allocationR{
				OrderlineidOrderLine: o,
			}
		} else {
			rel.R.OrderlineidOrderLine = o
		}
	}
	return nil
}

// SetOrderlineidAllocations removes all previously related items of the
// order_line replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderlineidOrderLine's OrderlineidAllocations accordingly.
// Replaces o.R.OrderlineidAllocations with related.
// Sets related.R.OrderlineidOrderLine's OrderlineidAllocations accordingly.
func (o *OrderLine) SetOrderlineidAllocations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Allocation) error {
	query := "update \"allocations\" set \"orderlineid\" = null where \"orderlineid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderlineidAllocations {
			queries.SetScanner(&rel.Orderlineid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderlineidOrderLine = nil
		}
		o.R.OrderlineidAllocations = nil
	}

	return o.AddOrderlineidAllocations(ctx, exec, insert, related...)
}

// RemoveOrderlineidAllocations relationships from objects passed in.
// Removes related items from R.OrderlineidAllocations (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderlineidOrderLine.
func (o *OrderLine) RemoveOrderlineidAllocations(ctx context.Context, exec boil.ContextExecutor, related ...*Allocation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderlineid, nil)
		if rel.R != nil {
			rel.R.OrderlineidOrderLine = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderlineid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderlineidAllocations {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderlineidAllocations)
			if ln > 1 && i < ln-1 {
				o.R.OrderlineidAllocations[i] = o.R.OrderlineidAllocations[ln-1]
			}
			o.R.OrderlineidAllocations = o.R.OrderlineidAllocations[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderlineidFulfillmentLines adds the given related objects to the existing relationships
// of the order_line, optionally inserting them as new records.
// Appends related to o.R.OrderlineidFulfillmentLines.
// Sets related.R.OrderlineidOrderLine appropriately.
func (o *OrderLine) AddOrderlineidFulfillmentLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FulfillmentLine) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderlineid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"fulfillment_lines\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderlineid"}),
				strmangle.WhereClause("\"", "\"", 2, fulfillmentLinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderlineid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderLineR{
			OrderlineidFulfillmentLines: related,
		}
	} else {
		o.R.OrderlineidFulfillmentLines = append(o.R.OrderlineidFulfillmentLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fulfillmentLineR{
				OrderlineidOrderLine: o,
			}
		} else {
			rel.R.OrderlineidOrderLine = o
		}
	}
	return nil
}

// SetOrderlineidFulfillmentLines removes all previously related items of the
// order_line replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderlineidOrderLine's OrderlineidFulfillmentLines accordingly.
// Replaces o.R.OrderlineidFulfillmentLines with related.
// Sets related.R.OrderlineidOrderLine's OrderlineidFulfillmentLines accordingly.
func (o *OrderLine) SetOrderlineidFulfillmentLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*FulfillmentLine) error {
	query := "update \"fulfillment_lines\" set \"orderlineid\" = null where \"orderlineid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderlineidFulfillmentLines {
			queries.SetScanner(&rel.Orderlineid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderlineidOrderLine = nil
		}
		o.R.OrderlineidFulfillmentLines = nil
	}

	return o.AddOrderlineidFulfillmentLines(ctx, exec, insert, related...)
}

// RemoveOrderlineidFulfillmentLines relationships from objects passed in.
// Removes related items from R.OrderlineidFulfillmentLines (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderlineidOrderLine.
func (o *OrderLine) RemoveOrderlineidFulfillmentLines(ctx context.Context, exec boil.ContextExecutor, related ...*FulfillmentLine) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderlineid, nil)
		if rel.R != nil {
			rel.R.OrderlineidOrderLine = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderlineid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderlineidFulfillmentLines {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderlineidFulfillmentLines)
			if ln > 1 && i < ln-1 {
				o.R.OrderlineidFulfillmentLines[i] = o.R.OrderlineidFulfillmentLines[ln-1]
			}
			o.R.OrderlineidFulfillmentLines = o.R.OrderlineidFulfillmentLines[:ln-1]
			break
		}
	}

	return nil
}

// OrderLines retrieves all the records using an executor.
func OrderLines(mods ...qm.QueryMod) orderLineQuery {
	mods = append(mods, qm.From("\"order_lines\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_lines\".*"})
	}

	return orderLineQuery{q}
}

// FindOrderLine retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderLine(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OrderLine, error) {
	orderLineObj := &OrderLine{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_lines\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderLineObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from order_lines")
	}

	if err = orderLineObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderLineObj, err
	}

	return orderLineObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderLine) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_lines provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderLineColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderLineInsertCacheMut.RLock()
	cache, cached := orderLineInsertCache[key]
	orderLineInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderLineAllColumns,
			orderLineColumnsWithDefault,
			orderLineColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderLineType, orderLineMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderLineType, orderLineMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_lines\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_lines\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into order_lines")
	}

	if !cached {
		orderLineInsertCacheMut.Lock()
		orderLineInsertCache[key] = cache
		orderLineInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderLine.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderLine) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderLineUpdateCacheMut.RLock()
	cache, cached := orderLineUpdateCache[key]
	orderLineUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderLineAllColumns,
			orderLinePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update order_lines, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_lines\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderLinePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderLineType, orderLineMapping, append(wl, orderLinePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update order_lines row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for order_lines")
	}

	if !cached {
		orderLineUpdateCacheMut.Lock()
		orderLineUpdateCache[key] = cache
		orderLineUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderLineQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for order_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for order_lines")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderLineSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_lines\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderLinePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in orderLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all orderLine")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderLine) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_lines provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderLineColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderLineUpsertCacheMut.RLock()
	cache, cached := orderLineUpsertCache[key]
	orderLineUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderLineAllColumns,
			orderLineColumnsWithDefault,
			orderLineColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderLineAllColumns,
			orderLinePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert order_lines, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderLinePrimaryKeyColumns))
			copy(conflict, orderLinePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_lines\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderLineType, orderLineMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderLineType, orderLineMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert order_lines")
	}

	if !cached {
		orderLineUpsertCacheMut.Lock()
		orderLineUpsertCache[key] = cache
		orderLineUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderLine record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderLine) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderLine provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderLinePrimaryKeyMapping)
	sql := "DELETE FROM \"order_lines\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from order_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for order_lines")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderLineQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderLineQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order_lines")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_lines")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderLineSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderLineBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_lines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderLinePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orderLine slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_lines")
	}

	if len(orderLineAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderLine) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderLine(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderLineSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderLineSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderLinePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_lines\".* FROM \"order_lines\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderLinePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderLineSlice")
	}

	*o = slice

	return nil
}

// OrderLineExists checks if the OrderLine row exists.
func OrderLineExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_lines\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if order_lines exists")
	}

	return exists, nil
}

// Exists checks if the OrderLine row exists.
func (o *OrderLine) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderLineExists(ctx, exec, o.ID)
}
