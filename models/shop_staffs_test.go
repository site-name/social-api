// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShopStaffs(t *testing.T) {
	t.Parallel()

	query := ShopStaffs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShopStaffsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopStaffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopStaffsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShopStaffs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopStaffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopStaffsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopStaffSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopStaffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopStaffsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShopStaffExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShopStaff exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShopStaffExists to return true, but got false.")
	}
}

func testShopStaffsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shopStaffFound, err := FindShopStaff(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shopStaffFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShopStaffsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShopStaffs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShopStaffsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShopStaffs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShopStaffsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shopStaffOne := &ShopStaff{}
	shopStaffTwo := &ShopStaff{}
	if err = randomize.Struct(seed, shopStaffOne, shopStaffDBTypes, false, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}
	if err = randomize.Struct(seed, shopStaffTwo, shopStaffDBTypes, false, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopStaffOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopStaffTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShopStaffs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShopStaffsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shopStaffOne := &ShopStaff{}
	shopStaffTwo := &ShopStaff{}
	if err = randomize.Struct(seed, shopStaffOne, shopStaffDBTypes, false, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}
	if err = randomize.Struct(seed, shopStaffTwo, shopStaffDBTypes, false, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopStaffOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopStaffTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopStaffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shopStaffBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopStaff) error {
	*o = ShopStaff{}
	return nil
}

func shopStaffAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopStaff) error {
	*o = ShopStaff{}
	return nil
}

func shopStaffAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShopStaff) error {
	*o = ShopStaff{}
	return nil
}

func shopStaffBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShopStaff) error {
	*o = ShopStaff{}
	return nil
}

func shopStaffAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShopStaff) error {
	*o = ShopStaff{}
	return nil
}

func shopStaffBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShopStaff) error {
	*o = ShopStaff{}
	return nil
}

func shopStaffAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShopStaff) error {
	*o = ShopStaff{}
	return nil
}

func shopStaffBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopStaff) error {
	*o = ShopStaff{}
	return nil
}

func shopStaffAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopStaff) error {
	*o = ShopStaff{}
	return nil
}

func testShopStaffsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShopStaff{}
	o := &ShopStaff{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shopStaffDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShopStaff object: %s", err)
	}

	AddShopStaffHook(boil.BeforeInsertHook, shopStaffBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shopStaffBeforeInsertHooks = []ShopStaffHook{}

	AddShopStaffHook(boil.AfterInsertHook, shopStaffAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shopStaffAfterInsertHooks = []ShopStaffHook{}

	AddShopStaffHook(boil.AfterSelectHook, shopStaffAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shopStaffAfterSelectHooks = []ShopStaffHook{}

	AddShopStaffHook(boil.BeforeUpdateHook, shopStaffBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shopStaffBeforeUpdateHooks = []ShopStaffHook{}

	AddShopStaffHook(boil.AfterUpdateHook, shopStaffAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shopStaffAfterUpdateHooks = []ShopStaffHook{}

	AddShopStaffHook(boil.BeforeDeleteHook, shopStaffBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shopStaffBeforeDeleteHooks = []ShopStaffHook{}

	AddShopStaffHook(boil.AfterDeleteHook, shopStaffAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shopStaffAfterDeleteHooks = []ShopStaffHook{}

	AddShopStaffHook(boil.BeforeUpsertHook, shopStaffBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shopStaffBeforeUpsertHooks = []ShopStaffHook{}

	AddShopStaffHook(boil.AfterUpsertHook, shopStaffAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shopStaffAfterUpsertHooks = []ShopStaffHook{}
}

func testShopStaffsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopStaffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopStaffsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shopStaffColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShopStaffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopStaffToOneUserUsingStaff(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ShopStaff
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.StaffID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Staff().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ShopStaffSlice{&local}
	if err = local.L.LoadStaff(ctx, tx, false, (*[]*ShopStaff)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Staff == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Staff = nil
	if err = local.L.LoadStaff(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Staff == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testShopStaffToOneSetOpUserUsingStaff(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopStaff
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopStaffDBTypes, false, strmangle.SetComplement(shopStaffPrimaryKeyColumns, shopStaffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetStaff(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Staff != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StaffShopStaffs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.StaffID, x.ID) {
			t.Error("foreign key was wrong value", a.StaffID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.StaffID))
		reflect.Indirect(reflect.ValueOf(&a.StaffID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.StaffID, x.ID) {
			t.Error("foreign key was wrong value", a.StaffID, x.ID)
		}
	}
}

func testShopStaffToOneRemoveOpUserUsingStaff(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopStaff
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopStaffDBTypes, false, strmangle.SetComplement(shopStaffPrimaryKeyColumns, shopStaffColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetStaff(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveStaff(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Staff().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Staff != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.StaffID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.StaffShopStaffs) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testShopStaffsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopStaffsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopStaffSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopStaffsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShopStaffs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shopStaffDBTypes = map[string]string{`ID`: `character varying`, `StaffID`: `character varying`, `CreateAt`: `bigint`, `EndAt`: `bigint`, `SalaryPeriod`: `character varying`, `Salary`: `double precision`, `SalaryCurrency`: `character varying`}
	_                = bytes.MinRead
)

func testShopStaffsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shopStaffPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shopStaffAllColumns) == len(shopStaffPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopStaffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShopStaffsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shopStaffAllColumns) == len(shopStaffPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShopStaff{}
	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopStaffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopStaffDBTypes, true, shopStaffPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shopStaffAllColumns, shopStaffPrimaryKeyColumns) {
		fields = shopStaffAllColumns
	} else {
		fields = strmangle.SetComplement(
			shopStaffAllColumns,
			shopStaffPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShopStaffSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShopStaffsUpsert(t *testing.T) {
	t.Parallel()

	if len(shopStaffAllColumns) == len(shopStaffPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShopStaff{}
	if err = randomize.Struct(seed, &o, shopStaffDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShopStaff: %s", err)
	}

	count, err := ShopStaffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shopStaffDBTypes, false, shopStaffPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopStaff struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShopStaff: %s", err)
	}

	count, err = ShopStaffs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
