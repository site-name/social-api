// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAssignedPageAttributes(t *testing.T) {
	t.Parallel()

	query := AssignedPageAttributes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAssignedPageAttributesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedPageAttributesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AssignedPageAttributes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedPageAttributesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedPageAttributeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedPageAttributesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AssignedPageAttributeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AssignedPageAttribute exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AssignedPageAttributeExists to return true, but got false.")
	}
}

func testAssignedPageAttributesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	assignedPageAttributeFound, err := FindAssignedPageAttribute(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if assignedPageAttributeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAssignedPageAttributesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AssignedPageAttributes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAssignedPageAttributesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AssignedPageAttributes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAssignedPageAttributesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	assignedPageAttributeOne := &AssignedPageAttribute{}
	assignedPageAttributeTwo := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, assignedPageAttributeOne, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedPageAttributeTwo, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignedPageAttributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedPageAttributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedPageAttributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAssignedPageAttributesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	assignedPageAttributeOne := &AssignedPageAttribute{}
	assignedPageAttributeTwo := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, assignedPageAttributeOne, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedPageAttributeTwo, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignedPageAttributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedPageAttributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func assignedPageAttributeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttribute) error {
	*o = AssignedPageAttribute{}
	return nil
}

func assignedPageAttributeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttribute) error {
	*o = AssignedPageAttribute{}
	return nil
}

func assignedPageAttributeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttribute) error {
	*o = AssignedPageAttribute{}
	return nil
}

func assignedPageAttributeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttribute) error {
	*o = AssignedPageAttribute{}
	return nil
}

func assignedPageAttributeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttribute) error {
	*o = AssignedPageAttribute{}
	return nil
}

func assignedPageAttributeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttribute) error {
	*o = AssignedPageAttribute{}
	return nil
}

func assignedPageAttributeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttribute) error {
	*o = AssignedPageAttribute{}
	return nil
}

func assignedPageAttributeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttribute) error {
	*o = AssignedPageAttribute{}
	return nil
}

func assignedPageAttributeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedPageAttribute) error {
	*o = AssignedPageAttribute{}
	return nil
}

func testAssignedPageAttributesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AssignedPageAttribute{}
	o := &AssignedPageAttribute{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute object: %s", err)
	}

	AddAssignedPageAttributeHook(boil.BeforeInsertHook, assignedPageAttributeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeBeforeInsertHooks = []AssignedPageAttributeHook{}

	AddAssignedPageAttributeHook(boil.AfterInsertHook, assignedPageAttributeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeAfterInsertHooks = []AssignedPageAttributeHook{}

	AddAssignedPageAttributeHook(boil.AfterSelectHook, assignedPageAttributeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeAfterSelectHooks = []AssignedPageAttributeHook{}

	AddAssignedPageAttributeHook(boil.BeforeUpdateHook, assignedPageAttributeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeBeforeUpdateHooks = []AssignedPageAttributeHook{}

	AddAssignedPageAttributeHook(boil.AfterUpdateHook, assignedPageAttributeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeAfterUpdateHooks = []AssignedPageAttributeHook{}

	AddAssignedPageAttributeHook(boil.BeforeDeleteHook, assignedPageAttributeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeBeforeDeleteHooks = []AssignedPageAttributeHook{}

	AddAssignedPageAttributeHook(boil.AfterDeleteHook, assignedPageAttributeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeAfterDeleteHooks = []AssignedPageAttributeHook{}

	AddAssignedPageAttributeHook(boil.BeforeUpsertHook, assignedPageAttributeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeBeforeUpsertHooks = []AssignedPageAttributeHook{}

	AddAssignedPageAttributeHook(boil.AfterUpsertHook, assignedPageAttributeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	assignedPageAttributeAfterUpsertHooks = []AssignedPageAttributeHook{}
}

func testAssignedPageAttributesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedPageAttributesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(assignedPageAttributeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedPageAttributeToManyAssignmentAssignedPageAttributeValues(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedPageAttribute
	var b, c AssignedPageAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AssignmentID = a.ID
	c.AssignmentID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AssignmentAssignedPageAttributeValues().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AssignmentID == b.AssignmentID {
			bFound = true
		}
		if v.AssignmentID == c.AssignmentID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AssignedPageAttributeSlice{&a}
	if err = a.L.LoadAssignmentAssignedPageAttributeValues(ctx, tx, false, (*[]*AssignedPageAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignmentAssignedPageAttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AssignmentAssignedPageAttributeValues = nil
	if err = a.L.LoadAssignmentAssignedPageAttributeValues(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignmentAssignedPageAttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAssignedPageAttributeToManyAddOpAssignmentAssignedPageAttributeValues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedPageAttribute
	var b, c, d, e AssignedPageAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPageAttributeValue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPageAttributeValueDBTypes, false, strmangle.SetComplement(assignedPageAttributeValuePrimaryKeyColumns, assignedPageAttributeValueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedPageAttributeValue{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssignmentAssignedPageAttributeValues(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AssignmentID {
			t.Error("foreign key was wrong value", a.ID, first.AssignmentID)
		}
		if a.ID != second.AssignmentID {
			t.Error("foreign key was wrong value", a.ID, second.AssignmentID)
		}

		if first.R.Assignment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Assignment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AssignmentAssignedPageAttributeValues[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AssignmentAssignedPageAttributeValues[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AssignmentAssignedPageAttributeValues().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAssignedPageAttributeToOneAttributePageUsingAssignment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AssignedPageAttribute
	var foreign AttributePage

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributePageDBTypes, false, attributePageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributePage struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AssignmentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Assignment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAttributePageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AttributePage) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AssignedPageAttributeSlice{&local}
	if err = local.L.LoadAssignment(ctx, tx, false, (*[]*AssignedPageAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Assignment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Assignment = nil
	if err = local.L.LoadAssignment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Assignment == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAssignedPageAttributeToOnePageUsingPage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AssignedPageAttribute
	var foreign Page

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PageID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Page().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Page) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AssignedPageAttributeSlice{&local}
	if err = local.L.LoadPage(ctx, tx, false, (*[]*AssignedPageAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Page = nil
	if err = local.L.LoadPage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAssignedPageAttributeToOneSetOpAttributePageUsingAssignment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedPageAttribute
	var b, c AttributePage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributePageDBTypes, false, strmangle.SetComplement(attributePagePrimaryKeyColumns, attributePageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributePageDBTypes, false, strmangle.SetComplement(attributePagePrimaryKeyColumns, attributePageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AttributePage{&b, &c} {
		err = a.SetAssignment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Assignment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssignmentAssignedPageAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AssignmentID != x.ID {
			t.Error("foreign key was wrong value", a.AssignmentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AssignmentID))
		reflect.Indirect(reflect.ValueOf(&a.AssignmentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AssignmentID != x.ID {
			t.Error("foreign key was wrong value", a.AssignmentID, x.ID)
		}
	}
}
func testAssignedPageAttributeToOneSetOpPageUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedPageAttribute
	var b, c Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Page{&b, &c} {
		err = a.SetPage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Page != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssignedPageAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PageID != x.ID {
			t.Error("foreign key was wrong value", a.PageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageID))
		reflect.Indirect(reflect.ValueOf(&a.PageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PageID != x.ID {
			t.Error("foreign key was wrong value", a.PageID, x.ID)
		}
	}
}

func testAssignedPageAttributesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignedPageAttributesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedPageAttributeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignedPageAttributesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedPageAttributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	assignedPageAttributeDBTypes = map[string]string{`ID`: `uuid`, `PageID`: `uuid`, `AssignmentID`: `uuid`}
	_                            = bytes.MinRead
)

func testAssignedPageAttributesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(assignedPageAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(assignedPageAttributeAllColumns) == len(assignedPageAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAssignedPageAttributesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(assignedPageAttributeAllColumns) == len(assignedPageAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedPageAttribute{}
	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedPageAttributeDBTypes, true, assignedPageAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(assignedPageAttributeAllColumns, assignedPageAttributePrimaryKeyColumns) {
		fields = assignedPageAttributeAllColumns
	} else {
		fields = strmangle.SetComplement(
			assignedPageAttributeAllColumns,
			assignedPageAttributePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AssignedPageAttributeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAssignedPageAttributesUpsert(t *testing.T) {
	t.Parallel()

	if len(assignedPageAttributeAllColumns) == len(assignedPageAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AssignedPageAttribute{}
	if err = randomize.Struct(seed, &o, assignedPageAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedPageAttribute: %s", err)
	}

	count, err := AssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, assignedPageAttributeDBTypes, false, assignedPageAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedPageAttribute struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedPageAttribute: %s", err)
	}

	count, err = AssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
