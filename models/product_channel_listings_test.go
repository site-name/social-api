// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProductChannelListings(t *testing.T) {
	t.Parallel()

	query := ProductChannelListings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProductChannelListingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductChannelListingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ProductChannelListings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductChannelListingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductChannelListingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductChannelListingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProductChannelListingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ProductChannelListing exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProductChannelListingExists to return true, but got false.")
	}
}

func testProductChannelListingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	productChannelListingFound, err := FindProductChannelListing(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if productChannelListingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProductChannelListingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ProductChannelListings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProductChannelListingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ProductChannelListings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProductChannelListingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	productChannelListingOne := &ProductChannelListing{}
	productChannelListingTwo := &ProductChannelListing{}
	if err = randomize.Struct(seed, productChannelListingOne, productChannelListingDBTypes, false, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}
	if err = randomize.Struct(seed, productChannelListingTwo, productChannelListingDBTypes, false, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productChannelListingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productChannelListingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductChannelListings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProductChannelListingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	productChannelListingOne := &ProductChannelListing{}
	productChannelListingTwo := &ProductChannelListing{}
	if err = randomize.Struct(seed, productChannelListingOne, productChannelListingDBTypes, false, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}
	if err = randomize.Struct(seed, productChannelListingTwo, productChannelListingDBTypes, false, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productChannelListingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productChannelListingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func productChannelListingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductChannelListing) error {
	*o = ProductChannelListing{}
	return nil
}

func productChannelListingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductChannelListing) error {
	*o = ProductChannelListing{}
	return nil
}

func productChannelListingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ProductChannelListing) error {
	*o = ProductChannelListing{}
	return nil
}

func productChannelListingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductChannelListing) error {
	*o = ProductChannelListing{}
	return nil
}

func productChannelListingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ProductChannelListing) error {
	*o = ProductChannelListing{}
	return nil
}

func productChannelListingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductChannelListing) error {
	*o = ProductChannelListing{}
	return nil
}

func productChannelListingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ProductChannelListing) error {
	*o = ProductChannelListing{}
	return nil
}

func productChannelListingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductChannelListing) error {
	*o = ProductChannelListing{}
	return nil
}

func productChannelListingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ProductChannelListing) error {
	*o = ProductChannelListing{}
	return nil
}

func testProductChannelListingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ProductChannelListing{}
	o := &ProductChannelListing{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing object: %s", err)
	}

	AddProductChannelListingHook(boil.BeforeInsertHook, productChannelListingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	productChannelListingBeforeInsertHooks = []ProductChannelListingHook{}

	AddProductChannelListingHook(boil.AfterInsertHook, productChannelListingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	productChannelListingAfterInsertHooks = []ProductChannelListingHook{}

	AddProductChannelListingHook(boil.AfterSelectHook, productChannelListingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	productChannelListingAfterSelectHooks = []ProductChannelListingHook{}

	AddProductChannelListingHook(boil.BeforeUpdateHook, productChannelListingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	productChannelListingBeforeUpdateHooks = []ProductChannelListingHook{}

	AddProductChannelListingHook(boil.AfterUpdateHook, productChannelListingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	productChannelListingAfterUpdateHooks = []ProductChannelListingHook{}

	AddProductChannelListingHook(boil.BeforeDeleteHook, productChannelListingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	productChannelListingBeforeDeleteHooks = []ProductChannelListingHook{}

	AddProductChannelListingHook(boil.AfterDeleteHook, productChannelListingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	productChannelListingAfterDeleteHooks = []ProductChannelListingHook{}

	AddProductChannelListingHook(boil.BeforeUpsertHook, productChannelListingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	productChannelListingBeforeUpsertHooks = []ProductChannelListingHook{}

	AddProductChannelListingHook(boil.AfterUpsertHook, productChannelListingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	productChannelListingAfterUpsertHooks = []ProductChannelListingHook{}
}

func testProductChannelListingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductChannelListingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(productChannelListingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductChannelListingToOneChannelUsingChannelidChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductChannelListing
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Channelid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ChannelidChannel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddChannelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ProductChannelListingSlice{&local}
	if err = local.L.LoadChannelidChannel(ctx, tx, false, (*[]*ProductChannelListing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelidChannel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ChannelidChannel = nil
	if err = local.L.LoadChannelidChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelidChannel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testProductChannelListingToOneProductUsingProductidProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ProductChannelListing
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Productid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductidProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Product) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ProductChannelListingSlice{&local}
	if err = local.L.LoadProductidProduct(ctx, tx, false, (*[]*ProductChannelListing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductidProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductidProduct = nil
	if err = local.L.LoadProductidProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductidProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testProductChannelListingToOneSetOpChannelUsingChannelidChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductChannelListing
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productChannelListingDBTypes, false, strmangle.SetComplement(productChannelListingPrimaryKeyColumns, productChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannelidChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ChannelidChannel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChannelidProductChannelListings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Channelid, x.ID) {
			t.Error("foreign key was wrong value", a.Channelid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Channelid))
		reflect.Indirect(reflect.ValueOf(&a.Channelid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Channelid, x.ID) {
			t.Error("foreign key was wrong value", a.Channelid, x.ID)
		}
	}
}

func testProductChannelListingToOneRemoveOpChannelUsingChannelidChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductChannelListing
	var b Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productChannelListingDBTypes, false, strmangle.SetComplement(productChannelListingPrimaryKeyColumns, productChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetChannelidChannel(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveChannelidChannel(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ChannelidChannel().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ChannelidChannel != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Channelid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ChannelidProductChannelListings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProductChannelListingToOneSetOpProductUsingProductidProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductChannelListing
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productChannelListingDBTypes, false, strmangle.SetComplement(productChannelListingPrimaryKeyColumns, productChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProductidProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductidProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductidProductChannelListings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Productid, x.ID) {
			t.Error("foreign key was wrong value", a.Productid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Productid))
		reflect.Indirect(reflect.ValueOf(&a.Productid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Productid, x.ID) {
			t.Error("foreign key was wrong value", a.Productid, x.ID)
		}
	}
}

func testProductChannelListingToOneRemoveOpProductUsingProductidProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ProductChannelListing
	var b Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productChannelListingDBTypes, false, strmangle.SetComplement(productChannelListingPrimaryKeyColumns, productChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProductidProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProductidProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProductidProduct().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProductidProduct != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Productid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductidProductChannelListings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testProductChannelListingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductChannelListingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductChannelListingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductChannelListingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ProductChannelListings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	productChannelListingDBTypes = map[string]string{`ID`: `character varying`, `Productid`: `character varying`, `Channelid`: `character varying`, `Visibleinlistings`: `boolean`, `Availableforpurchase`: `timestamp with time zone`, `Currency`: `character varying`, `Discountedpriceamount`: `double precision`, `Createat`: `bigint`, `Publicationdate`: `timestamp with time zone`, `Ispublished`: `boolean`}
	_                            = bytes.MinRead
)

func testProductChannelListingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(productChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(productChannelListingAllColumns) == len(productChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProductChannelListingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(productChannelListingAllColumns) == len(productChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ProductChannelListing{}
	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productChannelListingDBTypes, true, productChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(productChannelListingAllColumns, productChannelListingPrimaryKeyColumns) {
		fields = productChannelListingAllColumns
	} else {
		fields = strmangle.SetComplement(
			productChannelListingAllColumns,
			productChannelListingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProductChannelListingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProductChannelListingsUpsert(t *testing.T) {
	t.Parallel()

	if len(productChannelListingAllColumns) == len(productChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ProductChannelListing{}
	if err = randomize.Struct(seed, &o, productChannelListingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductChannelListing: %s", err)
	}

	count, err := ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, productChannelListingDBTypes, false, productChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ProductChannelListing struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ProductChannelListing: %s", err)
	}

	count, err = ProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
