// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Address is an object representing the database table.
type Address struct {
	ID             string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Firstname      string `boil:"firstname" json:"firstname" toml:"firstname" yaml:"firstname"`
	Lastname       string `boil:"lastname" json:"lastname" toml:"lastname" yaml:"lastname"`
	Companyname    string `boil:"companyname" json:"companyname" toml:"companyname" yaml:"companyname"`
	Streetaddress1 string `boil:"streetaddress1" json:"streetaddress1" toml:"streetaddress1" yaml:"streetaddress1"`
	Streetaddress2 string `boil:"streetaddress2" json:"streetaddress2" toml:"streetaddress2" yaml:"streetaddress2"`
	City           string `boil:"city" json:"city" toml:"city" yaml:"city"`
	Cityarea       string `boil:"cityarea" json:"cityarea" toml:"cityarea" yaml:"cityarea"`
	Postalcode     string `boil:"postalcode" json:"postalcode" toml:"postalcode" yaml:"postalcode"`
	Country        string `boil:"country" json:"country" toml:"country" yaml:"country"`
	Countryarea    string `boil:"countryarea" json:"countryarea" toml:"countryarea" yaml:"countryarea"`
	Phone          string `boil:"phone" json:"phone" toml:"phone" yaml:"phone"`
	Createat       int64  `boil:"createat" json:"createat" toml:"createat" yaml:"createat"`
	Updateat       int64  `boil:"updateat" json:"updateat" toml:"updateat" yaml:"updateat"`

	R *addressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L addressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AddressColumns = struct {
	ID             string
	Firstname      string
	Lastname       string
	Companyname    string
	Streetaddress1 string
	Streetaddress2 string
	City           string
	Cityarea       string
	Postalcode     string
	Country        string
	Countryarea    string
	Phone          string
	Createat       string
	Updateat       string
}{
	ID:             "id",
	Firstname:      "firstname",
	Lastname:       "lastname",
	Companyname:    "companyname",
	Streetaddress1: "streetaddress1",
	Streetaddress2: "streetaddress2",
	City:           "city",
	Cityarea:       "cityarea",
	Postalcode:     "postalcode",
	Country:        "country",
	Countryarea:    "countryarea",
	Phone:          "phone",
	Createat:       "createat",
	Updateat:       "updateat",
}

var AddressTableColumns = struct {
	ID             string
	Firstname      string
	Lastname       string
	Companyname    string
	Streetaddress1 string
	Streetaddress2 string
	City           string
	Cityarea       string
	Postalcode     string
	Country        string
	Countryarea    string
	Phone          string
	Createat       string
	Updateat       string
}{
	ID:             "addresses.id",
	Firstname:      "addresses.firstname",
	Lastname:       "addresses.lastname",
	Companyname:    "addresses.companyname",
	Streetaddress1: "addresses.streetaddress1",
	Streetaddress2: "addresses.streetaddress2",
	City:           "addresses.city",
	Cityarea:       "addresses.cityarea",
	Postalcode:     "addresses.postalcode",
	Country:        "addresses.country",
	Countryarea:    "addresses.countryarea",
	Phone:          "addresses.phone",
	Createat:       "addresses.createat",
	Updateat:       "addresses.updateat",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AddressWhere = struct {
	ID             whereHelperstring
	Firstname      whereHelperstring
	Lastname       whereHelperstring
	Companyname    whereHelperstring
	Streetaddress1 whereHelperstring
	Streetaddress2 whereHelperstring
	City           whereHelperstring
	Cityarea       whereHelperstring
	Postalcode     whereHelperstring
	Country        whereHelperstring
	Countryarea    whereHelperstring
	Phone          whereHelperstring
	Createat       whereHelperint64
	Updateat       whereHelperint64
}{
	ID:             whereHelperstring{field: "\"addresses\".\"id\""},
	Firstname:      whereHelperstring{field: "\"addresses\".\"firstname\""},
	Lastname:       whereHelperstring{field: "\"addresses\".\"lastname\""},
	Companyname:    whereHelperstring{field: "\"addresses\".\"companyname\""},
	Streetaddress1: whereHelperstring{field: "\"addresses\".\"streetaddress1\""},
	Streetaddress2: whereHelperstring{field: "\"addresses\".\"streetaddress2\""},
	City:           whereHelperstring{field: "\"addresses\".\"city\""},
	Cityarea:       whereHelperstring{field: "\"addresses\".\"cityarea\""},
	Postalcode:     whereHelperstring{field: "\"addresses\".\"postalcode\""},
	Country:        whereHelperstring{field: "\"addresses\".\"country\""},
	Countryarea:    whereHelperstring{field: "\"addresses\".\"countryarea\""},
	Phone:          whereHelperstring{field: "\"addresses\".\"phone\""},
	Createat:       whereHelperint64{field: "\"addresses\".\"createat\""},
	Updateat:       whereHelperint64{field: "\"addresses\".\"updateat\""},
}

// AddressRels is where relationship names are stored.
var AddressRels = struct {
	BillingaddressidCheckouts     string
	BillingaddressidOrders        string
	AddressidShops                string
	AddressidUserAddresses        string
	DefaultshippingaddressidUsers string
	AddressidWarehouses           string
}{
	BillingaddressidCheckouts:     "BillingaddressidCheckouts",
	BillingaddressidOrders:        "BillingaddressidOrders",
	AddressidShops:                "AddressidShops",
	AddressidUserAddresses:        "AddressidUserAddresses",
	DefaultshippingaddressidUsers: "DefaultshippingaddressidUsers",
	AddressidWarehouses:           "AddressidWarehouses",
}

// addressR is where relationships are stored.
type addressR struct {
	BillingaddressidCheckouts     CheckoutSlice    `boil:"BillingaddressidCheckouts" json:"BillingaddressidCheckouts" toml:"BillingaddressidCheckouts" yaml:"BillingaddressidCheckouts"`
	BillingaddressidOrders        OrderSlice       `boil:"BillingaddressidOrders" json:"BillingaddressidOrders" toml:"BillingaddressidOrders" yaml:"BillingaddressidOrders"`
	AddressidShops                ShopSlice        `boil:"AddressidShops" json:"AddressidShops" toml:"AddressidShops" yaml:"AddressidShops"`
	AddressidUserAddresses        UserAddressSlice `boil:"AddressidUserAddresses" json:"AddressidUserAddresses" toml:"AddressidUserAddresses" yaml:"AddressidUserAddresses"`
	DefaultshippingaddressidUsers UserSlice        `boil:"DefaultshippingaddressidUsers" json:"DefaultshippingaddressidUsers" toml:"DefaultshippingaddressidUsers" yaml:"DefaultshippingaddressidUsers"`
	AddressidWarehouses           WarehouseSlice   `boil:"AddressidWarehouses" json:"AddressidWarehouses" toml:"AddressidWarehouses" yaml:"AddressidWarehouses"`
}

// NewStruct creates a new relationship struct
func (*addressR) NewStruct() *addressR {
	return &addressR{}
}

func (r *addressR) GetBillingaddressidCheckouts() CheckoutSlice {
	if r == nil {
		return nil
	}
	return r.BillingaddressidCheckouts
}

func (r *addressR) GetBillingaddressidOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.BillingaddressidOrders
}

func (r *addressR) GetAddressidShops() ShopSlice {
	if r == nil {
		return nil
	}
	return r.AddressidShops
}

func (r *addressR) GetAddressidUserAddresses() UserAddressSlice {
	if r == nil {
		return nil
	}
	return r.AddressidUserAddresses
}

func (r *addressR) GetDefaultshippingaddressidUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.DefaultshippingaddressidUsers
}

func (r *addressR) GetAddressidWarehouses() WarehouseSlice {
	if r == nil {
		return nil
	}
	return r.AddressidWarehouses
}

// addressL is where Load methods for each relationship are stored.
type addressL struct{}

var (
	addressAllColumns            = []string{"id", "firstname", "lastname", "companyname", "streetaddress1", "streetaddress2", "city", "cityarea", "postalcode", "country", "countryarea", "phone", "createat", "updateat"}
	addressColumnsWithoutDefault = []string{"id", "firstname", "lastname", "companyname", "streetaddress1", "streetaddress2", "city", "cityarea", "postalcode", "country", "countryarea", "phone", "createat", "updateat"}
	addressColumnsWithDefault    = []string{}
	addressPrimaryKeyColumns     = []string{"id"}
	addressGeneratedColumns      = []string{}
)

type (
	// AddressSlice is an alias for a slice of pointers to Address.
	// This should almost always be used instead of []Address.
	AddressSlice []*Address
	// AddressHook is the signature for custom Address hook methods
	AddressHook func(context.Context, boil.ContextExecutor, *Address) error

	addressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	addressType                 = reflect.TypeOf(&Address{})
	addressMapping              = queries.MakeStructMapping(addressType)
	addressPrimaryKeyMapping, _ = queries.BindMapping(addressType, addressMapping, addressPrimaryKeyColumns)
	addressInsertCacheMut       sync.RWMutex
	addressInsertCache          = make(map[string]insertCache)
	addressUpdateCacheMut       sync.RWMutex
	addressUpdateCache          = make(map[string]updateCache)
	addressUpsertCacheMut       sync.RWMutex
	addressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var addressAfterSelectHooks []AddressHook

var addressBeforeInsertHooks []AddressHook
var addressAfterInsertHooks []AddressHook

var addressBeforeUpdateHooks []AddressHook
var addressAfterUpdateHooks []AddressHook

var addressBeforeDeleteHooks []AddressHook
var addressAfterDeleteHooks []AddressHook

var addressBeforeUpsertHooks []AddressHook
var addressAfterUpsertHooks []AddressHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Address) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Address) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Address) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Address) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Address) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Address) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Address) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Address) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Address) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range addressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAddressHook registers your hook function for all future operations.
func AddAddressHook(hookPoint boil.HookPoint, addressHook AddressHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		addressAfterSelectHooks = append(addressAfterSelectHooks, addressHook)
	case boil.BeforeInsertHook:
		addressBeforeInsertHooks = append(addressBeforeInsertHooks, addressHook)
	case boil.AfterInsertHook:
		addressAfterInsertHooks = append(addressAfterInsertHooks, addressHook)
	case boil.BeforeUpdateHook:
		addressBeforeUpdateHooks = append(addressBeforeUpdateHooks, addressHook)
	case boil.AfterUpdateHook:
		addressAfterUpdateHooks = append(addressAfterUpdateHooks, addressHook)
	case boil.BeforeDeleteHook:
		addressBeforeDeleteHooks = append(addressBeforeDeleteHooks, addressHook)
	case boil.AfterDeleteHook:
		addressAfterDeleteHooks = append(addressAfterDeleteHooks, addressHook)
	case boil.BeforeUpsertHook:
		addressBeforeUpsertHooks = append(addressBeforeUpsertHooks, addressHook)
	case boil.AfterUpsertHook:
		addressAfterUpsertHooks = append(addressAfterUpsertHooks, addressHook)
	}
}

// One returns a single address record from the query.
func (q addressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Address, error) {
	o := &Address{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for addresses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Address records from the query.
func (q addressQuery) All(ctx context.Context, exec boil.ContextExecutor) (AddressSlice, error) {
	var o []*Address

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Address slice")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Address records in the query.
func (q addressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count addresses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q addressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if addresses exists")
	}

	return count > 0, nil
}

// BillingaddressidCheckouts retrieves all the checkout's Checkouts with an executor via billingaddressid column.
func (o *Address) BillingaddressidCheckouts(mods ...qm.QueryMod) checkoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkouts\".\"billingaddressid\"=?", o.ID),
	)

	return Checkouts(queryMods...)
}

// BillingaddressidOrders retrieves all the order's Orders with an executor via billingaddressid column.
func (o *Address) BillingaddressidOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"billingaddressid\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// AddressidShops retrieves all the shop's Shops with an executor via addressid column.
func (o *Address) AddressidShops(mods ...qm.QueryMod) shopQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shops\".\"addressid\"=?", o.ID),
	)

	return Shops(queryMods...)
}

// AddressidUserAddresses retrieves all the user_address's UserAddresses with an executor via addressid column.
func (o *Address) AddressidUserAddresses(mods ...qm.QueryMod) userAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_addresses\".\"addressid\"=?", o.ID),
	)

	return UserAddresses(queryMods...)
}

// DefaultshippingaddressidUsers retrieves all the user's Users with an executor via defaultshippingaddressid column.
func (o *Address) DefaultshippingaddressidUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"users\".\"defaultshippingaddressid\"=?", o.ID),
	)

	return Users(queryMods...)
}

// AddressidWarehouses retrieves all the warehouse's Warehouses with an executor via addressid column.
func (o *Address) AddressidWarehouses(mods ...qm.QueryMod) warehouseQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"warehouses\".\"addressid\"=?", o.ID),
	)

	return Warehouses(queryMods...)
}

// LoadBillingaddressidCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadBillingaddressidCheckouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.billingaddressid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkouts")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BillingaddressidCheckouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutR{}
			}
			foreign.R.BillingaddressidAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Billingaddressid) {
				local.R.BillingaddressidCheckouts = append(local.R.BillingaddressidCheckouts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.BillingaddressidAddress = local
				break
			}
		}
	}

	return nil
}

// LoadBillingaddressidOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadBillingaddressidOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.billingaddressid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BillingaddressidOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.BillingaddressidAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Billingaddressid) {
				local.R.BillingaddressidOrders = append(local.R.BillingaddressidOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.BillingaddressidAddress = local
				break
			}
		}
	}

	return nil
}

// LoadAddressidShops allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadAddressidShops(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shops`),
		qm.WhereIn(`shops.addressid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shops")
	}

	var resultSlice []*Shop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shops")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shops")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shops")
	}

	if len(shopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AddressidShops = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shopR{}
			}
			foreign.R.AddressidAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Addressid) {
				local.R.AddressidShops = append(local.R.AddressidShops, foreign)
				if foreign.R == nil {
					foreign.R = &shopR{}
				}
				foreign.R.AddressidAddress = local
				break
			}
		}
	}

	return nil
}

// LoadAddressidUserAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadAddressidUserAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_addresses`),
		qm.WhereIn(`user_addresses.addressid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_addresses")
	}

	var resultSlice []*UserAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_addresses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_addresses")
	}

	if len(userAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AddressidUserAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userAddressR{}
			}
			foreign.R.AddressidAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Addressid) {
				local.R.AddressidUserAddresses = append(local.R.AddressidUserAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &userAddressR{}
				}
				foreign.R.AddressidAddress = local
				break
			}
		}
	}

	return nil
}

// LoadDefaultshippingaddressidUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadDefaultshippingaddressidUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.defaultshippingaddressid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load users")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DefaultshippingaddressidUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.DefaultshippingaddressidAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Defaultshippingaddressid) {
				local.R.DefaultshippingaddressidUsers = append(local.R.DefaultshippingaddressidUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.DefaultshippingaddressidAddress = local
				break
			}
		}
	}

	return nil
}

// LoadAddressidWarehouses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (addressL) LoadAddressidWarehouses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAddress interface{}, mods queries.Applicator) error {
	var slice []*Address
	var object *Address

	if singular {
		var ok bool
		object, ok = maybeAddress.(*Address)
		if !ok {
			object = new(Address)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAddress))
			}
		}
	} else {
		s, ok := maybeAddress.(*[]*Address)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAddress)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAddress))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &addressR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &addressR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses.addressid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load warehouses")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice warehouses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AddressidWarehouses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &warehouseR{}
			}
			foreign.R.AddressidAddress = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Addressid) {
				local.R.AddressidWarehouses = append(local.R.AddressidWarehouses, foreign)
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.AddressidAddress = local
				break
			}
		}
	}

	return nil
}

// AddBillingaddressidCheckouts adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.BillingaddressidCheckouts.
// Sets related.R.BillingaddressidAddress appropriately.
func (o *Address) AddBillingaddressidCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Billingaddressid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"billingaddressid"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Billingaddressid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			BillingaddressidCheckouts: related,
		}
	} else {
		o.R.BillingaddressidCheckouts = append(o.R.BillingaddressidCheckouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutR{
				BillingaddressidAddress: o,
			}
		} else {
			rel.R.BillingaddressidAddress = o
		}
	}
	return nil
}

// SetBillingaddressidCheckouts removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillingaddressidAddress's BillingaddressidCheckouts accordingly.
// Replaces o.R.BillingaddressidCheckouts with related.
// Sets related.R.BillingaddressidAddress's BillingaddressidCheckouts accordingly.
func (o *Address) SetBillingaddressidCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	query := "update \"checkouts\" set \"billingaddressid\" = null where \"billingaddressid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BillingaddressidCheckouts {
			queries.SetScanner(&rel.Billingaddressid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BillingaddressidAddress = nil
		}
		o.R.BillingaddressidCheckouts = nil
	}

	return o.AddBillingaddressidCheckouts(ctx, exec, insert, related...)
}

// RemoveBillingaddressidCheckouts relationships from objects passed in.
// Removes related items from R.BillingaddressidCheckouts (uses pointer comparison, removal does not keep order)
// Sets related.R.BillingaddressidAddress.
func (o *Address) RemoveBillingaddressidCheckouts(ctx context.Context, exec boil.ContextExecutor, related ...*Checkout) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Billingaddressid, nil)
		if rel.R != nil {
			rel.R.BillingaddressidAddress = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("billingaddressid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillingaddressidCheckouts {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillingaddressidCheckouts)
			if ln > 1 && i < ln-1 {
				o.R.BillingaddressidCheckouts[i] = o.R.BillingaddressidCheckouts[ln-1]
			}
			o.R.BillingaddressidCheckouts = o.R.BillingaddressidCheckouts[:ln-1]
			break
		}
	}

	return nil
}

// AddBillingaddressidOrders adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.BillingaddressidOrders.
// Sets related.R.BillingaddressidAddress appropriately.
func (o *Address) AddBillingaddressidOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Billingaddressid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"billingaddressid"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Billingaddressid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			BillingaddressidOrders: related,
		}
	} else {
		o.R.BillingaddressidOrders = append(o.R.BillingaddressidOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				BillingaddressidAddress: o,
			}
		} else {
			rel.R.BillingaddressidAddress = o
		}
	}
	return nil
}

// SetBillingaddressidOrders removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.BillingaddressidAddress's BillingaddressidOrders accordingly.
// Replaces o.R.BillingaddressidOrders with related.
// Sets related.R.BillingaddressidAddress's BillingaddressidOrders accordingly.
func (o *Address) SetBillingaddressidOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"billingaddressid\" = null where \"billingaddressid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.BillingaddressidOrders {
			queries.SetScanner(&rel.Billingaddressid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.BillingaddressidAddress = nil
		}
		o.R.BillingaddressidOrders = nil
	}

	return o.AddBillingaddressidOrders(ctx, exec, insert, related...)
}

// RemoveBillingaddressidOrders relationships from objects passed in.
// Removes related items from R.BillingaddressidOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.BillingaddressidAddress.
func (o *Address) RemoveBillingaddressidOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Billingaddressid, nil)
		if rel.R != nil {
			rel.R.BillingaddressidAddress = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("billingaddressid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.BillingaddressidOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.BillingaddressidOrders)
			if ln > 1 && i < ln-1 {
				o.R.BillingaddressidOrders[i] = o.R.BillingaddressidOrders[ln-1]
			}
			o.R.BillingaddressidOrders = o.R.BillingaddressidOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressidShops adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.AddressidShops.
// Sets related.R.AddressidAddress appropriately.
func (o *Address) AddAddressidShops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shop) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Addressid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shops\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"addressid"}),
				strmangle.WhereClause("\"", "\"", 2, shopPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Addressid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			AddressidShops: related,
		}
	} else {
		o.R.AddressidShops = append(o.R.AddressidShops, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shopR{
				AddressidAddress: o,
			}
		} else {
			rel.R.AddressidAddress = o
		}
	}
	return nil
}

// SetAddressidShops removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressidAddress's AddressidShops accordingly.
// Replaces o.R.AddressidShops with related.
// Sets related.R.AddressidAddress's AddressidShops accordingly.
func (o *Address) SetAddressidShops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Shop) error {
	query := "update \"shops\" set \"addressid\" = null where \"addressid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AddressidShops {
			queries.SetScanner(&rel.Addressid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AddressidAddress = nil
		}
		o.R.AddressidShops = nil
	}

	return o.AddAddressidShops(ctx, exec, insert, related...)
}

// RemoveAddressidShops relationships from objects passed in.
// Removes related items from R.AddressidShops (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressidAddress.
func (o *Address) RemoveAddressidShops(ctx context.Context, exec boil.ContextExecutor, related ...*Shop) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Addressid, nil)
		if rel.R != nil {
			rel.R.AddressidAddress = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("addressid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressidShops {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressidShops)
			if ln > 1 && i < ln-1 {
				o.R.AddressidShops[i] = o.R.AddressidShops[ln-1]
			}
			o.R.AddressidShops = o.R.AddressidShops[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressidUserAddresses adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.AddressidUserAddresses.
// Sets related.R.AddressidAddress appropriately.
func (o *Address) AddAddressidUserAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Addressid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_addresses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"addressid"}),
				strmangle.WhereClause("\"", "\"", 2, userAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Addressid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			AddressidUserAddresses: related,
		}
	} else {
		o.R.AddressidUserAddresses = append(o.R.AddressidUserAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userAddressR{
				AddressidAddress: o,
			}
		} else {
			rel.R.AddressidAddress = o
		}
	}
	return nil
}

// SetAddressidUserAddresses removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressidAddress's AddressidUserAddresses accordingly.
// Replaces o.R.AddressidUserAddresses with related.
// Sets related.R.AddressidAddress's AddressidUserAddresses accordingly.
func (o *Address) SetAddressidUserAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserAddress) error {
	query := "update \"user_addresses\" set \"addressid\" = null where \"addressid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AddressidUserAddresses {
			queries.SetScanner(&rel.Addressid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AddressidAddress = nil
		}
		o.R.AddressidUserAddresses = nil
	}

	return o.AddAddressidUserAddresses(ctx, exec, insert, related...)
}

// RemoveAddressidUserAddresses relationships from objects passed in.
// Removes related items from R.AddressidUserAddresses (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressidAddress.
func (o *Address) RemoveAddressidUserAddresses(ctx context.Context, exec boil.ContextExecutor, related ...*UserAddress) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Addressid, nil)
		if rel.R != nil {
			rel.R.AddressidAddress = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("addressid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressidUserAddresses {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressidUserAddresses)
			if ln > 1 && i < ln-1 {
				o.R.AddressidUserAddresses[i] = o.R.AddressidUserAddresses[ln-1]
			}
			o.R.AddressidUserAddresses = o.R.AddressidUserAddresses[:ln-1]
			break
		}
	}

	return nil
}

// AddDefaultshippingaddressidUsers adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.DefaultshippingaddressidUsers.
// Sets related.R.DefaultshippingaddressidAddress appropriately.
func (o *Address) AddDefaultshippingaddressidUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Defaultshippingaddressid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"defaultshippingaddressid"}),
				strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Defaultshippingaddressid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			DefaultshippingaddressidUsers: related,
		}
	} else {
		o.R.DefaultshippingaddressidUsers = append(o.R.DefaultshippingaddressidUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				DefaultshippingaddressidAddress: o,
			}
		} else {
			rel.R.DefaultshippingaddressidAddress = o
		}
	}
	return nil
}

// SetDefaultshippingaddressidUsers removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DefaultshippingaddressidAddress's DefaultshippingaddressidUsers accordingly.
// Replaces o.R.DefaultshippingaddressidUsers with related.
// Sets related.R.DefaultshippingaddressidAddress's DefaultshippingaddressidUsers accordingly.
func (o *Address) SetDefaultshippingaddressidUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update \"users\" set \"defaultshippingaddressid\" = null where \"defaultshippingaddressid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DefaultshippingaddressidUsers {
			queries.SetScanner(&rel.Defaultshippingaddressid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DefaultshippingaddressidAddress = nil
		}
		o.R.DefaultshippingaddressidUsers = nil
	}

	return o.AddDefaultshippingaddressidUsers(ctx, exec, insert, related...)
}

// RemoveDefaultshippingaddressidUsers relationships from objects passed in.
// Removes related items from R.DefaultshippingaddressidUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.DefaultshippingaddressidAddress.
func (o *Address) RemoveDefaultshippingaddressidUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Defaultshippingaddressid, nil)
		if rel.R != nil {
			rel.R.DefaultshippingaddressidAddress = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("defaultshippingaddressid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DefaultshippingaddressidUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.DefaultshippingaddressidUsers)
			if ln > 1 && i < ln-1 {
				o.R.DefaultshippingaddressidUsers[i] = o.R.DefaultshippingaddressidUsers[ln-1]
			}
			o.R.DefaultshippingaddressidUsers = o.R.DefaultshippingaddressidUsers[:ln-1]
			break
		}
	}

	return nil
}

// AddAddressidWarehouses adds the given related objects to the existing relationships
// of the address, optionally inserting them as new records.
// Appends related to o.R.AddressidWarehouses.
// Sets related.R.AddressidAddress appropriately.
func (o *Address) AddAddressidWarehouses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Warehouse) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Addressid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"warehouses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"addressid"}),
				strmangle.WhereClause("\"", "\"", 2, warehousePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Addressid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &addressR{
			AddressidWarehouses: related,
		}
	} else {
		o.R.AddressidWarehouses = append(o.R.AddressidWarehouses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &warehouseR{
				AddressidAddress: o,
			}
		} else {
			rel.R.AddressidAddress = o
		}
	}
	return nil
}

// SetAddressidWarehouses removes all previously related items of the
// address replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressidAddress's AddressidWarehouses accordingly.
// Replaces o.R.AddressidWarehouses with related.
// Sets related.R.AddressidAddress's AddressidWarehouses accordingly.
func (o *Address) SetAddressidWarehouses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Warehouse) error {
	query := "update \"warehouses\" set \"addressid\" = null where \"addressid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AddressidWarehouses {
			queries.SetScanner(&rel.Addressid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AddressidAddress = nil
		}
		o.R.AddressidWarehouses = nil
	}

	return o.AddAddressidWarehouses(ctx, exec, insert, related...)
}

// RemoveAddressidWarehouses relationships from objects passed in.
// Removes related items from R.AddressidWarehouses (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressidAddress.
func (o *Address) RemoveAddressidWarehouses(ctx context.Context, exec boil.ContextExecutor, related ...*Warehouse) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Addressid, nil)
		if rel.R != nil {
			rel.R.AddressidAddress = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("addressid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressidWarehouses {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressidWarehouses)
			if ln > 1 && i < ln-1 {
				o.R.AddressidWarehouses[i] = o.R.AddressidWarehouses[ln-1]
			}
			o.R.AddressidWarehouses = o.R.AddressidWarehouses[:ln-1]
			break
		}
	}

	return nil
}

// Addresses retrieves all the records using an executor.
func Addresses(mods ...qm.QueryMod) addressQuery {
	mods = append(mods, qm.From("\"addresses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"addresses\".*"})
	}

	return addressQuery{q}
}

// FindAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAddress(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Address, error) {
	addressObj := &Address{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"addresses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, addressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from addresses")
	}

	if err = addressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return addressObj, err
	}

	return addressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Address) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no addresses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(addressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	addressInsertCacheMut.RLock()
	cache, cached := addressInsertCache[key]
	addressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			addressAllColumns,
			addressColumnsWithDefault,
			addressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(addressType, addressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"addresses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"addresses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into addresses")
	}

	if !cached {
		addressInsertCacheMut.Lock()
		addressInsertCache[key] = cache
		addressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Address.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Address) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	addressUpdateCacheMut.RLock()
	cache, cached := addressUpdateCache[key]
	addressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			addressAllColumns,
			addressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"addresses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, addressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, append(wl, addressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update addresses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for addresses")
	}

	if !cached {
		addressUpdateCacheMut.Lock()
		addressUpdateCache[key] = cache
		addressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q addressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for addresses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AddressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"addresses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, addressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in address slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all address")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Address) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no addresses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(addressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	addressUpsertCacheMut.RLock()
	cache, cached := addressUpsertCache[key]
	addressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			addressAllColumns,
			addressColumnsWithDefault,
			addressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			addressAllColumns,
			addressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert addresses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(addressPrimaryKeyColumns))
			copy(conflict, addressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"addresses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(addressType, addressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(addressType, addressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert addresses")
	}

	if !cached {
		addressUpsertCacheMut.Lock()
		addressUpsertCache[key] = cache
		addressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Address record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Address) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Address provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), addressPrimaryKeyMapping)
	sql := "DELETE FROM \"addresses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for addresses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q addressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no addressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from addresses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for addresses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AddressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(addressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, addressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from address slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for addresses")
	}

	if len(addressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Address) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAddress(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AddressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"addresses\".* FROM \"addresses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, addressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AddressSlice")
	}

	*o = slice

	return nil
}

// AddressExists checks if the Address row exists.
func AddressExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"addresses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if addresses exists")
	}

	return exists, nil
}

// Exists checks if the Address row exists.
func (o *Address) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AddressExists(ctx, exec, o.ID)
}
