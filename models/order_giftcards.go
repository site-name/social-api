// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OrderGiftcard is an object representing the database table.
type OrderGiftcard struct {
	ID         string `boil:"id" json:"id" toml:"id" yaml:"id"`
	GiftcardID string `boil:"giftcard_id" json:"giftcard_id" toml:"giftcard_id" yaml:"giftcard_id"`
	OrderID    string `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`

	R *orderGiftcardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderGiftcardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderGiftcardColumns = struct {
	ID         string
	GiftcardID string
	OrderID    string
}{
	ID:         "id",
	GiftcardID: "giftcard_id",
	OrderID:    "order_id",
}

var OrderGiftcardTableColumns = struct {
	ID         string
	GiftcardID string
	OrderID    string
}{
	ID:         "order_giftcards.id",
	GiftcardID: "order_giftcards.giftcard_id",
	OrderID:    "order_giftcards.order_id",
}

// Generated where

var OrderGiftcardWhere = struct {
	ID         whereHelperstring
	GiftcardID whereHelperstring
	OrderID    whereHelperstring
}{
	ID:         whereHelperstring{field: "\"order_giftcards\".\"id\""},
	GiftcardID: whereHelperstring{field: "\"order_giftcards\".\"giftcard_id\""},
	OrderID:    whereHelperstring{field: "\"order_giftcards\".\"order_id\""},
}

// OrderGiftcardRels is where relationship names are stored.
var OrderGiftcardRels = struct {
	Giftcard string
	Order    string
}{
	Giftcard: "Giftcard",
	Order:    "Order",
}

// orderGiftcardR is where relationships are stored.
type orderGiftcardR struct {
	Giftcard *Giftcard `boil:"Giftcard" json:"Giftcard" toml:"Giftcard" yaml:"Giftcard"`
	Order    *Order    `boil:"Order" json:"Order" toml:"Order" yaml:"Order"`
}

// NewStruct creates a new relationship struct
func (*orderGiftcardR) NewStruct() *orderGiftcardR {
	return &orderGiftcardR{}
}

func (r *orderGiftcardR) GetGiftcard() *Giftcard {
	if r == nil {
		return nil
	}
	return r.Giftcard
}

func (r *orderGiftcardR) GetOrder() *Order {
	if r == nil {
		return nil
	}
	return r.Order
}

// orderGiftcardL is where Load methods for each relationship are stored.
type orderGiftcardL struct{}

var (
	orderGiftcardAllColumns            = []string{"id", "giftcard_id", "order_id"}
	orderGiftcardColumnsWithoutDefault = []string{"giftcard_id", "order_id"}
	orderGiftcardColumnsWithDefault    = []string{"id"}
	orderGiftcardPrimaryKeyColumns     = []string{"id"}
	orderGiftcardGeneratedColumns      = []string{}
)

type (
	// OrderGiftcardSlice is an alias for a slice of pointers to OrderGiftcard.
	// This should almost always be used instead of []OrderGiftcard.
	OrderGiftcardSlice []*OrderGiftcard
	// OrderGiftcardHook is the signature for custom OrderGiftcard hook methods
	OrderGiftcardHook func(context.Context, boil.ContextExecutor, *OrderGiftcard) error

	orderGiftcardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderGiftcardType                 = reflect.TypeOf(&OrderGiftcard{})
	orderGiftcardMapping              = queries.MakeStructMapping(orderGiftcardType)
	orderGiftcardPrimaryKeyMapping, _ = queries.BindMapping(orderGiftcardType, orderGiftcardMapping, orderGiftcardPrimaryKeyColumns)
	orderGiftcardInsertCacheMut       sync.RWMutex
	orderGiftcardInsertCache          = make(map[string]insertCache)
	orderGiftcardUpdateCacheMut       sync.RWMutex
	orderGiftcardUpdateCache          = make(map[string]updateCache)
	orderGiftcardUpsertCacheMut       sync.RWMutex
	orderGiftcardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderGiftcardAfterSelectHooks []OrderGiftcardHook

var orderGiftcardBeforeInsertHooks []OrderGiftcardHook
var orderGiftcardAfterInsertHooks []OrderGiftcardHook

var orderGiftcardBeforeUpdateHooks []OrderGiftcardHook
var orderGiftcardAfterUpdateHooks []OrderGiftcardHook

var orderGiftcardBeforeDeleteHooks []OrderGiftcardHook
var orderGiftcardAfterDeleteHooks []OrderGiftcardHook

var orderGiftcardBeforeUpsertHooks []OrderGiftcardHook
var orderGiftcardAfterUpsertHooks []OrderGiftcardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OrderGiftcard) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderGiftcardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OrderGiftcard) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderGiftcardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OrderGiftcard) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderGiftcardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OrderGiftcard) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderGiftcardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OrderGiftcard) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderGiftcardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OrderGiftcard) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderGiftcardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OrderGiftcard) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderGiftcardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OrderGiftcard) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderGiftcardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OrderGiftcard) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderGiftcardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderGiftcardHook registers your hook function for all future operations.
func AddOrderGiftcardHook(hookPoint boil.HookPoint, orderGiftcardHook OrderGiftcardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderGiftcardAfterSelectHooks = append(orderGiftcardAfterSelectHooks, orderGiftcardHook)
	case boil.BeforeInsertHook:
		orderGiftcardBeforeInsertHooks = append(orderGiftcardBeforeInsertHooks, orderGiftcardHook)
	case boil.AfterInsertHook:
		orderGiftcardAfterInsertHooks = append(orderGiftcardAfterInsertHooks, orderGiftcardHook)
	case boil.BeforeUpdateHook:
		orderGiftcardBeforeUpdateHooks = append(orderGiftcardBeforeUpdateHooks, orderGiftcardHook)
	case boil.AfterUpdateHook:
		orderGiftcardAfterUpdateHooks = append(orderGiftcardAfterUpdateHooks, orderGiftcardHook)
	case boil.BeforeDeleteHook:
		orderGiftcardBeforeDeleteHooks = append(orderGiftcardBeforeDeleteHooks, orderGiftcardHook)
	case boil.AfterDeleteHook:
		orderGiftcardAfterDeleteHooks = append(orderGiftcardAfterDeleteHooks, orderGiftcardHook)
	case boil.BeforeUpsertHook:
		orderGiftcardBeforeUpsertHooks = append(orderGiftcardBeforeUpsertHooks, orderGiftcardHook)
	case boil.AfterUpsertHook:
		orderGiftcardAfterUpsertHooks = append(orderGiftcardAfterUpsertHooks, orderGiftcardHook)
	}
}

// One returns a single orderGiftcard record from the query.
func (q orderGiftcardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderGiftcard, error) {
	o := &OrderGiftcard{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for order_giftcards")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OrderGiftcard records from the query.
func (q orderGiftcardQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderGiftcardSlice, error) {
	var o []*OrderGiftcard

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrderGiftcard slice")
	}

	if len(orderGiftcardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OrderGiftcard records in the query.
func (q orderGiftcardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count order_giftcards rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderGiftcardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if order_giftcards exists")
	}

	return count > 0, nil
}

// Giftcard pointed to by the foreign key.
func (o *OrderGiftcard) Giftcard(mods ...qm.QueryMod) giftcardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GiftcardID),
	}

	queryMods = append(queryMods, mods...)

	return Giftcards(queryMods...)
}

// Order pointed to by the foreign key.
func (o *OrderGiftcard) Order(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OrderID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// LoadGiftcard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderGiftcardL) LoadGiftcard(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderGiftcard interface{}, mods queries.Applicator) error {
	var slice []*OrderGiftcard
	var object *OrderGiftcard

	if singular {
		var ok bool
		object, ok = maybeOrderGiftcard.(*OrderGiftcard)
		if !ok {
			object = new(OrderGiftcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderGiftcard))
			}
		}
	} else {
		s, ok := maybeOrderGiftcard.(*[]*OrderGiftcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderGiftcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderGiftcardR{}
		}
		args = append(args, object.GiftcardID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderGiftcardR{}
			}

			for _, a := range args {
				if a == obj.GiftcardID {
					continue Outer
				}
			}

			args = append(args, obj.GiftcardID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`giftcards`),
		qm.WhereIn(`giftcards.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Giftcard")
	}

	var resultSlice []*Giftcard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Giftcard")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for giftcards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for giftcards")
	}

	if len(giftcardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Giftcard = foreign
		if foreign.R == nil {
			foreign.R = &giftcardR{}
		}
		foreign.R.OrderGiftcards = append(foreign.R.OrderGiftcards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GiftcardID == foreign.ID {
				local.R.Giftcard = foreign
				if foreign.R == nil {
					foreign.R = &giftcardR{}
				}
				foreign.R.OrderGiftcards = append(foreign.R.OrderGiftcards, local)
				break
			}
		}
	}

	return nil
}

// LoadOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderGiftcardL) LoadOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrderGiftcard interface{}, mods queries.Applicator) error {
	var slice []*OrderGiftcard
	var object *OrderGiftcard

	if singular {
		var ok bool
		object, ok = maybeOrderGiftcard.(*OrderGiftcard)
		if !ok {
			object = new(OrderGiftcard)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrderGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrderGiftcard))
			}
		}
	} else {
		s, ok := maybeOrderGiftcard.(*[]*OrderGiftcard)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrderGiftcard)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrderGiftcard))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderGiftcardR{}
		}
		args = append(args, object.OrderID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderGiftcardR{}
			}

			for _, a := range args {
				if a == obj.OrderID {
					continue Outer
				}
			}

			args = append(args, obj.OrderID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Order = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderGiftcards = append(foreign.R.OrderGiftcards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrderID == foreign.ID {
				local.R.Order = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderGiftcards = append(foreign.R.OrderGiftcards, local)
				break
			}
		}
	}

	return nil
}

// SetGiftcard of the orderGiftcard to the related item.
// Sets o.R.Giftcard to related.
// Adds o to related.R.OrderGiftcards.
func (o *OrderGiftcard) SetGiftcard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Giftcard) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_giftcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"giftcard_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderGiftcardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GiftcardID = related.ID
	if o.R == nil {
		o.R = &orderGiftcardR{
			Giftcard: related,
		}
	} else {
		o.R.Giftcard = related
	}

	if related.R == nil {
		related.R = &giftcardR{
			OrderGiftcards: OrderGiftcardSlice{o},
		}
	} else {
		related.R.OrderGiftcards = append(related.R.OrderGiftcards, o)
	}

	return nil
}

// SetOrder of the orderGiftcard to the related item.
// Sets o.R.Order to related.
// Adds o to related.R.OrderGiftcards.
func (o *OrderGiftcard) SetOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"order_giftcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderGiftcardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrderID = related.ID
	if o.R == nil {
		o.R = &orderGiftcardR{
			Order: related,
		}
	} else {
		o.R.Order = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderGiftcards: OrderGiftcardSlice{o},
		}
	} else {
		related.R.OrderGiftcards = append(related.R.OrderGiftcards, o)
	}

	return nil
}

// OrderGiftcards retrieves all the records using an executor.
func OrderGiftcards(mods ...qm.QueryMod) orderGiftcardQuery {
	mods = append(mods, qm.From("\"order_giftcards\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"order_giftcards\".*"})
	}

	return orderGiftcardQuery{q}
}

// FindOrderGiftcard retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderGiftcard(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*OrderGiftcard, error) {
	orderGiftcardObj := &OrderGiftcard{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_giftcards\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderGiftcardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from order_giftcards")
	}

	if err = orderGiftcardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderGiftcardObj, err
	}

	return orderGiftcardObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderGiftcard) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_giftcards provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderGiftcardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderGiftcardInsertCacheMut.RLock()
	cache, cached := orderGiftcardInsertCache[key]
	orderGiftcardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderGiftcardAllColumns,
			orderGiftcardColumnsWithDefault,
			orderGiftcardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderGiftcardType, orderGiftcardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderGiftcardType, orderGiftcardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_giftcards\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_giftcards\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into order_giftcards")
	}

	if !cached {
		orderGiftcardInsertCacheMut.Lock()
		orderGiftcardInsertCache[key] = cache
		orderGiftcardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OrderGiftcard.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderGiftcard) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderGiftcardUpdateCacheMut.RLock()
	cache, cached := orderGiftcardUpdateCache[key]
	orderGiftcardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderGiftcardAllColumns,
			orderGiftcardPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update order_giftcards, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_giftcards\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderGiftcardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderGiftcardType, orderGiftcardMapping, append(wl, orderGiftcardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update order_giftcards row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for order_giftcards")
	}

	if !cached {
		orderGiftcardUpdateCacheMut.Lock()
		orderGiftcardUpdateCache[key] = cache
		orderGiftcardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderGiftcardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for order_giftcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for order_giftcards")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderGiftcardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderGiftcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_giftcards\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderGiftcardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in orderGiftcard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all orderGiftcard")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OrderGiftcard) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_giftcards provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderGiftcardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderGiftcardUpsertCacheMut.RLock()
	cache, cached := orderGiftcardUpsertCache[key]
	orderGiftcardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderGiftcardAllColumns,
			orderGiftcardColumnsWithDefault,
			orderGiftcardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderGiftcardAllColumns,
			orderGiftcardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert order_giftcards, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderGiftcardPrimaryKeyColumns))
			copy(conflict, orderGiftcardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"order_giftcards\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderGiftcardType, orderGiftcardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderGiftcardType, orderGiftcardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert order_giftcards")
	}

	if !cached {
		orderGiftcardUpsertCacheMut.Lock()
		orderGiftcardUpsertCache[key] = cache
		orderGiftcardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OrderGiftcard record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderGiftcard) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderGiftcard provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderGiftcardPrimaryKeyMapping)
	sql := "DELETE FROM \"order_giftcards\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from order_giftcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for order_giftcards")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderGiftcardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderGiftcardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order_giftcards")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_giftcards")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderGiftcardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderGiftcardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderGiftcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_giftcards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderGiftcardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orderGiftcard slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_giftcards")
	}

	if len(orderGiftcardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderGiftcard) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderGiftcard(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderGiftcardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderGiftcardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderGiftcardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_giftcards\".* FROM \"order_giftcards\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderGiftcardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderGiftcardSlice")
	}

	*o = slice

	return nil
}

// OrderGiftcardExists checks if the OrderGiftcard row exists.
func OrderGiftcardExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_giftcards\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if order_giftcards exists")
	}

	return exists, nil
}

// Exists checks if the OrderGiftcard row exists.
func (o *OrderGiftcard) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderGiftcardExists(ctx, exec, o.ID)
}
