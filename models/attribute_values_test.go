// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttributeValues(t *testing.T) {
	t.Parallel()

	query := AttributeValues()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttributeValuesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributeValuesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AttributeValues().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributeValuesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributeValueSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributeValuesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttributeValueExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AttributeValue exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttributeValueExists to return true, but got false.")
	}
}

func testAttributeValuesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attributeValueFound, err := FindAttributeValue(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attributeValueFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttributeValuesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AttributeValues().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttributeValuesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AttributeValues().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttributeValuesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attributeValueOne := &AttributeValue{}
	attributeValueTwo := &AttributeValue{}
	if err = randomize.Struct(seed, attributeValueOne, attributeValueDBTypes, false, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}
	if err = randomize.Struct(seed, attributeValueTwo, attributeValueDBTypes, false, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributeValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributeValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttributeValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttributeValuesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attributeValueOne := &AttributeValue{}
	attributeValueTwo := &AttributeValue{}
	if err = randomize.Struct(seed, attributeValueOne, attributeValueDBTypes, false, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}
	if err = randomize.Struct(seed, attributeValueTwo, attributeValueDBTypes, false, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributeValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributeValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attributeValueBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
	*o = AttributeValue{}
	return nil
}

func attributeValueAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
	*o = AttributeValue{}
	return nil
}

func attributeValueAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
	*o = AttributeValue{}
	return nil
}

func attributeValueBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
	*o = AttributeValue{}
	return nil
}

func attributeValueAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
	*o = AttributeValue{}
	return nil
}

func attributeValueBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
	*o = AttributeValue{}
	return nil
}

func attributeValueAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
	*o = AttributeValue{}
	return nil
}

func attributeValueBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
	*o = AttributeValue{}
	return nil
}

func attributeValueAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeValue) error {
	*o = AttributeValue{}
	return nil
}

func testAttributeValuesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AttributeValue{}
	o := &AttributeValue{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attributeValueDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AttributeValue object: %s", err)
	}

	AddAttributeValueHook(boil.BeforeInsertHook, attributeValueBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attributeValueBeforeInsertHooks = []AttributeValueHook{}

	AddAttributeValueHook(boil.AfterInsertHook, attributeValueAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attributeValueAfterInsertHooks = []AttributeValueHook{}

	AddAttributeValueHook(boil.AfterSelectHook, attributeValueAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attributeValueAfterSelectHooks = []AttributeValueHook{}

	AddAttributeValueHook(boil.BeforeUpdateHook, attributeValueBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attributeValueBeforeUpdateHooks = []AttributeValueHook{}

	AddAttributeValueHook(boil.AfterUpdateHook, attributeValueAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attributeValueAfterUpdateHooks = []AttributeValueHook{}

	AddAttributeValueHook(boil.BeforeDeleteHook, attributeValueBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attributeValueBeforeDeleteHooks = []AttributeValueHook{}

	AddAttributeValueHook(boil.AfterDeleteHook, attributeValueAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attributeValueAfterDeleteHooks = []AttributeValueHook{}

	AddAttributeValueHook(boil.BeforeUpsertHook, attributeValueBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attributeValueBeforeUpsertHooks = []AttributeValueHook{}

	AddAttributeValueHook(boil.AfterUpsertHook, attributeValueAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attributeValueAfterUpsertHooks = []AttributeValueHook{}
}

func testAttributeValuesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributeValuesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(attributeValueColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributeValueToManyValueAssignedPageAttributeValues(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeValue
	var b, c AssignedPageAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedPageAttributeValueDBTypes, false, assignedPageAttributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ValueID = a.ID
	c.ValueID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ValueAssignedPageAttributeValues().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ValueID == b.ValueID {
			bFound = true
		}
		if v.ValueID == c.ValueID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributeValueSlice{&a}
	if err = a.L.LoadValueAssignedPageAttributeValues(ctx, tx, false, (*[]*AttributeValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ValueAssignedPageAttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ValueAssignedPageAttributeValues = nil
	if err = a.L.LoadValueAssignedPageAttributeValues(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ValueAssignedPageAttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAttributeValueToManyValueAssignedProductAttributeValues(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeValue
	var b, c AssignedProductAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedProductAttributeValueDBTypes, false, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedProductAttributeValueDBTypes, false, assignedProductAttributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ValueID = a.ID
	c.ValueID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ValueAssignedProductAttributeValues().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ValueID == b.ValueID {
			bFound = true
		}
		if v.ValueID == c.ValueID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributeValueSlice{&a}
	if err = a.L.LoadValueAssignedProductAttributeValues(ctx, tx, false, (*[]*AttributeValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ValueAssignedProductAttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ValueAssignedProductAttributeValues = nil
	if err = a.L.LoadValueAssignedProductAttributeValues(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ValueAssignedProductAttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAttributeValueToManyValueAssignedVariantAttributeValues(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeValue
	var b, c AssignedVariantAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedVariantAttributeValueDBTypes, false, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedVariantAttributeValueDBTypes, false, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ValueID = a.ID
	c.ValueID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ValueAssignedVariantAttributeValues().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ValueID == b.ValueID {
			bFound = true
		}
		if v.ValueID == c.ValueID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributeValueSlice{&a}
	if err = a.L.LoadValueAssignedVariantAttributeValues(ctx, tx, false, (*[]*AttributeValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ValueAssignedVariantAttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ValueAssignedVariantAttributeValues = nil
	if err = a.L.LoadValueAssignedVariantAttributeValues(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ValueAssignedVariantAttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAttributeValueToManyAddOpValueAssignedPageAttributeValues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeValue
	var b, c, d, e AssignedPageAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPageAttributeValue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPageAttributeValueDBTypes, false, strmangle.SetComplement(assignedPageAttributeValuePrimaryKeyColumns, assignedPageAttributeValueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedPageAttributeValue{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddValueAssignedPageAttributeValues(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ValueID {
			t.Error("foreign key was wrong value", a.ID, first.ValueID)
		}
		if a.ID != second.ValueID {
			t.Error("foreign key was wrong value", a.ID, second.ValueID)
		}

		if first.R.Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ValueAssignedPageAttributeValues[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ValueAssignedPageAttributeValues[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ValueAssignedPageAttributeValues().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAttributeValueToManyAddOpValueAssignedProductAttributeValues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeValue
	var b, c, d, e AssignedProductAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedProductAttributeValue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedProductAttributeValueDBTypes, false, strmangle.SetComplement(assignedProductAttributeValuePrimaryKeyColumns, assignedProductAttributeValueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedProductAttributeValue{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddValueAssignedProductAttributeValues(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ValueID {
			t.Error("foreign key was wrong value", a.ID, first.ValueID)
		}
		if a.ID != second.ValueID {
			t.Error("foreign key was wrong value", a.ID, second.ValueID)
		}

		if first.R.Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ValueAssignedProductAttributeValues[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ValueAssignedProductAttributeValues[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ValueAssignedProductAttributeValues().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAttributeValueToManyAddOpValueAssignedVariantAttributeValues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeValue
	var b, c, d, e AssignedVariantAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedVariantAttributeValue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedVariantAttributeValueDBTypes, false, strmangle.SetComplement(assignedVariantAttributeValuePrimaryKeyColumns, assignedVariantAttributeValueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedVariantAttributeValue{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddValueAssignedVariantAttributeValues(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ValueID {
			t.Error("foreign key was wrong value", a.ID, first.ValueID)
		}
		if a.ID != second.ValueID {
			t.Error("foreign key was wrong value", a.ID, second.ValueID)
		}

		if first.R.Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Value != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ValueAssignedVariantAttributeValues[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ValueAssignedVariantAttributeValues[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ValueAssignedVariantAttributeValues().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAttributeValueToOneAttributeUsingAttribute(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AttributeValue
	var foreign Attribute

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, attributeValueDBTypes, false, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AttributeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Attribute().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAttributeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AttributeValueSlice{&local}
	if err = local.L.LoadAttribute(ctx, tx, false, (*[]*AttributeValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Attribute == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Attribute = nil
	if err = local.L.LoadAttribute(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Attribute == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAttributeValueToOneSetOpAttributeUsingAttribute(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeValue
	var b, c Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeValueDBTypes, false, strmangle.SetComplement(attributeValuePrimaryKeyColumns, attributeValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Attribute{&b, &c} {
		err = a.SetAttribute(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Attribute != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AttributeValues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AttributeID != x.ID {
			t.Error("foreign key was wrong value", a.AttributeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AttributeID))
		reflect.Indirect(reflect.ValueOf(&a.AttributeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AttributeID != x.ID {
			t.Error("foreign key was wrong value", a.AttributeID, x.ID)
		}
	}
}

func testAttributeValuesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributeValuesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributeValueSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributeValuesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttributeValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attributeValueDBTypes = map[string]string{`ID`: `uuid`, `Name`: `character varying`, `Value`: `character varying`, `Slug`: `character varying`, `FileURL`: `character varying`, `ContentType`: `character varying`, `AttributeID`: `uuid`, `RichText`: `text`, `Boolean`: `boolean`, `Datetime`: `timestamp with time zone`, `SortOrder`: `integer`}
	_                     = bytes.MinRead
)

func testAttributeValuesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attributeValueAllColumns) == len(attributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttributeValuesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attributeValueAllColumns) == len(attributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttributeValue{}
	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributeValueDBTypes, true, attributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attributeValueAllColumns, attributeValuePrimaryKeyColumns) {
		fields = attributeValueAllColumns
	} else {
		fields = strmangle.SetComplement(
			attributeValueAllColumns,
			attributeValuePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttributeValueSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAttributeValuesUpsert(t *testing.T) {
	t.Parallel()

	if len(attributeValueAllColumns) == len(attributeValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AttributeValue{}
	if err = randomize.Struct(seed, &o, attributeValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttributeValue: %s", err)
	}

	count, err := AttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attributeValueDBTypes, false, attributeValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributeValue struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttributeValue: %s", err)
	}

	count, err = AttributeValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
