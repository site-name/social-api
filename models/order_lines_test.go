// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrderLines(t *testing.T) {
	t.Parallel()

	query := OrderLines()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrderLinesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderLinesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrderLines().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderLinesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderLineSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderLinesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderLineExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrderLine exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderLineExists to return true, but got false.")
	}
}

func testOrderLinesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderLineFound, err := FindOrderLine(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orderLineFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrderLinesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrderLines().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrderLinesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrderLines().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrderLinesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderLineOne := &OrderLine{}
	orderLineTwo := &OrderLine{}
	if err = randomize.Struct(seed, orderLineOne, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}
	if err = randomize.Struct(seed, orderLineTwo, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderLineOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderLineTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderLines().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrderLinesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderLineOne := &OrderLine{}
	orderLineTwo := &OrderLine{}
	if err = randomize.Struct(seed, orderLineOne, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}
	if err = randomize.Struct(seed, orderLineTwo, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderLineOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderLineTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orderLineBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
	*o = OrderLine{}
	return nil
}

func orderLineAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
	*o = OrderLine{}
	return nil
}

func orderLineAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
	*o = OrderLine{}
	return nil
}

func orderLineBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
	*o = OrderLine{}
	return nil
}

func orderLineAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
	*o = OrderLine{}
	return nil
}

func orderLineBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
	*o = OrderLine{}
	return nil
}

func orderLineAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
	*o = OrderLine{}
	return nil
}

func orderLineBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
	*o = OrderLine{}
	return nil
}

func orderLineAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
	*o = OrderLine{}
	return nil
}

func testOrderLinesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrderLine{}
	o := &OrderLine{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orderLineDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrderLine object: %s", err)
	}

	AddOrderLineHook(boil.BeforeInsertHook, orderLineBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orderLineBeforeInsertHooks = []OrderLineHook{}

	AddOrderLineHook(boil.AfterInsertHook, orderLineAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orderLineAfterInsertHooks = []OrderLineHook{}

	AddOrderLineHook(boil.AfterSelectHook, orderLineAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orderLineAfterSelectHooks = []OrderLineHook{}

	AddOrderLineHook(boil.BeforeUpdateHook, orderLineBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orderLineBeforeUpdateHooks = []OrderLineHook{}

	AddOrderLineHook(boil.AfterUpdateHook, orderLineAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orderLineAfterUpdateHooks = []OrderLineHook{}

	AddOrderLineHook(boil.BeforeDeleteHook, orderLineBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orderLineBeforeDeleteHooks = []OrderLineHook{}

	AddOrderLineHook(boil.AfterDeleteHook, orderLineAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orderLineAfterDeleteHooks = []OrderLineHook{}

	AddOrderLineHook(boil.BeforeUpsertHook, orderLineBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orderLineBeforeUpsertHooks = []OrderLineHook{}

	AddOrderLineHook(boil.AfterUpsertHook, orderLineAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orderLineAfterUpsertHooks = []OrderLineHook{}
}

func testOrderLinesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderLinesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderLineColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrderLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderLineOneToOneDigitalContentURLUsingLineDigitalContentURL(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign DigitalContentURL
	var local OrderLine

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, digitalContentURLDBTypes, true, digitalContentURLColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DigitalContentURL struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&foreign.LineID, local.ID)
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.LineDigitalContentURL().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.LineID, foreign.LineID) {
		t.Errorf("want: %v, got %v", foreign.LineID, check.LineID)
	}

	ranAfterSelectHook := false
	AddDigitalContentURLHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *DigitalContentURL) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderLineSlice{&local}
	if err = local.L.LoadLineDigitalContentURL(ctx, tx, false, (*[]*OrderLine)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LineDigitalContentURL == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LineDigitalContentURL = nil
	if err = local.L.LoadLineDigitalContentURL(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.LineDigitalContentURL == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderLineOneToOneSetOpDigitalContentURLUsingLineDigitalContentURL(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b, c DigitalContentURL

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, digitalContentURLDBTypes, false, strmangle.SetComplement(digitalContentURLPrimaryKeyColumns, digitalContentURLColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, digitalContentURLDBTypes, false, strmangle.SetComplement(digitalContentURLPrimaryKeyColumns, digitalContentURLColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DigitalContentURL{&b, &c} {
		err = a.SetLineDigitalContentURL(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LineDigitalContentURL != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Line != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if !queries.Equal(a.ID, x.LineID) {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.LineID))
		reflect.Indirect(reflect.ValueOf(&x.LineID)).Set(zero)

		if err = x.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ID, x.LineID) {
			t.Error("foreign key was wrong value", a.ID, x.LineID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testOrderLineOneToOneRemoveOpDigitalContentURLUsingLineDigitalContentURL(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b DigitalContentURL

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, digitalContentURLDBTypes, false, strmangle.SetComplement(digitalContentURLPrimaryKeyColumns, digitalContentURLColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetLineDigitalContentURL(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveLineDigitalContentURL(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.LineDigitalContentURL().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.LineDigitalContentURL != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(b.LineID) {
		t.Error("foreign key column should be nil")
	}

	if b.R.Line != nil {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderLineToManyAllocations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b, c Allocation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, allocationDBTypes, false, allocationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, allocationDBTypes, false, allocationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.OrderLineID = a.ID
	c.OrderLineID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Allocations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.OrderLineID == b.OrderLineID {
			bFound = true
		}
		if v.OrderLineID == c.OrderLineID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderLineSlice{&a}
	if err = a.L.LoadAllocations(ctx, tx, false, (*[]*OrderLine)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Allocations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Allocations = nil
	if err = a.L.LoadAllocations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Allocations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderLineToManyFulfillmentLines(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b, c FulfillmentLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, fulfillmentLineDBTypes, false, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, fulfillmentLineDBTypes, false, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.OrderLineID, a.ID)
	queries.Assign(&c.OrderLineID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FulfillmentLines().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.OrderLineID, b.OrderLineID) {
			bFound = true
		}
		if queries.Equal(v.OrderLineID, c.OrderLineID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OrderLineSlice{&a}
	if err = a.L.LoadFulfillmentLines(ctx, tx, false, (*[]*OrderLine)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FulfillmentLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FulfillmentLines = nil
	if err = a.L.LoadFulfillmentLines(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FulfillmentLines); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testOrderLineToManyAddOpAllocations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b, c, d, e Allocation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Allocation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, allocationDBTypes, false, strmangle.SetComplement(allocationPrimaryKeyColumns, allocationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Allocation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAllocations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OrderLineID {
			t.Error("foreign key was wrong value", a.ID, first.OrderLineID)
		}
		if a.ID != second.OrderLineID {
			t.Error("foreign key was wrong value", a.ID, second.OrderLineID)
		}

		if first.R.OrderLine != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderLine != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Allocations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Allocations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Allocations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOrderLineToManyAddOpFulfillmentLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b, c, d, e FulfillmentLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FulfillmentLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fulfillmentLineDBTypes, false, strmangle.SetComplement(fulfillmentLinePrimaryKeyColumns, fulfillmentLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*FulfillmentLine{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFulfillmentLines(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.OrderLineID) {
			t.Error("foreign key was wrong value", a.ID, first.OrderLineID)
		}
		if !queries.Equal(a.ID, second.OrderLineID) {
			t.Error("foreign key was wrong value", a.ID, second.OrderLineID)
		}

		if first.R.OrderLine != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.OrderLine != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FulfillmentLines[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FulfillmentLines[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FulfillmentLines().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testOrderLineToManySetOpFulfillmentLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b, c, d, e FulfillmentLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FulfillmentLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fulfillmentLineDBTypes, false, strmangle.SetComplement(fulfillmentLinePrimaryKeyColumns, fulfillmentLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFulfillmentLines(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFulfillmentLines(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OrderLineID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OrderLineID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.OrderLineID) {
		t.Error("foreign key was wrong value", a.ID, d.OrderLineID)
	}
	if !queries.Equal(a.ID, e.OrderLineID) {
		t.Error("foreign key was wrong value", a.ID, e.OrderLineID)
	}

	if b.R.OrderLine != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderLine != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderLine != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.OrderLine != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FulfillmentLines[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FulfillmentLines[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testOrderLineToManyRemoveOpFulfillmentLines(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b, c, d, e FulfillmentLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*FulfillmentLine{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, fulfillmentLineDBTypes, false, strmangle.SetComplement(fulfillmentLinePrimaryKeyColumns, fulfillmentLineColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFulfillmentLines(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFulfillmentLines(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.OrderLineID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.OrderLineID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.OrderLine != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.OrderLine != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.OrderLine != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.OrderLine != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FulfillmentLines) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FulfillmentLines[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FulfillmentLines[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testOrderLineToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderLine
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.OrderID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Order) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderLineSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*OrderLine)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderLineToOneProductVariantUsingVariant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderLine
	var foreign ProductVariant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.VariantID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductVariantHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderLineSlice{&local}
	if err = local.L.LoadVariant(ctx, tx, false, (*[]*OrderLine)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Variant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variant = nil
	if err = local.L.LoadVariant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Variant == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderLineToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderLines[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.OrderID, x.ID) {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testOrderLineToOneRemoveOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrder(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrder(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Order().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Order != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.OrderID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OrderLines) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderLineToOneSetOpProductVariantUsingVariant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b, c ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductVariant{&b, &c} {
		err = a.SetVariant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VariantOrderLines[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.VariantID, x.ID) {
			t.Error("foreign key was wrong value", a.VariantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariantID))
		reflect.Indirect(reflect.ValueOf(&a.VariantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.VariantID, x.ID) {
			t.Error("foreign key was wrong value", a.VariantID, x.ID)
		}
	}
}

func testOrderLineToOneRemoveOpProductVariantUsingVariant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderLine
	var b ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetVariant(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveVariant(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Variant().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Variant != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.VariantID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VariantOrderLines) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testOrderLinesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderLinesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderLineSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderLinesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderLines().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderLineDBTypes = map[string]string{`ID`: `character varying`, `CreateAt`: `bigint`, `OrderID`: `character varying`, `VariantID`: `character varying`, `ProductName`: `character varying`, `VariantName`: `character varying`, `TranslatedProductName`: `character varying`, `TranslatedVariantName`: `character varying`, `ProductSku`: `character varying`, `ProductVariantID`: `character varying`, `IsShippingRequired`: `boolean`, `IsGiftcard`: `boolean`, `Quantity`: `integer`, `QuantityFulfilled`: `integer`, `Currency`: `character varying`, `UnitDiscountAmount`: `double precision`, `UnitDiscountType`: `character varying`, `UnitDiscountReason`: `text`, `UnitPriceNetAmount`: `double precision`, `UnitDiscountValue`: `double precision`, `UnitPriceGrossAmount`: `double precision`, `TotalPriceNetAmount`: `double precision`, `TotalPriceGrossAmount`: `double precision`, `UndiscountedUnitPriceGrossAmount`: `double precision`, `UndiscountedUnitPriceNetAmount`: `double precision`, `UndiscountedTotalPriceGrossAmount`: `double precision`, `UndiscountedTotalPriceNetAmount`: `double precision`, `TaxRate`: `double precision`}
	_                = bytes.MinRead
)

func testOrderLinesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderLinePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderLineAllColumns) == len(orderLinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrderLinesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderLineAllColumns) == len(orderLinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderLine{}
	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderLineDBTypes, true, orderLinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderLineAllColumns, orderLinePrimaryKeyColumns) {
		fields = orderLineAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderLineAllColumns,
			orderLinePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderLineSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrderLinesUpsert(t *testing.T) {
	t.Parallel()

	if len(orderLineAllColumns) == len(orderLinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrderLine{}
	if err = randomize.Struct(seed, &o, orderLineDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderLine: %s", err)
	}

	count, err := OrderLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orderLineDBTypes, false, orderLinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderLine: %s", err)
	}

	count, err = OrderLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
