// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProductMedium is an object representing the database table.
type ProductMedium struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Createat    null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Productid   null.String `boil:"productid" json:"productid,omitempty" toml:"productid" yaml:"productid,omitempty"`
	Ppoi        null.String `boil:"ppoi" json:"ppoi,omitempty" toml:"ppoi" yaml:"ppoi,omitempty"`
	Image       null.String `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	Alt         null.String `boil:"alt" json:"alt,omitempty" toml:"alt" yaml:"alt,omitempty"`
	Type        null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Externalurl null.String `boil:"externalurl" json:"externalurl,omitempty" toml:"externalurl" yaml:"externalurl,omitempty"`
	Oembeddata  null.String `boil:"oembeddata" json:"oembeddata,omitempty" toml:"oembeddata" yaml:"oembeddata,omitempty"`
	Sortorder   null.Int    `boil:"sortorder" json:"sortorder,omitempty" toml:"sortorder" yaml:"sortorder,omitempty"`

	R *productMediumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L productMediumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProductMediumColumns = struct {
	ID          string
	Createat    string
	Productid   string
	Ppoi        string
	Image       string
	Alt         string
	Type        string
	Externalurl string
	Oembeddata  string
	Sortorder   string
}{
	ID:          "id",
	Createat:    "createat",
	Productid:   "productid",
	Ppoi:        "ppoi",
	Image:       "image",
	Alt:         "alt",
	Type:        "type",
	Externalurl: "externalurl",
	Oembeddata:  "oembeddata",
	Sortorder:   "sortorder",
}

var ProductMediumTableColumns = struct {
	ID          string
	Createat    string
	Productid   string
	Ppoi        string
	Image       string
	Alt         string
	Type        string
	Externalurl string
	Oembeddata  string
	Sortorder   string
}{
	ID:          "product_media.id",
	Createat:    "product_media.createat",
	Productid:   "product_media.productid",
	Ppoi:        "product_media.ppoi",
	Image:       "product_media.image",
	Alt:         "product_media.alt",
	Type:        "product_media.type",
	Externalurl: "product_media.externalurl",
	Oembeddata:  "product_media.oembeddata",
	Sortorder:   "product_media.sortorder",
}

// Generated where

var ProductMediumWhere = struct {
	ID          whereHelperstring
	Createat    whereHelpernull_Int64
	Productid   whereHelpernull_String
	Ppoi        whereHelpernull_String
	Image       whereHelpernull_String
	Alt         whereHelpernull_String
	Type        whereHelpernull_String
	Externalurl whereHelpernull_String
	Oembeddata  whereHelpernull_String
	Sortorder   whereHelpernull_Int
}{
	ID:          whereHelperstring{field: "\"product_media\".\"id\""},
	Createat:    whereHelpernull_Int64{field: "\"product_media\".\"createat\""},
	Productid:   whereHelpernull_String{field: "\"product_media\".\"productid\""},
	Ppoi:        whereHelpernull_String{field: "\"product_media\".\"ppoi\""},
	Image:       whereHelpernull_String{field: "\"product_media\".\"image\""},
	Alt:         whereHelpernull_String{field: "\"product_media\".\"alt\""},
	Type:        whereHelpernull_String{field: "\"product_media\".\"type\""},
	Externalurl: whereHelpernull_String{field: "\"product_media\".\"externalurl\""},
	Oembeddata:  whereHelpernull_String{field: "\"product_media\".\"oembeddata\""},
	Sortorder:   whereHelpernull_Int{field: "\"product_media\".\"sortorder\""},
}

// ProductMediumRels is where relationship names are stored.
var ProductMediumRels = struct {
	ProductidProduct    string
	MediaidVariantMedia string
}{
	ProductidProduct:    "ProductidProduct",
	MediaidVariantMedia: "MediaidVariantMedia",
}

// productMediumR is where relationships are stored.
type productMediumR struct {
	ProductidProduct    *Product           `boil:"ProductidProduct" json:"ProductidProduct" toml:"ProductidProduct" yaml:"ProductidProduct"`
	MediaidVariantMedia VariantMediumSlice `boil:"MediaidVariantMedia" json:"MediaidVariantMedia" toml:"MediaidVariantMedia" yaml:"MediaidVariantMedia"`
}

// NewStruct creates a new relationship struct
func (*productMediumR) NewStruct() *productMediumR {
	return &productMediumR{}
}

func (r *productMediumR) GetProductidProduct() *Product {
	if r == nil {
		return nil
	}
	return r.ProductidProduct
}

func (r *productMediumR) GetMediaidVariantMedia() VariantMediumSlice {
	if r == nil {
		return nil
	}
	return r.MediaidVariantMedia
}

// productMediumL is where Load methods for each relationship are stored.
type productMediumL struct{}

var (
	productMediumAllColumns            = []string{"id", "createat", "productid", "ppoi", "image", "alt", "type", "externalurl", "oembeddata", "sortorder"}
	productMediumColumnsWithoutDefault = []string{"id"}
	productMediumColumnsWithDefault    = []string{"createat", "productid", "ppoi", "image", "alt", "type", "externalurl", "oembeddata", "sortorder"}
	productMediumPrimaryKeyColumns     = []string{"id"}
	productMediumGeneratedColumns      = []string{}
)

type (
	// ProductMediumSlice is an alias for a slice of pointers to ProductMedium.
	// This should almost always be used instead of []ProductMedium.
	ProductMediumSlice []*ProductMedium
	// ProductMediumHook is the signature for custom ProductMedium hook methods
	ProductMediumHook func(context.Context, boil.ContextExecutor, *ProductMedium) error

	productMediumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	productMediumType                 = reflect.TypeOf(&ProductMedium{})
	productMediumMapping              = queries.MakeStructMapping(productMediumType)
	productMediumPrimaryKeyMapping, _ = queries.BindMapping(productMediumType, productMediumMapping, productMediumPrimaryKeyColumns)
	productMediumInsertCacheMut       sync.RWMutex
	productMediumInsertCache          = make(map[string]insertCache)
	productMediumUpdateCacheMut       sync.RWMutex
	productMediumUpdateCache          = make(map[string]updateCache)
	productMediumUpsertCacheMut       sync.RWMutex
	productMediumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var productMediumAfterSelectHooks []ProductMediumHook

var productMediumBeforeInsertHooks []ProductMediumHook
var productMediumAfterInsertHooks []ProductMediumHook

var productMediumBeforeUpdateHooks []ProductMediumHook
var productMediumAfterUpdateHooks []ProductMediumHook

var productMediumBeforeDeleteHooks []ProductMediumHook
var productMediumAfterDeleteHooks []ProductMediumHook

var productMediumBeforeUpsertHooks []ProductMediumHook
var productMediumAfterUpsertHooks []ProductMediumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProductMedium) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMediumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProductMedium) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMediumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProductMedium) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMediumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProductMedium) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMediumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProductMedium) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMediumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProductMedium) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMediumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProductMedium) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMediumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProductMedium) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMediumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProductMedium) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range productMediumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProductMediumHook registers your hook function for all future operations.
func AddProductMediumHook(hookPoint boil.HookPoint, productMediumHook ProductMediumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		productMediumAfterSelectHooks = append(productMediumAfterSelectHooks, productMediumHook)
	case boil.BeforeInsertHook:
		productMediumBeforeInsertHooks = append(productMediumBeforeInsertHooks, productMediumHook)
	case boil.AfterInsertHook:
		productMediumAfterInsertHooks = append(productMediumAfterInsertHooks, productMediumHook)
	case boil.BeforeUpdateHook:
		productMediumBeforeUpdateHooks = append(productMediumBeforeUpdateHooks, productMediumHook)
	case boil.AfterUpdateHook:
		productMediumAfterUpdateHooks = append(productMediumAfterUpdateHooks, productMediumHook)
	case boil.BeforeDeleteHook:
		productMediumBeforeDeleteHooks = append(productMediumBeforeDeleteHooks, productMediumHook)
	case boil.AfterDeleteHook:
		productMediumAfterDeleteHooks = append(productMediumAfterDeleteHooks, productMediumHook)
	case boil.BeforeUpsertHook:
		productMediumBeforeUpsertHooks = append(productMediumBeforeUpsertHooks, productMediumHook)
	case boil.AfterUpsertHook:
		productMediumAfterUpsertHooks = append(productMediumAfterUpsertHooks, productMediumHook)
	}
}

// One returns a single productMedium record from the query.
func (q productMediumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProductMedium, error) {
	o := &ProductMedium{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for product_media")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProductMedium records from the query.
func (q productMediumQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProductMediumSlice, error) {
	var o []*ProductMedium

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ProductMedium slice")
	}

	if len(productMediumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProductMedium records in the query.
func (q productMediumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count product_media rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q productMediumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if product_media exists")
	}

	return count > 0, nil
}

// ProductidProduct pointed to by the foreign key.
func (o *ProductMedium) ProductidProduct(mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Productid),
	}

	queryMods = append(queryMods, mods...)

	return Products(queryMods...)
}

// MediaidVariantMedia retrieves all the variant_medium's VariantMedia with an executor via mediaid column.
func (o *ProductMedium) MediaidVariantMedia(mods ...qm.QueryMod) variantMediumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"variant_media\".\"mediaid\"=?", o.ID),
	)

	return VariantMedia(queryMods...)
}

// LoadProductidProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (productMediumL) LoadProductidProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductMedium interface{}, mods queries.Applicator) error {
	var slice []*ProductMedium
	var object *ProductMedium

	if singular {
		var ok bool
		object, ok = maybeProductMedium.(*ProductMedium)
		if !ok {
			object = new(ProductMedium)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductMedium))
			}
		}
	} else {
		s, ok := maybeProductMedium.(*[]*ProductMedium)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductMedium))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productMediumR{}
		}
		if !queries.IsNil(object.Productid) {
			args = append(args, object.Productid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productMediumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Productid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Productid) {
				args = append(args, obj.Productid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`products`),
		qm.WhereIn(`products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Product")
	}

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Product")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for products")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductidProduct = foreign
		if foreign.R == nil {
			foreign.R = &productR{}
		}
		foreign.R.ProductidProductMedia = append(foreign.R.ProductidProductMedia, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Productid, foreign.ID) {
				local.R.ProductidProduct = foreign
				if foreign.R == nil {
					foreign.R = &productR{}
				}
				foreign.R.ProductidProductMedia = append(foreign.R.ProductidProductMedia, local)
				break
			}
		}
	}

	return nil
}

// LoadMediaidVariantMedia allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (productMediumL) LoadMediaidVariantMedia(ctx context.Context, e boil.ContextExecutor, singular bool, maybeProductMedium interface{}, mods queries.Applicator) error {
	var slice []*ProductMedium
	var object *ProductMedium

	if singular {
		var ok bool
		object, ok = maybeProductMedium.(*ProductMedium)
		if !ok {
			object = new(ProductMedium)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeProductMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeProductMedium))
			}
		}
	} else {
		s, ok := maybeProductMedium.(*[]*ProductMedium)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeProductMedium)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeProductMedium))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &productMediumR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &productMediumR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`variant_media`),
		qm.WhereIn(`variant_media.mediaid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load variant_media")
	}

	var resultSlice []*VariantMedium
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice variant_media")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on variant_media")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for variant_media")
	}

	if len(variantMediumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MediaidVariantMedia = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &variantMediumR{}
			}
			foreign.R.MediaidProductMedium = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Mediaid) {
				local.R.MediaidVariantMedia = append(local.R.MediaidVariantMedia, foreign)
				if foreign.R == nil {
					foreign.R = &variantMediumR{}
				}
				foreign.R.MediaidProductMedium = local
				break
			}
		}
	}

	return nil
}

// SetProductidProduct of the productMedium to the related item.
// Sets o.R.ProductidProduct to related.
// Adds o to related.R.ProductidProductMedia.
func (o *ProductMedium) SetProductidProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Product) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"product_media\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productid"}),
		strmangle.WhereClause("\"", "\"", 2, productMediumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Productid, related.ID)
	if o.R == nil {
		o.R = &productMediumR{
			ProductidProduct: related,
		}
	} else {
		o.R.ProductidProduct = related
	}

	if related.R == nil {
		related.R = &productR{
			ProductidProductMedia: ProductMediumSlice{o},
		}
	} else {
		related.R.ProductidProductMedia = append(related.R.ProductidProductMedia, o)
	}

	return nil
}

// RemoveProductidProduct relationship.
// Sets o.R.ProductidProduct to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ProductMedium) RemoveProductidProduct(ctx context.Context, exec boil.ContextExecutor, related *Product) error {
	var err error

	queries.SetScanner(&o.Productid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("productid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductidProduct = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductidProductMedia {
		if queries.Equal(o.Productid, ri.Productid) {
			continue
		}

		ln := len(related.R.ProductidProductMedia)
		if ln > 1 && i < ln-1 {
			related.R.ProductidProductMedia[i] = related.R.ProductidProductMedia[ln-1]
		}
		related.R.ProductidProductMedia = related.R.ProductidProductMedia[:ln-1]
		break
	}
	return nil
}

// AddMediaidVariantMedia adds the given related objects to the existing relationships
// of the product_medium, optionally inserting them as new records.
// Appends related to o.R.MediaidVariantMedia.
// Sets related.R.MediaidProductMedium appropriately.
func (o *ProductMedium) AddMediaidVariantMedia(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VariantMedium) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Mediaid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"variant_media\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"mediaid"}),
				strmangle.WhereClause("\"", "\"", 2, variantMediumPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Mediaid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &productMediumR{
			MediaidVariantMedia: related,
		}
	} else {
		o.R.MediaidVariantMedia = append(o.R.MediaidVariantMedia, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &variantMediumR{
				MediaidProductMedium: o,
			}
		} else {
			rel.R.MediaidProductMedium = o
		}
	}
	return nil
}

// SetMediaidVariantMedia removes all previously related items of the
// product_medium replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MediaidProductMedium's MediaidVariantMedia accordingly.
// Replaces o.R.MediaidVariantMedia with related.
// Sets related.R.MediaidProductMedium's MediaidVariantMedia accordingly.
func (o *ProductMedium) SetMediaidVariantMedia(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VariantMedium) error {
	query := "update \"variant_media\" set \"mediaid\" = null where \"mediaid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MediaidVariantMedia {
			queries.SetScanner(&rel.Mediaid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MediaidProductMedium = nil
		}
		o.R.MediaidVariantMedia = nil
	}

	return o.AddMediaidVariantMedia(ctx, exec, insert, related...)
}

// RemoveMediaidVariantMedia relationships from objects passed in.
// Removes related items from R.MediaidVariantMedia (uses pointer comparison, removal does not keep order)
// Sets related.R.MediaidProductMedium.
func (o *ProductMedium) RemoveMediaidVariantMedia(ctx context.Context, exec boil.ContextExecutor, related ...*VariantMedium) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Mediaid, nil)
		if rel.R != nil {
			rel.R.MediaidProductMedium = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("mediaid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MediaidVariantMedia {
			if rel != ri {
				continue
			}

			ln := len(o.R.MediaidVariantMedia)
			if ln > 1 && i < ln-1 {
				o.R.MediaidVariantMedia[i] = o.R.MediaidVariantMedia[ln-1]
			}
			o.R.MediaidVariantMedia = o.R.MediaidVariantMedia[:ln-1]
			break
		}
	}

	return nil
}

// ProductMedia retrieves all the records using an executor.
func ProductMedia(mods ...qm.QueryMod) productMediumQuery {
	mods = append(mods, qm.From("\"product_media\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"product_media\".*"})
	}

	return productMediumQuery{q}
}

// FindProductMedium retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProductMedium(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ProductMedium, error) {
	productMediumObj := &ProductMedium{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"product_media\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, productMediumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from product_media")
	}

	if err = productMediumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return productMediumObj, err
	}

	return productMediumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProductMedium) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_media provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productMediumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	productMediumInsertCacheMut.RLock()
	cache, cached := productMediumInsertCache[key]
	productMediumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			productMediumAllColumns,
			productMediumColumnsWithDefault,
			productMediumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(productMediumType, productMediumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(productMediumType, productMediumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"product_media\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"product_media\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into product_media")
	}

	if !cached {
		productMediumInsertCacheMut.Lock()
		productMediumInsertCache[key] = cache
		productMediumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProductMedium.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProductMedium) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	productMediumUpdateCacheMut.RLock()
	cache, cached := productMediumUpdateCache[key]
	productMediumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			productMediumAllColumns,
			productMediumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update product_media, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"product_media\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, productMediumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(productMediumType, productMediumMapping, append(wl, productMediumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update product_media row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for product_media")
	}

	if !cached {
		productMediumUpdateCacheMut.Lock()
		productMediumUpdateCache[key] = cache
		productMediumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q productMediumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for product_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for product_media")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProductMediumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"product_media\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, productMediumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in productMedium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all productMedium")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProductMedium) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no product_media provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(productMediumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	productMediumUpsertCacheMut.RLock()
	cache, cached := productMediumUpsertCache[key]
	productMediumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			productMediumAllColumns,
			productMediumColumnsWithDefault,
			productMediumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			productMediumAllColumns,
			productMediumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert product_media, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(productMediumPrimaryKeyColumns))
			copy(conflict, productMediumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"product_media\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(productMediumType, productMediumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(productMediumType, productMediumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert product_media")
	}

	if !cached {
		productMediumUpsertCacheMut.Lock()
		productMediumUpsertCache[key] = cache
		productMediumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProductMedium record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProductMedium) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ProductMedium provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), productMediumPrimaryKeyMapping)
	sql := "DELETE FROM \"product_media\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from product_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for product_media")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q productMediumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no productMediumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from product_media")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_media")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProductMediumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(productMediumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"product_media\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productMediumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from productMedium slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for product_media")
	}

	if len(productMediumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProductMedium) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProductMedium(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProductMediumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProductMediumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), productMediumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"product_media\".* FROM \"product_media\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, productMediumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ProductMediumSlice")
	}

	*o = slice

	return nil
}

// ProductMediumExists checks if the ProductMedium row exists.
func ProductMediumExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"product_media\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if product_media exists")
	}

	return exists, nil
}

// Exists checks if the ProductMedium row exists.
func (o *ProductMedium) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProductMediumExists(ctx, exec, o.ID)
}
