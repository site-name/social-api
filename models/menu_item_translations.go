// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MenuItemTranslation is an object representing the database table.
type MenuItemTranslation struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	LanguageCode null.String `boil:"language_code" json:"language_code,omitempty" toml:"language_code" yaml:"language_code,omitempty"`
	MenuItemID   null.String `boil:"menu_item_id" json:"menu_item_id,omitempty" toml:"menu_item_id" yaml:"menu_item_id,omitempty"`
	Name         null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *menuItemTranslationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuItemTranslationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuItemTranslationColumns = struct {
	ID           string
	LanguageCode string
	MenuItemID   string
	Name         string
}{
	ID:           "id",
	LanguageCode: "language_code",
	MenuItemID:   "menu_item_id",
	Name:         "name",
}

var MenuItemTranslationTableColumns = struct {
	ID           string
	LanguageCode string
	MenuItemID   string
	Name         string
}{
	ID:           "menu_item_translations.id",
	LanguageCode: "menu_item_translations.language_code",
	MenuItemID:   "menu_item_translations.menu_item_id",
	Name:         "menu_item_translations.name",
}

// Generated where

var MenuItemTranslationWhere = struct {
	ID           whereHelperstring
	LanguageCode whereHelpernull_String
	MenuItemID   whereHelpernull_String
	Name         whereHelpernull_String
}{
	ID:           whereHelperstring{field: "\"menu_item_translations\".\"id\""},
	LanguageCode: whereHelpernull_String{field: "\"menu_item_translations\".\"language_code\""},
	MenuItemID:   whereHelpernull_String{field: "\"menu_item_translations\".\"menu_item_id\""},
	Name:         whereHelpernull_String{field: "\"menu_item_translations\".\"name\""},
}

// MenuItemTranslationRels is where relationship names are stored.
var MenuItemTranslationRels = struct {
	MenuItem string
}{
	MenuItem: "MenuItem",
}

// menuItemTranslationR is where relationships are stored.
type menuItemTranslationR struct {
	MenuItem *MenuItem `boil:"MenuItem" json:"MenuItem" toml:"MenuItem" yaml:"MenuItem"`
}

// NewStruct creates a new relationship struct
func (*menuItemTranslationR) NewStruct() *menuItemTranslationR {
	return &menuItemTranslationR{}
}

func (r *menuItemTranslationR) GetMenuItem() *MenuItem {
	if r == nil {
		return nil
	}
	return r.MenuItem
}

// menuItemTranslationL is where Load methods for each relationship are stored.
type menuItemTranslationL struct{}

var (
	menuItemTranslationAllColumns            = []string{"id", "language_code", "menu_item_id", "name"}
	menuItemTranslationColumnsWithoutDefault = []string{"id"}
	menuItemTranslationColumnsWithDefault    = []string{"language_code", "menu_item_id", "name"}
	menuItemTranslationPrimaryKeyColumns     = []string{"id"}
	menuItemTranslationGeneratedColumns      = []string{}
)

type (
	// MenuItemTranslationSlice is an alias for a slice of pointers to MenuItemTranslation.
	// This should almost always be used instead of []MenuItemTranslation.
	MenuItemTranslationSlice []*MenuItemTranslation
	// MenuItemTranslationHook is the signature for custom MenuItemTranslation hook methods
	MenuItemTranslationHook func(context.Context, boil.ContextExecutor, *MenuItemTranslation) error

	menuItemTranslationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuItemTranslationType                 = reflect.TypeOf(&MenuItemTranslation{})
	menuItemTranslationMapping              = queries.MakeStructMapping(menuItemTranslationType)
	menuItemTranslationPrimaryKeyMapping, _ = queries.BindMapping(menuItemTranslationType, menuItemTranslationMapping, menuItemTranslationPrimaryKeyColumns)
	menuItemTranslationInsertCacheMut       sync.RWMutex
	menuItemTranslationInsertCache          = make(map[string]insertCache)
	menuItemTranslationUpdateCacheMut       sync.RWMutex
	menuItemTranslationUpdateCache          = make(map[string]updateCache)
	menuItemTranslationUpsertCacheMut       sync.RWMutex
	menuItemTranslationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var menuItemTranslationAfterSelectHooks []MenuItemTranslationHook

var menuItemTranslationBeforeInsertHooks []MenuItemTranslationHook
var menuItemTranslationAfterInsertHooks []MenuItemTranslationHook

var menuItemTranslationBeforeUpdateHooks []MenuItemTranslationHook
var menuItemTranslationAfterUpdateHooks []MenuItemTranslationHook

var menuItemTranslationBeforeDeleteHooks []MenuItemTranslationHook
var menuItemTranslationAfterDeleteHooks []MenuItemTranslationHook

var menuItemTranslationBeforeUpsertHooks []MenuItemTranslationHook
var menuItemTranslationAfterUpsertHooks []MenuItemTranslationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MenuItemTranslation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemTranslationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MenuItemTranslation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemTranslationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MenuItemTranslation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemTranslationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MenuItemTranslation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemTranslationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MenuItemTranslation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemTranslationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MenuItemTranslation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemTranslationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MenuItemTranslation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemTranslationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MenuItemTranslation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemTranslationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MenuItemTranslation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range menuItemTranslationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMenuItemTranslationHook registers your hook function for all future operations.
func AddMenuItemTranslationHook(hookPoint boil.HookPoint, menuItemTranslationHook MenuItemTranslationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		menuItemTranslationAfterSelectHooks = append(menuItemTranslationAfterSelectHooks, menuItemTranslationHook)
	case boil.BeforeInsertHook:
		menuItemTranslationBeforeInsertHooks = append(menuItemTranslationBeforeInsertHooks, menuItemTranslationHook)
	case boil.AfterInsertHook:
		menuItemTranslationAfterInsertHooks = append(menuItemTranslationAfterInsertHooks, menuItemTranslationHook)
	case boil.BeforeUpdateHook:
		menuItemTranslationBeforeUpdateHooks = append(menuItemTranslationBeforeUpdateHooks, menuItemTranslationHook)
	case boil.AfterUpdateHook:
		menuItemTranslationAfterUpdateHooks = append(menuItemTranslationAfterUpdateHooks, menuItemTranslationHook)
	case boil.BeforeDeleteHook:
		menuItemTranslationBeforeDeleteHooks = append(menuItemTranslationBeforeDeleteHooks, menuItemTranslationHook)
	case boil.AfterDeleteHook:
		menuItemTranslationAfterDeleteHooks = append(menuItemTranslationAfterDeleteHooks, menuItemTranslationHook)
	case boil.BeforeUpsertHook:
		menuItemTranslationBeforeUpsertHooks = append(menuItemTranslationBeforeUpsertHooks, menuItemTranslationHook)
	case boil.AfterUpsertHook:
		menuItemTranslationAfterUpsertHooks = append(menuItemTranslationAfterUpsertHooks, menuItemTranslationHook)
	}
}

// One returns a single menuItemTranslation record from the query.
func (q menuItemTranslationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MenuItemTranslation, error) {
	o := &MenuItemTranslation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for menu_item_translations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MenuItemTranslation records from the query.
func (q menuItemTranslationQuery) All(ctx context.Context, exec boil.ContextExecutor) (MenuItemTranslationSlice, error) {
	var o []*MenuItemTranslation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MenuItemTranslation slice")
	}

	if len(menuItemTranslationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MenuItemTranslation records in the query.
func (q menuItemTranslationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count menu_item_translations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q menuItemTranslationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if menu_item_translations exists")
	}

	return count > 0, nil
}

// MenuItem pointed to by the foreign key.
func (o *MenuItemTranslation) MenuItem(mods ...qm.QueryMod) menuItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MenuItemID),
	}

	queryMods = append(queryMods, mods...)

	return MenuItems(queryMods...)
}

// LoadMenuItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuItemTranslationL) LoadMenuItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMenuItemTranslation interface{}, mods queries.Applicator) error {
	var slice []*MenuItemTranslation
	var object *MenuItemTranslation

	if singular {
		var ok bool
		object, ok = maybeMenuItemTranslation.(*MenuItemTranslation)
		if !ok {
			object = new(MenuItemTranslation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenuItemTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenuItemTranslation))
			}
		}
	} else {
		s, ok := maybeMenuItemTranslation.(*[]*MenuItemTranslation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenuItemTranslation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenuItemTranslation))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &menuItemTranslationR{}
		}
		if !queries.IsNil(object.MenuItemID) {
			args = append(args, object.MenuItemID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuItemTranslationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.MenuItemID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.MenuItemID) {
				args = append(args, obj.MenuItemID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`menu_items`),
		qm.WhereIn(`menu_items.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MenuItem")
	}

	var resultSlice []*MenuItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MenuItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menu_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menu_items")
	}

	if len(menuItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MenuItem = foreign
		if foreign.R == nil {
			foreign.R = &menuItemR{}
		}
		foreign.R.MenuItemTranslations = append(foreign.R.MenuItemTranslations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MenuItemID, foreign.ID) {
				local.R.MenuItem = foreign
				if foreign.R == nil {
					foreign.R = &menuItemR{}
				}
				foreign.R.MenuItemTranslations = append(foreign.R.MenuItemTranslations, local)
				break
			}
		}
	}

	return nil
}

// SetMenuItem of the menuItemTranslation to the related item.
// Sets o.R.MenuItem to related.
// Adds o to related.R.MenuItemTranslations.
func (o *MenuItemTranslation) SetMenuItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MenuItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menu_item_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"menu_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuItemTranslationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MenuItemID, related.ID)
	if o.R == nil {
		o.R = &menuItemTranslationR{
			MenuItem: related,
		}
	} else {
		o.R.MenuItem = related
	}

	if related.R == nil {
		related.R = &menuItemR{
			MenuItemTranslations: MenuItemTranslationSlice{o},
		}
	} else {
		related.R.MenuItemTranslations = append(related.R.MenuItemTranslations, o)
	}

	return nil
}

// RemoveMenuItem relationship.
// Sets o.R.MenuItem to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MenuItemTranslation) RemoveMenuItem(ctx context.Context, exec boil.ContextExecutor, related *MenuItem) error {
	var err error

	queries.SetScanner(&o.MenuItemID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("menu_item_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MenuItem = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MenuItemTranslations {
		if queries.Equal(o.MenuItemID, ri.MenuItemID) {
			continue
		}

		ln := len(related.R.MenuItemTranslations)
		if ln > 1 && i < ln-1 {
			related.R.MenuItemTranslations[i] = related.R.MenuItemTranslations[ln-1]
		}
		related.R.MenuItemTranslations = related.R.MenuItemTranslations[:ln-1]
		break
	}
	return nil
}

// MenuItemTranslations retrieves all the records using an executor.
func MenuItemTranslations(mods ...qm.QueryMod) menuItemTranslationQuery {
	mods = append(mods, qm.From("\"menu_item_translations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"menu_item_translations\".*"})
	}

	return menuItemTranslationQuery{q}
}

// FindMenuItemTranslation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenuItemTranslation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MenuItemTranslation, error) {
	menuItemTranslationObj := &MenuItemTranslation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"menu_item_translations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, menuItemTranslationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from menu_item_translations")
	}

	if err = menuItemTranslationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return menuItemTranslationObj, err
	}

	return menuItemTranslationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MenuItemTranslation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menu_item_translations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuItemTranslationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuItemTranslationInsertCacheMut.RLock()
	cache, cached := menuItemTranslationInsertCache[key]
	menuItemTranslationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuItemTranslationAllColumns,
			menuItemTranslationColumnsWithDefault,
			menuItemTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuItemTranslationType, menuItemTranslationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuItemTranslationType, menuItemTranslationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"menu_item_translations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"menu_item_translations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into menu_item_translations")
	}

	if !cached {
		menuItemTranslationInsertCacheMut.Lock()
		menuItemTranslationInsertCache[key] = cache
		menuItemTranslationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MenuItemTranslation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MenuItemTranslation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	menuItemTranslationUpdateCacheMut.RLock()
	cache, cached := menuItemTranslationUpdateCache[key]
	menuItemTranslationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuItemTranslationAllColumns,
			menuItemTranslationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update menu_item_translations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"menu_item_translations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, menuItemTranslationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuItemTranslationType, menuItemTranslationMapping, append(wl, menuItemTranslationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update menu_item_translations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for menu_item_translations")
	}

	if !cached {
		menuItemTranslationUpdateCacheMut.Lock()
		menuItemTranslationUpdateCache[key] = cache
		menuItemTranslationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q menuItemTranslationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for menu_item_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for menu_item_translations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuItemTranslationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"menu_item_translations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, menuItemTranslationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in menuItemTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all menuItemTranslation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MenuItemTranslation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no menu_item_translations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuItemTranslationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuItemTranslationUpsertCacheMut.RLock()
	cache, cached := menuItemTranslationUpsertCache[key]
	menuItemTranslationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			menuItemTranslationAllColumns,
			menuItemTranslationColumnsWithDefault,
			menuItemTranslationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuItemTranslationAllColumns,
			menuItemTranslationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert menu_item_translations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(menuItemTranslationPrimaryKeyColumns))
			copy(conflict, menuItemTranslationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"menu_item_translations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(menuItemTranslationType, menuItemTranslationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuItemTranslationType, menuItemTranslationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert menu_item_translations")
	}

	if !cached {
		menuItemTranslationUpsertCacheMut.Lock()
		menuItemTranslationUpsertCache[key] = cache
		menuItemTranslationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MenuItemTranslation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MenuItemTranslation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MenuItemTranslation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuItemTranslationPrimaryKeyMapping)
	sql := "DELETE FROM \"menu_item_translations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from menu_item_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for menu_item_translations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q menuItemTranslationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no menuItemTranslationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menu_item_translations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menu_item_translations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuItemTranslationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(menuItemTranslationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"menu_item_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemTranslationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from menuItemTranslation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for menu_item_translations")
	}

	if len(menuItemTranslationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MenuItemTranslation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMenuItemTranslation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuItemTranslationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuItemTranslationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuItemTranslationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"menu_item_translations\".* FROM \"menu_item_translations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuItemTranslationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MenuItemTranslationSlice")
	}

	*o = slice

	return nil
}

// MenuItemTranslationExists checks if the MenuItemTranslation row exists.
func MenuItemTranslationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"menu_item_translations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if menu_item_translations exists")
	}

	return exists, nil
}

// Exists checks if the MenuItemTranslation row exists.
func (o *MenuItemTranslation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MenuItemTranslationExists(ctx, exec, o.ID)
}
