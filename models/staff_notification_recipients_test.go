// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStaffNotificationRecipients(t *testing.T) {
	t.Parallel()

	query := StaffNotificationRecipients()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStaffNotificationRecipientsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaffNotificationRecipients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffNotificationRecipientsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := StaffNotificationRecipients().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaffNotificationRecipients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffNotificationRecipientsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaffNotificationRecipientSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := StaffNotificationRecipients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStaffNotificationRecipientsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StaffNotificationRecipientExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if StaffNotificationRecipient exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StaffNotificationRecipientExists to return true, but got false.")
	}
}

func testStaffNotificationRecipientsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	staffNotificationRecipientFound, err := FindStaffNotificationRecipient(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if staffNotificationRecipientFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStaffNotificationRecipientsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = StaffNotificationRecipients().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStaffNotificationRecipientsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := StaffNotificationRecipients().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStaffNotificationRecipientsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	staffNotificationRecipientOne := &StaffNotificationRecipient{}
	staffNotificationRecipientTwo := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, staffNotificationRecipientOne, staffNotificationRecipientDBTypes, false, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}
	if err = randomize.Struct(seed, staffNotificationRecipientTwo, staffNotificationRecipientDBTypes, false, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staffNotificationRecipientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staffNotificationRecipientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StaffNotificationRecipients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStaffNotificationRecipientsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	staffNotificationRecipientOne := &StaffNotificationRecipient{}
	staffNotificationRecipientTwo := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, staffNotificationRecipientOne, staffNotificationRecipientDBTypes, false, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}
	if err = randomize.Struct(seed, staffNotificationRecipientTwo, staffNotificationRecipientDBTypes, false, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = staffNotificationRecipientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = staffNotificationRecipientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaffNotificationRecipients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func staffNotificationRecipientBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *StaffNotificationRecipient) error {
	*o = StaffNotificationRecipient{}
	return nil
}

func staffNotificationRecipientAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *StaffNotificationRecipient) error {
	*o = StaffNotificationRecipient{}
	return nil
}

func staffNotificationRecipientAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *StaffNotificationRecipient) error {
	*o = StaffNotificationRecipient{}
	return nil
}

func staffNotificationRecipientBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StaffNotificationRecipient) error {
	*o = StaffNotificationRecipient{}
	return nil
}

func staffNotificationRecipientAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *StaffNotificationRecipient) error {
	*o = StaffNotificationRecipient{}
	return nil
}

func staffNotificationRecipientBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StaffNotificationRecipient) error {
	*o = StaffNotificationRecipient{}
	return nil
}

func staffNotificationRecipientAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *StaffNotificationRecipient) error {
	*o = StaffNotificationRecipient{}
	return nil
}

func staffNotificationRecipientBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StaffNotificationRecipient) error {
	*o = StaffNotificationRecipient{}
	return nil
}

func staffNotificationRecipientAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *StaffNotificationRecipient) error {
	*o = StaffNotificationRecipient{}
	return nil
}

func testStaffNotificationRecipientsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &StaffNotificationRecipient{}
	o := &StaffNotificationRecipient{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient object: %s", err)
	}

	AddStaffNotificationRecipientHook(boil.BeforeInsertHook, staffNotificationRecipientBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	staffNotificationRecipientBeforeInsertHooks = []StaffNotificationRecipientHook{}

	AddStaffNotificationRecipientHook(boil.AfterInsertHook, staffNotificationRecipientAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	staffNotificationRecipientAfterInsertHooks = []StaffNotificationRecipientHook{}

	AddStaffNotificationRecipientHook(boil.AfterSelectHook, staffNotificationRecipientAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	staffNotificationRecipientAfterSelectHooks = []StaffNotificationRecipientHook{}

	AddStaffNotificationRecipientHook(boil.BeforeUpdateHook, staffNotificationRecipientBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	staffNotificationRecipientBeforeUpdateHooks = []StaffNotificationRecipientHook{}

	AddStaffNotificationRecipientHook(boil.AfterUpdateHook, staffNotificationRecipientAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	staffNotificationRecipientAfterUpdateHooks = []StaffNotificationRecipientHook{}

	AddStaffNotificationRecipientHook(boil.BeforeDeleteHook, staffNotificationRecipientBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	staffNotificationRecipientBeforeDeleteHooks = []StaffNotificationRecipientHook{}

	AddStaffNotificationRecipientHook(boil.AfterDeleteHook, staffNotificationRecipientAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	staffNotificationRecipientAfterDeleteHooks = []StaffNotificationRecipientHook{}

	AddStaffNotificationRecipientHook(boil.BeforeUpsertHook, staffNotificationRecipientBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	staffNotificationRecipientBeforeUpsertHooks = []StaffNotificationRecipientHook{}

	AddStaffNotificationRecipientHook(boil.AfterUpsertHook, staffNotificationRecipientAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	staffNotificationRecipientAfterUpsertHooks = []StaffNotificationRecipientHook{}
}

func testStaffNotificationRecipientsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaffNotificationRecipients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaffNotificationRecipientsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(staffNotificationRecipientColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := StaffNotificationRecipients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStaffNotificationRecipientToOneUserUsingUseridUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local StaffNotificationRecipient
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Userid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UseridUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := StaffNotificationRecipientSlice{&local}
	if err = local.L.LoadUseridUser(ctx, tx, false, (*[]*StaffNotificationRecipient)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UseridUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UseridUser = nil
	if err = local.L.LoadUseridUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UseridUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testStaffNotificationRecipientToOneSetOpUserUsingUseridUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaffNotificationRecipient
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffNotificationRecipientDBTypes, false, strmangle.SetComplement(staffNotificationRecipientPrimaryKeyColumns, staffNotificationRecipientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUseridUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UseridUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UseridStaffNotificationRecipients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Userid, x.ID) {
			t.Error("foreign key was wrong value", a.Userid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Userid))
		reflect.Indirect(reflect.ValueOf(&a.Userid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Userid, x.ID) {
			t.Error("foreign key was wrong value", a.Userid, x.ID)
		}
	}
}

func testStaffNotificationRecipientToOneRemoveOpUserUsingUseridUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a StaffNotificationRecipient
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, staffNotificationRecipientDBTypes, false, strmangle.SetComplement(staffNotificationRecipientPrimaryKeyColumns, staffNotificationRecipientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUseridUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUseridUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.UseridUser().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.UseridUser != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Userid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.UseridStaffNotificationRecipients) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testStaffNotificationRecipientsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaffNotificationRecipientsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StaffNotificationRecipientSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStaffNotificationRecipientsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := StaffNotificationRecipients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	staffNotificationRecipientDBTypes = map[string]string{`ID`: `character varying`, `Userid`: `character varying`, `Staffemail`: `character varying`, `Active`: `boolean`}
	_                                 = bytes.MinRead
)

func testStaffNotificationRecipientsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(staffNotificationRecipientPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(staffNotificationRecipientAllColumns) == len(staffNotificationRecipientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaffNotificationRecipients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStaffNotificationRecipientsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(staffNotificationRecipientAllColumns) == len(staffNotificationRecipientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &StaffNotificationRecipient{}
	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := StaffNotificationRecipients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, staffNotificationRecipientDBTypes, true, staffNotificationRecipientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(staffNotificationRecipientAllColumns, staffNotificationRecipientPrimaryKeyColumns) {
		fields = staffNotificationRecipientAllColumns
	} else {
		fields = strmangle.SetComplement(
			staffNotificationRecipientAllColumns,
			staffNotificationRecipientPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StaffNotificationRecipientSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testStaffNotificationRecipientsUpsert(t *testing.T) {
	t.Parallel()

	if len(staffNotificationRecipientAllColumns) == len(staffNotificationRecipientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := StaffNotificationRecipient{}
	if err = randomize.Struct(seed, &o, staffNotificationRecipientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StaffNotificationRecipient: %s", err)
	}

	count, err := StaffNotificationRecipients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, staffNotificationRecipientDBTypes, false, staffNotificationRecipientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize StaffNotificationRecipient struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert StaffNotificationRecipient: %s", err)
	}

	count, err = StaffNotificationRecipients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
