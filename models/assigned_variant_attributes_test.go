// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAssignedVariantAttributes(t *testing.T) {
	t.Parallel()

	query := AssignedVariantAttributes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAssignedVariantAttributesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedVariantAttributesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AssignedVariantAttributes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedVariantAttributesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedVariantAttributeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAssignedVariantAttributesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AssignedVariantAttributeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AssignedVariantAttribute exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AssignedVariantAttributeExists to return true, but got false.")
	}
}

func testAssignedVariantAttributesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	assignedVariantAttributeFound, err := FindAssignedVariantAttribute(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if assignedVariantAttributeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAssignedVariantAttributesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AssignedVariantAttributes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAssignedVariantAttributesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AssignedVariantAttributes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAssignedVariantAttributesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	assignedVariantAttributeOne := &AssignedVariantAttribute{}
	assignedVariantAttributeTwo := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, assignedVariantAttributeOne, assignedVariantAttributeDBTypes, false, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedVariantAttributeTwo, assignedVariantAttributeDBTypes, false, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignedVariantAttributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedVariantAttributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedVariantAttributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAssignedVariantAttributesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	assignedVariantAttributeOne := &AssignedVariantAttribute{}
	assignedVariantAttributeTwo := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, assignedVariantAttributeOne, assignedVariantAttributeDBTypes, false, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, assignedVariantAttributeTwo, assignedVariantAttributeDBTypes, false, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = assignedVariantAttributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = assignedVariantAttributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func assignedVariantAttributeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttribute) error {
	*o = AssignedVariantAttribute{}
	return nil
}

func assignedVariantAttributeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttribute) error {
	*o = AssignedVariantAttribute{}
	return nil
}

func assignedVariantAttributeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttribute) error {
	*o = AssignedVariantAttribute{}
	return nil
}

func assignedVariantAttributeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttribute) error {
	*o = AssignedVariantAttribute{}
	return nil
}

func assignedVariantAttributeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttribute) error {
	*o = AssignedVariantAttribute{}
	return nil
}

func assignedVariantAttributeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttribute) error {
	*o = AssignedVariantAttribute{}
	return nil
}

func assignedVariantAttributeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttribute) error {
	*o = AssignedVariantAttribute{}
	return nil
}

func assignedVariantAttributeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttribute) error {
	*o = AssignedVariantAttribute{}
	return nil
}

func assignedVariantAttributeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AssignedVariantAttribute) error {
	*o = AssignedVariantAttribute{}
	return nil
}

func testAssignedVariantAttributesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AssignedVariantAttribute{}
	o := &AssignedVariantAttribute{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute object: %s", err)
	}

	AddAssignedVariantAttributeHook(boil.BeforeInsertHook, assignedVariantAttributeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeBeforeInsertHooks = []AssignedVariantAttributeHook{}

	AddAssignedVariantAttributeHook(boil.AfterInsertHook, assignedVariantAttributeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeAfterInsertHooks = []AssignedVariantAttributeHook{}

	AddAssignedVariantAttributeHook(boil.AfterSelectHook, assignedVariantAttributeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeAfterSelectHooks = []AssignedVariantAttributeHook{}

	AddAssignedVariantAttributeHook(boil.BeforeUpdateHook, assignedVariantAttributeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeBeforeUpdateHooks = []AssignedVariantAttributeHook{}

	AddAssignedVariantAttributeHook(boil.AfterUpdateHook, assignedVariantAttributeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeAfterUpdateHooks = []AssignedVariantAttributeHook{}

	AddAssignedVariantAttributeHook(boil.BeforeDeleteHook, assignedVariantAttributeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeBeforeDeleteHooks = []AssignedVariantAttributeHook{}

	AddAssignedVariantAttributeHook(boil.AfterDeleteHook, assignedVariantAttributeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeAfterDeleteHooks = []AssignedVariantAttributeHook{}

	AddAssignedVariantAttributeHook(boil.BeforeUpsertHook, assignedVariantAttributeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeBeforeUpsertHooks = []AssignedVariantAttributeHook{}

	AddAssignedVariantAttributeHook(boil.AfterUpsertHook, assignedVariantAttributeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	assignedVariantAttributeAfterUpsertHooks = []AssignedVariantAttributeHook{}
}

func testAssignedVariantAttributesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedVariantAttributesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(assignedVariantAttributeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAssignedVariantAttributeToManyAssignmentAssignedVariantAttributeValues(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttribute
	var b, c AssignedVariantAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedVariantAttributeValueDBTypes, false, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedVariantAttributeValueDBTypes, false, assignedVariantAttributeValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AssignmentID, a.ID)
	queries.Assign(&c.AssignmentID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AssignmentAssignedVariantAttributeValues().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AssignmentID, b.AssignmentID) {
			bFound = true
		}
		if queries.Equal(v.AssignmentID, c.AssignmentID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AssignedVariantAttributeSlice{&a}
	if err = a.L.LoadAssignmentAssignedVariantAttributeValues(ctx, tx, false, (*[]*AssignedVariantAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignmentAssignedVariantAttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AssignmentAssignedVariantAttributeValues = nil
	if err = a.L.LoadAssignmentAssignedVariantAttributeValues(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignmentAssignedVariantAttributeValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAssignedVariantAttributeToManyAddOpAssignmentAssignedVariantAttributeValues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttribute
	var b, c, d, e AssignedVariantAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedVariantAttributeValue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedVariantAttributeValueDBTypes, false, strmangle.SetComplement(assignedVariantAttributeValuePrimaryKeyColumns, assignedVariantAttributeValueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedVariantAttributeValue{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssignmentAssignedVariantAttributeValues(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.AssignmentID) {
			t.Error("foreign key was wrong value", a.ID, first.AssignmentID)
		}
		if !queries.Equal(a.ID, second.AssignmentID) {
			t.Error("foreign key was wrong value", a.ID, second.AssignmentID)
		}

		if first.R.Assignment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Assignment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AssignmentAssignedVariantAttributeValues[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AssignmentAssignedVariantAttributeValues[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AssignmentAssignedVariantAttributeValues().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAssignedVariantAttributeToManySetOpAssignmentAssignedVariantAttributeValues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttribute
	var b, c, d, e AssignedVariantAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedVariantAttributeValue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedVariantAttributeValueDBTypes, false, strmangle.SetComplement(assignedVariantAttributeValuePrimaryKeyColumns, assignedVariantAttributeValueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAssignmentAssignedVariantAttributeValues(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AssignmentAssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAssignmentAssignedVariantAttributeValues(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AssignmentAssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AssignmentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AssignmentID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.AssignmentID) {
		t.Error("foreign key was wrong value", a.ID, d.AssignmentID)
	}
	if !queries.Equal(a.ID, e.AssignmentID) {
		t.Error("foreign key was wrong value", a.ID, e.AssignmentID)
	}

	if b.R.Assignment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Assignment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Assignment != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Assignment != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AssignmentAssignedVariantAttributeValues[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AssignmentAssignedVariantAttributeValues[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAssignedVariantAttributeToManyRemoveOpAssignmentAssignedVariantAttributeValues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttribute
	var b, c, d, e AssignedVariantAttributeValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedVariantAttributeValue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedVariantAttributeValueDBTypes, false, strmangle.SetComplement(assignedVariantAttributeValuePrimaryKeyColumns, assignedVariantAttributeValueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAssignmentAssignedVariantAttributeValues(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AssignmentAssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAssignmentAssignedVariantAttributeValues(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AssignmentAssignedVariantAttributeValues().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AssignmentID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AssignmentID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Assignment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Assignment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Assignment != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Assignment != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AssignmentAssignedVariantAttributeValues) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AssignmentAssignedVariantAttributeValues[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AssignmentAssignedVariantAttributeValues[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAssignedVariantAttributeToOneAttributeVariantUsingAssignment(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AssignedVariantAttribute
	var foreign AttributeVariant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributeVariantDBTypes, false, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AssignmentID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Assignment().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAttributeVariantHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *AttributeVariant) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AssignedVariantAttributeSlice{&local}
	if err = local.L.LoadAssignment(ctx, tx, false, (*[]*AssignedVariantAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Assignment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Assignment = nil
	if err = local.L.LoadAssignment(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Assignment == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAssignedVariantAttributeToOneProductVariantUsingVariant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AssignedVariantAttribute
	var foreign ProductVariant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.VariantID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductVariantHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AssignedVariantAttributeSlice{&local}
	if err = local.L.LoadVariant(ctx, tx, false, (*[]*AssignedVariantAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Variant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variant = nil
	if err = local.L.LoadVariant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Variant == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAssignedVariantAttributeToOneSetOpAttributeVariantUsingAssignment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttribute
	var b, c AttributeVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AttributeVariant{&b, &c} {
		err = a.SetAssignment(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Assignment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AssignmentAssignedVariantAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AssignmentID, x.ID) {
			t.Error("foreign key was wrong value", a.AssignmentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AssignmentID))
		reflect.Indirect(reflect.ValueOf(&a.AssignmentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AssignmentID, x.ID) {
			t.Error("foreign key was wrong value", a.AssignmentID, x.ID)
		}
	}
}

func testAssignedVariantAttributeToOneRemoveOpAttributeVariantUsingAssignment(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttribute
	var b AttributeVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAssignment(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAssignment(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Assignment().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Assignment != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AssignmentID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AssignmentAssignedVariantAttributes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAssignedVariantAttributeToOneSetOpProductVariantUsingVariant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttribute
	var b, c ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductVariant{&b, &c} {
		err = a.SetVariant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VariantAssignedVariantAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.VariantID, x.ID) {
			t.Error("foreign key was wrong value", a.VariantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariantID))
		reflect.Indirect(reflect.ValueOf(&a.VariantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.VariantID, x.ID) {
			t.Error("foreign key was wrong value", a.VariantID, x.ID)
		}
	}
}

func testAssignedVariantAttributeToOneRemoveOpProductVariantUsingVariant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AssignedVariantAttribute
	var b ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetVariant(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveVariant(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Variant().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Variant != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.VariantID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VariantAssignedVariantAttributes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAssignedVariantAttributesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignedVariantAttributesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AssignedVariantAttributeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAssignedVariantAttributesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AssignedVariantAttributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	assignedVariantAttributeDBTypes = map[string]string{`ID`: `character varying`, `VariantID`: `character varying`, `AssignmentID`: `character varying`}
	_                               = bytes.MinRead
)

func testAssignedVariantAttributesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(assignedVariantAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(assignedVariantAttributeAllColumns) == len(assignedVariantAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAssignedVariantAttributesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(assignedVariantAttributeAllColumns) == len(assignedVariantAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AssignedVariantAttribute{}
	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, assignedVariantAttributeDBTypes, true, assignedVariantAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(assignedVariantAttributeAllColumns, assignedVariantAttributePrimaryKeyColumns) {
		fields = assignedVariantAttributeAllColumns
	} else {
		fields = strmangle.SetComplement(
			assignedVariantAttributeAllColumns,
			assignedVariantAttributePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AssignedVariantAttributeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAssignedVariantAttributesUpsert(t *testing.T) {
	t.Parallel()

	if len(assignedVariantAttributeAllColumns) == len(assignedVariantAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AssignedVariantAttribute{}
	if err = randomize.Struct(seed, &o, assignedVariantAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedVariantAttribute: %s", err)
	}

	count, err := AssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, assignedVariantAttributeDBTypes, false, assignedVariantAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AssignedVariantAttribute struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AssignedVariantAttribute: %s", err)
	}

	count, err = AssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
