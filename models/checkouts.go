// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Checkout is an object representing the database table.
type Checkout struct {
	Token                  string       `boil:"token" json:"token" toml:"token" yaml:"token"`
	Createat               null.Int64   `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Updateat               null.Int64   `boil:"updateat" json:"updateat,omitempty" toml:"updateat" yaml:"updateat,omitempty"`
	Userid                 null.String  `boil:"userid" json:"userid,omitempty" toml:"userid" yaml:"userid,omitempty"`
	Email                  null.String  `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Quantity               null.Int     `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	Channelid              null.String  `boil:"channelid" json:"channelid,omitempty" toml:"channelid" yaml:"channelid,omitempty"`
	Billingaddressid       null.String  `boil:"billingaddressid" json:"billingaddressid,omitempty" toml:"billingaddressid" yaml:"billingaddressid,omitempty"`
	Shippingaddressid      null.String  `boil:"shippingaddressid" json:"shippingaddressid,omitempty" toml:"shippingaddressid" yaml:"shippingaddressid,omitempty"`
	Shippingmethodid       null.String  `boil:"shippingmethodid" json:"shippingmethodid,omitempty" toml:"shippingmethodid" yaml:"shippingmethodid,omitempty"`
	Collectionpointid      null.String  `boil:"collectionpointid" json:"collectionpointid,omitempty" toml:"collectionpointid" yaml:"collectionpointid,omitempty"`
	Note                   null.String  `boil:"note" json:"note,omitempty" toml:"note" yaml:"note,omitempty"`
	Currency               null.String  `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	Country                null.String  `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`
	Discountamount         null.Float64 `boil:"discountamount" json:"discountamount,omitempty" toml:"discountamount" yaml:"discountamount,omitempty"`
	Discountname           null.String  `boil:"discountname" json:"discountname,omitempty" toml:"discountname" yaml:"discountname,omitempty"`
	Translateddiscountname null.String  `boil:"translateddiscountname" json:"translateddiscountname,omitempty" toml:"translateddiscountname" yaml:"translateddiscountname,omitempty"`
	Vouchercode            null.String  `boil:"vouchercode" json:"vouchercode,omitempty" toml:"vouchercode" yaml:"vouchercode,omitempty"`
	Redirecturl            null.String  `boil:"redirecturl" json:"redirecturl,omitempty" toml:"redirecturl" yaml:"redirecturl,omitempty"`
	Trackingcode           null.String  `boil:"trackingcode" json:"trackingcode,omitempty" toml:"trackingcode" yaml:"trackingcode,omitempty"`
	Languagecode           null.String  `boil:"languagecode" json:"languagecode,omitempty" toml:"languagecode" yaml:"languagecode,omitempty"`
	Metadata               null.JSON    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata        null.JSON    `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *checkoutR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checkoutL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CheckoutColumns = struct {
	Token                  string
	Createat               string
	Updateat               string
	Userid                 string
	Email                  string
	Quantity               string
	Channelid              string
	Billingaddressid       string
	Shippingaddressid      string
	Shippingmethodid       string
	Collectionpointid      string
	Note                   string
	Currency               string
	Country                string
	Discountamount         string
	Discountname           string
	Translateddiscountname string
	Vouchercode            string
	Redirecturl            string
	Trackingcode           string
	Languagecode           string
	Metadata               string
	Privatemetadata        string
}{
	Token:                  "token",
	Createat:               "createat",
	Updateat:               "updateat",
	Userid:                 "userid",
	Email:                  "email",
	Quantity:               "quantity",
	Channelid:              "channelid",
	Billingaddressid:       "billingaddressid",
	Shippingaddressid:      "shippingaddressid",
	Shippingmethodid:       "shippingmethodid",
	Collectionpointid:      "collectionpointid",
	Note:                   "note",
	Currency:               "currency",
	Country:                "country",
	Discountamount:         "discountamount",
	Discountname:           "discountname",
	Translateddiscountname: "translateddiscountname",
	Vouchercode:            "vouchercode",
	Redirecturl:            "redirecturl",
	Trackingcode:           "trackingcode",
	Languagecode:           "languagecode",
	Metadata:               "metadata",
	Privatemetadata:        "privatemetadata",
}

var CheckoutTableColumns = struct {
	Token                  string
	Createat               string
	Updateat               string
	Userid                 string
	Email                  string
	Quantity               string
	Channelid              string
	Billingaddressid       string
	Shippingaddressid      string
	Shippingmethodid       string
	Collectionpointid      string
	Note                   string
	Currency               string
	Country                string
	Discountamount         string
	Discountname           string
	Translateddiscountname string
	Vouchercode            string
	Redirecturl            string
	Trackingcode           string
	Languagecode           string
	Metadata               string
	Privatemetadata        string
}{
	Token:                  "checkouts.token",
	Createat:               "checkouts.createat",
	Updateat:               "checkouts.updateat",
	Userid:                 "checkouts.userid",
	Email:                  "checkouts.email",
	Quantity:               "checkouts.quantity",
	Channelid:              "checkouts.channelid",
	Billingaddressid:       "checkouts.billingaddressid",
	Shippingaddressid:      "checkouts.shippingaddressid",
	Shippingmethodid:       "checkouts.shippingmethodid",
	Collectionpointid:      "checkouts.collectionpointid",
	Note:                   "checkouts.note",
	Currency:               "checkouts.currency",
	Country:                "checkouts.country",
	Discountamount:         "checkouts.discountamount",
	Discountname:           "checkouts.discountname",
	Translateddiscountname: "checkouts.translateddiscountname",
	Vouchercode:            "checkouts.vouchercode",
	Redirecturl:            "checkouts.redirecturl",
	Trackingcode:           "checkouts.trackingcode",
	Languagecode:           "checkouts.languagecode",
	Metadata:               "checkouts.metadata",
	Privatemetadata:        "checkouts.privatemetadata",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CheckoutWhere = struct {
	Token                  whereHelperstring
	Createat               whereHelpernull_Int64
	Updateat               whereHelpernull_Int64
	Userid                 whereHelpernull_String
	Email                  whereHelpernull_String
	Quantity               whereHelpernull_Int
	Channelid              whereHelpernull_String
	Billingaddressid       whereHelpernull_String
	Shippingaddressid      whereHelpernull_String
	Shippingmethodid       whereHelpernull_String
	Collectionpointid      whereHelpernull_String
	Note                   whereHelpernull_String
	Currency               whereHelpernull_String
	Country                whereHelpernull_String
	Discountamount         whereHelpernull_Float64
	Discountname           whereHelpernull_String
	Translateddiscountname whereHelpernull_String
	Vouchercode            whereHelpernull_String
	Redirecturl            whereHelpernull_String
	Trackingcode           whereHelpernull_String
	Languagecode           whereHelpernull_String
	Metadata               whereHelpernull_JSON
	Privatemetadata        whereHelpernull_JSON
}{
	Token:                  whereHelperstring{field: "\"checkouts\".\"token\""},
	Createat:               whereHelpernull_Int64{field: "\"checkouts\".\"createat\""},
	Updateat:               whereHelpernull_Int64{field: "\"checkouts\".\"updateat\""},
	Userid:                 whereHelpernull_String{field: "\"checkouts\".\"userid\""},
	Email:                  whereHelpernull_String{field: "\"checkouts\".\"email\""},
	Quantity:               whereHelpernull_Int{field: "\"checkouts\".\"quantity\""},
	Channelid:              whereHelpernull_String{field: "\"checkouts\".\"channelid\""},
	Billingaddressid:       whereHelpernull_String{field: "\"checkouts\".\"billingaddressid\""},
	Shippingaddressid:      whereHelpernull_String{field: "\"checkouts\".\"shippingaddressid\""},
	Shippingmethodid:       whereHelpernull_String{field: "\"checkouts\".\"shippingmethodid\""},
	Collectionpointid:      whereHelpernull_String{field: "\"checkouts\".\"collectionpointid\""},
	Note:                   whereHelpernull_String{field: "\"checkouts\".\"note\""},
	Currency:               whereHelpernull_String{field: "\"checkouts\".\"currency\""},
	Country:                whereHelpernull_String{field: "\"checkouts\".\"country\""},
	Discountamount:         whereHelpernull_Float64{field: "\"checkouts\".\"discountamount\""},
	Discountname:           whereHelpernull_String{field: "\"checkouts\".\"discountname\""},
	Translateddiscountname: whereHelpernull_String{field: "\"checkouts\".\"translateddiscountname\""},
	Vouchercode:            whereHelpernull_String{field: "\"checkouts\".\"vouchercode\""},
	Redirecturl:            whereHelpernull_String{field: "\"checkouts\".\"redirecturl\""},
	Trackingcode:           whereHelpernull_String{field: "\"checkouts\".\"trackingcode\""},
	Languagecode:           whereHelpernull_String{field: "\"checkouts\".\"languagecode\""},
	Metadata:               whereHelpernull_JSON{field: "\"checkouts\".\"metadata\""},
	Privatemetadata:        whereHelpernull_JSON{field: "\"checkouts\".\"privatemetadata\""},
}

// CheckoutRels is where relationship names are stored.
var CheckoutRels = struct {
	BillingaddressidAddress        string
	ChannelidChannel               string
	ShippingmethodidShippingMethod string
	UseridUser                     string
	CollectionpointidWarehouse     string
	CheckoutidCheckoutLines        string
	CheckoutidGiftcardCheckouts    string
	CheckoutidPayments             string
}{
	BillingaddressidAddress:        "BillingaddressidAddress",
	ChannelidChannel:               "ChannelidChannel",
	ShippingmethodidShippingMethod: "ShippingmethodidShippingMethod",
	UseridUser:                     "UseridUser",
	CollectionpointidWarehouse:     "CollectionpointidWarehouse",
	CheckoutidCheckoutLines:        "CheckoutidCheckoutLines",
	CheckoutidGiftcardCheckouts:    "CheckoutidGiftcardCheckouts",
	CheckoutidPayments:             "CheckoutidPayments",
}

// checkoutR is where relationships are stored.
type checkoutR struct {
	BillingaddressidAddress        *Address              `boil:"BillingaddressidAddress" json:"BillingaddressidAddress" toml:"BillingaddressidAddress" yaml:"BillingaddressidAddress"`
	ChannelidChannel               *Channel              `boil:"ChannelidChannel" json:"ChannelidChannel" toml:"ChannelidChannel" yaml:"ChannelidChannel"`
	ShippingmethodidShippingMethod *ShippingMethod       `boil:"ShippingmethodidShippingMethod" json:"ShippingmethodidShippingMethod" toml:"ShippingmethodidShippingMethod" yaml:"ShippingmethodidShippingMethod"`
	UseridUser                     *User                 `boil:"UseridUser" json:"UseridUser" toml:"UseridUser" yaml:"UseridUser"`
	CollectionpointidWarehouse     *Warehouse            `boil:"CollectionpointidWarehouse" json:"CollectionpointidWarehouse" toml:"CollectionpointidWarehouse" yaml:"CollectionpointidWarehouse"`
	CheckoutidCheckoutLines        CheckoutLineSlice     `boil:"CheckoutidCheckoutLines" json:"CheckoutidCheckoutLines" toml:"CheckoutidCheckoutLines" yaml:"CheckoutidCheckoutLines"`
	CheckoutidGiftcardCheckouts    GiftcardCheckoutSlice `boil:"CheckoutidGiftcardCheckouts" json:"CheckoutidGiftcardCheckouts" toml:"CheckoutidGiftcardCheckouts" yaml:"CheckoutidGiftcardCheckouts"`
	CheckoutidPayments             PaymentSlice          `boil:"CheckoutidPayments" json:"CheckoutidPayments" toml:"CheckoutidPayments" yaml:"CheckoutidPayments"`
}

// NewStruct creates a new relationship struct
func (*checkoutR) NewStruct() *checkoutR {
	return &checkoutR{}
}

func (r *checkoutR) GetBillingaddressidAddress() *Address {
	if r == nil {
		return nil
	}
	return r.BillingaddressidAddress
}

func (r *checkoutR) GetChannelidChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.ChannelidChannel
}

func (r *checkoutR) GetShippingmethodidShippingMethod() *ShippingMethod {
	if r == nil {
		return nil
	}
	return r.ShippingmethodidShippingMethod
}

func (r *checkoutR) GetUseridUser() *User {
	if r == nil {
		return nil
	}
	return r.UseridUser
}

func (r *checkoutR) GetCollectionpointidWarehouse() *Warehouse {
	if r == nil {
		return nil
	}
	return r.CollectionpointidWarehouse
}

func (r *checkoutR) GetCheckoutidCheckoutLines() CheckoutLineSlice {
	if r == nil {
		return nil
	}
	return r.CheckoutidCheckoutLines
}

func (r *checkoutR) GetCheckoutidGiftcardCheckouts() GiftcardCheckoutSlice {
	if r == nil {
		return nil
	}
	return r.CheckoutidGiftcardCheckouts
}

func (r *checkoutR) GetCheckoutidPayments() PaymentSlice {
	if r == nil {
		return nil
	}
	return r.CheckoutidPayments
}

// checkoutL is where Load methods for each relationship are stored.
type checkoutL struct{}

var (
	checkoutAllColumns            = []string{"token", "createat", "updateat", "userid", "email", "quantity", "channelid", "billingaddressid", "shippingaddressid", "shippingmethodid", "collectionpointid", "note", "currency", "country", "discountamount", "discountname", "translateddiscountname", "vouchercode", "redirecturl", "trackingcode", "languagecode", "metadata", "privatemetadata"}
	checkoutColumnsWithoutDefault = []string{"token"}
	checkoutColumnsWithDefault    = []string{"createat", "updateat", "userid", "email", "quantity", "channelid", "billingaddressid", "shippingaddressid", "shippingmethodid", "collectionpointid", "note", "currency", "country", "discountamount", "discountname", "translateddiscountname", "vouchercode", "redirecturl", "trackingcode", "languagecode", "metadata", "privatemetadata"}
	checkoutPrimaryKeyColumns     = []string{"token"}
	checkoutGeneratedColumns      = []string{}
)

type (
	// CheckoutSlice is an alias for a slice of pointers to Checkout.
	// This should almost always be used instead of []Checkout.
	CheckoutSlice []*Checkout
	// CheckoutHook is the signature for custom Checkout hook methods
	CheckoutHook func(context.Context, boil.ContextExecutor, *Checkout) error

	checkoutQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checkoutType                 = reflect.TypeOf(&Checkout{})
	checkoutMapping              = queries.MakeStructMapping(checkoutType)
	checkoutPrimaryKeyMapping, _ = queries.BindMapping(checkoutType, checkoutMapping, checkoutPrimaryKeyColumns)
	checkoutInsertCacheMut       sync.RWMutex
	checkoutInsertCache          = make(map[string]insertCache)
	checkoutUpdateCacheMut       sync.RWMutex
	checkoutUpdateCache          = make(map[string]updateCache)
	checkoutUpsertCacheMut       sync.RWMutex
	checkoutUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var checkoutAfterSelectHooks []CheckoutHook

var checkoutBeforeInsertHooks []CheckoutHook
var checkoutAfterInsertHooks []CheckoutHook

var checkoutBeforeUpdateHooks []CheckoutHook
var checkoutAfterUpdateHooks []CheckoutHook

var checkoutBeforeDeleteHooks []CheckoutHook
var checkoutAfterDeleteHooks []CheckoutHook

var checkoutBeforeUpsertHooks []CheckoutHook
var checkoutAfterUpsertHooks []CheckoutHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Checkout) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Checkout) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Checkout) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Checkout) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Checkout) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Checkout) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Checkout) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Checkout) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Checkout) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCheckoutHook registers your hook function for all future operations.
func AddCheckoutHook(hookPoint boil.HookPoint, checkoutHook CheckoutHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		checkoutAfterSelectHooks = append(checkoutAfterSelectHooks, checkoutHook)
	case boil.BeforeInsertHook:
		checkoutBeforeInsertHooks = append(checkoutBeforeInsertHooks, checkoutHook)
	case boil.AfterInsertHook:
		checkoutAfterInsertHooks = append(checkoutAfterInsertHooks, checkoutHook)
	case boil.BeforeUpdateHook:
		checkoutBeforeUpdateHooks = append(checkoutBeforeUpdateHooks, checkoutHook)
	case boil.AfterUpdateHook:
		checkoutAfterUpdateHooks = append(checkoutAfterUpdateHooks, checkoutHook)
	case boil.BeforeDeleteHook:
		checkoutBeforeDeleteHooks = append(checkoutBeforeDeleteHooks, checkoutHook)
	case boil.AfterDeleteHook:
		checkoutAfterDeleteHooks = append(checkoutAfterDeleteHooks, checkoutHook)
	case boil.BeforeUpsertHook:
		checkoutBeforeUpsertHooks = append(checkoutBeforeUpsertHooks, checkoutHook)
	case boil.AfterUpsertHook:
		checkoutAfterUpsertHooks = append(checkoutAfterUpsertHooks, checkoutHook)
	}
}

// One returns a single checkout record from the query.
func (q checkoutQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Checkout, error) {
	o := &Checkout{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for checkouts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Checkout records from the query.
func (q checkoutQuery) All(ctx context.Context, exec boil.ContextExecutor) (CheckoutSlice, error) {
	var o []*Checkout

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Checkout slice")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Checkout records in the query.
func (q checkoutQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count checkouts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q checkoutQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if checkouts exists")
	}

	return count > 0, nil
}

// BillingaddressidAddress pointed to by the foreign key.
func (o *Checkout) BillingaddressidAddress(mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Billingaddressid),
	}

	queryMods = append(queryMods, mods...)

	return Addresses(queryMods...)
}

// ChannelidChannel pointed to by the foreign key.
func (o *Checkout) ChannelidChannel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Channelid),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// ShippingmethodidShippingMethod pointed to by the foreign key.
func (o *Checkout) ShippingmethodidShippingMethod(mods ...qm.QueryMod) shippingMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Shippingmethodid),
	}

	queryMods = append(queryMods, mods...)

	return ShippingMethods(queryMods...)
}

// UseridUser pointed to by the foreign key.
func (o *Checkout) UseridUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Userid),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// CollectionpointidWarehouse pointed to by the foreign key.
func (o *Checkout) CollectionpointidWarehouse(mods ...qm.QueryMod) warehouseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Collectionpointid),
	}

	queryMods = append(queryMods, mods...)

	return Warehouses(queryMods...)
}

// CheckoutidCheckoutLines retrieves all the checkout_line's CheckoutLines with an executor via checkoutid column.
func (o *Checkout) CheckoutidCheckoutLines(mods ...qm.QueryMod) checkoutLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkout_lines\".\"checkoutid\"=?", o.Token),
	)

	return CheckoutLines(queryMods...)
}

// CheckoutidGiftcardCheckouts retrieves all the giftcard_checkout's GiftcardCheckouts with an executor via checkoutid column.
func (o *Checkout) CheckoutidGiftcardCheckouts(mods ...qm.QueryMod) giftcardCheckoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"giftcard_checkouts\".\"checkoutid\"=?", o.Token),
	)

	return GiftcardCheckouts(queryMods...)
}

// CheckoutidPayments retrieves all the payment's Payments with an executor via checkoutid column.
func (o *Checkout) CheckoutidPayments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payments\".\"checkoutid\"=?", o.Token),
	)

	return Payments(queryMods...)
}

// LoadBillingaddressidAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadBillingaddressidAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.Billingaddressid) {
			args = append(args, object.Billingaddressid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Billingaddressid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Billingaddressid) {
				args = append(args, obj.Billingaddressid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`addresses`),
		qm.WhereIn(`addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for addresses")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillingaddressidAddress = foreign
		if foreign.R == nil {
			foreign.R = &addressR{}
		}
		foreign.R.BillingaddressidCheckouts = append(foreign.R.BillingaddressidCheckouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Billingaddressid, foreign.ID) {
				local.R.BillingaddressidAddress = foreign
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.BillingaddressidCheckouts = append(foreign.R.BillingaddressidCheckouts, local)
				break
			}
		}
	}

	return nil
}

// LoadChannelidChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadChannelidChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.Channelid) {
			args = append(args, object.Channelid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Channelid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Channelid) {
				args = append(args, obj.Channelid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChannelidChannel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.ChannelidCheckouts = append(foreign.R.ChannelidCheckouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Channelid, foreign.ID) {
				local.R.ChannelidChannel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.ChannelidCheckouts = append(foreign.R.ChannelidCheckouts, local)
				break
			}
		}
	}

	return nil
}

// LoadShippingmethodidShippingMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadShippingmethodidShippingMethod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.Shippingmethodid) {
			args = append(args, object.Shippingmethodid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Shippingmethodid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Shippingmethodid) {
				args = append(args, obj.Shippingmethodid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_methods`),
		qm.WhereIn(`shipping_methods.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingMethod")
	}

	var resultSlice []*ShippingMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_methods")
	}

	if len(shippingMethodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingmethodidShippingMethod = foreign
		if foreign.R == nil {
			foreign.R = &shippingMethodR{}
		}
		foreign.R.ShippingmethodidCheckouts = append(foreign.R.ShippingmethodidCheckouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Shippingmethodid, foreign.ID) {
				local.R.ShippingmethodidShippingMethod = foreign
				if foreign.R == nil {
					foreign.R = &shippingMethodR{}
				}
				foreign.R.ShippingmethodidCheckouts = append(foreign.R.ShippingmethodidCheckouts, local)
				break
			}
		}
	}

	return nil
}

// LoadUseridUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadUseridUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.Userid) {
			args = append(args, object.Userid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Userid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Userid) {
				args = append(args, obj.Userid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UseridCheckouts = append(foreign.R.UseridCheckouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Userid, foreign.ID) {
				local.R.UseridUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UseridCheckouts = append(foreign.R.UseridCheckouts, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionpointidWarehouse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadCollectionpointidWarehouse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.Collectionpointid) {
			args = append(args, object.Collectionpointid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Collectionpointid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Collectionpointid) {
				args = append(args, obj.Collectionpointid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Warehouse")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Warehouse")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionpointidWarehouse = foreign
		if foreign.R == nil {
			foreign.R = &warehouseR{}
		}
		foreign.R.CollectionpointidCheckouts = append(foreign.R.CollectionpointidCheckouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Collectionpointid, foreign.ID) {
				local.R.CollectionpointidWarehouse = foreign
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.CollectionpointidCheckouts = append(foreign.R.CollectionpointidCheckouts, local)
				break
			}
		}
	}

	return nil
}

// LoadCheckoutidCheckoutLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (checkoutL) LoadCheckoutidCheckoutLines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		args = append(args, object.Token)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Token) {
					continue Outer
				}
			}

			args = append(args, obj.Token)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkout_lines`),
		qm.WhereIn(`checkout_lines.checkoutid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkout_lines")
	}

	var resultSlice []*CheckoutLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkout_lines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkout_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkout_lines")
	}

	if len(checkoutLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CheckoutidCheckoutLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutLineR{}
			}
			foreign.R.CheckoutidCheckout = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Token, foreign.Checkoutid) {
				local.R.CheckoutidCheckoutLines = append(local.R.CheckoutidCheckoutLines, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutLineR{}
				}
				foreign.R.CheckoutidCheckout = local
				break
			}
		}
	}

	return nil
}

// LoadCheckoutidGiftcardCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (checkoutL) LoadCheckoutidGiftcardCheckouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		args = append(args, object.Token)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Token) {
					continue Outer
				}
			}

			args = append(args, obj.Token)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`giftcard_checkouts`),
		qm.WhereIn(`giftcard_checkouts.checkoutid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load giftcard_checkouts")
	}

	var resultSlice []*GiftcardCheckout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice giftcard_checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on giftcard_checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for giftcard_checkouts")
	}

	if len(giftcardCheckoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CheckoutidGiftcardCheckouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &giftcardCheckoutR{}
			}
			foreign.R.CheckoutidCheckout = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Token, foreign.Checkoutid) {
				local.R.CheckoutidGiftcardCheckouts = append(local.R.CheckoutidGiftcardCheckouts, foreign)
				if foreign.R == nil {
					foreign.R = &giftcardCheckoutR{}
				}
				foreign.R.CheckoutidCheckout = local
				break
			}
		}
	}

	return nil
}

// LoadCheckoutidPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (checkoutL) LoadCheckoutidPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		var ok bool
		object, ok = maybeCheckout.(*Checkout)
		if !ok {
			object = new(Checkout)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCheckout))
			}
		}
	} else {
		s, ok := maybeCheckout.(*[]*Checkout)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCheckout)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCheckout))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		args = append(args, object.Token)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Token) {
					continue Outer
				}
			}

			args = append(args, obj.Token)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.checkoutid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payments")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CheckoutidPayments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.CheckoutidCheckout = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.Token, foreign.Checkoutid) {
				local.R.CheckoutidPayments = append(local.R.CheckoutidPayments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.CheckoutidCheckout = local
				break
			}
		}
	}

	return nil
}

// SetBillingaddressidAddress of the checkout to the related item.
// Sets o.R.BillingaddressidAddress to related.
// Adds o to related.R.BillingaddressidCheckouts.
func (o *Checkout) SetBillingaddressidAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"billingaddressid"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Billingaddressid, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			BillingaddressidAddress: related,
		}
	} else {
		o.R.BillingaddressidAddress = related
	}

	if related.R == nil {
		related.R = &addressR{
			BillingaddressidCheckouts: CheckoutSlice{o},
		}
	} else {
		related.R.BillingaddressidCheckouts = append(related.R.BillingaddressidCheckouts, o)
	}

	return nil
}

// RemoveBillingaddressidAddress relationship.
// Sets o.R.BillingaddressidAddress to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Checkout) RemoveBillingaddressidAddress(ctx context.Context, exec boil.ContextExecutor, related *Address) error {
	var err error

	queries.SetScanner(&o.Billingaddressid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("billingaddressid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillingaddressidAddress = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BillingaddressidCheckouts {
		if queries.Equal(o.Billingaddressid, ri.Billingaddressid) {
			continue
		}

		ln := len(related.R.BillingaddressidCheckouts)
		if ln > 1 && i < ln-1 {
			related.R.BillingaddressidCheckouts[i] = related.R.BillingaddressidCheckouts[ln-1]
		}
		related.R.BillingaddressidCheckouts = related.R.BillingaddressidCheckouts[:ln-1]
		break
	}
	return nil
}

// SetChannelidChannel of the checkout to the related item.
// Sets o.R.ChannelidChannel to related.
// Adds o to related.R.ChannelidCheckouts.
func (o *Checkout) SetChannelidChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Channelid, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			ChannelidChannel: related,
		}
	} else {
		o.R.ChannelidChannel = related
	}

	if related.R == nil {
		related.R = &channelR{
			ChannelidCheckouts: CheckoutSlice{o},
		}
	} else {
		related.R.ChannelidCheckouts = append(related.R.ChannelidCheckouts, o)
	}

	return nil
}

// RemoveChannelidChannel relationship.
// Sets o.R.ChannelidChannel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Checkout) RemoveChannelidChannel(ctx context.Context, exec boil.ContextExecutor, related *Channel) error {
	var err error

	queries.SetScanner(&o.Channelid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ChannelidChannel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChannelidCheckouts {
		if queries.Equal(o.Channelid, ri.Channelid) {
			continue
		}

		ln := len(related.R.ChannelidCheckouts)
		if ln > 1 && i < ln-1 {
			related.R.ChannelidCheckouts[i] = related.R.ChannelidCheckouts[ln-1]
		}
		related.R.ChannelidCheckouts = related.R.ChannelidCheckouts[:ln-1]
		break
	}
	return nil
}

// SetShippingmethodidShippingMethod of the checkout to the related item.
// Sets o.R.ShippingmethodidShippingMethod to related.
// Adds o to related.R.ShippingmethodidCheckouts.
func (o *Checkout) SetShippingmethodidShippingMethod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShippingMethod) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shippingmethodid"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Shippingmethodid, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			ShippingmethodidShippingMethod: related,
		}
	} else {
		o.R.ShippingmethodidShippingMethod = related
	}

	if related.R == nil {
		related.R = &shippingMethodR{
			ShippingmethodidCheckouts: CheckoutSlice{o},
		}
	} else {
		related.R.ShippingmethodidCheckouts = append(related.R.ShippingmethodidCheckouts, o)
	}

	return nil
}

// RemoveShippingmethodidShippingMethod relationship.
// Sets o.R.ShippingmethodidShippingMethod to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Checkout) RemoveShippingmethodidShippingMethod(ctx context.Context, exec boil.ContextExecutor, related *ShippingMethod) error {
	var err error

	queries.SetScanner(&o.Shippingmethodid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("shippingmethodid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ShippingmethodidShippingMethod = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ShippingmethodidCheckouts {
		if queries.Equal(o.Shippingmethodid, ri.Shippingmethodid) {
			continue
		}

		ln := len(related.R.ShippingmethodidCheckouts)
		if ln > 1 && i < ln-1 {
			related.R.ShippingmethodidCheckouts[i] = related.R.ShippingmethodidCheckouts[ln-1]
		}
		related.R.ShippingmethodidCheckouts = related.R.ShippingmethodidCheckouts[:ln-1]
		break
	}
	return nil
}

// SetUseridUser of the checkout to the related item.
// Sets o.R.UseridUser to related.
// Adds o to related.R.UseridCheckouts.
func (o *Checkout) SetUseridUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Userid, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			UseridUser: related,
		}
	} else {
		o.R.UseridUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UseridCheckouts: CheckoutSlice{o},
		}
	} else {
		related.R.UseridCheckouts = append(related.R.UseridCheckouts, o)
	}

	return nil
}

// RemoveUseridUser relationship.
// Sets o.R.UseridUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Checkout) RemoveUseridUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.Userid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("userid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UseridUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UseridCheckouts {
		if queries.Equal(o.Userid, ri.Userid) {
			continue
		}

		ln := len(related.R.UseridCheckouts)
		if ln > 1 && i < ln-1 {
			related.R.UseridCheckouts[i] = related.R.UseridCheckouts[ln-1]
		}
		related.R.UseridCheckouts = related.R.UseridCheckouts[:ln-1]
		break
	}
	return nil
}

// SetCollectionpointidWarehouse of the checkout to the related item.
// Sets o.R.CollectionpointidWarehouse to related.
// Adds o to related.R.CollectionpointidCheckouts.
func (o *Checkout) SetCollectionpointidWarehouse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Warehouse) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collectionpointid"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Token}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Collectionpointid, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			CollectionpointidWarehouse: related,
		}
	} else {
		o.R.CollectionpointidWarehouse = related
	}

	if related.R == nil {
		related.R = &warehouseR{
			CollectionpointidCheckouts: CheckoutSlice{o},
		}
	} else {
		related.R.CollectionpointidCheckouts = append(related.R.CollectionpointidCheckouts, o)
	}

	return nil
}

// RemoveCollectionpointidWarehouse relationship.
// Sets o.R.CollectionpointidWarehouse to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Checkout) RemoveCollectionpointidWarehouse(ctx context.Context, exec boil.ContextExecutor, related *Warehouse) error {
	var err error

	queries.SetScanner(&o.Collectionpointid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("collectionpointid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CollectionpointidWarehouse = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CollectionpointidCheckouts {
		if queries.Equal(o.Collectionpointid, ri.Collectionpointid) {
			continue
		}

		ln := len(related.R.CollectionpointidCheckouts)
		if ln > 1 && i < ln-1 {
			related.R.CollectionpointidCheckouts[i] = related.R.CollectionpointidCheckouts[ln-1]
		}
		related.R.CollectionpointidCheckouts = related.R.CollectionpointidCheckouts[:ln-1]
		break
	}
	return nil
}

// AddCheckoutidCheckoutLines adds the given related objects to the existing relationships
// of the checkout, optionally inserting them as new records.
// Appends related to o.R.CheckoutidCheckoutLines.
// Sets related.R.CheckoutidCheckout appropriately.
func (o *Checkout) AddCheckoutidCheckoutLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckoutLine) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Checkoutid, o.Token)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkout_lines\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"checkoutid"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutLinePrimaryKeyColumns),
			)
			values := []interface{}{o.Token, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Checkoutid, o.Token)
		}
	}

	if o.R == nil {
		o.R = &checkoutR{
			CheckoutidCheckoutLines: related,
		}
	} else {
		o.R.CheckoutidCheckoutLines = append(o.R.CheckoutidCheckoutLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutLineR{
				CheckoutidCheckout: o,
			}
		} else {
			rel.R.CheckoutidCheckout = o
		}
	}
	return nil
}

// SetCheckoutidCheckoutLines removes all previously related items of the
// checkout replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CheckoutidCheckout's CheckoutidCheckoutLines accordingly.
// Replaces o.R.CheckoutidCheckoutLines with related.
// Sets related.R.CheckoutidCheckout's CheckoutidCheckoutLines accordingly.
func (o *Checkout) SetCheckoutidCheckoutLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckoutLine) error {
	query := "update \"checkout_lines\" set \"checkoutid\" = null where \"checkoutid\" = $1"
	values := []interface{}{o.Token}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CheckoutidCheckoutLines {
			queries.SetScanner(&rel.Checkoutid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CheckoutidCheckout = nil
		}
		o.R.CheckoutidCheckoutLines = nil
	}

	return o.AddCheckoutidCheckoutLines(ctx, exec, insert, related...)
}

// RemoveCheckoutidCheckoutLines relationships from objects passed in.
// Removes related items from R.CheckoutidCheckoutLines (uses pointer comparison, removal does not keep order)
// Sets related.R.CheckoutidCheckout.
func (o *Checkout) RemoveCheckoutidCheckoutLines(ctx context.Context, exec boil.ContextExecutor, related ...*CheckoutLine) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Checkoutid, nil)
		if rel.R != nil {
			rel.R.CheckoutidCheckout = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("checkoutid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CheckoutidCheckoutLines {
			if rel != ri {
				continue
			}

			ln := len(o.R.CheckoutidCheckoutLines)
			if ln > 1 && i < ln-1 {
				o.R.CheckoutidCheckoutLines[i] = o.R.CheckoutidCheckoutLines[ln-1]
			}
			o.R.CheckoutidCheckoutLines = o.R.CheckoutidCheckoutLines[:ln-1]
			break
		}
	}

	return nil
}

// AddCheckoutidGiftcardCheckouts adds the given related objects to the existing relationships
// of the checkout, optionally inserting them as new records.
// Appends related to o.R.CheckoutidGiftcardCheckouts.
// Sets related.R.CheckoutidCheckout appropriately.
func (o *Checkout) AddCheckoutidGiftcardCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GiftcardCheckout) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Checkoutid, o.Token)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"giftcard_checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"checkoutid"}),
				strmangle.WhereClause("\"", "\"", 2, giftcardCheckoutPrimaryKeyColumns),
			)
			values := []interface{}{o.Token, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Checkoutid, o.Token)
		}
	}

	if o.R == nil {
		o.R = &checkoutR{
			CheckoutidGiftcardCheckouts: related,
		}
	} else {
		o.R.CheckoutidGiftcardCheckouts = append(o.R.CheckoutidGiftcardCheckouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &giftcardCheckoutR{
				CheckoutidCheckout: o,
			}
		} else {
			rel.R.CheckoutidCheckout = o
		}
	}
	return nil
}

// SetCheckoutidGiftcardCheckouts removes all previously related items of the
// checkout replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CheckoutidCheckout's CheckoutidGiftcardCheckouts accordingly.
// Replaces o.R.CheckoutidGiftcardCheckouts with related.
// Sets related.R.CheckoutidCheckout's CheckoutidGiftcardCheckouts accordingly.
func (o *Checkout) SetCheckoutidGiftcardCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GiftcardCheckout) error {
	query := "update \"giftcard_checkouts\" set \"checkoutid\" = null where \"checkoutid\" = $1"
	values := []interface{}{o.Token}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CheckoutidGiftcardCheckouts {
			queries.SetScanner(&rel.Checkoutid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CheckoutidCheckout = nil
		}
		o.R.CheckoutidGiftcardCheckouts = nil
	}

	return o.AddCheckoutidGiftcardCheckouts(ctx, exec, insert, related...)
}

// RemoveCheckoutidGiftcardCheckouts relationships from objects passed in.
// Removes related items from R.CheckoutidGiftcardCheckouts (uses pointer comparison, removal does not keep order)
// Sets related.R.CheckoutidCheckout.
func (o *Checkout) RemoveCheckoutidGiftcardCheckouts(ctx context.Context, exec boil.ContextExecutor, related ...*GiftcardCheckout) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Checkoutid, nil)
		if rel.R != nil {
			rel.R.CheckoutidCheckout = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("checkoutid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CheckoutidGiftcardCheckouts {
			if rel != ri {
				continue
			}

			ln := len(o.R.CheckoutidGiftcardCheckouts)
			if ln > 1 && i < ln-1 {
				o.R.CheckoutidGiftcardCheckouts[i] = o.R.CheckoutidGiftcardCheckouts[ln-1]
			}
			o.R.CheckoutidGiftcardCheckouts = o.R.CheckoutidGiftcardCheckouts[:ln-1]
			break
		}
	}

	return nil
}

// AddCheckoutidPayments adds the given related objects to the existing relationships
// of the checkout, optionally inserting them as new records.
// Appends related to o.R.CheckoutidPayments.
// Sets related.R.CheckoutidCheckout appropriately.
func (o *Checkout) AddCheckoutidPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Checkoutid, o.Token)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"checkoutid"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.Token, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Checkoutid, o.Token)
		}
	}

	if o.R == nil {
		o.R = &checkoutR{
			CheckoutidPayments: related,
		}
	} else {
		o.R.CheckoutidPayments = append(o.R.CheckoutidPayments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				CheckoutidCheckout: o,
			}
		} else {
			rel.R.CheckoutidCheckout = o
		}
	}
	return nil
}

// SetCheckoutidPayments removes all previously related items of the
// checkout replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CheckoutidCheckout's CheckoutidPayments accordingly.
// Replaces o.R.CheckoutidPayments with related.
// Sets related.R.CheckoutidCheckout's CheckoutidPayments accordingly.
func (o *Checkout) SetCheckoutidPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	query := "update \"payments\" set \"checkoutid\" = null where \"checkoutid\" = $1"
	values := []interface{}{o.Token}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CheckoutidPayments {
			queries.SetScanner(&rel.Checkoutid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CheckoutidCheckout = nil
		}
		o.R.CheckoutidPayments = nil
	}

	return o.AddCheckoutidPayments(ctx, exec, insert, related...)
}

// RemoveCheckoutidPayments relationships from objects passed in.
// Removes related items from R.CheckoutidPayments (uses pointer comparison, removal does not keep order)
// Sets related.R.CheckoutidCheckout.
func (o *Checkout) RemoveCheckoutidPayments(ctx context.Context, exec boil.ContextExecutor, related ...*Payment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Checkoutid, nil)
		if rel.R != nil {
			rel.R.CheckoutidCheckout = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("checkoutid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CheckoutidPayments {
			if rel != ri {
				continue
			}

			ln := len(o.R.CheckoutidPayments)
			if ln > 1 && i < ln-1 {
				o.R.CheckoutidPayments[i] = o.R.CheckoutidPayments[ln-1]
			}
			o.R.CheckoutidPayments = o.R.CheckoutidPayments[:ln-1]
			break
		}
	}

	return nil
}

// Checkouts retrieves all the records using an executor.
func Checkouts(mods ...qm.QueryMod) checkoutQuery {
	mods = append(mods, qm.From("\"checkouts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"checkouts\".*"})
	}

	return checkoutQuery{q}
}

// FindCheckout retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCheckout(ctx context.Context, exec boil.ContextExecutor, token string, selectCols ...string) (*Checkout, error) {
	checkoutObj := &Checkout{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"checkouts\" where \"token\"=$1", sel,
	)

	q := queries.Raw(query, token)

	err := q.Bind(ctx, exec, checkoutObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from checkouts")
	}

	if err = checkoutObj.doAfterSelectHooks(ctx, exec); err != nil {
		return checkoutObj, err
	}

	return checkoutObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Checkout) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkouts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checkoutInsertCacheMut.RLock()
	cache, cached := checkoutInsertCache[key]
	checkoutInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checkoutAllColumns,
			checkoutColumnsWithDefault,
			checkoutColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checkoutType, checkoutMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"checkouts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"checkouts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into checkouts")
	}

	if !cached {
		checkoutInsertCacheMut.Lock()
		checkoutInsertCache[key] = cache
		checkoutInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Checkout.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Checkout) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	checkoutUpdateCacheMut.RLock()
	cache, cached := checkoutUpdateCache[key]
	checkoutUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checkoutAllColumns,
			checkoutPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update checkouts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"checkouts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, checkoutPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, append(wl, checkoutPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update checkouts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for checkouts")
	}

	if !cached {
		checkoutUpdateCacheMut.Lock()
		checkoutUpdateCache[key] = cache
		checkoutUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q checkoutQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for checkouts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CheckoutSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, checkoutPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in checkout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all checkout")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Checkout) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkouts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checkoutUpsertCacheMut.RLock()
	cache, cached := checkoutUpsertCache[key]
	checkoutUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			checkoutAllColumns,
			checkoutColumnsWithDefault,
			checkoutColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			checkoutAllColumns,
			checkoutPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert checkouts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(checkoutPrimaryKeyColumns))
			copy(conflict, checkoutPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"checkouts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checkoutType, checkoutMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert checkouts")
	}

	if !cached {
		checkoutUpsertCacheMut.Lock()
		checkoutUpsertCache[key] = cache
		checkoutUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Checkout record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Checkout) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Checkout provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checkoutPrimaryKeyMapping)
	sql := "DELETE FROM \"checkouts\" WHERE \"token\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for checkouts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q checkoutQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no checkoutQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkouts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CheckoutSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(checkoutBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkouts")
	}

	if len(checkoutAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Checkout) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCheckout(ctx, exec, o.Token)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckoutSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CheckoutSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"checkouts\".* FROM \"checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CheckoutSlice")
	}

	*o = slice

	return nil
}

// CheckoutExists checks if the Checkout row exists.
func CheckoutExists(ctx context.Context, exec boil.ContextExecutor, token string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"checkouts\" where \"token\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, token)
	}
	row := exec.QueryRowContext(ctx, sql, token)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if checkouts exists")
	}

	return exists, nil
}

// Exists checks if the Checkout row exists.
func (o *Checkout) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CheckoutExists(ctx, exec, o.Token)
}
