// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFulfillmentLines(t *testing.T) {
	t.Parallel()

	query := FulfillmentLines()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFulfillmentLinesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFulfillmentLinesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := FulfillmentLines().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFulfillmentLinesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FulfillmentLineSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFulfillmentLinesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FulfillmentLineExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if FulfillmentLine exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FulfillmentLineExists to return true, but got false.")
	}
}

func testFulfillmentLinesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fulfillmentLineFound, err := FindFulfillmentLine(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if fulfillmentLineFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFulfillmentLinesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = FulfillmentLines().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFulfillmentLinesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := FulfillmentLines().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFulfillmentLinesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fulfillmentLineOne := &FulfillmentLine{}
	fulfillmentLineTwo := &FulfillmentLine{}
	if err = randomize.Struct(seed, fulfillmentLineOne, fulfillmentLineDBTypes, false, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}
	if err = randomize.Struct(seed, fulfillmentLineTwo, fulfillmentLineDBTypes, false, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fulfillmentLineOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fulfillmentLineTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FulfillmentLines().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFulfillmentLinesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fulfillmentLineOne := &FulfillmentLine{}
	fulfillmentLineTwo := &FulfillmentLine{}
	if err = randomize.Struct(seed, fulfillmentLineOne, fulfillmentLineDBTypes, false, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}
	if err = randomize.Struct(seed, fulfillmentLineTwo, fulfillmentLineDBTypes, false, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fulfillmentLineOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fulfillmentLineTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fulfillmentLineBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *FulfillmentLine) error {
	*o = FulfillmentLine{}
	return nil
}

func fulfillmentLineAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *FulfillmentLine) error {
	*o = FulfillmentLine{}
	return nil
}

func fulfillmentLineAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *FulfillmentLine) error {
	*o = FulfillmentLine{}
	return nil
}

func fulfillmentLineBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FulfillmentLine) error {
	*o = FulfillmentLine{}
	return nil
}

func fulfillmentLineAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *FulfillmentLine) error {
	*o = FulfillmentLine{}
	return nil
}

func fulfillmentLineBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FulfillmentLine) error {
	*o = FulfillmentLine{}
	return nil
}

func fulfillmentLineAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *FulfillmentLine) error {
	*o = FulfillmentLine{}
	return nil
}

func fulfillmentLineBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FulfillmentLine) error {
	*o = FulfillmentLine{}
	return nil
}

func fulfillmentLineAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *FulfillmentLine) error {
	*o = FulfillmentLine{}
	return nil
}

func testFulfillmentLinesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &FulfillmentLine{}
	o := &FulfillmentLine{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, false); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine object: %s", err)
	}

	AddFulfillmentLineHook(boil.BeforeInsertHook, fulfillmentLineBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fulfillmentLineBeforeInsertHooks = []FulfillmentLineHook{}

	AddFulfillmentLineHook(boil.AfterInsertHook, fulfillmentLineAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fulfillmentLineAfterInsertHooks = []FulfillmentLineHook{}

	AddFulfillmentLineHook(boil.AfterSelectHook, fulfillmentLineAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fulfillmentLineAfterSelectHooks = []FulfillmentLineHook{}

	AddFulfillmentLineHook(boil.BeforeUpdateHook, fulfillmentLineBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fulfillmentLineBeforeUpdateHooks = []FulfillmentLineHook{}

	AddFulfillmentLineHook(boil.AfterUpdateHook, fulfillmentLineAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fulfillmentLineAfterUpdateHooks = []FulfillmentLineHook{}

	AddFulfillmentLineHook(boil.BeforeDeleteHook, fulfillmentLineBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fulfillmentLineBeforeDeleteHooks = []FulfillmentLineHook{}

	AddFulfillmentLineHook(boil.AfterDeleteHook, fulfillmentLineAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fulfillmentLineAfterDeleteHooks = []FulfillmentLineHook{}

	AddFulfillmentLineHook(boil.BeforeUpsertHook, fulfillmentLineBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fulfillmentLineBeforeUpsertHooks = []FulfillmentLineHook{}

	AddFulfillmentLineHook(boil.AfterUpsertHook, fulfillmentLineAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fulfillmentLineAfterUpsertHooks = []FulfillmentLineHook{}
}

func testFulfillmentLinesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFulfillmentLinesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fulfillmentLineColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFulfillmentLineToOneOrderLineUsingOrderlineidOrderLine(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FulfillmentLine
	var foreign OrderLine

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderLineDBTypes, false, orderLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderLine struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Orderlineid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OrderlineidOrderLine().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderLineHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *OrderLine) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FulfillmentLineSlice{&local}
	if err = local.L.LoadOrderlineidOrderLine(ctx, tx, false, (*[]*FulfillmentLine)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrderlineidOrderLine == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OrderlineidOrderLine = nil
	if err = local.L.LoadOrderlineidOrderLine(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OrderlineidOrderLine == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFulfillmentLineToOneStockUsingStockidStock(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local FulfillmentLine
	var foreign Stock

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, stockDBTypes, false, stockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stock struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Stockid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.StockidStock().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddStockHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Stock) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FulfillmentLineSlice{&local}
	if err = local.L.LoadStockidStock(ctx, tx, false, (*[]*FulfillmentLine)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StockidStock == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.StockidStock = nil
	if err = local.L.LoadStockidStock(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StockidStock == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFulfillmentLineToOneSetOpOrderLineUsingOrderlineidOrderLine(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FulfillmentLine
	var b, c OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fulfillmentLineDBTypes, false, strmangle.SetComplement(fulfillmentLinePrimaryKeyColumns, fulfillmentLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*OrderLine{&b, &c} {
		err = a.SetOrderlineidOrderLine(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OrderlineidOrderLine != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderlineidFulfillmentLines[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Orderlineid, x.ID) {
			t.Error("foreign key was wrong value", a.Orderlineid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Orderlineid))
		reflect.Indirect(reflect.ValueOf(&a.Orderlineid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Orderlineid, x.ID) {
			t.Error("foreign key was wrong value", a.Orderlineid, x.ID)
		}
	}
}

func testFulfillmentLineToOneRemoveOpOrderLineUsingOrderlineidOrderLine(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FulfillmentLine
	var b OrderLine

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fulfillmentLineDBTypes, false, strmangle.SetComplement(fulfillmentLinePrimaryKeyColumns, fulfillmentLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderLineDBTypes, false, strmangle.SetComplement(orderLinePrimaryKeyColumns, orderLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetOrderlineidOrderLine(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveOrderlineidOrderLine(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.OrderlineidOrderLine().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.OrderlineidOrderLine != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Orderlineid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.OrderlineidFulfillmentLines) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testFulfillmentLineToOneSetOpStockUsingStockidStock(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FulfillmentLine
	var b, c Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fulfillmentLineDBTypes, false, strmangle.SetComplement(fulfillmentLinePrimaryKeyColumns, fulfillmentLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Stock{&b, &c} {
		err = a.SetStockidStock(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.StockidStock != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.StockidFulfillmentLines[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Stockid, x.ID) {
			t.Error("foreign key was wrong value", a.Stockid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Stockid))
		reflect.Indirect(reflect.ValueOf(&a.Stockid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Stockid, x.ID) {
			t.Error("foreign key was wrong value", a.Stockid, x.ID)
		}
	}
}

func testFulfillmentLineToOneRemoveOpStockUsingStockidStock(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a FulfillmentLine
	var b Stock

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fulfillmentLineDBTypes, false, strmangle.SetComplement(fulfillmentLinePrimaryKeyColumns, fulfillmentLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, stockDBTypes, false, strmangle.SetComplement(stockPrimaryKeyColumns, stockColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetStockidStock(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveStockidStock(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.StockidStock().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.StockidStock != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Stockid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.StockidFulfillmentLines) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testFulfillmentLinesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFulfillmentLinesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FulfillmentLineSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFulfillmentLinesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := FulfillmentLines().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fulfillmentLineDBTypes = map[string]string{`ID`: `character varying`, `Orderlineid`: `character varying`, `Fulfillmentid`: `character varying`, `Quantity`: `integer`, `Stockid`: `character varying`}
	_                      = bytes.MinRead
)

func testFulfillmentLinesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fulfillmentLinePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fulfillmentLineAllColumns) == len(fulfillmentLinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFulfillmentLinesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fulfillmentLineAllColumns) == len(fulfillmentLinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &FulfillmentLine{}
	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fulfillmentLineDBTypes, true, fulfillmentLinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fulfillmentLineAllColumns, fulfillmentLinePrimaryKeyColumns) {
		fields = fulfillmentLineAllColumns
	} else {
		fields = strmangle.SetComplement(
			fulfillmentLineAllColumns,
			fulfillmentLinePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FulfillmentLineSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFulfillmentLinesUpsert(t *testing.T) {
	t.Parallel()

	if len(fulfillmentLineAllColumns) == len(fulfillmentLinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := FulfillmentLine{}
	if err = randomize.Struct(seed, &o, fulfillmentLineDBTypes, true); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FulfillmentLine: %s", err)
	}

	count, err := FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fulfillmentLineDBTypes, false, fulfillmentLinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize FulfillmentLine struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert FulfillmentLine: %s", err)
	}

	count, err = FulfillmentLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
