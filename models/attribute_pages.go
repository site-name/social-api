// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AttributePage is an object representing the database table.
type AttributePage struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Attributeid null.String `boil:"attributeid" json:"attributeid,omitempty" toml:"attributeid" yaml:"attributeid,omitempty"`
	Pagetypeid  null.String `boil:"pagetypeid" json:"pagetypeid,omitempty" toml:"pagetypeid" yaml:"pagetypeid,omitempty"`
	Sortorder   null.Int    `boil:"sortorder" json:"sortorder,omitempty" toml:"sortorder" yaml:"sortorder,omitempty"`

	R *attributePageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributePageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributePageColumns = struct {
	ID          string
	Attributeid string
	Pagetypeid  string
	Sortorder   string
}{
	ID:          "id",
	Attributeid: "attributeid",
	Pagetypeid:  "pagetypeid",
	Sortorder:   "sortorder",
}

var AttributePageTableColumns = struct {
	ID          string
	Attributeid string
	Pagetypeid  string
	Sortorder   string
}{
	ID:          "attribute_pages.id",
	Attributeid: "attribute_pages.attributeid",
	Pagetypeid:  "attribute_pages.pagetypeid",
	Sortorder:   "attribute_pages.sortorder",
}

// Generated where

var AttributePageWhere = struct {
	ID          whereHelperstring
	Attributeid whereHelpernull_String
	Pagetypeid  whereHelpernull_String
	Sortorder   whereHelpernull_Int
}{
	ID:          whereHelperstring{field: "\"attribute_pages\".\"id\""},
	Attributeid: whereHelpernull_String{field: "\"attribute_pages\".\"attributeid\""},
	Pagetypeid:  whereHelpernull_String{field: "\"attribute_pages\".\"pagetypeid\""},
	Sortorder:   whereHelpernull_Int{field: "\"attribute_pages\".\"sortorder\""},
}

// AttributePageRels is where relationship names are stored.
var AttributePageRels = struct {
	PagetypeidPageType                 string
	AssignmentidAssignedPageAttributes string
}{
	PagetypeidPageType:                 "PagetypeidPageType",
	AssignmentidAssignedPageAttributes: "AssignmentidAssignedPageAttributes",
}

// attributePageR is where relationships are stored.
type attributePageR struct {
	PagetypeidPageType                 *PageType                  `boil:"PagetypeidPageType" json:"PagetypeidPageType" toml:"PagetypeidPageType" yaml:"PagetypeidPageType"`
	AssignmentidAssignedPageAttributes AssignedPageAttributeSlice `boil:"AssignmentidAssignedPageAttributes" json:"AssignmentidAssignedPageAttributes" toml:"AssignmentidAssignedPageAttributes" yaml:"AssignmentidAssignedPageAttributes"`
}

// NewStruct creates a new relationship struct
func (*attributePageR) NewStruct() *attributePageR {
	return &attributePageR{}
}

func (r *attributePageR) GetPagetypeidPageType() *PageType {
	if r == nil {
		return nil
	}
	return r.PagetypeidPageType
}

func (r *attributePageR) GetAssignmentidAssignedPageAttributes() AssignedPageAttributeSlice {
	if r == nil {
		return nil
	}
	return r.AssignmentidAssignedPageAttributes
}

// attributePageL is where Load methods for each relationship are stored.
type attributePageL struct{}

var (
	attributePageAllColumns            = []string{"id", "attributeid", "pagetypeid", "sortorder"}
	attributePageColumnsWithoutDefault = []string{"id"}
	attributePageColumnsWithDefault    = []string{"attributeid", "pagetypeid", "sortorder"}
	attributePagePrimaryKeyColumns     = []string{"id"}
	attributePageGeneratedColumns      = []string{}
)

type (
	// AttributePageSlice is an alias for a slice of pointers to AttributePage.
	// This should almost always be used instead of []AttributePage.
	AttributePageSlice []*AttributePage
	// AttributePageHook is the signature for custom AttributePage hook methods
	AttributePageHook func(context.Context, boil.ContextExecutor, *AttributePage) error

	attributePageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributePageType                 = reflect.TypeOf(&AttributePage{})
	attributePageMapping              = queries.MakeStructMapping(attributePageType)
	attributePagePrimaryKeyMapping, _ = queries.BindMapping(attributePageType, attributePageMapping, attributePagePrimaryKeyColumns)
	attributePageInsertCacheMut       sync.RWMutex
	attributePageInsertCache          = make(map[string]insertCache)
	attributePageUpdateCacheMut       sync.RWMutex
	attributePageUpdateCache          = make(map[string]updateCache)
	attributePageUpsertCacheMut       sync.RWMutex
	attributePageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var attributePageAfterSelectHooks []AttributePageHook

var attributePageBeforeInsertHooks []AttributePageHook
var attributePageAfterInsertHooks []AttributePageHook

var attributePageBeforeUpdateHooks []AttributePageHook
var attributePageAfterUpdateHooks []AttributePageHook

var attributePageBeforeDeleteHooks []AttributePageHook
var attributePageAfterDeleteHooks []AttributePageHook

var attributePageBeforeUpsertHooks []AttributePageHook
var attributePageAfterUpsertHooks []AttributePageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AttributePage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributePageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AttributePage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributePageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AttributePage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributePageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AttributePage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributePageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AttributePage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributePageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AttributePage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributePageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AttributePage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributePageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AttributePage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributePageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AttributePage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributePageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAttributePageHook registers your hook function for all future operations.
func AddAttributePageHook(hookPoint boil.HookPoint, attributePageHook AttributePageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		attributePageAfterSelectHooks = append(attributePageAfterSelectHooks, attributePageHook)
	case boil.BeforeInsertHook:
		attributePageBeforeInsertHooks = append(attributePageBeforeInsertHooks, attributePageHook)
	case boil.AfterInsertHook:
		attributePageAfterInsertHooks = append(attributePageAfterInsertHooks, attributePageHook)
	case boil.BeforeUpdateHook:
		attributePageBeforeUpdateHooks = append(attributePageBeforeUpdateHooks, attributePageHook)
	case boil.AfterUpdateHook:
		attributePageAfterUpdateHooks = append(attributePageAfterUpdateHooks, attributePageHook)
	case boil.BeforeDeleteHook:
		attributePageBeforeDeleteHooks = append(attributePageBeforeDeleteHooks, attributePageHook)
	case boil.AfterDeleteHook:
		attributePageAfterDeleteHooks = append(attributePageAfterDeleteHooks, attributePageHook)
	case boil.BeforeUpsertHook:
		attributePageBeforeUpsertHooks = append(attributePageBeforeUpsertHooks, attributePageHook)
	case boil.AfterUpsertHook:
		attributePageAfterUpsertHooks = append(attributePageAfterUpsertHooks, attributePageHook)
	}
}

// One returns a single attributePage record from the query.
func (q attributePageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AttributePage, error) {
	o := &AttributePage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for attribute_pages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AttributePage records from the query.
func (q attributePageQuery) All(ctx context.Context, exec boil.ContextExecutor) (AttributePageSlice, error) {
	var o []*AttributePage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AttributePage slice")
	}

	if len(attributePageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AttributePage records in the query.
func (q attributePageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count attribute_pages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attributePageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if attribute_pages exists")
	}

	return count > 0, nil
}

// PagetypeidPageType pointed to by the foreign key.
func (o *AttributePage) PagetypeidPageType(mods ...qm.QueryMod) pageTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Pagetypeid),
	}

	queryMods = append(queryMods, mods...)

	return PageTypes(queryMods...)
}

// AssignmentidAssignedPageAttributes retrieves all the assigned_page_attribute's AssignedPageAttributes with an executor via assignmentid column.
func (o *AttributePage) AssignmentidAssignedPageAttributes(mods ...qm.QueryMod) assignedPageAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_page_attributes\".\"assignmentid\"=?", o.ID),
	)

	return AssignedPageAttributes(queryMods...)
}

// LoadPagetypeidPageType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attributePageL) LoadPagetypeidPageType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributePage interface{}, mods queries.Applicator) error {
	var slice []*AttributePage
	var object *AttributePage

	if singular {
		var ok bool
		object, ok = maybeAttributePage.(*AttributePage)
		if !ok {
			object = new(AttributePage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributePage))
			}
		}
	} else {
		s, ok := maybeAttributePage.(*[]*AttributePage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributePage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributePageR{}
		}
		if !queries.IsNil(object.Pagetypeid) {
			args = append(args, object.Pagetypeid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributePageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Pagetypeid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Pagetypeid) {
				args = append(args, obj.Pagetypeid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`page_types`),
		qm.WhereIn(`page_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PageType")
	}

	var resultSlice []*PageType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PageType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for page_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for page_types")
	}

	if len(pageTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PagetypeidPageType = foreign
		if foreign.R == nil {
			foreign.R = &pageTypeR{}
		}
		foreign.R.PagetypeidAttributePages = append(foreign.R.PagetypeidAttributePages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Pagetypeid, foreign.ID) {
				local.R.PagetypeidPageType = foreign
				if foreign.R == nil {
					foreign.R = &pageTypeR{}
				}
				foreign.R.PagetypeidAttributePages = append(foreign.R.PagetypeidAttributePages, local)
				break
			}
		}
	}

	return nil
}

// LoadAssignmentidAssignedPageAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributePageL) LoadAssignmentidAssignedPageAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributePage interface{}, mods queries.Applicator) error {
	var slice []*AttributePage
	var object *AttributePage

	if singular {
		var ok bool
		object, ok = maybeAttributePage.(*AttributePage)
		if !ok {
			object = new(AttributePage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributePage))
			}
		}
	} else {
		s, ok := maybeAttributePage.(*[]*AttributePage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributePage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributePage))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributePageR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributePageR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_page_attributes`),
		qm.WhereIn(`assigned_page_attributes.assignmentid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_page_attributes")
	}

	var resultSlice []*AssignedPageAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_page_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_page_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_page_attributes")
	}

	if len(assignedPageAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignmentidAssignedPageAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedPageAttributeR{}
			}
			foreign.R.AssignmentidAttributePage = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Assignmentid) {
				local.R.AssignmentidAssignedPageAttributes = append(local.R.AssignmentidAssignedPageAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &assignedPageAttributeR{}
				}
				foreign.R.AssignmentidAttributePage = local
				break
			}
		}
	}

	return nil
}

// SetPagetypeidPageType of the attributePage to the related item.
// Sets o.R.PagetypeidPageType to related.
// Adds o to related.R.PagetypeidAttributePages.
func (o *AttributePage) SetPagetypeidPageType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *PageType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attribute_pages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"pagetypeid"}),
		strmangle.WhereClause("\"", "\"", 2, attributePagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Pagetypeid, related.ID)
	if o.R == nil {
		o.R = &attributePageR{
			PagetypeidPageType: related,
		}
	} else {
		o.R.PagetypeidPageType = related
	}

	if related.R == nil {
		related.R = &pageTypeR{
			PagetypeidAttributePages: AttributePageSlice{o},
		}
	} else {
		related.R.PagetypeidAttributePages = append(related.R.PagetypeidAttributePages, o)
	}

	return nil
}

// RemovePagetypeidPageType relationship.
// Sets o.R.PagetypeidPageType to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AttributePage) RemovePagetypeidPageType(ctx context.Context, exec boil.ContextExecutor, related *PageType) error {
	var err error

	queries.SetScanner(&o.Pagetypeid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("pagetypeid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.PagetypeidPageType = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PagetypeidAttributePages {
		if queries.Equal(o.Pagetypeid, ri.Pagetypeid) {
			continue
		}

		ln := len(related.R.PagetypeidAttributePages)
		if ln > 1 && i < ln-1 {
			related.R.PagetypeidAttributePages[i] = related.R.PagetypeidAttributePages[ln-1]
		}
		related.R.PagetypeidAttributePages = related.R.PagetypeidAttributePages[:ln-1]
		break
	}
	return nil
}

// AddAssignmentidAssignedPageAttributes adds the given related objects to the existing relationships
// of the attribute_page, optionally inserting them as new records.
// Appends related to o.R.AssignmentidAssignedPageAttributes.
// Sets related.R.AssignmentidAttributePage appropriately.
func (o *AttributePage) AddAssignmentidAssignedPageAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedPageAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Assignmentid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_page_attributes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assignmentid"}),
				strmangle.WhereClause("\"", "\"", 2, assignedPageAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Assignmentid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &attributePageR{
			AssignmentidAssignedPageAttributes: related,
		}
	} else {
		o.R.AssignmentidAssignedPageAttributes = append(o.R.AssignmentidAssignedPageAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedPageAttributeR{
				AssignmentidAttributePage: o,
			}
		} else {
			rel.R.AssignmentidAttributePage = o
		}
	}
	return nil
}

// SetAssignmentidAssignedPageAttributes removes all previously related items of the
// attribute_page replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssignmentidAttributePage's AssignmentidAssignedPageAttributes accordingly.
// Replaces o.R.AssignmentidAssignedPageAttributes with related.
// Sets related.R.AssignmentidAttributePage's AssignmentidAssignedPageAttributes accordingly.
func (o *AttributePage) SetAssignmentidAssignedPageAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedPageAttribute) error {
	query := "update \"assigned_page_attributes\" set \"assignmentid\" = null where \"assignmentid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssignmentidAssignedPageAttributes {
			queries.SetScanner(&rel.Assignmentid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssignmentidAttributePage = nil
		}
		o.R.AssignmentidAssignedPageAttributes = nil
	}

	return o.AddAssignmentidAssignedPageAttributes(ctx, exec, insert, related...)
}

// RemoveAssignmentidAssignedPageAttributes relationships from objects passed in.
// Removes related items from R.AssignmentidAssignedPageAttributes (uses pointer comparison, removal does not keep order)
// Sets related.R.AssignmentidAttributePage.
func (o *AttributePage) RemoveAssignmentidAssignedPageAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*AssignedPageAttribute) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Assignmentid, nil)
		if rel.R != nil {
			rel.R.AssignmentidAttributePage = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("assignmentid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssignmentidAssignedPageAttributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssignmentidAssignedPageAttributes)
			if ln > 1 && i < ln-1 {
				o.R.AssignmentidAssignedPageAttributes[i] = o.R.AssignmentidAssignedPageAttributes[ln-1]
			}
			o.R.AssignmentidAssignedPageAttributes = o.R.AssignmentidAssignedPageAttributes[:ln-1]
			break
		}
	}

	return nil
}

// AttributePages retrieves all the records using an executor.
func AttributePages(mods ...qm.QueryMod) attributePageQuery {
	mods = append(mods, qm.From("\"attribute_pages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"attribute_pages\".*"})
	}

	return attributePageQuery{q}
}

// FindAttributePage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttributePage(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AttributePage, error) {
	attributePageObj := &AttributePage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attribute_pages\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, attributePageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from attribute_pages")
	}

	if err = attributePageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return attributePageObj, err
	}

	return attributePageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AttributePage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attribute_pages provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributePageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributePageInsertCacheMut.RLock()
	cache, cached := attributePageInsertCache[key]
	attributePageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributePageAllColumns,
			attributePageColumnsWithDefault,
			attributePageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributePageType, attributePageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributePageType, attributePageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attribute_pages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attribute_pages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into attribute_pages")
	}

	if !cached {
		attributePageInsertCacheMut.Lock()
		attributePageInsertCache[key] = cache
		attributePageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AttributePage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AttributePage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	attributePageUpdateCacheMut.RLock()
	cache, cached := attributePageUpdateCache[key]
	attributePageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributePageAllColumns,
			attributePagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update attribute_pages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attribute_pages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributePagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributePageType, attributePageMapping, append(wl, attributePagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update attribute_pages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for attribute_pages")
	}

	if !cached {
		attributePageUpdateCacheMut.Lock()
		attributePageUpdateCache[key] = cache
		attributePageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q attributePageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for attribute_pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for attribute_pages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributePageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributePagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attribute_pages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributePagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in attributePage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all attributePage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AttributePage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attribute_pages provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributePageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributePageUpsertCacheMut.RLock()
	cache, cached := attributePageUpsertCache[key]
	attributePageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attributePageAllColumns,
			attributePageColumnsWithDefault,
			attributePageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			attributePageAllColumns,
			attributePagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert attribute_pages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(attributePagePrimaryKeyColumns))
			copy(conflict, attributePagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"attribute_pages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(attributePageType, attributePageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributePageType, attributePageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert attribute_pages")
	}

	if !cached {
		attributePageUpsertCacheMut.Lock()
		attributePageUpsertCache[key] = cache
		attributePageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AttributePage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AttributePage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AttributePage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributePagePrimaryKeyMapping)
	sql := "DELETE FROM \"attribute_pages\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from attribute_pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for attribute_pages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attributePageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no attributePageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attribute_pages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attribute_pages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributePageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(attributePageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributePagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attribute_pages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributePagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attributePage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attribute_pages")
	}

	if len(attributePageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AttributePage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAttributePage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributePageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributePageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributePagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attribute_pages\".* FROM \"attribute_pages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributePagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AttributePageSlice")
	}

	*o = slice

	return nil
}

// AttributePageExists checks if the AttributePage row exists.
func AttributePageExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attribute_pages\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if attribute_pages exists")
	}

	return exists, nil
}

// Exists checks if the AttributePage row exists.
func (o *AttributePage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AttributePageExists(ctx, exec, o.ID)
}
