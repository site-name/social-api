// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCheckoutLines(t *testing.T) {
	t.Parallel()

	query := CheckoutLines()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCheckoutLinesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckoutLinesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CheckoutLines().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckoutLinesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CheckoutLineSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckoutLinesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CheckoutLineExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CheckoutLine exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CheckoutLineExists to return true, but got false.")
	}
}

func testCheckoutLinesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	checkoutLineFound, err := FindCheckoutLine(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if checkoutLineFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCheckoutLinesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CheckoutLines().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCheckoutLinesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CheckoutLines().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCheckoutLinesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	checkoutLineOne := &CheckoutLine{}
	checkoutLineTwo := &CheckoutLine{}
	if err = randomize.Struct(seed, checkoutLineOne, checkoutLineDBTypes, false, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}
	if err = randomize.Struct(seed, checkoutLineTwo, checkoutLineDBTypes, false, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = checkoutLineOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = checkoutLineTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CheckoutLines().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCheckoutLinesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	checkoutLineOne := &CheckoutLine{}
	checkoutLineTwo := &CheckoutLine{}
	if err = randomize.Struct(seed, checkoutLineOne, checkoutLineDBTypes, false, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}
	if err = randomize.Struct(seed, checkoutLineTwo, checkoutLineDBTypes, false, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = checkoutLineOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = checkoutLineTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func checkoutLineBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutLine) error {
	*o = CheckoutLine{}
	return nil
}

func checkoutLineAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutLine) error {
	*o = CheckoutLine{}
	return nil
}

func checkoutLineAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutLine) error {
	*o = CheckoutLine{}
	return nil
}

func checkoutLineBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutLine) error {
	*o = CheckoutLine{}
	return nil
}

func checkoutLineAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutLine) error {
	*o = CheckoutLine{}
	return nil
}

func checkoutLineBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutLine) error {
	*o = CheckoutLine{}
	return nil
}

func checkoutLineAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutLine) error {
	*o = CheckoutLine{}
	return nil
}

func checkoutLineBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutLine) error {
	*o = CheckoutLine{}
	return nil
}

func checkoutLineAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutLine) error {
	*o = CheckoutLine{}
	return nil
}

func testCheckoutLinesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CheckoutLine{}
	o := &CheckoutLine{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CheckoutLine object: %s", err)
	}

	AddCheckoutLineHook(boil.BeforeInsertHook, checkoutLineBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	checkoutLineBeforeInsertHooks = []CheckoutLineHook{}

	AddCheckoutLineHook(boil.AfterInsertHook, checkoutLineAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	checkoutLineAfterInsertHooks = []CheckoutLineHook{}

	AddCheckoutLineHook(boil.AfterSelectHook, checkoutLineAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	checkoutLineAfterSelectHooks = []CheckoutLineHook{}

	AddCheckoutLineHook(boil.BeforeUpdateHook, checkoutLineBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	checkoutLineBeforeUpdateHooks = []CheckoutLineHook{}

	AddCheckoutLineHook(boil.AfterUpdateHook, checkoutLineAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	checkoutLineAfterUpdateHooks = []CheckoutLineHook{}

	AddCheckoutLineHook(boil.BeforeDeleteHook, checkoutLineBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	checkoutLineBeforeDeleteHooks = []CheckoutLineHook{}

	AddCheckoutLineHook(boil.AfterDeleteHook, checkoutLineAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	checkoutLineAfterDeleteHooks = []CheckoutLineHook{}

	AddCheckoutLineHook(boil.BeforeUpsertHook, checkoutLineBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	checkoutLineBeforeUpsertHooks = []CheckoutLineHook{}

	AddCheckoutLineHook(boil.AfterUpsertHook, checkoutLineAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	checkoutLineAfterUpsertHooks = []CheckoutLineHook{}
}

func testCheckoutLinesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCheckoutLinesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(checkoutLineColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCheckoutLineToOneCheckoutUsingCheckout(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CheckoutLine
	var foreign Checkout

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CheckoutID, foreign.Token)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Checkout().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.Token, foreign.Token) {
		t.Errorf("want: %v, got %v", foreign.Token, check.Token)
	}

	ranAfterSelectHook := false
	AddCheckoutHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Checkout) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CheckoutLineSlice{&local}
	if err = local.L.LoadCheckout(ctx, tx, false, (*[]*CheckoutLine)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Checkout == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Checkout = nil
	if err = local.L.LoadCheckout(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Checkout == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCheckoutLineToOneProductVariantUsingVariant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CheckoutLine
	var foreign ProductVariant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.VariantID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductVariantHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CheckoutLineSlice{&local}
	if err = local.L.LoadVariant(ctx, tx, false, (*[]*CheckoutLine)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Variant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variant = nil
	if err = local.L.LoadVariant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Variant == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCheckoutLineToOneSetOpCheckoutUsingCheckout(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutLine
	var b, c Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutLineDBTypes, false, strmangle.SetComplement(checkoutLinePrimaryKeyColumns, checkoutLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Checkout{&b, &c} {
		err = a.SetCheckout(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Checkout != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CheckoutLines[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CheckoutID, x.Token) {
			t.Error("foreign key was wrong value", a.CheckoutID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CheckoutID))
		reflect.Indirect(reflect.ValueOf(&a.CheckoutID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CheckoutID, x.Token) {
			t.Error("foreign key was wrong value", a.CheckoutID, x.Token)
		}
	}
}

func testCheckoutLineToOneRemoveOpCheckoutUsingCheckout(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutLine
	var b Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutLineDBTypes, false, strmangle.SetComplement(checkoutLinePrimaryKeyColumns, checkoutLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCheckout(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCheckout(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Checkout().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Checkout != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CheckoutID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CheckoutLines) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutLineToOneSetOpProductVariantUsingVariant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutLine
	var b, c ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutLineDBTypes, false, strmangle.SetComplement(checkoutLinePrimaryKeyColumns, checkoutLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductVariant{&b, &c} {
		err = a.SetVariant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VariantCheckoutLines[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.VariantID, x.ID) {
			t.Error("foreign key was wrong value", a.VariantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariantID))
		reflect.Indirect(reflect.ValueOf(&a.VariantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.VariantID, x.ID) {
			t.Error("foreign key was wrong value", a.VariantID, x.ID)
		}
	}
}

func testCheckoutLineToOneRemoveOpProductVariantUsingVariant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutLine
	var b ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutLineDBTypes, false, strmangle.SetComplement(checkoutLinePrimaryKeyColumns, checkoutLineColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetVariant(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveVariant(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Variant().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Variant != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.VariantID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.VariantCheckoutLines) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutLinesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCheckoutLinesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CheckoutLineSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCheckoutLinesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CheckoutLines().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	checkoutLineDBTypes = map[string]string{`ID`: `character varying`, `CreateAt`: `bigint`, `CheckoutID`: `character varying`, `VariantID`: `character varying`, `Quantity`: `integer`}
	_                   = bytes.MinRead
)

func testCheckoutLinesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(checkoutLinePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(checkoutLineAllColumns) == len(checkoutLinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCheckoutLinesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(checkoutLineAllColumns) == len(checkoutLinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutLine{}
	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLineColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, checkoutLineDBTypes, true, checkoutLinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(checkoutLineAllColumns, checkoutLinePrimaryKeyColumns) {
		fields = checkoutLineAllColumns
	} else {
		fields = strmangle.SetComplement(
			checkoutLineAllColumns,
			checkoutLinePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CheckoutLineSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCheckoutLinesUpsert(t *testing.T) {
	t.Parallel()

	if len(checkoutLineAllColumns) == len(checkoutLinePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CheckoutLine{}
	if err = randomize.Struct(seed, &o, checkoutLineDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CheckoutLine: %s", err)
	}

	count, err := CheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, checkoutLineDBTypes, false, checkoutLinePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CheckoutLine struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CheckoutLine: %s", err)
	}

	count, err = CheckoutLines().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
