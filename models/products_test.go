// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testProducts(t *testing.T) {
	t.Parallel()

	query := Products()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Products().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Products().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Products().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Products().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ProductExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Product exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ProductExists to return true, but got false.")
	}
}

func testProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	productFound, err := FindProduct(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if productFound == nil {
		t.Error("want a record, got nil")
	}
}

func testProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Products().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Products().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	productOne := &Product{}
	productTwo := &Product{}
	if err = randomize.Struct(seed, productOne, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}
	if err = randomize.Struct(seed, productTwo, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Products().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	productOne := &Product{}
	productTwo := &Product{}
	if err = randomize.Struct(seed, productOne, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}
	if err = randomize.Struct(seed, productTwo, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = productOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = productTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Products().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func productBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Product) error {
	*o = Product{}
	return nil
}

func productAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Product) error {
	*o = Product{}
	return nil
}

func productAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Product) error {
	*o = Product{}
	return nil
}

func productBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Product) error {
	*o = Product{}
	return nil
}

func productAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Product) error {
	*o = Product{}
	return nil
}

func productBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Product) error {
	*o = Product{}
	return nil
}

func productAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Product) error {
	*o = Product{}
	return nil
}

func productBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Product) error {
	*o = Product{}
	return nil
}

func productAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Product) error {
	*o = Product{}
	return nil
}

func testProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Product{}
	o := &Product{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, productDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Product object: %s", err)
	}

	AddProductHook(boil.BeforeInsertHook, productBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	productBeforeInsertHooks = []ProductHook{}

	AddProductHook(boil.AfterInsertHook, productAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	productAfterInsertHooks = []ProductHook{}

	AddProductHook(boil.AfterSelectHook, productAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	productAfterSelectHooks = []ProductHook{}

	AddProductHook(boil.BeforeUpdateHook, productBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	productBeforeUpdateHooks = []ProductHook{}

	AddProductHook(boil.AfterUpdateHook, productAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	productAfterUpdateHooks = []ProductHook{}

	AddProductHook(boil.BeforeDeleteHook, productBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	productBeforeDeleteHooks = []ProductHook{}

	AddProductHook(boil.AfterDeleteHook, productAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	productAfterDeleteHooks = []ProductHook{}

	AddProductHook(boil.BeforeUpsertHook, productBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	productBeforeUpsertHooks = []ProductHook{}

	AddProductHook(boil.AfterUpsertHook, productAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	productAfterUpsertHooks = []ProductHook{}
}

func testProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Products().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(productColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Products().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testProductToManyProductidAssignedProductAttributes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c AssignedProductAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedProductAttributeDBTypes, false, assignedProductAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedProductAttributeDBTypes, false, assignedProductAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidAssignedProductAttributes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductSlice{&a}
	if err = a.L.LoadProductidAssignedProductAttributes(ctx, tx, false, (*[]*Product)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidAssignedProductAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidAssignedProductAttributes = nil
	if err = a.L.LoadProductidAssignedProductAttributes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidAssignedProductAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductToManyProductidGiftcards(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c Giftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidGiftcards().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductSlice{&a}
	if err = a.L.LoadProductidGiftcards(ctx, tx, false, (*[]*Product)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidGiftcards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidGiftcards = nil
	if err = a.L.LoadProductidGiftcards(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidGiftcards); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductToManyProductidProductChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c ProductChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productChannelListingDBTypes, false, productChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productChannelListingDBTypes, false, productChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidProductChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductSlice{&a}
	if err = a.L.LoadProductidProductChannelListings(ctx, tx, false, (*[]*Product)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidProductChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidProductChannelListings = nil
	if err = a.L.LoadProductidProductChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidProductChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductToManyProductidProductCollections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c ProductCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productCollectionDBTypes, false, productCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productCollectionDBTypes, false, productCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidProductCollections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductSlice{&a}
	if err = a.L.LoadProductidProductCollections(ctx, tx, false, (*[]*Product)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidProductCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidProductCollections = nil
	if err = a.L.LoadProductidProductCollections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidProductCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductToManyProductidProductMedia(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c ProductMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productMediumDBTypes, false, productMediumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productMediumDBTypes, false, productMediumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidProductMedia().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductSlice{&a}
	if err = a.L.LoadProductidProductMedia(ctx, tx, false, (*[]*Product)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidProductMedia); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidProductMedia = nil
	if err = a.L.LoadProductidProductMedia(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidProductMedia); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductToManyProductidProductTranslations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c ProductTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productTranslationDBTypes, false, productTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productTranslationDBTypes, false, productTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidProductTranslations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductSlice{&a}
	if err = a.L.LoadProductidProductTranslations(ctx, tx, false, (*[]*Product)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidProductTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidProductTranslations = nil
	if err = a.L.LoadProductidProductTranslations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidProductTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductToManyProductidProductVariants(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidProductVariants().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductSlice{&a}
	if err = a.L.LoadProductidProductVariants(ctx, tx, false, (*[]*Product)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidProductVariants = nil
	if err = a.L.LoadProductidProductVariants(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidProductVariants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductToManyProductidSaleProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c SaleProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, saleProductDBTypes, false, saleProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleProductDBTypes, false, saleProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidSaleProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductSlice{&a}
	if err = a.L.LoadProductidSaleProducts(ctx, tx, false, (*[]*Product)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidSaleProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidSaleProducts = nil
	if err = a.L.LoadProductidSaleProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidSaleProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductToManyProductidShippingMethodExcludedProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c ShippingMethodExcludedProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shippingMethodExcludedProductDBTypes, false, shippingMethodExcludedProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidShippingMethodExcludedProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductSlice{&a}
	if err = a.L.LoadProductidShippingMethodExcludedProducts(ctx, tx, false, (*[]*Product)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidShippingMethodExcludedProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidShippingMethodExcludedProducts = nil
	if err = a.L.LoadProductidShippingMethodExcludedProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidShippingMethodExcludedProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductToManyProductidVoucherProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c VoucherProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voucherProductDBTypes, false, voucherProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherProductDBTypes, false, voucherProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Productid, a.ID)
	queries.Assign(&c.Productid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductidVoucherProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Productid, b.Productid) {
			bFound = true
		}
		if queries.Equal(v.Productid, c.Productid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ProductSlice{&a}
	if err = a.L.LoadProductidVoucherProducts(ctx, tx, false, (*[]*Product)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidVoucherProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductidVoucherProducts = nil
	if err = a.L.LoadProductidVoucherProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductidVoucherProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testProductToManyAddOpProductidAssignedProductAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e AssignedProductAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedProductAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedProductAttributeDBTypes, false, strmangle.SetComplement(assignedProductAttributePrimaryKeyColumns, assignedProductAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedProductAttribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidAssignedProductAttributes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidAssignedProductAttributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidAssignedProductAttributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidAssignedProductAttributes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductToManySetOpProductidAssignedProductAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e AssignedProductAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedProductAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedProductAttributeDBTypes, false, strmangle.SetComplement(assignedProductAttributePrimaryKeyColumns, assignedProductAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidAssignedProductAttributes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidAssignedProductAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidAssignedProductAttributes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidAssignedProductAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidAssignedProductAttributes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidAssignedProductAttributes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductToManyRemoveOpProductidAssignedProductAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e AssignedProductAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedProductAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedProductAttributeDBTypes, false, strmangle.SetComplement(assignedProductAttributePrimaryKeyColumns, assignedProductAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidAssignedProductAttributes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidAssignedProductAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidAssignedProductAttributes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidAssignedProductAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidAssignedProductAttributes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidAssignedProductAttributes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidAssignedProductAttributes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductToManyAddOpProductidGiftcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e Giftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Giftcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Giftcard{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidGiftcards(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidGiftcards[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidGiftcards[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidGiftcards().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductToManySetOpProductidGiftcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e Giftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Giftcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidGiftcards(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidGiftcards(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidGiftcards[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidGiftcards[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductToManyRemoveOpProductidGiftcards(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e Giftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Giftcard{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidGiftcards(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidGiftcards(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidGiftcards().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidGiftcards) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidGiftcards[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidGiftcards[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductToManyAddOpProductidProductChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productChannelListingDBTypes, false, strmangle.SetComplement(productChannelListingPrimaryKeyColumns, productChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidProductChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidProductChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidProductChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidProductChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductToManySetOpProductidProductChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productChannelListingDBTypes, false, strmangle.SetComplement(productChannelListingPrimaryKeyColumns, productChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidProductChannelListings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidProductChannelListings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidProductChannelListings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidProductChannelListings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductToManyRemoveOpProductidProductChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productChannelListingDBTypes, false, strmangle.SetComplement(productChannelListingPrimaryKeyColumns, productChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidProductChannelListings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidProductChannelListings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidProductChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidProductChannelListings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidProductChannelListings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidProductChannelListings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductToManyAddOpProductidProductCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productCollectionDBTypes, false, strmangle.SetComplement(productCollectionPrimaryKeyColumns, productCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductCollection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidProductCollections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidProductCollections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidProductCollections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidProductCollections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductToManySetOpProductidProductCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productCollectionDBTypes, false, strmangle.SetComplement(productCollectionPrimaryKeyColumns, productCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidProductCollections(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidProductCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidProductCollections(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidProductCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidProductCollections[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidProductCollections[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductToManyRemoveOpProductidProductCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productCollectionDBTypes, false, strmangle.SetComplement(productCollectionPrimaryKeyColumns, productCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidProductCollections(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidProductCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidProductCollections(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidProductCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidProductCollections) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidProductCollections[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidProductCollections[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductToManyAddOpProductidProductMedia(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductMedium{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productMediumDBTypes, false, strmangle.SetComplement(productMediumPrimaryKeyColumns, productMediumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductMedium{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidProductMedia(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidProductMedia[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidProductMedia[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidProductMedia().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductToManySetOpProductidProductMedia(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductMedium{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productMediumDBTypes, false, strmangle.SetComplement(productMediumPrimaryKeyColumns, productMediumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidProductMedia(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidProductMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidProductMedia(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidProductMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidProductMedia[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidProductMedia[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductToManyRemoveOpProductidProductMedia(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductMedium{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productMediumDBTypes, false, strmangle.SetComplement(productMediumPrimaryKeyColumns, productMediumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidProductMedia(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidProductMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidProductMedia(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidProductMedia().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidProductMedia) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidProductMedia[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidProductMedia[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductToManyAddOpProductidProductTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productTranslationDBTypes, false, strmangle.SetComplement(productTranslationPrimaryKeyColumns, productTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductTranslation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidProductTranslations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidProductTranslations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidProductTranslations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidProductTranslations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductToManySetOpProductidProductTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productTranslationDBTypes, false, strmangle.SetComplement(productTranslationPrimaryKeyColumns, productTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidProductTranslations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidProductTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidProductTranslations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidProductTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidProductTranslations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidProductTranslations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductToManyRemoveOpProductidProductTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productTranslationDBTypes, false, strmangle.SetComplement(productTranslationPrimaryKeyColumns, productTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidProductTranslations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidProductTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidProductTranslations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidProductTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidProductTranslations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidProductTranslations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidProductTranslations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductToManyAddOpProductidProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductVariant{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidProductVariants(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidProductVariants[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidProductVariants[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidProductVariants().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductToManySetOpProductidProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidProductVariants(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidProductVariants(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidProductVariants[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidProductVariants[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductToManyRemoveOpProductidProductVariants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductVariant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidProductVariants(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidProductVariants(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidProductVariants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidProductVariants) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidProductVariants[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidProductVariants[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductToManyAddOpProductidSaleProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e SaleProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleProductDBTypes, false, strmangle.SetComplement(saleProductPrimaryKeyColumns, saleProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SaleProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidSaleProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidSaleProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidSaleProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidSaleProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductToManySetOpProductidSaleProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e SaleProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleProductDBTypes, false, strmangle.SetComplement(saleProductPrimaryKeyColumns, saleProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidSaleProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidSaleProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidSaleProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidSaleProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidSaleProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidSaleProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductToManyRemoveOpProductidSaleProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e SaleProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleProductDBTypes, false, strmangle.SetComplement(saleProductPrimaryKeyColumns, saleProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidSaleProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidSaleProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidSaleProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidSaleProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidSaleProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidSaleProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidSaleProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductToManyAddOpProductidShippingMethodExcludedProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ShippingMethodExcludedProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingMethodExcludedProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingMethodExcludedProductDBTypes, false, strmangle.SetComplement(shippingMethodExcludedProductPrimaryKeyColumns, shippingMethodExcludedProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ShippingMethodExcludedProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidShippingMethodExcludedProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidShippingMethodExcludedProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidShippingMethodExcludedProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidShippingMethodExcludedProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductToManySetOpProductidShippingMethodExcludedProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ShippingMethodExcludedProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingMethodExcludedProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingMethodExcludedProductDBTypes, false, strmangle.SetComplement(shippingMethodExcludedProductPrimaryKeyColumns, shippingMethodExcludedProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidShippingMethodExcludedProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidShippingMethodExcludedProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidShippingMethodExcludedProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidShippingMethodExcludedProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductToManyRemoveOpProductidShippingMethodExcludedProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e ShippingMethodExcludedProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ShippingMethodExcludedProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, shippingMethodExcludedProductDBTypes, false, strmangle.SetComplement(shippingMethodExcludedProductPrimaryKeyColumns, shippingMethodExcludedProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidShippingMethodExcludedProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidShippingMethodExcludedProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidShippingMethodExcludedProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidShippingMethodExcludedProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidShippingMethodExcludedProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidShippingMethodExcludedProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductToManyAddOpProductidVoucherProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e VoucherProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherProductDBTypes, false, strmangle.SetComplement(voucherProductPrimaryKeyColumns, voucherProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VoucherProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductidVoucherProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Productid) {
			t.Error("foreign key was wrong value", a.ID, first.Productid)
		}
		if !queries.Equal(a.ID, second.Productid) {
			t.Error("foreign key was wrong value", a.ID, second.Productid)
		}

		if first.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ProductidProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductidVoucherProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductidVoucherProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductidVoucherProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testProductToManySetOpProductidVoucherProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e VoucherProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherProductDBTypes, false, strmangle.SetComplement(voucherProductPrimaryKeyColumns, voucherProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetProductidVoucherProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidVoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetProductidVoucherProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidVoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Productid) {
		t.Error("foreign key was wrong value", a.ID, d.Productid)
	}
	if !queries.Equal(a.ID, e.Productid) {
		t.Error("foreign key was wrong value", a.ID, e.Productid)
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ProductidVoucherProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ProductidVoucherProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testProductToManyRemoveOpProductidVoucherProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Product
	var b, c, d, e VoucherProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherProductDBTypes, false, strmangle.SetComplement(voucherProductPrimaryKeyColumns, voucherProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddProductidVoucherProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ProductidVoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveProductidVoucherProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ProductidVoucherProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Productid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Productid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ProductidProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ProductidProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ProductidVoucherProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ProductidVoucherProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ProductidVoucherProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Products().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	productDBTypes = map[string]string{`ID`: `character varying`, `Producttypeid`: `character varying`, `Name`: `character varying`, `Slug`: `character varying`, `Description`: `text`, `Descriptionplaintext`: `text`, `Categoryid`: `character varying`, `Createat`: `bigint`, `Updateat`: `bigint`, `Chargetaxes`: `boolean`, `Weight`: `real`, `Weightunit`: `text`, `Defaultvariantid`: `character varying`, `Rating`: `real`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`, `Seotitle`: `character varying`, `Seodescription`: `character varying`}
	_              = bytes.MinRead
)

func testProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(productPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(productAllColumns) == len(productPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Products().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productDBTypes, true, productPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(productAllColumns) == len(productPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Product{}
	if err = randomize.Struct(seed, o, productDBTypes, true, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Products().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, productDBTypes, true, productPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(productAllColumns, productPrimaryKeyColumns) {
		fields = productAllColumns
	} else {
		fields = strmangle.SetComplement(
			productAllColumns,
			productPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(productAllColumns) == len(productPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Product{}
	if err = randomize.Struct(seed, &o, productDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Product: %s", err)
	}

	count, err := Products().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, productDBTypes, false, productPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Product: %s", err)
	}

	count, err = Products().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
