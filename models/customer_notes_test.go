// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCustomerNotes(t *testing.T) {
	t.Parallel()

	query := CustomerNotes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCustomerNotesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomerNotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomerNotesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CustomerNotes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomerNotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomerNotesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CustomerNoteSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CustomerNotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCustomerNotesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CustomerNoteExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CustomerNote exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CustomerNoteExists to return true, but got false.")
	}
}

func testCustomerNotesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	customerNoteFound, err := FindCustomerNote(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if customerNoteFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCustomerNotesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CustomerNotes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCustomerNotesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CustomerNotes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCustomerNotesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	customerNoteOne := &CustomerNote{}
	customerNoteTwo := &CustomerNote{}
	if err = randomize.Struct(seed, customerNoteOne, customerNoteDBTypes, false, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}
	if err = randomize.Struct(seed, customerNoteTwo, customerNoteDBTypes, false, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = customerNoteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = customerNoteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CustomerNotes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCustomerNotesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	customerNoteOne := &CustomerNote{}
	customerNoteTwo := &CustomerNote{}
	if err = randomize.Struct(seed, customerNoteOne, customerNoteDBTypes, false, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}
	if err = randomize.Struct(seed, customerNoteTwo, customerNoteDBTypes, false, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = customerNoteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = customerNoteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerNotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func customerNoteBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerNote) error {
	*o = CustomerNote{}
	return nil
}

func customerNoteAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerNote) error {
	*o = CustomerNote{}
	return nil
}

func customerNoteAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CustomerNote) error {
	*o = CustomerNote{}
	return nil
}

func customerNoteBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CustomerNote) error {
	*o = CustomerNote{}
	return nil
}

func customerNoteAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CustomerNote) error {
	*o = CustomerNote{}
	return nil
}

func customerNoteBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CustomerNote) error {
	*o = CustomerNote{}
	return nil
}

func customerNoteAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CustomerNote) error {
	*o = CustomerNote{}
	return nil
}

func customerNoteBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerNote) error {
	*o = CustomerNote{}
	return nil
}

func customerNoteAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CustomerNote) error {
	*o = CustomerNote{}
	return nil
}

func testCustomerNotesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CustomerNote{}
	o := &CustomerNote{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, customerNoteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CustomerNote object: %s", err)
	}

	AddCustomerNoteHook(boil.BeforeInsertHook, customerNoteBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	customerNoteBeforeInsertHooks = []CustomerNoteHook{}

	AddCustomerNoteHook(boil.AfterInsertHook, customerNoteAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	customerNoteAfterInsertHooks = []CustomerNoteHook{}

	AddCustomerNoteHook(boil.AfterSelectHook, customerNoteAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	customerNoteAfterSelectHooks = []CustomerNoteHook{}

	AddCustomerNoteHook(boil.BeforeUpdateHook, customerNoteBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	customerNoteBeforeUpdateHooks = []CustomerNoteHook{}

	AddCustomerNoteHook(boil.AfterUpdateHook, customerNoteAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	customerNoteAfterUpdateHooks = []CustomerNoteHook{}

	AddCustomerNoteHook(boil.BeforeDeleteHook, customerNoteBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	customerNoteBeforeDeleteHooks = []CustomerNoteHook{}

	AddCustomerNoteHook(boil.AfterDeleteHook, customerNoteAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	customerNoteAfterDeleteHooks = []CustomerNoteHook{}

	AddCustomerNoteHook(boil.BeforeUpsertHook, customerNoteBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	customerNoteBeforeUpsertHooks = []CustomerNoteHook{}

	AddCustomerNoteHook(boil.AfterUpsertHook, customerNoteAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	customerNoteAfterUpsertHooks = []CustomerNoteHook{}
}

func testCustomerNotesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerNotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCustomerNotesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(customerNoteColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CustomerNotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCustomerNoteToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CustomerNote
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CustomerNoteSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*CustomerNote)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCustomerNoteToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CustomerNote
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, customerNoteDBTypes, false, strmangle.SetComplement(customerNotePrimaryKeyColumns, customerNoteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CustomerNotes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testCustomerNoteToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CustomerNote
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, customerNoteDBTypes, false, strmangle.SetComplement(customerNotePrimaryKeyColumns, customerNoteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CustomerNotes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCustomerNotesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCustomerNotesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CustomerNoteSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCustomerNotesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CustomerNotes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	customerNoteDBTypes = map[string]string{`ID`: `uuid`, `UserID`: `uuid`, `Date`: `bigint`, `Content`: `text`, `IsPublic`: `boolean`, `CustomerID`: `uuid`}
	_                   = bytes.MinRead
)

func testCustomerNotesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(customerNotePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(customerNoteAllColumns) == len(customerNotePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerNotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNotePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCustomerNotesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(customerNoteAllColumns) == len(customerNotePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CustomerNote{}
	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNoteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CustomerNotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, customerNoteDBTypes, true, customerNotePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(customerNoteAllColumns, customerNotePrimaryKeyColumns) {
		fields = customerNoteAllColumns
	} else {
		fields = strmangle.SetComplement(
			customerNoteAllColumns,
			customerNotePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CustomerNoteSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCustomerNotesUpsert(t *testing.T) {
	t.Parallel()

	if len(customerNoteAllColumns) == len(customerNotePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CustomerNote{}
	if err = randomize.Struct(seed, &o, customerNoteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CustomerNote: %s", err)
	}

	count, err := CustomerNotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, customerNoteDBTypes, false, customerNotePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CustomerNote struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CustomerNote: %s", err)
	}

	count, err = CustomerNotes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
