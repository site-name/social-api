// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCollections(t *testing.T) {
	t.Parallel()

	query := Collections()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCollectionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Collections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollectionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Collections().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Collections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollectionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CollectionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Collections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollectionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CollectionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Collection exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CollectionExists to return true, but got false.")
	}
}

func testCollectionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	collectionFound, err := FindCollection(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if collectionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCollectionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Collections().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCollectionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Collections().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCollectionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	collectionOne := &Collection{}
	collectionTwo := &Collection{}
	if err = randomize.Struct(seed, collectionOne, collectionDBTypes, false, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}
	if err = randomize.Struct(seed, collectionTwo, collectionDBTypes, false, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = collectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = collectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Collections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCollectionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	collectionOne := &Collection{}
	collectionTwo := &Collection{}
	if err = randomize.Struct(seed, collectionOne, collectionDBTypes, false, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}
	if err = randomize.Struct(seed, collectionTwo, collectionDBTypes, false, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = collectionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = collectionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Collections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func collectionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
	*o = Collection{}
	return nil
}

func collectionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
	*o = Collection{}
	return nil
}

func collectionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
	*o = Collection{}
	return nil
}

func collectionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
	*o = Collection{}
	return nil
}

func collectionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
	*o = Collection{}
	return nil
}

func collectionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
	*o = Collection{}
	return nil
}

func collectionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
	*o = Collection{}
	return nil
}

func collectionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
	*o = Collection{}
	return nil
}

func collectionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
	*o = Collection{}
	return nil
}

func testCollectionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Collection{}
	o := &Collection{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, collectionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Collection object: %s", err)
	}

	AddCollectionHook(boil.BeforeInsertHook, collectionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	collectionBeforeInsertHooks = []CollectionHook{}

	AddCollectionHook(boil.AfterInsertHook, collectionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	collectionAfterInsertHooks = []CollectionHook{}

	AddCollectionHook(boil.AfterSelectHook, collectionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	collectionAfterSelectHooks = []CollectionHook{}

	AddCollectionHook(boil.BeforeUpdateHook, collectionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	collectionBeforeUpdateHooks = []CollectionHook{}

	AddCollectionHook(boil.AfterUpdateHook, collectionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	collectionAfterUpdateHooks = []CollectionHook{}

	AddCollectionHook(boil.BeforeDeleteHook, collectionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	collectionBeforeDeleteHooks = []CollectionHook{}

	AddCollectionHook(boil.AfterDeleteHook, collectionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	collectionAfterDeleteHooks = []CollectionHook{}

	AddCollectionHook(boil.BeforeUpsertHook, collectionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	collectionBeforeUpsertHooks = []CollectionHook{}

	AddCollectionHook(boil.AfterUpsertHook, collectionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	collectionAfterUpsertHooks = []CollectionHook{}
}

func testCollectionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Collections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCollectionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(collectionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Collections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCollectionToManyCollectionChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c CollectionChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, collectionChannelListingDBTypes, false, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collectionChannelListingDBTypes, false, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CollectionID = a.ID
	c.CollectionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CollectionChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CollectionID == b.CollectionID {
			bFound = true
		}
		if v.CollectionID == c.CollectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CollectionSlice{&a}
	if err = a.L.LoadCollectionChannelListings(ctx, tx, false, (*[]*Collection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CollectionChannelListings = nil
	if err = a.L.LoadCollectionChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCollectionToManyCollectionTranslations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c CollectionTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, collectionTranslationDBTypes, false, collectionTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collectionTranslationDBTypes, false, collectionTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CollectionID = a.ID
	c.CollectionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CollectionTranslations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CollectionID == b.CollectionID {
			bFound = true
		}
		if v.CollectionID == c.CollectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CollectionSlice{&a}
	if err = a.L.LoadCollectionTranslations(ctx, tx, false, (*[]*Collection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CollectionTranslations = nil
	if err = a.L.LoadCollectionTranslations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CollectionTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCollectionToManyMenuItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CollectionID, a.ID)
	queries.Assign(&c.CollectionID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.MenuItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CollectionID, b.CollectionID) {
			bFound = true
		}
		if queries.Equal(v.CollectionID, c.CollectionID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CollectionSlice{&a}
	if err = a.L.LoadMenuItems(ctx, tx, false, (*[]*Collection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MenuItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MenuItems = nil
	if err = a.L.LoadMenuItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MenuItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCollectionToManyProductCollections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c ProductCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, productCollectionDBTypes, false, productCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productCollectionDBTypes, false, productCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CollectionID = a.ID
	c.CollectionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ProductCollections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CollectionID == b.CollectionID {
			bFound = true
		}
		if v.CollectionID == c.CollectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CollectionSlice{&a}
	if err = a.L.LoadProductCollections(ctx, tx, false, (*[]*Collection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ProductCollections = nil
	if err = a.L.LoadProductCollections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ProductCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCollectionToManySaleCollections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c SaleCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, saleCollectionDBTypes, false, saleCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleCollectionDBTypes, false, saleCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CollectionID = a.ID
	c.CollectionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SaleCollections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CollectionID == b.CollectionID {
			bFound = true
		}
		if v.CollectionID == c.CollectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CollectionSlice{&a}
	if err = a.L.LoadSaleCollections(ctx, tx, false, (*[]*Collection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SaleCollections = nil
	if err = a.L.LoadSaleCollections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCollectionToManyVoucherCollections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c VoucherCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, voucherCollectionDBTypes, false, voucherCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherCollectionDBTypes, false, voucherCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CollectionID = a.ID
	c.CollectionID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.VoucherCollections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CollectionID == b.CollectionID {
			bFound = true
		}
		if v.CollectionID == c.CollectionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CollectionSlice{&a}
	if err = a.L.LoadVoucherCollections(ctx, tx, false, (*[]*Collection)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucherCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VoucherCollections = nil
	if err = a.L.LoadVoucherCollections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VoucherCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCollectionToManyAddOpCollectionChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c, d, e CollectionChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CollectionChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, collectionChannelListingDBTypes, false, strmangle.SetComplement(collectionChannelListingPrimaryKeyColumns, collectionChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CollectionChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCollectionChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CollectionID {
			t.Error("foreign key was wrong value", a.ID, first.CollectionID)
		}
		if a.ID != second.CollectionID {
			t.Error("foreign key was wrong value", a.ID, second.CollectionID)
		}

		if first.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CollectionChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CollectionChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CollectionChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCollectionToManyAddOpCollectionTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c, d, e CollectionTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CollectionTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, collectionTranslationDBTypes, false, strmangle.SetComplement(collectionTranslationPrimaryKeyColumns, collectionTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CollectionTranslation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCollectionTranslations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CollectionID {
			t.Error("foreign key was wrong value", a.ID, first.CollectionID)
		}
		if a.ID != second.CollectionID {
			t.Error("foreign key was wrong value", a.ID, second.CollectionID)
		}

		if first.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CollectionTranslations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CollectionTranslations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CollectionTranslations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCollectionToManyAddOpMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MenuItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMenuItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CollectionID) {
			t.Error("foreign key was wrong value", a.ID, first.CollectionID)
		}
		if !queries.Equal(a.ID, second.CollectionID) {
			t.Error("foreign key was wrong value", a.ID, second.CollectionID)
		}

		if first.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MenuItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MenuItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MenuItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCollectionToManySetOpMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMenuItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMenuItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CollectionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CollectionID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CollectionID) {
		t.Error("foreign key was wrong value", a.ID, d.CollectionID)
	}
	if !queries.Equal(a.ID, e.CollectionID) {
		t.Error("foreign key was wrong value", a.ID, e.CollectionID)
	}

	if b.R.Collection != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Collection != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Collection != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Collection != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.MenuItems[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.MenuItems[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCollectionToManyRemoveOpMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMenuItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMenuItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CollectionID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CollectionID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Collection != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Collection != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Collection != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Collection != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.MenuItems) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.MenuItems[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.MenuItems[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCollectionToManyAddOpProductCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c, d, e ProductCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ProductCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productCollectionDBTypes, false, strmangle.SetComplement(productCollectionPrimaryKeyColumns, productCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ProductCollection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProductCollections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CollectionID {
			t.Error("foreign key was wrong value", a.ID, first.CollectionID)
		}
		if a.ID != second.CollectionID {
			t.Error("foreign key was wrong value", a.ID, second.CollectionID)
		}

		if first.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ProductCollections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ProductCollections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ProductCollections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCollectionToManyAddOpSaleCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c, d, e SaleCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleCollectionDBTypes, false, strmangle.SetComplement(saleCollectionPrimaryKeyColumns, saleCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SaleCollection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSaleCollections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CollectionID {
			t.Error("foreign key was wrong value", a.ID, first.CollectionID)
		}
		if a.ID != second.CollectionID {
			t.Error("foreign key was wrong value", a.ID, second.CollectionID)
		}

		if first.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SaleCollections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SaleCollections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SaleCollections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCollectionToManyAddOpVoucherCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Collection
	var b, c, d, e VoucherCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*VoucherCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, voucherCollectionDBTypes, false, strmangle.SetComplement(voucherCollectionPrimaryKeyColumns, voucherCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VoucherCollection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVoucherCollections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CollectionID {
			t.Error("foreign key was wrong value", a.ID, first.CollectionID)
		}
		if a.ID != second.CollectionID {
			t.Error("foreign key was wrong value", a.ID, second.CollectionID)
		}

		if first.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Collection != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VoucherCollections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VoucherCollections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VoucherCollections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCollectionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCollectionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CollectionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCollectionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Collections().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	collectionDBTypes = map[string]string{`ID`: `uuid`, `Name`: `character varying`, `Slug`: `character varying`, `BackgroundImage`: `character varying`, `BackgroundImageAlt`: `character varying`, `Description`: `text`, `Metadata`: `jsonb`, `PrivateMetadata`: `jsonb`, `SeoTitle`: `character varying`, `SeoDescription`: `character varying`}
	_                 = bytes.MinRead
)

func testCollectionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(collectionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(collectionAllColumns) == len(collectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Collections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCollectionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(collectionAllColumns) == len(collectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Collection{}
	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Collections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, collectionDBTypes, true, collectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(collectionAllColumns, collectionPrimaryKeyColumns) {
		fields = collectionAllColumns
	} else {
		fields = strmangle.SetComplement(
			collectionAllColumns,
			collectionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CollectionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCollectionsUpsert(t *testing.T) {
	t.Parallel()

	if len(collectionAllColumns) == len(collectionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Collection{}
	if err = randomize.Struct(seed, &o, collectionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Collection: %s", err)
	}

	count, err := Collections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, collectionDBTypes, false, collectionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Collection: %s", err)
	}

	count, err = Collections().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
