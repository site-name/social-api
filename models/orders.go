// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Order is an object representing the database table.
type Order struct {
	ID                           string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Createat                     null.Int64   `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Status                       null.String  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Userid                       null.String  `boil:"userid" json:"userid,omitempty" toml:"userid" yaml:"userid,omitempty"`
	Languagecode                 null.String  `boil:"languagecode" json:"languagecode,omitempty" toml:"languagecode" yaml:"languagecode,omitempty"`
	Trackingclientid             null.String  `boil:"trackingclientid" json:"trackingclientid,omitempty" toml:"trackingclientid" yaml:"trackingclientid,omitempty"`
	Billingaddressid             null.String  `boil:"billingaddressid" json:"billingaddressid,omitempty" toml:"billingaddressid" yaml:"billingaddressid,omitempty"`
	Shippingaddressid            null.String  `boil:"shippingaddressid" json:"shippingaddressid,omitempty" toml:"shippingaddressid" yaml:"shippingaddressid,omitempty"`
	Useremail                    null.String  `boil:"useremail" json:"useremail,omitempty" toml:"useremail" yaml:"useremail,omitempty"`
	Originalid                   null.String  `boil:"originalid" json:"originalid,omitempty" toml:"originalid" yaml:"originalid,omitempty"`
	Origin                       null.String  `boil:"origin" json:"origin,omitempty" toml:"origin" yaml:"origin,omitempty"`
	Currency                     null.String  `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	Shippingmethodid             null.String  `boil:"shippingmethodid" json:"shippingmethodid,omitempty" toml:"shippingmethodid" yaml:"shippingmethodid,omitempty"`
	Collectionpointid            null.String  `boil:"collectionpointid" json:"collectionpointid,omitempty" toml:"collectionpointid" yaml:"collectionpointid,omitempty"`
	Shippingmethodname           null.String  `boil:"shippingmethodname" json:"shippingmethodname,omitempty" toml:"shippingmethodname" yaml:"shippingmethodname,omitempty"`
	Collectionpointname          null.String  `boil:"collectionpointname" json:"collectionpointname,omitempty" toml:"collectionpointname" yaml:"collectionpointname,omitempty"`
	Channelid                    null.String  `boil:"channelid" json:"channelid,omitempty" toml:"channelid" yaml:"channelid,omitempty"`
	Shippingpricenetamount       null.Float64 `boil:"shippingpricenetamount" json:"shippingpricenetamount,omitempty" toml:"shippingpricenetamount" yaml:"shippingpricenetamount,omitempty"`
	Shippingpricegrossamount     null.Float64 `boil:"shippingpricegrossamount" json:"shippingpricegrossamount,omitempty" toml:"shippingpricegrossamount" yaml:"shippingpricegrossamount,omitempty"`
	Shippingtaxrate              null.Float64 `boil:"shippingtaxrate" json:"shippingtaxrate,omitempty" toml:"shippingtaxrate" yaml:"shippingtaxrate,omitempty"`
	Token                        null.String  `boil:"token" json:"token,omitempty" toml:"token" yaml:"token,omitempty"`
	Checkouttoken                null.String  `boil:"checkouttoken" json:"checkouttoken,omitempty" toml:"checkouttoken" yaml:"checkouttoken,omitempty"`
	Totalnetamount               null.Float64 `boil:"totalnetamount" json:"totalnetamount,omitempty" toml:"totalnetamount" yaml:"totalnetamount,omitempty"`
	Undiscountedtotalnetamount   null.Float64 `boil:"undiscountedtotalnetamount" json:"undiscountedtotalnetamount,omitempty" toml:"undiscountedtotalnetamount" yaml:"undiscountedtotalnetamount,omitempty"`
	Totalgrossamount             null.Float64 `boil:"totalgrossamount" json:"totalgrossamount,omitempty" toml:"totalgrossamount" yaml:"totalgrossamount,omitempty"`
	Undiscountedtotalgrossamount null.Float64 `boil:"undiscountedtotalgrossamount" json:"undiscountedtotalgrossamount,omitempty" toml:"undiscountedtotalgrossamount" yaml:"undiscountedtotalgrossamount,omitempty"`
	Totalpaidamount              null.Float64 `boil:"totalpaidamount" json:"totalpaidamount,omitempty" toml:"totalpaidamount" yaml:"totalpaidamount,omitempty"`
	Voucherid                    null.String  `boil:"voucherid" json:"voucherid,omitempty" toml:"voucherid" yaml:"voucherid,omitempty"`
	Displaygrossprices           null.Bool    `boil:"displaygrossprices" json:"displaygrossprices,omitempty" toml:"displaygrossprices" yaml:"displaygrossprices,omitempty"`
	Customernote                 null.String  `boil:"customernote" json:"customernote,omitempty" toml:"customernote" yaml:"customernote,omitempty"`
	Weightamount                 null.Float32 `boil:"weightamount" json:"weightamount,omitempty" toml:"weightamount" yaml:"weightamount,omitempty"`
	Weightunit                   null.String  `boil:"weightunit" json:"weightunit,omitempty" toml:"weightunit" yaml:"weightunit,omitempty"`
	Redirecturl                  null.String  `boil:"redirecturl" json:"redirecturl,omitempty" toml:"redirecturl" yaml:"redirecturl,omitempty"`
	Metadata                     null.JSON    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata              null.JSON    `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *orderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderColumns = struct {
	ID                           string
	Createat                     string
	Status                       string
	Userid                       string
	Languagecode                 string
	Trackingclientid             string
	Billingaddressid             string
	Shippingaddressid            string
	Useremail                    string
	Originalid                   string
	Origin                       string
	Currency                     string
	Shippingmethodid             string
	Collectionpointid            string
	Shippingmethodname           string
	Collectionpointname          string
	Channelid                    string
	Shippingpricenetamount       string
	Shippingpricegrossamount     string
	Shippingtaxrate              string
	Token                        string
	Checkouttoken                string
	Totalnetamount               string
	Undiscountedtotalnetamount   string
	Totalgrossamount             string
	Undiscountedtotalgrossamount string
	Totalpaidamount              string
	Voucherid                    string
	Displaygrossprices           string
	Customernote                 string
	Weightamount                 string
	Weightunit                   string
	Redirecturl                  string
	Metadata                     string
	Privatemetadata              string
}{
	ID:                           "id",
	Createat:                     "createat",
	Status:                       "status",
	Userid:                       "userid",
	Languagecode:                 "languagecode",
	Trackingclientid:             "trackingclientid",
	Billingaddressid:             "billingaddressid",
	Shippingaddressid:            "shippingaddressid",
	Useremail:                    "useremail",
	Originalid:                   "originalid",
	Origin:                       "origin",
	Currency:                     "currency",
	Shippingmethodid:             "shippingmethodid",
	Collectionpointid:            "collectionpointid",
	Shippingmethodname:           "shippingmethodname",
	Collectionpointname:          "collectionpointname",
	Channelid:                    "channelid",
	Shippingpricenetamount:       "shippingpricenetamount",
	Shippingpricegrossamount:     "shippingpricegrossamount",
	Shippingtaxrate:              "shippingtaxrate",
	Token:                        "token",
	Checkouttoken:                "checkouttoken",
	Totalnetamount:               "totalnetamount",
	Undiscountedtotalnetamount:   "undiscountedtotalnetamount",
	Totalgrossamount:             "totalgrossamount",
	Undiscountedtotalgrossamount: "undiscountedtotalgrossamount",
	Totalpaidamount:              "totalpaidamount",
	Voucherid:                    "voucherid",
	Displaygrossprices:           "displaygrossprices",
	Customernote:                 "customernote",
	Weightamount:                 "weightamount",
	Weightunit:                   "weightunit",
	Redirecturl:                  "redirecturl",
	Metadata:                     "metadata",
	Privatemetadata:              "privatemetadata",
}

var OrderTableColumns = struct {
	ID                           string
	Createat                     string
	Status                       string
	Userid                       string
	Languagecode                 string
	Trackingclientid             string
	Billingaddressid             string
	Shippingaddressid            string
	Useremail                    string
	Originalid                   string
	Origin                       string
	Currency                     string
	Shippingmethodid             string
	Collectionpointid            string
	Shippingmethodname           string
	Collectionpointname          string
	Channelid                    string
	Shippingpricenetamount       string
	Shippingpricegrossamount     string
	Shippingtaxrate              string
	Token                        string
	Checkouttoken                string
	Totalnetamount               string
	Undiscountedtotalnetamount   string
	Totalgrossamount             string
	Undiscountedtotalgrossamount string
	Totalpaidamount              string
	Voucherid                    string
	Displaygrossprices           string
	Customernote                 string
	Weightamount                 string
	Weightunit                   string
	Redirecturl                  string
	Metadata                     string
	Privatemetadata              string
}{
	ID:                           "orders.id",
	Createat:                     "orders.createat",
	Status:                       "orders.status",
	Userid:                       "orders.userid",
	Languagecode:                 "orders.languagecode",
	Trackingclientid:             "orders.trackingclientid",
	Billingaddressid:             "orders.billingaddressid",
	Shippingaddressid:            "orders.shippingaddressid",
	Useremail:                    "orders.useremail",
	Originalid:                   "orders.originalid",
	Origin:                       "orders.origin",
	Currency:                     "orders.currency",
	Shippingmethodid:             "orders.shippingmethodid",
	Collectionpointid:            "orders.collectionpointid",
	Shippingmethodname:           "orders.shippingmethodname",
	Collectionpointname:          "orders.collectionpointname",
	Channelid:                    "orders.channelid",
	Shippingpricenetamount:       "orders.shippingpricenetamount",
	Shippingpricegrossamount:     "orders.shippingpricegrossamount",
	Shippingtaxrate:              "orders.shippingtaxrate",
	Token:                        "orders.token",
	Checkouttoken:                "orders.checkouttoken",
	Totalnetamount:               "orders.totalnetamount",
	Undiscountedtotalnetamount:   "orders.undiscountedtotalnetamount",
	Totalgrossamount:             "orders.totalgrossamount",
	Undiscountedtotalgrossamount: "orders.undiscountedtotalgrossamount",
	Totalpaidamount:              "orders.totalpaidamount",
	Voucherid:                    "orders.voucherid",
	Displaygrossprices:           "orders.displaygrossprices",
	Customernote:                 "orders.customernote",
	Weightamount:                 "orders.weightamount",
	Weightunit:                   "orders.weightunit",
	Redirecturl:                  "orders.redirecturl",
	Metadata:                     "orders.metadata",
	Privatemetadata:              "orders.privatemetadata",
}

// Generated where

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var OrderWhere = struct {
	ID                           whereHelperstring
	Createat                     whereHelpernull_Int64
	Status                       whereHelpernull_String
	Userid                       whereHelpernull_String
	Languagecode                 whereHelpernull_String
	Trackingclientid             whereHelpernull_String
	Billingaddressid             whereHelpernull_String
	Shippingaddressid            whereHelpernull_String
	Useremail                    whereHelpernull_String
	Originalid                   whereHelpernull_String
	Origin                       whereHelpernull_String
	Currency                     whereHelpernull_String
	Shippingmethodid             whereHelpernull_String
	Collectionpointid            whereHelpernull_String
	Shippingmethodname           whereHelpernull_String
	Collectionpointname          whereHelpernull_String
	Channelid                    whereHelpernull_String
	Shippingpricenetamount       whereHelpernull_Float64
	Shippingpricegrossamount     whereHelpernull_Float64
	Shippingtaxrate              whereHelpernull_Float64
	Token                        whereHelpernull_String
	Checkouttoken                whereHelpernull_String
	Totalnetamount               whereHelpernull_Float64
	Undiscountedtotalnetamount   whereHelpernull_Float64
	Totalgrossamount             whereHelpernull_Float64
	Undiscountedtotalgrossamount whereHelpernull_Float64
	Totalpaidamount              whereHelpernull_Float64
	Voucherid                    whereHelpernull_String
	Displaygrossprices           whereHelpernull_Bool
	Customernote                 whereHelpernull_String
	Weightamount                 whereHelpernull_Float32
	Weightunit                   whereHelpernull_String
	Redirecturl                  whereHelpernull_String
	Metadata                     whereHelpernull_JSON
	Privatemetadata              whereHelpernull_JSON
}{
	ID:                           whereHelperstring{field: "\"orders\".\"id\""},
	Createat:                     whereHelpernull_Int64{field: "\"orders\".\"createat\""},
	Status:                       whereHelpernull_String{field: "\"orders\".\"status\""},
	Userid:                       whereHelpernull_String{field: "\"orders\".\"userid\""},
	Languagecode:                 whereHelpernull_String{field: "\"orders\".\"languagecode\""},
	Trackingclientid:             whereHelpernull_String{field: "\"orders\".\"trackingclientid\""},
	Billingaddressid:             whereHelpernull_String{field: "\"orders\".\"billingaddressid\""},
	Shippingaddressid:            whereHelpernull_String{field: "\"orders\".\"shippingaddressid\""},
	Useremail:                    whereHelpernull_String{field: "\"orders\".\"useremail\""},
	Originalid:                   whereHelpernull_String{field: "\"orders\".\"originalid\""},
	Origin:                       whereHelpernull_String{field: "\"orders\".\"origin\""},
	Currency:                     whereHelpernull_String{field: "\"orders\".\"currency\""},
	Shippingmethodid:             whereHelpernull_String{field: "\"orders\".\"shippingmethodid\""},
	Collectionpointid:            whereHelpernull_String{field: "\"orders\".\"collectionpointid\""},
	Shippingmethodname:           whereHelpernull_String{field: "\"orders\".\"shippingmethodname\""},
	Collectionpointname:          whereHelpernull_String{field: "\"orders\".\"collectionpointname\""},
	Channelid:                    whereHelpernull_String{field: "\"orders\".\"channelid\""},
	Shippingpricenetamount:       whereHelpernull_Float64{field: "\"orders\".\"shippingpricenetamount\""},
	Shippingpricegrossamount:     whereHelpernull_Float64{field: "\"orders\".\"shippingpricegrossamount\""},
	Shippingtaxrate:              whereHelpernull_Float64{field: "\"orders\".\"shippingtaxrate\""},
	Token:                        whereHelpernull_String{field: "\"orders\".\"token\""},
	Checkouttoken:                whereHelpernull_String{field: "\"orders\".\"checkouttoken\""},
	Totalnetamount:               whereHelpernull_Float64{field: "\"orders\".\"totalnetamount\""},
	Undiscountedtotalnetamount:   whereHelpernull_Float64{field: "\"orders\".\"undiscountedtotalnetamount\""},
	Totalgrossamount:             whereHelpernull_Float64{field: "\"orders\".\"totalgrossamount\""},
	Undiscountedtotalgrossamount: whereHelpernull_Float64{field: "\"orders\".\"undiscountedtotalgrossamount\""},
	Totalpaidamount:              whereHelpernull_Float64{field: "\"orders\".\"totalpaidamount\""},
	Voucherid:                    whereHelpernull_String{field: "\"orders\".\"voucherid\""},
	Displaygrossprices:           whereHelpernull_Bool{field: "\"orders\".\"displaygrossprices\""},
	Customernote:                 whereHelpernull_String{field: "\"orders\".\"customernote\""},
	Weightamount:                 whereHelpernull_Float32{field: "\"orders\".\"weightamount\""},
	Weightunit:                   whereHelpernull_String{field: "\"orders\".\"weightunit\""},
	Redirecturl:                  whereHelpernull_String{field: "\"orders\".\"redirecturl\""},
	Metadata:                     whereHelpernull_JSON{field: "\"orders\".\"metadata\""},
	Privatemetadata:              whereHelpernull_JSON{field: "\"orders\".\"privatemetadata\""},
}

// OrderRels is where relationship names are stored.
var OrderRels = struct {
	BillingaddressidAddress        string
	ChannelidChannel               string
	OriginalidOrder                string
	ShippingmethodidShippingMethod string
	UseridUser                     string
	VoucheridVoucher               string
	CollectionpointidWarehouse     string
	OrderidCustomerEvents          string
	OrderidFulfillments            string
	OrderidInvoiceEvents           string
	OrderidInvoices                string
	OrderidOrderDiscounts          string
	OrderidOrderEvents             string
	OrderidOrderGiftcards          string
	OrderidOrderLines              string
	OriginalidOrders               string
	OrderidPayments                string
}{
	BillingaddressidAddress:        "BillingaddressidAddress",
	ChannelidChannel:               "ChannelidChannel",
	OriginalidOrder:                "OriginalidOrder",
	ShippingmethodidShippingMethod: "ShippingmethodidShippingMethod",
	UseridUser:                     "UseridUser",
	VoucheridVoucher:               "VoucheridVoucher",
	CollectionpointidWarehouse:     "CollectionpointidWarehouse",
	OrderidCustomerEvents:          "OrderidCustomerEvents",
	OrderidFulfillments:            "OrderidFulfillments",
	OrderidInvoiceEvents:           "OrderidInvoiceEvents",
	OrderidInvoices:                "OrderidInvoices",
	OrderidOrderDiscounts:          "OrderidOrderDiscounts",
	OrderidOrderEvents:             "OrderidOrderEvents",
	OrderidOrderGiftcards:          "OrderidOrderGiftcards",
	OrderidOrderLines:              "OrderidOrderLines",
	OriginalidOrders:               "OriginalidOrders",
	OrderidPayments:                "OrderidPayments",
}

// orderR is where relationships are stored.
type orderR struct {
	BillingaddressidAddress        *Address           `boil:"BillingaddressidAddress" json:"BillingaddressidAddress" toml:"BillingaddressidAddress" yaml:"BillingaddressidAddress"`
	ChannelidChannel               *Channel           `boil:"ChannelidChannel" json:"ChannelidChannel" toml:"ChannelidChannel" yaml:"ChannelidChannel"`
	OriginalidOrder                *Order             `boil:"OriginalidOrder" json:"OriginalidOrder" toml:"OriginalidOrder" yaml:"OriginalidOrder"`
	ShippingmethodidShippingMethod *ShippingMethod    `boil:"ShippingmethodidShippingMethod" json:"ShippingmethodidShippingMethod" toml:"ShippingmethodidShippingMethod" yaml:"ShippingmethodidShippingMethod"`
	UseridUser                     *User              `boil:"UseridUser" json:"UseridUser" toml:"UseridUser" yaml:"UseridUser"`
	VoucheridVoucher               *Voucher           `boil:"VoucheridVoucher" json:"VoucheridVoucher" toml:"VoucheridVoucher" yaml:"VoucheridVoucher"`
	CollectionpointidWarehouse     *Warehouse         `boil:"CollectionpointidWarehouse" json:"CollectionpointidWarehouse" toml:"CollectionpointidWarehouse" yaml:"CollectionpointidWarehouse"`
	OrderidCustomerEvents          CustomerEventSlice `boil:"OrderidCustomerEvents" json:"OrderidCustomerEvents" toml:"OrderidCustomerEvents" yaml:"OrderidCustomerEvents"`
	OrderidFulfillments            FulfillmentSlice   `boil:"OrderidFulfillments" json:"OrderidFulfillments" toml:"OrderidFulfillments" yaml:"OrderidFulfillments"`
	OrderidInvoiceEvents           InvoiceEventSlice  `boil:"OrderidInvoiceEvents" json:"OrderidInvoiceEvents" toml:"OrderidInvoiceEvents" yaml:"OrderidInvoiceEvents"`
	OrderidInvoices                InvoiceSlice       `boil:"OrderidInvoices" json:"OrderidInvoices" toml:"OrderidInvoices" yaml:"OrderidInvoices"`
	OrderidOrderDiscounts          OrderDiscountSlice `boil:"OrderidOrderDiscounts" json:"OrderidOrderDiscounts" toml:"OrderidOrderDiscounts" yaml:"OrderidOrderDiscounts"`
	OrderidOrderEvents             OrderEventSlice    `boil:"OrderidOrderEvents" json:"OrderidOrderEvents" toml:"OrderidOrderEvents" yaml:"OrderidOrderEvents"`
	OrderidOrderGiftcards          OrderGiftcardSlice `boil:"OrderidOrderGiftcards" json:"OrderidOrderGiftcards" toml:"OrderidOrderGiftcards" yaml:"OrderidOrderGiftcards"`
	OrderidOrderLines              OrderLineSlice     `boil:"OrderidOrderLines" json:"OrderidOrderLines" toml:"OrderidOrderLines" yaml:"OrderidOrderLines"`
	OriginalidOrders               OrderSlice         `boil:"OriginalidOrders" json:"OriginalidOrders" toml:"OriginalidOrders" yaml:"OriginalidOrders"`
	OrderidPayments                PaymentSlice       `boil:"OrderidPayments" json:"OrderidPayments" toml:"OrderidPayments" yaml:"OrderidPayments"`
}

// NewStruct creates a new relationship struct
func (*orderR) NewStruct() *orderR {
	return &orderR{}
}

func (r *orderR) GetBillingaddressidAddress() *Address {
	if r == nil {
		return nil
	}
	return r.BillingaddressidAddress
}

func (r *orderR) GetChannelidChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.ChannelidChannel
}

func (r *orderR) GetOriginalidOrder() *Order {
	if r == nil {
		return nil
	}
	return r.OriginalidOrder
}

func (r *orderR) GetShippingmethodidShippingMethod() *ShippingMethod {
	if r == nil {
		return nil
	}
	return r.ShippingmethodidShippingMethod
}

func (r *orderR) GetUseridUser() *User {
	if r == nil {
		return nil
	}
	return r.UseridUser
}

func (r *orderR) GetVoucheridVoucher() *Voucher {
	if r == nil {
		return nil
	}
	return r.VoucheridVoucher
}

func (r *orderR) GetCollectionpointidWarehouse() *Warehouse {
	if r == nil {
		return nil
	}
	return r.CollectionpointidWarehouse
}

func (r *orderR) GetOrderidCustomerEvents() CustomerEventSlice {
	if r == nil {
		return nil
	}
	return r.OrderidCustomerEvents
}

func (r *orderR) GetOrderidFulfillments() FulfillmentSlice {
	if r == nil {
		return nil
	}
	return r.OrderidFulfillments
}

func (r *orderR) GetOrderidInvoiceEvents() InvoiceEventSlice {
	if r == nil {
		return nil
	}
	return r.OrderidInvoiceEvents
}

func (r *orderR) GetOrderidInvoices() InvoiceSlice {
	if r == nil {
		return nil
	}
	return r.OrderidInvoices
}

func (r *orderR) GetOrderidOrderDiscounts() OrderDiscountSlice {
	if r == nil {
		return nil
	}
	return r.OrderidOrderDiscounts
}

func (r *orderR) GetOrderidOrderEvents() OrderEventSlice {
	if r == nil {
		return nil
	}
	return r.OrderidOrderEvents
}

func (r *orderR) GetOrderidOrderGiftcards() OrderGiftcardSlice {
	if r == nil {
		return nil
	}
	return r.OrderidOrderGiftcards
}

func (r *orderR) GetOrderidOrderLines() OrderLineSlice {
	if r == nil {
		return nil
	}
	return r.OrderidOrderLines
}

func (r *orderR) GetOriginalidOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.OriginalidOrders
}

func (r *orderR) GetOrderidPayments() PaymentSlice {
	if r == nil {
		return nil
	}
	return r.OrderidPayments
}

// orderL is where Load methods for each relationship are stored.
type orderL struct{}

var (
	orderAllColumns            = []string{"id", "createat", "status", "userid", "languagecode", "trackingclientid", "billingaddressid", "shippingaddressid", "useremail", "originalid", "origin", "currency", "shippingmethodid", "collectionpointid", "shippingmethodname", "collectionpointname", "channelid", "shippingpricenetamount", "shippingpricegrossamount", "shippingtaxrate", "token", "checkouttoken", "totalnetamount", "undiscountedtotalnetamount", "totalgrossamount", "undiscountedtotalgrossamount", "totalpaidamount", "voucherid", "displaygrossprices", "customernote", "weightamount", "weightunit", "redirecturl", "metadata", "privatemetadata"}
	orderColumnsWithoutDefault = []string{"id"}
	orderColumnsWithDefault    = []string{"createat", "status", "userid", "languagecode", "trackingclientid", "billingaddressid", "shippingaddressid", "useremail", "originalid", "origin", "currency", "shippingmethodid", "collectionpointid", "shippingmethodname", "collectionpointname", "channelid", "shippingpricenetamount", "shippingpricegrossamount", "shippingtaxrate", "token", "checkouttoken", "totalnetamount", "undiscountedtotalnetamount", "totalgrossamount", "undiscountedtotalgrossamount", "totalpaidamount", "voucherid", "displaygrossprices", "customernote", "weightamount", "weightunit", "redirecturl", "metadata", "privatemetadata"}
	orderPrimaryKeyColumns     = []string{"id"}
	orderGeneratedColumns      = []string{}
)

type (
	// OrderSlice is an alias for a slice of pointers to Order.
	// This should almost always be used instead of []Order.
	OrderSlice []*Order
	// OrderHook is the signature for custom Order hook methods
	OrderHook func(context.Context, boil.ContextExecutor, *Order) error

	orderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderType                 = reflect.TypeOf(&Order{})
	orderMapping              = queries.MakeStructMapping(orderType)
	orderPrimaryKeyMapping, _ = queries.BindMapping(orderType, orderMapping, orderPrimaryKeyColumns)
	orderInsertCacheMut       sync.RWMutex
	orderInsertCache          = make(map[string]insertCache)
	orderUpdateCacheMut       sync.RWMutex
	orderUpdateCache          = make(map[string]updateCache)
	orderUpsertCacheMut       sync.RWMutex
	orderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderAfterSelectHooks []OrderHook

var orderBeforeInsertHooks []OrderHook
var orderAfterInsertHooks []OrderHook

var orderBeforeUpdateHooks []OrderHook
var orderAfterUpdateHooks []OrderHook

var orderBeforeDeleteHooks []OrderHook
var orderAfterDeleteHooks []OrderHook

var orderBeforeUpsertHooks []OrderHook
var orderAfterUpsertHooks []OrderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Order) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Order) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Order) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Order) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Order) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Order) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Order) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Order) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Order) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderHook registers your hook function for all future operations.
func AddOrderHook(hookPoint boil.HookPoint, orderHook OrderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderAfterSelectHooks = append(orderAfterSelectHooks, orderHook)
	case boil.BeforeInsertHook:
		orderBeforeInsertHooks = append(orderBeforeInsertHooks, orderHook)
	case boil.AfterInsertHook:
		orderAfterInsertHooks = append(orderAfterInsertHooks, orderHook)
	case boil.BeforeUpdateHook:
		orderBeforeUpdateHooks = append(orderBeforeUpdateHooks, orderHook)
	case boil.AfterUpdateHook:
		orderAfterUpdateHooks = append(orderAfterUpdateHooks, orderHook)
	case boil.BeforeDeleteHook:
		orderBeforeDeleteHooks = append(orderBeforeDeleteHooks, orderHook)
	case boil.AfterDeleteHook:
		orderAfterDeleteHooks = append(orderAfterDeleteHooks, orderHook)
	case boil.BeforeUpsertHook:
		orderBeforeUpsertHooks = append(orderBeforeUpsertHooks, orderHook)
	case boil.AfterUpsertHook:
		orderAfterUpsertHooks = append(orderAfterUpsertHooks, orderHook)
	}
}

// One returns a single order record from the query.
func (q orderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Order, error) {
	o := &Order{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for orders")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Order records from the query.
func (q orderQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderSlice, error) {
	var o []*Order

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Order slice")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Order records in the query.
func (q orderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count orders rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if orders exists")
	}

	return count > 0, nil
}

// BillingaddressidAddress pointed to by the foreign key.
func (o *Order) BillingaddressidAddress(mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Billingaddressid),
	}

	queryMods = append(queryMods, mods...)

	return Addresses(queryMods...)
}

// ChannelidChannel pointed to by the foreign key.
func (o *Order) ChannelidChannel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Channelid),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// OriginalidOrder pointed to by the foreign key.
func (o *Order) OriginalidOrder(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Originalid),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// ShippingmethodidShippingMethod pointed to by the foreign key.
func (o *Order) ShippingmethodidShippingMethod(mods ...qm.QueryMod) shippingMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Shippingmethodid),
	}

	queryMods = append(queryMods, mods...)

	return ShippingMethods(queryMods...)
}

// UseridUser pointed to by the foreign key.
func (o *Order) UseridUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Userid),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// VoucheridVoucher pointed to by the foreign key.
func (o *Order) VoucheridVoucher(mods ...qm.QueryMod) voucherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Voucherid),
	}

	queryMods = append(queryMods, mods...)

	return Vouchers(queryMods...)
}

// CollectionpointidWarehouse pointed to by the foreign key.
func (o *Order) CollectionpointidWarehouse(mods ...qm.QueryMod) warehouseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Collectionpointid),
	}

	queryMods = append(queryMods, mods...)

	return Warehouses(queryMods...)
}

// OrderidCustomerEvents retrieves all the customer_event's CustomerEvents with an executor via orderid column.
func (o *Order) OrderidCustomerEvents(mods ...qm.QueryMod) customerEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"customer_events\".\"orderid\"=?", o.ID),
	)

	return CustomerEvents(queryMods...)
}

// OrderidFulfillments retrieves all the fulfillment's Fulfillments with an executor via orderid column.
func (o *Order) OrderidFulfillments(mods ...qm.QueryMod) fulfillmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"fulfillments\".\"orderid\"=?", o.ID),
	)

	return Fulfillments(queryMods...)
}

// OrderidInvoiceEvents retrieves all the invoice_event's InvoiceEvents with an executor via orderid column.
func (o *Order) OrderidInvoiceEvents(mods ...qm.QueryMod) invoiceEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice_events\".\"orderid\"=?", o.ID),
	)

	return InvoiceEvents(queryMods...)
}

// OrderidInvoices retrieves all the invoice's Invoices with an executor via orderid column.
func (o *Order) OrderidInvoices(mods ...qm.QueryMod) invoiceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoices\".\"orderid\"=?", o.ID),
	)

	return Invoices(queryMods...)
}

// OrderidOrderDiscounts retrieves all the order_discount's OrderDiscounts with an executor via orderid column.
func (o *Order) OrderidOrderDiscounts(mods ...qm.QueryMod) orderDiscountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_discounts\".\"orderid\"=?", o.ID),
	)

	return OrderDiscounts(queryMods...)
}

// OrderidOrderEvents retrieves all the order_event's OrderEvents with an executor via orderid column.
func (o *Order) OrderidOrderEvents(mods ...qm.QueryMod) orderEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_events\".\"orderid\"=?", o.ID),
	)

	return OrderEvents(queryMods...)
}

// OrderidOrderGiftcards retrieves all the order_giftcard's OrderGiftcards with an executor via orderid column.
func (o *Order) OrderidOrderGiftcards(mods ...qm.QueryMod) orderGiftcardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_giftcards\".\"orderid\"=?", o.ID),
	)

	return OrderGiftcards(queryMods...)
}

// OrderidOrderLines retrieves all the order_line's OrderLines with an executor via orderid column.
func (o *Order) OrderidOrderLines(mods ...qm.QueryMod) orderLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_lines\".\"orderid\"=?", o.ID),
	)

	return OrderLines(queryMods...)
}

// OriginalidOrders retrieves all the order's Orders with an executor via originalid column.
func (o *Order) OriginalidOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"originalid\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// OrderidPayments retrieves all the payment's Payments with an executor via orderid column.
func (o *Order) OrderidPayments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payments\".\"orderid\"=?", o.ID),
	)

	return Payments(queryMods...)
}

// LoadBillingaddressidAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadBillingaddressidAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.Billingaddressid) {
			args = append(args, object.Billingaddressid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Billingaddressid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Billingaddressid) {
				args = append(args, obj.Billingaddressid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`addresses`),
		qm.WhereIn(`addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for addresses")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillingaddressidAddress = foreign
		if foreign.R == nil {
			foreign.R = &addressR{}
		}
		foreign.R.BillingaddressidOrders = append(foreign.R.BillingaddressidOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Billingaddressid, foreign.ID) {
				local.R.BillingaddressidAddress = foreign
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.BillingaddressidOrders = append(foreign.R.BillingaddressidOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadChannelidChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadChannelidChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.Channelid) {
			args = append(args, object.Channelid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Channelid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Channelid) {
				args = append(args, obj.Channelid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChannelidChannel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.ChannelidOrders = append(foreign.R.ChannelidOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Channelid, foreign.ID) {
				local.R.ChannelidChannel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.ChannelidOrders = append(foreign.R.ChannelidOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadOriginalidOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadOriginalidOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.Originalid) {
			args = append(args, object.Originalid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Originalid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Originalid) {
				args = append(args, obj.Originalid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OriginalidOrder = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OriginalidOrders = append(foreign.R.OriginalidOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Originalid, foreign.ID) {
				local.R.OriginalidOrder = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OriginalidOrders = append(foreign.R.OriginalidOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadShippingmethodidShippingMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadShippingmethodidShippingMethod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.Shippingmethodid) {
			args = append(args, object.Shippingmethodid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Shippingmethodid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Shippingmethodid) {
				args = append(args, obj.Shippingmethodid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_methods`),
		qm.WhereIn(`shipping_methods.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingMethod")
	}

	var resultSlice []*ShippingMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_methods")
	}

	if len(shippingMethodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingmethodidShippingMethod = foreign
		if foreign.R == nil {
			foreign.R = &shippingMethodR{}
		}
		foreign.R.ShippingmethodidOrders = append(foreign.R.ShippingmethodidOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Shippingmethodid, foreign.ID) {
				local.R.ShippingmethodidShippingMethod = foreign
				if foreign.R == nil {
					foreign.R = &shippingMethodR{}
				}
				foreign.R.ShippingmethodidOrders = append(foreign.R.ShippingmethodidOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadUseridUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadUseridUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.Userid) {
			args = append(args, object.Userid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Userid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Userid) {
				args = append(args, obj.Userid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UseridOrders = append(foreign.R.UseridOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Userid, foreign.ID) {
				local.R.UseridUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UseridOrders = append(foreign.R.UseridOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadVoucheridVoucher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadVoucheridVoucher(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.Voucherid) {
			args = append(args, object.Voucherid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Voucherid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Voucherid) {
				args = append(args, obj.Voucherid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vouchers`),
		qm.WhereIn(`vouchers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Voucher")
	}

	var resultSlice []*Voucher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Voucher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vouchers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vouchers")
	}

	if len(voucherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VoucheridVoucher = foreign
		if foreign.R == nil {
			foreign.R = &voucherR{}
		}
		foreign.R.VoucheridOrders = append(foreign.R.VoucheridOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Voucherid, foreign.ID) {
				local.R.VoucheridVoucher = foreign
				if foreign.R == nil {
					foreign.R = &voucherR{}
				}
				foreign.R.VoucheridOrders = append(foreign.R.VoucheridOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionpointidWarehouse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadCollectionpointidWarehouse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.Collectionpointid) {
			args = append(args, object.Collectionpointid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Collectionpointid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Collectionpointid) {
				args = append(args, obj.Collectionpointid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Warehouse")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Warehouse")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionpointidWarehouse = foreign
		if foreign.R == nil {
			foreign.R = &warehouseR{}
		}
		foreign.R.CollectionpointidOrders = append(foreign.R.CollectionpointidOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Collectionpointid, foreign.ID) {
				local.R.CollectionpointidWarehouse = foreign
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.CollectionpointidOrders = append(foreign.R.CollectionpointidOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderidCustomerEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderidCustomerEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`customer_events`),
		qm.WhereIn(`customer_events.orderid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load customer_events")
	}

	var resultSlice []*CustomerEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice customer_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on customer_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customer_events")
	}

	if len(customerEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderidCustomerEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &customerEventR{}
			}
			foreign.R.OrderidOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderid) {
				local.R.OrderidCustomerEvents = append(local.R.OrderidCustomerEvents, foreign)
				if foreign.R == nil {
					foreign.R = &customerEventR{}
				}
				foreign.R.OrderidOrder = local
				break
			}
		}
	}

	return nil
}

// LoadOrderidFulfillments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderidFulfillments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fulfillments`),
		qm.WhereIn(`fulfillments.orderid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load fulfillments")
	}

	var resultSlice []*Fulfillment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice fulfillments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on fulfillments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fulfillments")
	}

	if len(fulfillmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderidFulfillments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fulfillmentR{}
			}
			foreign.R.OrderidOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderid) {
				local.R.OrderidFulfillments = append(local.R.OrderidFulfillments, foreign)
				if foreign.R == nil {
					foreign.R = &fulfillmentR{}
				}
				foreign.R.OrderidOrder = local
				break
			}
		}
	}

	return nil
}

// LoadOrderidInvoiceEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderidInvoiceEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`invoice_events`),
		qm.WhereIn(`invoice_events.orderid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invoice_events")
	}

	var resultSlice []*InvoiceEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invoice_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invoice_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice_events")
	}

	if len(invoiceEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderidInvoiceEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &invoiceEventR{}
			}
			foreign.R.OrderidOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderid) {
				local.R.OrderidInvoiceEvents = append(local.R.OrderidInvoiceEvents, foreign)
				if foreign.R == nil {
					foreign.R = &invoiceEventR{}
				}
				foreign.R.OrderidOrder = local
				break
			}
		}
	}

	return nil
}

// LoadOrderidInvoices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderidInvoices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`invoices`),
		qm.WhereIn(`invoices.orderid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invoices")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invoices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invoices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoices")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderidInvoices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &invoiceR{}
			}
			foreign.R.OrderidOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderid) {
				local.R.OrderidInvoices = append(local.R.OrderidInvoices, foreign)
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.OrderidOrder = local
				break
			}
		}
	}

	return nil
}

// LoadOrderidOrderDiscounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderidOrderDiscounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_discounts`),
		qm.WhereIn(`order_discounts.orderid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_discounts")
	}

	var resultSlice []*OrderDiscount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_discounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_discounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_discounts")
	}

	if len(orderDiscountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderidOrderDiscounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderDiscountR{}
			}
			foreign.R.OrderidOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderid) {
				local.R.OrderidOrderDiscounts = append(local.R.OrderidOrderDiscounts, foreign)
				if foreign.R == nil {
					foreign.R = &orderDiscountR{}
				}
				foreign.R.OrderidOrder = local
				break
			}
		}
	}

	return nil
}

// LoadOrderidOrderEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderidOrderEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_events`),
		qm.WhereIn(`order_events.orderid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_events")
	}

	var resultSlice []*OrderEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_events")
	}

	if len(orderEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderidOrderEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderEventR{}
			}
			foreign.R.OrderidOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderid) {
				local.R.OrderidOrderEvents = append(local.R.OrderidOrderEvents, foreign)
				if foreign.R == nil {
					foreign.R = &orderEventR{}
				}
				foreign.R.OrderidOrder = local
				break
			}
		}
	}

	return nil
}

// LoadOrderidOrderGiftcards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderidOrderGiftcards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_giftcards`),
		qm.WhereIn(`order_giftcards.orderid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_giftcards")
	}

	var resultSlice []*OrderGiftcard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_giftcards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_giftcards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_giftcards")
	}

	if len(orderGiftcardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderidOrderGiftcards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderGiftcardR{}
			}
			foreign.R.OrderidOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderid) {
				local.R.OrderidOrderGiftcards = append(local.R.OrderidOrderGiftcards, foreign)
				if foreign.R == nil {
					foreign.R = &orderGiftcardR{}
				}
				foreign.R.OrderidOrder = local
				break
			}
		}
	}

	return nil
}

// LoadOrderidOrderLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderidOrderLines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_lines`),
		qm.WhereIn(`order_lines.orderid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_lines")
	}

	var resultSlice []*OrderLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_lines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_lines")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderidOrderLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderLineR{}
			}
			foreign.R.OrderidOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderid) {
				local.R.OrderidOrderLines = append(local.R.OrderidOrderLines, foreign)
				if foreign.R == nil {
					foreign.R = &orderLineR{}
				}
				foreign.R.OrderidOrder = local
				break
			}
		}
	}

	return nil
}

// LoadOriginalidOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOriginalidOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.originalid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginalidOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.OriginalidOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Originalid) {
				local.R.OriginalidOrders = append(local.R.OriginalidOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OriginalidOrder = local
				break
			}
		}
	}

	return nil
}

// LoadOrderidPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderidPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.orderid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payments")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderidPayments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.OrderidOrder = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Orderid) {
				local.R.OrderidPayments = append(local.R.OrderidPayments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.OrderidOrder = local
				break
			}
		}
	}

	return nil
}

// SetBillingaddressidAddress of the order to the related item.
// Sets o.R.BillingaddressidAddress to related.
// Adds o to related.R.BillingaddressidOrders.
func (o *Order) SetBillingaddressidAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"billingaddressid"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Billingaddressid, related.ID)
	if o.R == nil {
		o.R = &orderR{
			BillingaddressidAddress: related,
		}
	} else {
		o.R.BillingaddressidAddress = related
	}

	if related.R == nil {
		related.R = &addressR{
			BillingaddressidOrders: OrderSlice{o},
		}
	} else {
		related.R.BillingaddressidOrders = append(related.R.BillingaddressidOrders, o)
	}

	return nil
}

// RemoveBillingaddressidAddress relationship.
// Sets o.R.BillingaddressidAddress to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveBillingaddressidAddress(ctx context.Context, exec boil.ContextExecutor, related *Address) error {
	var err error

	queries.SetScanner(&o.Billingaddressid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("billingaddressid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillingaddressidAddress = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BillingaddressidOrders {
		if queries.Equal(o.Billingaddressid, ri.Billingaddressid) {
			continue
		}

		ln := len(related.R.BillingaddressidOrders)
		if ln > 1 && i < ln-1 {
			related.R.BillingaddressidOrders[i] = related.R.BillingaddressidOrders[ln-1]
		}
		related.R.BillingaddressidOrders = related.R.BillingaddressidOrders[:ln-1]
		break
	}
	return nil
}

// SetChannelidChannel of the order to the related item.
// Sets o.R.ChannelidChannel to related.
// Adds o to related.R.ChannelidOrders.
func (o *Order) SetChannelidChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Channelid, related.ID)
	if o.R == nil {
		o.R = &orderR{
			ChannelidChannel: related,
		}
	} else {
		o.R.ChannelidChannel = related
	}

	if related.R == nil {
		related.R = &channelR{
			ChannelidOrders: OrderSlice{o},
		}
	} else {
		related.R.ChannelidOrders = append(related.R.ChannelidOrders, o)
	}

	return nil
}

// RemoveChannelidChannel relationship.
// Sets o.R.ChannelidChannel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveChannelidChannel(ctx context.Context, exec boil.ContextExecutor, related *Channel) error {
	var err error

	queries.SetScanner(&o.Channelid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ChannelidChannel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ChannelidOrders {
		if queries.Equal(o.Channelid, ri.Channelid) {
			continue
		}

		ln := len(related.R.ChannelidOrders)
		if ln > 1 && i < ln-1 {
			related.R.ChannelidOrders[i] = related.R.ChannelidOrders[ln-1]
		}
		related.R.ChannelidOrders = related.R.ChannelidOrders[:ln-1]
		break
	}
	return nil
}

// SetOriginalidOrder of the order to the related item.
// Sets o.R.OriginalidOrder to related.
// Adds o to related.R.OriginalidOrders.
func (o *Order) SetOriginalidOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"originalid"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Originalid, related.ID)
	if o.R == nil {
		o.R = &orderR{
			OriginalidOrder: related,
		}
	} else {
		o.R.OriginalidOrder = related
	}

	if related.R == nil {
		related.R = &orderR{
			OriginalidOrders: OrderSlice{o},
		}
	} else {
		related.R.OriginalidOrders = append(related.R.OriginalidOrders, o)
	}

	return nil
}

// RemoveOriginalidOrder relationship.
// Sets o.R.OriginalidOrder to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveOriginalidOrder(ctx context.Context, exec boil.ContextExecutor, related *Order) error {
	var err error

	queries.SetScanner(&o.Originalid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("originalid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OriginalidOrder = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OriginalidOrders {
		if queries.Equal(o.Originalid, ri.Originalid) {
			continue
		}

		ln := len(related.R.OriginalidOrders)
		if ln > 1 && i < ln-1 {
			related.R.OriginalidOrders[i] = related.R.OriginalidOrders[ln-1]
		}
		related.R.OriginalidOrders = related.R.OriginalidOrders[:ln-1]
		break
	}
	return nil
}

// SetShippingmethodidShippingMethod of the order to the related item.
// Sets o.R.ShippingmethodidShippingMethod to related.
// Adds o to related.R.ShippingmethodidOrders.
func (o *Order) SetShippingmethodidShippingMethod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShippingMethod) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shippingmethodid"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Shippingmethodid, related.ID)
	if o.R == nil {
		o.R = &orderR{
			ShippingmethodidShippingMethod: related,
		}
	} else {
		o.R.ShippingmethodidShippingMethod = related
	}

	if related.R == nil {
		related.R = &shippingMethodR{
			ShippingmethodidOrders: OrderSlice{o},
		}
	} else {
		related.R.ShippingmethodidOrders = append(related.R.ShippingmethodidOrders, o)
	}

	return nil
}

// RemoveShippingmethodidShippingMethod relationship.
// Sets o.R.ShippingmethodidShippingMethod to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveShippingmethodidShippingMethod(ctx context.Context, exec boil.ContextExecutor, related *ShippingMethod) error {
	var err error

	queries.SetScanner(&o.Shippingmethodid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("shippingmethodid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ShippingmethodidShippingMethod = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ShippingmethodidOrders {
		if queries.Equal(o.Shippingmethodid, ri.Shippingmethodid) {
			continue
		}

		ln := len(related.R.ShippingmethodidOrders)
		if ln > 1 && i < ln-1 {
			related.R.ShippingmethodidOrders[i] = related.R.ShippingmethodidOrders[ln-1]
		}
		related.R.ShippingmethodidOrders = related.R.ShippingmethodidOrders[:ln-1]
		break
	}
	return nil
}

// SetUseridUser of the order to the related item.
// Sets o.R.UseridUser to related.
// Adds o to related.R.UseridOrders.
func (o *Order) SetUseridUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Userid, related.ID)
	if o.R == nil {
		o.R = &orderR{
			UseridUser: related,
		}
	} else {
		o.R.UseridUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UseridOrders: OrderSlice{o},
		}
	} else {
		related.R.UseridOrders = append(related.R.UseridOrders, o)
	}

	return nil
}

// RemoveUseridUser relationship.
// Sets o.R.UseridUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveUseridUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.Userid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("userid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UseridUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UseridOrders {
		if queries.Equal(o.Userid, ri.Userid) {
			continue
		}

		ln := len(related.R.UseridOrders)
		if ln > 1 && i < ln-1 {
			related.R.UseridOrders[i] = related.R.UseridOrders[ln-1]
		}
		related.R.UseridOrders = related.R.UseridOrders[:ln-1]
		break
	}
	return nil
}

// SetVoucheridVoucher of the order to the related item.
// Sets o.R.VoucheridVoucher to related.
// Adds o to related.R.VoucheridOrders.
func (o *Order) SetVoucheridVoucher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Voucher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Voucherid, related.ID)
	if o.R == nil {
		o.R = &orderR{
			VoucheridVoucher: related,
		}
	} else {
		o.R.VoucheridVoucher = related
	}

	if related.R == nil {
		related.R = &voucherR{
			VoucheridOrders: OrderSlice{o},
		}
	} else {
		related.R.VoucheridOrders = append(related.R.VoucheridOrders, o)
	}

	return nil
}

// RemoveVoucheridVoucher relationship.
// Sets o.R.VoucheridVoucher to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveVoucheridVoucher(ctx context.Context, exec boil.ContextExecutor, related *Voucher) error {
	var err error

	queries.SetScanner(&o.Voucherid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("voucherid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.VoucheridVoucher = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.VoucheridOrders {
		if queries.Equal(o.Voucherid, ri.Voucherid) {
			continue
		}

		ln := len(related.R.VoucheridOrders)
		if ln > 1 && i < ln-1 {
			related.R.VoucheridOrders[i] = related.R.VoucheridOrders[ln-1]
		}
		related.R.VoucheridOrders = related.R.VoucheridOrders[:ln-1]
		break
	}
	return nil
}

// SetCollectionpointidWarehouse of the order to the related item.
// Sets o.R.CollectionpointidWarehouse to related.
// Adds o to related.R.CollectionpointidOrders.
func (o *Order) SetCollectionpointidWarehouse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Warehouse) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collectionpointid"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Collectionpointid, related.ID)
	if o.R == nil {
		o.R = &orderR{
			CollectionpointidWarehouse: related,
		}
	} else {
		o.R.CollectionpointidWarehouse = related
	}

	if related.R == nil {
		related.R = &warehouseR{
			CollectionpointidOrders: OrderSlice{o},
		}
	} else {
		related.R.CollectionpointidOrders = append(related.R.CollectionpointidOrders, o)
	}

	return nil
}

// RemoveCollectionpointidWarehouse relationship.
// Sets o.R.CollectionpointidWarehouse to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveCollectionpointidWarehouse(ctx context.Context, exec boil.ContextExecutor, related *Warehouse) error {
	var err error

	queries.SetScanner(&o.Collectionpointid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("collectionpointid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CollectionpointidWarehouse = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CollectionpointidOrders {
		if queries.Equal(o.Collectionpointid, ri.Collectionpointid) {
			continue
		}

		ln := len(related.R.CollectionpointidOrders)
		if ln > 1 && i < ln-1 {
			related.R.CollectionpointidOrders[i] = related.R.CollectionpointidOrders[ln-1]
		}
		related.R.CollectionpointidOrders = related.R.CollectionpointidOrders[:ln-1]
		break
	}
	return nil
}

// AddOrderidCustomerEvents adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderidCustomerEvents.
// Sets related.R.OrderidOrder appropriately.
func (o *Order) AddOrderidCustomerEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CustomerEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"customer_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
				strmangle.WhereClause("\"", "\"", 2, customerEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderidCustomerEvents: related,
		}
	} else {
		o.R.OrderidCustomerEvents = append(o.R.OrderidCustomerEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &customerEventR{
				OrderidOrder: o,
			}
		} else {
			rel.R.OrderidOrder = o
		}
	}
	return nil
}

// SetOrderidCustomerEvents removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderidOrder's OrderidCustomerEvents accordingly.
// Replaces o.R.OrderidCustomerEvents with related.
// Sets related.R.OrderidOrder's OrderidCustomerEvents accordingly.
func (o *Order) SetOrderidCustomerEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CustomerEvent) error {
	query := "update \"customer_events\" set \"orderid\" = null where \"orderid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderidCustomerEvents {
			queries.SetScanner(&rel.Orderid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderidOrder = nil
		}
		o.R.OrderidCustomerEvents = nil
	}

	return o.AddOrderidCustomerEvents(ctx, exec, insert, related...)
}

// RemoveOrderidCustomerEvents relationships from objects passed in.
// Removes related items from R.OrderidCustomerEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderidOrder.
func (o *Order) RemoveOrderidCustomerEvents(ctx context.Context, exec boil.ContextExecutor, related ...*CustomerEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderid, nil)
		if rel.R != nil {
			rel.R.OrderidOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderidCustomerEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderidCustomerEvents)
			if ln > 1 && i < ln-1 {
				o.R.OrderidCustomerEvents[i] = o.R.OrderidCustomerEvents[ln-1]
			}
			o.R.OrderidCustomerEvents = o.R.OrderidCustomerEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderidFulfillments adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderidFulfillments.
// Sets related.R.OrderidOrder appropriately.
func (o *Order) AddOrderidFulfillments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Fulfillment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"fulfillments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
				strmangle.WhereClause("\"", "\"", 2, fulfillmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderidFulfillments: related,
		}
	} else {
		o.R.OrderidFulfillments = append(o.R.OrderidFulfillments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fulfillmentR{
				OrderidOrder: o,
			}
		} else {
			rel.R.OrderidOrder = o
		}
	}
	return nil
}

// SetOrderidFulfillments removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderidOrder's OrderidFulfillments accordingly.
// Replaces o.R.OrderidFulfillments with related.
// Sets related.R.OrderidOrder's OrderidFulfillments accordingly.
func (o *Order) SetOrderidFulfillments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Fulfillment) error {
	query := "update \"fulfillments\" set \"orderid\" = null where \"orderid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderidFulfillments {
			queries.SetScanner(&rel.Orderid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderidOrder = nil
		}
		o.R.OrderidFulfillments = nil
	}

	return o.AddOrderidFulfillments(ctx, exec, insert, related...)
}

// RemoveOrderidFulfillments relationships from objects passed in.
// Removes related items from R.OrderidFulfillments (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderidOrder.
func (o *Order) RemoveOrderidFulfillments(ctx context.Context, exec boil.ContextExecutor, related ...*Fulfillment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderid, nil)
		if rel.R != nil {
			rel.R.OrderidOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderidFulfillments {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderidFulfillments)
			if ln > 1 && i < ln-1 {
				o.R.OrderidFulfillments[i] = o.R.OrderidFulfillments[ln-1]
			}
			o.R.OrderidFulfillments = o.R.OrderidFulfillments[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderidInvoiceEvents adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderidInvoiceEvents.
// Sets related.R.OrderidOrder appropriately.
func (o *Order) AddOrderidInvoiceEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InvoiceEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
				strmangle.WhereClause("\"", "\"", 2, invoiceEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderidInvoiceEvents: related,
		}
	} else {
		o.R.OrderidInvoiceEvents = append(o.R.OrderidInvoiceEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &invoiceEventR{
				OrderidOrder: o,
			}
		} else {
			rel.R.OrderidOrder = o
		}
	}
	return nil
}

// SetOrderidInvoiceEvents removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderidOrder's OrderidInvoiceEvents accordingly.
// Replaces o.R.OrderidInvoiceEvents with related.
// Sets related.R.OrderidOrder's OrderidInvoiceEvents accordingly.
func (o *Order) SetOrderidInvoiceEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InvoiceEvent) error {
	query := "update \"invoice_events\" set \"orderid\" = null where \"orderid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderidInvoiceEvents {
			queries.SetScanner(&rel.Orderid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderidOrder = nil
		}
		o.R.OrderidInvoiceEvents = nil
	}

	return o.AddOrderidInvoiceEvents(ctx, exec, insert, related...)
}

// RemoveOrderidInvoiceEvents relationships from objects passed in.
// Removes related items from R.OrderidInvoiceEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderidOrder.
func (o *Order) RemoveOrderidInvoiceEvents(ctx context.Context, exec boil.ContextExecutor, related ...*InvoiceEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderid, nil)
		if rel.R != nil {
			rel.R.OrderidOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderidInvoiceEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderidInvoiceEvents)
			if ln > 1 && i < ln-1 {
				o.R.OrderidInvoiceEvents[i] = o.R.OrderidInvoiceEvents[ln-1]
			}
			o.R.OrderidInvoiceEvents = o.R.OrderidInvoiceEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderidInvoices adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderidInvoices.
// Sets related.R.OrderidOrder appropriately.
func (o *Order) AddOrderidInvoices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Invoice) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
				strmangle.WhereClause("\"", "\"", 2, invoicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderidInvoices: related,
		}
	} else {
		o.R.OrderidInvoices = append(o.R.OrderidInvoices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &invoiceR{
				OrderidOrder: o,
			}
		} else {
			rel.R.OrderidOrder = o
		}
	}
	return nil
}

// SetOrderidInvoices removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderidOrder's OrderidInvoices accordingly.
// Replaces o.R.OrderidInvoices with related.
// Sets related.R.OrderidOrder's OrderidInvoices accordingly.
func (o *Order) SetOrderidInvoices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Invoice) error {
	query := "update \"invoices\" set \"orderid\" = null where \"orderid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderidInvoices {
			queries.SetScanner(&rel.Orderid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderidOrder = nil
		}
		o.R.OrderidInvoices = nil
	}

	return o.AddOrderidInvoices(ctx, exec, insert, related...)
}

// RemoveOrderidInvoices relationships from objects passed in.
// Removes related items from R.OrderidInvoices (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderidOrder.
func (o *Order) RemoveOrderidInvoices(ctx context.Context, exec boil.ContextExecutor, related ...*Invoice) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderid, nil)
		if rel.R != nil {
			rel.R.OrderidOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderidInvoices {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderidInvoices)
			if ln > 1 && i < ln-1 {
				o.R.OrderidInvoices[i] = o.R.OrderidInvoices[ln-1]
			}
			o.R.OrderidInvoices = o.R.OrderidInvoices[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderidOrderDiscounts adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderidOrderDiscounts.
// Sets related.R.OrderidOrder appropriately.
func (o *Order) AddOrderidOrderDiscounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderDiscount) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_discounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
				strmangle.WhereClause("\"", "\"", 2, orderDiscountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderidOrderDiscounts: related,
		}
	} else {
		o.R.OrderidOrderDiscounts = append(o.R.OrderidOrderDiscounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderDiscountR{
				OrderidOrder: o,
			}
		} else {
			rel.R.OrderidOrder = o
		}
	}
	return nil
}

// SetOrderidOrderDiscounts removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderidOrder's OrderidOrderDiscounts accordingly.
// Replaces o.R.OrderidOrderDiscounts with related.
// Sets related.R.OrderidOrder's OrderidOrderDiscounts accordingly.
func (o *Order) SetOrderidOrderDiscounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderDiscount) error {
	query := "update \"order_discounts\" set \"orderid\" = null where \"orderid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderidOrderDiscounts {
			queries.SetScanner(&rel.Orderid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderidOrder = nil
		}
		o.R.OrderidOrderDiscounts = nil
	}

	return o.AddOrderidOrderDiscounts(ctx, exec, insert, related...)
}

// RemoveOrderidOrderDiscounts relationships from objects passed in.
// Removes related items from R.OrderidOrderDiscounts (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderidOrder.
func (o *Order) RemoveOrderidOrderDiscounts(ctx context.Context, exec boil.ContextExecutor, related ...*OrderDiscount) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderid, nil)
		if rel.R != nil {
			rel.R.OrderidOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderidOrderDiscounts {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderidOrderDiscounts)
			if ln > 1 && i < ln-1 {
				o.R.OrderidOrderDiscounts[i] = o.R.OrderidOrderDiscounts[ln-1]
			}
			o.R.OrderidOrderDiscounts = o.R.OrderidOrderDiscounts[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderidOrderEvents adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderidOrderEvents.
// Sets related.R.OrderidOrder appropriately.
func (o *Order) AddOrderidOrderEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
				strmangle.WhereClause("\"", "\"", 2, orderEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderidOrderEvents: related,
		}
	} else {
		o.R.OrderidOrderEvents = append(o.R.OrderidOrderEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderEventR{
				OrderidOrder: o,
			}
		} else {
			rel.R.OrderidOrder = o
		}
	}
	return nil
}

// SetOrderidOrderEvents removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderidOrder's OrderidOrderEvents accordingly.
// Replaces o.R.OrderidOrderEvents with related.
// Sets related.R.OrderidOrder's OrderidOrderEvents accordingly.
func (o *Order) SetOrderidOrderEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderEvent) error {
	query := "update \"order_events\" set \"orderid\" = null where \"orderid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderidOrderEvents {
			queries.SetScanner(&rel.Orderid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderidOrder = nil
		}
		o.R.OrderidOrderEvents = nil
	}

	return o.AddOrderidOrderEvents(ctx, exec, insert, related...)
}

// RemoveOrderidOrderEvents relationships from objects passed in.
// Removes related items from R.OrderidOrderEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderidOrder.
func (o *Order) RemoveOrderidOrderEvents(ctx context.Context, exec boil.ContextExecutor, related ...*OrderEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderid, nil)
		if rel.R != nil {
			rel.R.OrderidOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderidOrderEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderidOrderEvents)
			if ln > 1 && i < ln-1 {
				o.R.OrderidOrderEvents[i] = o.R.OrderidOrderEvents[ln-1]
			}
			o.R.OrderidOrderEvents = o.R.OrderidOrderEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderidOrderGiftcards adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderidOrderGiftcards.
// Sets related.R.OrderidOrder appropriately.
func (o *Order) AddOrderidOrderGiftcards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderGiftcard) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_giftcards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
				strmangle.WhereClause("\"", "\"", 2, orderGiftcardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderidOrderGiftcards: related,
		}
	} else {
		o.R.OrderidOrderGiftcards = append(o.R.OrderidOrderGiftcards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderGiftcardR{
				OrderidOrder: o,
			}
		} else {
			rel.R.OrderidOrder = o
		}
	}
	return nil
}

// SetOrderidOrderGiftcards removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderidOrder's OrderidOrderGiftcards accordingly.
// Replaces o.R.OrderidOrderGiftcards with related.
// Sets related.R.OrderidOrder's OrderidOrderGiftcards accordingly.
func (o *Order) SetOrderidOrderGiftcards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderGiftcard) error {
	query := "update \"order_giftcards\" set \"orderid\" = null where \"orderid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderidOrderGiftcards {
			queries.SetScanner(&rel.Orderid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderidOrder = nil
		}
		o.R.OrderidOrderGiftcards = nil
	}

	return o.AddOrderidOrderGiftcards(ctx, exec, insert, related...)
}

// RemoveOrderidOrderGiftcards relationships from objects passed in.
// Removes related items from R.OrderidOrderGiftcards (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderidOrder.
func (o *Order) RemoveOrderidOrderGiftcards(ctx context.Context, exec boil.ContextExecutor, related ...*OrderGiftcard) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderid, nil)
		if rel.R != nil {
			rel.R.OrderidOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderidOrderGiftcards {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderidOrderGiftcards)
			if ln > 1 && i < ln-1 {
				o.R.OrderidOrderGiftcards[i] = o.R.OrderidOrderGiftcards[ln-1]
			}
			o.R.OrderidOrderGiftcards = o.R.OrderidOrderGiftcards[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderidOrderLines adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderidOrderLines.
// Sets related.R.OrderidOrder appropriately.
func (o *Order) AddOrderidOrderLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderLine) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_lines\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
				strmangle.WhereClause("\"", "\"", 2, orderLinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderidOrderLines: related,
		}
	} else {
		o.R.OrderidOrderLines = append(o.R.OrderidOrderLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderLineR{
				OrderidOrder: o,
			}
		} else {
			rel.R.OrderidOrder = o
		}
	}
	return nil
}

// SetOrderidOrderLines removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderidOrder's OrderidOrderLines accordingly.
// Replaces o.R.OrderidOrderLines with related.
// Sets related.R.OrderidOrder's OrderidOrderLines accordingly.
func (o *Order) SetOrderidOrderLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderLine) error {
	query := "update \"order_lines\" set \"orderid\" = null where \"orderid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderidOrderLines {
			queries.SetScanner(&rel.Orderid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderidOrder = nil
		}
		o.R.OrderidOrderLines = nil
	}

	return o.AddOrderidOrderLines(ctx, exec, insert, related...)
}

// RemoveOrderidOrderLines relationships from objects passed in.
// Removes related items from R.OrderidOrderLines (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderidOrder.
func (o *Order) RemoveOrderidOrderLines(ctx context.Context, exec boil.ContextExecutor, related ...*OrderLine) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderid, nil)
		if rel.R != nil {
			rel.R.OrderidOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderidOrderLines {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderidOrderLines)
			if ln > 1 && i < ln-1 {
				o.R.OrderidOrderLines[i] = o.R.OrderidOrderLines[ln-1]
			}
			o.R.OrderidOrderLines = o.R.OrderidOrderLines[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginalidOrders adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OriginalidOrders.
// Sets related.R.OriginalidOrder appropriately.
func (o *Order) AddOriginalidOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Originalid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"originalid"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Originalid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OriginalidOrders: related,
		}
	} else {
		o.R.OriginalidOrders = append(o.R.OriginalidOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				OriginalidOrder: o,
			}
		} else {
			rel.R.OriginalidOrder = o
		}
	}
	return nil
}

// SetOriginalidOrders removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OriginalidOrder's OriginalidOrders accordingly.
// Replaces o.R.OriginalidOrders with related.
// Sets related.R.OriginalidOrder's OriginalidOrders accordingly.
func (o *Order) SetOriginalidOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"originalid\" = null where \"originalid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginalidOrders {
			queries.SetScanner(&rel.Originalid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OriginalidOrder = nil
		}
		o.R.OriginalidOrders = nil
	}

	return o.AddOriginalidOrders(ctx, exec, insert, related...)
}

// RemoveOriginalidOrders relationships from objects passed in.
// Removes related items from R.OriginalidOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.OriginalidOrder.
func (o *Order) RemoveOriginalidOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Originalid, nil)
		if rel.R != nil {
			rel.R.OriginalidOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("originalid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginalidOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginalidOrders)
			if ln > 1 && i < ln-1 {
				o.R.OriginalidOrders[i] = o.R.OriginalidOrders[ln-1]
			}
			o.R.OriginalidOrders = o.R.OriginalidOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderidPayments adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderidPayments.
// Sets related.R.OrderidOrder appropriately.
func (o *Order) AddOrderidPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Orderid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Orderid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderidPayments: related,
		}
	} else {
		o.R.OrderidPayments = append(o.R.OrderidPayments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				OrderidOrder: o,
			}
		} else {
			rel.R.OrderidOrder = o
		}
	}
	return nil
}

// SetOrderidPayments removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.OrderidOrder's OrderidPayments accordingly.
// Replaces o.R.OrderidPayments with related.
// Sets related.R.OrderidOrder's OrderidPayments accordingly.
func (o *Order) SetOrderidPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	query := "update \"payments\" set \"orderid\" = null where \"orderid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderidPayments {
			queries.SetScanner(&rel.Orderid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.OrderidOrder = nil
		}
		o.R.OrderidPayments = nil
	}

	return o.AddOrderidPayments(ctx, exec, insert, related...)
}

// RemoveOrderidPayments relationships from objects passed in.
// Removes related items from R.OrderidPayments (uses pointer comparison, removal does not keep order)
// Sets related.R.OrderidOrder.
func (o *Order) RemoveOrderidPayments(ctx context.Context, exec boil.ContextExecutor, related ...*Payment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Orderid, nil)
		if rel.R != nil {
			rel.R.OrderidOrder = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderidPayments {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderidPayments)
			if ln > 1 && i < ln-1 {
				o.R.OrderidPayments[i] = o.R.OrderidPayments[ln-1]
			}
			o.R.OrderidPayments = o.R.OrderidPayments[:ln-1]
			break
		}
	}

	return nil
}

// Orders retrieves all the records using an executor.
func Orders(mods ...qm.QueryMod) orderQuery {
	mods = append(mods, qm.From("\"orders\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"orders\".*"})
	}

	return orderQuery{q}
}

// FindOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrder(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Order, error) {
	orderObj := &Order{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"orders\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from orders")
	}

	if err = orderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderObj, err
	}

	return orderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Order) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no orders provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderInsertCacheMut.RLock()
	cache, cached := orderInsertCache[key]
	orderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderAllColumns,
			orderColumnsWithDefault,
			orderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderType, orderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"orders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"orders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into orders")
	}

	if !cached {
		orderInsertCacheMut.Lock()
		orderInsertCache[key] = cache
		orderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Order.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Order) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderUpdateCacheMut.RLock()
	cache, cached := orderUpdateCache[key]
	orderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderAllColumns,
			orderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update orders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"orders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, append(wl, orderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update orders row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for orders")
	}

	if !cached {
		orderUpdateCacheMut.Lock()
		orderUpdateCache[key] = cache
		orderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for orders")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in order slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all order")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Order) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no orders provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderUpsertCacheMut.RLock()
	cache, cached := orderUpsertCache[key]
	orderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderAllColumns,
			orderColumnsWithDefault,
			orderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderAllColumns,
			orderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert orders, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderPrimaryKeyColumns))
			copy(conflict, orderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"orders\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderType, orderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert orders")
	}

	if !cached {
		orderUpsertCacheMut.Lock()
		orderUpsertCache[key] = cache
		orderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Order record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Order) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Order provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderPrimaryKeyMapping)
	sql := "DELETE FROM \"orders\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for orders")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for orders")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"orders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for orders")
	}

	if len(orderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Order) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"orders\".* FROM \"orders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderSlice")
	}

	*o = slice

	return nil
}

// OrderExists checks if the Order row exists.
func OrderExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"orders\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if orders exists")
	}

	return exists, nil
}

// Exists checks if the Order row exists.
func (o *Order) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderExists(ctx, exec, o.ID)
}
