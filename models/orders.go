// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Order is an object representing the database table.
type Order struct {
	ID                           string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreateAt                     null.Int64   `boil:"create_at" json:"create_at,omitempty" toml:"create_at" yaml:"create_at,omitempty"`
	Status                       null.String  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	UserID                       null.String  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	LanguageCode                 null.String  `boil:"language_code" json:"language_code,omitempty" toml:"language_code" yaml:"language_code,omitempty"`
	TrackingClientID             null.String  `boil:"tracking_client_id" json:"tracking_client_id,omitempty" toml:"tracking_client_id" yaml:"tracking_client_id,omitempty"`
	BillingAddressID             null.String  `boil:"billing_address_id" json:"billing_address_id,omitempty" toml:"billing_address_id" yaml:"billing_address_id,omitempty"`
	ShippingAddressID            null.String  `boil:"shipping_address_id" json:"shipping_address_id,omitempty" toml:"shipping_address_id" yaml:"shipping_address_id,omitempty"`
	UserEmail                    null.String  `boil:"user_email" json:"user_email,omitempty" toml:"user_email" yaml:"user_email,omitempty"`
	OriginalID                   null.String  `boil:"original_id" json:"original_id,omitempty" toml:"original_id" yaml:"original_id,omitempty"`
	Origin                       null.String  `boil:"origin" json:"origin,omitempty" toml:"origin" yaml:"origin,omitempty"`
	Currency                     null.String  `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	ShippingMethodID             null.String  `boil:"shipping_method_id" json:"shipping_method_id,omitempty" toml:"shipping_method_id" yaml:"shipping_method_id,omitempty"`
	CollectionPointID            null.String  `boil:"collection_point_id" json:"collection_point_id,omitempty" toml:"collection_point_id" yaml:"collection_point_id,omitempty"`
	ShippingMethodName           null.String  `boil:"shipping_method_name" json:"shipping_method_name,omitempty" toml:"shipping_method_name" yaml:"shipping_method_name,omitempty"`
	CollectionPointName          null.String  `boil:"collection_point_name" json:"collection_point_name,omitempty" toml:"collection_point_name" yaml:"collection_point_name,omitempty"`
	ChannelID                    null.String  `boil:"channel_id" json:"channel_id,omitempty" toml:"channel_id" yaml:"channel_id,omitempty"`
	ShippingPriceNetAmount       null.Float64 `boil:"shipping_price_net_amount" json:"shipping_price_net_amount,omitempty" toml:"shipping_price_net_amount" yaml:"shipping_price_net_amount,omitempty"`
	ShippingPriceGrossAmount     null.Float64 `boil:"shipping_price_gross_amount" json:"shipping_price_gross_amount,omitempty" toml:"shipping_price_gross_amount" yaml:"shipping_price_gross_amount,omitempty"`
	ShippingTaxRate              null.Float64 `boil:"shipping_tax_rate" json:"shipping_tax_rate,omitempty" toml:"shipping_tax_rate" yaml:"shipping_tax_rate,omitempty"`
	Token                        null.String  `boil:"token" json:"token,omitempty" toml:"token" yaml:"token,omitempty"`
	CheckoutToken                null.String  `boil:"checkout_token" json:"checkout_token,omitempty" toml:"checkout_token" yaml:"checkout_token,omitempty"`
	TotalNetAmount               null.Float64 `boil:"total_net_amount" json:"total_net_amount,omitempty" toml:"total_net_amount" yaml:"total_net_amount,omitempty"`
	UndiscountedTotalNetAmount   null.Float64 `boil:"undiscounted_total_net_amount" json:"undiscounted_total_net_amount,omitempty" toml:"undiscounted_total_net_amount" yaml:"undiscounted_total_net_amount,omitempty"`
	TotalGrossAmount             null.Float64 `boil:"total_gross_amount" json:"total_gross_amount,omitempty" toml:"total_gross_amount" yaml:"total_gross_amount,omitempty"`
	UndiscountedTotalGrossAmount null.Float64 `boil:"undiscounted_total_gross_amount" json:"undiscounted_total_gross_amount,omitempty" toml:"undiscounted_total_gross_amount" yaml:"undiscounted_total_gross_amount,omitempty"`
	TotalPaidAmount              null.Float64 `boil:"total_paid_amount" json:"total_paid_amount,omitempty" toml:"total_paid_amount" yaml:"total_paid_amount,omitempty"`
	VoucherID                    null.String  `boil:"voucher_id" json:"voucher_id,omitempty" toml:"voucher_id" yaml:"voucher_id,omitempty"`
	DisplayGrossPrices           null.Bool    `boil:"display_gross_prices" json:"display_gross_prices,omitempty" toml:"display_gross_prices" yaml:"display_gross_prices,omitempty"`
	CustomerNote                 null.String  `boil:"customer_note" json:"customer_note,omitempty" toml:"customer_note" yaml:"customer_note,omitempty"`
	WeightAmount                 null.Float32 `boil:"weight_amount" json:"weight_amount,omitempty" toml:"weight_amount" yaml:"weight_amount,omitempty"`
	WeightUnit                   null.String  `boil:"weight_unit" json:"weight_unit,omitempty" toml:"weight_unit" yaml:"weight_unit,omitempty"`
	RedirectURL                  null.String  `boil:"redirect_url" json:"redirect_url,omitempty" toml:"redirect_url" yaml:"redirect_url,omitempty"`
	Metadata                     null.JSON    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata              null.JSON    `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *orderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderColumns = struct {
	ID                           string
	CreateAt                     string
	Status                       string
	UserID                       string
	LanguageCode                 string
	TrackingClientID             string
	BillingAddressID             string
	ShippingAddressID            string
	UserEmail                    string
	OriginalID                   string
	Origin                       string
	Currency                     string
	ShippingMethodID             string
	CollectionPointID            string
	ShippingMethodName           string
	CollectionPointName          string
	ChannelID                    string
	ShippingPriceNetAmount       string
	ShippingPriceGrossAmount     string
	ShippingTaxRate              string
	Token                        string
	CheckoutToken                string
	TotalNetAmount               string
	UndiscountedTotalNetAmount   string
	TotalGrossAmount             string
	UndiscountedTotalGrossAmount string
	TotalPaidAmount              string
	VoucherID                    string
	DisplayGrossPrices           string
	CustomerNote                 string
	WeightAmount                 string
	WeightUnit                   string
	RedirectURL                  string
	Metadata                     string
	PrivateMetadata              string
}{
	ID:                           "id",
	CreateAt:                     "create_at",
	Status:                       "status",
	UserID:                       "user_id",
	LanguageCode:                 "language_code",
	TrackingClientID:             "tracking_client_id",
	BillingAddressID:             "billing_address_id",
	ShippingAddressID:            "shipping_address_id",
	UserEmail:                    "user_email",
	OriginalID:                   "original_id",
	Origin:                       "origin",
	Currency:                     "currency",
	ShippingMethodID:             "shipping_method_id",
	CollectionPointID:            "collection_point_id",
	ShippingMethodName:           "shipping_method_name",
	CollectionPointName:          "collection_point_name",
	ChannelID:                    "channel_id",
	ShippingPriceNetAmount:       "shipping_price_net_amount",
	ShippingPriceGrossAmount:     "shipping_price_gross_amount",
	ShippingTaxRate:              "shipping_tax_rate",
	Token:                        "token",
	CheckoutToken:                "checkout_token",
	TotalNetAmount:               "total_net_amount",
	UndiscountedTotalNetAmount:   "undiscounted_total_net_amount",
	TotalGrossAmount:             "total_gross_amount",
	UndiscountedTotalGrossAmount: "undiscounted_total_gross_amount",
	TotalPaidAmount:              "total_paid_amount",
	VoucherID:                    "voucher_id",
	DisplayGrossPrices:           "display_gross_prices",
	CustomerNote:                 "customer_note",
	WeightAmount:                 "weight_amount",
	WeightUnit:                   "weight_unit",
	RedirectURL:                  "redirect_url",
	Metadata:                     "metadata",
	PrivateMetadata:              "private_metadata",
}

var OrderTableColumns = struct {
	ID                           string
	CreateAt                     string
	Status                       string
	UserID                       string
	LanguageCode                 string
	TrackingClientID             string
	BillingAddressID             string
	ShippingAddressID            string
	UserEmail                    string
	OriginalID                   string
	Origin                       string
	Currency                     string
	ShippingMethodID             string
	CollectionPointID            string
	ShippingMethodName           string
	CollectionPointName          string
	ChannelID                    string
	ShippingPriceNetAmount       string
	ShippingPriceGrossAmount     string
	ShippingTaxRate              string
	Token                        string
	CheckoutToken                string
	TotalNetAmount               string
	UndiscountedTotalNetAmount   string
	TotalGrossAmount             string
	UndiscountedTotalGrossAmount string
	TotalPaidAmount              string
	VoucherID                    string
	DisplayGrossPrices           string
	CustomerNote                 string
	WeightAmount                 string
	WeightUnit                   string
	RedirectURL                  string
	Metadata                     string
	PrivateMetadata              string
}{
	ID:                           "orders.id",
	CreateAt:                     "orders.create_at",
	Status:                       "orders.status",
	UserID:                       "orders.user_id",
	LanguageCode:                 "orders.language_code",
	TrackingClientID:             "orders.tracking_client_id",
	BillingAddressID:             "orders.billing_address_id",
	ShippingAddressID:            "orders.shipping_address_id",
	UserEmail:                    "orders.user_email",
	OriginalID:                   "orders.original_id",
	Origin:                       "orders.origin",
	Currency:                     "orders.currency",
	ShippingMethodID:             "orders.shipping_method_id",
	CollectionPointID:            "orders.collection_point_id",
	ShippingMethodName:           "orders.shipping_method_name",
	CollectionPointName:          "orders.collection_point_name",
	ChannelID:                    "orders.channel_id",
	ShippingPriceNetAmount:       "orders.shipping_price_net_amount",
	ShippingPriceGrossAmount:     "orders.shipping_price_gross_amount",
	ShippingTaxRate:              "orders.shipping_tax_rate",
	Token:                        "orders.token",
	CheckoutToken:                "orders.checkout_token",
	TotalNetAmount:               "orders.total_net_amount",
	UndiscountedTotalNetAmount:   "orders.undiscounted_total_net_amount",
	TotalGrossAmount:             "orders.total_gross_amount",
	UndiscountedTotalGrossAmount: "orders.undiscounted_total_gross_amount",
	TotalPaidAmount:              "orders.total_paid_amount",
	VoucherID:                    "orders.voucher_id",
	DisplayGrossPrices:           "orders.display_gross_prices",
	CustomerNote:                 "orders.customer_note",
	WeightAmount:                 "orders.weight_amount",
	WeightUnit:                   "orders.weight_unit",
	RedirectURL:                  "orders.redirect_url",
	Metadata:                     "orders.metadata",
	PrivateMetadata:              "orders.private_metadata",
}

// Generated where

type whereHelpernull_Float32 struct{ field string }

func (w whereHelpernull_Float32) EQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float32) NEQ(x null.Float32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float32) LT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float32) LTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float32) GT(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float32) GTE(x null.Float32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float32) IN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float32) NIN(slice []float32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var OrderWhere = struct {
	ID                           whereHelperstring
	CreateAt                     whereHelpernull_Int64
	Status                       whereHelpernull_String
	UserID                       whereHelpernull_String
	LanguageCode                 whereHelpernull_String
	TrackingClientID             whereHelpernull_String
	BillingAddressID             whereHelpernull_String
	ShippingAddressID            whereHelpernull_String
	UserEmail                    whereHelpernull_String
	OriginalID                   whereHelpernull_String
	Origin                       whereHelpernull_String
	Currency                     whereHelpernull_String
	ShippingMethodID             whereHelpernull_String
	CollectionPointID            whereHelpernull_String
	ShippingMethodName           whereHelpernull_String
	CollectionPointName          whereHelpernull_String
	ChannelID                    whereHelpernull_String
	ShippingPriceNetAmount       whereHelpernull_Float64
	ShippingPriceGrossAmount     whereHelpernull_Float64
	ShippingTaxRate              whereHelpernull_Float64
	Token                        whereHelpernull_String
	CheckoutToken                whereHelpernull_String
	TotalNetAmount               whereHelpernull_Float64
	UndiscountedTotalNetAmount   whereHelpernull_Float64
	TotalGrossAmount             whereHelpernull_Float64
	UndiscountedTotalGrossAmount whereHelpernull_Float64
	TotalPaidAmount              whereHelpernull_Float64
	VoucherID                    whereHelpernull_String
	DisplayGrossPrices           whereHelpernull_Bool
	CustomerNote                 whereHelpernull_String
	WeightAmount                 whereHelpernull_Float32
	WeightUnit                   whereHelpernull_String
	RedirectURL                  whereHelpernull_String
	Metadata                     whereHelpernull_JSON
	PrivateMetadata              whereHelpernull_JSON
}{
	ID:                           whereHelperstring{field: "\"orders\".\"id\""},
	CreateAt:                     whereHelpernull_Int64{field: "\"orders\".\"create_at\""},
	Status:                       whereHelpernull_String{field: "\"orders\".\"status\""},
	UserID:                       whereHelpernull_String{field: "\"orders\".\"user_id\""},
	LanguageCode:                 whereHelpernull_String{field: "\"orders\".\"language_code\""},
	TrackingClientID:             whereHelpernull_String{field: "\"orders\".\"tracking_client_id\""},
	BillingAddressID:             whereHelpernull_String{field: "\"orders\".\"billing_address_id\""},
	ShippingAddressID:            whereHelpernull_String{field: "\"orders\".\"shipping_address_id\""},
	UserEmail:                    whereHelpernull_String{field: "\"orders\".\"user_email\""},
	OriginalID:                   whereHelpernull_String{field: "\"orders\".\"original_id\""},
	Origin:                       whereHelpernull_String{field: "\"orders\".\"origin\""},
	Currency:                     whereHelpernull_String{field: "\"orders\".\"currency\""},
	ShippingMethodID:             whereHelpernull_String{field: "\"orders\".\"shipping_method_id\""},
	CollectionPointID:            whereHelpernull_String{field: "\"orders\".\"collection_point_id\""},
	ShippingMethodName:           whereHelpernull_String{field: "\"orders\".\"shipping_method_name\""},
	CollectionPointName:          whereHelpernull_String{field: "\"orders\".\"collection_point_name\""},
	ChannelID:                    whereHelpernull_String{field: "\"orders\".\"channel_id\""},
	ShippingPriceNetAmount:       whereHelpernull_Float64{field: "\"orders\".\"shipping_price_net_amount\""},
	ShippingPriceGrossAmount:     whereHelpernull_Float64{field: "\"orders\".\"shipping_price_gross_amount\""},
	ShippingTaxRate:              whereHelpernull_Float64{field: "\"orders\".\"shipping_tax_rate\""},
	Token:                        whereHelpernull_String{field: "\"orders\".\"token\""},
	CheckoutToken:                whereHelpernull_String{field: "\"orders\".\"checkout_token\""},
	TotalNetAmount:               whereHelpernull_Float64{field: "\"orders\".\"total_net_amount\""},
	UndiscountedTotalNetAmount:   whereHelpernull_Float64{field: "\"orders\".\"undiscounted_total_net_amount\""},
	TotalGrossAmount:             whereHelpernull_Float64{field: "\"orders\".\"total_gross_amount\""},
	UndiscountedTotalGrossAmount: whereHelpernull_Float64{field: "\"orders\".\"undiscounted_total_gross_amount\""},
	TotalPaidAmount:              whereHelpernull_Float64{field: "\"orders\".\"total_paid_amount\""},
	VoucherID:                    whereHelpernull_String{field: "\"orders\".\"voucher_id\""},
	DisplayGrossPrices:           whereHelpernull_Bool{field: "\"orders\".\"display_gross_prices\""},
	CustomerNote:                 whereHelpernull_String{field: "\"orders\".\"customer_note\""},
	WeightAmount:                 whereHelpernull_Float32{field: "\"orders\".\"weight_amount\""},
	WeightUnit:                   whereHelpernull_String{field: "\"orders\".\"weight_unit\""},
	RedirectURL:                  whereHelpernull_String{field: "\"orders\".\"redirect_url\""},
	Metadata:                     whereHelpernull_JSON{field: "\"orders\".\"metadata\""},
	PrivateMetadata:              whereHelpernull_JSON{field: "\"orders\".\"private_metadata\""},
}

// OrderRels is where relationship names are stored.
var OrderRels = struct {
	BillingAddress  string
	Channel         string
	Original        string
	ShippingMethod  string
	User            string
	Voucher         string
	CollectionPoint string
	CustomerEvents  string
	Fulfillments    string
	InvoiceEvents   string
	Invoices        string
	OrderDiscounts  string
	OrderEvents     string
	OrderGiftcards  string
	OrderLines      string
	OriginalOrders  string
	Payments        string
}{
	BillingAddress:  "BillingAddress",
	Channel:         "Channel",
	Original:        "Original",
	ShippingMethod:  "ShippingMethod",
	User:            "User",
	Voucher:         "Voucher",
	CollectionPoint: "CollectionPoint",
	CustomerEvents:  "CustomerEvents",
	Fulfillments:    "Fulfillments",
	InvoiceEvents:   "InvoiceEvents",
	Invoices:        "Invoices",
	OrderDiscounts:  "OrderDiscounts",
	OrderEvents:     "OrderEvents",
	OrderGiftcards:  "OrderGiftcards",
	OrderLines:      "OrderLines",
	OriginalOrders:  "OriginalOrders",
	Payments:        "Payments",
}

// orderR is where relationships are stored.
type orderR struct {
	BillingAddress  *Address           `boil:"BillingAddress" json:"BillingAddress" toml:"BillingAddress" yaml:"BillingAddress"`
	Channel         *Channel           `boil:"Channel" json:"Channel" toml:"Channel" yaml:"Channel"`
	Original        *Order             `boil:"Original" json:"Original" toml:"Original" yaml:"Original"`
	ShippingMethod  *ShippingMethod    `boil:"ShippingMethod" json:"ShippingMethod" toml:"ShippingMethod" yaml:"ShippingMethod"`
	User            *User              `boil:"User" json:"User" toml:"User" yaml:"User"`
	Voucher         *Voucher           `boil:"Voucher" json:"Voucher" toml:"Voucher" yaml:"Voucher"`
	CollectionPoint *Warehouse         `boil:"CollectionPoint" json:"CollectionPoint" toml:"CollectionPoint" yaml:"CollectionPoint"`
	CustomerEvents  CustomerEventSlice `boil:"CustomerEvents" json:"CustomerEvents" toml:"CustomerEvents" yaml:"CustomerEvents"`
	Fulfillments    FulfillmentSlice   `boil:"Fulfillments" json:"Fulfillments" toml:"Fulfillments" yaml:"Fulfillments"`
	InvoiceEvents   InvoiceEventSlice  `boil:"InvoiceEvents" json:"InvoiceEvents" toml:"InvoiceEvents" yaml:"InvoiceEvents"`
	Invoices        InvoiceSlice       `boil:"Invoices" json:"Invoices" toml:"Invoices" yaml:"Invoices"`
	OrderDiscounts  OrderDiscountSlice `boil:"OrderDiscounts" json:"OrderDiscounts" toml:"OrderDiscounts" yaml:"OrderDiscounts"`
	OrderEvents     OrderEventSlice    `boil:"OrderEvents" json:"OrderEvents" toml:"OrderEvents" yaml:"OrderEvents"`
	OrderGiftcards  OrderGiftcardSlice `boil:"OrderGiftcards" json:"OrderGiftcards" toml:"OrderGiftcards" yaml:"OrderGiftcards"`
	OrderLines      OrderLineSlice     `boil:"OrderLines" json:"OrderLines" toml:"OrderLines" yaml:"OrderLines"`
	OriginalOrders  OrderSlice         `boil:"OriginalOrders" json:"OriginalOrders" toml:"OriginalOrders" yaml:"OriginalOrders"`
	Payments        PaymentSlice       `boil:"Payments" json:"Payments" toml:"Payments" yaml:"Payments"`
}

// NewStruct creates a new relationship struct
func (*orderR) NewStruct() *orderR {
	return &orderR{}
}

func (r *orderR) GetBillingAddress() *Address {
	if r == nil {
		return nil
	}
	return r.BillingAddress
}

func (r *orderR) GetChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.Channel
}

func (r *orderR) GetOriginal() *Order {
	if r == nil {
		return nil
	}
	return r.Original
}

func (r *orderR) GetShippingMethod() *ShippingMethod {
	if r == nil {
		return nil
	}
	return r.ShippingMethod
}

func (r *orderR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *orderR) GetVoucher() *Voucher {
	if r == nil {
		return nil
	}
	return r.Voucher
}

func (r *orderR) GetCollectionPoint() *Warehouse {
	if r == nil {
		return nil
	}
	return r.CollectionPoint
}

func (r *orderR) GetCustomerEvents() CustomerEventSlice {
	if r == nil {
		return nil
	}
	return r.CustomerEvents
}

func (r *orderR) GetFulfillments() FulfillmentSlice {
	if r == nil {
		return nil
	}
	return r.Fulfillments
}

func (r *orderR) GetInvoiceEvents() InvoiceEventSlice {
	if r == nil {
		return nil
	}
	return r.InvoiceEvents
}

func (r *orderR) GetInvoices() InvoiceSlice {
	if r == nil {
		return nil
	}
	return r.Invoices
}

func (r *orderR) GetOrderDiscounts() OrderDiscountSlice {
	if r == nil {
		return nil
	}
	return r.OrderDiscounts
}

func (r *orderR) GetOrderEvents() OrderEventSlice {
	if r == nil {
		return nil
	}
	return r.OrderEvents
}

func (r *orderR) GetOrderGiftcards() OrderGiftcardSlice {
	if r == nil {
		return nil
	}
	return r.OrderGiftcards
}

func (r *orderR) GetOrderLines() OrderLineSlice {
	if r == nil {
		return nil
	}
	return r.OrderLines
}

func (r *orderR) GetOriginalOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.OriginalOrders
}

func (r *orderR) GetPayments() PaymentSlice {
	if r == nil {
		return nil
	}
	return r.Payments
}

// orderL is where Load methods for each relationship are stored.
type orderL struct{}

var (
	orderAllColumns            = []string{"id", "create_at", "status", "user_id", "language_code", "tracking_client_id", "billing_address_id", "shipping_address_id", "user_email", "original_id", "origin", "currency", "shipping_method_id", "collection_point_id", "shipping_method_name", "collection_point_name", "channel_id", "shipping_price_net_amount", "shipping_price_gross_amount", "shipping_tax_rate", "token", "checkout_token", "total_net_amount", "undiscounted_total_net_amount", "total_gross_amount", "undiscounted_total_gross_amount", "total_paid_amount", "voucher_id", "display_gross_prices", "customer_note", "weight_amount", "weight_unit", "redirect_url", "metadata", "private_metadata"}
	orderColumnsWithoutDefault = []string{"id"}
	orderColumnsWithDefault    = []string{"create_at", "status", "user_id", "language_code", "tracking_client_id", "billing_address_id", "shipping_address_id", "user_email", "original_id", "origin", "currency", "shipping_method_id", "collection_point_id", "shipping_method_name", "collection_point_name", "channel_id", "shipping_price_net_amount", "shipping_price_gross_amount", "shipping_tax_rate", "token", "checkout_token", "total_net_amount", "undiscounted_total_net_amount", "total_gross_amount", "undiscounted_total_gross_amount", "total_paid_amount", "voucher_id", "display_gross_prices", "customer_note", "weight_amount", "weight_unit", "redirect_url", "metadata", "private_metadata"}
	orderPrimaryKeyColumns     = []string{"id"}
	orderGeneratedColumns      = []string{}
)

type (
	// OrderSlice is an alias for a slice of pointers to Order.
	// This should almost always be used instead of []Order.
	OrderSlice []*Order
	// OrderHook is the signature for custom Order hook methods
	OrderHook func(context.Context, boil.ContextExecutor, *Order) error

	orderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderType                 = reflect.TypeOf(&Order{})
	orderMapping              = queries.MakeStructMapping(orderType)
	orderPrimaryKeyMapping, _ = queries.BindMapping(orderType, orderMapping, orderPrimaryKeyColumns)
	orderInsertCacheMut       sync.RWMutex
	orderInsertCache          = make(map[string]insertCache)
	orderUpdateCacheMut       sync.RWMutex
	orderUpdateCache          = make(map[string]updateCache)
	orderUpsertCacheMut       sync.RWMutex
	orderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var orderAfterSelectHooks []OrderHook

var orderBeforeInsertHooks []OrderHook
var orderAfterInsertHooks []OrderHook

var orderBeforeUpdateHooks []OrderHook
var orderAfterUpdateHooks []OrderHook

var orderBeforeDeleteHooks []OrderHook
var orderAfterDeleteHooks []OrderHook

var orderBeforeUpsertHooks []OrderHook
var orderAfterUpsertHooks []OrderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Order) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Order) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Order) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Order) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Order) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Order) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Order) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Order) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Order) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range orderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOrderHook registers your hook function for all future operations.
func AddOrderHook(hookPoint boil.HookPoint, orderHook OrderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		orderAfterSelectHooks = append(orderAfterSelectHooks, orderHook)
	case boil.BeforeInsertHook:
		orderBeforeInsertHooks = append(orderBeforeInsertHooks, orderHook)
	case boil.AfterInsertHook:
		orderAfterInsertHooks = append(orderAfterInsertHooks, orderHook)
	case boil.BeforeUpdateHook:
		orderBeforeUpdateHooks = append(orderBeforeUpdateHooks, orderHook)
	case boil.AfterUpdateHook:
		orderAfterUpdateHooks = append(orderAfterUpdateHooks, orderHook)
	case boil.BeforeDeleteHook:
		orderBeforeDeleteHooks = append(orderBeforeDeleteHooks, orderHook)
	case boil.AfterDeleteHook:
		orderAfterDeleteHooks = append(orderAfterDeleteHooks, orderHook)
	case boil.BeforeUpsertHook:
		orderBeforeUpsertHooks = append(orderBeforeUpsertHooks, orderHook)
	case boil.AfterUpsertHook:
		orderAfterUpsertHooks = append(orderAfterUpsertHooks, orderHook)
	}
}

// One returns a single order record from the query.
func (q orderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Order, error) {
	o := &Order{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for orders")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Order records from the query.
func (q orderQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderSlice, error) {
	var o []*Order

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Order slice")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Order records in the query.
func (q orderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count orders rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if orders exists")
	}

	return count > 0, nil
}

// BillingAddress pointed to by the foreign key.
func (o *Order) BillingAddress(mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BillingAddressID),
	}

	queryMods = append(queryMods, mods...)

	return Addresses(queryMods...)
}

// Channel pointed to by the foreign key.
func (o *Order) Channel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ChannelID),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// Original pointed to by the foreign key.
func (o *Order) Original(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OriginalID),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// ShippingMethod pointed to by the foreign key.
func (o *Order) ShippingMethod(mods ...qm.QueryMod) shippingMethodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShippingMethodID),
	}

	queryMods = append(queryMods, mods...)

	return ShippingMethods(queryMods...)
}

// User pointed to by the foreign key.
func (o *Order) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Voucher pointed to by the foreign key.
func (o *Order) Voucher(mods ...qm.QueryMod) voucherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VoucherID),
	}

	queryMods = append(queryMods, mods...)

	return Vouchers(queryMods...)
}

// CollectionPoint pointed to by the foreign key.
func (o *Order) CollectionPoint(mods ...qm.QueryMod) warehouseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CollectionPointID),
	}

	queryMods = append(queryMods, mods...)

	return Warehouses(queryMods...)
}

// CustomerEvents retrieves all the customer_event's CustomerEvents with an executor.
func (o *Order) CustomerEvents(mods ...qm.QueryMod) customerEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"customer_events\".\"order_id\"=?", o.ID),
	)

	return CustomerEvents(queryMods...)
}

// Fulfillments retrieves all the fulfillment's Fulfillments with an executor.
func (o *Order) Fulfillments(mods ...qm.QueryMod) fulfillmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"fulfillments\".\"order_id\"=?", o.ID),
	)

	return Fulfillments(queryMods...)
}

// InvoiceEvents retrieves all the invoice_event's InvoiceEvents with an executor.
func (o *Order) InvoiceEvents(mods ...qm.QueryMod) invoiceEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoice_events\".\"order_id\"=?", o.ID),
	)

	return InvoiceEvents(queryMods...)
}

// Invoices retrieves all the invoice's Invoices with an executor.
func (o *Order) Invoices(mods ...qm.QueryMod) invoiceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"invoices\".\"order_id\"=?", o.ID),
	)

	return Invoices(queryMods...)
}

// OrderDiscounts retrieves all the order_discount's OrderDiscounts with an executor.
func (o *Order) OrderDiscounts(mods ...qm.QueryMod) orderDiscountQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_discounts\".\"order_id\"=?", o.ID),
	)

	return OrderDiscounts(queryMods...)
}

// OrderEvents retrieves all the order_event's OrderEvents with an executor.
func (o *Order) OrderEvents(mods ...qm.QueryMod) orderEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_events\".\"order_id\"=?", o.ID),
	)

	return OrderEvents(queryMods...)
}

// OrderGiftcards retrieves all the order_giftcard's OrderGiftcards with an executor.
func (o *Order) OrderGiftcards(mods ...qm.QueryMod) orderGiftcardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_giftcards\".\"order_id\"=?", o.ID),
	)

	return OrderGiftcards(queryMods...)
}

// OrderLines retrieves all the order_line's OrderLines with an executor.
func (o *Order) OrderLines(mods ...qm.QueryMod) orderLineQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_lines\".\"order_id\"=?", o.ID),
	)

	return OrderLines(queryMods...)
}

// OriginalOrders retrieves all the order's Orders with an executor via original_id column.
func (o *Order) OriginalOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"original_id\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// Payments retrieves all the payment's Payments with an executor.
func (o *Order) Payments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payments\".\"order_id\"=?", o.ID),
	)

	return Payments(queryMods...)
}

// LoadBillingAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadBillingAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.BillingAddressID) {
			args = append(args, object.BillingAddressID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BillingAddressID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BillingAddressID) {
				args = append(args, obj.BillingAddressID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`addresses`),
		qm.WhereIn(`addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for addresses")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BillingAddress = foreign
		if foreign.R == nil {
			foreign.R = &addressR{}
		}
		foreign.R.BillingAddressOrders = append(foreign.R.BillingAddressOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BillingAddressID, foreign.ID) {
				local.R.BillingAddress = foreign
				if foreign.R == nil {
					foreign.R = &addressR{}
				}
				foreign.R.BillingAddressOrders = append(foreign.R.BillingAddressOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.ChannelID) {
			args = append(args, object.ChannelID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ChannelID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ChannelID) {
				args = append(args, obj.ChannelID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Channel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.Orders = append(foreign.R.Orders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ChannelID, foreign.ID) {
				local.R.Channel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.Orders = append(foreign.R.Orders, local)
				break
			}
		}
	}

	return nil
}

// LoadOriginal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadOriginal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.OriginalID) {
			args = append(args, object.OriginalID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OriginalID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OriginalID) {
				args = append(args, obj.OriginalID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Original = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OriginalOrders = append(foreign.R.OriginalOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OriginalID, foreign.ID) {
				local.R.Original = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OriginalOrders = append(foreign.R.OriginalOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadShippingMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadShippingMethod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.ShippingMethodID) {
			args = append(args, object.ShippingMethodID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ShippingMethodID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ShippingMethodID) {
				args = append(args, obj.ShippingMethodID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_methods`),
		qm.WhereIn(`shipping_methods.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingMethod")
	}

	var resultSlice []*ShippingMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingMethod")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_methods")
	}

	if len(shippingMethodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingMethod = foreign
		if foreign.R == nil {
			foreign.R = &shippingMethodR{}
		}
		foreign.R.Orders = append(foreign.R.Orders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ShippingMethodID, foreign.ID) {
				local.R.ShippingMethod = foreign
				if foreign.R == nil {
					foreign.R = &shippingMethodR{}
				}
				foreign.R.Orders = append(foreign.R.Orders, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Orders = append(foreign.R.Orders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Orders = append(foreign.R.Orders, local)
				break
			}
		}
	}

	return nil
}

// LoadVoucher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadVoucher(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.VoucherID) {
			args = append(args, object.VoucherID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.VoucherID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.VoucherID) {
				args = append(args, obj.VoucherID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vouchers`),
		qm.WhereIn(`vouchers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Voucher")
	}

	var resultSlice []*Voucher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Voucher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vouchers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vouchers")
	}

	if len(voucherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Voucher = foreign
		if foreign.R == nil {
			foreign.R = &voucherR{}
		}
		foreign.R.Orders = append(foreign.R.Orders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VoucherID, foreign.ID) {
				local.R.Voucher = foreign
				if foreign.R == nil {
					foreign.R = &voucherR{}
				}
				foreign.R.Orders = append(foreign.R.Orders, local)
				break
			}
		}
	}

	return nil
}

// LoadCollectionPoint allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (orderL) LoadCollectionPoint(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		if !queries.IsNil(object.CollectionPointID) {
			args = append(args, object.CollectionPointID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CollectionPointID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CollectionPointID) {
				args = append(args, obj.CollectionPointID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`warehouses`),
		qm.WhereIn(`warehouses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Warehouse")
	}

	var resultSlice []*Warehouse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Warehouse")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for warehouses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouses")
	}

	if len(warehouseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CollectionPoint = foreign
		if foreign.R == nil {
			foreign.R = &warehouseR{}
		}
		foreign.R.CollectionPointOrders = append(foreign.R.CollectionPointOrders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CollectionPointID, foreign.ID) {
				local.R.CollectionPoint = foreign
				if foreign.R == nil {
					foreign.R = &warehouseR{}
				}
				foreign.R.CollectionPointOrders = append(foreign.R.CollectionPointOrders, local)
				break
			}
		}
	}

	return nil
}

// LoadCustomerEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadCustomerEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`customer_events`),
		qm.WhereIn(`customer_events.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load customer_events")
	}

	var resultSlice []*CustomerEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice customer_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on customer_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customer_events")
	}

	if len(customerEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CustomerEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &customerEventR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderID) {
				local.R.CustomerEvents = append(local.R.CustomerEvents, foreign)
				if foreign.R == nil {
					foreign.R = &customerEventR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// LoadFulfillments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadFulfillments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`fulfillments`),
		qm.WhereIn(`fulfillments.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load fulfillments")
	}

	var resultSlice []*Fulfillment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice fulfillments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on fulfillments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for fulfillments")
	}

	if len(fulfillmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Fulfillments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &fulfillmentR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderID) {
				local.R.Fulfillments = append(local.R.Fulfillments, foreign)
				if foreign.R == nil {
					foreign.R = &fulfillmentR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// LoadInvoiceEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadInvoiceEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`invoice_events`),
		qm.WhereIn(`invoice_events.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invoice_events")
	}

	var resultSlice []*InvoiceEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invoice_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invoice_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoice_events")
	}

	if len(invoiceEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.InvoiceEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &invoiceEventR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderID) {
				local.R.InvoiceEvents = append(local.R.InvoiceEvents, foreign)
				if foreign.R == nil {
					foreign.R = &invoiceEventR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// LoadInvoices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadInvoices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`invoices`),
		qm.WhereIn(`invoices.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load invoices")
	}

	var resultSlice []*Invoice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice invoices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on invoices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for invoices")
	}

	if len(invoiceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Invoices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &invoiceR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderID) {
				local.R.Invoices = append(local.R.Invoices, foreign)
				if foreign.R == nil {
					foreign.R = &invoiceR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// LoadOrderDiscounts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderDiscounts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_discounts`),
		qm.WhereIn(`order_discounts.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_discounts")
	}

	var resultSlice []*OrderDiscount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_discounts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_discounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_discounts")
	}

	if len(orderDiscountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderDiscounts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderDiscountR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderID) {
				local.R.OrderDiscounts = append(local.R.OrderDiscounts, foreign)
				if foreign.R == nil {
					foreign.R = &orderDiscountR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// LoadOrderEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_events`),
		qm.WhereIn(`order_events.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_events")
	}

	var resultSlice []*OrderEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_events")
	}

	if len(orderEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderEventR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderID) {
				local.R.OrderEvents = append(local.R.OrderEvents, foreign)
				if foreign.R == nil {
					foreign.R = &orderEventR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// LoadOrderGiftcards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderGiftcards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_giftcards`),
		qm.WhereIn(`order_giftcards.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_giftcards")
	}

	var resultSlice []*OrderGiftcard
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_giftcards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_giftcards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_giftcards")
	}

	if len(orderGiftcardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderGiftcards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderGiftcardR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderID) {
				local.R.OrderGiftcards = append(local.R.OrderGiftcards, foreign)
				if foreign.R == nil {
					foreign.R = &orderGiftcardR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// LoadOrderLines allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOrderLines(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`order_lines`),
		qm.WhereIn(`order_lines.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_lines")
	}

	var resultSlice []*OrderLine
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_lines")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on order_lines")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for order_lines")
	}

	if len(orderLineAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrderLines = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderLineR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderID) {
				local.R.OrderLines = append(local.R.OrderLines, foreign)
				if foreign.R == nil {
					foreign.R = &orderLineR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// LoadOriginalOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadOriginalOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.original_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OriginalOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.Original = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OriginalID) {
				local.R.OriginalOrders = append(local.R.OriginalOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.Original = local
				break
			}
		}
	}

	return nil
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (orderL) LoadPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOrder interface{}, mods queries.Applicator) error {
	var slice []*Order
	var object *Order

	if singular {
		var ok bool
		object, ok = maybeOrder.(*Order)
		if !ok {
			object = new(Order)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOrder))
			}
		}
	} else {
		s, ok := maybeOrder.(*[]*Order)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOrder)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOrder))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &orderR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &orderR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.order_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payments")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Payments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.Order = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.OrderID) {
				local.R.Payments = append(local.R.Payments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.Order = local
				break
			}
		}
	}

	return nil
}

// SetBillingAddress of the order to the related item.
// Sets o.R.BillingAddress to related.
// Adds o to related.R.BillingAddressOrders.
func (o *Order) SetBillingAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"billing_address_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BillingAddressID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			BillingAddress: related,
		}
	} else {
		o.R.BillingAddress = related
	}

	if related.R == nil {
		related.R = &addressR{
			BillingAddressOrders: OrderSlice{o},
		}
	} else {
		related.R.BillingAddressOrders = append(related.R.BillingAddressOrders, o)
	}

	return nil
}

// RemoveBillingAddress relationship.
// Sets o.R.BillingAddress to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveBillingAddress(ctx context.Context, exec boil.ContextExecutor, related *Address) error {
	var err error

	queries.SetScanner(&o.BillingAddressID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("billing_address_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.BillingAddress = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BillingAddressOrders {
		if queries.Equal(o.BillingAddressID, ri.BillingAddressID) {
			continue
		}

		ln := len(related.R.BillingAddressOrders)
		if ln > 1 && i < ln-1 {
			related.R.BillingAddressOrders[i] = related.R.BillingAddressOrders[ln-1]
		}
		related.R.BillingAddressOrders = related.R.BillingAddressOrders[:ln-1]
		break
	}
	return nil
}

// SetChannel of the order to the related item.
// Sets o.R.Channel to related.
// Adds o to related.R.Orders.
func (o *Order) SetChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ChannelID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			Channel: related,
		}
	} else {
		o.R.Channel = related
	}

	if related.R == nil {
		related.R = &channelR{
			Orders: OrderSlice{o},
		}
	} else {
		related.R.Orders = append(related.R.Orders, o)
	}

	return nil
}

// RemoveChannel relationship.
// Sets o.R.Channel to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveChannel(ctx context.Context, exec boil.ContextExecutor, related *Channel) error {
	var err error

	queries.SetScanner(&o.ChannelID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("channel_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Channel = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Orders {
		if queries.Equal(o.ChannelID, ri.ChannelID) {
			continue
		}

		ln := len(related.R.Orders)
		if ln > 1 && i < ln-1 {
			related.R.Orders[i] = related.R.Orders[ln-1]
		}
		related.R.Orders = related.R.Orders[:ln-1]
		break
	}
	return nil
}

// SetOriginal of the order to the related item.
// Sets o.R.Original to related.
// Adds o to related.R.OriginalOrders.
func (o *Order) SetOriginal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"original_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OriginalID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			Original: related,
		}
	} else {
		o.R.Original = related
	}

	if related.R == nil {
		related.R = &orderR{
			OriginalOrders: OrderSlice{o},
		}
	} else {
		related.R.OriginalOrders = append(related.R.OriginalOrders, o)
	}

	return nil
}

// RemoveOriginal relationship.
// Sets o.R.Original to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveOriginal(ctx context.Context, exec boil.ContextExecutor, related *Order) error {
	var err error

	queries.SetScanner(&o.OriginalID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("original_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Original = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OriginalOrders {
		if queries.Equal(o.OriginalID, ri.OriginalID) {
			continue
		}

		ln := len(related.R.OriginalOrders)
		if ln > 1 && i < ln-1 {
			related.R.OriginalOrders[i] = related.R.OriginalOrders[ln-1]
		}
		related.R.OriginalOrders = related.R.OriginalOrders[:ln-1]
		break
	}
	return nil
}

// SetShippingMethod of the order to the related item.
// Sets o.R.ShippingMethod to related.
// Adds o to related.R.Orders.
func (o *Order) SetShippingMethod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShippingMethod) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shipping_method_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ShippingMethodID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			ShippingMethod: related,
		}
	} else {
		o.R.ShippingMethod = related
	}

	if related.R == nil {
		related.R = &shippingMethodR{
			Orders: OrderSlice{o},
		}
	} else {
		related.R.Orders = append(related.R.Orders, o)
	}

	return nil
}

// RemoveShippingMethod relationship.
// Sets o.R.ShippingMethod to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveShippingMethod(ctx context.Context, exec boil.ContextExecutor, related *ShippingMethod) error {
	var err error

	queries.SetScanner(&o.ShippingMethodID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("shipping_method_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ShippingMethod = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Orders {
		if queries.Equal(o.ShippingMethodID, ri.ShippingMethodID) {
			continue
		}

		ln := len(related.R.Orders)
		if ln > 1 && i < ln-1 {
			related.R.Orders[i] = related.R.Orders[ln-1]
		}
		related.R.Orders = related.R.Orders[:ln-1]
		break
	}
	return nil
}

// SetUser of the order to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Orders.
func (o *Order) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Orders: OrderSlice{o},
		}
	} else {
		related.R.Orders = append(related.R.Orders, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Orders {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.Orders)
		if ln > 1 && i < ln-1 {
			related.R.Orders[i] = related.R.Orders[ln-1]
		}
		related.R.Orders = related.R.Orders[:ln-1]
		break
	}
	return nil
}

// SetVoucher of the order to the related item.
// Sets o.R.Voucher to related.
// Adds o to related.R.Orders.
func (o *Order) SetVoucher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Voucher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voucher_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VoucherID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			Voucher: related,
		}
	} else {
		o.R.Voucher = related
	}

	if related.R == nil {
		related.R = &voucherR{
			Orders: OrderSlice{o},
		}
	} else {
		related.R.Orders = append(related.R.Orders, o)
	}

	return nil
}

// RemoveVoucher relationship.
// Sets o.R.Voucher to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveVoucher(ctx context.Context, exec boil.ContextExecutor, related *Voucher) error {
	var err error

	queries.SetScanner(&o.VoucherID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("voucher_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Voucher = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Orders {
		if queries.Equal(o.VoucherID, ri.VoucherID) {
			continue
		}

		ln := len(related.R.Orders)
		if ln > 1 && i < ln-1 {
			related.R.Orders[i] = related.R.Orders[ln-1]
		}
		related.R.Orders = related.R.Orders[:ln-1]
		break
	}
	return nil
}

// SetCollectionPoint of the order to the related item.
// Sets o.R.CollectionPoint to related.
// Adds o to related.R.CollectionPointOrders.
func (o *Order) SetCollectionPoint(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Warehouse) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"collection_point_id"}),
		strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CollectionPointID, related.ID)
	if o.R == nil {
		o.R = &orderR{
			CollectionPoint: related,
		}
	} else {
		o.R.CollectionPoint = related
	}

	if related.R == nil {
		related.R = &warehouseR{
			CollectionPointOrders: OrderSlice{o},
		}
	} else {
		related.R.CollectionPointOrders = append(related.R.CollectionPointOrders, o)
	}

	return nil
}

// RemoveCollectionPoint relationship.
// Sets o.R.CollectionPoint to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Order) RemoveCollectionPoint(ctx context.Context, exec boil.ContextExecutor, related *Warehouse) error {
	var err error

	queries.SetScanner(&o.CollectionPointID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("collection_point_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CollectionPoint = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CollectionPointOrders {
		if queries.Equal(o.CollectionPointID, ri.CollectionPointID) {
			continue
		}

		ln := len(related.R.CollectionPointOrders)
		if ln > 1 && i < ln-1 {
			related.R.CollectionPointOrders[i] = related.R.CollectionPointOrders[ln-1]
		}
		related.R.CollectionPointOrders = related.R.CollectionPointOrders[:ln-1]
		break
	}
	return nil
}

// AddCustomerEvents adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.CustomerEvents.
// Sets related.R.Order appropriately.
func (o *Order) AddCustomerEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CustomerEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"customer_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, customerEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			CustomerEvents: related,
		}
	} else {
		o.R.CustomerEvents = append(o.R.CustomerEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &customerEventR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// SetCustomerEvents removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Order's CustomerEvents accordingly.
// Replaces o.R.CustomerEvents with related.
// Sets related.R.Order's CustomerEvents accordingly.
func (o *Order) SetCustomerEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CustomerEvent) error {
	query := "update \"customer_events\" set \"order_id\" = null where \"order_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CustomerEvents {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Order = nil
		}
		o.R.CustomerEvents = nil
	}

	return o.AddCustomerEvents(ctx, exec, insert, related...)
}

// RemoveCustomerEvents relationships from objects passed in.
// Removes related items from R.CustomerEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Order.
func (o *Order) RemoveCustomerEvents(ctx context.Context, exec boil.ContextExecutor, related ...*CustomerEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.Order = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CustomerEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.CustomerEvents)
			if ln > 1 && i < ln-1 {
				o.R.CustomerEvents[i] = o.R.CustomerEvents[ln-1]
			}
			o.R.CustomerEvents = o.R.CustomerEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddFulfillments adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.Fulfillments.
// Sets related.R.Order appropriately.
func (o *Order) AddFulfillments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Fulfillment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"fulfillments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, fulfillmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			Fulfillments: related,
		}
	} else {
		o.R.Fulfillments = append(o.R.Fulfillments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &fulfillmentR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// SetFulfillments removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Order's Fulfillments accordingly.
// Replaces o.R.Fulfillments with related.
// Sets related.R.Order's Fulfillments accordingly.
func (o *Order) SetFulfillments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Fulfillment) error {
	query := "update \"fulfillments\" set \"order_id\" = null where \"order_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Fulfillments {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Order = nil
		}
		o.R.Fulfillments = nil
	}

	return o.AddFulfillments(ctx, exec, insert, related...)
}

// RemoveFulfillments relationships from objects passed in.
// Removes related items from R.Fulfillments (uses pointer comparison, removal does not keep order)
// Sets related.R.Order.
func (o *Order) RemoveFulfillments(ctx context.Context, exec boil.ContextExecutor, related ...*Fulfillment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.Order = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Fulfillments {
			if rel != ri {
				continue
			}

			ln := len(o.R.Fulfillments)
			if ln > 1 && i < ln-1 {
				o.R.Fulfillments[i] = o.R.Fulfillments[ln-1]
			}
			o.R.Fulfillments = o.R.Fulfillments[:ln-1]
			break
		}
	}

	return nil
}

// AddInvoiceEvents adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.InvoiceEvents.
// Sets related.R.Order appropriately.
func (o *Order) AddInvoiceEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InvoiceEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoice_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, invoiceEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			InvoiceEvents: related,
		}
	} else {
		o.R.InvoiceEvents = append(o.R.InvoiceEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &invoiceEventR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// SetInvoiceEvents removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Order's InvoiceEvents accordingly.
// Replaces o.R.InvoiceEvents with related.
// Sets related.R.Order's InvoiceEvents accordingly.
func (o *Order) SetInvoiceEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*InvoiceEvent) error {
	query := "update \"invoice_events\" set \"order_id\" = null where \"order_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.InvoiceEvents {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Order = nil
		}
		o.R.InvoiceEvents = nil
	}

	return o.AddInvoiceEvents(ctx, exec, insert, related...)
}

// RemoveInvoiceEvents relationships from objects passed in.
// Removes related items from R.InvoiceEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Order.
func (o *Order) RemoveInvoiceEvents(ctx context.Context, exec boil.ContextExecutor, related ...*InvoiceEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.Order = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.InvoiceEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.InvoiceEvents)
			if ln > 1 && i < ln-1 {
				o.R.InvoiceEvents[i] = o.R.InvoiceEvents[ln-1]
			}
			o.R.InvoiceEvents = o.R.InvoiceEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddInvoices adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.Invoices.
// Sets related.R.Order appropriately.
func (o *Order) AddInvoices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Invoice) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"invoices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, invoicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			Invoices: related,
		}
	} else {
		o.R.Invoices = append(o.R.Invoices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &invoiceR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// SetInvoices removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Order's Invoices accordingly.
// Replaces o.R.Invoices with related.
// Sets related.R.Order's Invoices accordingly.
func (o *Order) SetInvoices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Invoice) error {
	query := "update \"invoices\" set \"order_id\" = null where \"order_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Invoices {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Order = nil
		}
		o.R.Invoices = nil
	}

	return o.AddInvoices(ctx, exec, insert, related...)
}

// RemoveInvoices relationships from objects passed in.
// Removes related items from R.Invoices (uses pointer comparison, removal does not keep order)
// Sets related.R.Order.
func (o *Order) RemoveInvoices(ctx context.Context, exec boil.ContextExecutor, related ...*Invoice) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.Order = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Invoices {
			if rel != ri {
				continue
			}

			ln := len(o.R.Invoices)
			if ln > 1 && i < ln-1 {
				o.R.Invoices[i] = o.R.Invoices[ln-1]
			}
			o.R.Invoices = o.R.Invoices[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderDiscounts adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderDiscounts.
// Sets related.R.Order appropriately.
func (o *Order) AddOrderDiscounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderDiscount) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_discounts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderDiscountPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderDiscounts: related,
		}
	} else {
		o.R.OrderDiscounts = append(o.R.OrderDiscounts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderDiscountR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// SetOrderDiscounts removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Order's OrderDiscounts accordingly.
// Replaces o.R.OrderDiscounts with related.
// Sets related.R.Order's OrderDiscounts accordingly.
func (o *Order) SetOrderDiscounts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderDiscount) error {
	query := "update \"order_discounts\" set \"order_id\" = null where \"order_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderDiscounts {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Order = nil
		}
		o.R.OrderDiscounts = nil
	}

	return o.AddOrderDiscounts(ctx, exec, insert, related...)
}

// RemoveOrderDiscounts relationships from objects passed in.
// Removes related items from R.OrderDiscounts (uses pointer comparison, removal does not keep order)
// Sets related.R.Order.
func (o *Order) RemoveOrderDiscounts(ctx context.Context, exec boil.ContextExecutor, related ...*OrderDiscount) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.Order = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderDiscounts {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderDiscounts)
			if ln > 1 && i < ln-1 {
				o.R.OrderDiscounts[i] = o.R.OrderDiscounts[ln-1]
			}
			o.R.OrderDiscounts = o.R.OrderDiscounts[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderEvents adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderEvents.
// Sets related.R.Order appropriately.
func (o *Order) AddOrderEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderEvents: related,
		}
	} else {
		o.R.OrderEvents = append(o.R.OrderEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderEventR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// SetOrderEvents removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Order's OrderEvents accordingly.
// Replaces o.R.OrderEvents with related.
// Sets related.R.Order's OrderEvents accordingly.
func (o *Order) SetOrderEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderEvent) error {
	query := "update \"order_events\" set \"order_id\" = null where \"order_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderEvents {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Order = nil
		}
		o.R.OrderEvents = nil
	}

	return o.AddOrderEvents(ctx, exec, insert, related...)
}

// RemoveOrderEvents relationships from objects passed in.
// Removes related items from R.OrderEvents (uses pointer comparison, removal does not keep order)
// Sets related.R.Order.
func (o *Order) RemoveOrderEvents(ctx context.Context, exec boil.ContextExecutor, related ...*OrderEvent) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.Order = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderEvents {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderEvents)
			if ln > 1 && i < ln-1 {
				o.R.OrderEvents[i] = o.R.OrderEvents[ln-1]
			}
			o.R.OrderEvents = o.R.OrderEvents[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderGiftcards adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderGiftcards.
// Sets related.R.Order appropriately.
func (o *Order) AddOrderGiftcards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderGiftcard) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_giftcards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderGiftcardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderGiftcards: related,
		}
	} else {
		o.R.OrderGiftcards = append(o.R.OrderGiftcards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderGiftcardR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// SetOrderGiftcards removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Order's OrderGiftcards accordingly.
// Replaces o.R.OrderGiftcards with related.
// Sets related.R.Order's OrderGiftcards accordingly.
func (o *Order) SetOrderGiftcards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderGiftcard) error {
	query := "update \"order_giftcards\" set \"order_id\" = null where \"order_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderGiftcards {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Order = nil
		}
		o.R.OrderGiftcards = nil
	}

	return o.AddOrderGiftcards(ctx, exec, insert, related...)
}

// RemoveOrderGiftcards relationships from objects passed in.
// Removes related items from R.OrderGiftcards (uses pointer comparison, removal does not keep order)
// Sets related.R.Order.
func (o *Order) RemoveOrderGiftcards(ctx context.Context, exec boil.ContextExecutor, related ...*OrderGiftcard) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.Order = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderGiftcards {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderGiftcards)
			if ln > 1 && i < ln-1 {
				o.R.OrderGiftcards[i] = o.R.OrderGiftcards[ln-1]
			}
			o.R.OrderGiftcards = o.R.OrderGiftcards[:ln-1]
			break
		}
	}

	return nil
}

// AddOrderLines adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OrderLines.
// Sets related.R.Order appropriately.
func (o *Order) AddOrderLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderLine) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_lines\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderLinePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OrderLines: related,
		}
	} else {
		o.R.OrderLines = append(o.R.OrderLines, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderLineR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// SetOrderLines removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Order's OrderLines accordingly.
// Replaces o.R.OrderLines with related.
// Sets related.R.Order's OrderLines accordingly.
func (o *Order) SetOrderLines(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*OrderLine) error {
	query := "update \"order_lines\" set \"order_id\" = null where \"order_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OrderLines {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Order = nil
		}
		o.R.OrderLines = nil
	}

	return o.AddOrderLines(ctx, exec, insert, related...)
}

// RemoveOrderLines relationships from objects passed in.
// Removes related items from R.OrderLines (uses pointer comparison, removal does not keep order)
// Sets related.R.Order.
func (o *Order) RemoveOrderLines(ctx context.Context, exec boil.ContextExecutor, related ...*OrderLine) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.Order = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OrderLines {
			if rel != ri {
				continue
			}

			ln := len(o.R.OrderLines)
			if ln > 1 && i < ln-1 {
				o.R.OrderLines[i] = o.R.OrderLines[ln-1]
			}
			o.R.OrderLines = o.R.OrderLines[:ln-1]
			break
		}
	}

	return nil
}

// AddOriginalOrders adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.OriginalOrders.
// Sets related.R.Original appropriately.
func (o *Order) AddOriginalOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OriginalID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"original_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OriginalID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			OriginalOrders: related,
		}
	} else {
		o.R.OriginalOrders = append(o.R.OriginalOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				Original: o,
			}
		} else {
			rel.R.Original = o
		}
	}
	return nil
}

// SetOriginalOrders removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Original's OriginalOrders accordingly.
// Replaces o.R.OriginalOrders with related.
// Sets related.R.Original's OriginalOrders accordingly.
func (o *Order) SetOriginalOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"original_id\" = null where \"original_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.OriginalOrders {
			queries.SetScanner(&rel.OriginalID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Original = nil
		}
		o.R.OriginalOrders = nil
	}

	return o.AddOriginalOrders(ctx, exec, insert, related...)
}

// RemoveOriginalOrders relationships from objects passed in.
// Removes related items from R.OriginalOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.Original.
func (o *Order) RemoveOriginalOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OriginalID, nil)
		if rel.R != nil {
			rel.R.Original = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("original_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.OriginalOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.OriginalOrders)
			if ln > 1 && i < ln-1 {
				o.R.OriginalOrders[i] = o.R.OriginalOrders[ln-1]
			}
			o.R.OriginalOrders = o.R.OriginalOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddPayments adds the given related objects to the existing relationships
// of the order, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Order appropriately.
func (o *Order) AddPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.OrderID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"order_id"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.OrderID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &orderR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Order: o,
			}
		} else {
			rel.R.Order = o
		}
	}
	return nil
}

// SetPayments removes all previously related items of the
// order replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Order's Payments accordingly.
// Replaces o.R.Payments with related.
// Sets related.R.Order's Payments accordingly.
func (o *Order) SetPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	query := "update \"payments\" set \"order_id\" = null where \"order_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Payments {
			queries.SetScanner(&rel.OrderID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Order = nil
		}
		o.R.Payments = nil
	}

	return o.AddPayments(ctx, exec, insert, related...)
}

// RemovePayments relationships from objects passed in.
// Removes related items from R.Payments (uses pointer comparison, removal does not keep order)
// Sets related.R.Order.
func (o *Order) RemovePayments(ctx context.Context, exec boil.ContextExecutor, related ...*Payment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.OrderID, nil)
		if rel.R != nil {
			rel.R.Order = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("order_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Payments {
			if rel != ri {
				continue
			}

			ln := len(o.R.Payments)
			if ln > 1 && i < ln-1 {
				o.R.Payments[i] = o.R.Payments[ln-1]
			}
			o.R.Payments = o.R.Payments[:ln-1]
			break
		}
	}

	return nil
}

// Orders retrieves all the records using an executor.
func Orders(mods ...qm.QueryMod) orderQuery {
	mods = append(mods, qm.From("\"orders\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"orders\".*"})
	}

	return orderQuery{q}
}

// FindOrder retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrder(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Order, error) {
	orderObj := &Order{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"orders\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from orders")
	}

	if err = orderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return orderObj, err
	}

	return orderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Order) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no orders provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderInsertCacheMut.RLock()
	cache, cached := orderInsertCache[key]
	orderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderAllColumns,
			orderColumnsWithDefault,
			orderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderType, orderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"orders\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"orders\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into orders")
	}

	if !cached {
		orderInsertCacheMut.Lock()
		orderInsertCache[key] = cache
		orderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Order.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Order) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	orderUpdateCacheMut.RLock()
	cache, cached := orderUpdateCache[key]
	orderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderAllColumns,
			orderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update orders, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"orders\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, orderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, append(wl, orderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update orders row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for orders")
	}

	if !cached {
		orderUpdateCacheMut.Lock()
		orderUpdateCache[key] = cache
		orderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q orderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for orders")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"orders\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, orderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in order slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all order")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Order) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no orders provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(orderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	orderUpsertCacheMut.RLock()
	cache, cached := orderUpsertCache[key]
	orderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			orderAllColumns,
			orderColumnsWithDefault,
			orderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			orderAllColumns,
			orderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert orders, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(orderPrimaryKeyColumns))
			copy(conflict, orderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"orders\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(orderType, orderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(orderType, orderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert orders")
	}

	if !cached {
		orderUpsertCacheMut.Lock()
		orderUpsertCache[key] = cache
		orderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Order record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Order) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Order provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderPrimaryKeyMapping)
	sql := "DELETE FROM \"orders\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for orders")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orders")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for orders")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(orderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"orders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for orders")
	}

	if len(orderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Order) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrder(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"orders\".* FROM \"orders\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, orderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderSlice")
	}

	*o = slice

	return nil
}

// OrderExists checks if the Order row exists.
func OrderExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"orders\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if orders exists")
	}

	return exists, nil
}

// Exists checks if the Order row exists.
func (o *Order) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OrderExists(ctx, exec, o.ID)
}
