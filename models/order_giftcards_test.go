// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOrderGiftcards(t *testing.T) {
	t.Parallel()

	query := OrderGiftcards()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOrderGiftcardsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderGiftcardsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := OrderGiftcards().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderGiftcardsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderGiftcardSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := OrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderGiftcardsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OrderGiftcardExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if OrderGiftcard exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderGiftcardExists to return true, but got false.")
	}
}

func testOrderGiftcardsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	orderGiftcardFound, err := FindOrderGiftcard(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if orderGiftcardFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOrderGiftcardsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = OrderGiftcards().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOrderGiftcardsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := OrderGiftcards().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrderGiftcardsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderGiftcardOne := &OrderGiftcard{}
	orderGiftcardTwo := &OrderGiftcard{}
	if err = randomize.Struct(seed, orderGiftcardOne, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}
	if err = randomize.Struct(seed, orderGiftcardTwo, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderGiftcardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderGiftcardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderGiftcards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrderGiftcardsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderGiftcardOne := &OrderGiftcard{}
	orderGiftcardTwo := &OrderGiftcard{}
	if err = randomize.Struct(seed, orderGiftcardOne, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}
	if err = randomize.Struct(seed, orderGiftcardTwo, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = orderGiftcardOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = orderGiftcardTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func orderGiftcardBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderGiftcard) error {
	*o = OrderGiftcard{}
	return nil
}

func orderGiftcardAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderGiftcard) error {
	*o = OrderGiftcard{}
	return nil
}

func orderGiftcardAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *OrderGiftcard) error {
	*o = OrderGiftcard{}
	return nil
}

func orderGiftcardBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderGiftcard) error {
	*o = OrderGiftcard{}
	return nil
}

func orderGiftcardAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *OrderGiftcard) error {
	*o = OrderGiftcard{}
	return nil
}

func orderGiftcardBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderGiftcard) error {
	*o = OrderGiftcard{}
	return nil
}

func orderGiftcardAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *OrderGiftcard) error {
	*o = OrderGiftcard{}
	return nil
}

func orderGiftcardBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderGiftcard) error {
	*o = OrderGiftcard{}
	return nil
}

func orderGiftcardAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *OrderGiftcard) error {
	*o = OrderGiftcard{}
	return nil
}

func testOrderGiftcardsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &OrderGiftcard{}
	o := &OrderGiftcard{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, false); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard object: %s", err)
	}

	AddOrderGiftcardHook(boil.BeforeInsertHook, orderGiftcardBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	orderGiftcardBeforeInsertHooks = []OrderGiftcardHook{}

	AddOrderGiftcardHook(boil.AfterInsertHook, orderGiftcardAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	orderGiftcardAfterInsertHooks = []OrderGiftcardHook{}

	AddOrderGiftcardHook(boil.AfterSelectHook, orderGiftcardAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	orderGiftcardAfterSelectHooks = []OrderGiftcardHook{}

	AddOrderGiftcardHook(boil.BeforeUpdateHook, orderGiftcardBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	orderGiftcardBeforeUpdateHooks = []OrderGiftcardHook{}

	AddOrderGiftcardHook(boil.AfterUpdateHook, orderGiftcardAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	orderGiftcardAfterUpdateHooks = []OrderGiftcardHook{}

	AddOrderGiftcardHook(boil.BeforeDeleteHook, orderGiftcardBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	orderGiftcardBeforeDeleteHooks = []OrderGiftcardHook{}

	AddOrderGiftcardHook(boil.AfterDeleteHook, orderGiftcardAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	orderGiftcardAfterDeleteHooks = []OrderGiftcardHook{}

	AddOrderGiftcardHook(boil.BeforeUpsertHook, orderGiftcardBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	orderGiftcardBeforeUpsertHooks = []OrderGiftcardHook{}

	AddOrderGiftcardHook(boil.AfterUpsertHook, orderGiftcardAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	orderGiftcardAfterUpsertHooks = []OrderGiftcardHook{}
}

func testOrderGiftcardsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderGiftcardsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(orderGiftcardColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := OrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderGiftcardToOneGiftcardUsingGiftcard(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderGiftcard
	var foreign Giftcard

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, giftcardDBTypes, false, giftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Giftcard struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GiftcardID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Giftcard().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddGiftcardHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Giftcard) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderGiftcardSlice{&local}
	if err = local.L.LoadGiftcard(ctx, tx, false, (*[]*OrderGiftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Giftcard == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Giftcard = nil
	if err = local.L.LoadGiftcard(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Giftcard == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderGiftcardToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local OrderGiftcard
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderGiftcardDBTypes, false, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrderID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Order) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OrderGiftcardSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*OrderGiftcard)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOrderGiftcardToOneSetOpGiftcardUsingGiftcard(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderGiftcard
	var b, c Giftcard

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderGiftcardDBTypes, false, strmangle.SetComplement(orderGiftcardPrimaryKeyColumns, orderGiftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, giftcardDBTypes, false, strmangle.SetComplement(giftcardPrimaryKeyColumns, giftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Giftcard{&b, &c} {
		err = a.SetGiftcard(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Giftcard != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderGiftcards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GiftcardID != x.ID {
			t.Error("foreign key was wrong value", a.GiftcardID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GiftcardID))
		reflect.Indirect(reflect.ValueOf(&a.GiftcardID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GiftcardID != x.ID {
			t.Error("foreign key was wrong value", a.GiftcardID, x.ID)
		}
	}
}
func testOrderGiftcardToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a OrderGiftcard
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderGiftcardDBTypes, false, strmangle.SetComplement(orderGiftcardPrimaryKeyColumns, orderGiftcardColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderGiftcards[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrderID != x.ID {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrderID != x.ID {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testOrderGiftcardsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderGiftcardsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OrderGiftcardSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOrderGiftcardsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := OrderGiftcards().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderGiftcardDBTypes = map[string]string{`ID`: `uuid`, `GiftcardID`: `uuid`, `OrderID`: `uuid`}
	_                    = bytes.MinRead
)

func testOrderGiftcardsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(orderGiftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(orderGiftcardAllColumns) == len(orderGiftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOrderGiftcardsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderGiftcardAllColumns) == len(orderGiftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &OrderGiftcard{}
	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := OrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, orderGiftcardDBTypes, true, orderGiftcardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderGiftcardAllColumns, orderGiftcardPrimaryKeyColumns) {
		fields = orderGiftcardAllColumns
	} else {
		fields = strmangle.SetComplement(
			orderGiftcardAllColumns,
			orderGiftcardPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OrderGiftcardSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOrderGiftcardsUpsert(t *testing.T) {
	t.Parallel()

	if len(orderGiftcardAllColumns) == len(orderGiftcardPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := OrderGiftcard{}
	if err = randomize.Struct(seed, &o, orderGiftcardDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderGiftcard: %s", err)
	}

	count, err := OrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, orderGiftcardDBTypes, false, orderGiftcardPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderGiftcard struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert OrderGiftcard: %s", err)
	}

	count, err = OrderGiftcards().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
