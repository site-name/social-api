// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Payment is an object representing the database table.
type Payment struct {
	ID                 string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Gateway            null.String  `boil:"gateway" json:"gateway,omitempty" toml:"gateway" yaml:"gateway,omitempty"`
	Isactive           null.Bool    `boil:"isactive" json:"isactive,omitempty" toml:"isactive" yaml:"isactive,omitempty"`
	Toconfirm          null.Bool    `boil:"toconfirm" json:"toconfirm,omitempty" toml:"toconfirm" yaml:"toconfirm,omitempty"`
	Createat           null.Int64   `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Updateat           null.Int64   `boil:"updateat" json:"updateat,omitempty" toml:"updateat" yaml:"updateat,omitempty"`
	Chargestatus       null.String  `boil:"chargestatus" json:"chargestatus,omitempty" toml:"chargestatus" yaml:"chargestatus,omitempty"`
	Token              null.String  `boil:"token" json:"token,omitempty" toml:"token" yaml:"token,omitempty"`
	Total              null.Float64 `boil:"total" json:"total,omitempty" toml:"total" yaml:"total,omitempty"`
	Capturedamount     null.Float64 `boil:"capturedamount" json:"capturedamount,omitempty" toml:"capturedamount" yaml:"capturedamount,omitempty"`
	Currency           null.String  `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	Checkoutid         null.String  `boil:"checkoutid" json:"checkoutid,omitempty" toml:"checkoutid" yaml:"checkoutid,omitempty"`
	Orderid            null.String  `boil:"orderid" json:"orderid,omitempty" toml:"orderid" yaml:"orderid,omitempty"`
	Billingemail       null.String  `boil:"billingemail" json:"billingemail,omitempty" toml:"billingemail" yaml:"billingemail,omitempty"`
	Billingfirstname   null.String  `boil:"billingfirstname" json:"billingfirstname,omitempty" toml:"billingfirstname" yaml:"billingfirstname,omitempty"`
	Billinglastname    null.String  `boil:"billinglastname" json:"billinglastname,omitempty" toml:"billinglastname" yaml:"billinglastname,omitempty"`
	Billingcompanyname null.String  `boil:"billingcompanyname" json:"billingcompanyname,omitempty" toml:"billingcompanyname" yaml:"billingcompanyname,omitempty"`
	Billingaddress1    null.String  `boil:"billingaddress1" json:"billingaddress1,omitempty" toml:"billingaddress1" yaml:"billingaddress1,omitempty"`
	Billingaddress2    null.String  `boil:"billingaddress2" json:"billingaddress2,omitempty" toml:"billingaddress2" yaml:"billingaddress2,omitempty"`
	Billingcity        null.String  `boil:"billingcity" json:"billingcity,omitempty" toml:"billingcity" yaml:"billingcity,omitempty"`
	Billingcityarea    null.String  `boil:"billingcityarea" json:"billingcityarea,omitempty" toml:"billingcityarea" yaml:"billingcityarea,omitempty"`
	Billingpostalcode  null.String  `boil:"billingpostalcode" json:"billingpostalcode,omitempty" toml:"billingpostalcode" yaml:"billingpostalcode,omitempty"`
	Billingcountrycode null.String  `boil:"billingcountrycode" json:"billingcountrycode,omitempty" toml:"billingcountrycode" yaml:"billingcountrycode,omitempty"`
	Billingcountryarea null.String  `boil:"billingcountryarea" json:"billingcountryarea,omitempty" toml:"billingcountryarea" yaml:"billingcountryarea,omitempty"`
	Ccfirstdigits      null.String  `boil:"ccfirstdigits" json:"ccfirstdigits,omitempty" toml:"ccfirstdigits" yaml:"ccfirstdigits,omitempty"`
	Cclastdigits       null.String  `boil:"cclastdigits" json:"cclastdigits,omitempty" toml:"cclastdigits" yaml:"cclastdigits,omitempty"`
	Ccbrand            null.String  `boil:"ccbrand" json:"ccbrand,omitempty" toml:"ccbrand" yaml:"ccbrand,omitempty"`
	Ccexpmonth         null.Int     `boil:"ccexpmonth" json:"ccexpmonth,omitempty" toml:"ccexpmonth" yaml:"ccexpmonth,omitempty"`
	Ccexpyear          null.Int     `boil:"ccexpyear" json:"ccexpyear,omitempty" toml:"ccexpyear" yaml:"ccexpyear,omitempty"`
	Paymentmethodtype  null.String  `boil:"paymentmethodtype" json:"paymentmethodtype,omitempty" toml:"paymentmethodtype" yaml:"paymentmethodtype,omitempty"`
	Customeripaddress  null.String  `boil:"customeripaddress" json:"customeripaddress,omitempty" toml:"customeripaddress" yaml:"customeripaddress,omitempty"`
	Extradata          null.String  `boil:"extradata" json:"extradata,omitempty" toml:"extradata" yaml:"extradata,omitempty"`
	Returnurl          null.String  `boil:"returnurl" json:"returnurl,omitempty" toml:"returnurl" yaml:"returnurl,omitempty"`
	Pspreference       null.String  `boil:"pspreference" json:"pspreference,omitempty" toml:"pspreference" yaml:"pspreference,omitempty"`
	Storepaymentmethod null.String  `boil:"storepaymentmethod" json:"storepaymentmethod,omitempty" toml:"storepaymentmethod" yaml:"storepaymentmethod,omitempty"`
	Metadata           null.JSON    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata    null.JSON    `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *paymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentColumns = struct {
	ID                 string
	Gateway            string
	Isactive           string
	Toconfirm          string
	Createat           string
	Updateat           string
	Chargestatus       string
	Token              string
	Total              string
	Capturedamount     string
	Currency           string
	Checkoutid         string
	Orderid            string
	Billingemail       string
	Billingfirstname   string
	Billinglastname    string
	Billingcompanyname string
	Billingaddress1    string
	Billingaddress2    string
	Billingcity        string
	Billingcityarea    string
	Billingpostalcode  string
	Billingcountrycode string
	Billingcountryarea string
	Ccfirstdigits      string
	Cclastdigits       string
	Ccbrand            string
	Ccexpmonth         string
	Ccexpyear          string
	Paymentmethodtype  string
	Customeripaddress  string
	Extradata          string
	Returnurl          string
	Pspreference       string
	Storepaymentmethod string
	Metadata           string
	Privatemetadata    string
}{
	ID:                 "id",
	Gateway:            "gateway",
	Isactive:           "isactive",
	Toconfirm:          "toconfirm",
	Createat:           "createat",
	Updateat:           "updateat",
	Chargestatus:       "chargestatus",
	Token:              "token",
	Total:              "total",
	Capturedamount:     "capturedamount",
	Currency:           "currency",
	Checkoutid:         "checkoutid",
	Orderid:            "orderid",
	Billingemail:       "billingemail",
	Billingfirstname:   "billingfirstname",
	Billinglastname:    "billinglastname",
	Billingcompanyname: "billingcompanyname",
	Billingaddress1:    "billingaddress1",
	Billingaddress2:    "billingaddress2",
	Billingcity:        "billingcity",
	Billingcityarea:    "billingcityarea",
	Billingpostalcode:  "billingpostalcode",
	Billingcountrycode: "billingcountrycode",
	Billingcountryarea: "billingcountryarea",
	Ccfirstdigits:      "ccfirstdigits",
	Cclastdigits:       "cclastdigits",
	Ccbrand:            "ccbrand",
	Ccexpmonth:         "ccexpmonth",
	Ccexpyear:          "ccexpyear",
	Paymentmethodtype:  "paymentmethodtype",
	Customeripaddress:  "customeripaddress",
	Extradata:          "extradata",
	Returnurl:          "returnurl",
	Pspreference:       "pspreference",
	Storepaymentmethod: "storepaymentmethod",
	Metadata:           "metadata",
	Privatemetadata:    "privatemetadata",
}

var PaymentTableColumns = struct {
	ID                 string
	Gateway            string
	Isactive           string
	Toconfirm          string
	Createat           string
	Updateat           string
	Chargestatus       string
	Token              string
	Total              string
	Capturedamount     string
	Currency           string
	Checkoutid         string
	Orderid            string
	Billingemail       string
	Billingfirstname   string
	Billinglastname    string
	Billingcompanyname string
	Billingaddress1    string
	Billingaddress2    string
	Billingcity        string
	Billingcityarea    string
	Billingpostalcode  string
	Billingcountrycode string
	Billingcountryarea string
	Ccfirstdigits      string
	Cclastdigits       string
	Ccbrand            string
	Ccexpmonth         string
	Ccexpyear          string
	Paymentmethodtype  string
	Customeripaddress  string
	Extradata          string
	Returnurl          string
	Pspreference       string
	Storepaymentmethod string
	Metadata           string
	Privatemetadata    string
}{
	ID:                 "payments.id",
	Gateway:            "payments.gateway",
	Isactive:           "payments.isactive",
	Toconfirm:          "payments.toconfirm",
	Createat:           "payments.createat",
	Updateat:           "payments.updateat",
	Chargestatus:       "payments.chargestatus",
	Token:              "payments.token",
	Total:              "payments.total",
	Capturedamount:     "payments.capturedamount",
	Currency:           "payments.currency",
	Checkoutid:         "payments.checkoutid",
	Orderid:            "payments.orderid",
	Billingemail:       "payments.billingemail",
	Billingfirstname:   "payments.billingfirstname",
	Billinglastname:    "payments.billinglastname",
	Billingcompanyname: "payments.billingcompanyname",
	Billingaddress1:    "payments.billingaddress1",
	Billingaddress2:    "payments.billingaddress2",
	Billingcity:        "payments.billingcity",
	Billingcityarea:    "payments.billingcityarea",
	Billingpostalcode:  "payments.billingpostalcode",
	Billingcountrycode: "payments.billingcountrycode",
	Billingcountryarea: "payments.billingcountryarea",
	Ccfirstdigits:      "payments.ccfirstdigits",
	Cclastdigits:       "payments.cclastdigits",
	Ccbrand:            "payments.ccbrand",
	Ccexpmonth:         "payments.ccexpmonth",
	Ccexpyear:          "payments.ccexpyear",
	Paymentmethodtype:  "payments.paymentmethodtype",
	Customeripaddress:  "payments.customeripaddress",
	Extradata:          "payments.extradata",
	Returnurl:          "payments.returnurl",
	Pspreference:       "payments.pspreference",
	Storepaymentmethod: "payments.storepaymentmethod",
	Metadata:           "payments.metadata",
	Privatemetadata:    "payments.privatemetadata",
}

// Generated where

var PaymentWhere = struct {
	ID                 whereHelperstring
	Gateway            whereHelpernull_String
	Isactive           whereHelpernull_Bool
	Toconfirm          whereHelpernull_Bool
	Createat           whereHelpernull_Int64
	Updateat           whereHelpernull_Int64
	Chargestatus       whereHelpernull_String
	Token              whereHelpernull_String
	Total              whereHelpernull_Float64
	Capturedamount     whereHelpernull_Float64
	Currency           whereHelpernull_String
	Checkoutid         whereHelpernull_String
	Orderid            whereHelpernull_String
	Billingemail       whereHelpernull_String
	Billingfirstname   whereHelpernull_String
	Billinglastname    whereHelpernull_String
	Billingcompanyname whereHelpernull_String
	Billingaddress1    whereHelpernull_String
	Billingaddress2    whereHelpernull_String
	Billingcity        whereHelpernull_String
	Billingcityarea    whereHelpernull_String
	Billingpostalcode  whereHelpernull_String
	Billingcountrycode whereHelpernull_String
	Billingcountryarea whereHelpernull_String
	Ccfirstdigits      whereHelpernull_String
	Cclastdigits       whereHelpernull_String
	Ccbrand            whereHelpernull_String
	Ccexpmonth         whereHelpernull_Int
	Ccexpyear          whereHelpernull_Int
	Paymentmethodtype  whereHelpernull_String
	Customeripaddress  whereHelpernull_String
	Extradata          whereHelpernull_String
	Returnurl          whereHelpernull_String
	Pspreference       whereHelpernull_String
	Storepaymentmethod whereHelpernull_String
	Metadata           whereHelpernull_JSON
	Privatemetadata    whereHelpernull_JSON
}{
	ID:                 whereHelperstring{field: "\"payments\".\"id\""},
	Gateway:            whereHelpernull_String{field: "\"payments\".\"gateway\""},
	Isactive:           whereHelpernull_Bool{field: "\"payments\".\"isactive\""},
	Toconfirm:          whereHelpernull_Bool{field: "\"payments\".\"toconfirm\""},
	Createat:           whereHelpernull_Int64{field: "\"payments\".\"createat\""},
	Updateat:           whereHelpernull_Int64{field: "\"payments\".\"updateat\""},
	Chargestatus:       whereHelpernull_String{field: "\"payments\".\"chargestatus\""},
	Token:              whereHelpernull_String{field: "\"payments\".\"token\""},
	Total:              whereHelpernull_Float64{field: "\"payments\".\"total\""},
	Capturedamount:     whereHelpernull_Float64{field: "\"payments\".\"capturedamount\""},
	Currency:           whereHelpernull_String{field: "\"payments\".\"currency\""},
	Checkoutid:         whereHelpernull_String{field: "\"payments\".\"checkoutid\""},
	Orderid:            whereHelpernull_String{field: "\"payments\".\"orderid\""},
	Billingemail:       whereHelpernull_String{field: "\"payments\".\"billingemail\""},
	Billingfirstname:   whereHelpernull_String{field: "\"payments\".\"billingfirstname\""},
	Billinglastname:    whereHelpernull_String{field: "\"payments\".\"billinglastname\""},
	Billingcompanyname: whereHelpernull_String{field: "\"payments\".\"billingcompanyname\""},
	Billingaddress1:    whereHelpernull_String{field: "\"payments\".\"billingaddress1\""},
	Billingaddress2:    whereHelpernull_String{field: "\"payments\".\"billingaddress2\""},
	Billingcity:        whereHelpernull_String{field: "\"payments\".\"billingcity\""},
	Billingcityarea:    whereHelpernull_String{field: "\"payments\".\"billingcityarea\""},
	Billingpostalcode:  whereHelpernull_String{field: "\"payments\".\"billingpostalcode\""},
	Billingcountrycode: whereHelpernull_String{field: "\"payments\".\"billingcountrycode\""},
	Billingcountryarea: whereHelpernull_String{field: "\"payments\".\"billingcountryarea\""},
	Ccfirstdigits:      whereHelpernull_String{field: "\"payments\".\"ccfirstdigits\""},
	Cclastdigits:       whereHelpernull_String{field: "\"payments\".\"cclastdigits\""},
	Ccbrand:            whereHelpernull_String{field: "\"payments\".\"ccbrand\""},
	Ccexpmonth:         whereHelpernull_Int{field: "\"payments\".\"ccexpmonth\""},
	Ccexpyear:          whereHelpernull_Int{field: "\"payments\".\"ccexpyear\""},
	Paymentmethodtype:  whereHelpernull_String{field: "\"payments\".\"paymentmethodtype\""},
	Customeripaddress:  whereHelpernull_String{field: "\"payments\".\"customeripaddress\""},
	Extradata:          whereHelpernull_String{field: "\"payments\".\"extradata\""},
	Returnurl:          whereHelpernull_String{field: "\"payments\".\"returnurl\""},
	Pspreference:       whereHelpernull_String{field: "\"payments\".\"pspreference\""},
	Storepaymentmethod: whereHelpernull_String{field: "\"payments\".\"storepaymentmethod\""},
	Metadata:           whereHelpernull_JSON{field: "\"payments\".\"metadata\""},
	Privatemetadata:    whereHelpernull_JSON{field: "\"payments\".\"privatemetadata\""},
}

// PaymentRels is where relationship names are stored.
var PaymentRels = struct {
	CheckoutidCheckout    string
	OrderidOrder          string
	PaymentidTransactions string
}{
	CheckoutidCheckout:    "CheckoutidCheckout",
	OrderidOrder:          "OrderidOrder",
	PaymentidTransactions: "PaymentidTransactions",
}

// paymentR is where relationships are stored.
type paymentR struct {
	CheckoutidCheckout    *Checkout        `boil:"CheckoutidCheckout" json:"CheckoutidCheckout" toml:"CheckoutidCheckout" yaml:"CheckoutidCheckout"`
	OrderidOrder          *Order           `boil:"OrderidOrder" json:"OrderidOrder" toml:"OrderidOrder" yaml:"OrderidOrder"`
	PaymentidTransactions TransactionSlice `boil:"PaymentidTransactions" json:"PaymentidTransactions" toml:"PaymentidTransactions" yaml:"PaymentidTransactions"`
}

// NewStruct creates a new relationship struct
func (*paymentR) NewStruct() *paymentR {
	return &paymentR{}
}

func (r *paymentR) GetCheckoutidCheckout() *Checkout {
	if r == nil {
		return nil
	}
	return r.CheckoutidCheckout
}

func (r *paymentR) GetOrderidOrder() *Order {
	if r == nil {
		return nil
	}
	return r.OrderidOrder
}

func (r *paymentR) GetPaymentidTransactions() TransactionSlice {
	if r == nil {
		return nil
	}
	return r.PaymentidTransactions
}

// paymentL is where Load methods for each relationship are stored.
type paymentL struct{}

var (
	paymentAllColumns            = []string{"id", "gateway", "isactive", "toconfirm", "createat", "updateat", "chargestatus", "token", "total", "capturedamount", "currency", "checkoutid", "orderid", "billingemail", "billingfirstname", "billinglastname", "billingcompanyname", "billingaddress1", "billingaddress2", "billingcity", "billingcityarea", "billingpostalcode", "billingcountrycode", "billingcountryarea", "ccfirstdigits", "cclastdigits", "ccbrand", "ccexpmonth", "ccexpyear", "paymentmethodtype", "customeripaddress", "extradata", "returnurl", "pspreference", "storepaymentmethod", "metadata", "privatemetadata"}
	paymentColumnsWithoutDefault = []string{"id"}
	paymentColumnsWithDefault    = []string{"gateway", "isactive", "toconfirm", "createat", "updateat", "chargestatus", "token", "total", "capturedamount", "currency", "checkoutid", "orderid", "billingemail", "billingfirstname", "billinglastname", "billingcompanyname", "billingaddress1", "billingaddress2", "billingcity", "billingcityarea", "billingpostalcode", "billingcountrycode", "billingcountryarea", "ccfirstdigits", "cclastdigits", "ccbrand", "ccexpmonth", "ccexpyear", "paymentmethodtype", "customeripaddress", "extradata", "returnurl", "pspreference", "storepaymentmethod", "metadata", "privatemetadata"}
	paymentPrimaryKeyColumns     = []string{"id"}
	paymentGeneratedColumns      = []string{}
)

type (
	// PaymentSlice is an alias for a slice of pointers to Payment.
	// This should almost always be used instead of []Payment.
	PaymentSlice []*Payment
	// PaymentHook is the signature for custom Payment hook methods
	PaymentHook func(context.Context, boil.ContextExecutor, *Payment) error

	paymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentType                 = reflect.TypeOf(&Payment{})
	paymentMapping              = queries.MakeStructMapping(paymentType)
	paymentPrimaryKeyMapping, _ = queries.BindMapping(paymentType, paymentMapping, paymentPrimaryKeyColumns)
	paymentInsertCacheMut       sync.RWMutex
	paymentInsertCache          = make(map[string]insertCache)
	paymentUpdateCacheMut       sync.RWMutex
	paymentUpdateCache          = make(map[string]updateCache)
	paymentUpsertCacheMut       sync.RWMutex
	paymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentAfterSelectHooks []PaymentHook

var paymentBeforeInsertHooks []PaymentHook
var paymentAfterInsertHooks []PaymentHook

var paymentBeforeUpdateHooks []PaymentHook
var paymentAfterUpdateHooks []PaymentHook

var paymentBeforeDeleteHooks []PaymentHook
var paymentAfterDeleteHooks []PaymentHook

var paymentBeforeUpsertHooks []PaymentHook
var paymentAfterUpsertHooks []PaymentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Payment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Payment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Payment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Payment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Payment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Payment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Payment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Payment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Payment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentHook registers your hook function for all future operations.
func AddPaymentHook(hookPoint boil.HookPoint, paymentHook PaymentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		paymentAfterSelectHooks = append(paymentAfterSelectHooks, paymentHook)
	case boil.BeforeInsertHook:
		paymentBeforeInsertHooks = append(paymentBeforeInsertHooks, paymentHook)
	case boil.AfterInsertHook:
		paymentAfterInsertHooks = append(paymentAfterInsertHooks, paymentHook)
	case boil.BeforeUpdateHook:
		paymentBeforeUpdateHooks = append(paymentBeforeUpdateHooks, paymentHook)
	case boil.AfterUpdateHook:
		paymentAfterUpdateHooks = append(paymentAfterUpdateHooks, paymentHook)
	case boil.BeforeDeleteHook:
		paymentBeforeDeleteHooks = append(paymentBeforeDeleteHooks, paymentHook)
	case boil.AfterDeleteHook:
		paymentAfterDeleteHooks = append(paymentAfterDeleteHooks, paymentHook)
	case boil.BeforeUpsertHook:
		paymentBeforeUpsertHooks = append(paymentBeforeUpsertHooks, paymentHook)
	case boil.AfterUpsertHook:
		paymentAfterUpsertHooks = append(paymentAfterUpsertHooks, paymentHook)
	}
}

// One returns a single payment record from the query.
func (q paymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Payment, error) {
	o := &Payment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for payments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Payment records from the query.
func (q paymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentSlice, error) {
	var o []*Payment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Payment slice")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Payment records in the query.
func (q paymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count payments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q paymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if payments exists")
	}

	return count > 0, nil
}

// CheckoutidCheckout pointed to by the foreign key.
func (o *Payment) CheckoutidCheckout(mods ...qm.QueryMod) checkoutQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"token\" = ?", o.Checkoutid),
	}

	queryMods = append(queryMods, mods...)

	return Checkouts(queryMods...)
}

// OrderidOrder pointed to by the foreign key.
func (o *Payment) OrderidOrder(mods ...qm.QueryMod) orderQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Orderid),
	}

	queryMods = append(queryMods, mods...)

	return Orders(queryMods...)
}

// PaymentidTransactions retrieves all the transaction's Transactions with an executor via paymentid column.
func (o *Payment) PaymentidTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"paymentid\"=?", o.ID),
	)

	return Transactions(queryMods...)
}

// LoadCheckoutidCheckout allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentL) LoadCheckoutidCheckout(ctx context.Context, e boil.ContextExecutor, singular bool, maybePayment interface{}, mods queries.Applicator) error {
	var slice []*Payment
	var object *Payment

	if singular {
		var ok bool
		object, ok = maybePayment.(*Payment)
		if !ok {
			object = new(Payment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePayment))
			}
		}
	} else {
		s, ok := maybePayment.(*[]*Payment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentR{}
		}
		if !queries.IsNil(object.Checkoutid) {
			args = append(args, object.Checkoutid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Checkoutid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Checkoutid) {
				args = append(args, obj.Checkoutid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.token in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Checkout")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Checkout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CheckoutidCheckout = foreign
		if foreign.R == nil {
			foreign.R = &checkoutR{}
		}
		foreign.R.CheckoutidPayments = append(foreign.R.CheckoutidPayments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Checkoutid, foreign.Token) {
				local.R.CheckoutidCheckout = foreign
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.CheckoutidPayments = append(foreign.R.CheckoutidPayments, local)
				break
			}
		}
	}

	return nil
}

// LoadOrderidOrder allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (paymentL) LoadOrderidOrder(ctx context.Context, e boil.ContextExecutor, singular bool, maybePayment interface{}, mods queries.Applicator) error {
	var slice []*Payment
	var object *Payment

	if singular {
		var ok bool
		object, ok = maybePayment.(*Payment)
		if !ok {
			object = new(Payment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePayment))
			}
		}
	} else {
		s, ok := maybePayment.(*[]*Payment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentR{}
		}
		if !queries.IsNil(object.Orderid) {
			args = append(args, object.Orderid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Orderid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Orderid) {
				args = append(args, obj.Orderid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Order")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Order")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.OrderidOrder = foreign
		if foreign.R == nil {
			foreign.R = &orderR{}
		}
		foreign.R.OrderidPayments = append(foreign.R.OrderidPayments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Orderid, foreign.ID) {
				local.R.OrderidOrder = foreign
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.OrderidPayments = append(foreign.R.OrderidPayments, local)
				break
			}
		}
	}

	return nil
}

// LoadPaymentidTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (paymentL) LoadPaymentidTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybePayment interface{}, mods queries.Applicator) error {
	var slice []*Payment
	var object *Payment

	if singular {
		var ok bool
		object, ok = maybePayment.(*Payment)
		if !ok {
			object = new(Payment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePayment))
			}
		}
	} else {
		s, ok := maybePayment.(*[]*Payment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.paymentid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PaymentidTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.PaymentidPayment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Paymentid) {
				local.R.PaymentidTransactions = append(local.R.PaymentidTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.PaymentidPayment = local
				break
			}
		}
	}

	return nil
}

// SetCheckoutidCheckout of the payment to the related item.
// Sets o.R.CheckoutidCheckout to related.
// Adds o to related.R.CheckoutidPayments.
func (o *Payment) SetCheckoutidCheckout(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Checkout) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"checkoutid"}),
		strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
	)
	values := []interface{}{related.Token, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Checkoutid, related.Token)
	if o.R == nil {
		o.R = &paymentR{
			CheckoutidCheckout: related,
		}
	} else {
		o.R.CheckoutidCheckout = related
	}

	if related.R == nil {
		related.R = &checkoutR{
			CheckoutidPayments: PaymentSlice{o},
		}
	} else {
		related.R.CheckoutidPayments = append(related.R.CheckoutidPayments, o)
	}

	return nil
}

// RemoveCheckoutidCheckout relationship.
// Sets o.R.CheckoutidCheckout to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Payment) RemoveCheckoutidCheckout(ctx context.Context, exec boil.ContextExecutor, related *Checkout) error {
	var err error

	queries.SetScanner(&o.Checkoutid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("checkoutid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CheckoutidCheckout = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CheckoutidPayments {
		if queries.Equal(o.Checkoutid, ri.Checkoutid) {
			continue
		}

		ln := len(related.R.CheckoutidPayments)
		if ln > 1 && i < ln-1 {
			related.R.CheckoutidPayments[i] = related.R.CheckoutidPayments[ln-1]
		}
		related.R.CheckoutidPayments = related.R.CheckoutidPayments[:ln-1]
		break
	}
	return nil
}

// SetOrderidOrder of the payment to the related item.
// Sets o.R.OrderidOrder to related.
// Adds o to related.R.OrderidPayments.
func (o *Payment) SetOrderidOrder(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Order) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"payments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"orderid"}),
		strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Orderid, related.ID)
	if o.R == nil {
		o.R = &paymentR{
			OrderidOrder: related,
		}
	} else {
		o.R.OrderidOrder = related
	}

	if related.R == nil {
		related.R = &orderR{
			OrderidPayments: PaymentSlice{o},
		}
	} else {
		related.R.OrderidPayments = append(related.R.OrderidPayments, o)
	}

	return nil
}

// RemoveOrderidOrder relationship.
// Sets o.R.OrderidOrder to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Payment) RemoveOrderidOrder(ctx context.Context, exec boil.ContextExecutor, related *Order) error {
	var err error

	queries.SetScanner(&o.Orderid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("orderid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.OrderidOrder = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OrderidPayments {
		if queries.Equal(o.Orderid, ri.Orderid) {
			continue
		}

		ln := len(related.R.OrderidPayments)
		if ln > 1 && i < ln-1 {
			related.R.OrderidPayments[i] = related.R.OrderidPayments[ln-1]
		}
		related.R.OrderidPayments = related.R.OrderidPayments[:ln-1]
		break
	}
	return nil
}

// AddPaymentidTransactions adds the given related objects to the existing relationships
// of the payment, optionally inserting them as new records.
// Appends related to o.R.PaymentidTransactions.
// Sets related.R.PaymentidPayment appropriately.
func (o *Payment) AddPaymentidTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Paymentid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"paymentid"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Paymentid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &paymentR{
			PaymentidTransactions: related,
		}
	} else {
		o.R.PaymentidTransactions = append(o.R.PaymentidTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				PaymentidPayment: o,
			}
		} else {
			rel.R.PaymentidPayment = o
		}
	}
	return nil
}

// SetPaymentidTransactions removes all previously related items of the
// payment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PaymentidPayment's PaymentidTransactions accordingly.
// Replaces o.R.PaymentidTransactions with related.
// Sets related.R.PaymentidPayment's PaymentidTransactions accordingly.
func (o *Payment) SetPaymentidTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	query := "update \"transactions\" set \"paymentid\" = null where \"paymentid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PaymentidTransactions {
			queries.SetScanner(&rel.Paymentid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PaymentidPayment = nil
		}
		o.R.PaymentidTransactions = nil
	}

	return o.AddPaymentidTransactions(ctx, exec, insert, related...)
}

// RemovePaymentidTransactions relationships from objects passed in.
// Removes related items from R.PaymentidTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.PaymentidPayment.
func (o *Payment) RemovePaymentidTransactions(ctx context.Context, exec boil.ContextExecutor, related ...*Transaction) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Paymentid, nil)
		if rel.R != nil {
			rel.R.PaymentidPayment = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("paymentid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PaymentidTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.PaymentidTransactions)
			if ln > 1 && i < ln-1 {
				o.R.PaymentidTransactions[i] = o.R.PaymentidTransactions[ln-1]
			}
			o.R.PaymentidTransactions = o.R.PaymentidTransactions[:ln-1]
			break
		}
	}

	return nil
}

// Payments retrieves all the records using an executor.
func Payments(mods ...qm.QueryMod) paymentQuery {
	mods = append(mods, qm.From("\"payments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"payments\".*"})
	}

	return paymentQuery{q}
}

// FindPayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPayment(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Payment, error) {
	paymentObj := &Payment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"payments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, paymentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from payments")
	}

	if err = paymentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return paymentObj, err
	}

	return paymentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Payment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentInsertCacheMut.RLock()
	cache, cached := paymentInsertCache[key]
	paymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentAllColumns,
			paymentColumnsWithDefault,
			paymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentType, paymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentType, paymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"payments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"payments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into payments")
	}

	if !cached {
		paymentInsertCacheMut.Lock()
		paymentInsertCache[key] = cache
		paymentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Payment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Payment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentUpdateCacheMut.RLock()
	cache, cached := paymentUpdateCache[key]
	paymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentAllColumns,
			paymentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update payments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"payments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentType, paymentMapping, append(wl, paymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update payments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for payments")
	}

	if !cached {
		paymentUpdateCacheMut.Lock()
		paymentUpdateCache[key] = cache
		paymentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for payments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"payments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paymentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in payment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all payment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Payment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentUpsertCacheMut.RLock()
	cache, cached := paymentUpsertCache[key]
	paymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentAllColumns,
			paymentColumnsWithDefault,
			paymentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paymentAllColumns,
			paymentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert payments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(paymentPrimaryKeyColumns))
			copy(conflict, paymentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"payments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(paymentType, paymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentType, paymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert payments")
	}

	if !cached {
		paymentUpsertCacheMut.Lock()
		paymentUpsertCache[key] = cache
		paymentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Payment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Payment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Payment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentPrimaryKeyMapping)
	sql := "DELETE FROM \"payments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for payments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q paymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"payments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from payment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payments")
	}

	if len(paymentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Payment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPayment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"payments\".* FROM \"payments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentSlice")
	}

	*o = slice

	return nil
}

// PaymentExists checks if the Payment row exists.
func PaymentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"payments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if payments exists")
	}

	return exists, nil
}

// Exists checks if the Payment row exists.
func (o *Payment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PaymentExists(ctx, exec, o.ID)
}
