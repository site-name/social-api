// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSystems(t *testing.T) {
	t.Parallel()

	query := Systems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSystemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Systems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSystemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Systems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Systems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSystemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SystemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Systems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSystemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SystemExists(ctx, tx, o.Name)
	if err != nil {
		t.Errorf("Unable to check if System exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SystemExists to return true, but got false.")
	}
}

func testSystemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	systemFound, err := FindSystem(ctx, tx, o.Name)
	if err != nil {
		t.Error(err)
	}

	if systemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSystemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Systems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSystemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Systems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSystemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	systemOne := &System{}
	systemTwo := &System{}
	if err = randomize.Struct(seed, systemOne, systemDBTypes, false, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}
	if err = randomize.Struct(seed, systemTwo, systemDBTypes, false, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = systemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = systemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Systems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSystemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	systemOne := &System{}
	systemTwo := &System{}
	if err = randomize.Struct(seed, systemOne, systemDBTypes, false, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}
	if err = randomize.Struct(seed, systemTwo, systemDBTypes, false, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = systemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = systemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Systems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func systemBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *System) error {
	*o = System{}
	return nil
}

func systemAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *System) error {
	*o = System{}
	return nil
}

func systemAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *System) error {
	*o = System{}
	return nil
}

func systemBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *System) error {
	*o = System{}
	return nil
}

func systemAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *System) error {
	*o = System{}
	return nil
}

func systemBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *System) error {
	*o = System{}
	return nil
}

func systemAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *System) error {
	*o = System{}
	return nil
}

func systemBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *System) error {
	*o = System{}
	return nil
}

func systemAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *System) error {
	*o = System{}
	return nil
}

func testSystemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &System{}
	o := &System{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, systemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize System object: %s", err)
	}

	AddSystemHook(boil.BeforeInsertHook, systemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	systemBeforeInsertHooks = []SystemHook{}

	AddSystemHook(boil.AfterInsertHook, systemAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	systemAfterInsertHooks = []SystemHook{}

	AddSystemHook(boil.AfterSelectHook, systemAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	systemAfterSelectHooks = []SystemHook{}

	AddSystemHook(boil.BeforeUpdateHook, systemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	systemBeforeUpdateHooks = []SystemHook{}

	AddSystemHook(boil.AfterUpdateHook, systemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	systemAfterUpdateHooks = []SystemHook{}

	AddSystemHook(boil.BeforeDeleteHook, systemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	systemBeforeDeleteHooks = []SystemHook{}

	AddSystemHook(boil.AfterDeleteHook, systemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	systemAfterDeleteHooks = []SystemHook{}

	AddSystemHook(boil.BeforeUpsertHook, systemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	systemBeforeUpsertHooks = []SystemHook{}

	AddSystemHook(boil.AfterUpsertHook, systemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	systemAfterUpsertHooks = []SystemHook{}
}

func testSystemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Systems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSystemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(systemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Systems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSystemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSystemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SystemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSystemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Systems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	systemDBTypes = map[string]string{`Name`: `character varying`, `Value`: `character varying`}
	_             = bytes.MinRead
)

func testSystemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(systemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(systemAllColumns) == len(systemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Systems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, systemDBTypes, true, systemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSystemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(systemAllColumns) == len(systemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &System{}
	if err = randomize.Struct(seed, o, systemDBTypes, true, systemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Systems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, systemDBTypes, true, systemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(systemAllColumns, systemPrimaryKeyColumns) {
		fields = systemAllColumns
	} else {
		fields = strmangle.SetComplement(
			systemAllColumns,
			systemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SystemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSystemsUpsert(t *testing.T) {
	t.Parallel()

	if len(systemAllColumns) == len(systemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := System{}
	if err = randomize.Struct(seed, &o, systemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert System: %s", err)
	}

	count, err := Systems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, systemDBTypes, false, systemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize System struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert System: %s", err)
	}

	count, err = Systems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
