// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CustomerNote is an object representing the database table.
type CustomerNote struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Userid     null.String `boil:"userid" json:"userid,omitempty" toml:"userid" yaml:"userid,omitempty"`
	Date       null.Int64  `boil:"date" json:"date,omitempty" toml:"date" yaml:"date,omitempty"`
	Content    null.String `boil:"content" json:"content,omitempty" toml:"content" yaml:"content,omitempty"`
	Ispublic   null.Bool   `boil:"ispublic" json:"ispublic,omitempty" toml:"ispublic" yaml:"ispublic,omitempty"`
	Customerid null.String `boil:"customerid" json:"customerid,omitempty" toml:"customerid" yaml:"customerid,omitempty"`

	R *customerNoteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L customerNoteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CustomerNoteColumns = struct {
	ID         string
	Userid     string
	Date       string
	Content    string
	Ispublic   string
	Customerid string
}{
	ID:         "id",
	Userid:     "userid",
	Date:       "date",
	Content:    "content",
	Ispublic:   "ispublic",
	Customerid: "customerid",
}

var CustomerNoteTableColumns = struct {
	ID         string
	Userid     string
	Date       string
	Content    string
	Ispublic   string
	Customerid string
}{
	ID:         "customer_notes.id",
	Userid:     "customer_notes.userid",
	Date:       "customer_notes.date",
	Content:    "customer_notes.content",
	Ispublic:   "customer_notes.ispublic",
	Customerid: "customer_notes.customerid",
}

// Generated where

var CustomerNoteWhere = struct {
	ID         whereHelperstring
	Userid     whereHelpernull_String
	Date       whereHelpernull_Int64
	Content    whereHelpernull_String
	Ispublic   whereHelpernull_Bool
	Customerid whereHelpernull_String
}{
	ID:         whereHelperstring{field: "\"customer_notes\".\"id\""},
	Userid:     whereHelpernull_String{field: "\"customer_notes\".\"userid\""},
	Date:       whereHelpernull_Int64{field: "\"customer_notes\".\"date\""},
	Content:    whereHelpernull_String{field: "\"customer_notes\".\"content\""},
	Ispublic:   whereHelpernull_Bool{field: "\"customer_notes\".\"ispublic\""},
	Customerid: whereHelpernull_String{field: "\"customer_notes\".\"customerid\""},
}

// CustomerNoteRels is where relationship names are stored.
var CustomerNoteRels = struct {
	UseridUser string
}{
	UseridUser: "UseridUser",
}

// customerNoteR is where relationships are stored.
type customerNoteR struct {
	UseridUser *User `boil:"UseridUser" json:"UseridUser" toml:"UseridUser" yaml:"UseridUser"`
}

// NewStruct creates a new relationship struct
func (*customerNoteR) NewStruct() *customerNoteR {
	return &customerNoteR{}
}

func (r *customerNoteR) GetUseridUser() *User {
	if r == nil {
		return nil
	}
	return r.UseridUser
}

// customerNoteL is where Load methods for each relationship are stored.
type customerNoteL struct{}

var (
	customerNoteAllColumns            = []string{"id", "userid", "date", "content", "ispublic", "customerid"}
	customerNoteColumnsWithoutDefault = []string{"id"}
	customerNoteColumnsWithDefault    = []string{"userid", "date", "content", "ispublic", "customerid"}
	customerNotePrimaryKeyColumns     = []string{"id"}
	customerNoteGeneratedColumns      = []string{}
)

type (
	// CustomerNoteSlice is an alias for a slice of pointers to CustomerNote.
	// This should almost always be used instead of []CustomerNote.
	CustomerNoteSlice []*CustomerNote
	// CustomerNoteHook is the signature for custom CustomerNote hook methods
	CustomerNoteHook func(context.Context, boil.ContextExecutor, *CustomerNote) error

	customerNoteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	customerNoteType                 = reflect.TypeOf(&CustomerNote{})
	customerNoteMapping              = queries.MakeStructMapping(customerNoteType)
	customerNotePrimaryKeyMapping, _ = queries.BindMapping(customerNoteType, customerNoteMapping, customerNotePrimaryKeyColumns)
	customerNoteInsertCacheMut       sync.RWMutex
	customerNoteInsertCache          = make(map[string]insertCache)
	customerNoteUpdateCacheMut       sync.RWMutex
	customerNoteUpdateCache          = make(map[string]updateCache)
	customerNoteUpsertCacheMut       sync.RWMutex
	customerNoteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var customerNoteAfterSelectHooks []CustomerNoteHook

var customerNoteBeforeInsertHooks []CustomerNoteHook
var customerNoteAfterInsertHooks []CustomerNoteHook

var customerNoteBeforeUpdateHooks []CustomerNoteHook
var customerNoteAfterUpdateHooks []CustomerNoteHook

var customerNoteBeforeDeleteHooks []CustomerNoteHook
var customerNoteAfterDeleteHooks []CustomerNoteHook

var customerNoteBeforeUpsertHooks []CustomerNoteHook
var customerNoteAfterUpsertHooks []CustomerNoteHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CustomerNote) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerNoteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CustomerNote) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerNoteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CustomerNote) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerNoteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CustomerNote) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerNoteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CustomerNote) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerNoteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CustomerNote) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerNoteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CustomerNote) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerNoteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CustomerNote) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerNoteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CustomerNote) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range customerNoteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCustomerNoteHook registers your hook function for all future operations.
func AddCustomerNoteHook(hookPoint boil.HookPoint, customerNoteHook CustomerNoteHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		customerNoteAfterSelectHooks = append(customerNoteAfterSelectHooks, customerNoteHook)
	case boil.BeforeInsertHook:
		customerNoteBeforeInsertHooks = append(customerNoteBeforeInsertHooks, customerNoteHook)
	case boil.AfterInsertHook:
		customerNoteAfterInsertHooks = append(customerNoteAfterInsertHooks, customerNoteHook)
	case boil.BeforeUpdateHook:
		customerNoteBeforeUpdateHooks = append(customerNoteBeforeUpdateHooks, customerNoteHook)
	case boil.AfterUpdateHook:
		customerNoteAfterUpdateHooks = append(customerNoteAfterUpdateHooks, customerNoteHook)
	case boil.BeforeDeleteHook:
		customerNoteBeforeDeleteHooks = append(customerNoteBeforeDeleteHooks, customerNoteHook)
	case boil.AfterDeleteHook:
		customerNoteAfterDeleteHooks = append(customerNoteAfterDeleteHooks, customerNoteHook)
	case boil.BeforeUpsertHook:
		customerNoteBeforeUpsertHooks = append(customerNoteBeforeUpsertHooks, customerNoteHook)
	case boil.AfterUpsertHook:
		customerNoteAfterUpsertHooks = append(customerNoteAfterUpsertHooks, customerNoteHook)
	}
}

// One returns a single customerNote record from the query.
func (q customerNoteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CustomerNote, error) {
	o := &CustomerNote{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for customer_notes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CustomerNote records from the query.
func (q customerNoteQuery) All(ctx context.Context, exec boil.ContextExecutor) (CustomerNoteSlice, error) {
	var o []*CustomerNote

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CustomerNote slice")
	}

	if len(customerNoteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CustomerNote records in the query.
func (q customerNoteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count customer_notes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q customerNoteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if customer_notes exists")
	}

	return count > 0, nil
}

// UseridUser pointed to by the foreign key.
func (o *CustomerNote) UseridUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Userid),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUseridUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (customerNoteL) LoadUseridUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCustomerNote interface{}, mods queries.Applicator) error {
	var slice []*CustomerNote
	var object *CustomerNote

	if singular {
		var ok bool
		object, ok = maybeCustomerNote.(*CustomerNote)
		if !ok {
			object = new(CustomerNote)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCustomerNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCustomerNote))
			}
		}
	} else {
		s, ok := maybeCustomerNote.(*[]*CustomerNote)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCustomerNote)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCustomerNote))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &customerNoteR{}
		}
		if !queries.IsNil(object.Userid) {
			args = append(args, object.Userid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &customerNoteR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Userid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Userid) {
				args = append(args, obj.Userid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UseridUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UseridCustomerNotes = append(foreign.R.UseridCustomerNotes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Userid, foreign.ID) {
				local.R.UseridUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UseridCustomerNotes = append(foreign.R.UseridCustomerNotes, local)
				break
			}
		}
	}

	return nil
}

// SetUseridUser of the customerNote to the related item.
// Sets o.R.UseridUser to related.
// Adds o to related.R.UseridCustomerNotes.
func (o *CustomerNote) SetUseridUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"customer_notes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"userid"}),
		strmangle.WhereClause("\"", "\"", 2, customerNotePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Userid, related.ID)
	if o.R == nil {
		o.R = &customerNoteR{
			UseridUser: related,
		}
	} else {
		o.R.UseridUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UseridCustomerNotes: CustomerNoteSlice{o},
		}
	} else {
		related.R.UseridCustomerNotes = append(related.R.UseridCustomerNotes, o)
	}

	return nil
}

// RemoveUseridUser relationship.
// Sets o.R.UseridUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CustomerNote) RemoveUseridUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.Userid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("userid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UseridUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UseridCustomerNotes {
		if queries.Equal(o.Userid, ri.Userid) {
			continue
		}

		ln := len(related.R.UseridCustomerNotes)
		if ln > 1 && i < ln-1 {
			related.R.UseridCustomerNotes[i] = related.R.UseridCustomerNotes[ln-1]
		}
		related.R.UseridCustomerNotes = related.R.UseridCustomerNotes[:ln-1]
		break
	}
	return nil
}

// CustomerNotes retrieves all the records using an executor.
func CustomerNotes(mods ...qm.QueryMod) customerNoteQuery {
	mods = append(mods, qm.From("\"customer_notes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"customer_notes\".*"})
	}

	return customerNoteQuery{q}
}

// FindCustomerNote retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCustomerNote(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CustomerNote, error) {
	customerNoteObj := &CustomerNote{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"customer_notes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, customerNoteObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from customer_notes")
	}

	if err = customerNoteObj.doAfterSelectHooks(ctx, exec); err != nil {
		return customerNoteObj, err
	}

	return customerNoteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CustomerNote) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no customer_notes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerNoteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	customerNoteInsertCacheMut.RLock()
	cache, cached := customerNoteInsertCache[key]
	customerNoteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			customerNoteAllColumns,
			customerNoteColumnsWithDefault,
			customerNoteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(customerNoteType, customerNoteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(customerNoteType, customerNoteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"customer_notes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"customer_notes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into customer_notes")
	}

	if !cached {
		customerNoteInsertCacheMut.Lock()
		customerNoteInsertCache[key] = cache
		customerNoteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CustomerNote.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CustomerNote) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	customerNoteUpdateCacheMut.RLock()
	cache, cached := customerNoteUpdateCache[key]
	customerNoteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			customerNoteAllColumns,
			customerNotePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update customer_notes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"customer_notes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, customerNotePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(customerNoteType, customerNoteMapping, append(wl, customerNotePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update customer_notes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for customer_notes")
	}

	if !cached {
		customerNoteUpdateCacheMut.Lock()
		customerNoteUpdateCache[key] = cache
		customerNoteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q customerNoteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for customer_notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for customer_notes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CustomerNoteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"customer_notes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, customerNotePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in customerNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all customerNote")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CustomerNote) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no customer_notes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(customerNoteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	customerNoteUpsertCacheMut.RLock()
	cache, cached := customerNoteUpsertCache[key]
	customerNoteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			customerNoteAllColumns,
			customerNoteColumnsWithDefault,
			customerNoteColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			customerNoteAllColumns,
			customerNotePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert customer_notes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(customerNotePrimaryKeyColumns))
			copy(conflict, customerNotePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"customer_notes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(customerNoteType, customerNoteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(customerNoteType, customerNoteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert customer_notes")
	}

	if !cached {
		customerNoteUpsertCacheMut.Lock()
		customerNoteUpsertCache[key] = cache
		customerNoteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CustomerNote record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CustomerNote) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CustomerNote provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), customerNotePrimaryKeyMapping)
	sql := "DELETE FROM \"customer_notes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from customer_notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for customer_notes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q customerNoteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no customerNoteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customer_notes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for customer_notes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CustomerNoteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(customerNoteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"customer_notes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, customerNotePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from customerNote slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for customer_notes")
	}

	if len(customerNoteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CustomerNote) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCustomerNote(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CustomerNoteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CustomerNoteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), customerNotePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"customer_notes\".* FROM \"customer_notes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, customerNotePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CustomerNoteSlice")
	}

	*o = slice

	return nil
}

// CustomerNoteExists checks if the CustomerNote row exists.
func CustomerNoteExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"customer_notes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if customer_notes exists")
	}

	return exists, nil
}

// Exists checks if the CustomerNote row exists.
func (o *CustomerNote) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CustomerNoteExists(ctx, exec, o.ID)
}
