// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Channel is an object representing the database table.
type Channel struct {
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Isactive       null.Bool   `boil:"isactive" json:"isactive,omitempty" toml:"isactive" yaml:"isactive,omitempty"`
	Slug           null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	Currency       null.String `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	Defaultcountry null.String `boil:"defaultcountry" json:"defaultcountry,omitempty" toml:"defaultcountry" yaml:"defaultcountry,omitempty"`

	R *channelR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L channelL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChannelColumns = struct {
	ID             string
	Name           string
	Isactive       string
	Slug           string
	Currency       string
	Defaultcountry string
}{
	ID:             "id",
	Name:           "name",
	Isactive:       "isactive",
	Slug:           "slug",
	Currency:       "currency",
	Defaultcountry: "defaultcountry",
}

var ChannelTableColumns = struct {
	ID             string
	Name           string
	Isactive       string
	Slug           string
	Currency       string
	Defaultcountry string
}{
	ID:             "channels.id",
	Name:           "channels.name",
	Isactive:       "channels.isactive",
	Slug:           "channels.slug",
	Currency:       "channels.currency",
	Defaultcountry: "channels.defaultcountry",
}

// Generated where

var ChannelWhere = struct {
	ID             whereHelperstring
	Name           whereHelpernull_String
	Isactive       whereHelpernull_Bool
	Slug           whereHelpernull_String
	Currency       whereHelpernull_String
	Defaultcountry whereHelpernull_String
}{
	ID:             whereHelperstring{field: "\"channels\".\"id\""},
	Name:           whereHelpernull_String{field: "\"channels\".\"name\""},
	Isactive:       whereHelpernull_Bool{field: "\"channels\".\"isactive\""},
	Slug:           whereHelpernull_String{field: "\"channels\".\"slug\""},
	Currency:       whereHelpernull_String{field: "\"channels\".\"currency\""},
	Defaultcountry: whereHelpernull_String{field: "\"channels\".\"defaultcountry\""},
}

// ChannelRels is where relationship names are stored.
var ChannelRels = struct {
	ChannelidChannelshops                  string
	ChannelidCheckouts                     string
	ChannelidCollectionChannelListings     string
	ChannelidOrders                        string
	ChannelidProductChannelListings        string
	ChannelidProductVariantChannelListings string
	ChannelidSaleChannelListings           string
	ChannelidShippingMethodChannelListings string
	ChannelidShippingZoneChannels          string
	ChannelidVoucherChannelListings        string
}{
	ChannelidChannelshops:                  "ChannelidChannelshops",
	ChannelidCheckouts:                     "ChannelidCheckouts",
	ChannelidCollectionChannelListings:     "ChannelidCollectionChannelListings",
	ChannelidOrders:                        "ChannelidOrders",
	ChannelidProductChannelListings:        "ChannelidProductChannelListings",
	ChannelidProductVariantChannelListings: "ChannelidProductVariantChannelListings",
	ChannelidSaleChannelListings:           "ChannelidSaleChannelListings",
	ChannelidShippingMethodChannelListings: "ChannelidShippingMethodChannelListings",
	ChannelidShippingZoneChannels:          "ChannelidShippingZoneChannels",
	ChannelidVoucherChannelListings:        "ChannelidVoucherChannelListings",
}

// channelR is where relationships are stored.
type channelR struct {
	ChannelidChannelshops                  ChannelshopSlice                  `boil:"ChannelidChannelshops" json:"ChannelidChannelshops" toml:"ChannelidChannelshops" yaml:"ChannelidChannelshops"`
	ChannelidCheckouts                     CheckoutSlice                     `boil:"ChannelidCheckouts" json:"ChannelidCheckouts" toml:"ChannelidCheckouts" yaml:"ChannelidCheckouts"`
	ChannelidCollectionChannelListings     CollectionChannelListingSlice     `boil:"ChannelidCollectionChannelListings" json:"ChannelidCollectionChannelListings" toml:"ChannelidCollectionChannelListings" yaml:"ChannelidCollectionChannelListings"`
	ChannelidOrders                        OrderSlice                        `boil:"ChannelidOrders" json:"ChannelidOrders" toml:"ChannelidOrders" yaml:"ChannelidOrders"`
	ChannelidProductChannelListings        ProductChannelListingSlice        `boil:"ChannelidProductChannelListings" json:"ChannelidProductChannelListings" toml:"ChannelidProductChannelListings" yaml:"ChannelidProductChannelListings"`
	ChannelidProductVariantChannelListings ProductVariantChannelListingSlice `boil:"ChannelidProductVariantChannelListings" json:"ChannelidProductVariantChannelListings" toml:"ChannelidProductVariantChannelListings" yaml:"ChannelidProductVariantChannelListings"`
	ChannelidSaleChannelListings           SaleChannelListingSlice           `boil:"ChannelidSaleChannelListings" json:"ChannelidSaleChannelListings" toml:"ChannelidSaleChannelListings" yaml:"ChannelidSaleChannelListings"`
	ChannelidShippingMethodChannelListings ShippingMethodChannelListingSlice `boil:"ChannelidShippingMethodChannelListings" json:"ChannelidShippingMethodChannelListings" toml:"ChannelidShippingMethodChannelListings" yaml:"ChannelidShippingMethodChannelListings"`
	ChannelidShippingZoneChannels          ShippingZoneChannelSlice          `boil:"ChannelidShippingZoneChannels" json:"ChannelidShippingZoneChannels" toml:"ChannelidShippingZoneChannels" yaml:"ChannelidShippingZoneChannels"`
	ChannelidVoucherChannelListings        VoucherChannelListingSlice        `boil:"ChannelidVoucherChannelListings" json:"ChannelidVoucherChannelListings" toml:"ChannelidVoucherChannelListings" yaml:"ChannelidVoucherChannelListings"`
}

// NewStruct creates a new relationship struct
func (*channelR) NewStruct() *channelR {
	return &channelR{}
}

func (r *channelR) GetChannelidChannelshops() ChannelshopSlice {
	if r == nil {
		return nil
	}
	return r.ChannelidChannelshops
}

func (r *channelR) GetChannelidCheckouts() CheckoutSlice {
	if r == nil {
		return nil
	}
	return r.ChannelidCheckouts
}

func (r *channelR) GetChannelidCollectionChannelListings() CollectionChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.ChannelidCollectionChannelListings
}

func (r *channelR) GetChannelidOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.ChannelidOrders
}

func (r *channelR) GetChannelidProductChannelListings() ProductChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.ChannelidProductChannelListings
}

func (r *channelR) GetChannelidProductVariantChannelListings() ProductVariantChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.ChannelidProductVariantChannelListings
}

func (r *channelR) GetChannelidSaleChannelListings() SaleChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.ChannelidSaleChannelListings
}

func (r *channelR) GetChannelidShippingMethodChannelListings() ShippingMethodChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.ChannelidShippingMethodChannelListings
}

func (r *channelR) GetChannelidShippingZoneChannels() ShippingZoneChannelSlice {
	if r == nil {
		return nil
	}
	return r.ChannelidShippingZoneChannels
}

func (r *channelR) GetChannelidVoucherChannelListings() VoucherChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.ChannelidVoucherChannelListings
}

// channelL is where Load methods for each relationship are stored.
type channelL struct{}

var (
	channelAllColumns            = []string{"id", "name", "isactive", "slug", "currency", "defaultcountry"}
	channelColumnsWithoutDefault = []string{"id"}
	channelColumnsWithDefault    = []string{"name", "isactive", "slug", "currency", "defaultcountry"}
	channelPrimaryKeyColumns     = []string{"id"}
	channelGeneratedColumns      = []string{}
)

type (
	// ChannelSlice is an alias for a slice of pointers to Channel.
	// This should almost always be used instead of []Channel.
	ChannelSlice []*Channel
	// ChannelHook is the signature for custom Channel hook methods
	ChannelHook func(context.Context, boil.ContextExecutor, *Channel) error

	channelQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	channelType                 = reflect.TypeOf(&Channel{})
	channelMapping              = queries.MakeStructMapping(channelType)
	channelPrimaryKeyMapping, _ = queries.BindMapping(channelType, channelMapping, channelPrimaryKeyColumns)
	channelInsertCacheMut       sync.RWMutex
	channelInsertCache          = make(map[string]insertCache)
	channelUpdateCacheMut       sync.RWMutex
	channelUpdateCache          = make(map[string]updateCache)
	channelUpsertCacheMut       sync.RWMutex
	channelUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var channelAfterSelectHooks []ChannelHook

var channelBeforeInsertHooks []ChannelHook
var channelAfterInsertHooks []ChannelHook

var channelBeforeUpdateHooks []ChannelHook
var channelAfterUpdateHooks []ChannelHook

var channelBeforeDeleteHooks []ChannelHook
var channelAfterDeleteHooks []ChannelHook

var channelBeforeUpsertHooks []ChannelHook
var channelAfterUpsertHooks []ChannelHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Channel) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Channel) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Channel) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Channel) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Channel) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Channel) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Channel) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Channel) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Channel) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range channelAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChannelHook registers your hook function for all future operations.
func AddChannelHook(hookPoint boil.HookPoint, channelHook ChannelHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		channelAfterSelectHooks = append(channelAfterSelectHooks, channelHook)
	case boil.BeforeInsertHook:
		channelBeforeInsertHooks = append(channelBeforeInsertHooks, channelHook)
	case boil.AfterInsertHook:
		channelAfterInsertHooks = append(channelAfterInsertHooks, channelHook)
	case boil.BeforeUpdateHook:
		channelBeforeUpdateHooks = append(channelBeforeUpdateHooks, channelHook)
	case boil.AfterUpdateHook:
		channelAfterUpdateHooks = append(channelAfterUpdateHooks, channelHook)
	case boil.BeforeDeleteHook:
		channelBeforeDeleteHooks = append(channelBeforeDeleteHooks, channelHook)
	case boil.AfterDeleteHook:
		channelAfterDeleteHooks = append(channelAfterDeleteHooks, channelHook)
	case boil.BeforeUpsertHook:
		channelBeforeUpsertHooks = append(channelBeforeUpsertHooks, channelHook)
	case boil.AfterUpsertHook:
		channelAfterUpsertHooks = append(channelAfterUpsertHooks, channelHook)
	}
}

// One returns a single channel record from the query.
func (q channelQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Channel, error) {
	o := &Channel{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for channels")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Channel records from the query.
func (q channelQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChannelSlice, error) {
	var o []*Channel

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Channel slice")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Channel records in the query.
func (q channelQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count channels rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q channelQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if channels exists")
	}

	return count > 0, nil
}

// ChannelidChannelshops retrieves all the channelshop's Channelshops with an executor via channelid column.
func (o *Channel) ChannelidChannelshops(mods ...qm.QueryMod) channelshopQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"channelshops\".\"channelid\"=?", o.ID),
	)

	return Channelshops(queryMods...)
}

// ChannelidCheckouts retrieves all the checkout's Checkouts with an executor via channelid column.
func (o *Channel) ChannelidCheckouts(mods ...qm.QueryMod) checkoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkouts\".\"channelid\"=?", o.ID),
	)

	return Checkouts(queryMods...)
}

// ChannelidCollectionChannelListings retrieves all the collection_channel_listing's CollectionChannelListings with an executor via channelid column.
func (o *Channel) ChannelidCollectionChannelListings(mods ...qm.QueryMod) collectionChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"collection_channel_listings\".\"channelid\"=?", o.ID),
	)

	return CollectionChannelListings(queryMods...)
}

// ChannelidOrders retrieves all the order's Orders with an executor via channelid column.
func (o *Channel) ChannelidOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"channelid\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// ChannelidProductChannelListings retrieves all the product_channel_listing's ProductChannelListings with an executor via channelid column.
func (o *Channel) ChannelidProductChannelListings(mods ...qm.QueryMod) productChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_channel_listings\".\"channelid\"=?", o.ID),
	)

	return ProductChannelListings(queryMods...)
}

// ChannelidProductVariantChannelListings retrieves all the product_variant_channel_listing's ProductVariantChannelListings with an executor via channelid column.
func (o *Channel) ChannelidProductVariantChannelListings(mods ...qm.QueryMod) productVariantChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"product_variant_channel_listings\".\"channelid\"=?", o.ID),
	)

	return ProductVariantChannelListings(queryMods...)
}

// ChannelidSaleChannelListings retrieves all the sale_channel_listing's SaleChannelListings with an executor via channelid column.
func (o *Channel) ChannelidSaleChannelListings(mods ...qm.QueryMod) saleChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_channel_listings\".\"channelid\"=?", o.ID),
	)

	return SaleChannelListings(queryMods...)
}

// ChannelidShippingMethodChannelListings retrieves all the shipping_method_channel_listing's ShippingMethodChannelListings with an executor via channelid column.
func (o *Channel) ChannelidShippingMethodChannelListings(mods ...qm.QueryMod) shippingMethodChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_method_channel_listings\".\"channelid\"=?", o.ID),
	)

	return ShippingMethodChannelListings(queryMods...)
}

// ChannelidShippingZoneChannels retrieves all the shipping_zone_channel's ShippingZoneChannels with an executor via channelid column.
func (o *Channel) ChannelidShippingZoneChannels(mods ...qm.QueryMod) shippingZoneChannelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_zone_channels\".\"channelid\"=?", o.ID),
	)

	return ShippingZoneChannels(queryMods...)
}

// ChannelidVoucherChannelListings retrieves all the voucher_channel_listing's VoucherChannelListings with an executor via channelid column.
func (o *Channel) ChannelidVoucherChannelListings(mods ...qm.QueryMod) voucherChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"voucher_channel_listings\".\"channelid\"=?", o.ID),
	)

	return VoucherChannelListings(queryMods...)
}

// LoadChannelidChannelshops allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadChannelidChannelshops(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		var ok bool
		object, ok = maybeChannel.(*Channel)
		if !ok {
			object = new(Channel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannel))
			}
		}
	} else {
		s, ok := maybeChannel.(*[]*Channel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channelshops`),
		qm.WhereIn(`channelshops.channelid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load channelshops")
	}

	var resultSlice []*Channelshop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice channelshops")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on channelshops")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channelshops")
	}

	if len(channelshopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChannelidChannelshops = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &channelshopR{}
			}
			foreign.R.ChannelidChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Channelid) {
				local.R.ChannelidChannelshops = append(local.R.ChannelidChannelshops, foreign)
				if foreign.R == nil {
					foreign.R = &channelshopR{}
				}
				foreign.R.ChannelidChannel = local
				break
			}
		}
	}

	return nil
}

// LoadChannelidCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadChannelidCheckouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		var ok bool
		object, ok = maybeChannel.(*Channel)
		if !ok {
			object = new(Channel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannel))
			}
		}
	} else {
		s, ok := maybeChannel.(*[]*Channel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.channelid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkouts")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChannelidCheckouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutR{}
			}
			foreign.R.ChannelidChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Channelid) {
				local.R.ChannelidCheckouts = append(local.R.ChannelidCheckouts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.ChannelidChannel = local
				break
			}
		}
	}

	return nil
}

// LoadChannelidCollectionChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadChannelidCollectionChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		var ok bool
		object, ok = maybeChannel.(*Channel)
		if !ok {
			object = new(Channel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannel))
			}
		}
	} else {
		s, ok := maybeChannel.(*[]*Channel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collection_channel_listings`),
		qm.WhereIn(`collection_channel_listings.channelid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collection_channel_listings")
	}

	var resultSlice []*CollectionChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice collection_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collection_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collection_channel_listings")
	}

	if len(collectionChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChannelidCollectionChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collectionChannelListingR{}
			}
			foreign.R.ChannelidChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Channelid) {
				local.R.ChannelidCollectionChannelListings = append(local.R.ChannelidCollectionChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &collectionChannelListingR{}
				}
				foreign.R.ChannelidChannel = local
				break
			}
		}
	}

	return nil
}

// LoadChannelidOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadChannelidOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		var ok bool
		object, ok = maybeChannel.(*Channel)
		if !ok {
			object = new(Channel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannel))
			}
		}
	} else {
		s, ok := maybeChannel.(*[]*Channel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.channelid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChannelidOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.ChannelidChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Channelid) {
				local.R.ChannelidOrders = append(local.R.ChannelidOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.ChannelidChannel = local
				break
			}
		}
	}

	return nil
}

// LoadChannelidProductChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadChannelidProductChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		var ok bool
		object, ok = maybeChannel.(*Channel)
		if !ok {
			object = new(Channel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannel))
			}
		}
	} else {
		s, ok := maybeChannel.(*[]*Channel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_channel_listings`),
		qm.WhereIn(`product_channel_listings.channelid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_channel_listings")
	}

	var resultSlice []*ProductChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_channel_listings")
	}

	if len(productChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChannelidProductChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productChannelListingR{}
			}
			foreign.R.ChannelidChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Channelid) {
				local.R.ChannelidProductChannelListings = append(local.R.ChannelidProductChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &productChannelListingR{}
				}
				foreign.R.ChannelidChannel = local
				break
			}
		}
	}

	return nil
}

// LoadChannelidProductVariantChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadChannelidProductVariantChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		var ok bool
		object, ok = maybeChannel.(*Channel)
		if !ok {
			object = new(Channel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannel))
			}
		}
	} else {
		s, ok := maybeChannel.(*[]*Channel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variant_channel_listings`),
		qm.WhereIn(`product_variant_channel_listings.channelid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product_variant_channel_listings")
	}

	var resultSlice []*ProductVariantChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product_variant_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on product_variant_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variant_channel_listings")
	}

	if len(productVariantChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChannelidProductVariantChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &productVariantChannelListingR{}
			}
			foreign.R.ChannelidChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Channelid {
				local.R.ChannelidProductVariantChannelListings = append(local.R.ChannelidProductVariantChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &productVariantChannelListingR{}
				}
				foreign.R.ChannelidChannel = local
				break
			}
		}
	}

	return nil
}

// LoadChannelidSaleChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadChannelidSaleChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		var ok bool
		object, ok = maybeChannel.(*Channel)
		if !ok {
			object = new(Channel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannel))
			}
		}
	} else {
		s, ok := maybeChannel.(*[]*Channel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sale_channel_listings`),
		qm.WhereIn(`sale_channel_listings.channelid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_channel_listings")
	}

	var resultSlice []*SaleChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_channel_listings")
	}

	if len(saleChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChannelidSaleChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &saleChannelListingR{}
			}
			foreign.R.ChannelidChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Channelid {
				local.R.ChannelidSaleChannelListings = append(local.R.ChannelidSaleChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &saleChannelListingR{}
				}
				foreign.R.ChannelidChannel = local
				break
			}
		}
	}

	return nil
}

// LoadChannelidShippingMethodChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadChannelidShippingMethodChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		var ok bool
		object, ok = maybeChannel.(*Channel)
		if !ok {
			object = new(Channel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannel))
			}
		}
	} else {
		s, ok := maybeChannel.(*[]*Channel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_method_channel_listings`),
		qm.WhereIn(`shipping_method_channel_listings.channelid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_method_channel_listings")
	}

	var resultSlice []*ShippingMethodChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_method_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_method_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_method_channel_listings")
	}

	if len(shippingMethodChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChannelidShippingMethodChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodChannelListingR{}
			}
			foreign.R.ChannelidChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Channelid) {
				local.R.ChannelidShippingMethodChannelListings = append(local.R.ChannelidShippingMethodChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodChannelListingR{}
				}
				foreign.R.ChannelidChannel = local
				break
			}
		}
	}

	return nil
}

// LoadChannelidShippingZoneChannels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadChannelidShippingZoneChannels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		var ok bool
		object, ok = maybeChannel.(*Channel)
		if !ok {
			object = new(Channel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannel))
			}
		}
	} else {
		s, ok := maybeChannel.(*[]*Channel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_zone_channels`),
		qm.WhereIn(`shipping_zone_channels.channelid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_zone_channels")
	}

	var resultSlice []*ShippingZoneChannel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_zone_channels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_zone_channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_zone_channels")
	}

	if len(shippingZoneChannelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChannelidShippingZoneChannels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingZoneChannelR{}
			}
			foreign.R.ChannelidChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Channelid) {
				local.R.ChannelidShippingZoneChannels = append(local.R.ChannelidShippingZoneChannels, foreign)
				if foreign.R == nil {
					foreign.R = &shippingZoneChannelR{}
				}
				foreign.R.ChannelidChannel = local
				break
			}
		}
	}

	return nil
}

// LoadChannelidVoucherChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (channelL) LoadChannelidVoucherChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChannel interface{}, mods queries.Applicator) error {
	var slice []*Channel
	var object *Channel

	if singular {
		var ok bool
		object, ok = maybeChannel.(*Channel)
		if !ok {
			object = new(Channel)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeChannel))
			}
		}
	} else {
		s, ok := maybeChannel.(*[]*Channel)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeChannel)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeChannel))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &channelR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &channelR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`voucher_channel_listings`),
		qm.WhereIn(`voucher_channel_listings.channelid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load voucher_channel_listings")
	}

	var resultSlice []*VoucherChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice voucher_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on voucher_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for voucher_channel_listings")
	}

	if len(voucherChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChannelidVoucherChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &voucherChannelListingR{}
			}
			foreign.R.ChannelidChannel = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Channelid {
				local.R.ChannelidVoucherChannelListings = append(local.R.ChannelidVoucherChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &voucherChannelListingR{}
				}
				foreign.R.ChannelidChannel = local
				break
			}
		}
	}

	return nil
}

// AddChannelidChannelshops adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ChannelidChannelshops.
// Sets related.R.ChannelidChannel appropriately.
func (o *Channel) AddChannelidChannelshops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Channelshop) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Channelid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"channelshops\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
				strmangle.WhereClause("\"", "\"", 2, channelshopPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Channelid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ChannelidChannelshops: related,
		}
	} else {
		o.R.ChannelidChannelshops = append(o.R.ChannelidChannelshops, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &channelshopR{
				ChannelidChannel: o,
			}
		} else {
			rel.R.ChannelidChannel = o
		}
	}
	return nil
}

// SetChannelidChannelshops removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChannelidChannel's ChannelidChannelshops accordingly.
// Replaces o.R.ChannelidChannelshops with related.
// Sets related.R.ChannelidChannel's ChannelidChannelshops accordingly.
func (o *Channel) SetChannelidChannelshops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Channelshop) error {
	query := "update \"channelshops\" set \"channelid\" = null where \"channelid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChannelidChannelshops {
			queries.SetScanner(&rel.Channelid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChannelidChannel = nil
		}
		o.R.ChannelidChannelshops = nil
	}

	return o.AddChannelidChannelshops(ctx, exec, insert, related...)
}

// RemoveChannelidChannelshops relationships from objects passed in.
// Removes related items from R.ChannelidChannelshops (uses pointer comparison, removal does not keep order)
// Sets related.R.ChannelidChannel.
func (o *Channel) RemoveChannelidChannelshops(ctx context.Context, exec boil.ContextExecutor, related ...*Channelshop) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Channelid, nil)
		if rel.R != nil {
			rel.R.ChannelidChannel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChannelidChannelshops {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChannelidChannelshops)
			if ln > 1 && i < ln-1 {
				o.R.ChannelidChannelshops[i] = o.R.ChannelidChannelshops[ln-1]
			}
			o.R.ChannelidChannelshops = o.R.ChannelidChannelshops[:ln-1]
			break
		}
	}

	return nil
}

// AddChannelidCheckouts adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ChannelidCheckouts.
// Sets related.R.ChannelidChannel appropriately.
func (o *Channel) AddChannelidCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Channelid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Channelid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ChannelidCheckouts: related,
		}
	} else {
		o.R.ChannelidCheckouts = append(o.R.ChannelidCheckouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutR{
				ChannelidChannel: o,
			}
		} else {
			rel.R.ChannelidChannel = o
		}
	}
	return nil
}

// SetChannelidCheckouts removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChannelidChannel's ChannelidCheckouts accordingly.
// Replaces o.R.ChannelidCheckouts with related.
// Sets related.R.ChannelidChannel's ChannelidCheckouts accordingly.
func (o *Channel) SetChannelidCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	query := "update \"checkouts\" set \"channelid\" = null where \"channelid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChannelidCheckouts {
			queries.SetScanner(&rel.Channelid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChannelidChannel = nil
		}
		o.R.ChannelidCheckouts = nil
	}

	return o.AddChannelidCheckouts(ctx, exec, insert, related...)
}

// RemoveChannelidCheckouts relationships from objects passed in.
// Removes related items from R.ChannelidCheckouts (uses pointer comparison, removal does not keep order)
// Sets related.R.ChannelidChannel.
func (o *Channel) RemoveChannelidCheckouts(ctx context.Context, exec boil.ContextExecutor, related ...*Checkout) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Channelid, nil)
		if rel.R != nil {
			rel.R.ChannelidChannel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChannelidCheckouts {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChannelidCheckouts)
			if ln > 1 && i < ln-1 {
				o.R.ChannelidCheckouts[i] = o.R.ChannelidCheckouts[ln-1]
			}
			o.R.ChannelidCheckouts = o.R.ChannelidCheckouts[:ln-1]
			break
		}
	}

	return nil
}

// AddChannelidCollectionChannelListings adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ChannelidCollectionChannelListings.
// Sets related.R.ChannelidChannel appropriately.
func (o *Channel) AddChannelidCollectionChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CollectionChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Channelid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"collection_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
				strmangle.WhereClause("\"", "\"", 2, collectionChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Channelid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ChannelidCollectionChannelListings: related,
		}
	} else {
		o.R.ChannelidCollectionChannelListings = append(o.R.ChannelidCollectionChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collectionChannelListingR{
				ChannelidChannel: o,
			}
		} else {
			rel.R.ChannelidChannel = o
		}
	}
	return nil
}

// SetChannelidCollectionChannelListings removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChannelidChannel's ChannelidCollectionChannelListings accordingly.
// Replaces o.R.ChannelidCollectionChannelListings with related.
// Sets related.R.ChannelidChannel's ChannelidCollectionChannelListings accordingly.
func (o *Channel) SetChannelidCollectionChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CollectionChannelListing) error {
	query := "update \"collection_channel_listings\" set \"channelid\" = null where \"channelid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChannelidCollectionChannelListings {
			queries.SetScanner(&rel.Channelid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChannelidChannel = nil
		}
		o.R.ChannelidCollectionChannelListings = nil
	}

	return o.AddChannelidCollectionChannelListings(ctx, exec, insert, related...)
}

// RemoveChannelidCollectionChannelListings relationships from objects passed in.
// Removes related items from R.ChannelidCollectionChannelListings (uses pointer comparison, removal does not keep order)
// Sets related.R.ChannelidChannel.
func (o *Channel) RemoveChannelidCollectionChannelListings(ctx context.Context, exec boil.ContextExecutor, related ...*CollectionChannelListing) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Channelid, nil)
		if rel.R != nil {
			rel.R.ChannelidChannel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChannelidCollectionChannelListings {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChannelidCollectionChannelListings)
			if ln > 1 && i < ln-1 {
				o.R.ChannelidCollectionChannelListings[i] = o.R.ChannelidCollectionChannelListings[ln-1]
			}
			o.R.ChannelidCollectionChannelListings = o.R.ChannelidCollectionChannelListings[:ln-1]
			break
		}
	}

	return nil
}

// AddChannelidOrders adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ChannelidOrders.
// Sets related.R.ChannelidChannel appropriately.
func (o *Channel) AddChannelidOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Channelid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Channelid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ChannelidOrders: related,
		}
	} else {
		o.R.ChannelidOrders = append(o.R.ChannelidOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				ChannelidChannel: o,
			}
		} else {
			rel.R.ChannelidChannel = o
		}
	}
	return nil
}

// SetChannelidOrders removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChannelidChannel's ChannelidOrders accordingly.
// Replaces o.R.ChannelidOrders with related.
// Sets related.R.ChannelidChannel's ChannelidOrders accordingly.
func (o *Channel) SetChannelidOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"channelid\" = null where \"channelid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChannelidOrders {
			queries.SetScanner(&rel.Channelid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChannelidChannel = nil
		}
		o.R.ChannelidOrders = nil
	}

	return o.AddChannelidOrders(ctx, exec, insert, related...)
}

// RemoveChannelidOrders relationships from objects passed in.
// Removes related items from R.ChannelidOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.ChannelidChannel.
func (o *Channel) RemoveChannelidOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Channelid, nil)
		if rel.R != nil {
			rel.R.ChannelidChannel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChannelidOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChannelidOrders)
			if ln > 1 && i < ln-1 {
				o.R.ChannelidOrders[i] = o.R.ChannelidOrders[ln-1]
			}
			o.R.ChannelidOrders = o.R.ChannelidOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddChannelidProductChannelListings adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ChannelidProductChannelListings.
// Sets related.R.ChannelidChannel appropriately.
func (o *Channel) AddChannelidProductChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Channelid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
				strmangle.WhereClause("\"", "\"", 2, productChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Channelid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ChannelidProductChannelListings: related,
		}
	} else {
		o.R.ChannelidProductChannelListings = append(o.R.ChannelidProductChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productChannelListingR{
				ChannelidChannel: o,
			}
		} else {
			rel.R.ChannelidChannel = o
		}
	}
	return nil
}

// SetChannelidProductChannelListings removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChannelidChannel's ChannelidProductChannelListings accordingly.
// Replaces o.R.ChannelidProductChannelListings with related.
// Sets related.R.ChannelidChannel's ChannelidProductChannelListings accordingly.
func (o *Channel) SetChannelidProductChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductChannelListing) error {
	query := "update \"product_channel_listings\" set \"channelid\" = null where \"channelid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChannelidProductChannelListings {
			queries.SetScanner(&rel.Channelid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChannelidChannel = nil
		}
		o.R.ChannelidProductChannelListings = nil
	}

	return o.AddChannelidProductChannelListings(ctx, exec, insert, related...)
}

// RemoveChannelidProductChannelListings relationships from objects passed in.
// Removes related items from R.ChannelidProductChannelListings (uses pointer comparison, removal does not keep order)
// Sets related.R.ChannelidChannel.
func (o *Channel) RemoveChannelidProductChannelListings(ctx context.Context, exec boil.ContextExecutor, related ...*ProductChannelListing) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Channelid, nil)
		if rel.R != nil {
			rel.R.ChannelidChannel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChannelidProductChannelListings {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChannelidProductChannelListings)
			if ln > 1 && i < ln-1 {
				o.R.ChannelidProductChannelListings[i] = o.R.ChannelidProductChannelListings[ln-1]
			}
			o.R.ChannelidProductChannelListings = o.R.ChannelidProductChannelListings[:ln-1]
			break
		}
	}

	return nil
}

// AddChannelidProductVariantChannelListings adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ChannelidProductVariantChannelListings.
// Sets related.R.ChannelidChannel appropriately.
func (o *Channel) AddChannelidProductVariantChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ProductVariantChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Channelid = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"product_variant_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
				strmangle.WhereClause("\"", "\"", 2, productVariantChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Channelid = o.ID
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ChannelidProductVariantChannelListings: related,
		}
	} else {
		o.R.ChannelidProductVariantChannelListings = append(o.R.ChannelidProductVariantChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productVariantChannelListingR{
				ChannelidChannel: o,
			}
		} else {
			rel.R.ChannelidChannel = o
		}
	}
	return nil
}

// AddChannelidSaleChannelListings adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ChannelidSaleChannelListings.
// Sets related.R.ChannelidChannel appropriately.
func (o *Channel) AddChannelidSaleChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Channelid = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
				strmangle.WhereClause("\"", "\"", 2, saleChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Channelid = o.ID
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ChannelidSaleChannelListings: related,
		}
	} else {
		o.R.ChannelidSaleChannelListings = append(o.R.ChannelidSaleChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &saleChannelListingR{
				ChannelidChannel: o,
			}
		} else {
			rel.R.ChannelidChannel = o
		}
	}
	return nil
}

// AddChannelidShippingMethodChannelListings adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ChannelidShippingMethodChannelListings.
// Sets related.R.ChannelidChannel appropriately.
func (o *Channel) AddChannelidShippingMethodChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Channelid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_method_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Channelid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ChannelidShippingMethodChannelListings: related,
		}
	} else {
		o.R.ChannelidShippingMethodChannelListings = append(o.R.ChannelidShippingMethodChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodChannelListingR{
				ChannelidChannel: o,
			}
		} else {
			rel.R.ChannelidChannel = o
		}
	}
	return nil
}

// SetChannelidShippingMethodChannelListings removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChannelidChannel's ChannelidShippingMethodChannelListings accordingly.
// Replaces o.R.ChannelidShippingMethodChannelListings with related.
// Sets related.R.ChannelidChannel's ChannelidShippingMethodChannelListings accordingly.
func (o *Channel) SetChannelidShippingMethodChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodChannelListing) error {
	query := "update \"shipping_method_channel_listings\" set \"channelid\" = null where \"channelid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChannelidShippingMethodChannelListings {
			queries.SetScanner(&rel.Channelid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChannelidChannel = nil
		}
		o.R.ChannelidShippingMethodChannelListings = nil
	}

	return o.AddChannelidShippingMethodChannelListings(ctx, exec, insert, related...)
}

// RemoveChannelidShippingMethodChannelListings relationships from objects passed in.
// Removes related items from R.ChannelidShippingMethodChannelListings (uses pointer comparison, removal does not keep order)
// Sets related.R.ChannelidChannel.
func (o *Channel) RemoveChannelidShippingMethodChannelListings(ctx context.Context, exec boil.ContextExecutor, related ...*ShippingMethodChannelListing) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Channelid, nil)
		if rel.R != nil {
			rel.R.ChannelidChannel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChannelidShippingMethodChannelListings {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChannelidShippingMethodChannelListings)
			if ln > 1 && i < ln-1 {
				o.R.ChannelidShippingMethodChannelListings[i] = o.R.ChannelidShippingMethodChannelListings[ln-1]
			}
			o.R.ChannelidShippingMethodChannelListings = o.R.ChannelidShippingMethodChannelListings[:ln-1]
			break
		}
	}

	return nil
}

// AddChannelidShippingZoneChannels adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ChannelidShippingZoneChannels.
// Sets related.R.ChannelidChannel appropriately.
func (o *Channel) AddChannelidShippingZoneChannels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingZoneChannel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Channelid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_zone_channels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
				strmangle.WhereClause("\"", "\"", 2, shippingZoneChannelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Channelid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ChannelidShippingZoneChannels: related,
		}
	} else {
		o.R.ChannelidShippingZoneChannels = append(o.R.ChannelidShippingZoneChannels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingZoneChannelR{
				ChannelidChannel: o,
			}
		} else {
			rel.R.ChannelidChannel = o
		}
	}
	return nil
}

// SetChannelidShippingZoneChannels removes all previously related items of the
// channel replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChannelidChannel's ChannelidShippingZoneChannels accordingly.
// Replaces o.R.ChannelidShippingZoneChannels with related.
// Sets related.R.ChannelidChannel's ChannelidShippingZoneChannels accordingly.
func (o *Channel) SetChannelidShippingZoneChannels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingZoneChannel) error {
	query := "update \"shipping_zone_channels\" set \"channelid\" = null where \"channelid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ChannelidShippingZoneChannels {
			queries.SetScanner(&rel.Channelid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ChannelidChannel = nil
		}
		o.R.ChannelidShippingZoneChannels = nil
	}

	return o.AddChannelidShippingZoneChannels(ctx, exec, insert, related...)
}

// RemoveChannelidShippingZoneChannels relationships from objects passed in.
// Removes related items from R.ChannelidShippingZoneChannels (uses pointer comparison, removal does not keep order)
// Sets related.R.ChannelidChannel.
func (o *Channel) RemoveChannelidShippingZoneChannels(ctx context.Context, exec boil.ContextExecutor, related ...*ShippingZoneChannel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Channelid, nil)
		if rel.R != nil {
			rel.R.ChannelidChannel = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("channelid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChannelidShippingZoneChannels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChannelidShippingZoneChannels)
			if ln > 1 && i < ln-1 {
				o.R.ChannelidShippingZoneChannels[i] = o.R.ChannelidShippingZoneChannels[ln-1]
			}
			o.R.ChannelidShippingZoneChannels = o.R.ChannelidShippingZoneChannels[:ln-1]
			break
		}
	}

	return nil
}

// AddChannelidVoucherChannelListings adds the given related objects to the existing relationships
// of the channel, optionally inserting them as new records.
// Appends related to o.R.ChannelidVoucherChannelListings.
// Sets related.R.ChannelidChannel appropriately.
func (o *Channel) AddChannelidVoucherChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VoucherChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Channelid = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"voucher_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
				strmangle.WhereClause("\"", "\"", 2, voucherChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Channelid = o.ID
		}
	}

	if o.R == nil {
		o.R = &channelR{
			ChannelidVoucherChannelListings: related,
		}
	} else {
		o.R.ChannelidVoucherChannelListings = append(o.R.ChannelidVoucherChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &voucherChannelListingR{
				ChannelidChannel: o,
			}
		} else {
			rel.R.ChannelidChannel = o
		}
	}
	return nil
}

// Channels retrieves all the records using an executor.
func Channels(mods ...qm.QueryMod) channelQuery {
	mods = append(mods, qm.From("\"channels\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"channels\".*"})
	}

	return channelQuery{q}
}

// FindChannel retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChannel(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Channel, error) {
	channelObj := &Channel{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"channels\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, channelObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from channels")
	}

	if err = channelObj.doAfterSelectHooks(ctx, exec); err != nil {
		return channelObj, err
	}

	return channelObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Channel) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no channels provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(channelColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	channelInsertCacheMut.RLock()
	cache, cached := channelInsertCache[key]
	channelInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			channelAllColumns,
			channelColumnsWithDefault,
			channelColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(channelType, channelMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(channelType, channelMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"channels\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"channels\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into channels")
	}

	if !cached {
		channelInsertCacheMut.Lock()
		channelInsertCache[key] = cache
		channelInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Channel.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Channel) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	channelUpdateCacheMut.RLock()
	cache, cached := channelUpdateCache[key]
	channelUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			channelAllColumns,
			channelPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update channels, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"channels\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, channelPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(channelType, channelMapping, append(wl, channelPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update channels row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for channels")
	}

	if !cached {
		channelUpdateCacheMut.Lock()
		channelUpdateCache[key] = cache
		channelUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q channelQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for channels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for channels")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChannelSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"channels\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, channelPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in channel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all channel")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Channel) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no channels provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(channelColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	channelUpsertCacheMut.RLock()
	cache, cached := channelUpsertCache[key]
	channelUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			channelAllColumns,
			channelColumnsWithDefault,
			channelColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			channelAllColumns,
			channelPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert channels, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(channelPrimaryKeyColumns))
			copy(conflict, channelPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"channels\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(channelType, channelMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(channelType, channelMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert channels")
	}

	if !cached {
		channelUpsertCacheMut.Lock()
		channelUpsertCache[key] = cache
		channelUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Channel record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Channel) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Channel provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), channelPrimaryKeyMapping)
	sql := "DELETE FROM \"channels\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from channels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for channels")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q channelQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no channelQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from channels")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for channels")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChannelSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(channelBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"channels\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, channelPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from channel slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for channels")
	}

	if len(channelAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Channel) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChannel(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChannelSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChannelSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), channelPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"channels\".* FROM \"channels\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, channelPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChannelSlice")
	}

	*o = slice

	return nil
}

// ChannelExists checks if the Channel row exists.
func ChannelExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"channels\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if channels exists")
	}

	return exists, nil
}

// Exists checks if the Channel row exists.
func (o *Channel) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ChannelExists(ctx, exec, o.ID)
}
