// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AttributeValue is an object representing the database table.
type AttributeValue struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Value       null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	Slug        null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	Fileurl     null.String `boil:"fileurl" json:"fileurl,omitempty" toml:"fileurl" yaml:"fileurl,omitempty"`
	Contenttype null.String `boil:"contenttype" json:"contenttype,omitempty" toml:"contenttype" yaml:"contenttype,omitempty"`
	Attributeid null.String `boil:"attributeid" json:"attributeid,omitempty" toml:"attributeid" yaml:"attributeid,omitempty"`
	Richtext    null.String `boil:"richtext" json:"richtext,omitempty" toml:"richtext" yaml:"richtext,omitempty"`
	Boolean     null.Bool   `boil:"boolean" json:"boolean,omitempty" toml:"boolean" yaml:"boolean,omitempty"`
	Datetime    null.Time   `boil:"datetime" json:"datetime,omitempty" toml:"datetime" yaml:"datetime,omitempty"`
	Sortorder   null.Int    `boil:"sortorder" json:"sortorder,omitempty" toml:"sortorder" yaml:"sortorder,omitempty"`

	R *attributeValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributeValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributeValueColumns = struct {
	ID          string
	Name        string
	Value       string
	Slug        string
	Fileurl     string
	Contenttype string
	Attributeid string
	Richtext    string
	Boolean     string
	Datetime    string
	Sortorder   string
}{
	ID:          "id",
	Name:        "name",
	Value:       "value",
	Slug:        "slug",
	Fileurl:     "fileurl",
	Contenttype: "contenttype",
	Attributeid: "attributeid",
	Richtext:    "richtext",
	Boolean:     "boolean",
	Datetime:    "datetime",
	Sortorder:   "sortorder",
}

var AttributeValueTableColumns = struct {
	ID          string
	Name        string
	Value       string
	Slug        string
	Fileurl     string
	Contenttype string
	Attributeid string
	Richtext    string
	Boolean     string
	Datetime    string
	Sortorder   string
}{
	ID:          "attribute_values.id",
	Name:        "attribute_values.name",
	Value:       "attribute_values.value",
	Slug:        "attribute_values.slug",
	Fileurl:     "attribute_values.fileurl",
	Contenttype: "attribute_values.contenttype",
	Attributeid: "attribute_values.attributeid",
	Richtext:    "attribute_values.richtext",
	Boolean:     "attribute_values.boolean",
	Datetime:    "attribute_values.datetime",
	Sortorder:   "attribute_values.sortorder",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AttributeValueWhere = struct {
	ID          whereHelperstring
	Name        whereHelpernull_String
	Value       whereHelpernull_String
	Slug        whereHelpernull_String
	Fileurl     whereHelpernull_String
	Contenttype whereHelpernull_String
	Attributeid whereHelpernull_String
	Richtext    whereHelpernull_String
	Boolean     whereHelpernull_Bool
	Datetime    whereHelpernull_Time
	Sortorder   whereHelpernull_Int
}{
	ID:          whereHelperstring{field: "\"attribute_values\".\"id\""},
	Name:        whereHelpernull_String{field: "\"attribute_values\".\"name\""},
	Value:       whereHelpernull_String{field: "\"attribute_values\".\"value\""},
	Slug:        whereHelpernull_String{field: "\"attribute_values\".\"slug\""},
	Fileurl:     whereHelpernull_String{field: "\"attribute_values\".\"fileurl\""},
	Contenttype: whereHelpernull_String{field: "\"attribute_values\".\"contenttype\""},
	Attributeid: whereHelpernull_String{field: "\"attribute_values\".\"attributeid\""},
	Richtext:    whereHelpernull_String{field: "\"attribute_values\".\"richtext\""},
	Boolean:     whereHelpernull_Bool{field: "\"attribute_values\".\"boolean\""},
	Datetime:    whereHelpernull_Time{field: "\"attribute_values\".\"datetime\""},
	Sortorder:   whereHelpernull_Int{field: "\"attribute_values\".\"sortorder\""},
}

// AttributeValueRels is where relationship names are stored.
var AttributeValueRels = struct {
	AttributeidAttribute                  string
	ValueidAssignedPageAttributeValues    string
	ValueidAssignedProductAttributeValues string
	ValueidAssignedVariantAttributeValues string
}{
	AttributeidAttribute:                  "AttributeidAttribute",
	ValueidAssignedPageAttributeValues:    "ValueidAssignedPageAttributeValues",
	ValueidAssignedProductAttributeValues: "ValueidAssignedProductAttributeValues",
	ValueidAssignedVariantAttributeValues: "ValueidAssignedVariantAttributeValues",
}

// attributeValueR is where relationships are stored.
type attributeValueR struct {
	AttributeidAttribute                  *Attribute                         `boil:"AttributeidAttribute" json:"AttributeidAttribute" toml:"AttributeidAttribute" yaml:"AttributeidAttribute"`
	ValueidAssignedPageAttributeValues    AssignedPageAttributeValueSlice    `boil:"ValueidAssignedPageAttributeValues" json:"ValueidAssignedPageAttributeValues" toml:"ValueidAssignedPageAttributeValues" yaml:"ValueidAssignedPageAttributeValues"`
	ValueidAssignedProductAttributeValues AssignedProductAttributeValueSlice `boil:"ValueidAssignedProductAttributeValues" json:"ValueidAssignedProductAttributeValues" toml:"ValueidAssignedProductAttributeValues" yaml:"ValueidAssignedProductAttributeValues"`
	ValueidAssignedVariantAttributeValues AssignedVariantAttributeValueSlice `boil:"ValueidAssignedVariantAttributeValues" json:"ValueidAssignedVariantAttributeValues" toml:"ValueidAssignedVariantAttributeValues" yaml:"ValueidAssignedVariantAttributeValues"`
}

// NewStruct creates a new relationship struct
func (*attributeValueR) NewStruct() *attributeValueR {
	return &attributeValueR{}
}

func (r *attributeValueR) GetAttributeidAttribute() *Attribute {
	if r == nil {
		return nil
	}
	return r.AttributeidAttribute
}

func (r *attributeValueR) GetValueidAssignedPageAttributeValues() AssignedPageAttributeValueSlice {
	if r == nil {
		return nil
	}
	return r.ValueidAssignedPageAttributeValues
}

func (r *attributeValueR) GetValueidAssignedProductAttributeValues() AssignedProductAttributeValueSlice {
	if r == nil {
		return nil
	}
	return r.ValueidAssignedProductAttributeValues
}

func (r *attributeValueR) GetValueidAssignedVariantAttributeValues() AssignedVariantAttributeValueSlice {
	if r == nil {
		return nil
	}
	return r.ValueidAssignedVariantAttributeValues
}

// attributeValueL is where Load methods for each relationship are stored.
type attributeValueL struct{}

var (
	attributeValueAllColumns            = []string{"id", "name", "value", "slug", "fileurl", "contenttype", "attributeid", "richtext", "boolean", "datetime", "sortorder"}
	attributeValueColumnsWithoutDefault = []string{"id"}
	attributeValueColumnsWithDefault    = []string{"name", "value", "slug", "fileurl", "contenttype", "attributeid", "richtext", "boolean", "datetime", "sortorder"}
	attributeValuePrimaryKeyColumns     = []string{"id"}
	attributeValueGeneratedColumns      = []string{}
)

type (
	// AttributeValueSlice is an alias for a slice of pointers to AttributeValue.
	// This should almost always be used instead of []AttributeValue.
	AttributeValueSlice []*AttributeValue
	// AttributeValueHook is the signature for custom AttributeValue hook methods
	AttributeValueHook func(context.Context, boil.ContextExecutor, *AttributeValue) error

	attributeValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributeValueType                 = reflect.TypeOf(&AttributeValue{})
	attributeValueMapping              = queries.MakeStructMapping(attributeValueType)
	attributeValuePrimaryKeyMapping, _ = queries.BindMapping(attributeValueType, attributeValueMapping, attributeValuePrimaryKeyColumns)
	attributeValueInsertCacheMut       sync.RWMutex
	attributeValueInsertCache          = make(map[string]insertCache)
	attributeValueUpdateCacheMut       sync.RWMutex
	attributeValueUpdateCache          = make(map[string]updateCache)
	attributeValueUpsertCacheMut       sync.RWMutex
	attributeValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var attributeValueAfterSelectHooks []AttributeValueHook

var attributeValueBeforeInsertHooks []AttributeValueHook
var attributeValueAfterInsertHooks []AttributeValueHook

var attributeValueBeforeUpdateHooks []AttributeValueHook
var attributeValueAfterUpdateHooks []AttributeValueHook

var attributeValueBeforeDeleteHooks []AttributeValueHook
var attributeValueAfterDeleteHooks []AttributeValueHook

var attributeValueBeforeUpsertHooks []AttributeValueHook
var attributeValueAfterUpsertHooks []AttributeValueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AttributeValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AttributeValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AttributeValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AttributeValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AttributeValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AttributeValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AttributeValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AttributeValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AttributeValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range attributeValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAttributeValueHook registers your hook function for all future operations.
func AddAttributeValueHook(hookPoint boil.HookPoint, attributeValueHook AttributeValueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		attributeValueAfterSelectHooks = append(attributeValueAfterSelectHooks, attributeValueHook)
	case boil.BeforeInsertHook:
		attributeValueBeforeInsertHooks = append(attributeValueBeforeInsertHooks, attributeValueHook)
	case boil.AfterInsertHook:
		attributeValueAfterInsertHooks = append(attributeValueAfterInsertHooks, attributeValueHook)
	case boil.BeforeUpdateHook:
		attributeValueBeforeUpdateHooks = append(attributeValueBeforeUpdateHooks, attributeValueHook)
	case boil.AfterUpdateHook:
		attributeValueAfterUpdateHooks = append(attributeValueAfterUpdateHooks, attributeValueHook)
	case boil.BeforeDeleteHook:
		attributeValueBeforeDeleteHooks = append(attributeValueBeforeDeleteHooks, attributeValueHook)
	case boil.AfterDeleteHook:
		attributeValueAfterDeleteHooks = append(attributeValueAfterDeleteHooks, attributeValueHook)
	case boil.BeforeUpsertHook:
		attributeValueBeforeUpsertHooks = append(attributeValueBeforeUpsertHooks, attributeValueHook)
	case boil.AfterUpsertHook:
		attributeValueAfterUpsertHooks = append(attributeValueAfterUpsertHooks, attributeValueHook)
	}
}

// One returns a single attributeValue record from the query.
func (q attributeValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AttributeValue, error) {
	o := &AttributeValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for attribute_values")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AttributeValue records from the query.
func (q attributeValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (AttributeValueSlice, error) {
	var o []*AttributeValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AttributeValue slice")
	}

	if len(attributeValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AttributeValue records in the query.
func (q attributeValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count attribute_values rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attributeValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if attribute_values exists")
	}

	return count > 0, nil
}

// AttributeidAttribute pointed to by the foreign key.
func (o *AttributeValue) AttributeidAttribute(mods ...qm.QueryMod) attributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Attributeid),
	}

	queryMods = append(queryMods, mods...)

	return Attributes(queryMods...)
}

// ValueidAssignedPageAttributeValues retrieves all the assigned_page_attribute_value's AssignedPageAttributeValues with an executor via valueid column.
func (o *AttributeValue) ValueidAssignedPageAttributeValues(mods ...qm.QueryMod) assignedPageAttributeValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_page_attribute_values\".\"valueid\"=?", o.ID),
	)

	return AssignedPageAttributeValues(queryMods...)
}

// ValueidAssignedProductAttributeValues retrieves all the assigned_product_attribute_value's AssignedProductAttributeValues with an executor via valueid column.
func (o *AttributeValue) ValueidAssignedProductAttributeValues(mods ...qm.QueryMod) assignedProductAttributeValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_product_attribute_values\".\"valueid\"=?", o.ID),
	)

	return AssignedProductAttributeValues(queryMods...)
}

// ValueidAssignedVariantAttributeValues retrieves all the assigned_variant_attribute_value's AssignedVariantAttributeValues with an executor via valueid column.
func (o *AttributeValue) ValueidAssignedVariantAttributeValues(mods ...qm.QueryMod) assignedVariantAttributeValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"assigned_variant_attribute_values\".\"valueid\"=?", o.ID),
	)

	return AssignedVariantAttributeValues(queryMods...)
}

// LoadAttributeidAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (attributeValueL) LoadAttributeidAttribute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AttributeValue
	var object *AttributeValue

	if singular {
		var ok bool
		object, ok = maybeAttributeValue.(*AttributeValue)
		if !ok {
			object = new(AttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeValue))
			}
		}
	} else {
		s, ok := maybeAttributeValue.(*[]*AttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeValueR{}
		}
		if !queries.IsNil(object.Attributeid) {
			args = append(args, object.Attributeid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Attributeid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Attributeid) {
				args = append(args, obj.Attributeid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attributes`),
		qm.WhereIn(`attributes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Attribute")
	}

	var resultSlice []*Attribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Attribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attributes")
	}

	if len(attributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AttributeidAttribute = foreign
		if foreign.R == nil {
			foreign.R = &attributeR{}
		}
		foreign.R.AttributeidAttributeValues = append(foreign.R.AttributeidAttributeValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Attributeid, foreign.ID) {
				local.R.AttributeidAttribute = foreign
				if foreign.R == nil {
					foreign.R = &attributeR{}
				}
				foreign.R.AttributeidAttributeValues = append(foreign.R.AttributeidAttributeValues, local)
				break
			}
		}
	}

	return nil
}

// LoadValueidAssignedPageAttributeValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeValueL) LoadValueidAssignedPageAttributeValues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AttributeValue
	var object *AttributeValue

	if singular {
		var ok bool
		object, ok = maybeAttributeValue.(*AttributeValue)
		if !ok {
			object = new(AttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeValue))
			}
		}
	} else {
		s, ok := maybeAttributeValue.(*[]*AttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeValueR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_page_attribute_values`),
		qm.WhereIn(`assigned_page_attribute_values.valueid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_page_attribute_values")
	}

	var resultSlice []*AssignedPageAttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_page_attribute_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_page_attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_page_attribute_values")
	}

	if len(assignedPageAttributeValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ValueidAssignedPageAttributeValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedPageAttributeValueR{}
			}
			foreign.R.ValueidAttributeValue = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Valueid) {
				local.R.ValueidAssignedPageAttributeValues = append(local.R.ValueidAssignedPageAttributeValues, foreign)
				if foreign.R == nil {
					foreign.R = &assignedPageAttributeValueR{}
				}
				foreign.R.ValueidAttributeValue = local
				break
			}
		}
	}

	return nil
}

// LoadValueidAssignedProductAttributeValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeValueL) LoadValueidAssignedProductAttributeValues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AttributeValue
	var object *AttributeValue

	if singular {
		var ok bool
		object, ok = maybeAttributeValue.(*AttributeValue)
		if !ok {
			object = new(AttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeValue))
			}
		}
	} else {
		s, ok := maybeAttributeValue.(*[]*AttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeValueR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_product_attribute_values`),
		qm.WhereIn(`assigned_product_attribute_values.valueid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_product_attribute_values")
	}

	var resultSlice []*AssignedProductAttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_product_attribute_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_product_attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_product_attribute_values")
	}

	if len(assignedProductAttributeValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ValueidAssignedProductAttributeValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedProductAttributeValueR{}
			}
			foreign.R.ValueidAttributeValue = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Valueid) {
				local.R.ValueidAssignedProductAttributeValues = append(local.R.ValueidAssignedProductAttributeValues, foreign)
				if foreign.R == nil {
					foreign.R = &assignedProductAttributeValueR{}
				}
				foreign.R.ValueidAttributeValue = local
				break
			}
		}
	}

	return nil
}

// LoadValueidAssignedVariantAttributeValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeValueL) LoadValueidAssignedVariantAttributeValues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AttributeValue
	var object *AttributeValue

	if singular {
		var ok bool
		object, ok = maybeAttributeValue.(*AttributeValue)
		if !ok {
			object = new(AttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAttributeValue))
			}
		}
	} else {
		s, ok := maybeAttributeValue.(*[]*AttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAttributeValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeValueR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_variant_attribute_values`),
		qm.WhereIn(`assigned_variant_attribute_values.valueid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assigned_variant_attribute_values")
	}

	var resultSlice []*AssignedVariantAttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assigned_variant_attribute_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assigned_variant_attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_variant_attribute_values")
	}

	if len(assignedVariantAttributeValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ValueidAssignedVariantAttributeValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignedVariantAttributeValueR{}
			}
			foreign.R.ValueidAttributeValue = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Valueid) {
				local.R.ValueidAssignedVariantAttributeValues = append(local.R.ValueidAssignedVariantAttributeValues, foreign)
				if foreign.R == nil {
					foreign.R = &assignedVariantAttributeValueR{}
				}
				foreign.R.ValueidAttributeValue = local
				break
			}
		}
	}

	return nil
}

// SetAttributeidAttribute of the attributeValue to the related item.
// Sets o.R.AttributeidAttribute to related.
// Adds o to related.R.AttributeidAttributeValues.
func (o *AttributeValue) SetAttributeidAttribute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Attribute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"attributeid"}),
		strmangle.WhereClause("\"", "\"", 2, attributeValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Attributeid, related.ID)
	if o.R == nil {
		o.R = &attributeValueR{
			AttributeidAttribute: related,
		}
	} else {
		o.R.AttributeidAttribute = related
	}

	if related.R == nil {
		related.R = &attributeR{
			AttributeidAttributeValues: AttributeValueSlice{o},
		}
	} else {
		related.R.AttributeidAttributeValues = append(related.R.AttributeidAttributeValues, o)
	}

	return nil
}

// RemoveAttributeidAttribute relationship.
// Sets o.R.AttributeidAttribute to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AttributeValue) RemoveAttributeidAttribute(ctx context.Context, exec boil.ContextExecutor, related *Attribute) error {
	var err error

	queries.SetScanner(&o.Attributeid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("attributeid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AttributeidAttribute = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AttributeidAttributeValues {
		if queries.Equal(o.Attributeid, ri.Attributeid) {
			continue
		}

		ln := len(related.R.AttributeidAttributeValues)
		if ln > 1 && i < ln-1 {
			related.R.AttributeidAttributeValues[i] = related.R.AttributeidAttributeValues[ln-1]
		}
		related.R.AttributeidAttributeValues = related.R.AttributeidAttributeValues[:ln-1]
		break
	}
	return nil
}

// AddValueidAssignedPageAttributeValues adds the given related objects to the existing relationships
// of the attribute_value, optionally inserting them as new records.
// Appends related to o.R.ValueidAssignedPageAttributeValues.
// Sets related.R.ValueidAttributeValue appropriately.
func (o *AttributeValue) AddValueidAssignedPageAttributeValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedPageAttributeValue) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Valueid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_page_attribute_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"valueid"}),
				strmangle.WhereClause("\"", "\"", 2, assignedPageAttributeValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Valueid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &attributeValueR{
			ValueidAssignedPageAttributeValues: related,
		}
	} else {
		o.R.ValueidAssignedPageAttributeValues = append(o.R.ValueidAssignedPageAttributeValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedPageAttributeValueR{
				ValueidAttributeValue: o,
			}
		} else {
			rel.R.ValueidAttributeValue = o
		}
	}
	return nil
}

// SetValueidAssignedPageAttributeValues removes all previously related items of the
// attribute_value replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ValueidAttributeValue's ValueidAssignedPageAttributeValues accordingly.
// Replaces o.R.ValueidAssignedPageAttributeValues with related.
// Sets related.R.ValueidAttributeValue's ValueidAssignedPageAttributeValues accordingly.
func (o *AttributeValue) SetValueidAssignedPageAttributeValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedPageAttributeValue) error {
	query := "update \"assigned_page_attribute_values\" set \"valueid\" = null where \"valueid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ValueidAssignedPageAttributeValues {
			queries.SetScanner(&rel.Valueid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ValueidAttributeValue = nil
		}
		o.R.ValueidAssignedPageAttributeValues = nil
	}

	return o.AddValueidAssignedPageAttributeValues(ctx, exec, insert, related...)
}

// RemoveValueidAssignedPageAttributeValues relationships from objects passed in.
// Removes related items from R.ValueidAssignedPageAttributeValues (uses pointer comparison, removal does not keep order)
// Sets related.R.ValueidAttributeValue.
func (o *AttributeValue) RemoveValueidAssignedPageAttributeValues(ctx context.Context, exec boil.ContextExecutor, related ...*AssignedPageAttributeValue) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Valueid, nil)
		if rel.R != nil {
			rel.R.ValueidAttributeValue = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("valueid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ValueidAssignedPageAttributeValues {
			if rel != ri {
				continue
			}

			ln := len(o.R.ValueidAssignedPageAttributeValues)
			if ln > 1 && i < ln-1 {
				o.R.ValueidAssignedPageAttributeValues[i] = o.R.ValueidAssignedPageAttributeValues[ln-1]
			}
			o.R.ValueidAssignedPageAttributeValues = o.R.ValueidAssignedPageAttributeValues[:ln-1]
			break
		}
	}

	return nil
}

// AddValueidAssignedProductAttributeValues adds the given related objects to the existing relationships
// of the attribute_value, optionally inserting them as new records.
// Appends related to o.R.ValueidAssignedProductAttributeValues.
// Sets related.R.ValueidAttributeValue appropriately.
func (o *AttributeValue) AddValueidAssignedProductAttributeValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedProductAttributeValue) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Valueid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_product_attribute_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"valueid"}),
				strmangle.WhereClause("\"", "\"", 2, assignedProductAttributeValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Valueid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &attributeValueR{
			ValueidAssignedProductAttributeValues: related,
		}
	} else {
		o.R.ValueidAssignedProductAttributeValues = append(o.R.ValueidAssignedProductAttributeValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedProductAttributeValueR{
				ValueidAttributeValue: o,
			}
		} else {
			rel.R.ValueidAttributeValue = o
		}
	}
	return nil
}

// SetValueidAssignedProductAttributeValues removes all previously related items of the
// attribute_value replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ValueidAttributeValue's ValueidAssignedProductAttributeValues accordingly.
// Replaces o.R.ValueidAssignedProductAttributeValues with related.
// Sets related.R.ValueidAttributeValue's ValueidAssignedProductAttributeValues accordingly.
func (o *AttributeValue) SetValueidAssignedProductAttributeValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedProductAttributeValue) error {
	query := "update \"assigned_product_attribute_values\" set \"valueid\" = null where \"valueid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ValueidAssignedProductAttributeValues {
			queries.SetScanner(&rel.Valueid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ValueidAttributeValue = nil
		}
		o.R.ValueidAssignedProductAttributeValues = nil
	}

	return o.AddValueidAssignedProductAttributeValues(ctx, exec, insert, related...)
}

// RemoveValueidAssignedProductAttributeValues relationships from objects passed in.
// Removes related items from R.ValueidAssignedProductAttributeValues (uses pointer comparison, removal does not keep order)
// Sets related.R.ValueidAttributeValue.
func (o *AttributeValue) RemoveValueidAssignedProductAttributeValues(ctx context.Context, exec boil.ContextExecutor, related ...*AssignedProductAttributeValue) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Valueid, nil)
		if rel.R != nil {
			rel.R.ValueidAttributeValue = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("valueid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ValueidAssignedProductAttributeValues {
			if rel != ri {
				continue
			}

			ln := len(o.R.ValueidAssignedProductAttributeValues)
			if ln > 1 && i < ln-1 {
				o.R.ValueidAssignedProductAttributeValues[i] = o.R.ValueidAssignedProductAttributeValues[ln-1]
			}
			o.R.ValueidAssignedProductAttributeValues = o.R.ValueidAssignedProductAttributeValues[:ln-1]
			break
		}
	}

	return nil
}

// AddValueidAssignedVariantAttributeValues adds the given related objects to the existing relationships
// of the attribute_value, optionally inserting them as new records.
// Appends related to o.R.ValueidAssignedVariantAttributeValues.
// Sets related.R.ValueidAttributeValue appropriately.
func (o *AttributeValue) AddValueidAssignedVariantAttributeValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedVariantAttributeValue) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Valueid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"assigned_variant_attribute_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"valueid"}),
				strmangle.WhereClause("\"", "\"", 2, assignedVariantAttributeValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Valueid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &attributeValueR{
			ValueidAssignedVariantAttributeValues: related,
		}
	} else {
		o.R.ValueidAssignedVariantAttributeValues = append(o.R.ValueidAssignedVariantAttributeValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignedVariantAttributeValueR{
				ValueidAttributeValue: o,
			}
		} else {
			rel.R.ValueidAttributeValue = o
		}
	}
	return nil
}

// SetValueidAssignedVariantAttributeValues removes all previously related items of the
// attribute_value replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ValueidAttributeValue's ValueidAssignedVariantAttributeValues accordingly.
// Replaces o.R.ValueidAssignedVariantAttributeValues with related.
// Sets related.R.ValueidAttributeValue's ValueidAssignedVariantAttributeValues accordingly.
func (o *AttributeValue) SetValueidAssignedVariantAttributeValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AssignedVariantAttributeValue) error {
	query := "update \"assigned_variant_attribute_values\" set \"valueid\" = null where \"valueid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ValueidAssignedVariantAttributeValues {
			queries.SetScanner(&rel.Valueid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ValueidAttributeValue = nil
		}
		o.R.ValueidAssignedVariantAttributeValues = nil
	}

	return o.AddValueidAssignedVariantAttributeValues(ctx, exec, insert, related...)
}

// RemoveValueidAssignedVariantAttributeValues relationships from objects passed in.
// Removes related items from R.ValueidAssignedVariantAttributeValues (uses pointer comparison, removal does not keep order)
// Sets related.R.ValueidAttributeValue.
func (o *AttributeValue) RemoveValueidAssignedVariantAttributeValues(ctx context.Context, exec boil.ContextExecutor, related ...*AssignedVariantAttributeValue) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Valueid, nil)
		if rel.R != nil {
			rel.R.ValueidAttributeValue = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("valueid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ValueidAssignedVariantAttributeValues {
			if rel != ri {
				continue
			}

			ln := len(o.R.ValueidAssignedVariantAttributeValues)
			if ln > 1 && i < ln-1 {
				o.R.ValueidAssignedVariantAttributeValues[i] = o.R.ValueidAssignedVariantAttributeValues[ln-1]
			}
			o.R.ValueidAssignedVariantAttributeValues = o.R.ValueidAssignedVariantAttributeValues[:ln-1]
			break
		}
	}

	return nil
}

// AttributeValues retrieves all the records using an executor.
func AttributeValues(mods ...qm.QueryMod) attributeValueQuery {
	mods = append(mods, qm.From("\"attribute_values\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"attribute_values\".*"})
	}

	return attributeValueQuery{q}
}

// FindAttributeValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttributeValue(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AttributeValue, error) {
	attributeValueObj := &AttributeValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attribute_values\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, attributeValueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from attribute_values")
	}

	if err = attributeValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return attributeValueObj, err
	}

	return attributeValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AttributeValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attribute_values provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributeValueInsertCacheMut.RLock()
	cache, cached := attributeValueInsertCache[key]
	attributeValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributeValueAllColumns,
			attributeValueColumnsWithDefault,
			attributeValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributeValueType, attributeValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributeValueType, attributeValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attribute_values\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attribute_values\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into attribute_values")
	}

	if !cached {
		attributeValueInsertCacheMut.Lock()
		attributeValueInsertCache[key] = cache
		attributeValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AttributeValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AttributeValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	attributeValueUpdateCacheMut.RLock()
	cache, cached := attributeValueUpdateCache[key]
	attributeValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributeValueAllColumns,
			attributeValuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update attribute_values, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attribute_values\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributeValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributeValueType, attributeValueMapping, append(wl, attributeValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update attribute_values row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for attribute_values")
	}

	if !cached {
		attributeValueUpdateCacheMut.Lock()
		attributeValueUpdateCache[key] = cache
		attributeValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q attributeValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for attribute_values")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributeValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributeValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in attributeValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all attributeValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AttributeValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attribute_values provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributeValueUpsertCacheMut.RLock()
	cache, cached := attributeValueUpsertCache[key]
	attributeValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attributeValueAllColumns,
			attributeValueColumnsWithDefault,
			attributeValueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			attributeValueAllColumns,
			attributeValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert attribute_values, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(attributeValuePrimaryKeyColumns))
			copy(conflict, attributeValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"attribute_values\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(attributeValueType, attributeValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributeValueType, attributeValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert attribute_values")
	}

	if !cached {
		attributeValueUpsertCacheMut.Lock()
		attributeValueUpsertCache[key] = cache
		attributeValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AttributeValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AttributeValue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AttributeValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributeValuePrimaryKeyMapping)
	sql := "DELETE FROM \"attribute_values\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for attribute_values")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attributeValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no attributeValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attribute_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributeValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(attributeValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attribute_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeValuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attributeValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attribute_values")
	}

	if len(attributeValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AttributeValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAttributeValue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributeValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributeValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attribute_values\".* FROM \"attribute_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributeValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AttributeValueSlice")
	}

	*o = slice

	return nil
}

// AttributeValueExists checks if the AttributeValue row exists.
func AttributeValueExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attribute_values\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if attribute_values exists")
	}

	return exists, nil
}

// Exists checks if the AttributeValue row exists.
func (o *AttributeValue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AttributeValueExists(ctx, exec, o.ID)
}
