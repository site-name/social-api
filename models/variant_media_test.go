// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVariantMedia(t *testing.T) {
	t.Parallel()

	query := VariantMedia()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVariantMediaDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VariantMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVariantMediaQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VariantMedia().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VariantMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVariantMediaSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VariantMediumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VariantMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVariantMediaExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VariantMediumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if VariantMedium exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VariantMediumExists to return true, but got false.")
	}
}

func testVariantMediaFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	variantMediumFound, err := FindVariantMedium(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if variantMediumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVariantMediaBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VariantMedia().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVariantMediaOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VariantMedia().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVariantMediaAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	variantMediumOne := &VariantMedium{}
	variantMediumTwo := &VariantMedium{}
	if err = randomize.Struct(seed, variantMediumOne, variantMediumDBTypes, false, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}
	if err = randomize.Struct(seed, variantMediumTwo, variantMediumDBTypes, false, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = variantMediumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = variantMediumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VariantMedia().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVariantMediaCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	variantMediumOne := &VariantMedium{}
	variantMediumTwo := &VariantMedium{}
	if err = randomize.Struct(seed, variantMediumOne, variantMediumDBTypes, false, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}
	if err = randomize.Struct(seed, variantMediumTwo, variantMediumDBTypes, false, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = variantMediumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = variantMediumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VariantMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func variantMediumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VariantMedium) error {
	*o = VariantMedium{}
	return nil
}

func variantMediumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VariantMedium) error {
	*o = VariantMedium{}
	return nil
}

func variantMediumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VariantMedium) error {
	*o = VariantMedium{}
	return nil
}

func variantMediumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VariantMedium) error {
	*o = VariantMedium{}
	return nil
}

func variantMediumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VariantMedium) error {
	*o = VariantMedium{}
	return nil
}

func variantMediumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VariantMedium) error {
	*o = VariantMedium{}
	return nil
}

func variantMediumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VariantMedium) error {
	*o = VariantMedium{}
	return nil
}

func variantMediumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VariantMedium) error {
	*o = VariantMedium{}
	return nil
}

func variantMediumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VariantMedium) error {
	*o = VariantMedium{}
	return nil
}

func testVariantMediaHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VariantMedium{}
	o := &VariantMedium{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, variantMediumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VariantMedium object: %s", err)
	}

	AddVariantMediumHook(boil.BeforeInsertHook, variantMediumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	variantMediumBeforeInsertHooks = []VariantMediumHook{}

	AddVariantMediumHook(boil.AfterInsertHook, variantMediumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	variantMediumAfterInsertHooks = []VariantMediumHook{}

	AddVariantMediumHook(boil.AfterSelectHook, variantMediumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	variantMediumAfterSelectHooks = []VariantMediumHook{}

	AddVariantMediumHook(boil.BeforeUpdateHook, variantMediumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	variantMediumBeforeUpdateHooks = []VariantMediumHook{}

	AddVariantMediumHook(boil.AfterUpdateHook, variantMediumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	variantMediumAfterUpdateHooks = []VariantMediumHook{}

	AddVariantMediumHook(boil.BeforeDeleteHook, variantMediumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	variantMediumBeforeDeleteHooks = []VariantMediumHook{}

	AddVariantMediumHook(boil.AfterDeleteHook, variantMediumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	variantMediumAfterDeleteHooks = []VariantMediumHook{}

	AddVariantMediumHook(boil.BeforeUpsertHook, variantMediumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	variantMediumBeforeUpsertHooks = []VariantMediumHook{}

	AddVariantMediumHook(boil.AfterUpsertHook, variantMediumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	variantMediumAfterUpsertHooks = []VariantMediumHook{}
}

func testVariantMediaInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VariantMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVariantMediaInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(variantMediumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VariantMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVariantMediumToOneProductMediumUsingMedium(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VariantMedium
	var foreign ProductMedium

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, variantMediumDBTypes, false, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productMediumDBTypes, false, productMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductMedium struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MediaID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Medium().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductMediumHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ProductMedium) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VariantMediumSlice{&local}
	if err = local.L.LoadMedium(ctx, tx, false, (*[]*VariantMedium)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Medium == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Medium = nil
	if err = local.L.LoadMedium(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Medium == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVariantMediumToOneProductVariantUsingVariant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VariantMedium
	var foreign ProductVariant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, variantMediumDBTypes, false, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.VariantID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Variant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductVariantHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VariantMediumSlice{&local}
	if err = local.L.LoadVariant(ctx, tx, false, (*[]*VariantMedium)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Variant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Variant = nil
	if err = local.L.LoadVariant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Variant == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVariantMediumToOneSetOpProductMediumUsingMedium(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VariantMedium
	var b, c ProductMedium

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, variantMediumDBTypes, false, strmangle.SetComplement(variantMediumPrimaryKeyColumns, variantMediumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productMediumDBTypes, false, strmangle.SetComplement(productMediumPrimaryKeyColumns, productMediumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productMediumDBTypes, false, strmangle.SetComplement(productMediumPrimaryKeyColumns, productMediumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductMedium{&b, &c} {
		err = a.SetMedium(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Medium != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MediumVariantMedia[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MediaID != x.ID {
			t.Error("foreign key was wrong value", a.MediaID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MediaID))
		reflect.Indirect(reflect.ValueOf(&a.MediaID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MediaID != x.ID {
			t.Error("foreign key was wrong value", a.MediaID, x.ID)
		}
	}
}
func testVariantMediumToOneSetOpProductVariantUsingVariant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VariantMedium
	var b, c ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, variantMediumDBTypes, false, strmangle.SetComplement(variantMediumPrimaryKeyColumns, variantMediumColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductVariant{&b, &c} {
		err = a.SetVariant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Variant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VariantVariantMedia[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.VariantID != x.ID {
			t.Error("foreign key was wrong value", a.VariantID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.VariantID))
		reflect.Indirect(reflect.ValueOf(&a.VariantID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.VariantID != x.ID {
			t.Error("foreign key was wrong value", a.VariantID, x.ID)
		}
	}
}

func testVariantMediaReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVariantMediaReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VariantMediumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVariantMediaSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VariantMedia().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	variantMediumDBTypes = map[string]string{`ID`: `uuid`, `VariantID`: `uuid`, `MediaID`: `uuid`}
	_                    = bytes.MinRead
)

func testVariantMediaUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(variantMediumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(variantMediumAllColumns) == len(variantMediumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VariantMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVariantMediaSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(variantMediumAllColumns) == len(variantMediumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VariantMedium{}
	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VariantMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, variantMediumDBTypes, true, variantMediumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(variantMediumAllColumns, variantMediumPrimaryKeyColumns) {
		fields = variantMediumAllColumns
	} else {
		fields = strmangle.SetComplement(
			variantMediumAllColumns,
			variantMediumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VariantMediumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVariantMediaUpsert(t *testing.T) {
	t.Parallel()

	if len(variantMediumAllColumns) == len(variantMediumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VariantMedium{}
	if err = randomize.Struct(seed, &o, variantMediumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VariantMedium: %s", err)
	}

	count, err := VariantMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, variantMediumDBTypes, false, variantMediumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VariantMedium struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VariantMedium: %s", err)
	}

	count, err = VariantMedia().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
