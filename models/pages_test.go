// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPages(t *testing.T) {
	t.Parallel()

	query := Pages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Pages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Page exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PageExists to return true, but got false.")
	}
}

func testPagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pageFound, err := FindPage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Pages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Pages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pageOne := &Page{}
	pageTwo := &Page{}
	if err = randomize.Struct(seed, pageOne, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err = randomize.Struct(seed, pageTwo, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pageOne := &Page{}
	pageTwo := &Page{}
	if err = randomize.Struct(seed, pageOne, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err = randomize.Struct(seed, pageTwo, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func pageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Page) error {
	*o = Page{}
	return nil
}

func testPagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Page{}
	o := &Page{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Page object: %s", err)
	}

	AddPageHook(boil.BeforeInsertHook, pageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pageBeforeInsertHooks = []PageHook{}

	AddPageHook(boil.AfterInsertHook, pageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pageAfterInsertHooks = []PageHook{}

	AddPageHook(boil.AfterSelectHook, pageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pageAfterSelectHooks = []PageHook{}

	AddPageHook(boil.BeforeUpdateHook, pageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pageBeforeUpdateHooks = []PageHook{}

	AddPageHook(boil.AfterUpdateHook, pageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pageAfterUpdateHooks = []PageHook{}

	AddPageHook(boil.BeforeDeleteHook, pageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pageBeforeDeleteHooks = []PageHook{}

	AddPageHook(boil.AfterDeleteHook, pageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pageAfterDeleteHooks = []PageHook{}

	AddPageHook(boil.BeforeUpsertHook, pageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pageBeforeUpsertHooks = []PageHook{}

	AddPageHook(boil.AfterUpsertHook, pageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pageAfterUpsertHooks = []PageHook{}
}

func testPagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPageToManyPageidAssignedPageAttributes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c AssignedPageAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedPageAttributeDBTypes, false, assignedPageAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Pageid, a.ID)
	queries.Assign(&c.Pageid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PageidAssignedPageAttributes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Pageid, b.Pageid) {
			bFound = true
		}
		if queries.Equal(v.Pageid, c.Pageid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageSlice{&a}
	if err = a.L.LoadPageidAssignedPageAttributes(ctx, tx, false, (*[]*Page)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageidAssignedPageAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageidAssignedPageAttributes = nil
	if err = a.L.LoadPageidAssignedPageAttributes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageidAssignedPageAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPageToManyPageidMenuItems(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, menuItemDBTypes, false, menuItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Pageid, a.ID)
	queries.Assign(&c.Pageid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PageidMenuItems().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Pageid, b.Pageid) {
			bFound = true
		}
		if queries.Equal(v.Pageid, c.Pageid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageSlice{&a}
	if err = a.L.LoadPageidMenuItems(ctx, tx, false, (*[]*Page)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageidMenuItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageidMenuItems = nil
	if err = a.L.LoadPageidMenuItems(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageidMenuItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPageToManyPageidPageTranslations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c PageTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, pageTranslationDBTypes, false, pageTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageTranslationDBTypes, false, pageTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Pageid, a.ID)
	queries.Assign(&c.Pageid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PageidPageTranslations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Pageid, b.Pageid) {
			bFound = true
		}
		if queries.Equal(v.Pageid, c.Pageid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PageSlice{&a}
	if err = a.L.LoadPageidPageTranslations(ctx, tx, false, (*[]*Page)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageidPageTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PageidPageTranslations = nil
	if err = a.L.LoadPageidPageTranslations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PageidPageTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPageToManyAddOpPageidAssignedPageAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e AssignedPageAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPageAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedPageAttribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageidAssignedPageAttributes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Pageid) {
			t.Error("foreign key was wrong value", a.ID, first.Pageid)
		}
		if !queries.Equal(a.ID, second.Pageid) {
			t.Error("foreign key was wrong value", a.ID, second.Pageid)
		}

		if first.R.PageidPage != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PageidPage != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageidAssignedPageAttributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageidAssignedPageAttributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageidAssignedPageAttributes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPageToManySetOpPageidAssignedPageAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e AssignedPageAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPageAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPageidAssignedPageAttributes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PageidAssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPageidAssignedPageAttributes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PageidAssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Pageid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Pageid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Pageid) {
		t.Error("foreign key was wrong value", a.ID, d.Pageid)
	}
	if !queries.Equal(a.ID, e.Pageid) {
		t.Error("foreign key was wrong value", a.ID, e.Pageid)
	}

	if b.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PageidPage != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.PageidPage != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PageidAssignedPageAttributes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PageidAssignedPageAttributes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPageToManyRemoveOpPageidAssignedPageAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e AssignedPageAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedPageAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedPageAttributeDBTypes, false, strmangle.SetComplement(assignedPageAttributePrimaryKeyColumns, assignedPageAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPageidAssignedPageAttributes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PageidAssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePageidAssignedPageAttributes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PageidAssignedPageAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Pageid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Pageid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PageidPage != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.PageidPage != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PageidAssignedPageAttributes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PageidAssignedPageAttributes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PageidAssignedPageAttributes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPageToManyAddOpPageidMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MenuItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageidMenuItems(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Pageid) {
			t.Error("foreign key was wrong value", a.ID, first.Pageid)
		}
		if !queries.Equal(a.ID, second.Pageid) {
			t.Error("foreign key was wrong value", a.ID, second.Pageid)
		}

		if first.R.PageidPage != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PageidPage != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageidMenuItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageidMenuItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageidMenuItems().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPageToManySetOpPageidMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPageidMenuItems(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PageidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPageidMenuItems(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PageidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Pageid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Pageid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Pageid) {
		t.Error("foreign key was wrong value", a.ID, d.Pageid)
	}
	if !queries.Equal(a.ID, e.Pageid) {
		t.Error("foreign key was wrong value", a.ID, e.Pageid)
	}

	if b.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PageidPage != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.PageidPage != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PageidMenuItems[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PageidMenuItems[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPageToManyRemoveOpPageidMenuItems(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e MenuItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*MenuItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, menuItemDBTypes, false, strmangle.SetComplement(menuItemPrimaryKeyColumns, menuItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPageidMenuItems(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PageidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePageidMenuItems(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PageidMenuItems().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Pageid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Pageid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PageidPage != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.PageidPage != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PageidMenuItems) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PageidMenuItems[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PageidMenuItems[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPageToManyAddOpPageidPageTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e PageTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PageTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageTranslationDBTypes, false, strmangle.SetComplement(pageTranslationPrimaryKeyColumns, pageTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PageTranslation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPageidPageTranslations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Pageid) {
			t.Error("foreign key was wrong value", a.ID, first.Pageid)
		}
		if !queries.Equal(a.ID, second.Pageid) {
			t.Error("foreign key was wrong value", a.ID, second.Pageid)
		}

		if first.R.PageidPage != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.PageidPage != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PageidPageTranslations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PageidPageTranslations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PageidPageTranslations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPageToManySetOpPageidPageTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e PageTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PageTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageTranslationDBTypes, false, strmangle.SetComplement(pageTranslationPrimaryKeyColumns, pageTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPageidPageTranslations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PageidPageTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPageidPageTranslations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PageidPageTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Pageid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Pageid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Pageid) {
		t.Error("foreign key was wrong value", a.ID, d.Pageid)
	}
	if !queries.Equal(a.ID, e.Pageid) {
		t.Error("foreign key was wrong value", a.ID, e.Pageid)
	}

	if b.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PageidPage != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.PageidPage != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PageidPageTranslations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PageidPageTranslations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPageToManyRemoveOpPageidPageTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c, d, e PageTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PageTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, pageTranslationDBTypes, false, strmangle.SetComplement(pageTranslationPrimaryKeyColumns, pageTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPageidPageTranslations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PageidPageTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePageidPageTranslations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PageidPageTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Pageid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Pageid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.PageidPage != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.PageidPage != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.PageidPage != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PageidPageTranslations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PageidPageTranslations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PageidPageTranslations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPageToOnePageTypeUsingPagetypeidPageType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Page
	var foreign PageType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pageTypeDBTypes, false, pageTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Pagetypeid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.PagetypeidPageType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPageTypeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *PageType) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PageSlice{&local}
	if err = local.L.LoadPagetypeidPageType(ctx, tx, false, (*[]*Page)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PagetypeidPageType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.PagetypeidPageType = nil
	if err = local.L.LoadPagetypeidPageType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.PagetypeidPageType == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPageToOneSetOpPageTypeUsingPagetypeidPageType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b, c PageType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageTypeDBTypes, false, strmangle.SetComplement(pageTypePrimaryKeyColumns, pageTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageTypeDBTypes, false, strmangle.SetComplement(pageTypePrimaryKeyColumns, pageTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*PageType{&b, &c} {
		err = a.SetPagetypeidPageType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.PagetypeidPageType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PagetypeidPages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Pagetypeid, x.ID) {
			t.Error("foreign key was wrong value", a.Pagetypeid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Pagetypeid))
		reflect.Indirect(reflect.ValueOf(&a.Pagetypeid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Pagetypeid, x.ID) {
			t.Error("foreign key was wrong value", a.Pagetypeid, x.ID)
		}
	}
}

func testPageToOneRemoveOpPageTypeUsingPagetypeidPageType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Page
	var b PageType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageTypeDBTypes, false, strmangle.SetComplement(pageTypePrimaryKeyColumns, pageTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPagetypeidPageType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePagetypeidPageType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.PagetypeidPageType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.PagetypeidPageType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Pagetypeid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PagetypeidPages) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Pages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pageDBTypes = map[string]string{`ID`: `character varying`, `Title`: `character varying`, `Slug`: `character varying`, `Pagetypeid`: `character varying`, `Content`: `text`, `Createat`: `bigint`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`, `Publicationdate`: `timestamp with time zone`, `Ispublished`: `boolean`, `Seotitle`: `character varying`, `Seodescription`: `character varying`}
	_           = bytes.MinRead
)

func testPagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pageAllColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pageDBTypes, true, pagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pageAllColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Page{}
	if err = randomize.Struct(seed, o, pageDBTypes, true, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pageDBTypes, true, pagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pageAllColumns, pagePrimaryKeyColumns) {
		fields = pageAllColumns
	} else {
		fields = strmangle.SetComplement(
			pageAllColumns,
			pagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPagesUpsert(t *testing.T) {
	t.Parallel()

	if len(pageAllColumns) == len(pagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Page{}
	if err = randomize.Struct(seed, &o, pageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Page: %s", err)
	}

	count, err := Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pageDBTypes, false, pagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Page: %s", err)
	}

	count, err = Pages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
