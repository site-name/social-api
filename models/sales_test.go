// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSales(t *testing.T) {
	t.Parallel()

	query := Sales()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSalesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSalesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Sales().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSalesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SaleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSalesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SaleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Sale exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SaleExists to return true, but got false.")
	}
}

func testSalesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	saleFound, err := FindSale(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if saleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSalesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Sales().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSalesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Sales().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSalesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	saleOne := &Sale{}
	saleTwo := &Sale{}
	if err = randomize.Struct(seed, saleOne, saleDBTypes, false, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}
	if err = randomize.Struct(seed, saleTwo, saleDBTypes, false, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = saleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = saleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sales().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSalesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	saleOne := &Sale{}
	saleTwo := &Sale{}
	if err = randomize.Struct(seed, saleOne, saleDBTypes, false, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}
	if err = randomize.Struct(seed, saleTwo, saleDBTypes, false, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = saleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = saleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func saleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
	*o = Sale{}
	return nil
}

func saleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
	*o = Sale{}
	return nil
}

func saleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
	*o = Sale{}
	return nil
}

func saleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
	*o = Sale{}
	return nil
}

func saleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
	*o = Sale{}
	return nil
}

func saleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
	*o = Sale{}
	return nil
}

func saleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
	*o = Sale{}
	return nil
}

func saleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
	*o = Sale{}
	return nil
}

func saleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Sale) error {
	*o = Sale{}
	return nil
}

func testSalesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Sale{}
	o := &Sale{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, saleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Sale object: %s", err)
	}

	AddSaleHook(boil.BeforeInsertHook, saleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	saleBeforeInsertHooks = []SaleHook{}

	AddSaleHook(boil.AfterInsertHook, saleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	saleAfterInsertHooks = []SaleHook{}

	AddSaleHook(boil.AfterSelectHook, saleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	saleAfterSelectHooks = []SaleHook{}

	AddSaleHook(boil.BeforeUpdateHook, saleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	saleBeforeUpdateHooks = []SaleHook{}

	AddSaleHook(boil.AfterUpdateHook, saleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	saleAfterUpdateHooks = []SaleHook{}

	AddSaleHook(boil.BeforeDeleteHook, saleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	saleBeforeDeleteHooks = []SaleHook{}

	AddSaleHook(boil.AfterDeleteHook, saleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	saleAfterDeleteHooks = []SaleHook{}

	AddSaleHook(boil.BeforeUpsertHook, saleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	saleBeforeUpsertHooks = []SaleHook{}

	AddSaleHook(boil.AfterUpsertHook, saleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	saleAfterUpsertHooks = []SaleHook{}
}

func testSalesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSalesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(saleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Sales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSaleToManySaleidSaleCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c SaleCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, saleCategoryDBTypes, false, saleCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleCategoryDBTypes, false, saleCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Saleid, a.ID)
	queries.Assign(&c.Saleid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SaleidSaleCategories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Saleid, b.Saleid) {
			bFound = true
		}
		if queries.Equal(v.Saleid, c.Saleid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SaleSlice{&a}
	if err = a.L.LoadSaleidSaleCategories(ctx, tx, false, (*[]*Sale)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleidSaleCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SaleidSaleCategories = nil
	if err = a.L.LoadSaleidSaleCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleidSaleCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSaleToManySaleidSaleChannelListings(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c SaleChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, saleChannelListingDBTypes, false, saleChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleChannelListingDBTypes, false, saleChannelListingColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Saleid, a.ID)
	queries.Assign(&c.Saleid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SaleidSaleChannelListings().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Saleid, b.Saleid) {
			bFound = true
		}
		if queries.Equal(v.Saleid, c.Saleid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SaleSlice{&a}
	if err = a.L.LoadSaleidSaleChannelListings(ctx, tx, false, (*[]*Sale)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleidSaleChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SaleidSaleChannelListings = nil
	if err = a.L.LoadSaleidSaleChannelListings(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleidSaleChannelListings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSaleToManySaleidSaleCollections(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c SaleCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, saleCollectionDBTypes, false, saleCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleCollectionDBTypes, false, saleCollectionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Saleid, a.ID)
	queries.Assign(&c.Saleid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SaleidSaleCollections().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Saleid, b.Saleid) {
			bFound = true
		}
		if queries.Equal(v.Saleid, c.Saleid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SaleSlice{&a}
	if err = a.L.LoadSaleidSaleCollections(ctx, tx, false, (*[]*Sale)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleidSaleCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SaleidSaleCollections = nil
	if err = a.L.LoadSaleidSaleCollections(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleidSaleCollections); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSaleToManySaleidSaleProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c SaleProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, saleProductDBTypes, false, saleProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleProductDBTypes, false, saleProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Saleid, a.ID)
	queries.Assign(&c.Saleid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SaleidSaleProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Saleid, b.Saleid) {
			bFound = true
		}
		if queries.Equal(v.Saleid, c.Saleid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SaleSlice{&a}
	if err = a.L.LoadSaleidSaleProducts(ctx, tx, false, (*[]*Sale)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleidSaleProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SaleidSaleProducts = nil
	if err = a.L.LoadSaleidSaleProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleidSaleProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSaleToManySaleidSaleTranslations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c SaleTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, saleTranslationDBTypes, false, saleTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleTranslationDBTypes, false, saleTranslationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Saleid, a.ID)
	queries.Assign(&c.Saleid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SaleidSaleTranslations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Saleid, b.Saleid) {
			bFound = true
		}
		if queries.Equal(v.Saleid, c.Saleid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SaleSlice{&a}
	if err = a.L.LoadSaleidSaleTranslations(ctx, tx, false, (*[]*Sale)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleidSaleTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SaleidSaleTranslations = nil
	if err = a.L.LoadSaleidSaleTranslations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SaleidSaleTranslations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSaleToManyAddOpSaleidSaleCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleCategoryDBTypes, false, strmangle.SetComplement(saleCategoryPrimaryKeyColumns, saleCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SaleCategory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSaleidSaleCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Saleid) {
			t.Error("foreign key was wrong value", a.ID, first.Saleid)
		}
		if !queries.Equal(a.ID, second.Saleid) {
			t.Error("foreign key was wrong value", a.ID, second.Saleid)
		}

		if first.R.SaleidSale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SaleidSale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SaleidSaleCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SaleidSaleCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SaleidSaleCategories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSaleToManySetOpSaleidSaleCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleCategoryDBTypes, false, strmangle.SetComplement(saleCategoryPrimaryKeyColumns, saleCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSaleidSaleCategories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SaleidSaleCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSaleidSaleCategories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SaleidSaleCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Saleid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Saleid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Saleid) {
		t.Error("foreign key was wrong value", a.ID, d.Saleid)
	}
	if !queries.Equal(a.ID, e.Saleid) {
		t.Error("foreign key was wrong value", a.ID, e.Saleid)
	}

	if b.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SaleidSale != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SaleidSale != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SaleidSaleCategories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SaleidSaleCategories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSaleToManyRemoveOpSaleidSaleCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleCategoryDBTypes, false, strmangle.SetComplement(saleCategoryPrimaryKeyColumns, saleCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSaleidSaleCategories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SaleidSaleCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSaleidSaleCategories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SaleidSaleCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Saleid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Saleid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SaleidSale != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SaleidSale != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SaleidSaleCategories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SaleidSaleCategories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SaleidSaleCategories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSaleToManyAddOpSaleidSaleChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleChannelListingDBTypes, false, strmangle.SetComplement(saleChannelListingPrimaryKeyColumns, saleChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SaleChannelListing{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSaleidSaleChannelListings(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Saleid) {
			t.Error("foreign key was wrong value", a.ID, first.Saleid)
		}
		if !queries.Equal(a.ID, second.Saleid) {
			t.Error("foreign key was wrong value", a.ID, second.Saleid)
		}

		if first.R.SaleidSale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SaleidSale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SaleidSaleChannelListings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SaleidSaleChannelListings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SaleidSaleChannelListings().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSaleToManySetOpSaleidSaleChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleChannelListingDBTypes, false, strmangle.SetComplement(saleChannelListingPrimaryKeyColumns, saleChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSaleidSaleChannelListings(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SaleidSaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSaleidSaleChannelListings(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SaleidSaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Saleid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Saleid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Saleid) {
		t.Error("foreign key was wrong value", a.ID, d.Saleid)
	}
	if !queries.Equal(a.ID, e.Saleid) {
		t.Error("foreign key was wrong value", a.ID, e.Saleid)
	}

	if b.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SaleidSale != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SaleidSale != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SaleidSaleChannelListings[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SaleidSaleChannelListings[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSaleToManyRemoveOpSaleidSaleChannelListings(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleChannelListing

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleChannelListing{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleChannelListingDBTypes, false, strmangle.SetComplement(saleChannelListingPrimaryKeyColumns, saleChannelListingColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSaleidSaleChannelListings(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SaleidSaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSaleidSaleChannelListings(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SaleidSaleChannelListings().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Saleid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Saleid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SaleidSale != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SaleidSale != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SaleidSaleChannelListings) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SaleidSaleChannelListings[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SaleidSaleChannelListings[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSaleToManyAddOpSaleidSaleCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleCollectionDBTypes, false, strmangle.SetComplement(saleCollectionPrimaryKeyColumns, saleCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SaleCollection{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSaleidSaleCollections(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Saleid) {
			t.Error("foreign key was wrong value", a.ID, first.Saleid)
		}
		if !queries.Equal(a.ID, second.Saleid) {
			t.Error("foreign key was wrong value", a.ID, second.Saleid)
		}

		if first.R.SaleidSale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SaleidSale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SaleidSaleCollections[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SaleidSaleCollections[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SaleidSaleCollections().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSaleToManySetOpSaleidSaleCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleCollectionDBTypes, false, strmangle.SetComplement(saleCollectionPrimaryKeyColumns, saleCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSaleidSaleCollections(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SaleidSaleCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSaleidSaleCollections(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SaleidSaleCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Saleid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Saleid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Saleid) {
		t.Error("foreign key was wrong value", a.ID, d.Saleid)
	}
	if !queries.Equal(a.ID, e.Saleid) {
		t.Error("foreign key was wrong value", a.ID, e.Saleid)
	}

	if b.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SaleidSale != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SaleidSale != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SaleidSaleCollections[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SaleidSaleCollections[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSaleToManyRemoveOpSaleidSaleCollections(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleCollection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleCollection{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleCollectionDBTypes, false, strmangle.SetComplement(saleCollectionPrimaryKeyColumns, saleCollectionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSaleidSaleCollections(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SaleidSaleCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSaleidSaleCollections(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SaleidSaleCollections().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Saleid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Saleid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SaleidSale != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SaleidSale != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SaleidSaleCollections) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SaleidSaleCollections[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SaleidSaleCollections[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSaleToManyAddOpSaleidSaleProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleProductDBTypes, false, strmangle.SetComplement(saleProductPrimaryKeyColumns, saleProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SaleProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSaleidSaleProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Saleid) {
			t.Error("foreign key was wrong value", a.ID, first.Saleid)
		}
		if !queries.Equal(a.ID, second.Saleid) {
			t.Error("foreign key was wrong value", a.ID, second.Saleid)
		}

		if first.R.SaleidSale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SaleidSale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SaleidSaleProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SaleidSaleProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SaleidSaleProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSaleToManySetOpSaleidSaleProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleProductDBTypes, false, strmangle.SetComplement(saleProductPrimaryKeyColumns, saleProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSaleidSaleProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SaleidSaleProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSaleidSaleProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SaleidSaleProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Saleid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Saleid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Saleid) {
		t.Error("foreign key was wrong value", a.ID, d.Saleid)
	}
	if !queries.Equal(a.ID, e.Saleid) {
		t.Error("foreign key was wrong value", a.ID, e.Saleid)
	}

	if b.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SaleidSale != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SaleidSale != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SaleidSaleProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SaleidSaleProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSaleToManyRemoveOpSaleidSaleProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleProductDBTypes, false, strmangle.SetComplement(saleProductPrimaryKeyColumns, saleProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSaleidSaleProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SaleidSaleProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSaleidSaleProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SaleidSaleProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Saleid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Saleid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SaleidSale != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SaleidSale != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SaleidSaleProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SaleidSaleProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SaleidSaleProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSaleToManyAddOpSaleidSaleTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleTranslationDBTypes, false, strmangle.SetComplement(saleTranslationPrimaryKeyColumns, saleTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SaleTranslation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSaleidSaleTranslations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Saleid) {
			t.Error("foreign key was wrong value", a.ID, first.Saleid)
		}
		if !queries.Equal(a.ID, second.Saleid) {
			t.Error("foreign key was wrong value", a.ID, second.Saleid)
		}

		if first.R.SaleidSale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SaleidSale != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SaleidSaleTranslations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SaleidSaleTranslations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SaleidSaleTranslations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSaleToManySetOpSaleidSaleTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleTranslationDBTypes, false, strmangle.SetComplement(saleTranslationPrimaryKeyColumns, saleTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSaleidSaleTranslations(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SaleidSaleTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSaleidSaleTranslations(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SaleidSaleTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Saleid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Saleid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Saleid) {
		t.Error("foreign key was wrong value", a.ID, d.Saleid)
	}
	if !queries.Equal(a.ID, e.Saleid) {
		t.Error("foreign key was wrong value", a.ID, e.Saleid)
	}

	if b.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SaleidSale != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SaleidSale != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SaleidSaleTranslations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SaleidSaleTranslations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSaleToManyRemoveOpSaleidSaleTranslations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Sale
	var b, c, d, e SaleTranslation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SaleTranslation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, saleTranslationDBTypes, false, strmangle.SetComplement(saleTranslationPrimaryKeyColumns, saleTranslationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSaleidSaleTranslations(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SaleidSaleTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSaleidSaleTranslations(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SaleidSaleTranslations().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Saleid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Saleid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SaleidSale != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SaleidSale != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SaleidSale != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SaleidSaleTranslations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SaleidSaleTranslations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SaleidSaleTranslations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSalesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSalesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SaleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSalesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sales().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	saleDBTypes = map[string]string{`ID`: `character varying`, `Name`: `character varying`, `Type`: `character varying`, `Startdate`: `bigint`, `Enddate`: `bigint`, `Createat`: `bigint`, `Updateat`: `bigint`, `Metadata`: `jsonb`, `Privatemetadata`: `jsonb`}
	_           = bytes.MinRead
)

func testSalesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(salePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(saleAllColumns) == len(salePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, saleDBTypes, true, salePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSalesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(saleAllColumns) == len(salePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sale{}
	if err = randomize.Struct(seed, o, saleDBTypes, true, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, saleDBTypes, true, salePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(saleAllColumns, salePrimaryKeyColumns) {
		fields = saleAllColumns
	} else {
		fields = strmangle.SetComplement(
			saleAllColumns,
			salePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SaleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSalesUpsert(t *testing.T) {
	t.Parallel()

	if len(saleAllColumns) == len(salePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Sale{}
	if err = randomize.Struct(seed, &o, saleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sale: %s", err)
	}

	count, err := Sales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, saleDBTypes, false, salePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sale: %s", err)
	}

	count, err = Sales().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
