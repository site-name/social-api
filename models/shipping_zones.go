// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingZone is an object representing the database table.
type ShippingZone struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name            null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Countries       null.String `boil:"countries" json:"countries,omitempty" toml:"countries" yaml:"countries,omitempty"`
	Default         null.Bool   `boil:"default" json:"default,omitempty" toml:"default" yaml:"default,omitempty"`
	Description     null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Createat        null.Int64  `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Metadata        null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata null.JSON   `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *shippingZoneR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingZoneL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingZoneColumns = struct {
	ID              string
	Name            string
	Countries       string
	Default         string
	Description     string
	Createat        string
	Metadata        string
	Privatemetadata string
}{
	ID:              "id",
	Name:            "name",
	Countries:       "countries",
	Default:         "default",
	Description:     "description",
	Createat:        "createat",
	Metadata:        "metadata",
	Privatemetadata: "privatemetadata",
}

var ShippingZoneTableColumns = struct {
	ID              string
	Name            string
	Countries       string
	Default         string
	Description     string
	Createat        string
	Metadata        string
	Privatemetadata string
}{
	ID:              "shipping_zones.id",
	Name:            "shipping_zones.name",
	Countries:       "shipping_zones.countries",
	Default:         "shipping_zones.default",
	Description:     "shipping_zones.description",
	Createat:        "shipping_zones.createat",
	Metadata:        "shipping_zones.metadata",
	Privatemetadata: "shipping_zones.privatemetadata",
}

// Generated where

var ShippingZoneWhere = struct {
	ID              whereHelperstring
	Name            whereHelpernull_String
	Countries       whereHelpernull_String
	Default         whereHelpernull_Bool
	Description     whereHelpernull_String
	Createat        whereHelpernull_Int64
	Metadata        whereHelpernull_JSON
	Privatemetadata whereHelpernull_JSON
}{
	ID:              whereHelperstring{field: "\"shipping_zones\".\"id\""},
	Name:            whereHelpernull_String{field: "\"shipping_zones\".\"name\""},
	Countries:       whereHelpernull_String{field: "\"shipping_zones\".\"countries\""},
	Default:         whereHelpernull_Bool{field: "\"shipping_zones\".\"default\""},
	Description:     whereHelpernull_String{field: "\"shipping_zones\".\"description\""},
	Createat:        whereHelpernull_Int64{field: "\"shipping_zones\".\"createat\""},
	Metadata:        whereHelpernull_JSON{field: "\"shipping_zones\".\"metadata\""},
	Privatemetadata: whereHelpernull_JSON{field: "\"shipping_zones\".\"privatemetadata\""},
}

// ShippingZoneRels is where relationship names are stored.
var ShippingZoneRels = struct {
	ShippingzoneidShippingMethods        string
	ShippingzoneidShippingZoneChannels   string
	ShippingzoneidWarehouseShippingZones string
}{
	ShippingzoneidShippingMethods:        "ShippingzoneidShippingMethods",
	ShippingzoneidShippingZoneChannels:   "ShippingzoneidShippingZoneChannels",
	ShippingzoneidWarehouseShippingZones: "ShippingzoneidWarehouseShippingZones",
}

// shippingZoneR is where relationships are stored.
type shippingZoneR struct {
	ShippingzoneidShippingMethods        ShippingMethodSlice        `boil:"ShippingzoneidShippingMethods" json:"ShippingzoneidShippingMethods" toml:"ShippingzoneidShippingMethods" yaml:"ShippingzoneidShippingMethods"`
	ShippingzoneidShippingZoneChannels   ShippingZoneChannelSlice   `boil:"ShippingzoneidShippingZoneChannels" json:"ShippingzoneidShippingZoneChannels" toml:"ShippingzoneidShippingZoneChannels" yaml:"ShippingzoneidShippingZoneChannels"`
	ShippingzoneidWarehouseShippingZones WarehouseShippingZoneSlice `boil:"ShippingzoneidWarehouseShippingZones" json:"ShippingzoneidWarehouseShippingZones" toml:"ShippingzoneidWarehouseShippingZones" yaml:"ShippingzoneidWarehouseShippingZones"`
}

// NewStruct creates a new relationship struct
func (*shippingZoneR) NewStruct() *shippingZoneR {
	return &shippingZoneR{}
}

func (r *shippingZoneR) GetShippingzoneidShippingMethods() ShippingMethodSlice {
	if r == nil {
		return nil
	}
	return r.ShippingzoneidShippingMethods
}

func (r *shippingZoneR) GetShippingzoneidShippingZoneChannels() ShippingZoneChannelSlice {
	if r == nil {
		return nil
	}
	return r.ShippingzoneidShippingZoneChannels
}

func (r *shippingZoneR) GetShippingzoneidWarehouseShippingZones() WarehouseShippingZoneSlice {
	if r == nil {
		return nil
	}
	return r.ShippingzoneidWarehouseShippingZones
}

// shippingZoneL is where Load methods for each relationship are stored.
type shippingZoneL struct{}

var (
	shippingZoneAllColumns            = []string{"id", "name", "countries", "default", "description", "createat", "metadata", "privatemetadata"}
	shippingZoneColumnsWithoutDefault = []string{"id"}
	shippingZoneColumnsWithDefault    = []string{"name", "countries", "default", "description", "createat", "metadata", "privatemetadata"}
	shippingZonePrimaryKeyColumns     = []string{"id"}
	shippingZoneGeneratedColumns      = []string{}
)

type (
	// ShippingZoneSlice is an alias for a slice of pointers to ShippingZone.
	// This should almost always be used instead of []ShippingZone.
	ShippingZoneSlice []*ShippingZone
	// ShippingZoneHook is the signature for custom ShippingZone hook methods
	ShippingZoneHook func(context.Context, boil.ContextExecutor, *ShippingZone) error

	shippingZoneQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingZoneType                 = reflect.TypeOf(&ShippingZone{})
	shippingZoneMapping              = queries.MakeStructMapping(shippingZoneType)
	shippingZonePrimaryKeyMapping, _ = queries.BindMapping(shippingZoneType, shippingZoneMapping, shippingZonePrimaryKeyColumns)
	shippingZoneInsertCacheMut       sync.RWMutex
	shippingZoneInsertCache          = make(map[string]insertCache)
	shippingZoneUpdateCacheMut       sync.RWMutex
	shippingZoneUpdateCache          = make(map[string]updateCache)
	shippingZoneUpsertCacheMut       sync.RWMutex
	shippingZoneUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shippingZoneAfterSelectHooks []ShippingZoneHook

var shippingZoneBeforeInsertHooks []ShippingZoneHook
var shippingZoneAfterInsertHooks []ShippingZoneHook

var shippingZoneBeforeUpdateHooks []ShippingZoneHook
var shippingZoneAfterUpdateHooks []ShippingZoneHook

var shippingZoneBeforeDeleteHooks []ShippingZoneHook
var shippingZoneAfterDeleteHooks []ShippingZoneHook

var shippingZoneBeforeUpsertHooks []ShippingZoneHook
var shippingZoneAfterUpsertHooks []ShippingZoneHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShippingZone) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingZoneAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShippingZone) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingZoneBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShippingZone) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingZoneAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShippingZone) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingZoneBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShippingZone) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingZoneAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShippingZone) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingZoneBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShippingZone) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingZoneAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShippingZone) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingZoneBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShippingZone) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingZoneAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShippingZoneHook registers your hook function for all future operations.
func AddShippingZoneHook(hookPoint boil.HookPoint, shippingZoneHook ShippingZoneHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shippingZoneAfterSelectHooks = append(shippingZoneAfterSelectHooks, shippingZoneHook)
	case boil.BeforeInsertHook:
		shippingZoneBeforeInsertHooks = append(shippingZoneBeforeInsertHooks, shippingZoneHook)
	case boil.AfterInsertHook:
		shippingZoneAfterInsertHooks = append(shippingZoneAfterInsertHooks, shippingZoneHook)
	case boil.BeforeUpdateHook:
		shippingZoneBeforeUpdateHooks = append(shippingZoneBeforeUpdateHooks, shippingZoneHook)
	case boil.AfterUpdateHook:
		shippingZoneAfterUpdateHooks = append(shippingZoneAfterUpdateHooks, shippingZoneHook)
	case boil.BeforeDeleteHook:
		shippingZoneBeforeDeleteHooks = append(shippingZoneBeforeDeleteHooks, shippingZoneHook)
	case boil.AfterDeleteHook:
		shippingZoneAfterDeleteHooks = append(shippingZoneAfterDeleteHooks, shippingZoneHook)
	case boil.BeforeUpsertHook:
		shippingZoneBeforeUpsertHooks = append(shippingZoneBeforeUpsertHooks, shippingZoneHook)
	case boil.AfterUpsertHook:
		shippingZoneAfterUpsertHooks = append(shippingZoneAfterUpsertHooks, shippingZoneHook)
	}
}

// One returns a single shippingZone record from the query.
func (q shippingZoneQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShippingZone, error) {
	o := &ShippingZone{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shipping_zones")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShippingZone records from the query.
func (q shippingZoneQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShippingZoneSlice, error) {
	var o []*ShippingZone

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShippingZone slice")
	}

	if len(shippingZoneAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShippingZone records in the query.
func (q shippingZoneQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shipping_zones rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingZoneQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shipping_zones exists")
	}

	return count > 0, nil
}

// ShippingzoneidShippingMethods retrieves all the shipping_method's ShippingMethods with an executor via shippingzoneid column.
func (o *ShippingZone) ShippingzoneidShippingMethods(mods ...qm.QueryMod) shippingMethodQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_methods\".\"shippingzoneid\"=?", o.ID),
	)

	return ShippingMethods(queryMods...)
}

// ShippingzoneidShippingZoneChannels retrieves all the shipping_zone_channel's ShippingZoneChannels with an executor via shippingzoneid column.
func (o *ShippingZone) ShippingzoneidShippingZoneChannels(mods ...qm.QueryMod) shippingZoneChannelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_zone_channels\".\"shippingzoneid\"=?", o.ID),
	)

	return ShippingZoneChannels(queryMods...)
}

// ShippingzoneidWarehouseShippingZones retrieves all the warehouse_shipping_zone's WarehouseShippingZones with an executor via shippingzoneid column.
func (o *ShippingZone) ShippingzoneidWarehouseShippingZones(mods ...qm.QueryMod) warehouseShippingZoneQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"warehouse_shipping_zones\".\"shippingzoneid\"=?", o.ID),
	)

	return WarehouseShippingZones(queryMods...)
}

// LoadShippingzoneidShippingMethods allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingZoneL) LoadShippingzoneidShippingMethods(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingZone interface{}, mods queries.Applicator) error {
	var slice []*ShippingZone
	var object *ShippingZone

	if singular {
		var ok bool
		object, ok = maybeShippingZone.(*ShippingZone)
		if !ok {
			object = new(ShippingZone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingZone))
			}
		}
	} else {
		s, ok := maybeShippingZone.(*[]*ShippingZone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingZone))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingZoneR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingZoneR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_methods`),
		qm.WhereIn(`shipping_methods.shippingzoneid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_methods")
	}

	var resultSlice []*ShippingMethod
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_methods")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_methods")
	}

	if len(shippingMethodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShippingzoneidShippingMethods = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodR{}
			}
			foreign.R.ShippingzoneidShippingZone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Shippingzoneid) {
				local.R.ShippingzoneidShippingMethods = append(local.R.ShippingzoneidShippingMethods, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodR{}
				}
				foreign.R.ShippingzoneidShippingZone = local
				break
			}
		}
	}

	return nil
}

// LoadShippingzoneidShippingZoneChannels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingZoneL) LoadShippingzoneidShippingZoneChannels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingZone interface{}, mods queries.Applicator) error {
	var slice []*ShippingZone
	var object *ShippingZone

	if singular {
		var ok bool
		object, ok = maybeShippingZone.(*ShippingZone)
		if !ok {
			object = new(ShippingZone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingZone))
			}
		}
	} else {
		s, ok := maybeShippingZone.(*[]*ShippingZone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingZone))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingZoneR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingZoneR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_zone_channels`),
		qm.WhereIn(`shipping_zone_channels.shippingzoneid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_zone_channels")
	}

	var resultSlice []*ShippingZoneChannel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_zone_channels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_zone_channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_zone_channels")
	}

	if len(shippingZoneChannelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShippingzoneidShippingZoneChannels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingZoneChannelR{}
			}
			foreign.R.ShippingzoneidShippingZone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Shippingzoneid) {
				local.R.ShippingzoneidShippingZoneChannels = append(local.R.ShippingzoneidShippingZoneChannels, foreign)
				if foreign.R == nil {
					foreign.R = &shippingZoneChannelR{}
				}
				foreign.R.ShippingzoneidShippingZone = local
				break
			}
		}
	}

	return nil
}

// LoadShippingzoneidWarehouseShippingZones allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingZoneL) LoadShippingzoneidWarehouseShippingZones(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingZone interface{}, mods queries.Applicator) error {
	var slice []*ShippingZone
	var object *ShippingZone

	if singular {
		var ok bool
		object, ok = maybeShippingZone.(*ShippingZone)
		if !ok {
			object = new(ShippingZone)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingZone))
			}
		}
	} else {
		s, ok := maybeShippingZone.(*[]*ShippingZone)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingZone)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingZone))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingZoneR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingZoneR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`warehouse_shipping_zones`),
		qm.WhereIn(`warehouse_shipping_zones.shippingzoneid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load warehouse_shipping_zones")
	}

	var resultSlice []*WarehouseShippingZone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice warehouse_shipping_zones")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on warehouse_shipping_zones")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for warehouse_shipping_zones")
	}

	if len(warehouseShippingZoneAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShippingzoneidWarehouseShippingZones = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &warehouseShippingZoneR{}
			}
			foreign.R.ShippingzoneidShippingZone = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Shippingzoneid) {
				local.R.ShippingzoneidWarehouseShippingZones = append(local.R.ShippingzoneidWarehouseShippingZones, foreign)
				if foreign.R == nil {
					foreign.R = &warehouseShippingZoneR{}
				}
				foreign.R.ShippingzoneidShippingZone = local
				break
			}
		}
	}

	return nil
}

// AddShippingzoneidShippingMethods adds the given related objects to the existing relationships
// of the shipping_zone, optionally inserting them as new records.
// Appends related to o.R.ShippingzoneidShippingMethods.
// Sets related.R.ShippingzoneidShippingZone appropriately.
func (o *ShippingZone) AddShippingzoneidShippingMethods(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethod) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Shippingzoneid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_methods\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shippingzoneid"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Shippingzoneid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shippingZoneR{
			ShippingzoneidShippingMethods: related,
		}
	} else {
		o.R.ShippingzoneidShippingMethods = append(o.R.ShippingzoneidShippingMethods, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodR{
				ShippingzoneidShippingZone: o,
			}
		} else {
			rel.R.ShippingzoneidShippingZone = o
		}
	}
	return nil
}

// SetShippingzoneidShippingMethods removes all previously related items of the
// shipping_zone replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShippingzoneidShippingZone's ShippingzoneidShippingMethods accordingly.
// Replaces o.R.ShippingzoneidShippingMethods with related.
// Sets related.R.ShippingzoneidShippingZone's ShippingzoneidShippingMethods accordingly.
func (o *ShippingZone) SetShippingzoneidShippingMethods(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethod) error {
	query := "update \"shipping_methods\" set \"shippingzoneid\" = null where \"shippingzoneid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ShippingzoneidShippingMethods {
			queries.SetScanner(&rel.Shippingzoneid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShippingzoneidShippingZone = nil
		}
		o.R.ShippingzoneidShippingMethods = nil
	}

	return o.AddShippingzoneidShippingMethods(ctx, exec, insert, related...)
}

// RemoveShippingzoneidShippingMethods relationships from objects passed in.
// Removes related items from R.ShippingzoneidShippingMethods (uses pointer comparison, removal does not keep order)
// Sets related.R.ShippingzoneidShippingZone.
func (o *ShippingZone) RemoveShippingzoneidShippingMethods(ctx context.Context, exec boil.ContextExecutor, related ...*ShippingMethod) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Shippingzoneid, nil)
		if rel.R != nil {
			rel.R.ShippingzoneidShippingZone = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shippingzoneid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ShippingzoneidShippingMethods {
			if rel != ri {
				continue
			}

			ln := len(o.R.ShippingzoneidShippingMethods)
			if ln > 1 && i < ln-1 {
				o.R.ShippingzoneidShippingMethods[i] = o.R.ShippingzoneidShippingMethods[ln-1]
			}
			o.R.ShippingzoneidShippingMethods = o.R.ShippingzoneidShippingMethods[:ln-1]
			break
		}
	}

	return nil
}

// AddShippingzoneidShippingZoneChannels adds the given related objects to the existing relationships
// of the shipping_zone, optionally inserting them as new records.
// Appends related to o.R.ShippingzoneidShippingZoneChannels.
// Sets related.R.ShippingzoneidShippingZone appropriately.
func (o *ShippingZone) AddShippingzoneidShippingZoneChannels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingZoneChannel) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Shippingzoneid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_zone_channels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shippingzoneid"}),
				strmangle.WhereClause("\"", "\"", 2, shippingZoneChannelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Shippingzoneid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shippingZoneR{
			ShippingzoneidShippingZoneChannels: related,
		}
	} else {
		o.R.ShippingzoneidShippingZoneChannels = append(o.R.ShippingzoneidShippingZoneChannels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingZoneChannelR{
				ShippingzoneidShippingZone: o,
			}
		} else {
			rel.R.ShippingzoneidShippingZone = o
		}
	}
	return nil
}

// SetShippingzoneidShippingZoneChannels removes all previously related items of the
// shipping_zone replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShippingzoneidShippingZone's ShippingzoneidShippingZoneChannels accordingly.
// Replaces o.R.ShippingzoneidShippingZoneChannels with related.
// Sets related.R.ShippingzoneidShippingZone's ShippingzoneidShippingZoneChannels accordingly.
func (o *ShippingZone) SetShippingzoneidShippingZoneChannels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingZoneChannel) error {
	query := "update \"shipping_zone_channels\" set \"shippingzoneid\" = null where \"shippingzoneid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ShippingzoneidShippingZoneChannels {
			queries.SetScanner(&rel.Shippingzoneid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShippingzoneidShippingZone = nil
		}
		o.R.ShippingzoneidShippingZoneChannels = nil
	}

	return o.AddShippingzoneidShippingZoneChannels(ctx, exec, insert, related...)
}

// RemoveShippingzoneidShippingZoneChannels relationships from objects passed in.
// Removes related items from R.ShippingzoneidShippingZoneChannels (uses pointer comparison, removal does not keep order)
// Sets related.R.ShippingzoneidShippingZone.
func (o *ShippingZone) RemoveShippingzoneidShippingZoneChannels(ctx context.Context, exec boil.ContextExecutor, related ...*ShippingZoneChannel) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Shippingzoneid, nil)
		if rel.R != nil {
			rel.R.ShippingzoneidShippingZone = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shippingzoneid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ShippingzoneidShippingZoneChannels {
			if rel != ri {
				continue
			}

			ln := len(o.R.ShippingzoneidShippingZoneChannels)
			if ln > 1 && i < ln-1 {
				o.R.ShippingzoneidShippingZoneChannels[i] = o.R.ShippingzoneidShippingZoneChannels[ln-1]
			}
			o.R.ShippingzoneidShippingZoneChannels = o.R.ShippingzoneidShippingZoneChannels[:ln-1]
			break
		}
	}

	return nil
}

// AddShippingzoneidWarehouseShippingZones adds the given related objects to the existing relationships
// of the shipping_zone, optionally inserting them as new records.
// Appends related to o.R.ShippingzoneidWarehouseShippingZones.
// Sets related.R.ShippingzoneidShippingZone appropriately.
func (o *ShippingZone) AddShippingzoneidWarehouseShippingZones(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WarehouseShippingZone) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Shippingzoneid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"warehouse_shipping_zones\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shippingzoneid"}),
				strmangle.WhereClause("\"", "\"", 2, warehouseShippingZonePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Shippingzoneid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shippingZoneR{
			ShippingzoneidWarehouseShippingZones: related,
		}
	} else {
		o.R.ShippingzoneidWarehouseShippingZones = append(o.R.ShippingzoneidWarehouseShippingZones, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &warehouseShippingZoneR{
				ShippingzoneidShippingZone: o,
			}
		} else {
			rel.R.ShippingzoneidShippingZone = o
		}
	}
	return nil
}

// SetShippingzoneidWarehouseShippingZones removes all previously related items of the
// shipping_zone replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShippingzoneidShippingZone's ShippingzoneidWarehouseShippingZones accordingly.
// Replaces o.R.ShippingzoneidWarehouseShippingZones with related.
// Sets related.R.ShippingzoneidShippingZone's ShippingzoneidWarehouseShippingZones accordingly.
func (o *ShippingZone) SetShippingzoneidWarehouseShippingZones(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WarehouseShippingZone) error {
	query := "update \"warehouse_shipping_zones\" set \"shippingzoneid\" = null where \"shippingzoneid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ShippingzoneidWarehouseShippingZones {
			queries.SetScanner(&rel.Shippingzoneid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShippingzoneidShippingZone = nil
		}
		o.R.ShippingzoneidWarehouseShippingZones = nil
	}

	return o.AddShippingzoneidWarehouseShippingZones(ctx, exec, insert, related...)
}

// RemoveShippingzoneidWarehouseShippingZones relationships from objects passed in.
// Removes related items from R.ShippingzoneidWarehouseShippingZones (uses pointer comparison, removal does not keep order)
// Sets related.R.ShippingzoneidShippingZone.
func (o *ShippingZone) RemoveShippingzoneidWarehouseShippingZones(ctx context.Context, exec boil.ContextExecutor, related ...*WarehouseShippingZone) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Shippingzoneid, nil)
		if rel.R != nil {
			rel.R.ShippingzoneidShippingZone = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shippingzoneid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ShippingzoneidWarehouseShippingZones {
			if rel != ri {
				continue
			}

			ln := len(o.R.ShippingzoneidWarehouseShippingZones)
			if ln > 1 && i < ln-1 {
				o.R.ShippingzoneidWarehouseShippingZones[i] = o.R.ShippingzoneidWarehouseShippingZones[ln-1]
			}
			o.R.ShippingzoneidWarehouseShippingZones = o.R.ShippingzoneidWarehouseShippingZones[:ln-1]
			break
		}
	}

	return nil
}

// ShippingZones retrieves all the records using an executor.
func ShippingZones(mods ...qm.QueryMod) shippingZoneQuery {
	mods = append(mods, qm.From("\"shipping_zones\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_zones\".*"})
	}

	return shippingZoneQuery{q}
}

// FindShippingZone retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingZone(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ShippingZone, error) {
	shippingZoneObj := &ShippingZone{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_zones\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shippingZoneObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shipping_zones")
	}

	if err = shippingZoneObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shippingZoneObj, err
	}

	return shippingZoneObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingZone) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shipping_zones provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingZoneColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingZoneInsertCacheMut.RLock()
	cache, cached := shippingZoneInsertCache[key]
	shippingZoneInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingZoneAllColumns,
			shippingZoneColumnsWithDefault,
			shippingZoneColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingZoneType, shippingZoneMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingZoneType, shippingZoneMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_zones\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_zones\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shipping_zones")
	}

	if !cached {
		shippingZoneInsertCacheMut.Lock()
		shippingZoneInsertCache[key] = cache
		shippingZoneInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShippingZone.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingZone) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shippingZoneUpdateCacheMut.RLock()
	cache, cached := shippingZoneUpdateCache[key]
	shippingZoneUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingZoneAllColumns,
			shippingZonePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shipping_zones, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_zones\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingZonePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingZoneType, shippingZoneMapping, append(wl, shippingZonePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shipping_zones row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shipping_zones")
	}

	if !cached {
		shippingZoneUpdateCacheMut.Lock()
		shippingZoneUpdateCache[key] = cache
		shippingZoneUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shippingZoneQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shipping_zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shipping_zones")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingZoneSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_zones\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingZonePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shippingZone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shippingZone")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingZone) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shipping_zones provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingZoneColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingZoneUpsertCacheMut.RLock()
	cache, cached := shippingZoneUpsertCache[key]
	shippingZoneUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shippingZoneAllColumns,
			shippingZoneColumnsWithDefault,
			shippingZoneColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingZoneAllColumns,
			shippingZonePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shipping_zones, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shippingZonePrimaryKeyColumns))
			copy(conflict, shippingZonePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_zones\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shippingZoneType, shippingZoneMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingZoneType, shippingZoneMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shipping_zones")
	}

	if !cached {
		shippingZoneUpsertCacheMut.Lock()
		shippingZoneUpsertCache[key] = cache
		shippingZoneUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShippingZone record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingZone) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShippingZone provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingZonePrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_zones\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shipping_zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shipping_zones")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingZoneQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shippingZoneQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shipping_zones")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shipping_zones")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingZoneSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shippingZoneBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_zones\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingZonePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shippingZone slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shipping_zones")
	}

	if len(shippingZoneAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingZone) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShippingZone(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingZoneSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingZoneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_zones\".* FROM \"shipping_zones\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingZonePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShippingZoneSlice")
	}

	*o = slice

	return nil
}

// ShippingZoneExists checks if the ShippingZone row exists.
func ShippingZoneExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_zones\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shipping_zones exists")
	}

	return exists, nil
}

// Exists checks if the ShippingZone row exists.
func (o *ShippingZone) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShippingZoneExists(ctx, exec, o.ID)
}
