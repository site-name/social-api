// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShippingMethod is an object representing the database table.
type ShippingMethod struct {
	ID                  string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                null.String  `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Type                null.String  `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	Shippingzoneid      null.String  `boil:"shippingzoneid" json:"shippingzoneid,omitempty" toml:"shippingzoneid" yaml:"shippingzoneid,omitempty"`
	Minimumorderweight  null.Float32 `boil:"minimumorderweight" json:"minimumorderweight,omitempty" toml:"minimumorderweight" yaml:"minimumorderweight,omitempty"`
	Maximumorderweight  null.Float32 `boil:"maximumorderweight" json:"maximumorderweight,omitempty" toml:"maximumorderweight" yaml:"maximumorderweight,omitempty"`
	Weightunit          null.String  `boil:"weightunit" json:"weightunit,omitempty" toml:"weightunit" yaml:"weightunit,omitempty"`
	Maximumdeliverydays null.Int     `boil:"maximumdeliverydays" json:"maximumdeliverydays,omitempty" toml:"maximumdeliverydays" yaml:"maximumdeliverydays,omitempty"`
	Minimumdeliverydays null.Int     `boil:"minimumdeliverydays" json:"minimumdeliverydays,omitempty" toml:"minimumdeliverydays" yaml:"minimumdeliverydays,omitempty"`
	Description         null.String  `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	Metadata            null.JSON    `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	Privatemetadata     null.JSON    `boil:"privatemetadata" json:"privatemetadata,omitempty" toml:"privatemetadata" yaml:"privatemetadata,omitempty"`

	R *shippingMethodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shippingMethodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShippingMethodColumns = struct {
	ID                  string
	Name                string
	Type                string
	Shippingzoneid      string
	Minimumorderweight  string
	Maximumorderweight  string
	Weightunit          string
	Maximumdeliverydays string
	Minimumdeliverydays string
	Description         string
	Metadata            string
	Privatemetadata     string
}{
	ID:                  "id",
	Name:                "name",
	Type:                "type",
	Shippingzoneid:      "shippingzoneid",
	Minimumorderweight:  "minimumorderweight",
	Maximumorderweight:  "maximumorderweight",
	Weightunit:          "weightunit",
	Maximumdeliverydays: "maximumdeliverydays",
	Minimumdeliverydays: "minimumdeliverydays",
	Description:         "description",
	Metadata:            "metadata",
	Privatemetadata:     "privatemetadata",
}

var ShippingMethodTableColumns = struct {
	ID                  string
	Name                string
	Type                string
	Shippingzoneid      string
	Minimumorderweight  string
	Maximumorderweight  string
	Weightunit          string
	Maximumdeliverydays string
	Minimumdeliverydays string
	Description         string
	Metadata            string
	Privatemetadata     string
}{
	ID:                  "shipping_methods.id",
	Name:                "shipping_methods.name",
	Type:                "shipping_methods.type",
	Shippingzoneid:      "shipping_methods.shippingzoneid",
	Minimumorderweight:  "shipping_methods.minimumorderweight",
	Maximumorderweight:  "shipping_methods.maximumorderweight",
	Weightunit:          "shipping_methods.weightunit",
	Maximumdeliverydays: "shipping_methods.maximumdeliverydays",
	Minimumdeliverydays: "shipping_methods.minimumdeliverydays",
	Description:         "shipping_methods.description",
	Metadata:            "shipping_methods.metadata",
	Privatemetadata:     "shipping_methods.privatemetadata",
}

// Generated where

var ShippingMethodWhere = struct {
	ID                  whereHelperstring
	Name                whereHelpernull_String
	Type                whereHelpernull_String
	Shippingzoneid      whereHelpernull_String
	Minimumorderweight  whereHelpernull_Float32
	Maximumorderweight  whereHelpernull_Float32
	Weightunit          whereHelpernull_String
	Maximumdeliverydays whereHelpernull_Int
	Minimumdeliverydays whereHelpernull_Int
	Description         whereHelpernull_String
	Metadata            whereHelpernull_JSON
	Privatemetadata     whereHelpernull_JSON
}{
	ID:                  whereHelperstring{field: "\"shipping_methods\".\"id\""},
	Name:                whereHelpernull_String{field: "\"shipping_methods\".\"name\""},
	Type:                whereHelpernull_String{field: "\"shipping_methods\".\"type\""},
	Shippingzoneid:      whereHelpernull_String{field: "\"shipping_methods\".\"shippingzoneid\""},
	Minimumorderweight:  whereHelpernull_Float32{field: "\"shipping_methods\".\"minimumorderweight\""},
	Maximumorderweight:  whereHelpernull_Float32{field: "\"shipping_methods\".\"maximumorderweight\""},
	Weightunit:          whereHelpernull_String{field: "\"shipping_methods\".\"weightunit\""},
	Maximumdeliverydays: whereHelpernull_Int{field: "\"shipping_methods\".\"maximumdeliverydays\""},
	Minimumdeliverydays: whereHelpernull_Int{field: "\"shipping_methods\".\"minimumdeliverydays\""},
	Description:         whereHelpernull_String{field: "\"shipping_methods\".\"description\""},
	Metadata:            whereHelpernull_JSON{field: "\"shipping_methods\".\"metadata\""},
	Privatemetadata:     whereHelpernull_JSON{field: "\"shipping_methods\".\"privatemetadata\""},
}

// ShippingMethodRels is where relationship names are stored.
var ShippingMethodRels = struct {
	ShippingzoneidShippingZone                     string
	ShippingmethodidCheckouts                      string
	ShippingmethodidOrders                         string
	ShippingmethodidShippingMethodChannelListings  string
	ShippingmethodidShippingMethodExcludedProducts string
	ShippingmethodidShippingMethodPostalCodeRules  string
}{
	ShippingzoneidShippingZone:                     "ShippingzoneidShippingZone",
	ShippingmethodidCheckouts:                      "ShippingmethodidCheckouts",
	ShippingmethodidOrders:                         "ShippingmethodidOrders",
	ShippingmethodidShippingMethodChannelListings:  "ShippingmethodidShippingMethodChannelListings",
	ShippingmethodidShippingMethodExcludedProducts: "ShippingmethodidShippingMethodExcludedProducts",
	ShippingmethodidShippingMethodPostalCodeRules:  "ShippingmethodidShippingMethodPostalCodeRules",
}

// shippingMethodR is where relationships are stored.
type shippingMethodR struct {
	ShippingzoneidShippingZone                     *ShippingZone                      `boil:"ShippingzoneidShippingZone" json:"ShippingzoneidShippingZone" toml:"ShippingzoneidShippingZone" yaml:"ShippingzoneidShippingZone"`
	ShippingmethodidCheckouts                      CheckoutSlice                      `boil:"ShippingmethodidCheckouts" json:"ShippingmethodidCheckouts" toml:"ShippingmethodidCheckouts" yaml:"ShippingmethodidCheckouts"`
	ShippingmethodidOrders                         OrderSlice                         `boil:"ShippingmethodidOrders" json:"ShippingmethodidOrders" toml:"ShippingmethodidOrders" yaml:"ShippingmethodidOrders"`
	ShippingmethodidShippingMethodChannelListings  ShippingMethodChannelListingSlice  `boil:"ShippingmethodidShippingMethodChannelListings" json:"ShippingmethodidShippingMethodChannelListings" toml:"ShippingmethodidShippingMethodChannelListings" yaml:"ShippingmethodidShippingMethodChannelListings"`
	ShippingmethodidShippingMethodExcludedProducts ShippingMethodExcludedProductSlice `boil:"ShippingmethodidShippingMethodExcludedProducts" json:"ShippingmethodidShippingMethodExcludedProducts" toml:"ShippingmethodidShippingMethodExcludedProducts" yaml:"ShippingmethodidShippingMethodExcludedProducts"`
	ShippingmethodidShippingMethodPostalCodeRules  ShippingMethodPostalCodeRuleSlice  `boil:"ShippingmethodidShippingMethodPostalCodeRules" json:"ShippingmethodidShippingMethodPostalCodeRules" toml:"ShippingmethodidShippingMethodPostalCodeRules" yaml:"ShippingmethodidShippingMethodPostalCodeRules"`
}

// NewStruct creates a new relationship struct
func (*shippingMethodR) NewStruct() *shippingMethodR {
	return &shippingMethodR{}
}

func (r *shippingMethodR) GetShippingzoneidShippingZone() *ShippingZone {
	if r == nil {
		return nil
	}
	return r.ShippingzoneidShippingZone
}

func (r *shippingMethodR) GetShippingmethodidCheckouts() CheckoutSlice {
	if r == nil {
		return nil
	}
	return r.ShippingmethodidCheckouts
}

func (r *shippingMethodR) GetShippingmethodidOrders() OrderSlice {
	if r == nil {
		return nil
	}
	return r.ShippingmethodidOrders
}

func (r *shippingMethodR) GetShippingmethodidShippingMethodChannelListings() ShippingMethodChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.ShippingmethodidShippingMethodChannelListings
}

func (r *shippingMethodR) GetShippingmethodidShippingMethodExcludedProducts() ShippingMethodExcludedProductSlice {
	if r == nil {
		return nil
	}
	return r.ShippingmethodidShippingMethodExcludedProducts
}

func (r *shippingMethodR) GetShippingmethodidShippingMethodPostalCodeRules() ShippingMethodPostalCodeRuleSlice {
	if r == nil {
		return nil
	}
	return r.ShippingmethodidShippingMethodPostalCodeRules
}

// shippingMethodL is where Load methods for each relationship are stored.
type shippingMethodL struct{}

var (
	shippingMethodAllColumns            = []string{"id", "name", "type", "shippingzoneid", "minimumorderweight", "maximumorderweight", "weightunit", "maximumdeliverydays", "minimumdeliverydays", "description", "metadata", "privatemetadata"}
	shippingMethodColumnsWithoutDefault = []string{"id"}
	shippingMethodColumnsWithDefault    = []string{"name", "type", "shippingzoneid", "minimumorderweight", "maximumorderweight", "weightunit", "maximumdeliverydays", "minimumdeliverydays", "description", "metadata", "privatemetadata"}
	shippingMethodPrimaryKeyColumns     = []string{"id"}
	shippingMethodGeneratedColumns      = []string{}
)

type (
	// ShippingMethodSlice is an alias for a slice of pointers to ShippingMethod.
	// This should almost always be used instead of []ShippingMethod.
	ShippingMethodSlice []*ShippingMethod
	// ShippingMethodHook is the signature for custom ShippingMethod hook methods
	ShippingMethodHook func(context.Context, boil.ContextExecutor, *ShippingMethod) error

	shippingMethodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shippingMethodType                 = reflect.TypeOf(&ShippingMethod{})
	shippingMethodMapping              = queries.MakeStructMapping(shippingMethodType)
	shippingMethodPrimaryKeyMapping, _ = queries.BindMapping(shippingMethodType, shippingMethodMapping, shippingMethodPrimaryKeyColumns)
	shippingMethodInsertCacheMut       sync.RWMutex
	shippingMethodInsertCache          = make(map[string]insertCache)
	shippingMethodUpdateCacheMut       sync.RWMutex
	shippingMethodUpdateCache          = make(map[string]updateCache)
	shippingMethodUpsertCacheMut       sync.RWMutex
	shippingMethodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shippingMethodAfterSelectHooks []ShippingMethodHook

var shippingMethodBeforeInsertHooks []ShippingMethodHook
var shippingMethodAfterInsertHooks []ShippingMethodHook

var shippingMethodBeforeUpdateHooks []ShippingMethodHook
var shippingMethodAfterUpdateHooks []ShippingMethodHook

var shippingMethodBeforeDeleteHooks []ShippingMethodHook
var shippingMethodAfterDeleteHooks []ShippingMethodHook

var shippingMethodBeforeUpsertHooks []ShippingMethodHook
var shippingMethodAfterUpsertHooks []ShippingMethodHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShippingMethod) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShippingMethod) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShippingMethod) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShippingMethod) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShippingMethod) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShippingMethod) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShippingMethod) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShippingMethod) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShippingMethod) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shippingMethodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShippingMethodHook registers your hook function for all future operations.
func AddShippingMethodHook(hookPoint boil.HookPoint, shippingMethodHook ShippingMethodHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		shippingMethodAfterSelectHooks = append(shippingMethodAfterSelectHooks, shippingMethodHook)
	case boil.BeforeInsertHook:
		shippingMethodBeforeInsertHooks = append(shippingMethodBeforeInsertHooks, shippingMethodHook)
	case boil.AfterInsertHook:
		shippingMethodAfterInsertHooks = append(shippingMethodAfterInsertHooks, shippingMethodHook)
	case boil.BeforeUpdateHook:
		shippingMethodBeforeUpdateHooks = append(shippingMethodBeforeUpdateHooks, shippingMethodHook)
	case boil.AfterUpdateHook:
		shippingMethodAfterUpdateHooks = append(shippingMethodAfterUpdateHooks, shippingMethodHook)
	case boil.BeforeDeleteHook:
		shippingMethodBeforeDeleteHooks = append(shippingMethodBeforeDeleteHooks, shippingMethodHook)
	case boil.AfterDeleteHook:
		shippingMethodAfterDeleteHooks = append(shippingMethodAfterDeleteHooks, shippingMethodHook)
	case boil.BeforeUpsertHook:
		shippingMethodBeforeUpsertHooks = append(shippingMethodBeforeUpsertHooks, shippingMethodHook)
	case boil.AfterUpsertHook:
		shippingMethodAfterUpsertHooks = append(shippingMethodAfterUpsertHooks, shippingMethodHook)
	}
}

// One returns a single shippingMethod record from the query.
func (q shippingMethodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShippingMethod, error) {
	o := &ShippingMethod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shipping_methods")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShippingMethod records from the query.
func (q shippingMethodQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShippingMethodSlice, error) {
	var o []*ShippingMethod

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShippingMethod slice")
	}

	if len(shippingMethodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShippingMethod records in the query.
func (q shippingMethodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shipping_methods rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shippingMethodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shipping_methods exists")
	}

	return count > 0, nil
}

// ShippingzoneidShippingZone pointed to by the foreign key.
func (o *ShippingMethod) ShippingzoneidShippingZone(mods ...qm.QueryMod) shippingZoneQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Shippingzoneid),
	}

	queryMods = append(queryMods, mods...)

	return ShippingZones(queryMods...)
}

// ShippingmethodidCheckouts retrieves all the checkout's Checkouts with an executor via shippingmethodid column.
func (o *ShippingMethod) ShippingmethodidCheckouts(mods ...qm.QueryMod) checkoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkouts\".\"shippingmethodid\"=?", o.ID),
	)

	return Checkouts(queryMods...)
}

// ShippingmethodidOrders retrieves all the order's Orders with an executor via shippingmethodid column.
func (o *ShippingMethod) ShippingmethodidOrders(mods ...qm.QueryMod) orderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"orders\".\"shippingmethodid\"=?", o.ID),
	)

	return Orders(queryMods...)
}

// ShippingmethodidShippingMethodChannelListings retrieves all the shipping_method_channel_listing's ShippingMethodChannelListings with an executor via shippingmethodid column.
func (o *ShippingMethod) ShippingmethodidShippingMethodChannelListings(mods ...qm.QueryMod) shippingMethodChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_method_channel_listings\".\"shippingmethodid\"=?", o.ID),
	)

	return ShippingMethodChannelListings(queryMods...)
}

// ShippingmethodidShippingMethodExcludedProducts retrieves all the shipping_method_excluded_product's ShippingMethodExcludedProducts with an executor via shippingmethodid column.
func (o *ShippingMethod) ShippingmethodidShippingMethodExcludedProducts(mods ...qm.QueryMod) shippingMethodExcludedProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_method_excluded_products\".\"shippingmethodid\"=?", o.ID),
	)

	return ShippingMethodExcludedProducts(queryMods...)
}

// ShippingmethodidShippingMethodPostalCodeRules retrieves all the shipping_method_postal_code_rule's ShippingMethodPostalCodeRules with an executor via shippingmethodid column.
func (o *ShippingMethod) ShippingmethodidShippingMethodPostalCodeRules(mods ...qm.QueryMod) shippingMethodPostalCodeRuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"shipping_method_postal_code_rules\".\"shippingmethodid\"=?", o.ID),
	)

	return ShippingMethodPostalCodeRules(queryMods...)
}

// LoadShippingzoneidShippingZone allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (shippingMethodL) LoadShippingzoneidShippingZone(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		if !queries.IsNil(object.Shippingzoneid) {
			args = append(args, object.Shippingzoneid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Shippingzoneid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Shippingzoneid) {
				args = append(args, obj.Shippingzoneid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_zones`),
		qm.WhereIn(`shipping_zones.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShippingZone")
	}

	var resultSlice []*ShippingZone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShippingZone")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shipping_zones")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_zones")
	}

	if len(shippingZoneAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShippingzoneidShippingZone = foreign
		if foreign.R == nil {
			foreign.R = &shippingZoneR{}
		}
		foreign.R.ShippingzoneidShippingMethods = append(foreign.R.ShippingzoneidShippingMethods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Shippingzoneid, foreign.ID) {
				local.R.ShippingzoneidShippingZone = foreign
				if foreign.R == nil {
					foreign.R = &shippingZoneR{}
				}
				foreign.R.ShippingzoneidShippingMethods = append(foreign.R.ShippingzoneidShippingMethods, local)
				break
			}
		}
	}

	return nil
}

// LoadShippingmethodidCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingMethodL) LoadShippingmethodidCheckouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.shippingmethodid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkouts")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShippingmethodidCheckouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutR{}
			}
			foreign.R.ShippingmethodidShippingMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Shippingmethodid) {
				local.R.ShippingmethodidCheckouts = append(local.R.ShippingmethodidCheckouts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.ShippingmethodidShippingMethod = local
				break
			}
		}
	}

	return nil
}

// LoadShippingmethodidOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingMethodL) LoadShippingmethodidOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`orders`),
		qm.WhereIn(`orders.shippingmethodid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load orders")
	}

	var resultSlice []*Order
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for orders")
	}

	if len(orderAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShippingmethodidOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &orderR{}
			}
			foreign.R.ShippingmethodidShippingMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Shippingmethodid) {
				local.R.ShippingmethodidOrders = append(local.R.ShippingmethodidOrders, foreign)
				if foreign.R == nil {
					foreign.R = &orderR{}
				}
				foreign.R.ShippingmethodidShippingMethod = local
				break
			}
		}
	}

	return nil
}

// LoadShippingmethodidShippingMethodChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingMethodL) LoadShippingmethodidShippingMethodChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_method_channel_listings`),
		qm.WhereIn(`shipping_method_channel_listings.shippingmethodid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_method_channel_listings")
	}

	var resultSlice []*ShippingMethodChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_method_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_method_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_method_channel_listings")
	}

	if len(shippingMethodChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShippingmethodidShippingMethodChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodChannelListingR{}
			}
			foreign.R.ShippingmethodidShippingMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Shippingmethodid) {
				local.R.ShippingmethodidShippingMethodChannelListings = append(local.R.ShippingmethodidShippingMethodChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodChannelListingR{}
				}
				foreign.R.ShippingmethodidShippingMethod = local
				break
			}
		}
	}

	return nil
}

// LoadShippingmethodidShippingMethodExcludedProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingMethodL) LoadShippingmethodidShippingMethodExcludedProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_method_excluded_products`),
		qm.WhereIn(`shipping_method_excluded_products.shippingmethodid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_method_excluded_products")
	}

	var resultSlice []*ShippingMethodExcludedProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_method_excluded_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_method_excluded_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_method_excluded_products")
	}

	if len(shippingMethodExcludedProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShippingmethodidShippingMethodExcludedProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodExcludedProductR{}
			}
			foreign.R.ShippingmethodidShippingMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Shippingmethodid) {
				local.R.ShippingmethodidShippingMethodExcludedProducts = append(local.R.ShippingmethodidShippingMethodExcludedProducts, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodExcludedProductR{}
				}
				foreign.R.ShippingmethodidShippingMethod = local
				break
			}
		}
	}

	return nil
}

// LoadShippingmethodidShippingMethodPostalCodeRules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shippingMethodL) LoadShippingmethodidShippingMethodPostalCodeRules(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShippingMethod interface{}, mods queries.Applicator) error {
	var slice []*ShippingMethod
	var object *ShippingMethod

	if singular {
		var ok bool
		object, ok = maybeShippingMethod.(*ShippingMethod)
		if !ok {
			object = new(ShippingMethod)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeShippingMethod))
			}
		}
	} else {
		s, ok := maybeShippingMethod.(*[]*ShippingMethod)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeShippingMethod)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeShippingMethod))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shippingMethodR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shippingMethodR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shipping_method_postal_code_rules`),
		qm.WhereIn(`shipping_method_postal_code_rules.shippingmethodid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load shipping_method_postal_code_rules")
	}

	var resultSlice []*ShippingMethodPostalCodeRule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice shipping_method_postal_code_rules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on shipping_method_postal_code_rules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shipping_method_postal_code_rules")
	}

	if len(shippingMethodPostalCodeRuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ShippingmethodidShippingMethodPostalCodeRules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &shippingMethodPostalCodeRuleR{}
			}
			foreign.R.ShippingmethodidShippingMethod = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Shippingmethodid) {
				local.R.ShippingmethodidShippingMethodPostalCodeRules = append(local.R.ShippingmethodidShippingMethodPostalCodeRules, foreign)
				if foreign.R == nil {
					foreign.R = &shippingMethodPostalCodeRuleR{}
				}
				foreign.R.ShippingmethodidShippingMethod = local
				break
			}
		}
	}

	return nil
}

// SetShippingzoneidShippingZone of the shippingMethod to the related item.
// Sets o.R.ShippingzoneidShippingZone to related.
// Adds o to related.R.ShippingzoneidShippingMethods.
func (o *ShippingMethod) SetShippingzoneidShippingZone(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShippingZone) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"shipping_methods\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shippingzoneid"}),
		strmangle.WhereClause("\"", "\"", 2, shippingMethodPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Shippingzoneid, related.ID)
	if o.R == nil {
		o.R = &shippingMethodR{
			ShippingzoneidShippingZone: related,
		}
	} else {
		o.R.ShippingzoneidShippingZone = related
	}

	if related.R == nil {
		related.R = &shippingZoneR{
			ShippingzoneidShippingMethods: ShippingMethodSlice{o},
		}
	} else {
		related.R.ShippingzoneidShippingMethods = append(related.R.ShippingzoneidShippingMethods, o)
	}

	return nil
}

// RemoveShippingzoneidShippingZone relationship.
// Sets o.R.ShippingzoneidShippingZone to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ShippingMethod) RemoveShippingzoneidShippingZone(ctx context.Context, exec boil.ContextExecutor, related *ShippingZone) error {
	var err error

	queries.SetScanner(&o.Shippingzoneid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("shippingzoneid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ShippingzoneidShippingZone = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ShippingzoneidShippingMethods {
		if queries.Equal(o.Shippingzoneid, ri.Shippingzoneid) {
			continue
		}

		ln := len(related.R.ShippingzoneidShippingMethods)
		if ln > 1 && i < ln-1 {
			related.R.ShippingzoneidShippingMethods[i] = related.R.ShippingzoneidShippingMethods[ln-1]
		}
		related.R.ShippingzoneidShippingMethods = related.R.ShippingzoneidShippingMethods[:ln-1]
		break
	}
	return nil
}

// AddShippingmethodidCheckouts adds the given related objects to the existing relationships
// of the shipping_method, optionally inserting them as new records.
// Appends related to o.R.ShippingmethodidCheckouts.
// Sets related.R.ShippingmethodidShippingMethod appropriately.
func (o *ShippingMethod) AddShippingmethodidCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Shippingmethodid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shippingmethodid"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Shippingmethodid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shippingMethodR{
			ShippingmethodidCheckouts: related,
		}
	} else {
		o.R.ShippingmethodidCheckouts = append(o.R.ShippingmethodidCheckouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutR{
				ShippingmethodidShippingMethod: o,
			}
		} else {
			rel.R.ShippingmethodidShippingMethod = o
		}
	}
	return nil
}

// SetShippingmethodidCheckouts removes all previously related items of the
// shipping_method replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShippingmethodidShippingMethod's ShippingmethodidCheckouts accordingly.
// Replaces o.R.ShippingmethodidCheckouts with related.
// Sets related.R.ShippingmethodidShippingMethod's ShippingmethodidCheckouts accordingly.
func (o *ShippingMethod) SetShippingmethodidCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	query := "update \"checkouts\" set \"shippingmethodid\" = null where \"shippingmethodid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ShippingmethodidCheckouts {
			queries.SetScanner(&rel.Shippingmethodid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShippingmethodidShippingMethod = nil
		}
		o.R.ShippingmethodidCheckouts = nil
	}

	return o.AddShippingmethodidCheckouts(ctx, exec, insert, related...)
}

// RemoveShippingmethodidCheckouts relationships from objects passed in.
// Removes related items from R.ShippingmethodidCheckouts (uses pointer comparison, removal does not keep order)
// Sets related.R.ShippingmethodidShippingMethod.
func (o *ShippingMethod) RemoveShippingmethodidCheckouts(ctx context.Context, exec boil.ContextExecutor, related ...*Checkout) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Shippingmethodid, nil)
		if rel.R != nil {
			rel.R.ShippingmethodidShippingMethod = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shippingmethodid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ShippingmethodidCheckouts {
			if rel != ri {
				continue
			}

			ln := len(o.R.ShippingmethodidCheckouts)
			if ln > 1 && i < ln-1 {
				o.R.ShippingmethodidCheckouts[i] = o.R.ShippingmethodidCheckouts[ln-1]
			}
			o.R.ShippingmethodidCheckouts = o.R.ShippingmethodidCheckouts[:ln-1]
			break
		}
	}

	return nil
}

// AddShippingmethodidOrders adds the given related objects to the existing relationships
// of the shipping_method, optionally inserting them as new records.
// Appends related to o.R.ShippingmethodidOrders.
// Sets related.R.ShippingmethodidShippingMethod appropriately.
func (o *ShippingMethod) AddShippingmethodidOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Shippingmethodid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shippingmethodid"}),
				strmangle.WhereClause("\"", "\"", 2, orderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Shippingmethodid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shippingMethodR{
			ShippingmethodidOrders: related,
		}
	} else {
		o.R.ShippingmethodidOrders = append(o.R.ShippingmethodidOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderR{
				ShippingmethodidShippingMethod: o,
			}
		} else {
			rel.R.ShippingmethodidShippingMethod = o
		}
	}
	return nil
}

// SetShippingmethodidOrders removes all previously related items of the
// shipping_method replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShippingmethodidShippingMethod's ShippingmethodidOrders accordingly.
// Replaces o.R.ShippingmethodidOrders with related.
// Sets related.R.ShippingmethodidShippingMethod's ShippingmethodidOrders accordingly.
func (o *ShippingMethod) SetShippingmethodidOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Order) error {
	query := "update \"orders\" set \"shippingmethodid\" = null where \"shippingmethodid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ShippingmethodidOrders {
			queries.SetScanner(&rel.Shippingmethodid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShippingmethodidShippingMethod = nil
		}
		o.R.ShippingmethodidOrders = nil
	}

	return o.AddShippingmethodidOrders(ctx, exec, insert, related...)
}

// RemoveShippingmethodidOrders relationships from objects passed in.
// Removes related items from R.ShippingmethodidOrders (uses pointer comparison, removal does not keep order)
// Sets related.R.ShippingmethodidShippingMethod.
func (o *ShippingMethod) RemoveShippingmethodidOrders(ctx context.Context, exec boil.ContextExecutor, related ...*Order) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Shippingmethodid, nil)
		if rel.R != nil {
			rel.R.ShippingmethodidShippingMethod = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shippingmethodid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ShippingmethodidOrders {
			if rel != ri {
				continue
			}

			ln := len(o.R.ShippingmethodidOrders)
			if ln > 1 && i < ln-1 {
				o.R.ShippingmethodidOrders[i] = o.R.ShippingmethodidOrders[ln-1]
			}
			o.R.ShippingmethodidOrders = o.R.ShippingmethodidOrders[:ln-1]
			break
		}
	}

	return nil
}

// AddShippingmethodidShippingMethodChannelListings adds the given related objects to the existing relationships
// of the shipping_method, optionally inserting them as new records.
// Appends related to o.R.ShippingmethodidShippingMethodChannelListings.
// Sets related.R.ShippingmethodidShippingMethod appropriately.
func (o *ShippingMethod) AddShippingmethodidShippingMethodChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Shippingmethodid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_method_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shippingmethodid"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Shippingmethodid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shippingMethodR{
			ShippingmethodidShippingMethodChannelListings: related,
		}
	} else {
		o.R.ShippingmethodidShippingMethodChannelListings = append(o.R.ShippingmethodidShippingMethodChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodChannelListingR{
				ShippingmethodidShippingMethod: o,
			}
		} else {
			rel.R.ShippingmethodidShippingMethod = o
		}
	}
	return nil
}

// SetShippingmethodidShippingMethodChannelListings removes all previously related items of the
// shipping_method replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShippingmethodidShippingMethod's ShippingmethodidShippingMethodChannelListings accordingly.
// Replaces o.R.ShippingmethodidShippingMethodChannelListings with related.
// Sets related.R.ShippingmethodidShippingMethod's ShippingmethodidShippingMethodChannelListings accordingly.
func (o *ShippingMethod) SetShippingmethodidShippingMethodChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodChannelListing) error {
	query := "update \"shipping_method_channel_listings\" set \"shippingmethodid\" = null where \"shippingmethodid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ShippingmethodidShippingMethodChannelListings {
			queries.SetScanner(&rel.Shippingmethodid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShippingmethodidShippingMethod = nil
		}
		o.R.ShippingmethodidShippingMethodChannelListings = nil
	}

	return o.AddShippingmethodidShippingMethodChannelListings(ctx, exec, insert, related...)
}

// RemoveShippingmethodidShippingMethodChannelListings relationships from objects passed in.
// Removes related items from R.ShippingmethodidShippingMethodChannelListings (uses pointer comparison, removal does not keep order)
// Sets related.R.ShippingmethodidShippingMethod.
func (o *ShippingMethod) RemoveShippingmethodidShippingMethodChannelListings(ctx context.Context, exec boil.ContextExecutor, related ...*ShippingMethodChannelListing) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Shippingmethodid, nil)
		if rel.R != nil {
			rel.R.ShippingmethodidShippingMethod = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shippingmethodid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ShippingmethodidShippingMethodChannelListings {
			if rel != ri {
				continue
			}

			ln := len(o.R.ShippingmethodidShippingMethodChannelListings)
			if ln > 1 && i < ln-1 {
				o.R.ShippingmethodidShippingMethodChannelListings[i] = o.R.ShippingmethodidShippingMethodChannelListings[ln-1]
			}
			o.R.ShippingmethodidShippingMethodChannelListings = o.R.ShippingmethodidShippingMethodChannelListings[:ln-1]
			break
		}
	}

	return nil
}

// AddShippingmethodidShippingMethodExcludedProducts adds the given related objects to the existing relationships
// of the shipping_method, optionally inserting them as new records.
// Appends related to o.R.ShippingmethodidShippingMethodExcludedProducts.
// Sets related.R.ShippingmethodidShippingMethod appropriately.
func (o *ShippingMethod) AddShippingmethodidShippingMethodExcludedProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodExcludedProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Shippingmethodid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_method_excluded_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shippingmethodid"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodExcludedProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Shippingmethodid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shippingMethodR{
			ShippingmethodidShippingMethodExcludedProducts: related,
		}
	} else {
		o.R.ShippingmethodidShippingMethodExcludedProducts = append(o.R.ShippingmethodidShippingMethodExcludedProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodExcludedProductR{
				ShippingmethodidShippingMethod: o,
			}
		} else {
			rel.R.ShippingmethodidShippingMethod = o
		}
	}
	return nil
}

// SetShippingmethodidShippingMethodExcludedProducts removes all previously related items of the
// shipping_method replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShippingmethodidShippingMethod's ShippingmethodidShippingMethodExcludedProducts accordingly.
// Replaces o.R.ShippingmethodidShippingMethodExcludedProducts with related.
// Sets related.R.ShippingmethodidShippingMethod's ShippingmethodidShippingMethodExcludedProducts accordingly.
func (o *ShippingMethod) SetShippingmethodidShippingMethodExcludedProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodExcludedProduct) error {
	query := "update \"shipping_method_excluded_products\" set \"shippingmethodid\" = null where \"shippingmethodid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ShippingmethodidShippingMethodExcludedProducts {
			queries.SetScanner(&rel.Shippingmethodid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShippingmethodidShippingMethod = nil
		}
		o.R.ShippingmethodidShippingMethodExcludedProducts = nil
	}

	return o.AddShippingmethodidShippingMethodExcludedProducts(ctx, exec, insert, related...)
}

// RemoveShippingmethodidShippingMethodExcludedProducts relationships from objects passed in.
// Removes related items from R.ShippingmethodidShippingMethodExcludedProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.ShippingmethodidShippingMethod.
func (o *ShippingMethod) RemoveShippingmethodidShippingMethodExcludedProducts(ctx context.Context, exec boil.ContextExecutor, related ...*ShippingMethodExcludedProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Shippingmethodid, nil)
		if rel.R != nil {
			rel.R.ShippingmethodidShippingMethod = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shippingmethodid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ShippingmethodidShippingMethodExcludedProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.ShippingmethodidShippingMethodExcludedProducts)
			if ln > 1 && i < ln-1 {
				o.R.ShippingmethodidShippingMethodExcludedProducts[i] = o.R.ShippingmethodidShippingMethodExcludedProducts[ln-1]
			}
			o.R.ShippingmethodidShippingMethodExcludedProducts = o.R.ShippingmethodidShippingMethodExcludedProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddShippingmethodidShippingMethodPostalCodeRules adds the given related objects to the existing relationships
// of the shipping_method, optionally inserting them as new records.
// Appends related to o.R.ShippingmethodidShippingMethodPostalCodeRules.
// Sets related.R.ShippingmethodidShippingMethod appropriately.
func (o *ShippingMethod) AddShippingmethodidShippingMethodPostalCodeRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodPostalCodeRule) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Shippingmethodid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"shipping_method_postal_code_rules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shippingmethodid"}),
				strmangle.WhereClause("\"", "\"", 2, shippingMethodPostalCodeRulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Shippingmethodid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shippingMethodR{
			ShippingmethodidShippingMethodPostalCodeRules: related,
		}
	} else {
		o.R.ShippingmethodidShippingMethodPostalCodeRules = append(o.R.ShippingmethodidShippingMethodPostalCodeRules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &shippingMethodPostalCodeRuleR{
				ShippingmethodidShippingMethod: o,
			}
		} else {
			rel.R.ShippingmethodidShippingMethod = o
		}
	}
	return nil
}

// SetShippingmethodidShippingMethodPostalCodeRules removes all previously related items of the
// shipping_method replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShippingmethodidShippingMethod's ShippingmethodidShippingMethodPostalCodeRules accordingly.
// Replaces o.R.ShippingmethodidShippingMethodPostalCodeRules with related.
// Sets related.R.ShippingmethodidShippingMethod's ShippingmethodidShippingMethodPostalCodeRules accordingly.
func (o *ShippingMethod) SetShippingmethodidShippingMethodPostalCodeRules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ShippingMethodPostalCodeRule) error {
	query := "update \"shipping_method_postal_code_rules\" set \"shippingmethodid\" = null where \"shippingmethodid\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ShippingmethodidShippingMethodPostalCodeRules {
			queries.SetScanner(&rel.Shippingmethodid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShippingmethodidShippingMethod = nil
		}
		o.R.ShippingmethodidShippingMethodPostalCodeRules = nil
	}

	return o.AddShippingmethodidShippingMethodPostalCodeRules(ctx, exec, insert, related...)
}

// RemoveShippingmethodidShippingMethodPostalCodeRules relationships from objects passed in.
// Removes related items from R.ShippingmethodidShippingMethodPostalCodeRules (uses pointer comparison, removal does not keep order)
// Sets related.R.ShippingmethodidShippingMethod.
func (o *ShippingMethod) RemoveShippingmethodidShippingMethodPostalCodeRules(ctx context.Context, exec boil.ContextExecutor, related ...*ShippingMethodPostalCodeRule) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Shippingmethodid, nil)
		if rel.R != nil {
			rel.R.ShippingmethodidShippingMethod = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shippingmethodid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ShippingmethodidShippingMethodPostalCodeRules {
			if rel != ri {
				continue
			}

			ln := len(o.R.ShippingmethodidShippingMethodPostalCodeRules)
			if ln > 1 && i < ln-1 {
				o.R.ShippingmethodidShippingMethodPostalCodeRules[i] = o.R.ShippingmethodidShippingMethodPostalCodeRules[ln-1]
			}
			o.R.ShippingmethodidShippingMethodPostalCodeRules = o.R.ShippingmethodidShippingMethodPostalCodeRules[:ln-1]
			break
		}
	}

	return nil
}

// ShippingMethods retrieves all the records using an executor.
func ShippingMethods(mods ...qm.QueryMod) shippingMethodQuery {
	mods = append(mods, qm.From("\"shipping_methods\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"shipping_methods\".*"})
	}

	return shippingMethodQuery{q}
}

// FindShippingMethod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShippingMethod(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ShippingMethod, error) {
	shippingMethodObj := &ShippingMethod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shipping_methods\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shippingMethodObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shipping_methods")
	}

	if err = shippingMethodObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shippingMethodObj, err
	}

	return shippingMethodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShippingMethod) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shipping_methods provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shippingMethodInsertCacheMut.RLock()
	cache, cached := shippingMethodInsertCache[key]
	shippingMethodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shippingMethodAllColumns,
			shippingMethodColumnsWithDefault,
			shippingMethodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shipping_methods\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shipping_methods\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shipping_methods")
	}

	if !cached {
		shippingMethodInsertCacheMut.Lock()
		shippingMethodInsertCache[key] = cache
		shippingMethodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShippingMethod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShippingMethod) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shippingMethodUpdateCacheMut.RLock()
	cache, cached := shippingMethodUpdateCache[key]
	shippingMethodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shippingMethodAllColumns,
			shippingMethodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shipping_methods, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shipping_methods\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shippingMethodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, append(wl, shippingMethodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shipping_methods row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shipping_methods")
	}

	if !cached {
		shippingMethodUpdateCacheMut.Lock()
		shippingMethodUpdateCache[key] = cache
		shippingMethodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shippingMethodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shipping_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shipping_methods")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShippingMethodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shipping_methods\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shippingMethodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shippingMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shippingMethod")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShippingMethod) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shipping_methods provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shippingMethodColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shippingMethodUpsertCacheMut.RLock()
	cache, cached := shippingMethodUpsertCache[key]
	shippingMethodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shippingMethodAllColumns,
			shippingMethodColumnsWithDefault,
			shippingMethodColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			shippingMethodAllColumns,
			shippingMethodPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shipping_methods, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shippingMethodPrimaryKeyColumns))
			copy(conflict, shippingMethodPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shipping_methods\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shippingMethodType, shippingMethodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shipping_methods")
	}

	if !cached {
		shippingMethodUpsertCacheMut.Lock()
		shippingMethodUpsertCache[key] = cache
		shippingMethodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShippingMethod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShippingMethod) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShippingMethod provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shippingMethodPrimaryKeyMapping)
	sql := "DELETE FROM \"shipping_methods\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shipping_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shipping_methods")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shippingMethodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shippingMethodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shipping_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shipping_methods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShippingMethodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shippingMethodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shipping_methods\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shippingMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shipping_methods")
	}

	if len(shippingMethodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShippingMethod) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShippingMethod(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShippingMethodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShippingMethodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shippingMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shipping_methods\".* FROM \"shipping_methods\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shippingMethodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShippingMethodSlice")
	}

	*o = slice

	return nil
}

// ShippingMethodExists checks if the ShippingMethod row exists.
func ShippingMethodExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shipping_methods\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shipping_methods exists")
	}

	return exists, nil
}

// Exists checks if the ShippingMethod row exists.
func (o *ShippingMethod) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ShippingMethodExists(ctx, exec, o.ID)
}
