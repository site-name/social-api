// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVoucherChannelListings(t *testing.T) {
	t.Parallel()

	query := VoucherChannelListings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVoucherChannelListingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherChannelListingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := VoucherChannelListings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherChannelListingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherChannelListingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := VoucherChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVoucherChannelListingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VoucherChannelListingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if VoucherChannelListing exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VoucherChannelListingExists to return true, but got false.")
	}
}

func testVoucherChannelListingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	voucherChannelListingFound, err := FindVoucherChannelListing(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if voucherChannelListingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVoucherChannelListingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = VoucherChannelListings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVoucherChannelListingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := VoucherChannelListings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVoucherChannelListingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	voucherChannelListingOne := &VoucherChannelListing{}
	voucherChannelListingTwo := &VoucherChannelListing{}
	if err = randomize.Struct(seed, voucherChannelListingOne, voucherChannelListingDBTypes, false, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherChannelListingTwo, voucherChannelListingDBTypes, false, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherChannelListingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherChannelListingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoucherChannelListings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVoucherChannelListingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	voucherChannelListingOne := &VoucherChannelListing{}
	voucherChannelListingTwo := &VoucherChannelListing{}
	if err = randomize.Struct(seed, voucherChannelListingOne, voucherChannelListingDBTypes, false, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}
	if err = randomize.Struct(seed, voucherChannelListingTwo, voucherChannelListingDBTypes, false, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = voucherChannelListingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = voucherChannelListingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func voucherChannelListingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherChannelListing) error {
	*o = VoucherChannelListing{}
	return nil
}

func voucherChannelListingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherChannelListing) error {
	*o = VoucherChannelListing{}
	return nil
}

func voucherChannelListingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *VoucherChannelListing) error {
	*o = VoucherChannelListing{}
	return nil
}

func voucherChannelListingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoucherChannelListing) error {
	*o = VoucherChannelListing{}
	return nil
}

func voucherChannelListingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *VoucherChannelListing) error {
	*o = VoucherChannelListing{}
	return nil
}

func voucherChannelListingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoucherChannelListing) error {
	*o = VoucherChannelListing{}
	return nil
}

func voucherChannelListingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *VoucherChannelListing) error {
	*o = VoucherChannelListing{}
	return nil
}

func voucherChannelListingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherChannelListing) error {
	*o = VoucherChannelListing{}
	return nil
}

func voucherChannelListingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *VoucherChannelListing) error {
	*o = VoucherChannelListing{}
	return nil
}

func testVoucherChannelListingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &VoucherChannelListing{}
	o := &VoucherChannelListing{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing object: %s", err)
	}

	AddVoucherChannelListingHook(boil.BeforeInsertHook, voucherChannelListingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	voucherChannelListingBeforeInsertHooks = []VoucherChannelListingHook{}

	AddVoucherChannelListingHook(boil.AfterInsertHook, voucherChannelListingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	voucherChannelListingAfterInsertHooks = []VoucherChannelListingHook{}

	AddVoucherChannelListingHook(boil.AfterSelectHook, voucherChannelListingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	voucherChannelListingAfterSelectHooks = []VoucherChannelListingHook{}

	AddVoucherChannelListingHook(boil.BeforeUpdateHook, voucherChannelListingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	voucherChannelListingBeforeUpdateHooks = []VoucherChannelListingHook{}

	AddVoucherChannelListingHook(boil.AfterUpdateHook, voucherChannelListingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	voucherChannelListingAfterUpdateHooks = []VoucherChannelListingHook{}

	AddVoucherChannelListingHook(boil.BeforeDeleteHook, voucherChannelListingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	voucherChannelListingBeforeDeleteHooks = []VoucherChannelListingHook{}

	AddVoucherChannelListingHook(boil.AfterDeleteHook, voucherChannelListingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	voucherChannelListingAfterDeleteHooks = []VoucherChannelListingHook{}

	AddVoucherChannelListingHook(boil.BeforeUpsertHook, voucherChannelListingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	voucherChannelListingBeforeUpsertHooks = []VoucherChannelListingHook{}

	AddVoucherChannelListingHook(boil.AfterUpsertHook, voucherChannelListingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	voucherChannelListingAfterUpsertHooks = []VoucherChannelListingHook{}
}

func testVoucherChannelListingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherChannelListingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(voucherChannelListingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := VoucherChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVoucherChannelListingToOneChannelUsingChannelidChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VoucherChannelListing
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voucherChannelListingDBTypes, false, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Channelid = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ChannelidChannel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddChannelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VoucherChannelListingSlice{&local}
	if err = local.L.LoadChannelidChannel(ctx, tx, false, (*[]*VoucherChannelListing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelidChannel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ChannelidChannel = nil
	if err = local.L.LoadChannelidChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ChannelidChannel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVoucherChannelListingToOneVoucherUsingVoucheridVoucher(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local VoucherChannelListing
	var foreign Voucher

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, voucherChannelListingDBTypes, false, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, voucherDBTypes, false, voucherColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Voucher struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Voucherid = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.VoucheridVoucher().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddVoucherHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Voucher) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := VoucherChannelListingSlice{&local}
	if err = local.L.LoadVoucheridVoucher(ctx, tx, false, (*[]*VoucherChannelListing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VoucheridVoucher == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VoucheridVoucher = nil
	if err = local.L.LoadVoucheridVoucher(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.VoucheridVoucher == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testVoucherChannelListingToOneSetOpChannelUsingChannelidChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherChannelListing
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherChannelListingDBTypes, false, strmangle.SetComplement(voucherChannelListingPrimaryKeyColumns, voucherChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannelidChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ChannelidChannel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChannelidVoucherChannelListings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Channelid != x.ID {
			t.Error("foreign key was wrong value", a.Channelid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Channelid))
		reflect.Indirect(reflect.ValueOf(&a.Channelid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Channelid != x.ID {
			t.Error("foreign key was wrong value", a.Channelid, x.ID)
		}
	}
}
func testVoucherChannelListingToOneSetOpVoucherUsingVoucheridVoucher(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a VoucherChannelListing
	var b, c Voucher

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, voucherChannelListingDBTypes, false, strmangle.SetComplement(voucherChannelListingPrimaryKeyColumns, voucherChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, voucherDBTypes, false, strmangle.SetComplement(voucherPrimaryKeyColumns, voucherColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Voucher{&b, &c} {
		err = a.SetVoucheridVoucher(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VoucheridVoucher != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VoucheridVoucherChannelListings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Voucherid != x.ID {
			t.Error("foreign key was wrong value", a.Voucherid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Voucherid))
		reflect.Indirect(reflect.ValueOf(&a.Voucherid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Voucherid != x.ID {
			t.Error("foreign key was wrong value", a.Voucherid, x.ID)
		}
	}
}

func testVoucherChannelListingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoucherChannelListingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VoucherChannelListingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVoucherChannelListingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := VoucherChannelListings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	voucherChannelListingDBTypes = map[string]string{`ID`: `character varying`, `Createat`: `bigint`, `Voucherid`: `character varying`, `Channelid`: `character varying`, `Discountvalue`: `double precision`, `Currency`: `character varying`, `Minspenamount`: `double precision`}
	_                            = bytes.MinRead
)

func testVoucherChannelListingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(voucherChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(voucherChannelListingAllColumns) == len(voucherChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVoucherChannelListingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(voucherChannelListingAllColumns) == len(voucherChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &VoucherChannelListing{}
	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := VoucherChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, voucherChannelListingDBTypes, true, voucherChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(voucherChannelListingAllColumns, voucherChannelListingPrimaryKeyColumns) {
		fields = voucherChannelListingAllColumns
	} else {
		fields = strmangle.SetComplement(
			voucherChannelListingAllColumns,
			voucherChannelListingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VoucherChannelListingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVoucherChannelListingsUpsert(t *testing.T) {
	t.Parallel()

	if len(voucherChannelListingAllColumns) == len(voucherChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := VoucherChannelListing{}
	if err = randomize.Struct(seed, &o, voucherChannelListingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoucherChannelListing: %s", err)
	}

	count, err := VoucherChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, voucherChannelListingDBTypes, false, voucherChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize VoucherChannelListing struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert VoucherChannelListing: %s", err)
	}

	count, err = VoucherChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
