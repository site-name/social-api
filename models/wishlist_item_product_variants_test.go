// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWishlistItemProductVariants(t *testing.T) {
	t.Parallel()

	query := WishlistItemProductVariants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWishlistItemProductVariantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWishlistItemProductVariantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := WishlistItemProductVariants().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWishlistItemProductVariantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WishlistItemProductVariantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWishlistItemProductVariantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WishlistItemProductVariantExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if WishlistItemProductVariant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WishlistItemProductVariantExists to return true, but got false.")
	}
}

func testWishlistItemProductVariantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	wishlistItemProductVariantFound, err := FindWishlistItemProductVariant(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if wishlistItemProductVariantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWishlistItemProductVariantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = WishlistItemProductVariants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWishlistItemProductVariantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := WishlistItemProductVariants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWishlistItemProductVariantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	wishlistItemProductVariantOne := &WishlistItemProductVariant{}
	wishlistItemProductVariantTwo := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, wishlistItemProductVariantOne, wishlistItemProductVariantDBTypes, false, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}
	if err = randomize.Struct(seed, wishlistItemProductVariantTwo, wishlistItemProductVariantDBTypes, false, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = wishlistItemProductVariantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = wishlistItemProductVariantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WishlistItemProductVariants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWishlistItemProductVariantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	wishlistItemProductVariantOne := &WishlistItemProductVariant{}
	wishlistItemProductVariantTwo := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, wishlistItemProductVariantOne, wishlistItemProductVariantDBTypes, false, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}
	if err = randomize.Struct(seed, wishlistItemProductVariantTwo, wishlistItemProductVariantDBTypes, false, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = wishlistItemProductVariantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = wishlistItemProductVariantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func wishlistItemProductVariantBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItemProductVariant) error {
	*o = WishlistItemProductVariant{}
	return nil
}

func wishlistItemProductVariantAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItemProductVariant) error {
	*o = WishlistItemProductVariant{}
	return nil
}

func wishlistItemProductVariantAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItemProductVariant) error {
	*o = WishlistItemProductVariant{}
	return nil
}

func wishlistItemProductVariantBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItemProductVariant) error {
	*o = WishlistItemProductVariant{}
	return nil
}

func wishlistItemProductVariantAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItemProductVariant) error {
	*o = WishlistItemProductVariant{}
	return nil
}

func wishlistItemProductVariantBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItemProductVariant) error {
	*o = WishlistItemProductVariant{}
	return nil
}

func wishlistItemProductVariantAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItemProductVariant) error {
	*o = WishlistItemProductVariant{}
	return nil
}

func wishlistItemProductVariantBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItemProductVariant) error {
	*o = WishlistItemProductVariant{}
	return nil
}

func wishlistItemProductVariantAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WishlistItemProductVariant) error {
	*o = WishlistItemProductVariant{}
	return nil
}

func testWishlistItemProductVariantsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &WishlistItemProductVariant{}
	o := &WishlistItemProductVariant{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant object: %s", err)
	}

	AddWishlistItemProductVariantHook(boil.BeforeInsertHook, wishlistItemProductVariantBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	wishlistItemProductVariantBeforeInsertHooks = []WishlistItemProductVariantHook{}

	AddWishlistItemProductVariantHook(boil.AfterInsertHook, wishlistItemProductVariantAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	wishlistItemProductVariantAfterInsertHooks = []WishlistItemProductVariantHook{}

	AddWishlistItemProductVariantHook(boil.AfterSelectHook, wishlistItemProductVariantAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	wishlistItemProductVariantAfterSelectHooks = []WishlistItemProductVariantHook{}

	AddWishlistItemProductVariantHook(boil.BeforeUpdateHook, wishlistItemProductVariantBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	wishlistItemProductVariantBeforeUpdateHooks = []WishlistItemProductVariantHook{}

	AddWishlistItemProductVariantHook(boil.AfterUpdateHook, wishlistItemProductVariantAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	wishlistItemProductVariantAfterUpdateHooks = []WishlistItemProductVariantHook{}

	AddWishlistItemProductVariantHook(boil.BeforeDeleteHook, wishlistItemProductVariantBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	wishlistItemProductVariantBeforeDeleteHooks = []WishlistItemProductVariantHook{}

	AddWishlistItemProductVariantHook(boil.AfterDeleteHook, wishlistItemProductVariantAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	wishlistItemProductVariantAfterDeleteHooks = []WishlistItemProductVariantHook{}

	AddWishlistItemProductVariantHook(boil.BeforeUpsertHook, wishlistItemProductVariantBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	wishlistItemProductVariantBeforeUpsertHooks = []WishlistItemProductVariantHook{}

	AddWishlistItemProductVariantHook(boil.AfterUpsertHook, wishlistItemProductVariantAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	wishlistItemProductVariantAfterUpsertHooks = []WishlistItemProductVariantHook{}
}

func testWishlistItemProductVariantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWishlistItemProductVariantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(wishlistItemProductVariantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWishlistItemProductVariantToOneProductVariantUsingProductvariantidProductVariant(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WishlistItemProductVariant
	var foreign ProductVariant

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productVariantDBTypes, false, productVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductVariant struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Productvariantid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProductvariantidProductVariant().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductVariantHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ProductVariant) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := WishlistItemProductVariantSlice{&local}
	if err = local.L.LoadProductvariantidProductVariant(ctx, tx, false, (*[]*WishlistItemProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductvariantidProductVariant == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProductvariantidProductVariant = nil
	if err = local.L.LoadProductvariantidProductVariant(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProductvariantidProductVariant == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testWishlistItemProductVariantToOneWishlistItemUsingWishlistitemidWishlistItem(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WishlistItemProductVariant
	var foreign WishlistItem

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, wishlistItemDBTypes, false, wishlistItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItem struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Wishlistitemid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.WishlistitemidWishlistItem().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddWishlistItemHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *WishlistItem) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := WishlistItemProductVariantSlice{&local}
	if err = local.L.LoadWishlistitemidWishlistItem(ctx, tx, false, (*[]*WishlistItemProductVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WishlistitemidWishlistItem == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.WishlistitemidWishlistItem = nil
	if err = local.L.LoadWishlistitemidWishlistItem(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.WishlistitemidWishlistItem == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testWishlistItemProductVariantToOneSetOpProductVariantUsingProductvariantidProductVariant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItemProductVariant
	var b, c ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemProductVariantDBTypes, false, strmangle.SetComplement(wishlistItemProductVariantPrimaryKeyColumns, wishlistItemProductVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductVariant{&b, &c} {
		err = a.SetProductvariantidProductVariant(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProductvariantidProductVariant != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProductvariantidWishlistItemProductVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Productvariantid, x.ID) {
			t.Error("foreign key was wrong value", a.Productvariantid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Productvariantid))
		reflect.Indirect(reflect.ValueOf(&a.Productvariantid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Productvariantid, x.ID) {
			t.Error("foreign key was wrong value", a.Productvariantid, x.ID)
		}
	}
}

func testWishlistItemProductVariantToOneRemoveOpProductVariantUsingProductvariantidProductVariant(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItemProductVariant
	var b ProductVariant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemProductVariantDBTypes, false, strmangle.SetComplement(wishlistItemProductVariantPrimaryKeyColumns, wishlistItemProductVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productVariantDBTypes, false, strmangle.SetComplement(productVariantPrimaryKeyColumns, productVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProductvariantidProductVariant(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProductvariantidProductVariant(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProductvariantidProductVariant().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProductvariantidProductVariant != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Productvariantid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProductvariantidWishlistItemProductVariants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWishlistItemProductVariantToOneSetOpWishlistItemUsingWishlistitemidWishlistItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItemProductVariant
	var b, c WishlistItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemProductVariantDBTypes, false, strmangle.SetComplement(wishlistItemProductVariantPrimaryKeyColumns, wishlistItemProductVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*WishlistItem{&b, &c} {
		err = a.SetWishlistitemidWishlistItem(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.WishlistitemidWishlistItem != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WishlistitemidWishlistItemProductVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Wishlistitemid, x.ID) {
			t.Error("foreign key was wrong value", a.Wishlistitemid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Wishlistitemid))
		reflect.Indirect(reflect.ValueOf(&a.Wishlistitemid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Wishlistitemid, x.ID) {
			t.Error("foreign key was wrong value", a.Wishlistitemid, x.ID)
		}
	}
}

func testWishlistItemProductVariantToOneRemoveOpWishlistItemUsingWishlistitemidWishlistItem(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WishlistItemProductVariant
	var b WishlistItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, wishlistItemProductVariantDBTypes, false, strmangle.SetComplement(wishlistItemProductVariantPrimaryKeyColumns, wishlistItemProductVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, wishlistItemDBTypes, false, strmangle.SetComplement(wishlistItemPrimaryKeyColumns, wishlistItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetWishlistitemidWishlistItem(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveWishlistitemidWishlistItem(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.WishlistitemidWishlistItem().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.WishlistitemidWishlistItem != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Wishlistitemid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.WishlistitemidWishlistItemProductVariants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWishlistItemProductVariantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWishlistItemProductVariantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WishlistItemProductVariantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWishlistItemProductVariantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WishlistItemProductVariants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	wishlistItemProductVariantDBTypes = map[string]string{`ID`: `character varying`, `Wishlistitemid`: `character varying`, `Productvariantid`: `character varying`}
	_                                 = bytes.MinRead
)

func testWishlistItemProductVariantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(wishlistItemProductVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(wishlistItemProductVariantAllColumns) == len(wishlistItemProductVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWishlistItemProductVariantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(wishlistItemProductVariantAllColumns) == len(wishlistItemProductVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WishlistItemProductVariant{}
	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, wishlistItemProductVariantDBTypes, true, wishlistItemProductVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(wishlistItemProductVariantAllColumns, wishlistItemProductVariantPrimaryKeyColumns) {
		fields = wishlistItemProductVariantAllColumns
	} else {
		fields = strmangle.SetComplement(
			wishlistItemProductVariantAllColumns,
			wishlistItemProductVariantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WishlistItemProductVariantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWishlistItemProductVariantsUpsert(t *testing.T) {
	t.Parallel()

	if len(wishlistItemProductVariantAllColumns) == len(wishlistItemProductVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := WishlistItemProductVariant{}
	if err = randomize.Struct(seed, &o, wishlistItemProductVariantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WishlistItemProductVariant: %s", err)
	}

	count, err := WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, wishlistItemProductVariantDBTypes, false, wishlistItemProductVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WishlistItemProductVariant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WishlistItemProductVariant: %s", err)
	}

	count, err = WishlistItemProductVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
