// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WishlistItemProductVariant is an object representing the database table.
type WishlistItemProductVariant struct {
	ID               string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Wishlistitemid   null.String `boil:"wishlistitemid" json:"wishlistitemid,omitempty" toml:"wishlistitemid" yaml:"wishlistitemid,omitempty"`
	Productvariantid null.String `boil:"productvariantid" json:"productvariantid,omitempty" toml:"productvariantid" yaml:"productvariantid,omitempty"`

	R *wishlistItemProductVariantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L wishlistItemProductVariantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WishlistItemProductVariantColumns = struct {
	ID               string
	Wishlistitemid   string
	Productvariantid string
}{
	ID:               "id",
	Wishlistitemid:   "wishlistitemid",
	Productvariantid: "productvariantid",
}

var WishlistItemProductVariantTableColumns = struct {
	ID               string
	Wishlistitemid   string
	Productvariantid string
}{
	ID:               "wishlist_item_product_variants.id",
	Wishlistitemid:   "wishlist_item_product_variants.wishlistitemid",
	Productvariantid: "wishlist_item_product_variants.productvariantid",
}

// Generated where

var WishlistItemProductVariantWhere = struct {
	ID               whereHelperstring
	Wishlistitemid   whereHelpernull_String
	Productvariantid whereHelpernull_String
}{
	ID:               whereHelperstring{field: "\"wishlist_item_product_variants\".\"id\""},
	Wishlistitemid:   whereHelpernull_String{field: "\"wishlist_item_product_variants\".\"wishlistitemid\""},
	Productvariantid: whereHelpernull_String{field: "\"wishlist_item_product_variants\".\"productvariantid\""},
}

// WishlistItemProductVariantRels is where relationship names are stored.
var WishlistItemProductVariantRels = struct {
	ProductvariantidProductVariant string
	WishlistitemidWishlistItem     string
}{
	ProductvariantidProductVariant: "ProductvariantidProductVariant",
	WishlistitemidWishlistItem:     "WishlistitemidWishlistItem",
}

// wishlistItemProductVariantR is where relationships are stored.
type wishlistItemProductVariantR struct {
	ProductvariantidProductVariant *ProductVariant `boil:"ProductvariantidProductVariant" json:"ProductvariantidProductVariant" toml:"ProductvariantidProductVariant" yaml:"ProductvariantidProductVariant"`
	WishlistitemidWishlistItem     *WishlistItem   `boil:"WishlistitemidWishlistItem" json:"WishlistitemidWishlistItem" toml:"WishlistitemidWishlistItem" yaml:"WishlistitemidWishlistItem"`
}

// NewStruct creates a new relationship struct
func (*wishlistItemProductVariantR) NewStruct() *wishlistItemProductVariantR {
	return &wishlistItemProductVariantR{}
}

func (r *wishlistItemProductVariantR) GetProductvariantidProductVariant() *ProductVariant {
	if r == nil {
		return nil
	}
	return r.ProductvariantidProductVariant
}

func (r *wishlistItemProductVariantR) GetWishlistitemidWishlistItem() *WishlistItem {
	if r == nil {
		return nil
	}
	return r.WishlistitemidWishlistItem
}

// wishlistItemProductVariantL is where Load methods for each relationship are stored.
type wishlistItemProductVariantL struct{}

var (
	wishlistItemProductVariantAllColumns            = []string{"id", "wishlistitemid", "productvariantid"}
	wishlistItemProductVariantColumnsWithoutDefault = []string{"id"}
	wishlistItemProductVariantColumnsWithDefault    = []string{"wishlistitemid", "productvariantid"}
	wishlistItemProductVariantPrimaryKeyColumns     = []string{"id"}
	wishlistItemProductVariantGeneratedColumns      = []string{}
)

type (
	// WishlistItemProductVariantSlice is an alias for a slice of pointers to WishlistItemProductVariant.
	// This should almost always be used instead of []WishlistItemProductVariant.
	WishlistItemProductVariantSlice []*WishlistItemProductVariant
	// WishlistItemProductVariantHook is the signature for custom WishlistItemProductVariant hook methods
	WishlistItemProductVariantHook func(context.Context, boil.ContextExecutor, *WishlistItemProductVariant) error

	wishlistItemProductVariantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	wishlistItemProductVariantType                 = reflect.TypeOf(&WishlistItemProductVariant{})
	wishlistItemProductVariantMapping              = queries.MakeStructMapping(wishlistItemProductVariantType)
	wishlistItemProductVariantPrimaryKeyMapping, _ = queries.BindMapping(wishlistItemProductVariantType, wishlistItemProductVariantMapping, wishlistItemProductVariantPrimaryKeyColumns)
	wishlistItemProductVariantInsertCacheMut       sync.RWMutex
	wishlistItemProductVariantInsertCache          = make(map[string]insertCache)
	wishlistItemProductVariantUpdateCacheMut       sync.RWMutex
	wishlistItemProductVariantUpdateCache          = make(map[string]updateCache)
	wishlistItemProductVariantUpsertCacheMut       sync.RWMutex
	wishlistItemProductVariantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var wishlistItemProductVariantAfterSelectHooks []WishlistItemProductVariantHook

var wishlistItemProductVariantBeforeInsertHooks []WishlistItemProductVariantHook
var wishlistItemProductVariantAfterInsertHooks []WishlistItemProductVariantHook

var wishlistItemProductVariantBeforeUpdateHooks []WishlistItemProductVariantHook
var wishlistItemProductVariantAfterUpdateHooks []WishlistItemProductVariantHook

var wishlistItemProductVariantBeforeDeleteHooks []WishlistItemProductVariantHook
var wishlistItemProductVariantAfterDeleteHooks []WishlistItemProductVariantHook

var wishlistItemProductVariantBeforeUpsertHooks []WishlistItemProductVariantHook
var wishlistItemProductVariantAfterUpsertHooks []WishlistItemProductVariantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WishlistItemProductVariant) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemProductVariantAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WishlistItemProductVariant) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemProductVariantBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WishlistItemProductVariant) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemProductVariantAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WishlistItemProductVariant) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemProductVariantBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WishlistItemProductVariant) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemProductVariantAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WishlistItemProductVariant) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemProductVariantBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WishlistItemProductVariant) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemProductVariantAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WishlistItemProductVariant) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemProductVariantBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WishlistItemProductVariant) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistItemProductVariantAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWishlistItemProductVariantHook registers your hook function for all future operations.
func AddWishlistItemProductVariantHook(hookPoint boil.HookPoint, wishlistItemProductVariantHook WishlistItemProductVariantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		wishlistItemProductVariantAfterSelectHooks = append(wishlistItemProductVariantAfterSelectHooks, wishlistItemProductVariantHook)
	case boil.BeforeInsertHook:
		wishlistItemProductVariantBeforeInsertHooks = append(wishlistItemProductVariantBeforeInsertHooks, wishlistItemProductVariantHook)
	case boil.AfterInsertHook:
		wishlistItemProductVariantAfterInsertHooks = append(wishlistItemProductVariantAfterInsertHooks, wishlistItemProductVariantHook)
	case boil.BeforeUpdateHook:
		wishlistItemProductVariantBeforeUpdateHooks = append(wishlistItemProductVariantBeforeUpdateHooks, wishlistItemProductVariantHook)
	case boil.AfterUpdateHook:
		wishlistItemProductVariantAfterUpdateHooks = append(wishlistItemProductVariantAfterUpdateHooks, wishlistItemProductVariantHook)
	case boil.BeforeDeleteHook:
		wishlistItemProductVariantBeforeDeleteHooks = append(wishlistItemProductVariantBeforeDeleteHooks, wishlistItemProductVariantHook)
	case boil.AfterDeleteHook:
		wishlistItemProductVariantAfterDeleteHooks = append(wishlistItemProductVariantAfterDeleteHooks, wishlistItemProductVariantHook)
	case boil.BeforeUpsertHook:
		wishlistItemProductVariantBeforeUpsertHooks = append(wishlistItemProductVariantBeforeUpsertHooks, wishlistItemProductVariantHook)
	case boil.AfterUpsertHook:
		wishlistItemProductVariantAfterUpsertHooks = append(wishlistItemProductVariantAfterUpsertHooks, wishlistItemProductVariantHook)
	}
}

// One returns a single wishlistItemProductVariant record from the query.
func (q wishlistItemProductVariantQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WishlistItemProductVariant, error) {
	o := &WishlistItemProductVariant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for wishlist_item_product_variants")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WishlistItemProductVariant records from the query.
func (q wishlistItemProductVariantQuery) All(ctx context.Context, exec boil.ContextExecutor) (WishlistItemProductVariantSlice, error) {
	var o []*WishlistItemProductVariant

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WishlistItemProductVariant slice")
	}

	if len(wishlistItemProductVariantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WishlistItemProductVariant records in the query.
func (q wishlistItemProductVariantQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count wishlist_item_product_variants rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q wishlistItemProductVariantQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if wishlist_item_product_variants exists")
	}

	return count > 0, nil
}

// ProductvariantidProductVariant pointed to by the foreign key.
func (o *WishlistItemProductVariant) ProductvariantidProductVariant(mods ...qm.QueryMod) productVariantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Productvariantid),
	}

	queryMods = append(queryMods, mods...)

	return ProductVariants(queryMods...)
}

// WishlistitemidWishlistItem pointed to by the foreign key.
func (o *WishlistItemProductVariant) WishlistitemidWishlistItem(mods ...qm.QueryMod) wishlistItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Wishlistitemid),
	}

	queryMods = append(queryMods, mods...)

	return WishlistItems(queryMods...)
}

// LoadProductvariantidProductVariant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (wishlistItemProductVariantL) LoadProductvariantidProductVariant(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWishlistItemProductVariant interface{}, mods queries.Applicator) error {
	var slice []*WishlistItemProductVariant
	var object *WishlistItemProductVariant

	if singular {
		var ok bool
		object, ok = maybeWishlistItemProductVariant.(*WishlistItemProductVariant)
		if !ok {
			object = new(WishlistItemProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWishlistItemProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWishlistItemProductVariant))
			}
		}
	} else {
		s, ok := maybeWishlistItemProductVariant.(*[]*WishlistItemProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWishlistItemProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWishlistItemProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wishlistItemProductVariantR{}
		}
		if !queries.IsNil(object.Productvariantid) {
			args = append(args, object.Productvariantid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wishlistItemProductVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Productvariantid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Productvariantid) {
				args = append(args, obj.Productvariantid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`product_variants`),
		qm.WhereIn(`product_variants.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ProductVariant")
	}

	var resultSlice []*ProductVariant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ProductVariant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for product_variants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for product_variants")
	}

	if len(productVariantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ProductvariantidProductVariant = foreign
		if foreign.R == nil {
			foreign.R = &productVariantR{}
		}
		foreign.R.ProductvariantidWishlistItemProductVariants = append(foreign.R.ProductvariantidWishlistItemProductVariants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Productvariantid, foreign.ID) {
				local.R.ProductvariantidProductVariant = foreign
				if foreign.R == nil {
					foreign.R = &productVariantR{}
				}
				foreign.R.ProductvariantidWishlistItemProductVariants = append(foreign.R.ProductvariantidWishlistItemProductVariants, local)
				break
			}
		}
	}

	return nil
}

// LoadWishlistitemidWishlistItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (wishlistItemProductVariantL) LoadWishlistitemidWishlistItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWishlistItemProductVariant interface{}, mods queries.Applicator) error {
	var slice []*WishlistItemProductVariant
	var object *WishlistItemProductVariant

	if singular {
		var ok bool
		object, ok = maybeWishlistItemProductVariant.(*WishlistItemProductVariant)
		if !ok {
			object = new(WishlistItemProductVariant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWishlistItemProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWishlistItemProductVariant))
			}
		}
	} else {
		s, ok := maybeWishlistItemProductVariant.(*[]*WishlistItemProductVariant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWishlistItemProductVariant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWishlistItemProductVariant))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wishlistItemProductVariantR{}
		}
		if !queries.IsNil(object.Wishlistitemid) {
			args = append(args, object.Wishlistitemid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wishlistItemProductVariantR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Wishlistitemid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Wishlistitemid) {
				args = append(args, obj.Wishlistitemid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`wishlist_items`),
		qm.WhereIn(`wishlist_items.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load WishlistItem")
	}

	var resultSlice []*WishlistItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice WishlistItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for wishlist_items")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for wishlist_items")
	}

	if len(wishlistItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WishlistitemidWishlistItem = foreign
		if foreign.R == nil {
			foreign.R = &wishlistItemR{}
		}
		foreign.R.WishlistitemidWishlistItemProductVariants = append(foreign.R.WishlistitemidWishlistItemProductVariants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Wishlistitemid, foreign.ID) {
				local.R.WishlistitemidWishlistItem = foreign
				if foreign.R == nil {
					foreign.R = &wishlistItemR{}
				}
				foreign.R.WishlistitemidWishlistItemProductVariants = append(foreign.R.WishlistitemidWishlistItemProductVariants, local)
				break
			}
		}
	}

	return nil
}

// SetProductvariantidProductVariant of the wishlistItemProductVariant to the related item.
// Sets o.R.ProductvariantidProductVariant to related.
// Adds o to related.R.ProductvariantidWishlistItemProductVariants.
func (o *WishlistItemProductVariant) SetProductvariantidProductVariant(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ProductVariant) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"wishlist_item_product_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"productvariantid"}),
		strmangle.WhereClause("\"", "\"", 2, wishlistItemProductVariantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Productvariantid, related.ID)
	if o.R == nil {
		o.R = &wishlistItemProductVariantR{
			ProductvariantidProductVariant: related,
		}
	} else {
		o.R.ProductvariantidProductVariant = related
	}

	if related.R == nil {
		related.R = &productVariantR{
			ProductvariantidWishlistItemProductVariants: WishlistItemProductVariantSlice{o},
		}
	} else {
		related.R.ProductvariantidWishlistItemProductVariants = append(related.R.ProductvariantidWishlistItemProductVariants, o)
	}

	return nil
}

// RemoveProductvariantidProductVariant relationship.
// Sets o.R.ProductvariantidProductVariant to nil.
// Removes o from all passed in related items' relationships struct.
func (o *WishlistItemProductVariant) RemoveProductvariantidProductVariant(ctx context.Context, exec boil.ContextExecutor, related *ProductVariant) error {
	var err error

	queries.SetScanner(&o.Productvariantid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("productvariantid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ProductvariantidProductVariant = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ProductvariantidWishlistItemProductVariants {
		if queries.Equal(o.Productvariantid, ri.Productvariantid) {
			continue
		}

		ln := len(related.R.ProductvariantidWishlistItemProductVariants)
		if ln > 1 && i < ln-1 {
			related.R.ProductvariantidWishlistItemProductVariants[i] = related.R.ProductvariantidWishlistItemProductVariants[ln-1]
		}
		related.R.ProductvariantidWishlistItemProductVariants = related.R.ProductvariantidWishlistItemProductVariants[:ln-1]
		break
	}
	return nil
}

// SetWishlistitemidWishlistItem of the wishlistItemProductVariant to the related item.
// Sets o.R.WishlistitemidWishlistItem to related.
// Adds o to related.R.WishlistitemidWishlistItemProductVariants.
func (o *WishlistItemProductVariant) SetWishlistitemidWishlistItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *WishlistItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"wishlist_item_product_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"wishlistitemid"}),
		strmangle.WhereClause("\"", "\"", 2, wishlistItemProductVariantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Wishlistitemid, related.ID)
	if o.R == nil {
		o.R = &wishlistItemProductVariantR{
			WishlistitemidWishlistItem: related,
		}
	} else {
		o.R.WishlistitemidWishlistItem = related
	}

	if related.R == nil {
		related.R = &wishlistItemR{
			WishlistitemidWishlistItemProductVariants: WishlistItemProductVariantSlice{o},
		}
	} else {
		related.R.WishlistitemidWishlistItemProductVariants = append(related.R.WishlistitemidWishlistItemProductVariants, o)
	}

	return nil
}

// RemoveWishlistitemidWishlistItem relationship.
// Sets o.R.WishlistitemidWishlistItem to nil.
// Removes o from all passed in related items' relationships struct.
func (o *WishlistItemProductVariant) RemoveWishlistitemidWishlistItem(ctx context.Context, exec boil.ContextExecutor, related *WishlistItem) error {
	var err error

	queries.SetScanner(&o.Wishlistitemid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("wishlistitemid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WishlistitemidWishlistItem = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WishlistitemidWishlistItemProductVariants {
		if queries.Equal(o.Wishlistitemid, ri.Wishlistitemid) {
			continue
		}

		ln := len(related.R.WishlistitemidWishlistItemProductVariants)
		if ln > 1 && i < ln-1 {
			related.R.WishlistitemidWishlistItemProductVariants[i] = related.R.WishlistitemidWishlistItemProductVariants[ln-1]
		}
		related.R.WishlistitemidWishlistItemProductVariants = related.R.WishlistitemidWishlistItemProductVariants[:ln-1]
		break
	}
	return nil
}

// WishlistItemProductVariants retrieves all the records using an executor.
func WishlistItemProductVariants(mods ...qm.QueryMod) wishlistItemProductVariantQuery {
	mods = append(mods, qm.From("\"wishlist_item_product_variants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"wishlist_item_product_variants\".*"})
	}

	return wishlistItemProductVariantQuery{q}
}

// FindWishlistItemProductVariant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWishlistItemProductVariant(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*WishlistItemProductVariant, error) {
	wishlistItemProductVariantObj := &WishlistItemProductVariant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"wishlist_item_product_variants\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, wishlistItemProductVariantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from wishlist_item_product_variants")
	}

	if err = wishlistItemProductVariantObj.doAfterSelectHooks(ctx, exec); err != nil {
		return wishlistItemProductVariantObj, err
	}

	return wishlistItemProductVariantObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WishlistItemProductVariant) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wishlist_item_product_variants provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wishlistItemProductVariantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	wishlistItemProductVariantInsertCacheMut.RLock()
	cache, cached := wishlistItemProductVariantInsertCache[key]
	wishlistItemProductVariantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			wishlistItemProductVariantAllColumns,
			wishlistItemProductVariantColumnsWithDefault,
			wishlistItemProductVariantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(wishlistItemProductVariantType, wishlistItemProductVariantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(wishlistItemProductVariantType, wishlistItemProductVariantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"wishlist_item_product_variants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"wishlist_item_product_variants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into wishlist_item_product_variants")
	}

	if !cached {
		wishlistItemProductVariantInsertCacheMut.Lock()
		wishlistItemProductVariantInsertCache[key] = cache
		wishlistItemProductVariantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WishlistItemProductVariant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WishlistItemProductVariant) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	wishlistItemProductVariantUpdateCacheMut.RLock()
	cache, cached := wishlistItemProductVariantUpdateCache[key]
	wishlistItemProductVariantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			wishlistItemProductVariantAllColumns,
			wishlistItemProductVariantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update wishlist_item_product_variants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"wishlist_item_product_variants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, wishlistItemProductVariantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(wishlistItemProductVariantType, wishlistItemProductVariantMapping, append(wl, wishlistItemProductVariantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update wishlist_item_product_variants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for wishlist_item_product_variants")
	}

	if !cached {
		wishlistItemProductVariantUpdateCacheMut.Lock()
		wishlistItemProductVariantUpdateCache[key] = cache
		wishlistItemProductVariantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q wishlistItemProductVariantQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for wishlist_item_product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for wishlist_item_product_variants")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WishlistItemProductVariantSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wishlistItemProductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"wishlist_item_product_variants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, wishlistItemProductVariantPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in wishlistItemProductVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all wishlistItemProductVariant")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WishlistItemProductVariant) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wishlist_item_product_variants provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wishlistItemProductVariantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	wishlistItemProductVariantUpsertCacheMut.RLock()
	cache, cached := wishlistItemProductVariantUpsertCache[key]
	wishlistItemProductVariantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			wishlistItemProductVariantAllColumns,
			wishlistItemProductVariantColumnsWithDefault,
			wishlistItemProductVariantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			wishlistItemProductVariantAllColumns,
			wishlistItemProductVariantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert wishlist_item_product_variants, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(wishlistItemProductVariantPrimaryKeyColumns))
			copy(conflict, wishlistItemProductVariantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"wishlist_item_product_variants\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(wishlistItemProductVariantType, wishlistItemProductVariantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(wishlistItemProductVariantType, wishlistItemProductVariantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert wishlist_item_product_variants")
	}

	if !cached {
		wishlistItemProductVariantUpsertCacheMut.Lock()
		wishlistItemProductVariantUpsertCache[key] = cache
		wishlistItemProductVariantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WishlistItemProductVariant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WishlistItemProductVariant) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WishlistItemProductVariant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), wishlistItemProductVariantPrimaryKeyMapping)
	sql := "DELETE FROM \"wishlist_item_product_variants\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from wishlist_item_product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for wishlist_item_product_variants")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q wishlistItemProductVariantQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no wishlistItemProductVariantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wishlist_item_product_variants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wishlist_item_product_variants")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WishlistItemProductVariantSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(wishlistItemProductVariantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wishlistItemProductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"wishlist_item_product_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, wishlistItemProductVariantPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wishlistItemProductVariant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wishlist_item_product_variants")
	}

	if len(wishlistItemProductVariantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WishlistItemProductVariant) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWishlistItemProductVariant(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WishlistItemProductVariantSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WishlistItemProductVariantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wishlistItemProductVariantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"wishlist_item_product_variants\".* FROM \"wishlist_item_product_variants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, wishlistItemProductVariantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WishlistItemProductVariantSlice")
	}

	*o = slice

	return nil
}

// WishlistItemProductVariantExists checks if the WishlistItemProductVariant row exists.
func WishlistItemProductVariantExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"wishlist_item_product_variants\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if wishlist_item_product_variants exists")
	}

	return exists, nil
}

// Exists checks if the WishlistItemProductVariant row exists.
func (o *WishlistItemProductVariant) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WishlistItemProductVariantExists(ctx, exec, o.ID)
}
