// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCollectionChannelListings(t *testing.T) {
	t.Parallel()

	query := CollectionChannelListings()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCollectionChannelListingsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollectionChannelListingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CollectionChannelListings().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollectionChannelListingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CollectionChannelListingSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCollectionChannelListingsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CollectionChannelListingExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CollectionChannelListing exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CollectionChannelListingExists to return true, but got false.")
	}
}

func testCollectionChannelListingsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	collectionChannelListingFound, err := FindCollectionChannelListing(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if collectionChannelListingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCollectionChannelListingsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CollectionChannelListings().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCollectionChannelListingsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CollectionChannelListings().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCollectionChannelListingsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	collectionChannelListingOne := &CollectionChannelListing{}
	collectionChannelListingTwo := &CollectionChannelListing{}
	if err = randomize.Struct(seed, collectionChannelListingOne, collectionChannelListingDBTypes, false, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}
	if err = randomize.Struct(seed, collectionChannelListingTwo, collectionChannelListingDBTypes, false, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = collectionChannelListingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = collectionChannelListingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CollectionChannelListings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCollectionChannelListingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	collectionChannelListingOne := &CollectionChannelListing{}
	collectionChannelListingTwo := &CollectionChannelListing{}
	if err = randomize.Struct(seed, collectionChannelListingOne, collectionChannelListingDBTypes, false, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}
	if err = randomize.Struct(seed, collectionChannelListingTwo, collectionChannelListingDBTypes, false, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = collectionChannelListingOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = collectionChannelListingTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func collectionChannelListingBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CollectionChannelListing) error {
	*o = CollectionChannelListing{}
	return nil
}

func collectionChannelListingAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CollectionChannelListing) error {
	*o = CollectionChannelListing{}
	return nil
}

func collectionChannelListingAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CollectionChannelListing) error {
	*o = CollectionChannelListing{}
	return nil
}

func collectionChannelListingBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CollectionChannelListing) error {
	*o = CollectionChannelListing{}
	return nil
}

func collectionChannelListingAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CollectionChannelListing) error {
	*o = CollectionChannelListing{}
	return nil
}

func collectionChannelListingBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CollectionChannelListing) error {
	*o = CollectionChannelListing{}
	return nil
}

func collectionChannelListingAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CollectionChannelListing) error {
	*o = CollectionChannelListing{}
	return nil
}

func collectionChannelListingBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CollectionChannelListing) error {
	*o = CollectionChannelListing{}
	return nil
}

func collectionChannelListingAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CollectionChannelListing) error {
	*o = CollectionChannelListing{}
	return nil
}

func testCollectionChannelListingsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CollectionChannelListing{}
	o := &CollectionChannelListing{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing object: %s", err)
	}

	AddCollectionChannelListingHook(boil.BeforeInsertHook, collectionChannelListingBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	collectionChannelListingBeforeInsertHooks = []CollectionChannelListingHook{}

	AddCollectionChannelListingHook(boil.AfterInsertHook, collectionChannelListingAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	collectionChannelListingAfterInsertHooks = []CollectionChannelListingHook{}

	AddCollectionChannelListingHook(boil.AfterSelectHook, collectionChannelListingAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	collectionChannelListingAfterSelectHooks = []CollectionChannelListingHook{}

	AddCollectionChannelListingHook(boil.BeforeUpdateHook, collectionChannelListingBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	collectionChannelListingBeforeUpdateHooks = []CollectionChannelListingHook{}

	AddCollectionChannelListingHook(boil.AfterUpdateHook, collectionChannelListingAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	collectionChannelListingAfterUpdateHooks = []CollectionChannelListingHook{}

	AddCollectionChannelListingHook(boil.BeforeDeleteHook, collectionChannelListingBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	collectionChannelListingBeforeDeleteHooks = []CollectionChannelListingHook{}

	AddCollectionChannelListingHook(boil.AfterDeleteHook, collectionChannelListingAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	collectionChannelListingAfterDeleteHooks = []CollectionChannelListingHook{}

	AddCollectionChannelListingHook(boil.BeforeUpsertHook, collectionChannelListingBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	collectionChannelListingBeforeUpsertHooks = []CollectionChannelListingHook{}

	AddCollectionChannelListingHook(boil.AfterUpsertHook, collectionChannelListingAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	collectionChannelListingAfterUpsertHooks = []CollectionChannelListingHook{}
}

func testCollectionChannelListingsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCollectionChannelListingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(collectionChannelListingColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCollectionChannelListingToOneChannelUsingChannel(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CollectionChannelListing
	var foreign Channel

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, channelDBTypes, false, channelColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Channel struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ChannelID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Channel().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddChannelHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Channel) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CollectionChannelListingSlice{&local}
	if err = local.L.LoadChannel(ctx, tx, false, (*[]*CollectionChannelListing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Channel = nil
	if err = local.L.LoadChannel(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Channel == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCollectionChannelListingToOneCollectionUsingCollection(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CollectionChannelListing
	var foreign Collection

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, collectionChannelListingDBTypes, false, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, collectionDBTypes, false, collectionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Collection struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CollectionID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Collection().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCollectionHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Collection) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CollectionChannelListingSlice{&local}
	if err = local.L.LoadCollection(ctx, tx, false, (*[]*CollectionChannelListing)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Collection == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Collection = nil
	if err = local.L.LoadCollection(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Collection == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCollectionChannelListingToOneSetOpChannelUsingChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollectionChannelListing
	var b, c Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionChannelListingDBTypes, false, strmangle.SetComplement(collectionChannelListingPrimaryKeyColumns, collectionChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Channel{&b, &c} {
		err = a.SetChannel(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Channel != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CollectionChannelListings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ChannelID, x.ID) {
			t.Error("foreign key was wrong value", a.ChannelID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ChannelID))
		reflect.Indirect(reflect.ValueOf(&a.ChannelID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ChannelID, x.ID) {
			t.Error("foreign key was wrong value", a.ChannelID, x.ID)
		}
	}
}

func testCollectionChannelListingToOneRemoveOpChannelUsingChannel(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollectionChannelListing
	var b Channel

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionChannelListingDBTypes, false, strmangle.SetComplement(collectionChannelListingPrimaryKeyColumns, collectionChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, channelDBTypes, false, strmangle.SetComplement(channelPrimaryKeyColumns, channelColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetChannel(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveChannel(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Channel().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Channel != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ChannelID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CollectionChannelListings) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCollectionChannelListingToOneSetOpCollectionUsingCollection(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CollectionChannelListing
	var b, c Collection

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, collectionChannelListingDBTypes, false, strmangle.SetComplement(collectionChannelListingPrimaryKeyColumns, collectionChannelListingColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, collectionDBTypes, false, strmangle.SetComplement(collectionPrimaryKeyColumns, collectionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Collection{&b, &c} {
		err = a.SetCollection(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Collection != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CollectionChannelListings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CollectionID != x.ID {
			t.Error("foreign key was wrong value", a.CollectionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CollectionID))
		reflect.Indirect(reflect.ValueOf(&a.CollectionID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CollectionID != x.ID {
			t.Error("foreign key was wrong value", a.CollectionID, x.ID)
		}
	}
}

func testCollectionChannelListingsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCollectionChannelListingsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CollectionChannelListingSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCollectionChannelListingsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CollectionChannelListings().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	collectionChannelListingDBTypes = map[string]string{`ID`: `uuid`, `CreatedAt`: `bigint`, `CollectionID`: `uuid`, `ChannelID`: `uuid`, `PublicationDate`: `timestamp with time zone`, `IsPublished`: `boolean`}
	_                               = bytes.MinRead
)

func testCollectionChannelListingsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(collectionChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(collectionChannelListingAllColumns) == len(collectionChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCollectionChannelListingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(collectionChannelListingAllColumns) == len(collectionChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CollectionChannelListing{}
	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, collectionChannelListingDBTypes, true, collectionChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(collectionChannelListingAllColumns, collectionChannelListingPrimaryKeyColumns) {
		fields = collectionChannelListingAllColumns
	} else {
		fields = strmangle.SetComplement(
			collectionChannelListingAllColumns,
			collectionChannelListingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CollectionChannelListingSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCollectionChannelListingsUpsert(t *testing.T) {
	t.Parallel()

	if len(collectionChannelListingAllColumns) == len(collectionChannelListingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CollectionChannelListing{}
	if err = randomize.Struct(seed, &o, collectionChannelListingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CollectionChannelListing: %s", err)
	}

	count, err := CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, collectionChannelListingDBTypes, false, collectionChannelListingPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CollectionChannelListing struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CollectionChannelListing: %s", err)
	}

	count, err = CollectionChannelListings().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
