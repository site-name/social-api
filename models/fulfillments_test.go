// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFulfillments(t *testing.T) {
	t.Parallel()

	query := Fulfillments()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFulfillmentsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Fulfillments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFulfillmentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Fulfillments().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Fulfillments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFulfillmentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FulfillmentSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Fulfillments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFulfillmentsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FulfillmentExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Fulfillment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FulfillmentExists to return true, but got false.")
	}
}

func testFulfillmentsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	fulfillmentFound, err := FindFulfillment(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if fulfillmentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFulfillmentsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Fulfillments().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFulfillmentsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Fulfillments().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFulfillmentsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	fulfillmentOne := &Fulfillment{}
	fulfillmentTwo := &Fulfillment{}
	if err = randomize.Struct(seed, fulfillmentOne, fulfillmentDBTypes, false, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}
	if err = randomize.Struct(seed, fulfillmentTwo, fulfillmentDBTypes, false, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fulfillmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fulfillmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Fulfillments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFulfillmentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	fulfillmentOne := &Fulfillment{}
	fulfillmentTwo := &Fulfillment{}
	if err = randomize.Struct(seed, fulfillmentOne, fulfillmentDBTypes, false, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}
	if err = randomize.Struct(seed, fulfillmentTwo, fulfillmentDBTypes, false, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = fulfillmentOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = fulfillmentTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fulfillments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func fulfillmentBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Fulfillment) error {
	*o = Fulfillment{}
	return nil
}

func fulfillmentAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Fulfillment) error {
	*o = Fulfillment{}
	return nil
}

func fulfillmentAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Fulfillment) error {
	*o = Fulfillment{}
	return nil
}

func fulfillmentBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Fulfillment) error {
	*o = Fulfillment{}
	return nil
}

func fulfillmentAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Fulfillment) error {
	*o = Fulfillment{}
	return nil
}

func fulfillmentBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Fulfillment) error {
	*o = Fulfillment{}
	return nil
}

func fulfillmentAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Fulfillment) error {
	*o = Fulfillment{}
	return nil
}

func fulfillmentBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Fulfillment) error {
	*o = Fulfillment{}
	return nil
}

func fulfillmentAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Fulfillment) error {
	*o = Fulfillment{}
	return nil
}

func testFulfillmentsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Fulfillment{}
	o := &Fulfillment{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Fulfillment object: %s", err)
	}

	AddFulfillmentHook(boil.BeforeInsertHook, fulfillmentBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	fulfillmentBeforeInsertHooks = []FulfillmentHook{}

	AddFulfillmentHook(boil.AfterInsertHook, fulfillmentAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	fulfillmentAfterInsertHooks = []FulfillmentHook{}

	AddFulfillmentHook(boil.AfterSelectHook, fulfillmentAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	fulfillmentAfterSelectHooks = []FulfillmentHook{}

	AddFulfillmentHook(boil.BeforeUpdateHook, fulfillmentBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	fulfillmentBeforeUpdateHooks = []FulfillmentHook{}

	AddFulfillmentHook(boil.AfterUpdateHook, fulfillmentAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	fulfillmentAfterUpdateHooks = []FulfillmentHook{}

	AddFulfillmentHook(boil.BeforeDeleteHook, fulfillmentBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	fulfillmentBeforeDeleteHooks = []FulfillmentHook{}

	AddFulfillmentHook(boil.AfterDeleteHook, fulfillmentAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	fulfillmentAfterDeleteHooks = []FulfillmentHook{}

	AddFulfillmentHook(boil.BeforeUpsertHook, fulfillmentBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	fulfillmentBeforeUpsertHooks = []FulfillmentHook{}

	AddFulfillmentHook(boil.AfterUpsertHook, fulfillmentAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	fulfillmentAfterUpsertHooks = []FulfillmentHook{}
}

func testFulfillmentsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fulfillments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFulfillmentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(fulfillmentColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Fulfillments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFulfillmentToOneOrderUsingOrder(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Fulfillment
	var foreign Order

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, fulfillmentDBTypes, false, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, orderDBTypes, false, orderColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Order struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrderID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Order().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrderHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Order) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := FulfillmentSlice{&local}
	if err = local.L.LoadOrder(ctx, tx, false, (*[]*Fulfillment)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Order = nil
	if err = local.L.LoadOrder(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Order == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testFulfillmentToOneSetOpOrderUsingOrder(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Fulfillment
	var b, c Order

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, fulfillmentDBTypes, false, strmangle.SetComplement(fulfillmentPrimaryKeyColumns, fulfillmentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, orderDBTypes, false, strmangle.SetComplement(orderPrimaryKeyColumns, orderColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Order{&b, &c} {
		err = a.SetOrder(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Order != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Fulfillments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrderID != x.ID {
			t.Error("foreign key was wrong value", a.OrderID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrderID))
		reflect.Indirect(reflect.ValueOf(&a.OrderID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrderID != x.ID {
			t.Error("foreign key was wrong value", a.OrderID, x.ID)
		}
	}
}

func testFulfillmentsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFulfillmentsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FulfillmentSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFulfillmentsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Fulfillments().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	fulfillmentDBTypes = map[string]string{`ID`: `uuid`, `FulfillmentOrder`: `integer`, `OrderID`: `uuid`, `Status`: `character varying`, `TrackingNumber`: `character varying`, `CreatedAt`: `bigint`, `ShippingRefundAmount`: `double precision`, `TotalRefundAmount`: `double precision`, `Metadata`: `jsonb`, `PrivateMetadata`: `jsonb`}
	_                  = bytes.MinRead
)

func testFulfillmentsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(fulfillmentPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(fulfillmentAllColumns) == len(fulfillmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fulfillments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFulfillmentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(fulfillmentAllColumns) == len(fulfillmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Fulfillment{}
	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Fulfillments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, fulfillmentDBTypes, true, fulfillmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(fulfillmentAllColumns, fulfillmentPrimaryKeyColumns) {
		fields = fulfillmentAllColumns
	} else {
		fields = strmangle.SetComplement(
			fulfillmentAllColumns,
			fulfillmentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FulfillmentSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFulfillmentsUpsert(t *testing.T) {
	t.Parallel()

	if len(fulfillmentAllColumns) == len(fulfillmentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Fulfillment{}
	if err = randomize.Struct(seed, &o, fulfillmentDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Fulfillment: %s", err)
	}

	count, err := Fulfillments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, fulfillmentDBTypes, false, fulfillmentPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Fulfillment struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Fulfillment: %s", err)
	}

	count, err = Fulfillments().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
