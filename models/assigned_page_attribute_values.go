// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssignedPageAttributeValue is an object representing the database table.
type AssignedPageAttributeValue struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Valueid      null.String `boil:"valueid" json:"valueid,omitempty" toml:"valueid" yaml:"valueid,omitempty"`
	Assignmentid null.String `boil:"assignmentid" json:"assignmentid,omitempty" toml:"assignmentid" yaml:"assignmentid,omitempty"`
	Sortorder    null.Int    `boil:"sortorder" json:"sortorder,omitempty" toml:"sortorder" yaml:"sortorder,omitempty"`

	R *assignedPageAttributeValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignedPageAttributeValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignedPageAttributeValueColumns = struct {
	ID           string
	Valueid      string
	Assignmentid string
	Sortorder    string
}{
	ID:           "id",
	Valueid:      "valueid",
	Assignmentid: "assignmentid",
	Sortorder:    "sortorder",
}

var AssignedPageAttributeValueTableColumns = struct {
	ID           string
	Valueid      string
	Assignmentid string
	Sortorder    string
}{
	ID:           "assigned_page_attribute_values.id",
	Valueid:      "assigned_page_attribute_values.valueid",
	Assignmentid: "assigned_page_attribute_values.assignmentid",
	Sortorder:    "assigned_page_attribute_values.sortorder",
}

// Generated where

var AssignedPageAttributeValueWhere = struct {
	ID           whereHelperstring
	Valueid      whereHelpernull_String
	Assignmentid whereHelpernull_String
	Sortorder    whereHelpernull_Int
}{
	ID:           whereHelperstring{field: "\"assigned_page_attribute_values\".\"id\""},
	Valueid:      whereHelpernull_String{field: "\"assigned_page_attribute_values\".\"valueid\""},
	Assignmentid: whereHelpernull_String{field: "\"assigned_page_attribute_values\".\"assignmentid\""},
	Sortorder:    whereHelpernull_Int{field: "\"assigned_page_attribute_values\".\"sortorder\""},
}

// AssignedPageAttributeValueRels is where relationship names are stored.
var AssignedPageAttributeValueRels = struct {
	AssignmentidAssignedPageAttribute string
	ValueidAttributeValue             string
}{
	AssignmentidAssignedPageAttribute: "AssignmentidAssignedPageAttribute",
	ValueidAttributeValue:             "ValueidAttributeValue",
}

// assignedPageAttributeValueR is where relationships are stored.
type assignedPageAttributeValueR struct {
	AssignmentidAssignedPageAttribute *AssignedPageAttribute `boil:"AssignmentidAssignedPageAttribute" json:"AssignmentidAssignedPageAttribute" toml:"AssignmentidAssignedPageAttribute" yaml:"AssignmentidAssignedPageAttribute"`
	ValueidAttributeValue             *AttributeValue        `boil:"ValueidAttributeValue" json:"ValueidAttributeValue" toml:"ValueidAttributeValue" yaml:"ValueidAttributeValue"`
}

// NewStruct creates a new relationship struct
func (*assignedPageAttributeValueR) NewStruct() *assignedPageAttributeValueR {
	return &assignedPageAttributeValueR{}
}

func (r *assignedPageAttributeValueR) GetAssignmentidAssignedPageAttribute() *AssignedPageAttribute {
	if r == nil {
		return nil
	}
	return r.AssignmentidAssignedPageAttribute
}

func (r *assignedPageAttributeValueR) GetValueidAttributeValue() *AttributeValue {
	if r == nil {
		return nil
	}
	return r.ValueidAttributeValue
}

// assignedPageAttributeValueL is where Load methods for each relationship are stored.
type assignedPageAttributeValueL struct{}

var (
	assignedPageAttributeValueAllColumns            = []string{"id", "valueid", "assignmentid", "sortorder"}
	assignedPageAttributeValueColumnsWithoutDefault = []string{"id"}
	assignedPageAttributeValueColumnsWithDefault    = []string{"valueid", "assignmentid", "sortorder"}
	assignedPageAttributeValuePrimaryKeyColumns     = []string{"id"}
	assignedPageAttributeValueGeneratedColumns      = []string{}
)

type (
	// AssignedPageAttributeValueSlice is an alias for a slice of pointers to AssignedPageAttributeValue.
	// This should almost always be used instead of []AssignedPageAttributeValue.
	AssignedPageAttributeValueSlice []*AssignedPageAttributeValue
	// AssignedPageAttributeValueHook is the signature for custom AssignedPageAttributeValue hook methods
	AssignedPageAttributeValueHook func(context.Context, boil.ContextExecutor, *AssignedPageAttributeValue) error

	assignedPageAttributeValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignedPageAttributeValueType                 = reflect.TypeOf(&AssignedPageAttributeValue{})
	assignedPageAttributeValueMapping              = queries.MakeStructMapping(assignedPageAttributeValueType)
	assignedPageAttributeValuePrimaryKeyMapping, _ = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, assignedPageAttributeValuePrimaryKeyColumns)
	assignedPageAttributeValueInsertCacheMut       sync.RWMutex
	assignedPageAttributeValueInsertCache          = make(map[string]insertCache)
	assignedPageAttributeValueUpdateCacheMut       sync.RWMutex
	assignedPageAttributeValueUpdateCache          = make(map[string]updateCache)
	assignedPageAttributeValueUpsertCacheMut       sync.RWMutex
	assignedPageAttributeValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assignedPageAttributeValueAfterSelectHooks []AssignedPageAttributeValueHook

var assignedPageAttributeValueBeforeInsertHooks []AssignedPageAttributeValueHook
var assignedPageAttributeValueAfterInsertHooks []AssignedPageAttributeValueHook

var assignedPageAttributeValueBeforeUpdateHooks []AssignedPageAttributeValueHook
var assignedPageAttributeValueAfterUpdateHooks []AssignedPageAttributeValueHook

var assignedPageAttributeValueBeforeDeleteHooks []AssignedPageAttributeValueHook
var assignedPageAttributeValueAfterDeleteHooks []AssignedPageAttributeValueHook

var assignedPageAttributeValueBeforeUpsertHooks []AssignedPageAttributeValueHook
var assignedPageAttributeValueAfterUpsertHooks []AssignedPageAttributeValueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssignedPageAttributeValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssignedPageAttributeValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssignedPageAttributeValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssignedPageAttributeValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssignedPageAttributeValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssignedPageAttributeValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssignedPageAttributeValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssignedPageAttributeValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssignedPageAttributeValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assignedPageAttributeValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssignedPageAttributeValueHook registers your hook function for all future operations.
func AddAssignedPageAttributeValueHook(hookPoint boil.HookPoint, assignedPageAttributeValueHook AssignedPageAttributeValueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assignedPageAttributeValueAfterSelectHooks = append(assignedPageAttributeValueAfterSelectHooks, assignedPageAttributeValueHook)
	case boil.BeforeInsertHook:
		assignedPageAttributeValueBeforeInsertHooks = append(assignedPageAttributeValueBeforeInsertHooks, assignedPageAttributeValueHook)
	case boil.AfterInsertHook:
		assignedPageAttributeValueAfterInsertHooks = append(assignedPageAttributeValueAfterInsertHooks, assignedPageAttributeValueHook)
	case boil.BeforeUpdateHook:
		assignedPageAttributeValueBeforeUpdateHooks = append(assignedPageAttributeValueBeforeUpdateHooks, assignedPageAttributeValueHook)
	case boil.AfterUpdateHook:
		assignedPageAttributeValueAfterUpdateHooks = append(assignedPageAttributeValueAfterUpdateHooks, assignedPageAttributeValueHook)
	case boil.BeforeDeleteHook:
		assignedPageAttributeValueBeforeDeleteHooks = append(assignedPageAttributeValueBeforeDeleteHooks, assignedPageAttributeValueHook)
	case boil.AfterDeleteHook:
		assignedPageAttributeValueAfterDeleteHooks = append(assignedPageAttributeValueAfterDeleteHooks, assignedPageAttributeValueHook)
	case boil.BeforeUpsertHook:
		assignedPageAttributeValueBeforeUpsertHooks = append(assignedPageAttributeValueBeforeUpsertHooks, assignedPageAttributeValueHook)
	case boil.AfterUpsertHook:
		assignedPageAttributeValueAfterUpsertHooks = append(assignedPageAttributeValueAfterUpsertHooks, assignedPageAttributeValueHook)
	}
}

// One returns a single assignedPageAttributeValue record from the query.
func (q assignedPageAttributeValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssignedPageAttributeValue, error) {
	o := &AssignedPageAttributeValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for assigned_page_attribute_values")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AssignedPageAttributeValue records from the query.
func (q assignedPageAttributeValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssignedPageAttributeValueSlice, error) {
	var o []*AssignedPageAttributeValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssignedPageAttributeValue slice")
	}

	if len(assignedPageAttributeValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AssignedPageAttributeValue records in the query.
func (q assignedPageAttributeValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assigned_page_attribute_values rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignedPageAttributeValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assigned_page_attribute_values exists")
	}

	return count > 0, nil
}

// AssignmentidAssignedPageAttribute pointed to by the foreign key.
func (o *AssignedPageAttributeValue) AssignmentidAssignedPageAttribute(mods ...qm.QueryMod) assignedPageAttributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Assignmentid),
	}

	queryMods = append(queryMods, mods...)

	return AssignedPageAttributes(queryMods...)
}

// ValueidAttributeValue pointed to by the foreign key.
func (o *AssignedPageAttributeValue) ValueidAttributeValue(mods ...qm.QueryMod) attributeValueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Valueid),
	}

	queryMods = append(queryMods, mods...)

	return AttributeValues(queryMods...)
}

// LoadAssignmentidAssignedPageAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedPageAttributeValueL) LoadAssignmentidAssignedPageAttribute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedPageAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AssignedPageAttributeValue
	var object *AssignedPageAttributeValue

	if singular {
		var ok bool
		object, ok = maybeAssignedPageAttributeValue.(*AssignedPageAttributeValue)
		if !ok {
			object = new(AssignedPageAttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedPageAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedPageAttributeValue))
			}
		}
	} else {
		s, ok := maybeAssignedPageAttributeValue.(*[]*AssignedPageAttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedPageAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedPageAttributeValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedPageAttributeValueR{}
		}
		if !queries.IsNil(object.Assignmentid) {
			args = append(args, object.Assignmentid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedPageAttributeValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Assignmentid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Assignmentid) {
				args = append(args, obj.Assignmentid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`assigned_page_attributes`),
		qm.WhereIn(`assigned_page_attributes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssignedPageAttribute")
	}

	var resultSlice []*AssignedPageAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssignedPageAttribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assigned_page_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assigned_page_attributes")
	}

	if len(assignedPageAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AssignmentidAssignedPageAttribute = foreign
		if foreign.R == nil {
			foreign.R = &assignedPageAttributeR{}
		}
		foreign.R.AssignmentidAssignedPageAttributeValues = append(foreign.R.AssignmentidAssignedPageAttributeValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Assignmentid, foreign.ID) {
				local.R.AssignmentidAssignedPageAttribute = foreign
				if foreign.R == nil {
					foreign.R = &assignedPageAttributeR{}
				}
				foreign.R.AssignmentidAssignedPageAttributeValues = append(foreign.R.AssignmentidAssignedPageAttributeValues, local)
				break
			}
		}
	}

	return nil
}

// LoadValueidAttributeValue allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignedPageAttributeValueL) LoadValueidAttributeValue(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignedPageAttributeValue interface{}, mods queries.Applicator) error {
	var slice []*AssignedPageAttributeValue
	var object *AssignedPageAttributeValue

	if singular {
		var ok bool
		object, ok = maybeAssignedPageAttributeValue.(*AssignedPageAttributeValue)
		if !ok {
			object = new(AssignedPageAttributeValue)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignedPageAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignedPageAttributeValue))
			}
		}
	} else {
		s, ok := maybeAssignedPageAttributeValue.(*[]*AssignedPageAttributeValue)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignedPageAttributeValue)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignedPageAttributeValue))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignedPageAttributeValueR{}
		}
		if !queries.IsNil(object.Valueid) {
			args = append(args, object.Valueid)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignedPageAttributeValueR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Valueid) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Valueid) {
				args = append(args, obj.Valueid)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attribute_values`),
		qm.WhereIn(`attribute_values.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AttributeValue")
	}

	var resultSlice []*AttributeValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AttributeValue")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attribute_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attribute_values")
	}

	if len(attributeValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ValueidAttributeValue = foreign
		if foreign.R == nil {
			foreign.R = &attributeValueR{}
		}
		foreign.R.ValueidAssignedPageAttributeValues = append(foreign.R.ValueidAssignedPageAttributeValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Valueid, foreign.ID) {
				local.R.ValueidAttributeValue = foreign
				if foreign.R == nil {
					foreign.R = &attributeValueR{}
				}
				foreign.R.ValueidAssignedPageAttributeValues = append(foreign.R.ValueidAssignedPageAttributeValues, local)
				break
			}
		}
	}

	return nil
}

// SetAssignmentidAssignedPageAttribute of the assignedPageAttributeValue to the related item.
// Sets o.R.AssignmentidAssignedPageAttribute to related.
// Adds o to related.R.AssignmentidAssignedPageAttributeValues.
func (o *AssignedPageAttributeValue) SetAssignmentidAssignedPageAttribute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AssignedPageAttribute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_page_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"assignmentid"}),
		strmangle.WhereClause("\"", "\"", 2, assignedPageAttributeValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Assignmentid, related.ID)
	if o.R == nil {
		o.R = &assignedPageAttributeValueR{
			AssignmentidAssignedPageAttribute: related,
		}
	} else {
		o.R.AssignmentidAssignedPageAttribute = related
	}

	if related.R == nil {
		related.R = &assignedPageAttributeR{
			AssignmentidAssignedPageAttributeValues: AssignedPageAttributeValueSlice{o},
		}
	} else {
		related.R.AssignmentidAssignedPageAttributeValues = append(related.R.AssignmentidAssignedPageAttributeValues, o)
	}

	return nil
}

// RemoveAssignmentidAssignedPageAttribute relationship.
// Sets o.R.AssignmentidAssignedPageAttribute to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AssignedPageAttributeValue) RemoveAssignmentidAssignedPageAttribute(ctx context.Context, exec boil.ContextExecutor, related *AssignedPageAttribute) error {
	var err error

	queries.SetScanner(&o.Assignmentid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("assignmentid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AssignmentidAssignedPageAttribute = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AssignmentidAssignedPageAttributeValues {
		if queries.Equal(o.Assignmentid, ri.Assignmentid) {
			continue
		}

		ln := len(related.R.AssignmentidAssignedPageAttributeValues)
		if ln > 1 && i < ln-1 {
			related.R.AssignmentidAssignedPageAttributeValues[i] = related.R.AssignmentidAssignedPageAttributeValues[ln-1]
		}
		related.R.AssignmentidAssignedPageAttributeValues = related.R.AssignmentidAssignedPageAttributeValues[:ln-1]
		break
	}
	return nil
}

// SetValueidAttributeValue of the assignedPageAttributeValue to the related item.
// Sets o.R.ValueidAttributeValue to related.
// Adds o to related.R.ValueidAssignedPageAttributeValues.
func (o *AssignedPageAttributeValue) SetValueidAttributeValue(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AttributeValue) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"assigned_page_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"valueid"}),
		strmangle.WhereClause("\"", "\"", 2, assignedPageAttributeValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Valueid, related.ID)
	if o.R == nil {
		o.R = &assignedPageAttributeValueR{
			ValueidAttributeValue: related,
		}
	} else {
		o.R.ValueidAttributeValue = related
	}

	if related.R == nil {
		related.R = &attributeValueR{
			ValueidAssignedPageAttributeValues: AssignedPageAttributeValueSlice{o},
		}
	} else {
		related.R.ValueidAssignedPageAttributeValues = append(related.R.ValueidAssignedPageAttributeValues, o)
	}

	return nil
}

// RemoveValueidAttributeValue relationship.
// Sets o.R.ValueidAttributeValue to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AssignedPageAttributeValue) RemoveValueidAttributeValue(ctx context.Context, exec boil.ContextExecutor, related *AttributeValue) error {
	var err error

	queries.SetScanner(&o.Valueid, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("valueid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ValueidAttributeValue = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ValueidAssignedPageAttributeValues {
		if queries.Equal(o.Valueid, ri.Valueid) {
			continue
		}

		ln := len(related.R.ValueidAssignedPageAttributeValues)
		if ln > 1 && i < ln-1 {
			related.R.ValueidAssignedPageAttributeValues[i] = related.R.ValueidAssignedPageAttributeValues[ln-1]
		}
		related.R.ValueidAssignedPageAttributeValues = related.R.ValueidAssignedPageAttributeValues[:ln-1]
		break
	}
	return nil
}

// AssignedPageAttributeValues retrieves all the records using an executor.
func AssignedPageAttributeValues(mods ...qm.QueryMod) assignedPageAttributeValueQuery {
	mods = append(mods, qm.From("\"assigned_page_attribute_values\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"assigned_page_attribute_values\".*"})
	}

	return assignedPageAttributeValueQuery{q}
}

// FindAssignedPageAttributeValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignedPageAttributeValue(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*AssignedPageAttributeValue, error) {
	assignedPageAttributeValueObj := &AssignedPageAttributeValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"assigned_page_attribute_values\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assignedPageAttributeValueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from assigned_page_attribute_values")
	}

	if err = assignedPageAttributeValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assignedPageAttributeValueObj, err
	}

	return assignedPageAttributeValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssignedPageAttributeValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assigned_page_attribute_values provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedPageAttributeValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignedPageAttributeValueInsertCacheMut.RLock()
	cache, cached := assignedPageAttributeValueInsertCache[key]
	assignedPageAttributeValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignedPageAttributeValueAllColumns,
			assignedPageAttributeValueColumnsWithDefault,
			assignedPageAttributeValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"assigned_page_attribute_values\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"assigned_page_attribute_values\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assigned_page_attribute_values")
	}

	if !cached {
		assignedPageAttributeValueInsertCacheMut.Lock()
		assignedPageAttributeValueInsertCache[key] = cache
		assignedPageAttributeValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AssignedPageAttributeValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssignedPageAttributeValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assignedPageAttributeValueUpdateCacheMut.RLock()
	cache, cached := assignedPageAttributeValueUpdateCache[key]
	assignedPageAttributeValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignedPageAttributeValueAllColumns,
			assignedPageAttributeValuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assigned_page_attribute_values, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"assigned_page_attribute_values\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignedPageAttributeValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, append(wl, assignedPageAttributeValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assigned_page_attribute_values row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assigned_page_attribute_values")
	}

	if !cached {
		assignedPageAttributeValueUpdateCacheMut.Lock()
		assignedPageAttributeValueUpdateCache[key] = cache
		assignedPageAttributeValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q assignedPageAttributeValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assigned_page_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assigned_page_attribute_values")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignedPageAttributeValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPageAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"assigned_page_attribute_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignedPageAttributeValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assignedPageAttributeValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assignedPageAttributeValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssignedPageAttributeValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assigned_page_attribute_values provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assignedPageAttributeValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignedPageAttributeValueUpsertCacheMut.RLock()
	cache, cached := assignedPageAttributeValueUpsertCache[key]
	assignedPageAttributeValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assignedPageAttributeValueAllColumns,
			assignedPageAttributeValueColumnsWithDefault,
			assignedPageAttributeValueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignedPageAttributeValueAllColumns,
			assignedPageAttributeValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assigned_page_attribute_values, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assignedPageAttributeValuePrimaryKeyColumns))
			copy(conflict, assignedPageAttributeValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"assigned_page_attribute_values\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignedPageAttributeValueType, assignedPageAttributeValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assigned_page_attribute_values")
	}

	if !cached {
		assignedPageAttributeValueUpsertCacheMut.Lock()
		assignedPageAttributeValueUpsertCache[key] = cache
		assignedPageAttributeValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AssignedPageAttributeValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssignedPageAttributeValue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssignedPageAttributeValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignedPageAttributeValuePrimaryKeyMapping)
	sql := "DELETE FROM \"assigned_page_attribute_values\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assigned_page_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assigned_page_attribute_values")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignedPageAttributeValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assignedPageAttributeValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assigned_page_attribute_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assigned_page_attribute_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignedPageAttributeValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assignedPageAttributeValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPageAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"assigned_page_attribute_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedPageAttributeValuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignedPageAttributeValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assigned_page_attribute_values")
	}

	if len(assignedPageAttributeValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssignedPageAttributeValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssignedPageAttributeValue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignedPageAttributeValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignedPageAttributeValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignedPageAttributeValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"assigned_page_attribute_values\".* FROM \"assigned_page_attribute_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignedPageAttributeValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssignedPageAttributeValueSlice")
	}

	*o = slice

	return nil
}

// AssignedPageAttributeValueExists checks if the AssignedPageAttributeValue row exists.
func AssignedPageAttributeValueExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"assigned_page_attribute_values\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assigned_page_attribute_values exists")
	}

	return exists, nil
}

// Exists checks if the AssignedPageAttributeValue row exists.
func (o *AssignedPageAttributeValue) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssignedPageAttributeValueExists(ctx, exec, o.ID)
}
