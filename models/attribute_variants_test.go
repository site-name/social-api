// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttributeVariants(t *testing.T) {
	t.Parallel()

	query := AttributeVariants()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttributeVariantsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributeVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributeVariantsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AttributeVariants().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributeVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributeVariantsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributeVariantSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AttributeVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributeVariantsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttributeVariantExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AttributeVariant exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttributeVariantExists to return true, but got false.")
	}
}

func testAttributeVariantsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attributeVariantFound, err := FindAttributeVariant(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attributeVariantFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttributeVariantsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AttributeVariants().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttributeVariantsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AttributeVariants().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttributeVariantsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attributeVariantOne := &AttributeVariant{}
	attributeVariantTwo := &AttributeVariant{}
	if err = randomize.Struct(seed, attributeVariantOne, attributeVariantDBTypes, false, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}
	if err = randomize.Struct(seed, attributeVariantTwo, attributeVariantDBTypes, false, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributeVariantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributeVariantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttributeVariants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttributeVariantsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attributeVariantOne := &AttributeVariant{}
	attributeVariantTwo := &AttributeVariant{}
	if err = randomize.Struct(seed, attributeVariantOne, attributeVariantDBTypes, false, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}
	if err = randomize.Struct(seed, attributeVariantTwo, attributeVariantDBTypes, false, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = attributeVariantOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributeVariantTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attributeVariantBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeVariant) error {
	*o = AttributeVariant{}
	return nil
}

func attributeVariantAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeVariant) error {
	*o = AttributeVariant{}
	return nil
}

func attributeVariantAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AttributeVariant) error {
	*o = AttributeVariant{}
	return nil
}

func attributeVariantBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttributeVariant) error {
	*o = AttributeVariant{}
	return nil
}

func attributeVariantAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AttributeVariant) error {
	*o = AttributeVariant{}
	return nil
}

func attributeVariantBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttributeVariant) error {
	*o = AttributeVariant{}
	return nil
}

func attributeVariantAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AttributeVariant) error {
	*o = AttributeVariant{}
	return nil
}

func attributeVariantBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeVariant) error {
	*o = AttributeVariant{}
	return nil
}

func attributeVariantAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AttributeVariant) error {
	*o = AttributeVariant{}
	return nil
}

func testAttributeVariantsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AttributeVariant{}
	o := &AttributeVariant{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AttributeVariant object: %s", err)
	}

	AddAttributeVariantHook(boil.BeforeInsertHook, attributeVariantBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attributeVariantBeforeInsertHooks = []AttributeVariantHook{}

	AddAttributeVariantHook(boil.AfterInsertHook, attributeVariantAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attributeVariantAfterInsertHooks = []AttributeVariantHook{}

	AddAttributeVariantHook(boil.AfterSelectHook, attributeVariantAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attributeVariantAfterSelectHooks = []AttributeVariantHook{}

	AddAttributeVariantHook(boil.BeforeUpdateHook, attributeVariantBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attributeVariantBeforeUpdateHooks = []AttributeVariantHook{}

	AddAttributeVariantHook(boil.AfterUpdateHook, attributeVariantAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attributeVariantAfterUpdateHooks = []AttributeVariantHook{}

	AddAttributeVariantHook(boil.BeforeDeleteHook, attributeVariantBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attributeVariantBeforeDeleteHooks = []AttributeVariantHook{}

	AddAttributeVariantHook(boil.AfterDeleteHook, attributeVariantAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attributeVariantAfterDeleteHooks = []AttributeVariantHook{}

	AddAttributeVariantHook(boil.BeforeUpsertHook, attributeVariantBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attributeVariantBeforeUpsertHooks = []AttributeVariantHook{}

	AddAttributeVariantHook(boil.AfterUpsertHook, attributeVariantAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attributeVariantAfterUpsertHooks = []AttributeVariantHook{}
}

func testAttributeVariantsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributeVariantsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(attributeVariantColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AttributeVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributeVariantToManyAssignmentidAssignedVariantAttributes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeVariant
	var b, c AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, assignedVariantAttributeDBTypes, false, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, assignedVariantAttributeDBTypes, false, assignedVariantAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Assignmentid, a.ID)
	queries.Assign(&c.Assignmentid, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AssignmentidAssignedVariantAttributes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Assignmentid, b.Assignmentid) {
			bFound = true
		}
		if queries.Equal(v.Assignmentid, c.Assignmentid) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributeVariantSlice{&a}
	if err = a.L.LoadAssignmentidAssignedVariantAttributes(ctx, tx, false, (*[]*AttributeVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignmentidAssignedVariantAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AssignmentidAssignedVariantAttributes = nil
	if err = a.L.LoadAssignmentidAssignedVariantAttributes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AssignmentidAssignedVariantAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAttributeVariantToManyAddOpAssignmentidAssignedVariantAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeVariant
	var b, c, d, e AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedVariantAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AssignedVariantAttribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssignmentidAssignedVariantAttributes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Assignmentid) {
			t.Error("foreign key was wrong value", a.ID, first.Assignmentid)
		}
		if !queries.Equal(a.ID, second.Assignmentid) {
			t.Error("foreign key was wrong value", a.ID, second.Assignmentid)
		}

		if first.R.AssignmentidAttributeVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AssignmentidAttributeVariant != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AssignmentidAssignedVariantAttributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AssignmentidAssignedVariantAttributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AssignmentidAssignedVariantAttributes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAttributeVariantToManySetOpAssignmentidAssignedVariantAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeVariant
	var b, c, d, e AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedVariantAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAssignmentidAssignedVariantAttributes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AssignmentidAssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAssignmentidAssignedVariantAttributes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AssignmentidAssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Assignmentid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Assignmentid) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Assignmentid) {
		t.Error("foreign key was wrong value", a.ID, d.Assignmentid)
	}
	if !queries.Equal(a.ID, e.Assignmentid) {
		t.Error("foreign key was wrong value", a.ID, e.Assignmentid)
	}

	if b.R.AssignmentidAttributeVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AssignmentidAttributeVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AssignmentidAttributeVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AssignmentidAttributeVariant != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AssignmentidAssignedVariantAttributes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AssignmentidAssignedVariantAttributes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAttributeVariantToManyRemoveOpAssignmentidAssignedVariantAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeVariant
	var b, c, d, e AssignedVariantAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AssignedVariantAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assignedVariantAttributeDBTypes, false, strmangle.SetComplement(assignedVariantAttributePrimaryKeyColumns, assignedVariantAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAssignmentidAssignedVariantAttributes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AssignmentidAssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAssignmentidAssignedVariantAttributes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AssignmentidAssignedVariantAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Assignmentid) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Assignmentid) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AssignmentidAttributeVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AssignmentidAttributeVariant != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AssignmentidAttributeVariant != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AssignmentidAttributeVariant != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AssignmentidAssignedVariantAttributes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AssignmentidAssignedVariantAttributes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AssignmentidAssignedVariantAttributes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAttributeVariantToOneAttributeUsingAttributeidAttribute(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AttributeVariant
	var foreign Attribute

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Attributeid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.AttributeidAttribute().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAttributeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Attribute) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AttributeVariantSlice{&local}
	if err = local.L.LoadAttributeidAttribute(ctx, tx, false, (*[]*AttributeVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AttributeidAttribute == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.AttributeidAttribute = nil
	if err = local.L.LoadAttributeidAttribute(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.AttributeidAttribute == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAttributeVariantToOneProductTypeUsingProducttypeidProductType(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AttributeVariant
	var foreign ProductType

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productTypeDBTypes, false, productTypeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ProductType struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.Producttypeid, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ProducttypeidProductType().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddProductTypeHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ProductType) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AttributeVariantSlice{&local}
	if err = local.L.LoadProducttypeidProductType(ctx, tx, false, (*[]*AttributeVariant)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProducttypeidProductType == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ProducttypeidProductType = nil
	if err = local.L.LoadProducttypeidProductType(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ProducttypeidProductType == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAttributeVariantToOneSetOpAttributeUsingAttributeidAttribute(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeVariant
	var b, c Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Attribute{&b, &c} {
		err = a.SetAttributeidAttribute(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.AttributeidAttribute != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AttributeidAttributeVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Attributeid, x.ID) {
			t.Error("foreign key was wrong value", a.Attributeid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Attributeid))
		reflect.Indirect(reflect.ValueOf(&a.Attributeid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Attributeid, x.ID) {
			t.Error("foreign key was wrong value", a.Attributeid, x.ID)
		}
	}
}

func testAttributeVariantToOneRemoveOpAttributeUsingAttributeidAttribute(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeVariant
	var b Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAttributeidAttribute(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAttributeidAttribute(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AttributeidAttribute().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.AttributeidAttribute != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Attributeid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AttributeidAttributeVariants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAttributeVariantToOneSetOpProductTypeUsingProducttypeidProductType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeVariant
	var b, c ProductType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productTypeDBTypes, false, strmangle.SetComplement(productTypePrimaryKeyColumns, productTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productTypeDBTypes, false, strmangle.SetComplement(productTypePrimaryKeyColumns, productTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ProductType{&b, &c} {
		err = a.SetProducttypeidProductType(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ProducttypeidProductType != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ProducttypeidAttributeVariants[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.Producttypeid, x.ID) {
			t.Error("foreign key was wrong value", a.Producttypeid)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Producttypeid))
		reflect.Indirect(reflect.ValueOf(&a.Producttypeid)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.Producttypeid, x.ID) {
			t.Error("foreign key was wrong value", a.Producttypeid, x.ID)
		}
	}
}

func testAttributeVariantToOneRemoveOpProductTypeUsingProducttypeidProductType(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AttributeVariant
	var b ProductType

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeVariantDBTypes, false, strmangle.SetComplement(attributeVariantPrimaryKeyColumns, attributeVariantColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productTypeDBTypes, false, strmangle.SetComplement(productTypePrimaryKeyColumns, productTypeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetProducttypeidProductType(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveProducttypeidProductType(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ProducttypeidProductType().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ProducttypeidProductType != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.Producttypeid) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ProducttypeidAttributeVariants) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAttributeVariantsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributeVariantsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributeVariantSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAttributeVariantsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AttributeVariants().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attributeVariantDBTypes = map[string]string{`ID`: `character varying`, `Attributeid`: `character varying`, `Producttypeid`: `character varying`, `Variantselection`: `boolean`, `Sortorder`: `integer`}
	_                       = bytes.MinRead
)

func testAttributeVariantsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attributeVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attributeVariantAllColumns) == len(attributeVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttributeVariantsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attributeVariantAllColumns) == len(attributeVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AttributeVariant{}
	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AttributeVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributeVariantDBTypes, true, attributeVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attributeVariantAllColumns, attributeVariantPrimaryKeyColumns) {
		fields = attributeVariantAllColumns
	} else {
		fields = strmangle.SetComplement(
			attributeVariantAllColumns,
			attributeVariantPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttributeVariantSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAttributeVariantsUpsert(t *testing.T) {
	t.Parallel()

	if len(attributeVariantAllColumns) == len(attributeVariantPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AttributeVariant{}
	if err = randomize.Struct(seed, &o, attributeVariantDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttributeVariant: %s", err)
	}

	count, err := AttributeVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attributeVariantDBTypes, false, attributeVariantPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AttributeVariant struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AttributeVariant: %s", err)
	}

	count, err = AttributeVariants().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
