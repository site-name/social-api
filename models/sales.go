// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sale is an object representing the database table.
type Sale struct {
	ID              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name            null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Type            null.String `boil:"type" json:"type,omitempty" toml:"type" yaml:"type,omitempty"`
	StartDate       null.Int64  `boil:"start_date" json:"start_date,omitempty" toml:"start_date" yaml:"start_date,omitempty"`
	EndDate         null.Int64  `boil:"end_date" json:"end_date,omitempty" toml:"end_date" yaml:"end_date,omitempty"`
	CreateAt        null.Int64  `boil:"create_at" json:"create_at,omitempty" toml:"create_at" yaml:"create_at,omitempty"`
	UpdateAt        null.Int64  `boil:"update_at" json:"update_at,omitempty" toml:"update_at" yaml:"update_at,omitempty"`
	Metadata        null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	PrivateMetadata null.JSON   `boil:"private_metadata" json:"private_metadata,omitempty" toml:"private_metadata" yaml:"private_metadata,omitempty"`

	R *saleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L saleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SaleColumns = struct {
	ID              string
	Name            string
	Type            string
	StartDate       string
	EndDate         string
	CreateAt        string
	UpdateAt        string
	Metadata        string
	PrivateMetadata string
}{
	ID:              "id",
	Name:            "name",
	Type:            "type",
	StartDate:       "start_date",
	EndDate:         "end_date",
	CreateAt:        "create_at",
	UpdateAt:        "update_at",
	Metadata:        "metadata",
	PrivateMetadata: "private_metadata",
}

var SaleTableColumns = struct {
	ID              string
	Name            string
	Type            string
	StartDate       string
	EndDate         string
	CreateAt        string
	UpdateAt        string
	Metadata        string
	PrivateMetadata string
}{
	ID:              "sales.id",
	Name:            "sales.name",
	Type:            "sales.type",
	StartDate:       "sales.start_date",
	EndDate:         "sales.end_date",
	CreateAt:        "sales.create_at",
	UpdateAt:        "sales.update_at",
	Metadata:        "sales.metadata",
	PrivateMetadata: "sales.private_metadata",
}

// Generated where

var SaleWhere = struct {
	ID              whereHelperstring
	Name            whereHelpernull_String
	Type            whereHelpernull_String
	StartDate       whereHelpernull_Int64
	EndDate         whereHelpernull_Int64
	CreateAt        whereHelpernull_Int64
	UpdateAt        whereHelpernull_Int64
	Metadata        whereHelpernull_JSON
	PrivateMetadata whereHelpernull_JSON
}{
	ID:              whereHelperstring{field: "\"sales\".\"id\""},
	Name:            whereHelpernull_String{field: "\"sales\".\"name\""},
	Type:            whereHelpernull_String{field: "\"sales\".\"type\""},
	StartDate:       whereHelpernull_Int64{field: "\"sales\".\"start_date\""},
	EndDate:         whereHelpernull_Int64{field: "\"sales\".\"end_date\""},
	CreateAt:        whereHelpernull_Int64{field: "\"sales\".\"create_at\""},
	UpdateAt:        whereHelpernull_Int64{field: "\"sales\".\"update_at\""},
	Metadata:        whereHelpernull_JSON{field: "\"sales\".\"metadata\""},
	PrivateMetadata: whereHelpernull_JSON{field: "\"sales\".\"private_metadata\""},
}

// SaleRels is where relationship names are stored.
var SaleRels = struct {
	SaleCategories      string
	SaleChannelListings string
	SaleCollections     string
	SaleProducts        string
	SaleTranslations    string
}{
	SaleCategories:      "SaleCategories",
	SaleChannelListings: "SaleChannelListings",
	SaleCollections:     "SaleCollections",
	SaleProducts:        "SaleProducts",
	SaleTranslations:    "SaleTranslations",
}

// saleR is where relationships are stored.
type saleR struct {
	SaleCategories      SaleCategorySlice       `boil:"SaleCategories" json:"SaleCategories" toml:"SaleCategories" yaml:"SaleCategories"`
	SaleChannelListings SaleChannelListingSlice `boil:"SaleChannelListings" json:"SaleChannelListings" toml:"SaleChannelListings" yaml:"SaleChannelListings"`
	SaleCollections     SaleCollectionSlice     `boil:"SaleCollections" json:"SaleCollections" toml:"SaleCollections" yaml:"SaleCollections"`
	SaleProducts        SaleProductSlice        `boil:"SaleProducts" json:"SaleProducts" toml:"SaleProducts" yaml:"SaleProducts"`
	SaleTranslations    SaleTranslationSlice    `boil:"SaleTranslations" json:"SaleTranslations" toml:"SaleTranslations" yaml:"SaleTranslations"`
}

// NewStruct creates a new relationship struct
func (*saleR) NewStruct() *saleR {
	return &saleR{}
}

func (r *saleR) GetSaleCategories() SaleCategorySlice {
	if r == nil {
		return nil
	}
	return r.SaleCategories
}

func (r *saleR) GetSaleChannelListings() SaleChannelListingSlice {
	if r == nil {
		return nil
	}
	return r.SaleChannelListings
}

func (r *saleR) GetSaleCollections() SaleCollectionSlice {
	if r == nil {
		return nil
	}
	return r.SaleCollections
}

func (r *saleR) GetSaleProducts() SaleProductSlice {
	if r == nil {
		return nil
	}
	return r.SaleProducts
}

func (r *saleR) GetSaleTranslations() SaleTranslationSlice {
	if r == nil {
		return nil
	}
	return r.SaleTranslations
}

// saleL is where Load methods for each relationship are stored.
type saleL struct{}

var (
	saleAllColumns            = []string{"id", "name", "type", "start_date", "end_date", "create_at", "update_at", "metadata", "private_metadata"}
	saleColumnsWithoutDefault = []string{"id"}
	saleColumnsWithDefault    = []string{"name", "type", "start_date", "end_date", "create_at", "update_at", "metadata", "private_metadata"}
	salePrimaryKeyColumns     = []string{"id"}
	saleGeneratedColumns      = []string{}
)

type (
	// SaleSlice is an alias for a slice of pointers to Sale.
	// This should almost always be used instead of []Sale.
	SaleSlice []*Sale
	// SaleHook is the signature for custom Sale hook methods
	SaleHook func(context.Context, boil.ContextExecutor, *Sale) error

	saleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	saleType                 = reflect.TypeOf(&Sale{})
	saleMapping              = queries.MakeStructMapping(saleType)
	salePrimaryKeyMapping, _ = queries.BindMapping(saleType, saleMapping, salePrimaryKeyColumns)
	saleInsertCacheMut       sync.RWMutex
	saleInsertCache          = make(map[string]insertCache)
	saleUpdateCacheMut       sync.RWMutex
	saleUpdateCache          = make(map[string]updateCache)
	saleUpsertCacheMut       sync.RWMutex
	saleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var saleAfterSelectHooks []SaleHook

var saleBeforeInsertHooks []SaleHook
var saleAfterInsertHooks []SaleHook

var saleBeforeUpdateHooks []SaleHook
var saleAfterUpdateHooks []SaleHook

var saleBeforeDeleteHooks []SaleHook
var saleAfterDeleteHooks []SaleHook

var saleBeforeUpsertHooks []SaleHook
var saleAfterUpsertHooks []SaleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sale) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sale) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sale) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sale) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sale) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sale) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sale) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sale) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sale) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range saleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSaleHook registers your hook function for all future operations.
func AddSaleHook(hookPoint boil.HookPoint, saleHook SaleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		saleAfterSelectHooks = append(saleAfterSelectHooks, saleHook)
	case boil.BeforeInsertHook:
		saleBeforeInsertHooks = append(saleBeforeInsertHooks, saleHook)
	case boil.AfterInsertHook:
		saleAfterInsertHooks = append(saleAfterInsertHooks, saleHook)
	case boil.BeforeUpdateHook:
		saleBeforeUpdateHooks = append(saleBeforeUpdateHooks, saleHook)
	case boil.AfterUpdateHook:
		saleAfterUpdateHooks = append(saleAfterUpdateHooks, saleHook)
	case boil.BeforeDeleteHook:
		saleBeforeDeleteHooks = append(saleBeforeDeleteHooks, saleHook)
	case boil.AfterDeleteHook:
		saleAfterDeleteHooks = append(saleAfterDeleteHooks, saleHook)
	case boil.BeforeUpsertHook:
		saleBeforeUpsertHooks = append(saleBeforeUpsertHooks, saleHook)
	case boil.AfterUpsertHook:
		saleAfterUpsertHooks = append(saleAfterUpsertHooks, saleHook)
	}
}

// One returns a single sale record from the query.
func (q saleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sale, error) {
	o := &Sale{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sales")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Sale records from the query.
func (q saleQuery) All(ctx context.Context, exec boil.ContextExecutor) (SaleSlice, error) {
	var o []*Sale

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Sale slice")
	}

	if len(saleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Sale records in the query.
func (q saleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sales rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q saleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sales exists")
	}

	return count > 0, nil
}

// SaleCategories retrieves all the sale_category's SaleCategories with an executor.
func (o *Sale) SaleCategories(mods ...qm.QueryMod) saleCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_categories\".\"sale_id\"=?", o.ID),
	)

	return SaleCategories(queryMods...)
}

// SaleChannelListings retrieves all the sale_channel_listing's SaleChannelListings with an executor.
func (o *Sale) SaleChannelListings(mods ...qm.QueryMod) saleChannelListingQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_channel_listings\".\"sale_id\"=?", o.ID),
	)

	return SaleChannelListings(queryMods...)
}

// SaleCollections retrieves all the sale_collection's SaleCollections with an executor.
func (o *Sale) SaleCollections(mods ...qm.QueryMod) saleCollectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_collections\".\"sale_id\"=?", o.ID),
	)

	return SaleCollections(queryMods...)
}

// SaleProducts retrieves all the sale_product's SaleProducts with an executor.
func (o *Sale) SaleProducts(mods ...qm.QueryMod) saleProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_products\".\"sale_id\"=?", o.ID),
	)

	return SaleProducts(queryMods...)
}

// SaleTranslations retrieves all the sale_translation's SaleTranslations with an executor.
func (o *Sale) SaleTranslations(mods ...qm.QueryMod) saleTranslationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_translations\".\"sale_id\"=?", o.ID),
	)

	return SaleTranslations(queryMods...)
}

// LoadSaleCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (saleL) LoadSaleCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		var ok bool
		object, ok = maybeSale.(*Sale)
		if !ok {
			object = new(Sale)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSale)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSale))
			}
		}
	} else {
		s, ok := maybeSale.(*[]*Sale)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSale)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSale))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sale_categories`),
		qm.WhereIn(`sale_categories.sale_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_categories")
	}

	var resultSlice []*SaleCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_categories")
	}

	if len(saleCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SaleCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &saleCategoryR{}
			}
			foreign.R.Sale = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SaleID) {
				local.R.SaleCategories = append(local.R.SaleCategories, foreign)
				if foreign.R == nil {
					foreign.R = &saleCategoryR{}
				}
				foreign.R.Sale = local
				break
			}
		}
	}

	return nil
}

// LoadSaleChannelListings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (saleL) LoadSaleChannelListings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		var ok bool
		object, ok = maybeSale.(*Sale)
		if !ok {
			object = new(Sale)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSale)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSale))
			}
		}
	} else {
		s, ok := maybeSale.(*[]*Sale)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSale)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSale))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sale_channel_listings`),
		qm.WhereIn(`sale_channel_listings.sale_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_channel_listings")
	}

	var resultSlice []*SaleChannelListing
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_channel_listings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_channel_listings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_channel_listings")
	}

	if len(saleChannelListingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SaleChannelListings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &saleChannelListingR{}
			}
			foreign.R.Sale = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SaleID) {
				local.R.SaleChannelListings = append(local.R.SaleChannelListings, foreign)
				if foreign.R == nil {
					foreign.R = &saleChannelListingR{}
				}
				foreign.R.Sale = local
				break
			}
		}
	}

	return nil
}

// LoadSaleCollections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (saleL) LoadSaleCollections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		var ok bool
		object, ok = maybeSale.(*Sale)
		if !ok {
			object = new(Sale)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSale)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSale))
			}
		}
	} else {
		s, ok := maybeSale.(*[]*Sale)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSale)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSale))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sale_collections`),
		qm.WhereIn(`sale_collections.sale_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_collections")
	}

	var resultSlice []*SaleCollection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_collections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_collections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_collections")
	}

	if len(saleCollectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SaleCollections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &saleCollectionR{}
			}
			foreign.R.Sale = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SaleID) {
				local.R.SaleCollections = append(local.R.SaleCollections, foreign)
				if foreign.R == nil {
					foreign.R = &saleCollectionR{}
				}
				foreign.R.Sale = local
				break
			}
		}
	}

	return nil
}

// LoadSaleProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (saleL) LoadSaleProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		var ok bool
		object, ok = maybeSale.(*Sale)
		if !ok {
			object = new(Sale)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSale)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSale))
			}
		}
	} else {
		s, ok := maybeSale.(*[]*Sale)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSale)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSale))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sale_products`),
		qm.WhereIn(`sale_products.sale_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_products")
	}

	var resultSlice []*SaleProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_products")
	}

	if len(saleProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SaleProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &saleProductR{}
			}
			foreign.R.Sale = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SaleID) {
				local.R.SaleProducts = append(local.R.SaleProducts, foreign)
				if foreign.R == nil {
					foreign.R = &saleProductR{}
				}
				foreign.R.Sale = local
				break
			}
		}
	}

	return nil
}

// LoadSaleTranslations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (saleL) LoadSaleTranslations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		var ok bool
		object, ok = maybeSale.(*Sale)
		if !ok {
			object = new(Sale)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSale)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSale))
			}
		}
	} else {
		s, ok := maybeSale.(*[]*Sale)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSale)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSale))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sale_translations`),
		qm.WhereIn(`sale_translations.sale_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_translations")
	}

	var resultSlice []*SaleTranslation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_translations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_translations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_translations")
	}

	if len(saleTranslationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SaleTranslations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &saleTranslationR{}
			}
			foreign.R.Sale = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SaleID) {
				local.R.SaleTranslations = append(local.R.SaleTranslations, foreign)
				if foreign.R == nil {
					foreign.R = &saleTranslationR{}
				}
				foreign.R.Sale = local
				break
			}
		}
	}

	return nil
}

// AddSaleCategories adds the given related objects to the existing relationships
// of the sale, optionally inserting them as new records.
// Appends related to o.R.SaleCategories.
// Sets related.R.Sale appropriately.
func (o *Sale) AddSaleCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SaleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sale_id"}),
				strmangle.WhereClause("\"", "\"", 2, saleCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SaleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &saleR{
			SaleCategories: related,
		}
	} else {
		o.R.SaleCategories = append(o.R.SaleCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &saleCategoryR{
				Sale: o,
			}
		} else {
			rel.R.Sale = o
		}
	}
	return nil
}

// SetSaleCategories removes all previously related items of the
// sale replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sale's SaleCategories accordingly.
// Replaces o.R.SaleCategories with related.
// Sets related.R.Sale's SaleCategories accordingly.
func (o *Sale) SetSaleCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleCategory) error {
	query := "update \"sale_categories\" set \"sale_id\" = null where \"sale_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SaleCategories {
			queries.SetScanner(&rel.SaleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sale = nil
		}
		o.R.SaleCategories = nil
	}

	return o.AddSaleCategories(ctx, exec, insert, related...)
}

// RemoveSaleCategories relationships from objects passed in.
// Removes related items from R.SaleCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.Sale.
func (o *Sale) RemoveSaleCategories(ctx context.Context, exec boil.ContextExecutor, related ...*SaleCategory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SaleID, nil)
		if rel.R != nil {
			rel.R.Sale = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("sale_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SaleCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.SaleCategories)
			if ln > 1 && i < ln-1 {
				o.R.SaleCategories[i] = o.R.SaleCategories[ln-1]
			}
			o.R.SaleCategories = o.R.SaleCategories[:ln-1]
			break
		}
	}

	return nil
}

// AddSaleChannelListings adds the given related objects to the existing relationships
// of the sale, optionally inserting them as new records.
// Appends related to o.R.SaleChannelListings.
// Sets related.R.Sale appropriately.
func (o *Sale) AddSaleChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleChannelListing) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SaleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_channel_listings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sale_id"}),
				strmangle.WhereClause("\"", "\"", 2, saleChannelListingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SaleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &saleR{
			SaleChannelListings: related,
		}
	} else {
		o.R.SaleChannelListings = append(o.R.SaleChannelListings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &saleChannelListingR{
				Sale: o,
			}
		} else {
			rel.R.Sale = o
		}
	}
	return nil
}

// SetSaleChannelListings removes all previously related items of the
// sale replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sale's SaleChannelListings accordingly.
// Replaces o.R.SaleChannelListings with related.
// Sets related.R.Sale's SaleChannelListings accordingly.
func (o *Sale) SetSaleChannelListings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleChannelListing) error {
	query := "update \"sale_channel_listings\" set \"sale_id\" = null where \"sale_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SaleChannelListings {
			queries.SetScanner(&rel.SaleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sale = nil
		}
		o.R.SaleChannelListings = nil
	}

	return o.AddSaleChannelListings(ctx, exec, insert, related...)
}

// RemoveSaleChannelListings relationships from objects passed in.
// Removes related items from R.SaleChannelListings (uses pointer comparison, removal does not keep order)
// Sets related.R.Sale.
func (o *Sale) RemoveSaleChannelListings(ctx context.Context, exec boil.ContextExecutor, related ...*SaleChannelListing) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SaleID, nil)
		if rel.R != nil {
			rel.R.Sale = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("sale_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SaleChannelListings {
			if rel != ri {
				continue
			}

			ln := len(o.R.SaleChannelListings)
			if ln > 1 && i < ln-1 {
				o.R.SaleChannelListings[i] = o.R.SaleChannelListings[ln-1]
			}
			o.R.SaleChannelListings = o.R.SaleChannelListings[:ln-1]
			break
		}
	}

	return nil
}

// AddSaleCollections adds the given related objects to the existing relationships
// of the sale, optionally inserting them as new records.
// Appends related to o.R.SaleCollections.
// Sets related.R.Sale appropriately.
func (o *Sale) AddSaleCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleCollection) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SaleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_collections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sale_id"}),
				strmangle.WhereClause("\"", "\"", 2, saleCollectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SaleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &saleR{
			SaleCollections: related,
		}
	} else {
		o.R.SaleCollections = append(o.R.SaleCollections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &saleCollectionR{
				Sale: o,
			}
		} else {
			rel.R.Sale = o
		}
	}
	return nil
}

// SetSaleCollections removes all previously related items of the
// sale replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sale's SaleCollections accordingly.
// Replaces o.R.SaleCollections with related.
// Sets related.R.Sale's SaleCollections accordingly.
func (o *Sale) SetSaleCollections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleCollection) error {
	query := "update \"sale_collections\" set \"sale_id\" = null where \"sale_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SaleCollections {
			queries.SetScanner(&rel.SaleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sale = nil
		}
		o.R.SaleCollections = nil
	}

	return o.AddSaleCollections(ctx, exec, insert, related...)
}

// RemoveSaleCollections relationships from objects passed in.
// Removes related items from R.SaleCollections (uses pointer comparison, removal does not keep order)
// Sets related.R.Sale.
func (o *Sale) RemoveSaleCollections(ctx context.Context, exec boil.ContextExecutor, related ...*SaleCollection) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SaleID, nil)
		if rel.R != nil {
			rel.R.Sale = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("sale_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SaleCollections {
			if rel != ri {
				continue
			}

			ln := len(o.R.SaleCollections)
			if ln > 1 && i < ln-1 {
				o.R.SaleCollections[i] = o.R.SaleCollections[ln-1]
			}
			o.R.SaleCollections = o.R.SaleCollections[:ln-1]
			break
		}
	}

	return nil
}

// AddSaleProducts adds the given related objects to the existing relationships
// of the sale, optionally inserting them as new records.
// Appends related to o.R.SaleProducts.
// Sets related.R.Sale appropriately.
func (o *Sale) AddSaleProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SaleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sale_id"}),
				strmangle.WhereClause("\"", "\"", 2, saleProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SaleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &saleR{
			SaleProducts: related,
		}
	} else {
		o.R.SaleProducts = append(o.R.SaleProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &saleProductR{
				Sale: o,
			}
		} else {
			rel.R.Sale = o
		}
	}
	return nil
}

// SetSaleProducts removes all previously related items of the
// sale replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sale's SaleProducts accordingly.
// Replaces o.R.SaleProducts with related.
// Sets related.R.Sale's SaleProducts accordingly.
func (o *Sale) SetSaleProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleProduct) error {
	query := "update \"sale_products\" set \"sale_id\" = null where \"sale_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SaleProducts {
			queries.SetScanner(&rel.SaleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sale = nil
		}
		o.R.SaleProducts = nil
	}

	return o.AddSaleProducts(ctx, exec, insert, related...)
}

// RemoveSaleProducts relationships from objects passed in.
// Removes related items from R.SaleProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.Sale.
func (o *Sale) RemoveSaleProducts(ctx context.Context, exec boil.ContextExecutor, related ...*SaleProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SaleID, nil)
		if rel.R != nil {
			rel.R.Sale = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("sale_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SaleProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.SaleProducts)
			if ln > 1 && i < ln-1 {
				o.R.SaleProducts[i] = o.R.SaleProducts[ln-1]
			}
			o.R.SaleProducts = o.R.SaleProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddSaleTranslations adds the given related objects to the existing relationships
// of the sale, optionally inserting them as new records.
// Appends related to o.R.SaleTranslations.
// Sets related.R.Sale appropriately.
func (o *Sale) AddSaleTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleTranslation) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SaleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_translations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sale_id"}),
				strmangle.WhereClause("\"", "\"", 2, saleTranslationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SaleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &saleR{
			SaleTranslations: related,
		}
	} else {
		o.R.SaleTranslations = append(o.R.SaleTranslations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &saleTranslationR{
				Sale: o,
			}
		} else {
			rel.R.Sale = o
		}
	}
	return nil
}

// SetSaleTranslations removes all previously related items of the
// sale replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Sale's SaleTranslations accordingly.
// Replaces o.R.SaleTranslations with related.
// Sets related.R.Sale's SaleTranslations accordingly.
func (o *Sale) SetSaleTranslations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleTranslation) error {
	query := "update \"sale_translations\" set \"sale_id\" = null where \"sale_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SaleTranslations {
			queries.SetScanner(&rel.SaleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Sale = nil
		}
		o.R.SaleTranslations = nil
	}

	return o.AddSaleTranslations(ctx, exec, insert, related...)
}

// RemoveSaleTranslations relationships from objects passed in.
// Removes related items from R.SaleTranslations (uses pointer comparison, removal does not keep order)
// Sets related.R.Sale.
func (o *Sale) RemoveSaleTranslations(ctx context.Context, exec boil.ContextExecutor, related ...*SaleTranslation) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SaleID, nil)
		if rel.R != nil {
			rel.R.Sale = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("sale_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SaleTranslations {
			if rel != ri {
				continue
			}

			ln := len(o.R.SaleTranslations)
			if ln > 1 && i < ln-1 {
				o.R.SaleTranslations[i] = o.R.SaleTranslations[ln-1]
			}
			o.R.SaleTranslations = o.R.SaleTranslations[:ln-1]
			break
		}
	}

	return nil
}

// Sales retrieves all the records using an executor.
func Sales(mods ...qm.QueryMod) saleQuery {
	mods = append(mods, qm.From("\"sales\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sales\".*"})
	}

	return saleQuery{q}
}

// FindSale retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSale(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Sale, error) {
	saleObj := &Sale{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sales\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, saleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sales")
	}

	if err = saleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return saleObj, err
	}

	return saleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sale) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sales provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(saleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	saleInsertCacheMut.RLock()
	cache, cached := saleInsertCache[key]
	saleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			saleAllColumns,
			saleColumnsWithDefault,
			saleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(saleType, saleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(saleType, saleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sales\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sales\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sales")
	}

	if !cached {
		saleInsertCacheMut.Lock()
		saleInsertCache[key] = cache
		saleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Sale.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sale) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	saleUpdateCacheMut.RLock()
	cache, cached := saleUpdateCache[key]
	saleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			saleAllColumns,
			salePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sales, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sales\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, salePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(saleType, saleMapping, append(wl, salePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sales row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sales")
	}

	if !cached {
		saleUpdateCacheMut.Lock()
		saleUpdateCache[key] = cache
		saleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q saleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sales")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SaleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sales\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, salePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sale slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sale")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sale) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sales provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(saleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	saleUpsertCacheMut.RLock()
	cache, cached := saleUpsertCache[key]
	saleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			saleAllColumns,
			saleColumnsWithDefault,
			saleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			saleAllColumns,
			salePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sales, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(salePrimaryKeyColumns))
			copy(conflict, salePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sales\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(saleType, saleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(saleType, saleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sales")
	}

	if !cached {
		saleUpsertCacheMut.Lock()
		saleUpsertCache[key] = cache
		saleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Sale record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sale) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Sale provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), salePrimaryKeyMapping)
	sql := "DELETE FROM \"sales\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sales")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q saleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no saleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sales")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sales")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SaleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(saleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sales\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sale slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sales")
	}

	if len(saleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sale) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSale(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SaleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SaleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sales\".* FROM \"sales\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SaleSlice")
	}

	*o = slice

	return nil
}

// SaleExists checks if the Sale row exists.
func SaleExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sales\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sales exists")
	}

	return exists, nil
}

// Exists checks if the Sale row exists.
func (o *Sale) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SaleExists(ctx, exec, o.ID)
}
