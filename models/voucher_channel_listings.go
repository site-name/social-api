// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VoucherChannelListing is an object representing the database table.
type VoucherChannelListing struct {
	ID            string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Createat      null.Int64   `boil:"createat" json:"createat,omitempty" toml:"createat" yaml:"createat,omitempty"`
	Voucherid     string       `boil:"voucherid" json:"voucherid" toml:"voucherid" yaml:"voucherid"`
	Channelid     string       `boil:"channelid" json:"channelid" toml:"channelid" yaml:"channelid"`
	Discountvalue null.Float64 `boil:"discountvalue" json:"discountvalue,omitempty" toml:"discountvalue" yaml:"discountvalue,omitempty"`
	Currency      null.String  `boil:"currency" json:"currency,omitempty" toml:"currency" yaml:"currency,omitempty"`
	Minspenamount null.Float64 `boil:"minspenamount" json:"minspenamount,omitempty" toml:"minspenamount" yaml:"minspenamount,omitempty"`

	R *voucherChannelListingR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L voucherChannelListingL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VoucherChannelListingColumns = struct {
	ID            string
	Createat      string
	Voucherid     string
	Channelid     string
	Discountvalue string
	Currency      string
	Minspenamount string
}{
	ID:            "id",
	Createat:      "createat",
	Voucherid:     "voucherid",
	Channelid:     "channelid",
	Discountvalue: "discountvalue",
	Currency:      "currency",
	Minspenamount: "minspenamount",
}

var VoucherChannelListingTableColumns = struct {
	ID            string
	Createat      string
	Voucherid     string
	Channelid     string
	Discountvalue string
	Currency      string
	Minspenamount string
}{
	ID:            "voucher_channel_listings.id",
	Createat:      "voucher_channel_listings.createat",
	Voucherid:     "voucher_channel_listings.voucherid",
	Channelid:     "voucher_channel_listings.channelid",
	Discountvalue: "voucher_channel_listings.discountvalue",
	Currency:      "voucher_channel_listings.currency",
	Minspenamount: "voucher_channel_listings.minspenamount",
}

// Generated where

var VoucherChannelListingWhere = struct {
	ID            whereHelperstring
	Createat      whereHelpernull_Int64
	Voucherid     whereHelperstring
	Channelid     whereHelperstring
	Discountvalue whereHelpernull_Float64
	Currency      whereHelpernull_String
	Minspenamount whereHelpernull_Float64
}{
	ID:            whereHelperstring{field: "\"voucher_channel_listings\".\"id\""},
	Createat:      whereHelpernull_Int64{field: "\"voucher_channel_listings\".\"createat\""},
	Voucherid:     whereHelperstring{field: "\"voucher_channel_listings\".\"voucherid\""},
	Channelid:     whereHelperstring{field: "\"voucher_channel_listings\".\"channelid\""},
	Discountvalue: whereHelpernull_Float64{field: "\"voucher_channel_listings\".\"discountvalue\""},
	Currency:      whereHelpernull_String{field: "\"voucher_channel_listings\".\"currency\""},
	Minspenamount: whereHelpernull_Float64{field: "\"voucher_channel_listings\".\"minspenamount\""},
}

// VoucherChannelListingRels is where relationship names are stored.
var VoucherChannelListingRels = struct {
	ChannelidChannel string
	VoucheridVoucher string
}{
	ChannelidChannel: "ChannelidChannel",
	VoucheridVoucher: "VoucheridVoucher",
}

// voucherChannelListingR is where relationships are stored.
type voucherChannelListingR struct {
	ChannelidChannel *Channel `boil:"ChannelidChannel" json:"ChannelidChannel" toml:"ChannelidChannel" yaml:"ChannelidChannel"`
	VoucheridVoucher *Voucher `boil:"VoucheridVoucher" json:"VoucheridVoucher" toml:"VoucheridVoucher" yaml:"VoucheridVoucher"`
}

// NewStruct creates a new relationship struct
func (*voucherChannelListingR) NewStruct() *voucherChannelListingR {
	return &voucherChannelListingR{}
}

func (r *voucherChannelListingR) GetChannelidChannel() *Channel {
	if r == nil {
		return nil
	}
	return r.ChannelidChannel
}

func (r *voucherChannelListingR) GetVoucheridVoucher() *Voucher {
	if r == nil {
		return nil
	}
	return r.VoucheridVoucher
}

// voucherChannelListingL is where Load methods for each relationship are stored.
type voucherChannelListingL struct{}

var (
	voucherChannelListingAllColumns            = []string{"id", "createat", "voucherid", "channelid", "discountvalue", "currency", "minspenamount"}
	voucherChannelListingColumnsWithoutDefault = []string{"id", "voucherid", "channelid"}
	voucherChannelListingColumnsWithDefault    = []string{"createat", "discountvalue", "currency", "minspenamount"}
	voucherChannelListingPrimaryKeyColumns     = []string{"id"}
	voucherChannelListingGeneratedColumns      = []string{}
)

type (
	// VoucherChannelListingSlice is an alias for a slice of pointers to VoucherChannelListing.
	// This should almost always be used instead of []VoucherChannelListing.
	VoucherChannelListingSlice []*VoucherChannelListing
	// VoucherChannelListingHook is the signature for custom VoucherChannelListing hook methods
	VoucherChannelListingHook func(context.Context, boil.ContextExecutor, *VoucherChannelListing) error

	voucherChannelListingQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	voucherChannelListingType                 = reflect.TypeOf(&VoucherChannelListing{})
	voucherChannelListingMapping              = queries.MakeStructMapping(voucherChannelListingType)
	voucherChannelListingPrimaryKeyMapping, _ = queries.BindMapping(voucherChannelListingType, voucherChannelListingMapping, voucherChannelListingPrimaryKeyColumns)
	voucherChannelListingInsertCacheMut       sync.RWMutex
	voucherChannelListingInsertCache          = make(map[string]insertCache)
	voucherChannelListingUpdateCacheMut       sync.RWMutex
	voucherChannelListingUpdateCache          = make(map[string]updateCache)
	voucherChannelListingUpsertCacheMut       sync.RWMutex
	voucherChannelListingUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var voucherChannelListingAfterSelectHooks []VoucherChannelListingHook

var voucherChannelListingBeforeInsertHooks []VoucherChannelListingHook
var voucherChannelListingAfterInsertHooks []VoucherChannelListingHook

var voucherChannelListingBeforeUpdateHooks []VoucherChannelListingHook
var voucherChannelListingAfterUpdateHooks []VoucherChannelListingHook

var voucherChannelListingBeforeDeleteHooks []VoucherChannelListingHook
var voucherChannelListingAfterDeleteHooks []VoucherChannelListingHook

var voucherChannelListingBeforeUpsertHooks []VoucherChannelListingHook
var voucherChannelListingAfterUpsertHooks []VoucherChannelListingHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VoucherChannelListing) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherChannelListingAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VoucherChannelListing) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherChannelListingBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VoucherChannelListing) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherChannelListingAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VoucherChannelListing) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherChannelListingBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VoucherChannelListing) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherChannelListingAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VoucherChannelListing) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherChannelListingBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VoucherChannelListing) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherChannelListingAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VoucherChannelListing) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherChannelListingBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VoucherChannelListing) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range voucherChannelListingAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVoucherChannelListingHook registers your hook function for all future operations.
func AddVoucherChannelListingHook(hookPoint boil.HookPoint, voucherChannelListingHook VoucherChannelListingHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		voucherChannelListingAfterSelectHooks = append(voucherChannelListingAfterSelectHooks, voucherChannelListingHook)
	case boil.BeforeInsertHook:
		voucherChannelListingBeforeInsertHooks = append(voucherChannelListingBeforeInsertHooks, voucherChannelListingHook)
	case boil.AfterInsertHook:
		voucherChannelListingAfterInsertHooks = append(voucherChannelListingAfterInsertHooks, voucherChannelListingHook)
	case boil.BeforeUpdateHook:
		voucherChannelListingBeforeUpdateHooks = append(voucherChannelListingBeforeUpdateHooks, voucherChannelListingHook)
	case boil.AfterUpdateHook:
		voucherChannelListingAfterUpdateHooks = append(voucherChannelListingAfterUpdateHooks, voucherChannelListingHook)
	case boil.BeforeDeleteHook:
		voucherChannelListingBeforeDeleteHooks = append(voucherChannelListingBeforeDeleteHooks, voucherChannelListingHook)
	case boil.AfterDeleteHook:
		voucherChannelListingAfterDeleteHooks = append(voucherChannelListingAfterDeleteHooks, voucherChannelListingHook)
	case boil.BeforeUpsertHook:
		voucherChannelListingBeforeUpsertHooks = append(voucherChannelListingBeforeUpsertHooks, voucherChannelListingHook)
	case boil.AfterUpsertHook:
		voucherChannelListingAfterUpsertHooks = append(voucherChannelListingAfterUpsertHooks, voucherChannelListingHook)
	}
}

// One returns a single voucherChannelListing record from the query.
func (q voucherChannelListingQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VoucherChannelListing, error) {
	o := &VoucherChannelListing{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for voucher_channel_listings")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VoucherChannelListing records from the query.
func (q voucherChannelListingQuery) All(ctx context.Context, exec boil.ContextExecutor) (VoucherChannelListingSlice, error) {
	var o []*VoucherChannelListing

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to VoucherChannelListing slice")
	}

	if len(voucherChannelListingAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VoucherChannelListing records in the query.
func (q voucherChannelListingQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count voucher_channel_listings rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q voucherChannelListingQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if voucher_channel_listings exists")
	}

	return count > 0, nil
}

// ChannelidChannel pointed to by the foreign key.
func (o *VoucherChannelListing) ChannelidChannel(mods ...qm.QueryMod) channelQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Channelid),
	}

	queryMods = append(queryMods, mods...)

	return Channels(queryMods...)
}

// VoucheridVoucher pointed to by the foreign key.
func (o *VoucherChannelListing) VoucheridVoucher(mods ...qm.QueryMod) voucherQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.Voucherid),
	}

	queryMods = append(queryMods, mods...)

	return Vouchers(queryMods...)
}

// LoadChannelidChannel allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voucherChannelListingL) LoadChannelidChannel(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucherChannelListing interface{}, mods queries.Applicator) error {
	var slice []*VoucherChannelListing
	var object *VoucherChannelListing

	if singular {
		var ok bool
		object, ok = maybeVoucherChannelListing.(*VoucherChannelListing)
		if !ok {
			object = new(VoucherChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucherChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucherChannelListing))
			}
		}
	} else {
		s, ok := maybeVoucherChannelListing.(*[]*VoucherChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucherChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucherChannelListing))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherChannelListingR{}
		}
		args = append(args, object.Channelid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherChannelListingR{}
			}

			for _, a := range args {
				if a == obj.Channelid {
					continue Outer
				}
			}

			args = append(args, obj.Channelid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`channels`),
		qm.WhereIn(`channels.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Channel")
	}

	var resultSlice []*Channel
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Channel")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for channels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for channels")
	}

	if len(channelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChannelidChannel = foreign
		if foreign.R == nil {
			foreign.R = &channelR{}
		}
		foreign.R.ChannelidVoucherChannelListings = append(foreign.R.ChannelidVoucherChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Channelid == foreign.ID {
				local.R.ChannelidChannel = foreign
				if foreign.R == nil {
					foreign.R = &channelR{}
				}
				foreign.R.ChannelidVoucherChannelListings = append(foreign.R.ChannelidVoucherChannelListings, local)
				break
			}
		}
	}

	return nil
}

// LoadVoucheridVoucher allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (voucherChannelListingL) LoadVoucheridVoucher(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVoucherChannelListing interface{}, mods queries.Applicator) error {
	var slice []*VoucherChannelListing
	var object *VoucherChannelListing

	if singular {
		var ok bool
		object, ok = maybeVoucherChannelListing.(*VoucherChannelListing)
		if !ok {
			object = new(VoucherChannelListing)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVoucherChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVoucherChannelListing))
			}
		}
	} else {
		s, ok := maybeVoucherChannelListing.(*[]*VoucherChannelListing)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVoucherChannelListing)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVoucherChannelListing))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &voucherChannelListingR{}
		}
		args = append(args, object.Voucherid)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &voucherChannelListingR{}
			}

			for _, a := range args {
				if a == obj.Voucherid {
					continue Outer
				}
			}

			args = append(args, obj.Voucherid)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vouchers`),
		qm.WhereIn(`vouchers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Voucher")
	}

	var resultSlice []*Voucher
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Voucher")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vouchers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vouchers")
	}

	if len(voucherAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.VoucheridVoucher = foreign
		if foreign.R == nil {
			foreign.R = &voucherR{}
		}
		foreign.R.VoucheridVoucherChannelListings = append(foreign.R.VoucheridVoucherChannelListings, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Voucherid == foreign.ID {
				local.R.VoucheridVoucher = foreign
				if foreign.R == nil {
					foreign.R = &voucherR{}
				}
				foreign.R.VoucheridVoucherChannelListings = append(foreign.R.VoucheridVoucherChannelListings, local)
				break
			}
		}
	}

	return nil
}

// SetChannelidChannel of the voucherChannelListing to the related item.
// Sets o.R.ChannelidChannel to related.
// Adds o to related.R.ChannelidVoucherChannelListings.
func (o *VoucherChannelListing) SetChannelidChannel(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Channel) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"voucher_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channelid"}),
		strmangle.WhereClause("\"", "\"", 2, voucherChannelListingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Channelid = related.ID
	if o.R == nil {
		o.R = &voucherChannelListingR{
			ChannelidChannel: related,
		}
	} else {
		o.R.ChannelidChannel = related
	}

	if related.R == nil {
		related.R = &channelR{
			ChannelidVoucherChannelListings: VoucherChannelListingSlice{o},
		}
	} else {
		related.R.ChannelidVoucherChannelListings = append(related.R.ChannelidVoucherChannelListings, o)
	}

	return nil
}

// SetVoucheridVoucher of the voucherChannelListing to the related item.
// Sets o.R.VoucheridVoucher to related.
// Adds o to related.R.VoucheridVoucherChannelListings.
func (o *VoucherChannelListing) SetVoucheridVoucher(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Voucher) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"voucher_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"voucherid"}),
		strmangle.WhereClause("\"", "\"", 2, voucherChannelListingPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Voucherid = related.ID
	if o.R == nil {
		o.R = &voucherChannelListingR{
			VoucheridVoucher: related,
		}
	} else {
		o.R.VoucheridVoucher = related
	}

	if related.R == nil {
		related.R = &voucherR{
			VoucheridVoucherChannelListings: VoucherChannelListingSlice{o},
		}
	} else {
		related.R.VoucheridVoucherChannelListings = append(related.R.VoucheridVoucherChannelListings, o)
	}

	return nil
}

// VoucherChannelListings retrieves all the records using an executor.
func VoucherChannelListings(mods ...qm.QueryMod) voucherChannelListingQuery {
	mods = append(mods, qm.From("\"voucher_channel_listings\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"voucher_channel_listings\".*"})
	}

	return voucherChannelListingQuery{q}
}

// FindVoucherChannelListing retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVoucherChannelListing(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*VoucherChannelListing, error) {
	voucherChannelListingObj := &VoucherChannelListing{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"voucher_channel_listings\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, voucherChannelListingObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from voucher_channel_listings")
	}

	if err = voucherChannelListingObj.doAfterSelectHooks(ctx, exec); err != nil {
		return voucherChannelListingObj, err
	}

	return voucherChannelListingObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VoucherChannelListing) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no voucher_channel_listings provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherChannelListingColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	voucherChannelListingInsertCacheMut.RLock()
	cache, cached := voucherChannelListingInsertCache[key]
	voucherChannelListingInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			voucherChannelListingAllColumns,
			voucherChannelListingColumnsWithDefault,
			voucherChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(voucherChannelListingType, voucherChannelListingMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(voucherChannelListingType, voucherChannelListingMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"voucher_channel_listings\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"voucher_channel_listings\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into voucher_channel_listings")
	}

	if !cached {
		voucherChannelListingInsertCacheMut.Lock()
		voucherChannelListingInsertCache[key] = cache
		voucherChannelListingInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VoucherChannelListing.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VoucherChannelListing) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	voucherChannelListingUpdateCacheMut.RLock()
	cache, cached := voucherChannelListingUpdateCache[key]
	voucherChannelListingUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			voucherChannelListingAllColumns,
			voucherChannelListingPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update voucher_channel_listings, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"voucher_channel_listings\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, voucherChannelListingPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(voucherChannelListingType, voucherChannelListingMapping, append(wl, voucherChannelListingPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update voucher_channel_listings row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for voucher_channel_listings")
	}

	if !cached {
		voucherChannelListingUpdateCacheMut.Lock()
		voucherChannelListingUpdateCache[key] = cache
		voucherChannelListingUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q voucherChannelListingQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for voucher_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for voucher_channel_listings")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VoucherChannelListingSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"voucher_channel_listings\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, voucherChannelListingPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in voucherChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all voucherChannelListing")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VoucherChannelListing) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no voucher_channel_listings provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(voucherChannelListingColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	voucherChannelListingUpsertCacheMut.RLock()
	cache, cached := voucherChannelListingUpsertCache[key]
	voucherChannelListingUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			voucherChannelListingAllColumns,
			voucherChannelListingColumnsWithDefault,
			voucherChannelListingColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			voucherChannelListingAllColumns,
			voucherChannelListingPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert voucher_channel_listings, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(voucherChannelListingPrimaryKeyColumns))
			copy(conflict, voucherChannelListingPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"voucher_channel_listings\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(voucherChannelListingType, voucherChannelListingMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(voucherChannelListingType, voucherChannelListingMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert voucher_channel_listings")
	}

	if !cached {
		voucherChannelListingUpsertCacheMut.Lock()
		voucherChannelListingUpsertCache[key] = cache
		voucherChannelListingUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VoucherChannelListing record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VoucherChannelListing) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no VoucherChannelListing provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), voucherChannelListingPrimaryKeyMapping)
	sql := "DELETE FROM \"voucher_channel_listings\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from voucher_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for voucher_channel_listings")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q voucherChannelListingQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no voucherChannelListingQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from voucher_channel_listings")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for voucher_channel_listings")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VoucherChannelListingSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(voucherChannelListingBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"voucher_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherChannelListingPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from voucherChannelListing slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for voucher_channel_listings")
	}

	if len(voucherChannelListingAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VoucherChannelListing) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVoucherChannelListing(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VoucherChannelListingSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VoucherChannelListingSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), voucherChannelListingPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"voucher_channel_listings\".* FROM \"voucher_channel_listings\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, voucherChannelListingPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VoucherChannelListingSlice")
	}

	*o = slice

	return nil
}

// VoucherChannelListingExists checks if the VoucherChannelListing row exists.
func VoucherChannelListingExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"voucher_channel_listings\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if voucher_channel_listings exists")
	}

	return exists, nil
}

// Exists checks if the VoucherChannelListing row exists.
func (o *VoucherChannelListing) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VoucherChannelListingExists(ctx, exec, o.ID)
}
