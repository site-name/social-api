// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPageTranslations(t *testing.T) {
	t.Parallel()

	query := PageTranslations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPageTranslationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PageTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPageTranslationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := PageTranslations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PageTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPageTranslationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PageTranslationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := PageTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPageTranslationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PageTranslationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if PageTranslation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PageTranslationExists to return true, but got false.")
	}
}

func testPageTranslationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	pageTranslationFound, err := FindPageTranslation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if pageTranslationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPageTranslationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = PageTranslations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPageTranslationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := PageTranslations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPageTranslationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	pageTranslationOne := &PageTranslation{}
	pageTranslationTwo := &PageTranslation{}
	if err = randomize.Struct(seed, pageTranslationOne, pageTranslationDBTypes, false, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}
	if err = randomize.Struct(seed, pageTranslationTwo, pageTranslationDBTypes, false, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pageTranslationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pageTranslationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PageTranslations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPageTranslationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	pageTranslationOne := &PageTranslation{}
	pageTranslationTwo := &PageTranslation{}
	if err = randomize.Struct(seed, pageTranslationOne, pageTranslationDBTypes, false, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}
	if err = randomize.Struct(seed, pageTranslationTwo, pageTranslationDBTypes, false, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = pageTranslationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = pageTranslationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PageTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func pageTranslationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *PageTranslation) error {
	*o = PageTranslation{}
	return nil
}

func pageTranslationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *PageTranslation) error {
	*o = PageTranslation{}
	return nil
}

func pageTranslationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *PageTranslation) error {
	*o = PageTranslation{}
	return nil
}

func pageTranslationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PageTranslation) error {
	*o = PageTranslation{}
	return nil
}

func pageTranslationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *PageTranslation) error {
	*o = PageTranslation{}
	return nil
}

func pageTranslationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PageTranslation) error {
	*o = PageTranslation{}
	return nil
}

func pageTranslationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *PageTranslation) error {
	*o = PageTranslation{}
	return nil
}

func pageTranslationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PageTranslation) error {
	*o = PageTranslation{}
	return nil
}

func pageTranslationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *PageTranslation) error {
	*o = PageTranslation{}
	return nil
}

func testPageTranslationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &PageTranslation{}
	o := &PageTranslation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize PageTranslation object: %s", err)
	}

	AddPageTranslationHook(boil.BeforeInsertHook, pageTranslationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	pageTranslationBeforeInsertHooks = []PageTranslationHook{}

	AddPageTranslationHook(boil.AfterInsertHook, pageTranslationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	pageTranslationAfterInsertHooks = []PageTranslationHook{}

	AddPageTranslationHook(boil.AfterSelectHook, pageTranslationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	pageTranslationAfterSelectHooks = []PageTranslationHook{}

	AddPageTranslationHook(boil.BeforeUpdateHook, pageTranslationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	pageTranslationBeforeUpdateHooks = []PageTranslationHook{}

	AddPageTranslationHook(boil.AfterUpdateHook, pageTranslationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	pageTranslationAfterUpdateHooks = []PageTranslationHook{}

	AddPageTranslationHook(boil.BeforeDeleteHook, pageTranslationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	pageTranslationBeforeDeleteHooks = []PageTranslationHook{}

	AddPageTranslationHook(boil.AfterDeleteHook, pageTranslationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	pageTranslationAfterDeleteHooks = []PageTranslationHook{}

	AddPageTranslationHook(boil.BeforeUpsertHook, pageTranslationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	pageTranslationBeforeUpsertHooks = []PageTranslationHook{}

	AddPageTranslationHook(boil.AfterUpsertHook, pageTranslationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	pageTranslationAfterUpsertHooks = []PageTranslationHook{}
}

func testPageTranslationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PageTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPageTranslationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(pageTranslationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := PageTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPageTranslationToOnePageUsingPage(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local PageTranslation
	var foreign Page

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pageDBTypes, false, pageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Page struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PageID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Page().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddPageHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Page) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := PageTranslationSlice{&local}
	if err = local.L.LoadPage(ctx, tx, false, (*[]*PageTranslation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Page = nil
	if err = local.L.LoadPage(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Page == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testPageTranslationToOneSetOpPageUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageTranslation
	var b, c Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageTranslationDBTypes, false, strmangle.SetComplement(pageTranslationPrimaryKeyColumns, pageTranslationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Page{&b, &c} {
		err = a.SetPage(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Page != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PageTranslations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PageID, x.ID) {
			t.Error("foreign key was wrong value", a.PageID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PageID))
		reflect.Indirect(reflect.ValueOf(&a.PageID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PageID, x.ID) {
			t.Error("foreign key was wrong value", a.PageID, x.ID)
		}
	}
}

func testPageTranslationToOneRemoveOpPageUsingPage(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a PageTranslation
	var b Page

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, pageTranslationDBTypes, false, strmangle.SetComplement(pageTranslationPrimaryKeyColumns, pageTranslationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pageDBTypes, false, strmangle.SetComplement(pagePrimaryKeyColumns, pageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPage(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePage(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Page().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Page != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PageID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PageTranslations) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPageTranslationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPageTranslationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PageTranslationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPageTranslationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := PageTranslations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	pageTranslationDBTypes = map[string]string{`ID`: `character varying`, `LanguageCode`: `character varying`, `PageID`: `character varying`, `Title`: `character varying`, `Content`: `text`, `SeoTitle`: `character varying`, `SeoDescription`: `character varying`}
	_                      = bytes.MinRead
)

func testPageTranslationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(pageTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(pageTranslationAllColumns) == len(pageTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PageTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPageTranslationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(pageTranslationAllColumns) == len(pageTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &PageTranslation{}
	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := PageTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, pageTranslationDBTypes, true, pageTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(pageTranslationAllColumns, pageTranslationPrimaryKeyColumns) {
		fields = pageTranslationAllColumns
	} else {
		fields = strmangle.SetComplement(
			pageTranslationAllColumns,
			pageTranslationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PageTranslationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPageTranslationsUpsert(t *testing.T) {
	t.Parallel()

	if len(pageTranslationAllColumns) == len(pageTranslationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := PageTranslation{}
	if err = randomize.Struct(seed, &o, pageTranslationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PageTranslation: %s", err)
	}

	count, err := PageTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, pageTranslationDBTypes, false, pageTranslationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PageTranslation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert PageTranslation: %s", err)
	}

	count, err = PageTranslations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
